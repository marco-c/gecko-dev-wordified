From
:
Michael
Froman
<
mfroman
mozilla
.
com
>
Date
:
Tue
8
Jul
2025
12
:
33
:
20
-
0500
Subject
:
Bug
1921707
-
point
to
new
build
directory
location
in
third_party
/
chromium
/
build
r
=
ng
glandium
Ran
:
ack
-
l
"
\
"
/
/
build
/
"
third_party
/
chromium
/
build
|
xargs
sed
-
i
.
bak
-
E
'
s
/
\
"
\
/
\
/
build
\
/
/
\
"
\
/
\
/
chromium
\
/
build
\
/
/
'
ack
-
l
"
\
"
/
/
build
:
"
third_party
/
chromium
/
build
|
xargs
sed
-
i
.
bak
-
E
'
s
/
\
"
\
/
\
/
build
:
/
\
"
\
/
\
/
chromium
\
/
build
:
/
'
find
third_party
-
name
"
*
.
bak
"
|
xargs
rm
hg
revert
\
third_party
/
chromium
/
build
/
android
/
pylib
/
utils
/
gold_utils
.
py
\
third_party
/
chromium
/
build
/
args
/
README
.
txt
\
third_party
/
chromium
/
build
/
args
/
chromeos
/
README
.
md
\
third_party
/
chromium
/
build
/
gn_helpers_unittest
.
py
\
third_party
/
chromium
/
build
/
locale_tool
.
py
\
third_party
/
chromium
/
build
/
toolchain
/
linux
/
unbundle
/
README
.
md
Differential
Revision
:
https
:
/
/
phabricator
.
services
.
mozilla
.
com
/
D224542
Mercurial
Revision
:
https
:
/
/
hg
.
mozilla
.
org
/
mozilla
-
central
/
rev
/
6b855a2bf6b1f3feb9c6558a9357fed8e43c5b99
-
-
-
BUILD
.
gn
|
16
+
-
PRESUBMIT_test
.
py
|
2
+
-
android
/
BUILD
.
gn
|
26
+
-
android
/
DIR_METADATA
|
2
+
-
android
/
bytecode
/
BUILD
.
gn
|
2
+
-
android
/
gtest_apk
/
BUILD
.
gn
|
2
+
-
android
/
gyp
/
test
/
BUILD
.
gn
|
2
+
-
android
/
incremental_install
/
BUILD
.
gn
|
2
+
-
.
.
.
/
AndroidHiddenApiBypass
/
BUILD
.
gn
|
4
+
-
android
/
native_flags
/
BUILD
.
gn
|
4
+
-
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
|
2
+
-
android
/
resource_sizes
.
gni
|
6
+
-
android
/
stacktrace
/
BUILD
.
gn
|
2
+
-
android
/
test
/
BUILD
.
gn
|
14
+
-
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
|
4
+
-
android
/
test
/
missing_symbol_test
.
gni
|
6
+
-
android
/
test
/
nocompile_gn
/
BUILD
.
gn
|
8
+
-
android
/
test_wrapper
/
logdog_wrapper
.
gni
|
4
+
-
android
/
unused_resources
/
BUILD
.
gn
|
4
+
-
apple
/
apple_info_plist
.
gni
|
2
+
-
apple
/
compile_entitlements
.
gni
|
2
+
-
apple
/
compile_plist
.
gni
|
4
+
-
apple
/
convert_plist
.
gni
|
2
+
-
apple
/
tweak_info_plist
.
gni
|
8
+
-
args
/
headless
.
gn
|
2
+
-
buildflag_header
.
gni
|
4
+
-
chromeos
/
crosier_tests
.
gni
|
2
+
-
chromeos
/
embed_sections
.
gni
|
4
+
-
cipd
/
cipd
.
gni
|
2
+
-
compiled_action
.
gni
|
4
+
-
config
/
BUILD
.
gn
|
62
+
-
-
config
/
BUILDCONFIG
.
gn
|
170
+
+
+
-
-
-
-
config
/
aix
/
BUILD
.
gn
|
4
+
-
config
/
android
/
BUILD
.
gn
|
14
+
-
config
/
android
/
DIR_METADATA
|
2
+
-
config
/
android
/
abi
.
gni
|
4
+
-
config
/
android
/
android_nocompile
.
gni
|
8
+
-
config
/
android
/
build_vars
.
gni
|
2
+
-
config
/
android
/
config
.
gni
|
18
+
-
config
/
android
/
copy_ex
.
gni
|
4
+
-
config
/
android
/
create_unwind_table
.
gni
|
4
+
-
config
/
android
/
extract_unwind_tables
.
gni
|
4
+
-
config
/
android
/
internal_rules
.
gni
|
104
+
+
-
-
config
/
android
/
linker_version_script
.
gni
|
6
+
-
config
/
android
/
rules
.
gni
|
126
+
+
-
-
-
config
/
android
/
system_image
.
gni
|
10
+
-
config
/
android
/
test
/
proto
/
BUILD
.
gn
|
2
+
-
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
|
2
+
-
config
/
apple
/
BUILD
.
gn
|
2
+
-
config
/
apple
/
create_signed_bundle
.
gni
|
10
+
-
config
/
apple
/
mobile_bundle_data
.
gni
|
6
+
-
config
/
apple
/
mobile_config
.
gni
|
4
+
-
config
/
apple
/
swift_source_set
.
gni
|
2
+
-
config
/
apple
/
symbols
.
gni
|
4
+
-
config
/
arm
.
gni
|
4
+
-
config
/
buildflags_paint_preview
.
gni
|
4
+
-
config
/
c
+
+
/
BUILD
.
gn
|
10
+
-
config
/
c
+
+
/
c
+
+
.
gni
|
6
+
-
config
/
chromebox_for_meetings
/
BUILD
.
gn
|
4
+
-
config
/
chromecast
/
BUILD
.
gn
|
2
+
-
config
/
chromeos
/
BUILD
.
gn
|
2
+
-
config
/
chromeos
/
rules
.
gni
|
38
+
-
config
/
chromeos
/
ui_mode
.
gni
|
2
+
-
config
/
clang
/
BUILD
.
gn
|
8
+
-
config
/
clang
/
clang
.
gni
|
10
+
-
config
/
compiler
/
BUILD
.
gn
|
122
+
+
-
-
-
config
/
compiler
/
compiler
.
gni
|
26
+
-
config
/
compiler
/
pgo
/
BUILD
.
gn
|
10
+
-
config
/
compiler
/
pgo
/
pgo
.
gni
|
14
+
-
config
/
coverage
/
BUILD
.
gn
|
8
+
-
config
/
coverage
/
coverage
.
gni
|
2
+
-
config
/
cuttlefish
/
BUILD
.
gn
|
4
+
-
config
/
dcheck_always_on
.
gni
|
2
+
-
config
/
devtools
.
gni
|
2
+
-
config
/
features
.
gni
|
4
+
-
config
/
freetype
/
BUILD
.
gn
|
6
+
-
config
/
fuchsia
/
BUILD
.
gn
|
10
+
-
config
/
fuchsia
/
DIR_METADATA
|
2
+
-
config
/
fuchsia
/
generate_runner_scripts
.
gni
|
16
+
-
.
.
.
ackaged_content_embedder_excluded_dirs
.
gni
|
2
+
-
.
.
.
/
size_optimized_cast_receiver_args
.
gn
|
2
+
-
.
.
.
e_optimized_cast_receiver_args_internal
.
gn
|
2
+
-
config
/
fuchsia
/
sizes
.
gni
|
6
+
-
config
/
fuchsia
/
symbol_archive
.
gni
|
2
+
-
.
.
.
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
|
2
+
-
.
.
.
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
|
2
+
-
.
.
.
/
fuchsia
/
test
/
web_instance
.
shard
.
test
-
cml
|
12
+
-
config
/
gcc
/
BUILD
.
gn
|
12
+
-
config
/
host_byteorder
.
gni
|
2
+
-
config
/
ios
/
BUILD
.
gn
|
20
+
-
config
/
ios
/
config
.
gni
|
2
+
-
config
/
ios
/
ios_sdk
.
gni
|
12
+
-
config
/
ios
/
ios_sdk_overrides
.
gni
|
2
+
-
config
/
ios
/
ios_test_runner_wrapper
.
gni
|
8
+
-
config
/
ios
/
ios_test_runner_xcuitest
.
gni
|
4
+
-
config
/
ios
/
rules
.
gni
|
60
+
-
-
config
/
linux
/
BUILD
.
gn
|
12
+
-
config
/
linux
/
atk
/
BUILD
.
gn
|
8
+
-
config
/
linux
/
atspi2
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
dbus
/
BUILD
.
gn
|
6
+
-
config
/
linux
/
dri
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
gtk
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
gtk
/
gtk
.
gni
|
2
+
-
config
/
linux
/
libdrm
/
BUILD
.
gn
|
6
+
-
config
/
linux
/
libffi
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
libva
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
nss
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
pangocairo
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
pangocairo
/
pangocairo
.
gni
|
4
+
-
config
/
linux
/
pkg_config
.
gni
|
6
+
-
config
/
locales
.
gni
|
2
+
-
config
/
logging
.
gni
|
2
+
-
config
/
loongarch64
.
gni
|
2
+
-
config
/
mac
/
BUILD
.
gn
|
14
+
-
config
/
mac
/
mac_sdk
.
gni
|
18
+
-
config
/
mac
/
rules
.
gni
|
16
+
-
config
/
mips
.
gni
|
2
+
-
config
/
nacl
/
BUILD
.
gn
|
2
+
-
config
/
nacl
/
config
.
gni
|
2
+
-
config
/
nacl
/
host_toolchain
.
gni
|
4
+
-
config
/
nacl
/
rules
.
gni
|
4
+
-
config
/
ozone
.
gni
|
6
+
-
config
/
pch
.
gni
|
6
+
-
config
/
posix
/
BUILD
.
gn
|
4
+
-
config
/
profiling
/
profiling
.
gni
|
4
+
-
config
/
python
.
gni
|
4
+
-
config
/
riscv
.
gni
|
2
+
-
config
/
rust
.
gni
|
14
+
-
config
/
sanitizers
/
BUILD
.
gn
|
30
+
-
config
/
sanitizers
/
sanitizers
.
gni
|
26
+
-
config
/
sysroot
.
gni
|
10
+
-
config
/
ui
.
gni
|
8
+
-
config
/
v8_target_cpu
.
gni
|
12
+
-
config
/
win
/
BUILD
.
gn
|
26
+
-
config
/
win
/
console_app
.
gni
|
2
+
-
config
/
win
/
control_flow_guard
.
gni
|
2
+
-
config
/
win
/
manifest
.
gni
|
10
+
-
config
/
zip
.
gni
|
2
+
-
config
/
zos
/
BUILD
.
gn
|
4
+
-
dotfile_settings
.
gni
|
66
+
-
-
fuchsia
/
DIR_METADATA
|
2
+
-
fuchsia
/
cipd
/
BUILD
.
gn
|
10
+
-
fuchsia
/
cipd
/
DIR_METADATA
|
2
+
-
fuchsia
/
test
/
BUILD
.
gn
|
4
+
-
fuchsia
/
test
/
run_pytype
.
py
|
2
+
-
gn_logs
.
gni
|
18
+
-
ios
/
intent_definition
.
gni
|
6
+
-
linux
/
BUILD
.
gn
|
8
+
-
linux
/
extract_symbols
.
gni
|
6
+
-
linux
/
strip_binary
.
gni
|
4
+
-
linux
/
unbundle
/
absl_algorithm
.
gn
|
4
+
-
linux
/
unbundle
/
absl_base
.
gn
|
4
+
-
linux
/
unbundle
/
absl_cleanup
.
gn
|
4
+
-
linux
/
unbundle
/
absl_container
.
gn
|
4
+
-
linux
/
unbundle
/
absl_debugging
.
gn
|
4
+
-
linux
/
unbundle
/
absl_flags
.
gn
|
4
+
-
linux
/
unbundle
/
absl_functional
.
gn
|
4
+
-
linux
/
unbundle
/
absl_hash
.
gn
|
4
+
-
linux
/
unbundle
/
absl_log
.
gn
|
4
+
-
linux
/
unbundle
/
absl_memory
.
gn
|
4
+
-
linux
/
unbundle
/
absl_meta
.
gn
|
4
+
-
linux
/
unbundle
/
absl_numeric
.
gn
|
4
+
-
linux
/
unbundle
/
absl_random
.
gn
|
4
+
-
linux
/
unbundle
/
absl_status
.
gn
|
4
+
-
linux
/
unbundle
/
absl_strings
.
gn
|
4
+
-
linux
/
unbundle
/
absl_synchronization
.
gn
|
4
+
-
linux
/
unbundle
/
absl_time
.
gn
|
4
+
-
linux
/
unbundle
/
absl_types
.
gn
|
4
+
-
linux
/
unbundle
/
absl_utility
.
gn
|
4
+
-
linux
/
unbundle
/
brotli
.
gn
|
4
+
-
linux
/
unbundle
/
crc32c
.
gn
|
2
+
-
linux
/
unbundle
/
dav1d
.
gn
|
4
+
-
linux
/
unbundle
/
double
-
conversion
.
gn
|
2
+
-
linux
/
unbundle
/
ffmpeg
.
gn
|
6
+
-
linux
/
unbundle
/
flac
.
gn
|
4
+
-
linux
/
unbundle
/
flatbuffers
.
gn
|
2
+
-
linux
/
unbundle
/
highway
.
gn
|
4
+
-
linux
/
unbundle
/
icu
.
gn
|
4
+
-
linux
/
unbundle
/
jsoncpp
.
gn
|
4
+
-
linux
/
unbundle
/
libXNVCtrl
.
gn
|
2
+
-
linux
/
unbundle
/
libaom
.
gn
|
6
+
-
linux
/
unbundle
/
libavif
.
gn
|
4
+
-
linux
/
unbundle
/
libdrm
.
gn
|
4
+
-
linux
/
unbundle
/
libpng
.
gn
|
4
+
-
linux
/
unbundle
/
libsecret
.
gn
|
2
+
-
linux
/
unbundle
/
libusb
.
gn
|
4
+
-
linux
/
unbundle
/
libvpx
.
gn
|
4
+
-
linux
/
unbundle
/
libwebp
.
gn
|
4
+
-
linux
/
unbundle
/
libxml
.
gn
|
2
+
-
linux
/
unbundle
/
libxslt
.
gn
|
2
+
-
linux
/
unbundle
/
libyuv
.
gn
|
4
+
-
linux
/
unbundle
/
openh264
.
gn
|
6
+
-
linux
/
unbundle
/
opus
.
gn
|
4
+
-
linux
/
unbundle
/
re2
.
gn
|
6
+
-
linux
/
unbundle
/
simdutf
.
gn
|
4
+
-
linux
/
unbundle
/
snappy
.
gn
|
2
+
-
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Headers
.
gn
|
2
+
-
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Tools
.
gn
|
4
+
-
linux
/
unbundle
/
vulkan
-
SPIRV
-
Headers
.
gn
|
2
+
-
linux
/
unbundle
/
vulkan
-
SPIRV
-
Tools
.
gn
|
4
+
-
linux
/
unbundle
/
woff2
.
gn
|
4
+
-
linux
/
unbundle
/
zlib
.
gn
|
2
+
-
linux
/
unbundle
/
zstd
.
gn
|
4
+
-
nocompile
.
gni
|
8
+
-
partitioned_shared_library
.
gni
|
10
+
-
private_code_test
/
BUILD
.
gn
|
2
+
-
private_code_test
/
private_code_test
.
gni
|
8
+
-
rust
/
BUILD
.
gn
|
4
+
-
rust
/
cargo_crate
.
gni
|
20
+
-
rust
/
chromium_prelude
/
BUILD
.
gn
|
6
+
-
rust
/
chromium_prelude
/
import_test
.
rs
|
6
+
-
rust
/
crubit
/
BUILD
.
gn
|
6
+
-
rust
/
rs_bindings_from_cc
.
gni
|
14
+
-
rust
/
rust_bindgen
.
gni
|
14
+
-
rust
/
rust_bindgen_generator
.
gni
|
18
+
-
rust
/
rust_executable
.
gni
|
2
+
-
rust
/
rust_macro
.
gni
|
4
+
-
rust
/
rust_shared_library
.
gni
|
2
+
-
rust
/
rust_static_library
.
gni
|
4
+
-
rust
/
rust_target
.
gni
|
22
+
-
rust
/
rust_unit_test
.
gni
|
8
+
-
rust
/
std
/
BUILD
.
gn
|
10
+
-
rust
/
std
/
BUILD
.
gn
.
hbs
|
22
+
-
rust
/
std
/
rules
/
BUILD
.
gn
|
454
+
+
+
+
+
+
+
+
+
-
-
-
-
-
-
-
-
-
rust
/
tests
/
BUILD
.
gn
|
86
+
+
-
-
rust
/
tests
/
bindgen_cpp_test
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
bindgen_cpp_test
/
main
.
rs
|
2
+
-
.
.
.
/
BUILD
.
gn
|
4
+
-
.
.
.
/
bindgen_cpp_test_with_cpp_linkage
/
lib
.
rs
|
2
+
-
rust
/
tests
/
bindgen_static_fns_test
/
BUILD
.
gn
|
6
+
-
rust
/
tests
/
bindgen_static_fns_test
/
main
.
rs
|
2
+
-
rust
/
tests
/
bindgen_static_fns_test
/
src
/
lib
.
rs
|
2
+
-
rust
/
tests
/
bindgen_test
/
BUILD
.
gn
|
6
+
-
rust
/
tests
/
bindgen_test
/
main
.
rs
|
2
+
-
rust
/
tests
/
bindgen_test
/
src
/
lib
.
rs
|
2
+
-
rust
/
tests
/
test_aliased_deps
/
BUILD
.
gn
|
6
+
-
rust
/
tests
/
test_aliased_deps
/
main
.
rs
|
2
+
-
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
|
2
+
-
.
.
.
/
test_build_rs_target_arch_x86
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_control_flow_guard
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
|
6
+
-
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_proc_macro_crate_2
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rlib_crate_testonly
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rs_bindings_from_cc
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
test_rust_calling_cpp
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
|
10
+
-
rust
/
tests
/
test_rust_exe
/
main
.
rs
|
4
+
-
rust
/
tests
/
test_rust_exe_2
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
test_rust_metadata
/
BUILD
.
gn
|
10
+
-
rust
/
tests
/
test_rust_metadata
/
lib
.
rs
|
2
+
-
rust
/
tests
/
test_rust_metadata
/
main
.
rs
|
2
+
-
rust
/
tests
/
test_rust_metadata
/
tests
.
rs
|
2
+
-
.
.
.
/
BUILD
.
gn
|
8
+
-
.
.
.
/
main
.
rs
|
2
+
-
.
.
.
/
v1
/
BUILD
.
gn
|
2
+
-
.
.
.
/
v2
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
|
2
+
-
.
.
.
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
test_rust_unittests
/
main
.
rs
|
2
+
-
rust
/
tests
/
test_serde_json_lenient
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_simple_rust_exe
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
windows_sys_test
/
BUILD
.
gn
|
6
+
-
symlink
.
gni
|
2
+
-
timestamp
.
gni
|
2
+
-
toolchain
/
BUILD
.
gn
|
4
+
-
toolchain
/
aix
/
BUILD
.
gn
|
2
+
-
toolchain
/
android
/
BUILD
.
gn
|
14
+
-
toolchain
/
android
/
DIR_METADATA
|
2
+
-
toolchain
/
apple
/
BUILD
.
gn
|
2
+
-
toolchain
/
apple
/
toolchain
.
gni
|
62
+
-
-
toolchain
/
cc_wrapper
.
gni
|
2
+
-
toolchain
/
concurrent_links
.
gni
|
14
+
-
toolchain
/
cros
/
BUILD
.
gn
|
10
+
-
toolchain
/
cros_toolchain
.
gni
|
4
+
-
toolchain
/
fuchsia
/
BUILD
.
gn
|
2
+
-
toolchain
/
fuchsia
/
DIR_METADATA
|
2
+
-
toolchain
/
gcc_toolchain
.
gni
|
46
+
-
toolchain
/
ios
/
BUILD
.
gn
|
4
+
-
toolchain
/
linux
/
BUILD
.
gn
|
10
+
-
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
|
2
+
-
toolchain
/
mac
/
BUILD
.
gn
|
6
+
-
toolchain
/
nacl
/
BUILD
.
gn
|
6
+
-
toolchain
/
nacl_toolchain
.
gni
|
4
+
-
toolchain
/
rbe
.
gni
|
6
+
-
toolchain
/
siso
.
gni
|
4
+
-
toolchain
/
toolchain
.
gni
|
6
+
-
toolchain
/
wasm
/
BUILD
.
gn
|
2
+
-
toolchain
/
win
/
BUILD
.
gn
|
6
+
-
toolchain
/
win
/
midl
.
gni
|
4
+
-
toolchain
/
win
/
toolchain
.
gni
|
44
+
-
toolchain
/
win
/
win_toolchain_data
.
gni
|
8
+
-
toolchain
/
zos
/
BUILD
.
gn
|
6
+
-
util
/
BUILD
.
gn
|
10
+
-
util
/
branding
.
gni
|
2
+
-
util
/
generate_wrapper
.
gni
|
2
+
-
util
/
java_action
.
gni
|
2
+
-
util
/
lastchange
.
gni
|
4
+
-
util
/
process_version
.
gni
|
6
+
-
win
/
BUILD
.
gn
|
10
+
-
win
/
message_compiler
.
gni
|
2
+
-
304
files
changed
1508
insertions
(
+
)
1508
deletions
(
-
)
diff
-
-
git
a
/
BUILD
.
gn
b
/
BUILD
.
gn
index
c159f3233
.
.
42942a955
100644
-
-
-
a
/
BUILD
.
gn
+
+
+
b
/
BUILD
.
gn
-
2
16
+
2
16
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
process_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
process_version
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
}
source_set
(
"
buildflag_header_h
"
)
{
-
125
7
+
125
7
if
(
build_with_chromium
)
{
group
(
"
gold_common_pytype
"
)
{
testonly
=
true
-
data
=
[
"
/
/
build
/
skia_gold_common
/
"
]
+
data
=
[
"
/
/
chromium
/
build
/
skia_gold_common
/
"
]
data_deps
=
[
"
/
/
testing
:
pytype_dependencies
"
]
}
diff
-
-
git
a
/
PRESUBMIT_test
.
py
b
/
PRESUBMIT_test
.
py
index
c39c19cbf
.
.
adab1bd8d
100755
-
-
-
a
/
PRESUBMIT_test
.
py
+
+
+
b
/
PRESUBMIT_test
.
py
-
34
7
+
34
7
class
CheckNoBadDepsTest
(
unittest
.
TestCase
)
:
_fails_deps_check
(
'
import
(
"
/
/
third_party
/
foo
"
)
'
filename
=
'
foo
.
gni
'
)
)
def
testPaths
(
self
)
:
-
self
.
assertFalse
(
_fails_deps_check
(
'
import
(
"
/
/
build
/
things
.
gni
"
)
'
)
)
+
self
.
assertFalse
(
_fails_deps_check
(
'
import
(
"
/
/
chromium
/
build
/
things
.
gni
"
)
'
)
)
self
.
assertTrue
(
_fails_deps_check
(
'
import
(
"
/
/
chrome
/
things
.
gni
"
)
'
)
)
diff
-
-
git
a
/
android
/
BUILD
.
gn
b
/
android
/
BUILD
.
gn
index
bae601822
.
.
66c26fddc
100644
-
-
-
a
/
android
/
BUILD
.
gn
+
+
+
b
/
android
/
BUILD
.
gn
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
build_vars
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
build_vars
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
build_with_chromium
)
{
-
102
7
+
102
7
if
(
enable_java_templates
)
{
deps
=
[
"
:
junit_test_assets
"
"
:
junit_test_resources
"
-
"
/
/
build
/
android
/
test
/
incremental_javac_gn
:
no_signature_change_prebuilt_java
"
+
"
/
/
chromium
/
build
/
android
/
test
/
incremental_javac_gn
:
no_signature_change_prebuilt_java
"
"
/
/
third_party
/
junit
"
]
}
-
129
8
+
129
8
if
(
defined
(
sanitizer_arch
)
)
{
python_library
(
"
test_result_presentations_py
"
)
{
pydeps_file
=
"
pylib
/
results
/
presentation
/
test_results_presentation
.
pydeps
"
data
=
[
-
"
/
/
build
/
android
/
pylib
/
results
/
presentation
/
template
"
-
"
/
/
build
/
android
/
pylib
/
results
/
presentation
/
javascript
/
main_html
.
js
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
results
/
presentation
/
template
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
results
/
presentation
/
javascript
/
main_html
.
js
"
"
/
/
third_party
/
catapult
/
third_party
/
gsutil
/
"
"
/
/
third_party
/
jinja2
/
debug
.
py
"
"
/
/
third_party
/
six
"
-
146
7
+
146
7
python_library
(
"
devil_chromium_py
"
)
{
"
/
/
third_party
/
catapult
/
devil
/
devil
/
devil_dependencies
.
json
"
#
Read
by
gn_helpers
.
BuildWithChromium
(
)
-
"
/
/
build
/
config
/
gclient_args
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
]
}
-
157
7
+
157
7
group
(
"
apk_installer_data
"
)
{
if
(
build_with_chromium
)
{
if
(
!
is_component_build
)
{
data_deps
=
[
-
"
/
/
build
/
android
/
pylib
/
device
/
commands
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
device
/
commands
"
"
/
/
tools
/
android
/
devil_util
"
]
}
-
234
7
+
234
7
group
(
"
test_runner_device_support
"
)
{
#
Proguard
is
needed
only
when
using
apks
(
rather
than
native
executables
)
.
if
(
enable_java_templates
)
{
-
data_deps
+
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
}
}
diff
-
-
git
a
/
android
/
DIR_METADATA
b
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
android
/
DIR_METADATA
+
+
+
b
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
android
/
bytecode
/
BUILD
.
gn
b
/
android
/
bytecode
/
BUILD
.
gn
index
7849ea393
.
.
91080bb64
100644
-
-
-
a
/
android
/
bytecode
/
BUILD
.
gn
+
+
+
b
/
android
/
bytecode
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_binary
(
"
trace_event_adder
"
)
{
main_class
=
"
org
.
chromium
.
bytecode
.
TraceEventAdder
"
diff
-
-
git
a
/
android
/
gtest_apk
/
BUILD
.
gn
b
/
android
/
gtest_apk
/
BUILD
.
gn
index
69b0889c9
.
.
c5564995f
100644
-
-
-
a
/
android
/
gtest_apk
/
BUILD
.
gn
+
+
+
b
/
android
/
gtest_apk
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
android_library
(
"
native_test_instrumentation_test_runner_java
"
)
{
testonly
=
true
diff
-
-
git
a
/
android
/
gyp
/
test
/
BUILD
.
gn
b
/
android
/
gyp
/
test
/
BUILD
.
gn
index
301a220d0
.
.
421865b3e
100644
-
-
-
a
/
android
/
gyp
/
test
/
BUILD
.
gn
+
+
+
b
/
android
/
gyp
/
test
/
BUILD
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_library
(
"
hello_world_java
"
)
{
sources
=
[
"
java
/
org
/
chromium
/
helloworld
/
HelloWorldPrinter
.
java
"
]
diff
-
-
git
a
/
android
/
incremental_install
/
BUILD
.
gn
b
/
android
/
incremental_install
/
BUILD
.
gn
index
d7a321882
.
.
a615aafa7
100644
-
-
-
a
/
android
/
incremental_install
/
BUILD
.
gn
+
+
+
b
/
android
/
incremental_install
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
android_library
(
"
bootstrap_java
"
)
{
sources
=
[
diff
-
-
git
a
/
android
/
incremental_install
/
third_party
/
AndroidHiddenApiBypass
/
BUILD
.
gn
b
/
android
/
incremental_install
/
third_party
/
AndroidHiddenApiBypass
/
BUILD
.
gn
index
d14c7b954
.
.
ef535b7c4
100644
-
-
-
a
/
android
/
incremental_install
/
third_party
/
AndroidHiddenApiBypass
/
BUILD
.
gn
+
+
+
b
/
android
/
incremental_install
/
third_party
/
AndroidHiddenApiBypass
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
#
Approved
by
chrome
-
security
only
for
use
by
incremental
install
.
visibility
=
[
"
:
*
"
-
"
/
/
build
/
android
/
incremental_install
:
*
"
+
"
/
/
chromium
/
build
/
android
/
incremental_install
:
*
"
]
android_library
(
"
stub_java
"
)
{
diff
-
-
git
a
/
android
/
native_flags
/
BUILD
.
gn
b
/
android
/
native_flags
/
BUILD
.
gn
index
317103026
.
.
20855df9d
100644
-
-
-
a
/
android
/
native_flags
/
BUILD
.
gn
+
+
+
b
/
android
/
native_flags
/
BUILD
.
gn
-
3
7
+
3
7
#
found
in
the
LICENSE
file
.
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
A
toolchain
that
will
capture
compiler
and
linker
arguments
to
a
file
.
toolchain
(
"
flagcapture
"
)
{
-
26
7
+
26
7
if
(
current_toolchain
=
=
default_toolchain
)
{
description
=
stamp_description
}
}
-
}
else
if
(
current_toolchain
=
=
"
/
/
build
/
android
/
native_flags
:
flagcapture
"
)
{
+
}
else
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
android
/
native_flags
:
flagcapture
"
)
{
#
This
will
record
flags
from
all
default
configs
of
the
default
toolchain
.
source_set
(
"
default_ccflags
"
)
{
sources
=
[
"
empty
.
cc
"
]
diff
-
-
git
a
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
b
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
index
2f0273487
.
.
8033465ee
100644
-
-
-
a
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
+
+
+
b
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
group
(
"
commands
"
)
{
data_deps
=
[
"
:
chromium_commands_java
"
]
diff
-
-
git
a
/
android
/
resource_sizes
.
gni
b
/
android
/
resource_sizes
.
gni
index
d0783048b
.
.
a670b083e
100644
-
-
-
a
/
android
/
resource_sizes
.
gni
+
+
+
b
/
android
/
resource_sizes
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
#
Generates
a
script
in
the
bin
directory
that
runs
#
/
/
build
/
android
/
resource_sizes
.
py
against
the
provided
apk
.
-
18
13
+
18
13
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
template
(
"
android_resource_sizes_test
"
)
{
generate_android_wrapper
(
target_name
)
{
forward_variables_from
(
invoker
[
"
data_deps
"
]
)
-
executable
=
"
/
/
build
/
android
/
resource_sizes
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
android
/
resource_sizes
.
py
"
wrapper_script
=
"
root_out_dir
/
bin
/
run_
{
target_name
}
"
assert
(
defined
(
invoker
.
apk_name
)
!
=
defined
(
invoker
.
file_path
)
"
Exactly
one
of
apk_name
or
file_path
should
be
provided
.
"
)
-
deps
=
[
"
/
/
build
/
android
:
resource_sizes_py
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
android
:
resource_sizes_py
"
]
executable_args
=
[
"
-
-
output
-
format
"
"
histograms
"
diff
-
-
git
a
/
android
/
stacktrace
/
BUILD
.
gn
b
/
android
/
stacktrace
/
BUILD
.
gn
index
f8168ab4e
.
.
43a33c76c
100644
-
-
-
a
/
android
/
stacktrace
/
BUILD
.
gn
+
+
+
b
/
android
/
stacktrace
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_library
(
"
java_deobfuscate_java
"
)
{
sources
=
[
"
java
/
org
/
chromium
/
build
/
FlushingReTrace
.
java
"
]
diff
-
-
git
a
/
android
/
test
/
BUILD
.
gn
b
/
android
/
test
/
BUILD
.
gn
index
e9bbbce1b
.
.
24f55fe24
100644
-
-
-
a
/
android
/
test
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
import
(
"
missing_symbol_test
.
gni
"
)
import
(
"
nocompile_gn
/
nocompile_sources
.
gni
"
)
-
21
7
+
21
7
group
(
"
android_nocompile_tests
"
)
{
android_nocompile_test_suite
(
"
android_lint_tests
"
)
{
#
Depend
on
lint
script
so
that
the
action
is
re
-
run
whenever
the
script
is
modified
.
-
pydeps
=
[
"
/
/
build
/
android
/
gyp
/
lint
.
pydeps
"
]
+
pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
lint
.
pydeps
"
]
tests
=
[
{
-
54
12
+
54
12
android_nocompile_test_suite
(
"
android_lookup_dep_tests
"
)
{
rebase_path
(
import_child_missing_symbol_test_nocompile_sources
"
"
"
nocompile_gn
"
)
-
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_child_missing_symbol_test_java
\
n
*
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
sub_b_java
\
"
"
+
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_child_missing_symbol_test_java
\
n
*
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
sub_b_java
\
"
"
}
{
target
=
"
nocompile_gn
:
import_parent_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_parent_missing_symbol_test_java
\
n
*
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
"
+
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_parent_missing_symbol_test_java
\
n
*
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
"
}
{
target
=
"
nocompile_gn
:
import_turbine_missing_symbol_test_java
"
-
67
17
+
67
17
android_nocompile_test_suite
(
"
android_lookup_dep_tests
"
)
{
rebase_path
(
import_turbine_missing_symbol_test_nocompile_sources
"
"
"
nocompile_gn
"
)
-
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_turbine_missing_symbol_test_java
\
n
*
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
"
+
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
import_turbine_missing_symbol_test_java
\
n
*
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
"
}
{
target
=
"
nocompile_gn
:
prebuilt_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
prebuilt_missing_symbol_test_java
\
n
*
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
c_prebuilt_java
\
"
"
+
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
prebuilt_missing_symbol_test_java
\
n
*
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
c_prebuilt_java
\
"
"
}
{
target
=
"
nocompile_gn
:
cpp_template_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
cpp_template_missing_symbol_test_java
\
n
*
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
d_java
\
"
"
+
expected_compile_output_regex
=
"
Hint
:
Try
adding
the
following
to
/
/
build
/
android
/
test
/
nocompile_gn
:
cpp_template_missing_symbol_test_java
\
n
*
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
d_java
\
"
"
}
]
}
diff
-
-
git
a
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
b
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
index
9411497fa
.
.
43adf1470
100644
-
-
-
a
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
declare_args
(
)
{
incremental_javac_test_toggle_gn
=
false
-
85
7
+
85
7
incremental_javac_prebuilt
(
"
no_signature_change_prebuilt_generator
"
)
{
testonly
=
true
sources
=
all_test_sources
toggle_gn_target
=
"
:
changing_java
"
-
pydeps
=
[
"
/
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
+
pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
}
android_java_prebuilt
(
"
no_signature_change_prebuilt_java
"
)
{
diff
-
-
git
a
/
android
/
test
/
missing_symbol_test
.
gni
b
/
android
/
test
/
missing_symbol_test
.
gni
index
3cc4741c9
.
.
e93eab566
100644
-
-
-
a
/
android
/
test
/
missing_symbol_test
.
gni
+
+
+
b
/
android
/
test
/
missing_symbol_test
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
missing_symbol_generated_importer_template_nocompile_source
=
-
"
/
/
build
/
android
/
java
/
test
/
missing_symbol
/
Importer
.
template
"
+
"
/
/
chromium
/
build
/
android
/
java
/
test
/
missing_symbol
/
Importer
.
template
"
template
(
"
missing_symbol_test
"
)
{
#
Not
named
"
_java
"
to
prevent
target
from
being
considered
a
classpath
dep
.
diff
-
-
git
a
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
b
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
index
406bd8c48
.
.
52d7a9ef0
100644
-
-
-
a
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
android
/
test
/
missing_symbol_test
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
android
/
test
/
missing_symbol_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
import
(
"
nocompile_sources
.
gni
"
)
template
(
"
lint_test
"
)
{
-
24
7
+
24
7
template
(
"
lint_test
"
)
{
#
targets
.
We
need
to
test
linting
a
normal
apk
target
.
apk_name
=
_apk_target_name
deps
=
[
"
:
_library_target_name
"
]
-
android_manifest
=
"
/
/
build
/
android
/
AndroidManifest
.
xml
"
+
android_manifest
=
"
/
/
chromium
/
build
/
android
/
AndroidManifest
.
xml
"
}
android_lint
(
target_name
)
{
diff
-
-
git
a
/
android
/
test_wrapper
/
logdog_wrapper
.
gni
b
/
android
/
test_wrapper
/
logdog_wrapper
.
gni
index
357bb6c16
.
.
cec37a7d7
100644
-
-
-
a
/
android
/
test_wrapper
/
logdog_wrapper
.
gni
+
+
+
b
/
android
/
test_wrapper
/
logdog_wrapper
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
#
Defines
a
generated_wrapper
script
test
under
bin
/
in
the
build
dir
that
is
#
itself
wrapped
by
the
logdog_wrapper
.
py
tool
which
will
automatically
stream
-
24
7
+
24
7
template
(
"
logdog_wrapper_script_test
"
)
{
executable_args
+
=
invoker
.
args
}
-
data_deps
=
[
"
/
/
build
/
android
:
logdog_wrapper_py
"
]
+
data_deps
=
[
"
/
/
chromium
/
build
/
android
:
logdog_wrapper_py
"
]
if
(
defined
(
invoker
.
data_deps
)
)
{
data_deps
+
=
invoker
.
data_deps
}
diff
-
-
git
a
/
android
/
unused_resources
/
BUILD
.
gn
b
/
android
/
unused_resources
/
BUILD
.
gn
index
4b8749b47
.
.
ed196668f
100644
-
-
-
a
/
android
/
unused_resources
/
BUILD
.
gn
+
+
+
b
/
android
/
unused_resources
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_binary
(
"
unused_resources
"
)
{
-
sources
=
[
"
/
/
build
/
android
/
unused_resources
/
UnusedResources
.
java
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
unused_resources
/
UnusedResources
.
java
"
]
main_class
=
"
build
.
android
.
unused_resources
.
UnusedResources
"
deps
=
[
"
/
/
third_party
/
android_deps
:
com_android_tools_common_java
"
diff
-
-
git
a
/
apple
/
apple_info_plist
.
gni
b
/
apple
/
apple_info_plist
.
gni
index
bf66dbd6b
.
.
eeeed41ff
100644
-
-
-
a
/
apple
/
apple_info_plist
.
gni
+
+
+
b
/
apple
/
apple_info_plist
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
compile_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
compile_plist
.
gni
"
)
#
The
base
template
used
to
generate
Info
.
plist
files
for
iOS
and
Mac
apps
and
#
frameworks
.
diff
-
-
git
a
/
apple
/
compile_entitlements
.
gni
b
/
apple
/
compile_entitlements
.
gni
index
1f84a115d
.
.
93d042f58
100644
-
-
-
a
/
apple
/
compile_entitlements
.
gni
+
+
+
b
/
apple
/
compile_entitlements
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
compile_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
compile_plist
.
gni
"
)
#
Template
to
merge
multiple
.
entitlements
files
performing
variable
#
substitutions
.
diff
-
-
git
a
/
apple
/
compile_plist
.
gni
b
/
apple
/
compile_plist
.
gni
index
df8de0c21
.
.
d090b3841
100644
-
-
-
a
/
apple
/
compile_plist
.
gni
+
+
+
b
/
apple
/
compile_plist
.
gni
-
43
7
+
43
7
template
(
"
compile_plist
"
)
{
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
invoker
.
plist_templates
outputs
=
[
_merged_name
]
args
=
[
-
59
7
+
59
7
template
(
"
compile_plist
"
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
_merged_name
]
outputs
=
[
_output_name
]
args
=
[
diff
-
-
git
a
/
apple
/
convert_plist
.
gni
b
/
apple
/
convert_plist
.
gni
index
740bfc77b
.
.
ddbc7e948
100644
-
-
-
a
/
apple
/
convert_plist
.
gni
+
+
+
b
/
apple
/
convert_plist
.
gni
-
27
7
+
27
7
template
(
"
convert_plist
"
)
{
"
deps
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
invoker
.
source
]
outputs
=
[
invoker
.
output
]
args
=
[
diff
-
-
git
a
/
apple
/
tweak_info_plist
.
gni
b
/
apple
/
tweak_info_plist
.
gni
index
347c5d58d
.
.
7b67a89ce
100644
-
-
-
a
/
apple
/
tweak_info_plist
.
gni
+
+
+
b
/
apple
/
tweak_info_plist
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
#
Template
to
run
the
tweak_info_plist
.
py
script
on
a
plist
.
#
-
36
7
+
36
7
template
(
"
tweak_info_plist
"
)
{
"
testonly
"
"
deps
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
invoker
.
info_plists
outputs
=
[
_source_name
]
args
=
[
-
62
10
+
62
10
template
(
"
tweak_info_plist
"
)
{
"
args
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
tweak_info_plist
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
tweak_info_plist
.
py
"
inputs
=
[
script
-
"
/
/
build
/
util
/
version
.
py
"
+
"
/
/
chromium
/
build
/
util
/
version
.
py
"
lastchange_file
"
/
/
chrome
/
VERSION
"
]
diff
-
-
git
a
/
args
/
headless
.
gn
b
/
args
/
headless
.
gn
index
ed8c03242
.
.
fef6b45ba
100644
-
-
-
a
/
args
/
headless
.
gn
+
+
+
b
/
args
/
headless
.
gn
-
2
7
+
2
7
#
#
Add
import
to
arg
.
gn
in
out
directory
and
run
gn
gen
on
the
directory
to
use
.
#
E
.
g
.
for
out
directory
out
/
foo
:
-
#
echo
'
import
(
"
/
/
build
/
args
/
headless
.
gn
"
)
'
>
out
/
foo
/
args
.
gn
+
#
echo
'
import
(
"
/
/
chromium
/
build
/
args
/
headless
.
gn
"
)
'
>
out
/
foo
/
args
.
gn
#
gn
gen
out
/
foo
#
#
Use
gn
args
to
add
your
own
build
preference
args
.
diff
-
-
git
a
/
buildflag_header
.
gni
b
/
buildflag_header
.
gni
index
f7b42f724
.
.
c9f091fcb
100644
-
-
-
a
/
buildflag_header
.
gni
+
+
+
b
/
buildflag_header
.
gni
-
95
7
+
95
7
#
}
template
(
"
buildflag_header
"
)
{
action
(
target_name
)
{
-
script
=
"
/
/
build
/
write_buildflag_header
.
py
"
+
script
=
"
/
/
chromium
/
build
/
write_buildflag_header
.
py
"
if
(
defined
(
invoker
.
header_dir
)
)
{
header_file
=
"
{
invoker
.
header_dir
}
/
{
invoker
.
header
}
"
-
132
6
+
132
6
template
(
"
buildflag_header
"
)
{
"
visibility
"
]
)
-
public_deps
=
[
"
/
/
build
:
buildflag_header_h
"
]
+
public_deps
=
[
"
/
/
chromium
/
build
:
buildflag_header_h
"
]
}
}
diff
-
-
git
a
/
chromeos
/
crosier_tests
.
gni
b
/
chromeos
/
crosier_tests
.
gni
index
b717dacbe
.
.
3f6eb7e45
100644
-
-
-
a
/
chromeos
/
crosier_tests
.
gni
+
+
+
b
/
chromeos
/
crosier_tests
.
gni
-
11
7
+
11
7
#
to
the
test
sources
.
These
files
will
be
copied
to
the
appropriate
directory
.
#
See
docs
/
testing
/
chromeos_integration
/
crosier_metadata
.
md
for
details
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
template
(
"
crosier_tests
"
)
{
assert
(
is_chromeos_device
)
diff
-
-
git
a
/
chromeos
/
embed_sections
.
gni
b
/
chromeos
/
embed_sections
.
gni
index
83eb06b23
.
.
40e0e800a
100644
-
-
-
a
/
chromeos
/
embed_sections
.
gni
+
+
+
b
/
chromeos
/
embed_sections
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Embed
elf
section
information
of
a
binary
into
the
binary
'
s
predefined
#
symbols
.
-
19
7
+
19
7
template
(
"
embed_sections
"
)
{
"
testonly
"
]
)
action
(
"
{
target_name
}
"
)
{
-
script
=
"
/
/
build
/
chromeos
/
embed_sections
.
py
"
+
script
=
"
/
/
chromium
/
build
/
chromeos
/
embed_sections
.
py
"
if
(
defined
(
invoker
.
sections_embedded_binary_output
)
)
{
sections_embedded_binary_output
=
invoker
.
sections_embedded_binary_output
diff
-
-
git
a
/
cipd
/
cipd
.
gni
b
/
cipd
/
cipd
.
gni
index
83224498a
.
.
00b4bd4f2
100644
-
-
-
a
/
cipd
/
cipd
.
gni
+
+
+
b
/
cipd
/
cipd
.
gni
-
122
7
+
122
7
template
(
"
cipd_package_definition_by_file
"
)
{
_output_yaml_filename
=
invoker
.
package_definition_yaml
}
action
(
target_name
)
{
-
script
=
"
/
/
build
/
cipd
/
cipd_from_file
.
py
"
+
script
=
"
/
/
chromium
/
build
/
cipd
/
cipd_from_file
.
py
"
inputs
=
[
invoker
.
files_file
]
args
=
[
"
-
-
description
=
"
+
invoker
.
description
diff
-
-
git
a
/
compiled_action
.
gni
b
/
compiled_action
.
gni
index
f5df30108
.
.
f74ca96ee
100644
-
-
-
a
/
compiled_action
.
gni
+
+
+
b
/
compiled_action
.
gni
-
98
7
+
98
7
template
(
"
compiled_action
"
)
{
inputs
=
[
]
}
-
script
=
"
/
/
build
/
gn_run_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
gn_run_binary
.
py
"
#
Constuct
the
host
toolchain
version
of
the
tool
.
host_tool
=
invoker
.
tool
+
"
(
host_toolchain
)
"
-
145
7
+
145
7
template
(
"
compiled_action_foreach
"
)
{
inputs
=
[
]
}
-
script
=
"
/
/
build
/
gn_run_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
gn_run_binary
.
py
"
#
Constuct
the
host
toolchain
version
of
the
tool
.
host_tool
=
invoker
.
tool
+
"
(
host_toolchain
)
"
diff
-
-
git
a
/
config
/
BUILD
.
gn
b
/
config
/
BUILD
.
gn
index
d8352aadf
.
.
36c03e0dd
100644
-
-
-
a
/
config
/
BUILD
.
gn
+
+
+
b
/
config
/
BUILD
.
gn
-
2
25
+
2
25
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
#
Subprojects
need
to
override
arguments
in
{
mac
ios
}
_sdk_overrides
.
gni
in
their
#
.
gn
config
but
those
arguments
are
only
used
on
macOS
.
Including
#
mac_sdk_overrides
.
gni
insures
that
this
doesn
'
t
trigger
an
unused
argument
#
warning
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
pch
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
pch
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
}
#
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
-
237
11
+
237
11
group
(
"
common_deps_without_libcxx
"
)
{
public_deps
=
[
"
:
_toolchain_marker_name
"
]
if
(
using_sanitizer
)
{
-
public_deps
+
=
[
"
/
/
build
/
config
/
sanitizers
:
deps
"
]
+
public_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
deps
"
]
}
if
(
use_libfuzzer
)
{
-
public_deps
+
=
[
"
/
/
build
/
config
/
sanitizers
:
dlclose_shim
"
]
+
public_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
dlclose_shim
"
]
}
if
(
use_afl
)
{
-
256
7
+
256
7
group
(
"
common_deps_without_libcxx
"
)
{
public_deps
+
=
[
"
/
/
third_party
/
fuchsia
-
gn
-
sdk
/
src
/
config
:
runtime_library_group
"
]
if
(
is_asan
)
{
-
public_deps
+
=
[
"
/
/
build
/
config
/
fuchsia
:
asan_runtime_library
"
]
+
public_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
asan_runtime_library
"
]
}
}
-
271
7
+
271
7
group
(
"
common_deps_without_libcxx
"
)
{
#
The
CRT
runtime
is
dynamically
linked
in
component
builds
and
needs
to
#
be
present
on
bots
that
run
exes
or
load
DLLs
.
This
also
includes
#
debugging
DLLs
in
all
builds
.
-
data_deps
=
[
"
/
/
build
/
win
:
runtime_libs
"
]
+
data_deps
=
[
"
/
/
chromium
/
build
/
win
:
runtime_libs
"
]
if
(
host_os
=
=
"
win
"
)
{
#
In
order
to
ensure
the
ACLing
is
applied
to
every
binary
loaded
in
an
-
279
7
+
279
7
group
(
"
common_deps_without_libcxx
"
)
{
#
do
this
because
the
tool
is
subject
to
race
conditions
if
a
binary
is
#
placed
in
the
out
folder
while
it
is
running
.
public_deps
+
=
-
[
"
/
/
build
/
config
/
win
:
maybe_set_appcontainer_acls
(
host_toolchain
)
"
]
+
[
"
/
/
chromium
/
build
/
config
/
win
:
maybe_set_appcontainer_acls
(
host_toolchain
)
"
]
}
}
}
-
329
8
+
329
8
group
(
"
shared_library_deps
"
)
{
#
Windows
linker
setup
for
EXEs
and
DLLs
.
if
(
is_win
)
{
_windows_linker_configs
=
[
-
"
/
/
build
/
config
/
win
:
sdk_link
"
-
"
/
/
build
/
config
/
win
:
common_linker_setup
"
+
"
/
/
chromium
/
build
/
config
/
win
:
sdk_link
"
+
"
/
/
chromium
/
build
/
config
/
win
:
common_linker_setup
"
]
}
-
341
16
+
341
16
config
(
"
executable_config
"
)
{
if
(
is_win
)
{
configs
+
=
_windows_linker_configs
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
}
else
if
(
is_ios
)
{
configs
+
=
[
-
"
/
/
build
/
config
/
ios
:
ios_dynamic_flags
"
-
"
/
/
build
/
config
/
ios
:
ios_executable_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_dynamic_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_executable_flags
"
]
}
else
if
(
is_linux
|
|
is_chromeos
|
|
is_android
|
|
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
executable_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
executable_config
"
]
if
(
is_castos
|
|
is_cast_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromecast
:
executable_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromecast
:
executable_config
"
]
}
}
-
373
16
+
373
16
config
(
"
shared_library_config
"
)
{
if
(
is_win
)
{
configs
+
=
_windows_linker_configs
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
}
else
if
(
is_ios
)
{
configs
+
=
[
-
"
/
/
build
/
config
/
ios
:
ios_dynamic_flags
"
-
"
/
/
build
/
config
/
ios
:
ios_shared_library_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_dynamic_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_shared_library_flags
"
]
}
else
if
(
is_castos
|
|
is_cast_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromecast
:
shared_library_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromecast
:
shared_library_config
"
]
}
else
if
(
is_linux
|
|
is_chromeos
|
|
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
shared_library_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
shared_library_config
"
]
}
#
If
we
'
re
using
the
prebuilt
instrumented
libraries
with
the
sanitizers
we
-
414
12
+
414
12
config
(
"
precompiled_headers
"
)
{
#
This
is
a
file
that
GN
will
compile
with
the
above
header
.
It
will
be
#
implicitly
added
to
the
sources
(
potentially
multiple
times
with
one
#
variant
for
each
language
used
in
the
target
)
.
-
precompiled_source
=
"
/
/
build
/
precompile
.
cc
"
+
precompiled_source
=
"
/
/
chromium
/
build
/
precompile
.
cc
"
#
Force
include
the
header
.
cflags
=
[
"
/
FI
precompiled_header
"
]
}
else
if
(
is_mac
|
|
is_linux
)
{
-
precompiled_source
=
"
/
/
build
/
precompile
.
h
"
+
precompiled_source
=
"
/
/
chromium
/
build
/
precompile
.
h
"
}
}
}
diff
-
-
git
a
/
config
/
BUILDCONFIG
.
gn
b
/
config
/
BUILDCONFIG
.
gn
index
f1189be21
.
.
4bb38fe31
100644
-
-
-
a
/
config
/
BUILDCONFIG
.
gn
+
+
+
b
/
config
/
BUILDCONFIG
.
gn
-
208
33
+
208
33
if
(
host_toolchain
=
=
"
"
)
{
if
(
host_os
=
=
"
linux
"
|
|
host_os
=
=
"
openbsd
"
)
{
if
(
target_os
!
=
"
linux
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
}
else
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
host_cpu
"
}
}
else
if
(
host_os
=
=
"
mac
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
mac
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
mac
:
clang_
host_cpu
"
}
else
if
(
host_os
=
=
"
win
"
)
{
#
On
Windows
always
use
the
target
CPU
for
host
builds
for
x86
/
x64
.
On
the
#
configurations
we
support
this
will
always
work
and
it
saves
build
steps
.
#
Windows
ARM64
targets
require
an
x64
host
for
cross
build
.
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
target_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
target_cpu
"
}
}
else
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
host_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
host_cpu
"
}
}
else
if
(
host_os
=
=
"
aix
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
aix
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
aix
:
host_cpu
"
}
else
if
(
host_os
=
=
"
zos
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
zos
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
zos
:
host_cpu
"
}
else
{
assert
(
false
"
Unsupported
host_os
:
host_os
"
)
}
-
245
40
+
245
40
_default_toolchain
=
"
"
if
(
target_os
=
=
"
android
"
)
{
#
Targeting
android
on
Mac
is
best
-
effort
and
not
guaranteed
to
work
.
#
assert
(
host_os
=
=
"
linux
"
"
Android
builds
are
only
supported
on
Linux
.
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
android
:
android_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
android
:
android_clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
chromeos
"
|
|
target_os
=
=
"
linux
"
|
|
target_os
=
=
"
openbsd
"
)
{
#
See
comments
in
build
/
toolchain
/
cros
/
BUILD
.
gn
about
board
compiles
.
if
(
is_clang
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
target_cpu
"
}
else
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
target_cpu
"
}
}
else
if
(
target_os
=
=
"
fuchsia
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
fuchsia
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
fuchsia
:
target_cpu
"
}
else
if
(
target_os
=
=
"
ios
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
ios
:
ios_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
mac
"
)
{
#
assert
(
host_os
=
=
"
mac
"
|
|
host_os
=
=
"
linux
"
#
"
Mac
cross
-
compiles
are
unsupported
.
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
mac
:
clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
mac
:
clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
win
"
)
{
#
On
Windows
we
use
the
same
toolchain
for
host
and
target
by
default
.
#
Beware
win
cross
builds
have
some
caveats
see
docs
/
win_cross
.
md
if
(
is_clang
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
}
else
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
target_cpu
"
}
}
else
if
(
target_os
=
=
"
winuwp
"
)
{
#
Only
target
WinUWP
on
for
a
Windows
store
application
and
only
#
x86
x64
and
arm
are
supported
target
CPUs
.
assert
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
|
|
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
uwp_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
uwp_
target_cpu
"
}
else
if
(
target_os
=
=
"
aix
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
aix
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
aix
:
target_cpu
"
}
else
if
(
target_os
=
=
"
zos
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
zos
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
zos
:
target_cpu
"
}
else
{
assert
(
false
"
Unsupported
target_os
:
target_os
"
)
}
-
343
77
+
343
77
is_posix
=
!
is_win
&
&
!
is_fuchsia
#
Holds
all
configs
used
for
running
the
compiler
.
default_compiler_configs
=
[
-
"
/
/
build
/
config
:
feature_flags
"
-
"
/
/
build
/
config
/
compiler
:
afdo
"
-
"
/
/
build
/
config
/
compiler
:
afdo_optimize_size
"
-
"
/
/
build
/
config
/
compiler
:
cet_shadow_stack
"
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
compiler
"
-
"
/
/
build
/
config
/
compiler
:
compiler_arm_fpu
"
-
"
/
/
build
/
config
/
compiler
:
compiler_arm_thumb
"
-
"
/
/
build
/
config
/
compiler
:
default_include_dirs
"
-
"
/
/
build
/
config
/
compiler
:
default_init_stack_vars
"
-
"
/
/
build
/
config
/
compiler
:
default_optimization
"
-
"
/
/
build
/
config
/
compiler
:
default_stack_frames
"
-
"
/
/
build
/
config
/
compiler
:
default_symbols
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
compiler
:
libcxx_hardening
"
-
"
/
/
build
/
config
/
compiler
:
libcxx_module
"
-
"
/
/
build
/
config
/
compiler
:
no_exceptions
"
-
"
/
/
build
/
config
/
compiler
:
no_rtti
"
-
"
/
/
build
/
config
/
compiler
:
no_unresolved_symbols
"
-
"
/
/
build
/
config
/
compiler
:
runtime_library
"
-
"
/
/
build
/
config
/
compiler
:
thin_archive
"
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
-
"
/
/
build
/
config
/
compiler
/
pgo
:
default_pgo_flags
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
-
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
+
"
/
/
chromium
/
build
/
config
:
feature_flags
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
afdo
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
afdo_optimize_size
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
cet_shadow_stack
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler_arm_fpu
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler_arm_thumb
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_include_dirs
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_init_stack_vars
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_stack_frames
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_symbols
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
libcxx_hardening
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
libcxx_module
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_exceptions
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_rtti
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_unresolved_symbols
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
runtime_library
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thin_archive
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
:
default_pgo_flags
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
if
(
is_win
)
{
default_compiler_configs
+
=
[
-
"
/
/
build
/
config
/
win
:
default_cfg_compiler
"
-
"
/
/
build
/
config
/
win
:
default_crt
"
-
"
/
/
build
/
config
/
win
:
lean_and_mean
"
-
"
/
/
build
/
config
/
win
:
nominmax
"
-
"
/
/
build
/
config
/
win
:
unicode
"
-
"
/
/
build
/
config
/
win
:
winver
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_cfg_compiler
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_crt
"
+
"
/
/
chromium
/
build
/
config
/
win
:
lean_and_mean
"
+
"
/
/
chromium
/
build
/
config
/
win
:
nominmax
"
+
"
/
/
chromium
/
build
/
config
/
win
:
unicode
"
+
"
/
/
chromium
/
build
/
config
/
win
:
winver
"
]
}
if
(
is_apple
)
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
enable_arc
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
enable_arc
"
]
}
if
(
is_posix
)
{
if
(
current_os
!
=
"
aix
"
)
{
default_compiler_configs
+
=
-
[
"
/
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
+
[
"
/
/
chromium
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
}
}
if
(
is_fuchsia
)
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
}
if
(
is_android
)
{
default_compiler_configs
+
=
-
[
"
/
/
build
/
config
/
android
:
default_orderfile_instrumentation
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
default_orderfile_instrumentation
"
]
}
if
(
is_clang
&
&
!
is_nacl
)
{
default_compiler_configs
+
=
[
-
"
/
/
build
/
config
/
clang
:
extra_warnings
"
-
"
/
/
build
/
config
/
clang
:
find_bad_constructs
"
-
"
/
/
build
/
config
/
clang
:
unsafe_buffers
"
+
"
/
/
chromium
/
build
/
config
/
clang
:
extra_warnings
"
+
"
/
/
chromium
/
build
/
config
/
clang
:
find_bad_constructs
"
+
"
/
/
chromium
/
build
/
config
/
clang
:
unsafe_buffers
"
]
}
#
Debug
/
release
-
related
defines
.
if
(
is_debug
)
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
:
debug
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
:
debug
"
]
}
else
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
:
release
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
:
release
"
]
}
#
Static
libraries
and
source
sets
use
only
the
compiler
ones
.
-
433
29
+
433
29
if
(
is_win
)
{
#
Many
targets
remove
these
configs
so
they
are
not
contained
within
#
/
/
build
/
config
:
executable_config
for
easy
removal
.
_linker_configs
=
[
-
"
/
/
build
/
config
/
win
:
default_incremental_linking
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_incremental_linking
"
#
Default
to
console
-
mode
apps
.
Most
of
our
targets
are
tests
and
such
#
that
shouldn
'
t
use
the
windows
subsystem
.
-
"
/
/
build
/
config
/
win
:
console
"
+
"
/
/
chromium
/
build
/
config
/
win
:
console
"
]
}
else
if
(
is_apple
)
{
-
_linker_configs
=
[
"
/
/
build
/
config
/
apple
:
strip_all
"
]
+
_linker_configs
=
[
"
/
/
chromium
/
build
/
config
/
apple
:
strip_all
"
]
}
else
{
_linker_configs
=
[
]
}
#
Executable
defaults
.
default_executable_configs
=
default_compiler_configs
+
[
-
"
/
/
build
/
config
/
compiler
:
export_dynamic
"
-
"
/
/
build
/
config
:
default_libs
"
-
"
/
/
build
/
config
:
executable_config
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
export_dynamic
"
+
"
/
/
chromium
/
build
/
config
:
default_libs
"
+
"
/
/
chromium
/
build
/
config
:
executable_config
"
]
+
_linker_configs
if
(
is_win
)
{
#
Turn
on
linker
CFI
for
executables
and
position
it
so
it
can
be
removed
#
if
needed
.
-
default_executable_configs
+
=
[
"
/
/
build
/
config
/
win
:
cfi_linker
"
]
+
default_executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
cfi_linker
"
]
}
if
(
is_fuchsia
)
{
#
Sometimes
executables
are
linked
by
rustc
passing
a
command
line
to
-
463
7
+
463
7
if
(
is_fuchsia
)
{
#
resulting
(
fatal
)
warning
.
Unfortunately
there
'
s
no
way
to
do
this
only
#
for
binaries
linked
by
rustc
;
gn
does
not
make
the
distinction
.
default_executable_configs
+
=
-
[
"
/
/
build
/
config
/
fuchsia
:
rustc_no_pie_warning
"
]
+
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
rustc_no_pie_warning
"
]
}
set_defaults
(
"
executable
"
)
{
-
473
19
+
473
19
set_defaults
(
"
executable
"
)
{
#
Shared
library
and
loadable
module
defaults
(
also
for
components
in
component
#
mode
)
.
default_shared_library_configs
=
default_compiler_configs
+
[
-
"
/
/
build
/
config
:
default_libs
"
-
"
/
/
build
/
config
:
shared_library_config
"
+
"
/
/
chromium
/
build
/
config
:
default_libs
"
+
"
/
/
chromium
/
build
/
config
:
shared_library_config
"
]
+
_linker_configs
if
(
is_win
)
{
#
Turn
on
linker
CFI
for
DLLs
and
position
it
so
it
can
be
removed
if
needed
.
-
default_shared_library_configs
+
=
[
"
/
/
build
/
config
/
win
:
cfi_linker
"
]
+
default_shared_library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
cfi_linker
"
]
}
if
(
is_android
)
{
#
Strip
native
JNI
exports
from
shared
libraries
by
default
.
Binaries
that
#
want
this
can
remove
this
config
.
default_shared_library_configs
+
=
-
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
if
(
is_fuchsia
)
{
#
Sometimes
shared
libraries
are
linked
by
rustc
passing
a
command
line
to
-
493
7
+
493
7
if
(
is_fuchsia
)
{
#
resulting
(
fatal
)
warning
.
Unfortunately
there
'
s
no
way
to
do
this
only
#
for
binaries
linked
by
rustc
;
gn
does
not
make
the
distinction
.
default_shared_library_configs
+
=
-
[
"
/
/
build
/
config
/
fuchsia
:
rustc_no_pie_warning
"
]
+
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
rustc_no_pie_warning
"
]
}
set_defaults
(
"
shared_library
"
)
{
configs
=
default_shared_library_configs
-
503
20
+
503
20
set_defaults
(
"
loadable_module
"
)
{
#
loadable_modules
are
generally
used
by
other
libs
not
just
via
JNI
.
if
(
is_android
)
{
-
configs
-
=
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
}
default_rust_proc_macro_configs
=
-
default_shared_library_configs
+
[
"
/
/
build
/
rust
:
proc_macro_extern
"
]
+
+
default_shared_library_configs
+
[
"
/
/
chromium
/
build
/
rust
:
proc_macro_extern
"
]
+
#
Rust
proc
macros
don
'
t
support
(
Thin
)
LTO
so
always
remove
it
.
[
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
-
[
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
set_defaults
(
"
rust_proc_macro
"
)
{
-
607
8
+
607
8
foreach
(
_target_type
#
Variables
#
no_default_deps
:
If
true
no
standard
dependencies
will
be
added
.
#
Targets
that
set
this
usually
also
want
to
remove
-
#
"
/
/
build
/
config
/
compiler
:
runtime_library
"
from
configs
(
to
remove
-
#
its
subconfig
"
/
/
build
/
config
/
c
+
+
:
runtime_library
"
)
.
+
#
"
/
/
chromium
/
build
/
config
/
compiler
:
runtime_library
"
from
configs
(
to
remove
+
#
its
subconfig
"
/
/
chromium
/
build
/
config
/
c
+
+
:
runtime_library
"
)
.
#
use_libcxx_modules
:
If
true
libc
+
+
'
s
modules
are
added
to
deps
.
#
This
is
true
by
default
.
foreach
(
_target_type
-
662
7
+
662
7
foreach
(
_target_type
#
/
/
build
/
config
:
shared_library_deps
#
(
This
explicit
list
is
so
that
grepping
for
these
configs
finds
where
#
they
are
used
.
)
-
deps
+
=
[
"
/
/
build
/
config
:
{
_target_type
}
_deps
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
config
:
{
_target_type
}
_deps
"
]
}
if
(
is_clang
&
&
(
!
defined
(
invoker
.
use_libcxx_modules
)
|
|
-
783
12
+
783
12
if
(
is_component_build
)
{
default_component_configs
=
default_shared_library_configs
if
(
is_android
)
{
default_component_configs
-
=
-
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
if
(
is_win
)
{
#
We
don
'
t
want
component
dlls
to
statically
load
OS
dlls
that
aren
'
t
#
loaded
normally
.
-
default_component_configs
+
=
[
"
/
/
build
/
config
/
win
:
delayloads
"
]
+
default_component_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
delayloads
"
]
}
}
else
{
default_component_configs
=
default_compiler_configs
diff
-
-
git
a
/
config
/
aix
/
BUILD
.
gn
b
/
config
/
aix
/
BUILD
.
gn
index
6e55c8393
.
.
a4b574620
100644
-
-
-
a
/
config
/
aix
/
BUILD
.
gn
+
+
+
b
/
config
/
aix
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
.
diff
-
-
git
a
/
config
/
android
/
BUILD
.
gn
b
/
config
/
android
/
BUILD
.
gn
index
8c77eb2c9
.
.
2b2c64ba8
100644
-
-
-
a
/
config
/
android
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
BUILD
.
gn
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
}
assert
(
is_android
)
-
95
14
+
95
14
config
(
"
runtime_library
"
)
{
}
config
(
"
hide_all_but_jni_onload
"
)
{
-
_version_script
=
"
/
/
build
/
android
/
android_only_explicit_jni_exports
.
lst
"
+
_version_script
=
"
/
/
chromium
/
build
/
android
/
android_only_explicit_jni_exports
.
lst
"
inputs
=
[
_version_script
]
ldflags
=
[
"
-
Wl
-
-
version
-
script
=
"
+
rebase_path
(
_version_script
root_build_dir
)
]
}
config
(
"
hide_all_but_jni
"
)
{
-
_version_script
=
"
/
/
build
/
android
/
android_only_jni_exports
.
lst
"
+
_version_script
=
"
/
/
chromium
/
build
/
android
/
android_only_jni_exports
.
lst
"
inputs
=
[
_version_script
]
ldflags
=
[
"
-
Wl
-
-
version
-
script
=
"
+
rebase_path
(
_version_script
root_build_dir
)
]
diff
-
-
git
a
/
config
/
android
/
DIR_METADATA
b
/
config
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
config
/
android
/
DIR_METADATA
+
+
+
b
/
config
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
config
/
android
/
abi
.
gni
b
/
config
/
android
/
abi
.
gni
index
8f6c5b199
.
.
c300f1d6f
100644
-
-
-
a
/
config
/
android
/
abi
.
gni
+
+
+
b
/
config
/
android
/
abi
.
gni
-
41
7
+
41
7
if
(
current_cpu
=
=
"
x86
"
)
{
android_abi_target
=
"
i686
-
linux
-
android
"
sanitizer_arch
=
"
i686
"
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
if
(
arm_version
<
7
)
{
android_app_abi
=
"
armeabi
"
}
else
{
-
107
6
+
107
6
if
(
enable_android_secondary_abi
)
{
if
(
defined
(
android_secondary_abi_cpu
)
)
{
android_secondary_abi_toolchain
=
-
"
/
/
build
/
toolchain
/
android
:
android_clang_
{
android_secondary_abi_cpu
}
"
+
"
/
/
chromium
/
build
/
toolchain
/
android
:
android_clang_
{
android_secondary_abi_cpu
}
"
}
}
diff
-
-
git
a
/
config
/
android
/
android_nocompile
.
gni
b
/
config
/
android
/
android_nocompile
.
gni
index
0b3f517bd
.
.
912cea490
100644
-
-
-
a
/
config
/
android
/
android_nocompile
.
gni
+
+
+
b
/
config
/
android
/
android_nocompile
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
declare_args
(
)
{
#
Used
by
tests
to
enable
generating
build
files
for
GN
targets
which
should
-
33
8
+
33
8
template
(
"
android_nocompile_test_suite
"
)
{
action
(
target_name
)
{
testonly
=
true
-
script
=
"
/
/
build
/
android
/
gyp
/
nocompile_test
.
py
"
-
pool
=
"
/
/
build
/
config
/
android
:
nocompile_pool
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
nocompile_test
.
py
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
nocompile_pool
"
_tests
=
invoker
.
tests
_test0
=
_tests
[
0
]
-
58
7
+
58
7
template
(
"
android_nocompile_test_suite
"
)
{
#
Depend
on
compile_java
Python
scripts
so
that
the
action
is
re
-
run
whenever
the
script
is
#
modified
.
-
_pydeps
=
[
"
/
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
+
_pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
if
(
defined
(
invoker
.
pydeps
)
)
{
_pydeps
+
=
invoker
.
pydeps
}
diff
-
-
git
a
/
config
/
android
/
build_vars
.
gni
b
/
config
/
android
/
build_vars
.
gni
index
f394dfc6d
.
.
de6c3595d
100644
-
-
-
a
/
config
/
android
/
build_vars
.
gni
+
+
+
b
/
config
/
android
/
build_vars
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
#
Contains
useful
GN
variables
that
may
be
used
by
scripts
that
take
#
-
-
output
-
directory
as
an
arg
.
diff
-
-
git
a
/
config
/
android
/
config
.
gni
b
/
config
/
android
/
config
.
gni
index
e9b3014f2
.
.
92251bb69
100644
-
-
-
a
/
config
/
android
/
config
.
gni
+
+
+
b
/
config
/
android
/
config
.
gni
-
26
14
+
26
14
assert
(
!
(
incremental_install
&
&
!
is_java_debug
)
"
Cannot
have
incremental_install
without
is_java_debug
"
)
#
Toolchain
used
to
create
native
libraries
for
robolectric_binary
(
)
targets
.
-
robolectric_toolchain
=
"
/
/
build
/
toolchain
/
android
:
robolectric_
host_cpu
"
+
robolectric_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
android
:
robolectric_
host_cpu
"
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
channel
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
channel
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
import
(
"
abi
.
gni
"
)
-
41
7
+
41
7
if
(
is_android
)
{
#
Some
non
-
chromium
projects
(
e
.
g
.
WebRTC
)
use
our
build
configs
#
heavily
but
don
'
t
write
gclient
args
files
.
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
if
(
defined
(
checkout_android
)
)
{
n
=
"
0x0A
"
#
Newline
assert
(
checkout_android
-
113
7
+
113
7
if
(
is_android
)
{
if
(
enable_chrome_android_internal
)
{
import
(
"
/
/
clank
/
config
.
gni
"
)
}
else
{
-
import
(
"
/
/
build
/
config
/
android
/
sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
sdk
.
gni
"
)
declare_args
(
)
{
#
Which
Android
SDK
to
use
.
android_sdk_release
=
default_android_sdk_release
-
158
7
+
158
7
if
(
is_android
)
{
}
if
(
!
defined
(
default_android_keystore_path
)
)
{
-
default_android_keystore_path
=
"
/
/
build
/
android
/
chromium
-
debug
.
keystore
"
+
default_android_keystore_path
=
"
/
/
chromium
/
build
/
android
/
chromium
-
debug
.
keystore
"
default_android_keystore_name
=
"
chromiumdebugkey
"
default_android_keystore_password
=
"
chromium
"
}
diff
-
-
git
a
/
config
/
android
/
copy_ex
.
gni
b
/
config
/
android
/
copy_ex
.
gni
index
8e70c3014
.
.
d28224bbf
100644
-
-
-
a
/
config
/
android
/
copy_ex
.
gni
+
+
+
b
/
config
/
android
/
copy_ex
.
gni
-
19
7
+
19
7
#
The
following
variables
have
the
usual
GN
meaning
:
data
deps
inputs
#
outputs
testonly
visibility
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
template
(
"
copy_ex
"
)
{
action_with_pydeps
(
target_name
)
{
-
43
7
+
43
7
template
(
"
copy_ex
"
)
{
inputs
=
invoker
.
inputs
}
-
script
=
"
/
/
build
/
android
/
gyp
/
copy_ex
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
copy_ex
.
py
"
args
=
[
"
-
-
dest
"
diff
-
-
git
a
/
config
/
android
/
create_unwind_table
.
gni
b
/
config
/
android
/
create_unwind_table
.
gni
index
59cb024a8
.
.
ac264af40
100644
-
-
-
a
/
config
/
android
/
create_unwind_table
.
gni
+
+
+
b
/
config
/
android
/
create_unwind_table
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
unwind_table_asset_v2_filename
=
"
unwind_cfi_32_v2
"
-
26
7
+
26
7
template
(
"
unwind_table_v2
"
)
{
"
"
)
_library_path
=
"
root_out_dir
/
lib
.
unstripped
/
shlib_prefix
_library_name
shlib_extension
"
-
script
=
"
/
/
build
/
android
/
gyp
/
create_unwind_table
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_unwind_table
.
py
"
outputs
=
[
_output_path
]
inputs
=
[
_dump_syms
diff
-
-
git
a
/
config
/
android
/
extract_unwind_tables
.
gni
b
/
config
/
android
/
extract_unwind_tables
.
gni
index
6518a2d3a
.
.
20ea336fe
100644
-
-
-
a
/
config
/
android
/
extract_unwind_tables
.
gni
+
+
+
b
/
config
/
android
/
extract_unwind_tables
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
unwind_table_asset_v1_filename
=
"
unwind_cfi_32
"
-
25
7
+
25
7
template
(
"
unwind_table_v1
"
)
{
"
"
)
_library_path
=
"
root_out_dir
/
lib
.
unstripped
/
shlib_prefix
_library_name
shlib_extension
"
-
script
=
"
/
/
build
/
android
/
gyp
/
extract_unwind_tables
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
extract_unwind_tables
.
py
"
outputs
=
[
_output_path
]
inputs
=
[
_dump_syms
diff
-
-
git
a
/
config
/
android
/
internal_rules
.
gni
b
/
config
/
android
/
internal_rules
.
gni
index
c28730b18
.
.
d7d23b24c
100644
-
-
-
a
/
config
/
android
/
internal_rules
.
gni
+
+
+
b
/
config
/
android
/
internal_rules
.
gni
-
4
18
+
4
18
#
Do
not
add
any
imports
to
non
-
/
/
build
directories
here
.
#
Some
projects
(
e
.
g
.
V8
)
do
not
have
non
-
build
directories
DEPS
'
ed
in
.
-
import
(
"
/
/
build
/
config
/
android
/
channel
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compute_inputs_for_analyze
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
kythe
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
channel
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compute_inputs_for_analyze
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
kythe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
}
assert
(
is_android
)
-
160
7
+
160
7
template
(
"
write_build_config
"
)
{
deps
+
=
[
invoker
.
android_manifest_dep
]
}
-
script
=
"
/
/
build
/
android
/
gyp
/
write_build_config
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
write_build_config
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
[
]
outputs
=
[
invoker
.
build_config
]
-
679
11
+
679
11
template
(
"
generate_android_wrapper
"
)
{
generate_wrapper
(
target_name
)
{
forward_variables_from
(
invoker
"
*
"
TESTONLY_AND_VISIBILITY
)
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
generator_script
=
"
/
/
build
/
android
/
gyp
/
generate_android_wrapper
.
py
"
+
generator_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
generate_android_wrapper
.
py
"
sources
=
[
-
"
/
/
build
/
android
/
gyp
/
util
/
build_utils
.
py
"
-
"
/
/
build
/
gn_helpers
.
py
"
-
"
/
/
build
/
util
/
generate_wrapper
.
py
"
+
"
/
/
chromium
/
build
/
android
/
gyp
/
util
/
build_utils
.
py
"
+
"
/
/
chromium
/
build
/
gn_helpers
.
py
"
+
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
py
"
]
}
}
-
695
7
+
695
7
template
(
"
generate_r_java
"
)
{
inputs
=
[
invoker
.
build_config
]
outputs
=
[
invoker
.
srcjar_path
]
_rebased_build_config
=
rebase_path
(
invoker
.
build_config
root_build_dir
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_r_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_r_java
.
py
"
args
=
[
"
-
-
depfile
"
rebase_path
(
depfile
root_build_dir
)
-
782
7
+
782
7
template
(
"
test_runner_script
"
)
{
if
(
defined
(
invoker
.
android_test_runner_script
)
)
{
_runner_script
=
invoker
.
android_test_runner_script
}
else
{
-
_runner_script
=
"
/
/
build
/
android
/
test_runner
.
py
"
+
_runner_script
=
"
/
/
chromium
/
build
/
android
/
test_runner
.
py
"
}
deps
=
[
]
-
790
11
+
790
11
template
(
"
test_runner_script
"
)
{
deps
=
invoker
.
deps
}
data_deps
=
[
-
"
/
/
build
/
android
:
test_runner_core_py
"
+
"
/
/
chromium
/
build
/
android
:
test_runner_core_py
"
"
/
/
testing
:
test_scripts_shared
"
]
if
(
_test_type
!
=
"
junit
"
)
{
-
data_deps
+
=
[
"
/
/
build
/
android
:
test_runner_device_support
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
:
test_runner_device_support
"
]
}
if
(
defined
(
invoker
.
data_deps
)
)
{
data_deps
+
=
invoker
.
data_deps
-
1072
9
+
1072
9
if
(
enable_java_templates
)
{
#
https
:
/
/
crbug
.
com
/
1098752
Fix
for
bot
OOM
(
https
:
/
/
crbug
.
com
/
1098333
)
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
#
Lint
requires
generated
sources
and
generated
resources
from
the
build
.
-
1124
7
+
1124
7
if
(
enable_java_templates
)
{
}
_backported_methods
=
"
/
/
third_party
/
r8
/
backported_methods
.
txt
"
-
script
=
"
/
/
build
/
android
/
gyp
/
lint
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
lint
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
java_paths_for_inputs
+
[
_lint_jar_path
-
1211
7
+
1211
7
if
(
enable_java_templates
)
{
_stamp_path
=
"
target_out_dir
/
target_name
/
build
.
lint
.
stamp
"
deps
+
=
[
invoker
.
build_config_dep
]
if
(
!
_use_custom_cache_dir
)
{
-
deps
+
=
[
"
/
/
build
/
android
:
prepare_android_lint_cache
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
android
:
prepare_android_lint_cache
"
]
inputs
+
=
[
_create_cache_stamp_path
]
}
inputs
+
=
[
invoker
.
build_config
]
-
1247
7
+
1247
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
public_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
tracereferences
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
tracereferences
.
py
"
inputs
=
java_paths_for_inputs
+
[
_r8_path
invoker
.
tracerefs_json
-
1273
7
+
1273
7
if
(
enable_java_templates
)
{
template
(
"
proguard
"
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
_script
=
"
/
/
build
/
android
/
gyp
/
proguard
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
proguard
.
py
"
_deps
=
invoker
.
deps
_inputs
=
java_paths_for_inputs
+
[
-
1505
9
+
1505
9
if
(
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
-
1541
7
+
1541
7
if
(
enable_java_templates
)
{
_max_heap_size
=
"
1G
"
}
-
script
=
"
/
/
build
/
android
/
gyp
/
create_java_binary_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_java_binary_script
.
py
"
inputs
=
[
_build_config
]
_java_script
=
"
root_build_dir
/
bin
/
_script_name
"
outputs
=
[
_java_script
]
-
1684
7
+
1684
7
if
(
enable_java_templates
)
{
"
data
"
"
data_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
dex
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dex
.
py
"
deps
=
_deps
depfile
=
"
target_gen_dir
/
target_name
.
d
"
outputs
=
[
invoker
.
output
]
-
1704
9
+
1704
9
if
(
enable_java_templates
)
{
if
(
!
_is_library
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
-
1827
7
+
1827
7
if
(
enable_java_templates
)
{
_sources_json_file
=
"
target_out_dir
/
{
target_name
}
__jacoco_sources
.
json
"
_jacococli_jar
=
"
/
/
third_party
/
jacoco
/
cipd
/
lib
/
jacococli
.
jar
"
-
script
=
"
/
/
build
/
android
/
gyp
/
jacoco_instr
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jacoco_instr
.
py
"
inputs
=
invoker
.
source_files
+
java_paths_for_inputs
+
[
_jacococli_jar
invoker
.
input_jar_path
-
1861
7
+
1861
7
if
(
enable_java_templates
)
{
template
(
"
filter_jar
"
)
{
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
filter_zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
filter_zip
.
py
"
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
-
1947
7
+
1947
7
if
(
enable_java_templates
)
{
"
data_deps
"
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
check_for_missing_direct_deps
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
check_for_missing_direct_deps
.
py
"
inputs
=
java_paths_for_inputs
+
[
invoker
.
build_config
invoker
.
input_jar
-
1992
7
+
1992
7
if
(
enable_java_templates
)
{
invoker
.
min_sdk_version
>
=
min_supported_sdk_version
get_label_info
(
"
:
target_name
"
"
label_no_toolchain
"
)
+
"
has
an
unsupported
min_sdk_version
of
{
invoker
.
min_sdk_version
}
(
min
is
min_supported_sdk_version
)
"
)
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
merge_manifest
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
merge_manifest
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
java_paths_for_inputs
+
[
-
2072
7
+
2072
7
if
(
enable_java_templates
)
{
"
public_deps
"
"
sources
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
prepare_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
prepare_resources
.
py
"
depfile
=
"
target_gen_dir
/
{
invoker
.
target_name
}
.
d
"
outputs
=
[
-
2223
7
+
2223
7
if
(
enable_java_templates
)
{
}
_final_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
-
_script
=
"
/
/
build
/
android
/
gyp
/
compile_resources
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_resources
.
py
"
_target_sdk_version
=
invoker
.
target_sdk_version
if
(
defined
(
invoker
.
override_target_sdk
)
)
{
-
2607
7
+
2607
7
if
(
enable_java_templates
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
optimize_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
optimize_resources
.
py
"
inputs
=
[
android_sdk_tools_bundle_aapt2
invoker
.
r_text_path
-
2669
7
+
2669
7
if
(
enable_java_templates
)
{
template
(
"
unused_resources
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
unused_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
unused_resources
.
py
"
depfile
=
"
target_gen_dir
/
{
target_name
}
.
d
"
_unused_resources_script
=
"
root_build_dir
/
bin
/
helper
/
unused_resources
"
inputs
=
[
_unused_resources_script
]
+
java_paths_for_inputs
-
2677
7
+
2677
7
if
(
enable_java_templates
)
{
if
(
!
defined
(
deps
)
)
{
deps
=
[
]
}
-
deps
+
=
[
"
/
/
build
/
android
/
unused_resources
:
unused_resources
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
android
/
unused_resources
:
unused_resources
"
]
_rebased_build_config
=
rebase_path
(
invoker
.
build_config
root_build_dir
)
args
=
[
"
-
-
script
"
-
2736
7
+
2736
7
if
(
enable_java_templates
)
{
template
(
"
create_size_info_files
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_size_info_files
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_size_info_files
.
py
"
_jar_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
jar
.
info
"
_pak_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
pak
.
info
"
_res_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
res
.
info
"
-
2830
7
+
2830
7
if
(
enable_java_templates
)
{
invoker
.
secondary_native_lib_placeholders
}
-
_script
=
"
/
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
_inputs
=
[
invoker
.
packaged_resources_path
]
-
3103
16
+
3103
16
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
if
(
invoker
.
use_turbine
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
turbine
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
turbine
.
py
"
inputs
=
[
"
/
/
third_party
/
jdk
/
current
/
bin
/
java
"
android_sdk_jar
]
}
else
if
(
invoker
.
enable_errorprone
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
errorprone
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
errorprone
.
py
"
inputs
=
javac_paths_for_inputs
}
else
{
-
script
=
"
/
/
build
/
android
/
gyp
/
compile_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
py
"
inputs
=
javac_paths_for_inputs
}
-
3329
7
+
3329
7
if
(
enable_java_templates
)
{
}
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
compile_kt
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_kt
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
deps
=
_srcjar_deps
if
(
defined
(
invoker
.
deps
)
)
{
-
3399
7
+
3399
7
if
(
enable_java_templates
)
{
"
data_deps
"
"
public_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
ijar
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
ijar
.
py
"
deps
=
[
_ijar_target
]
if
(
defined
(
invoker
.
deps
)
)
{
deps
+
=
invoker
.
deps
-
3591
8
+
3591
8
if
(
enable_java_templates
)
{
}
}
-
if
(
_chromium_code
&
&
_has_sources
&
&
_target_dir
!
=
"
/
/
build
/
android
"
)
{
-
_default_deps
=
[
"
/
/
build
/
android
:
build_java
"
]
+
if
(
_chromium_code
&
&
_has_sources
&
&
_target_dir
!
=
"
/
/
chromium
/
build
/
android
"
)
{
+
_default_deps
=
[
"
/
/
chromium
/
build
/
android
:
build_java
"
]
}
else
{
_default_deps
=
[
]
}
-
4149
7
+
4149
7
if
(
enable_java_templates
)
{
get_label_info
(
invoker
.
bytecode_rewriter_target
"
name
"
)
_rebased_build_config
=
rebase_path
(
_build_config
root_build_dir
)
action_with_pydeps
(
_rewritten_jar_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
bytecode_rewriter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
bytecode_rewriter
.
py
"
inputs
=
java_paths_for_inputs
+
[
_rewriter_path
_build_config
-
4536
7
+
4536
7
template
(
"
create_android_app_bundle_module
"
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
_deps
=
invoker
.
deps
-
_script
=
"
/
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
#
NOTE
:
Compared
to
the
inputs
of
the
"
package_apk
"
template
action
#
this
list
is
much
smaller
since
finalize_apk
is
never
called
-
4664
7
+
4664
7
template
(
"
rename_jar_classes
"
)
{
"
deps
"
"
public_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
rename_java_classes
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
rename_java_classes
.
py
"
inputs
=
[
_r8_path
invoker
.
input
diff
-
-
git
a
/
config
/
android
/
linker_version_script
.
gni
b
/
config
/
android
/
linker_version_script
.
gni
index
facf3a3cf
.
.
6a13536e9
100644
-
-
-
a
/
config
/
android
/
linker_version_script
.
gni
+
+
+
b
/
config
/
android
/
linker_version_script
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
if
(
build_with_chromium
)
{
import
(
"
/
/
third_party
/
jni_zero
/
jni_zero
.
gni
"
)
}
-
21
7
+
21
7
if
(
build_with_chromium
)
{
template
(
"
generate_linker_version_script
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
script
=
"
/
/
build
/
android
/
gyp
/
generate_linker_version_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
generate_linker_version_script
.
py
"
outputs
=
[
invoker
.
linker_script
]
inputs
=
[
]
args
=
[
"
-
-
output
=
"
+
rebase_path
(
invoker
.
linker_script
root_build_dir
)
]
diff
-
-
git
a
/
config
/
android
/
rules
.
gni
b
/
config
/
android
/
rules
.
gni
index
c3c62337a
.
.
8fc2e6feb
100644
-
-
-
a
/
config
/
android
/
rules
.
gni
+
+
+
b
/
config
/
android
/
rules
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
copy_ex
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rts
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
copy_ex
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rts
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
assert
(
-
108
14
+
108
14
template
(
"
create_native_executable_dist
"
)
{
}
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
zip
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
zip
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
_BUNDLETOOL_JAR_PATH
=
"
/
/
third_party
/
android_build_tools
/
bundletool
/
cipd
/
bundletool
.
jar
"
-
163
7
+
163
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
gcc_preprocess
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
gcc_preprocess
.
py
"
outputs
=
[
"
target_gen_dir
/
target_name
.
srcjar
"
]
_include_dirs
=
[
-
213
7
+
213
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_enum
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_enum
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
277
7
+
277
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_strings
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_strings
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
350
7
+
350
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_features
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_features
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
389
7
+
389
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
if
(
defined
(
invoker
.
includes
)
)
{
inputs
+
=
invoker
.
includes
}
-
script
=
"
/
/
build
/
android
/
gyp
/
jinja_template
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jinja_template
.
py
"
outputs
=
[
invoker
.
output
]
-
442
7
+
442
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
write_native_libraries_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
write_native_libraries_java
.
py
"
outputs
=
[
_native_libraries_file
]
args
=
[
"
-
-
output
"
-
502
7
+
502
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
#
action
(
"
my_resources__create_zip
"
)
{
#
_depfile
=
"
target_gen_dir
/
{
target_name
}
.
d
"
-
#
script
=
"
/
/
build
/
path
/
to
/
create_my_resources_zip
.
py
"
+
#
script
=
"
/
/
chromium
/
build
/
path
/
to
/
create_my_resources_zip
.
py
"
#
args
=
[
#
"
-
-
depfile
"
rebase_path
(
_depfile
root_build_dir
)
#
"
-
-
output
-
zip
"
rebase_path
(
_zip_archive
root_build_dir
)
-
540
7
+
540
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
]
inputs
=
[
invoker
.
generated_resources_zip
]
outputs
=
[
_rtxt_out_path
]
-
script
=
"
/
/
build
/
android
/
gyp
/
create_r_txt
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_r_txt
.
py
"
args
=
[
"
-
-
resources
-
zip
-
path
"
rebase_path
(
invoker
.
generated_resources_zip
root_build_dir
)
-
578
7
+
578
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
_generating_target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
inputs
=
invoker
.
resources
-
script
=
"
/
/
build
/
android
/
gyp
/
jinja_template
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jinja_template
.
py
"
outputs
=
[
_resources_zip
]
-
632
7
+
632
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
"
deps
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
process_native_prebuilt
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
process_native_prebuilt
.
py
"
_lib_path
=
"
{
invoker
.
base_dir
}
/
android_app_abi
/
{
invoker
.
lib_name
}
"
_stripped_output_path
=
"
root_out_dir
/
{
invoker
.
lib_name
}
"
_unstripped_output_path
=
-
929
7
+
929
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
forward_variables_from
(
invoker
[
"
deps
"
]
)
public_deps
=
[
"
:
_build_config_target_name
"
]
-
script
=
"
/
/
build
/
android
/
gyp
/
validate_inputs
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
validate_inputs
.
py
"
inputs
=
_all_sources
outputs
=
[
"
target_gen_dir
/
target_name
.
stamp
"
]
args
=
[
-
1145
7
+
1145
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
if
(
defined
(
invoker
.
android_manifest
)
)
{
input_manifest
=
invoker
.
android_manifest
}
else
{
-
input_manifest
=
"
/
/
build
/
android
/
AndroidManifest
.
xml
"
+
input_manifest
=
"
/
/
chromium
/
build
/
android
/
AndroidManifest
.
xml
"
}
if
(
defined
(
_package_name
)
)
{
-
1276
7
+
1276
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
}
srcjar_deps
+
=
[
"
:
_compile_resources_target_name
"
-
"
/
/
build
/
android
:
build_config_for_robolectric_srcjar
"
+
"
/
/
chromium
/
build
/
android
:
build_config_for_robolectric_srcjar
"
]
if
(
_generate_final_jni
)
{
srcjar_deps
+
=
[
"
:
_native_libraries_target_name
"
]
+
_jni_srcjar_deps
-
1526
7
+
1526
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_rebased_build_config
=
rebase_path
(
_build_config
root_build_dir
)
action_with_pydeps
(
_zip_target_name
)
{
forward_variables_from
(
invoker
[
"
data
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
zip
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
deps
=
[
_build_config_dep
]
-
1719
7
+
1719
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
]
)
depfile
=
"
target_gen_dir
/
target_name
.
d
"
deps
=
_deps
-
script
=
"
/
/
build
/
android
/
gyp
/
dist_aar
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dist_aar
.
py
"
inputs
=
[
_build_config
]
-
1928
7
+
1928
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
"
deps
"
"
inputs
"
]
)
-
sources
=
[
"
/
/
build
/
android
/
java
/
templates
/
BuildConfig
.
template
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
java
/
templates
/
BuildConfig
.
template
"
]
defines
=
[
]
if
(
(
defined
(
invoker
.
assertions_implicitly_enabled
)
&
&
-
2025
7
+
2025
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
defines
+
=
[
"
USE_FINAL
"
]
}
-
sources
=
[
"
/
/
build
/
android
/
java
/
templates
/
ProductConfig
.
template
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
java
/
templates
/
ProductConfig
.
template
"
]
defines
+
=
[
"
PACKAGE
=
{
invoker
.
java_package
}
"
]
_use_chromium_linker
=
-
2379
7
+
2379
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
_incremental_manifest_target_name
)
{
deps
=
[
"
:
_merge_manifest_target
"
]
script
=
-
"
/
/
build
/
android
/
incremental_install
/
generate_android_manifest
.
py
"
+
"
/
/
chromium
/
build
/
android
/
incremental_install
/
generate_android_manifest
.
py
"
inputs
=
[
_android_manifest
]
outputs
=
[
_incremental_android_manifest
]
-
2685
7
+
2685
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
(
_uses_static_library
|
|
_native_libs_deps
!
=
[
]
)
)
{
_sanitizer_loadable_modules
+
=
[
"
root_gen_dir
/
build
/
android
/
generate_wrap_sh
/
wrap
.
sh
"
]
-
_sanitizer_deps
+
=
[
"
/
/
build
/
android
:
generate_wrap_sh
"
]
+
_sanitizer_deps
+
=
[
"
/
/
chromium
/
build
/
android
:
generate_wrap_sh
"
]
}
_assertions_implicitly_enabled
=
defined
(
invoker
.
custom_assertion_handler
)
-
2892
7
+
2892
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
Injected
JaCoCo
code
causes
-
checkdiscards
to
fail
.
!
use_jacoco_coverage
)
{
proguard_configs
=
[
-
"
/
/
build
/
android
/
dcheck_is_off
.
flags
"
+
"
/
/
chromium
/
build
/
android
/
dcheck_is_off
.
flags
"
"
/
/
third_party
/
jni_zero
/
checkdiscard_proguard
.
flags
"
]
}
-
3028
7
+
3028
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
}
if
(
_incremental_apk
)
{
-
_dex_target
=
"
/
/
build
/
android
/
incremental_install
:
apk_dex
"
+
_dex_target
=
"
/
/
chromium
/
build
/
android
/
incremental_install
:
apk_dex
"
deps
+
=
[
"
:
_compile_resources_target
"
-
3085
7
+
3085
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
if
(
_incremental_apk
)
{
_write_installer_json_rule_name
=
"
{
_template_name
}
__incremental_json
"
action_with_pydeps
(
_write_installer_json_rule_name
)
{
-
script
=
"
/
/
build
/
android
/
incremental_install
/
write_installer_json
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
incremental_install
/
write_installer_json
.
py
"
deps
=
[
"
:
_build_config_target
"
]
+
_all_native_libs_deps
data
=
[
_incremental_install_json_path
]
-
3135
7
+
3135
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_apk_operations_target_name
=
"
{
target_name
}
__apk_operations
"
action_with_pydeps
(
_apk_operations_target_name
)
{
_generated_script
=
"
root_build_dir
/
bin
/
{
invoker
.
target_name
}
"
-
script
=
"
/
/
build
/
android
/
gyp
/
create_apk_operations_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_apk_operations_script
.
py
"
outputs
=
[
_generated_script
]
args
=
[
"
-
-
script
-
output
-
path
"
-
3172
13
+
3172
13
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
}
data
=
[
]
data_deps
=
[
-
"
/
/
build
/
android
:
apk_operations_py
"
-
"
/
/
build
/
android
:
stack_tools
"
+
"
/
/
chromium
/
build
/
android
:
apk_operations_py
"
+
"
/
/
chromium
/
build
/
android
:
stack_tools
"
]
if
(
_proguard_enabled
&
&
!
_incremental_apk
)
{
#
Required
by
logcat
command
.
-
data_deps
+
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
data
+
=
[
"
_final_apk_path
.
mapping
"
]
args
+
=
[
"
-
-
proguard
-
mapping
-
path
"
-
3568
7
+
3568
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
template
(
"
instrumentation_test_runner
"
)
{
if
(
use_rts
)
{
action
(
"
{
invoker
.
target_name
}
__rts_filters
"
)
{
-
script
=
"
/
/
build
/
add_rts_filters
.
py
"
+
script
=
"
/
/
chromium
/
build
/
add_rts_filters
.
py
"
rts_file
=
"
{
root_build_dir
}
/
gen
/
rts
/
{
invoker
.
target_name
}
.
filter
"
args
=
[
rebase_path
(
rts_file
root_build_dir
)
]
outputs
=
[
rts_file
]
-
3587
7
+
3587
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
_apk_operations_target_name
)
{
testonly
=
true
-
script
=
"
/
/
build
/
android
/
gyp
/
create_test_apk_wrapper_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_test_apk_wrapper_script
.
py
"
deps
=
[
]
_generated_script
=
"
root_build_dir
/
bin
/
{
invoker
.
target_name
}
"
outputs
=
[
_generated_script
]
-
3906
7
+
3906
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
if
(
!
defined
(
use_default_launcher
)
|
|
use_default_launcher
)
{
deps
+
=
[
-
"
/
/
build
/
android
/
gtest_apk
:
native_test_instrumentation_test_runner_java
"
+
"
/
/
chromium
/
build
/
android
/
gtest_apk
:
native_test_instrumentation_test_runner_java
"
"
/
/
testing
/
android
/
native_test
:
native_test_java
"
]
}
-
3941
7
+
3941
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
script
=
"
/
/
build
/
android
/
gyp
/
aidl
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
aidl
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
sources
=
invoker
.
sources
-
4021
7
+
4021
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
The
suffix
"
__protoc_java
.
srcjar
"
is
used
by
SuperSize
to
identify
#
protobuf
symbols
.
_srcjar_path
=
"
target_gen_dir
/
target_name
.
srcjar
"
-
script
=
"
/
/
build
/
protoc_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
protoc_java
.
py
"
if
(
defined
(
invoker
.
deps
)
)
{
#
Need
to
care
only
about
targets
that
might
generate
.
proto
files
.
-
4122
7
+
4122
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
action_with_pydeps
(
"
{
_template_name
}
__flatc_java
"
)
{
_srcjar_path
=
"
target_gen_dir
/
target_name
.
srcjar
"
-
script
=
"
/
/
build
/
android
/
gyp
/
flatc_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
flatc_java
.
py
"
deps
=
[
_flatc_dep
]
if
(
defined
(
invoker
.
deps
)
)
{
-
4246
7
+
4246
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
Some
libraries
might
not
have
resources
;
others
might
have
two
jars
.
if
(
update_android_aar_prebuilts
)
{
print
(
"
Writing
"
+
rebase_path
(
_info_path
"
/
/
"
)
)
-
exec_script
(
"
/
/
build
/
android
/
gyp
/
aar
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
android
/
gyp
/
aar
.
py
"
[
"
list
"
"
-
-
output
"
-
4293
7
+
4293
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
}
action_with_pydeps
(
_unpack_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
aar
.
py
"
#
Unzips
the
AAR
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
aar
.
py
"
#
Unzips
the
AAR
args
=
[
"
extract
"
"
-
-
output
-
dir
"
-
4729
12
+
4729
12
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
if
(
_proguard_enabled
)
{
if
(
_add_view_trace_events
)
{
_trace_event_rewriter_target
=
-
"
/
/
build
/
android
/
bytecode
:
trace_event_adder
"
+
"
/
/
chromium
/
build
/
android
/
bytecode
:
trace_event_adder
"
_rewritten_jar_target_name
=
"
{
target_name
}
__trace_event_rewritten
"
_rewriter_path
=
root_build_dir
+
"
/
bin
/
helper
/
trace_event_adder
"
_stamp
=
"
{
target_out_dir
}
/
{
target_name
}
.
trace_event_rewrite
.
stamp
"
action_with_pydeps
(
_rewritten_jar_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
trace_event_bytecode_rewriter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
trace_event_bytecode_rewriter
.
py
"
inputs
=
java_paths_for_inputs
+
[
_rewriter_path
_build_config
-
4795
7
+
4795
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
Injected
JaCoCo
code
causes
-
checkdiscards
to
fail
.
!
use_jacoco_coverage
)
{
proguard_configs
=
[
-
"
/
/
build
/
android
/
dcheck_is_off
.
flags
"
+
"
/
/
chromium
/
build
/
android
/
dcheck_is_off
.
flags
"
"
/
/
third_party
/
jni_zero
/
checkdiscard_proguard
.
flags
"
]
}
-
4944
7
+
4944
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_bundle_target_name
=
"
{
_target_name
}
__bundle
"
action_with_pydeps
(
_bundle_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle
.
py
"
inputs
=
_all_module_zip_paths
+
_all_module_build_configs
+
[
_BUNDLETOOL_JAR_PATH
]
+
java_paths_for_inputs
outputs
=
[
_bundle_path
]
-
5010
9
+
5010
9
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
-
5049
7
+
5049
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_bundle_wrapper_script_path
=
"
_bundle_wrapper_script_dir
/
_target_name
"
action_with_pydeps
(
"
{
_target_name
}
__wrapper_script
"
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_bundle_wrapper_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_bundle_wrapper_script
.
py
"
inputs
=
[
_base_module_build_config
]
outputs
=
[
_bundle_wrapper_script_path
]
-
5061
8
+
5061
8
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_bundle_path
]
data_deps
=
[
-
"
/
/
build
/
android
:
apk_operations_py
"
-
"
/
/
build
/
android
:
stack_tools
"
+
"
/
/
chromium
/
build
/
android
:
apk_operations_py
"
+
"
/
/
chromium
/
build
/
android
:
stack_tools
"
]
deps
=
[
_base_module_build_config_target
]
-
5117
7
+
5117
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
]
#
Required
by
logcat
command
.
-
data_deps
+
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
data
+
=
[
_proguard_mapping_path
]
}
if
(
is_official_build
)
{
-
5178
7
+
5178
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
_apks_path
=
"
root_build_dir
/
apks
/
_bundle_name
.
apks
"
action_with_pydeps
(
"
{
_target_name
}
_apks
"
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
inputs
=
java_paths_for_inputs
+
[
_bundle_path
_BUNDLETOOL_JAR_PATH
-
5212
9
+
5212
9
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
}
-
5236
7
+
5236
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
template
(
"
create_app_bundle_minimal_apks
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
_dir
=
get_path_info
(
invoker
.
bundle_path
"
dir
"
)
_name
=
get_path_info
(
invoker
.
bundle_path
"
name
"
)
_output_path
=
"
_dir
/
_name
.
minimal
.
apks
"
-
5289
7
+
5289
7
if
(
!
is_robolectric
&
&
enable_java_templates
)
{
"
{
target_name
}
.
zip
"
action_with_pydeps
(
_generating_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_ui_locale_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_ui_locale_resources
.
py
"
outputs
=
[
_output_zip
]
args
=
[
"
-
-
locale
-
list
=
{
invoker
.
ui_locales
}
"
diff
-
-
git
a
/
config
/
android
/
system_image
.
gni
b
/
config
/
android
/
system_image
.
gni
index
56a235572
.
.
54d5cc29e
100644
-
-
-
a
/
config
/
android
/
system_image
.
gni
+
+
+
b
/
config
/
android
/
system_image
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
#
Creates
a
stub
.
apk
suitable
for
use
with
compressed
system
APKs
.
#
-
39
7
+
39
7
template
(
"
system_image_stub_apk
"
)
{
}
action_with_pydeps
(
"
_manifest_target_name
"
)
{
outputs
=
[
_manifest_path
]
-
script
=
"
/
/
build
/
android
/
gyp
/
create_stub_manifest
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_stub_manifest
.
py
"
args
=
[
"
-
-
output
"
rebase_path
(
_manifest_path
root_build_dir
)
-
73
7
+
73
7
template
(
"
system_image_stub_apk
"
)
{
}
action_with_pydeps
(
_resource_apk_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
compile_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_resources
.
py
"
inputs
=
[
_manifest_path
android_sdk_tools_bundle_aapt2
-
234
7
+
234
7
template
(
"
system_image_apks
"
)
{
}
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
system_image_apks
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
system_image_apks
.
py
"
deps
=
[
invoker
.
apk_or_bundle_target
]
inputs
=
[
invoker
.
input_apk_or_bundle
]
if
(
defined
(
invoker
.
stub_output
)
)
{
-
259
7
+
259
7
template
(
"
system_image_apks
"
)
{
rebase_path
(
_wrapper_path
root_out_dir
)
]
inputs
+
=
[
_wrapper_path
]
-
deps
+
=
[
"
/
/
build
/
android
:
apk_operations_py
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
android
:
apk_operations_py
"
]
if
(
defined
(
invoker
.
fuse_apk
)
&
&
invoker
.
fuse_apk
)
{
args
+
=
[
"
-
-
fuse
-
apk
"
]
}
diff
-
-
git
a
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
b
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
index
9013c27ec
.
.
a959ef84d
100644
-
-
-
a
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
import
(
"
/
/
third_party
/
protobuf
/
proto_library
.
gni
"
)
#
The
purpose
of
these
targets
is
test
that
|
deps
|
satisfies
java
compilation
diff
-
-
git
a
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
b
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
index
3b7936384
.
.
183252036
100644
-
-
-
a
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
#
Tests
for
'
resource_overlay
'
parameter
in
android_resources
(
)
template
.
diff
-
-
git
a
/
config
/
apple
/
BUILD
.
gn
b
/
config
/
apple
/
BUILD
.
gn
index
add2395d6
.
.
e604d26d1
100644
-
-
-
a
/
config
/
apple
/
BUILD
.
gn
+
+
+
b
/
config
/
apple
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
#
The
ldflags
referenced
below
are
handled
by
#
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
.
diff
-
-
git
a
/
config
/
apple
/
create_signed_bundle
.
gni
b
/
config
/
apple
/
create_signed_bundle
.
gni
index
989ab96bd
.
.
2586fe2d7
100644
-
-
-
a
/
config
/
apple
/
create_signed_bundle
.
gni
+
+
+
b
/
config
/
apple
/
create_signed_bundle
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
Constants
corresponding
to
the
bundle
type
identifiers
use
application
-
177
7
+
177
7
template
(
"
apple_mobile_create_signed_bundle
"
)
{
if
(
_enable_entitlements
)
{
if
(
!
defined
(
invoker
.
entitlements_target
)
)
{
-
_entitlements_path
=
"
/
/
build
/
config
/
ios
/
entitlements
.
plist
"
+
_entitlements_path
=
"
/
/
chromium
/
build
/
config
/
ios
/
entitlements
.
plist
"
if
(
defined
(
invoker
.
entitlements_path
)
)
{
_entitlements_path
=
invoker
.
entitlements_path
}
-
270
7
+
270
7
template
(
"
apple_mobile_create_signed_bundle
"
)
{
deps
=
[
]
}
-
post_processing_script
=
"
/
/
build
/
config
/
apple
/
codesign
.
py
"
+
post_processing_script
=
"
/
/
chromium
/
build
/
config
/
apple
/
codesign
.
py
"
post_processing_sources
=
[
_bundle_binary_path
]
if
(
_enable_entitlements
)
{
if
(
defined
(
invoker
.
entitlements_target
)
)
{
-
355
7
+
355
7
template
(
"
apple_mobile_create_signed_bundle
"
)
{
invoker
.
partial_info_plist
]
-
_plist_compiler_path
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
_plist_compiler_path
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
post_processing_sources
+
=
_partial_info_plists
post_processing_sources
+
=
[
_plist_compiler_path
]
diff
-
-
git
a
/
config
/
apple
/
mobile_bundle_data
.
gni
b
/
config
/
apple
/
mobile_bundle_data
.
gni
index
26be4a5a6
.
.
ad934d561
100644
-
-
-
a
/
config
/
apple
/
mobile_bundle_data
.
gni
+
+
+
b
/
config
/
apple
/
mobile_bundle_data
.
gni
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
zip
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
zip
.
gni
"
)
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
}
#
Compile
a
xib
or
storyboard
file
and
add
it
to
a
bundle_data
so
that
it
is
-
56
7
+
56
7
template
(
"
bundle_data_ib_file
"
)
{
"
bundle_files
"
]
)
-
script
=
"
/
/
build
/
config
/
apple
/
compile_ib_files
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
apple
/
compile_ib_files
.
py
"
args
=
[
"
-
-
input
"
rebase_path
(
invoker
.
source
root_build_dir
)
diff
-
-
git
a
/
config
/
apple
/
mobile_config
.
gni
b
/
config
/
apple
/
mobile_config
.
gni
index
48e80f216
.
.
01a4e654c
100644
-
-
-
a
/
config
/
apple
/
mobile_config
.
gni
+
+
+
b
/
config
/
apple
/
mobile_config
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
#
For
use_blink
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
#
For
use_blink
declare_args
(
)
{
#
Configure
the
environment
for
which
to
build
.
Could
be
either
"
device
"
-
118
7
+
118
7
if
(
is_ios
|
|
is_watchos
)
{
]
}
ios_code_signing_identity
=
-
exec_script
(
"
/
/
build
/
config
/
apple
/
find_signing_identity
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
apple
/
find_signing_identity
.
py
"
find_signing_identity_args
"
trim
string
"
)
}
diff
-
-
git
a
/
config
/
apple
/
swift_source_set
.
gni
b
/
config
/
apple
/
swift_source_set
.
gni
index
b1cad2e02
.
.
a3d0af3e1
100644
-
-
-
a
/
config
/
apple
/
swift_source_set
.
gni
+
+
+
b
/
config
/
apple
/
swift_source_set
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
#
Defines
a
template
for
Swift
source
files
.
The
default
module_name
#
of
the
target
is
the
entire
target
label
(
without
the
leading
/
/
)
diff
-
-
git
a
/
config
/
apple
/
symbols
.
gni
b
/
config
/
apple
/
symbols
.
gni
index
3b4dee447
.
.
fc49783d1
100644
-
-
-
a
/
config
/
apple
/
symbols
.
gni
+
+
+
b
/
config
/
apple
/
symbols
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
#
This
file
declares
arguments
and
configs
that
control
whether
dSYM
debug
#
info
is
produced
and
whether
build
products
are
stripped
.
diff
-
-
git
a
/
config
/
arm
.
gni
b
/
config
/
arm
.
gni
index
f72ed80f5
.
.
25e64d430
100644
-
-
-
a
/
config
/
arm
.
gni
+
+
+
b
/
config
/
arm
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
#
These
are
primarily
relevant
in
current_cpu
=
=
"
arm
"
contexts
where
#
ARM
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
diff
-
-
git
a
/
config
/
buildflags_paint_preview
.
gni
b
/
config
/
buildflags_paint_preview
.
gni
index
f5eabf49a
.
.
1582abe38
100644
-
-
-
a
/
config
/
buildflags_paint_preview
.
gni
+
+
+
b
/
config
/
buildflags_paint_preview
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
declare_args
(
)
{
#
Enable
basic
paint
preview
support
.
Does
not
work
on
iOS
.
Should
diff
-
-
git
a
/
config
/
c
+
+
/
BUILD
.
gn
b
/
config
/
c
+
+
/
BUILD
.
gn
index
f449ebffc
.
.
fcf6675a7
100644
-
-
-
a
/
config
/
c
+
+
/
BUILD
.
gn
+
+
+
b
/
config
/
c
+
+
/
BUILD
.
gn
-
1
8
+
1
8
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
import
(
"
/
/
buildtools
/
deps_revisions
.
gni
"
)
assert
(
use_custom_libcxx
"
should
only
be
used
if
use_custom_libcxx
is
set
"
)
diff
-
-
git
a
/
config
/
c
+
+
/
c
+
+
.
gni
b
/
config
/
c
+
+
/
c
+
+
.
gni
index
7d29a7f65
.
.
fe8fd3206
100644
-
-
-
a
/
config
/
c
+
+
/
c
+
+
.
gni
+
+
+
b
/
config
/
c
+
+
/
c
+
+
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
diff
-
-
git
a
/
config
/
chromebox_for_meetings
/
BUILD
.
gn
b
/
config
/
chromebox_for_meetings
/
BUILD
.
gn
index
08d74f97d
.
.
db5dd3b6f
100644
-
-
-
a
/
config
/
chromebox_for_meetings
/
BUILD
.
gn
+
+
+
b
/
config
/
chromebox_for_meetings
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromebox_for_meetings
/
buildflags
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromebox_for_meetings
/
buildflags
.
gni
"
)
buildflag_header
(
"
buildflags
"
)
{
header
=
"
buildflags
.
h
"
diff
-
-
git
a
/
config
/
chromecast
/
BUILD
.
gn
b
/
config
/
chromecast
/
BUILD
.
gn
index
97bbef720
.
.
a7e085e46
100644
-
-
-
a
/
config
/
chromecast
/
BUILD
.
gn
+
+
+
b
/
config
/
chromecast
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
assert
(
is_castos
|
|
is_cast_android
)
diff
-
-
git
a
/
config
/
chromeos
/
BUILD
.
gn
b
/
config
/
chromeos
/
BUILD
.
gn
index
84be2dcca
.
.
f850557db
100644
-
-
-
a
/
config
/
chromeos
/
BUILD
.
gn
+
+
+
b
/
config
/
chromeos
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
assert
(
is_chromeos
)
diff
-
-
git
a
/
config
/
chromeos
/
rules
.
gni
b
/
config
/
chromeos
/
rules
.
gni
index
57e6a4139
.
.
331117e33
100644
-
-
-
a
/
config
/
chromeos
/
rules
.
gni
+
+
+
b
/
config
/
chromeos
/
rules
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
assert
(
is_chromeos
)
assert
(
is_chromeos_device
)
-
35
7
+
35
7
if
(
cros_sdk_version
!
=
"
"
)
{
foreach
(
b
_potential_test_boards
)
{
_cache_path_prefix
=
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
{
b
}
+
{
cros_sdk_version
}
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
{
b
}
+
{
cros_sdk_version
}
"
_cros_is_vm
=
false
foreach
(
b1
string_split
(
cros_boards_with_qemu_images
"
:
"
)
)
{
-
70
7
+
70
7
if
(
cros_sdk_version
!
=
"
"
)
{
_all_symlinks
+
=
m
[
1
]
}
_all_symlink_targets
=
-
exec_script
(
"
/
/
build
/
get_symlink_targets
.
py
"
_all_symlinks
"
list
lines
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
get_symlink_targets
.
py
"
_all_symlinks
"
list
lines
"
)
_index
=
0
foreach
(
m
_symlink_map
)
{
_symlink_targets
=
[
]
-
143
9
+
143
9
template
(
"
generate_chromeos_sdk_deps
"
)
{
data
=
_sdk_data
data
+
=
[
#
Needed
for
various
SDK
components
used
below
.
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
misc
/
"
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
"
-
"
/
/
build
/
cros_cache
/
common
/
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
misc
/
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
"
+
"
/
/
chromium
/
build
/
cros_cache
/
common
/
"
"
/
/
chrome
/
VERSION
"
#
The
LKGM
file
controls
what
version
of
the
VM
image
to
download
.
Add
it
-
153
7
+
153
7
template
(
"
generate_chromeos_sdk_deps
"
)
{
"
/
/
chromeos
/
CHROMEOS_LKGM
"
]
if
(
cros_boards_with_qemu_images
!
=
"
"
)
{
-
data
+
=
[
"
/
/
build
/
cros_cache
/
cipd
/
"
]
+
data
+
=
[
"
/
/
chromium
/
build
/
cros_cache
/
cipd
/
"
]
}
}
}
-
221
7
+
221
7
template
(
"
generate_skylab_tast_filter
"
)
{
}
action
(
target_name
)
{
testonly
=
true
-
script
=
"
/
/
build
/
chromeos
/
generate_skylab_tast_filter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
chromeos
/
generate_skylab_tast_filter
.
py
"
if
(
defined
(
tast_control
)
)
{
sources
=
[
tast_control
]
}
-
322
7
+
322
7
template
(
"
generate_runner_script
"
)
{
}
generate_wrapper
(
target_name
)
{
-
executable
=
"
/
/
build
/
chromeos
/
test_runner
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
chromeos
/
test_runner
.
py
"
wrapper_script
=
generated_script
executable_args
=
[
]
-
452
11
+
452
11
template
(
"
generate_runner_script
"
)
{
#
We
use
android
test
-
runner
'
s
results
libs
to
construct
gtest
output
#
json
.
-
"
/
/
build
/
android
/
pylib
/
__init__
.
py
"
-
"
/
/
build
/
android
/
pylib
/
base
/
"
-
"
/
/
build
/
android
/
pylib
/
results
/
"
-
"
/
/
build
/
chromeos
/
"
-
"
/
/
build
/
util
/
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
__init__
.
py
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
base
/
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
results
/
"
+
"
/
/
chromium
/
build
/
chromeos
/
"
+
"
/
/
chromium
/
build
/
util
/
"
"
/
/
third_party
/
chromite
/
"
]
diff
-
-
git
a
/
config
/
chromeos
/
ui_mode
.
gni
b
/
config
/
chromeos
/
ui_mode
.
gni
index
5dbe524b3
.
.
da47f3848
100644
-
-
-
a
/
config
/
chromeos
/
ui_mode
.
gni
+
+
+
b
/
config
/
chromeos
/
ui_mode
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
declare_args
(
)
{
chromeos_is_browser_only
=
false
diff
-
-
git
a
/
config
/
clang
/
BUILD
.
gn
b
/
config
/
clang
/
BUILD
.
gn
index
beb81db98
.
.
166c55798
100644
-
-
-
a
/
config
/
clang
/
BUILD
.
gn
+
+
+
b
/
config
/
clang
/
BUILD
.
gn
-
2
20
+
2
20
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
pch
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
pch
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
import
(
"
clang
.
gni
"
)
if
(
is_ios
)
{
#
For
target_environment
and
target_platform
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
}
_use_cros_sysroot_libs
=
is_chromeos_device
&
&
current_toolchain
=
=
default_toolchain
if
(
_use_cros_sysroot_libs
)
{
-
import
(
"
/
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
#
For
cros_target_cc
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
#
For
cros_target_cc
}
#
Helper
function
for
adding
cflags
to
use
a
clang
plugin
.
diff
-
-
git
a
/
config
/
clang
/
clang
.
gni
b
/
config
/
clang
/
clang
.
gni
index
2ad331d38
.
.
32574dd16
100644
-
-
-
a
/
config
/
clang
/
clang
.
gni
+
+
+
b
/
config
/
clang
/
clang
.
gni
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
default_clang_base_path
=
"
/
/
third_party
/
llvm
-
build
/
Release
+
Asserts
"
-
15
7
+
15
7
declare_args
(
)
{
#
Chrome
OS
'
s
.
clang_use_chrome_plugins
=
is_clang
&
&
!
is_nacl
&
&
current_os
!
=
"
zos
"
&
&
-
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
&
&
+
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
&
&
#
TODO
(
https
:
/
/
crbug
.
com
/
351909443
)
:
Remove
this
after
fixing
performance
#
of
Clang
modules
build
.
!
use_libcxx_modules
diff
-
-
git
a
/
config
/
compiler
/
BUILD
.
gn
b
/
config
/
compiler
/
BUILD
.
gn
index
1f2ccfa21
.
.
7111affd1
100644
-
-
-
a
/
config
/
compiler
/
BUILD
.
gn
+
+
+
b
/
config
/
compiler
/
BUILD
.
gn
-
2
44
+
2
44
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
#
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
host_byteorder
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
pch
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
unwind
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cros
/
cros_config
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
host_byteorder
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
pch
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
unwind
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros
/
cros_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
if
(
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
|
|
current_cpu
=
=
"
mips
"
|
|
current_cpu
=
=
"
mips64
"
)
{
-
import
(
"
/
/
build
/
config
/
mips
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mips
.
gni
"
)
}
if
(
is_mac
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
}
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
}
if
(
is_nacl
)
{
#
To
keep
NaCl
variables
out
of
builds
that
don
'
t
include
NaCl
all
#
variables
defined
in
nacl
/
config
.
gni
referenced
here
should
be
protected
by
#
is_nacl
conditions
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
}
lld_path
=
"
"
-
286
23
+
286
23
config
(
"
compiler
"
)
{
#
categories
here
add
it
to
the
associated
file
to
keep
this
shared
config
#
smaller
.
if
(
is_win
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
win
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
compiler
"
]
}
else
if
(
is_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
android
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
android
:
compiler
"
]
}
else
if
(
is_linux
|
|
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
linux
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
linux
:
compiler
"
]
}
else
if
(
is_nacl
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
nacl
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
compiler
"
]
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
compiler
"
]
}
else
if
(
is_ios
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
compiler
"
]
}
else
if
(
is_fuchsia
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
fuchsia
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
compiler
"
]
}
else
if
(
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
aix
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
aix
:
compiler
"
]
}
else
if
(
current_os
=
=
"
zos
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
zos
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
zos
:
compiler
"
]
}
configs
+
=
[
-
593
7
+
593
7
config
(
"
compiler
"
)
{
#
TODO
(
crbug
.
com
/
40283598
)
:
This
causes
binary
size
growth
and
potentially
#
other
problems
.
#
TODO
(
crbug
.
com
/
40284925
)
:
This
isn
'
t
supported
by
Cronet
'
s
mainline
llvm
version
.
-
if
(
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
&
&
+
if
(
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
&
&
!
llvm_android_mainline
)
{
cflags
+
=
[
"
-
mllvm
"
-
618
7
+
618
7
config
(
"
compiler
"
)
{
#
Enable
ELF
CREL
(
see
crbug
.
com
/
357878242
)
for
all
platforms
that
use
ELF
#
(
excluding
toolchains
that
use
an
older
version
of
LLVM
)
.
if
(
is_linux
&
&
!
llvm_android_mainline
&
&
-
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
{
+
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
{
cflags
+
=
[
"
-
Wa
-
-
crel
-
-
allow
-
experimental
-
crel
"
]
}
}
-
1147
8
+
1147
8
config
(
"
thinlto_optimize_default
"
)
{
#
Use
this
to
enable
optimization
in
the
ThinLTO
link
step
for
select
targets
#
when
thin_lto_enable_optimizations
is
set
by
doing
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
#
#
Since
it
makes
linking
significantly
slower
and
more
resource
intensive
only
#
use
it
on
important
targets
such
as
the
main
browser
executable
or
dll
.
-
1190
7
+
1190
7
config
(
"
compiler_cpu_abi
"
)
{
configs
=
[
]
if
(
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromeos
:
compiler_cpu_abi
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromeos
:
compiler_cpu_abi
"
]
}
if
(
(
is_posix
&
&
!
is_apple
)
|
|
is_fuchsia
)
{
-
1504
7
+
1504
7
config
(
"
compiler_codegen
"
)
{
ldflags
=
[
]
if
(
is_nacl
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
nacl
:
compiler_codegen
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
compiler_codegen
"
]
}
if
(
current_cpu
=
=
"
arm64
"
&
&
!
is_win
&
&
is_clang
)
{
-
1652
7
+
1652
7
config
(
"
clang_revision
"
)
{
#
e
.
g
.
by
setting
in
the
the
project
'
s
.
gn
file
.
config
(
"
clang_warning_suppression
"
)
{
#
Some
build
configs
use
older
versions
of
clang
that
don
'
t
support
WSMs
-
if
(
!
is_nacl
&
&
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
&
&
+
if
(
!
is_nacl
&
&
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
&
&
!
llvm_android_mainline
&
&
is_clang
&
&
clang_warning_suppression_file
!
=
"
"
)
{
from_build_root
=
-
1765
7
+
1765
7
config
(
"
runtime_library
"
)
{
#
libandroid_support
in
the
-
isystem
include
order
.
Otherwise
there
will
be
#
build
errors
related
to
symbols
declared
in
math
.
h
.
if
(
use_custom_libcxx
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
c
+
+
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
c
+
+
:
runtime_library
"
]
}
#
Rust
and
C
+
+
both
provide
intrinsics
for
LLVM
to
call
for
math
operations
.
We
-
1775
13
+
1775
13
config
(
"
runtime_library
"
)
{
#
order
to
cause
that
replacement
to
occur
by
explicitly
linking
in
clang
'
s
#
compiler
-
rt
library
.
if
(
is_clang
&
&
!
is_nacl
&
&
!
is_cronet_build
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
clang
:
compiler_builtins
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
clang
:
compiler_builtins
"
]
}
#
TODO
(
crbug
.
com
/
40570904
)
:
Come
up
with
a
better
name
for
is
POSIX
+
Fuchsia
#
configuration
.
if
(
is_posix
|
|
is_fuchsia
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
posix
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
posix
:
runtime_library
"
]
if
(
use_custom_libunwind
)
{
#
Instead
of
using
an
unwind
lib
from
the
toolchain
-
1794
18
+
1794
18
config
(
"
runtime_library
"
)
{
#
categories
here
add
it
to
the
associated
file
to
keep
this
shared
config
#
smaller
.
if
(
is_win
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
win
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
runtime_library
"
]
}
else
if
(
is_linux
|
|
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
linux
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
linux
:
runtime_library
"
]
if
(
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromeos
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromeos
:
runtime_library
"
]
}
}
else
if
(
is_ios
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
runtime_library
"
]
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
runtime_library
"
]
}
else
if
(
is_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
android
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
android
:
runtime_library
"
]
}
if
(
is_component_build
)
{
-
2082
7
+
2082
7
config
(
"
default_warnings
"
)
{
#
See
also
:
https
:
/
/
docs
.
google
.
com
/
document
/
d
/
1CTbQ
-
5cQjnjU8aCOtLiA7G6P0i5C6HpSDNlSNq6nl5E
#
#
To
enable
in
a
GN
target
use
:
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
config
(
"
prevent_unsafe_narrowing
"
)
{
if
(
is_clang
)
{
-
2428
8
+
2428
8
config
(
"
no_incompatible_pointer_warnings
"
)
{
#
You
can
override
the
optimization
level
on
a
per
-
target
basis
by
removing
the
#
default
config
and
then
adding
the
named
one
you
want
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
Shared
settings
for
both
"
optimize
"
and
"
optimize_max
"
configs
.
#
IMPORTANT
:
On
Windows
"
/
O1
"
and
"
/
O2
"
must
go
before
the
common
flags
.
-
2655
12
+
2655
12
config
(
"
optimize_max
"
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
Various
components
do
:
#
if
(
!
is_debug
)
{
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
}
#
So
this
config
has
to
have
the
selection
logic
just
like
#
"
default_optimization
"
below
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
{
ldflags
=
common_optimize_on_ldflags
if
(
is_win
)
{
-
2688
12
+
2688
12
config
(
"
optimize_speed
"
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
Various
components
do
:
#
if
(
!
is_debug
)
{
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
}
#
So
this
config
has
to
have
the
selection
logic
just
like
#
"
default_optimization
"
below
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
{
ldflags
=
common_optimize_on_ldflags
if
(
is_win
)
{
-
2725
7
+
2725
7
config
(
"
default_optimization
"
)
{
if
(
is_nacl
&
&
is_nacl_irt
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
It
gets
optimized
the
same
way
regardless
of
the
type
of
build
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
if
(
is_debug
)
{
configs
=
[
"
:
no_optimize
"
]
}
else
if
(
optimize_for_fuzzing
)
{
-
2819
8
+
2819
8
config
(
"
afdo
"
)
{
#
You
can
override
the
symbol
level
on
a
per
-
target
basis
by
removing
the
#
default
config
and
then
adding
the
named
one
you
want
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_symbols
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
symbols
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_symbols
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
symbols
"
]
#
A
helper
config
that
all
configs
passing
/
DEBUG
to
the
linker
should
#
include
as
sub
-
config
.
-
2966
7
+
2966
7
config
(
"
symbols
"
)
{
#
https
:
/
/
b
/
243982712
https
:
/
/
crbug
.
com
/
1354616
https
:
/
/
crbug
.
com
/
334073642
if
(
symbol_level
=
=
2
&
&
!
use_debug_fission
&
&
!
is_nacl
&
&
!
is_win
&
&
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
x86
"
)
)
{
-
configs
+
=
[
"
/
/
build
/
config
:
compress_debug_sections
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
:
compress_debug_sections
"
]
}
if
(
is_clang
&
&
!
is_nacl
&
&
is_win
&
&
!
is_component_build
)
{
diff
-
-
git
a
/
config
/
compiler
/
compiler
.
gni
b
/
config
/
compiler
/
compiler
.
gni
index
5b98b4aed
.
.
dd833211b
100644
-
-
-
a
/
config
/
compiler
/
compiler
.
gni
+
+
+
b
/
config
/
compiler
/
compiler
.
gni
-
2
27
+
2
27
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cronet
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cronet
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
}
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
if
(
is_apple
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
}
declare_args
(
)
{
diff
-
-
git
a
/
config
/
compiler
/
pgo
/
BUILD
.
gn
b
/
config
/
compiler
/
pgo
/
BUILD
.
gn
index
b5b77030a
.
.
c0085398b
100644
-
-
-
a
/
config
/
compiler
/
pgo
/
BUILD
.
gn
+
+
+
b
/
config
/
compiler
/
pgo
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Configuration
that
enables
PGO
instrumentation
.
config
(
"
pgo_instrumentation_flags
"
)
{
diff
-
-
git
a
/
config
/
compiler
/
pgo
/
pgo
.
gni
b
/
config
/
compiler
/
pgo
/
pgo
.
gni
index
0f1d7d3c3
.
.
772d50d1d
100644
-
-
-
a
/
config
/
compiler
/
pgo
/
pgo
.
gni
+
+
+
b
/
config
/
compiler
/
pgo
/
pgo
.
gni
-
2
15
+
2
15
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cronet
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cronet
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
}
declare_args
(
)
{
diff
-
-
git
a
/
config
/
coverage
/
BUILD
.
gn
b
/
config
/
coverage
/
BUILD
.
gn
index
1f02cb476
.
.
a9dc135d6
100644
-
-
-
a
/
config
/
coverage
/
BUILD
.
gn
+
+
+
b
/
config
/
coverage
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
config
(
"
default_coverage
"
)
{
if
(
use_clang_coverage
)
{
-
22
7
+
22
7
config
(
"
default_coverage
"
)
{
#
instead
)
and
thus
the
linker
ends
up
not
pulling
in
the
profile
#
library
.
So
we
add
an
edge
to
it
directly
.
if
(
toolchain_has_rust
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
clang
:
compiler_profile
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
clang
:
compiler_profile
"
]
}
}
diff
-
-
git
a
/
config
/
coverage
/
coverage
.
gni
b
/
config
/
coverage
/
coverage
.
gni
index
803a036e3
.
.
776489e10
100644
-
-
-
a
/
config
/
coverage
/
coverage
.
gni
+
+
+
b
/
config
/
coverage
/
coverage
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_fuchsia
)
{
import
(
"
/
/
third_party
/
fuchsia
-
gn
-
sdk
/
src
/
component
.
gni
"
)
}
diff
-
-
git
a
/
config
/
cuttlefish
/
BUILD
.
gn
b
/
config
/
cuttlefish
/
BUILD
.
gn
index
bbff7dc2c
.
.
0bfe6392a
100644
-
-
-
a
/
config
/
cuttlefish
/
BUILD
.
gn
+
+
+
b
/
config
/
cuttlefish
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
cuttlefish
/
buildflags
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cuttlefish
/
buildflags
.
gni
"
)
buildflag_header
(
"
buildflags
"
)
{
header
=
"
buildflags
.
h
"
diff
-
-
git
a
/
config
/
dcheck_always_on
.
gni
b
/
config
/
dcheck_always_on
.
gni
index
0c1e2590e
.
.
4fc71bac3
100644
-
-
-
a
/
config
/
dcheck_always_on
.
gni
+
+
+
b
/
config
/
dcheck_always_on
.
gni
-
5
7
+
5
7
#
TODO
(
crbug
.
com
/
40191347
)
:
Until
the
bug
is
resolved
we
need
to
include
#
gclient_args
for
the
definition
of
build_with_chromium
and
build_overrides
#
for
client
overrides
of
that
flag
.
The
latter
should
go
away
.
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
#
Enables
DCHECKs
to
be
built
-
in
but
to
default
to
being
non
-
fatal
/
log
-
only
.
diff
-
-
git
a
/
config
/
devtools
.
gni
b
/
config
/
devtools
.
gni
index
a1df14fd6
.
.
237346cdc
100644
-
-
-
a
/
config
/
devtools
.
gni
+
+
+
b
/
config
/
devtools
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
diff
-
-
git
a
/
config
/
features
.
gni
b
/
config
/
features
.
gni
index
a142b455b
.
.
dcc1731cf
100644
-
-
-
a
/
config
/
features
.
gni
+
+
+
b
/
config
/
features
.
gni
-
14
8
+
14
8
#
There
is
more
advice
on
where
to
put
build
flags
in
the
"
Build
flag
"
section
#
of
/
/
build
/
config
/
BUILDCONFIG
.
gn
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
declare_args
(
)
{
#
Enables
proprietary
codecs
and
demuxers
;
e
.
g
.
H264
AAC
MP3
and
MP4
.
diff
-
-
git
a
/
config
/
freetype
/
BUILD
.
gn
b
/
config
/
freetype
/
BUILD
.
gn
index
88a9c59f0
.
.
52170c9ef
100644
-
-
-
a
/
config
/
freetype
/
BUILD
.
gn
+
+
+
b
/
config
/
freetype
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
group
(
"
freetype
"
)
{
if
(
use_system_freetype
)
{
-
public_configs
=
[
"
/
/
build
/
linux
:
freetype_from_pkgconfig
"
]
+
public_configs
=
[
"
/
/
chromium
/
build
/
linux
:
freetype_from_pkgconfig
"
]
}
else
{
public_deps
=
[
"
/
/
third_party
:
freetype_harfbuzz
"
]
}
diff
-
-
git
a
/
config
/
fuchsia
/
BUILD
.
gn
b
/
config
/
fuchsia
/
BUILD
.
gn
index
b6ef61df7
.
.
45fc5b9dc
100644
-
-
-
a
/
config
/
fuchsia
/
BUILD
.
gn
+
+
+
b
/
config
/
fuchsia
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
assert
(
is_fuchsia
)
assert
(
!
is_posix
"
Fuchsia
is
not
POSIX
.
"
)
-
26
8
+
26
8
config
(
"
compiler
"
)
{
#
Files
required
to
run
on
Fuchsia
on
isolated
swarming
clients
.
group
(
"
deployment_resources
"
)
{
data
=
[
-
"
/
/
build
/
fuchsia
/
"
-
"
/
/
build
/
util
/
lib
/
"
+
"
/
/
chromium
/
build
/
fuchsia
/
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
.
build
-
id
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
meta
/
manifest
.
json
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
tools
/
{
test_host_cpu
}
/
"
diff
-
-
git
a
/
config
/
fuchsia
/
DIR_METADATA
b
/
config
/
fuchsia
/
DIR_METADATA
index
210aa6a95
.
.
ddd134a2b
100644
-
-
-
a
/
config
/
fuchsia
/
DIR_METADATA
+
+
+
b
/
config
/
fuchsia
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
diff
-
-
git
a
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
b
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
index
2c7b54ab3
.
.
c508d5e02
100644
-
-
-
a
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
+
+
+
b
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
fuchsia
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
fuchsia_package_metadata
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
fuchsia_package_metadata
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
assert
(
is_fuchsia
)
-
90
7
+
90
7
template
(
"
fuchsia_run_script_with_packages
"
)
{
if
(
!
defined
(
data_deps
)
)
{
data_deps
=
[
]
}
-
data_deps
+
=
[
"
/
/
build
/
config
/
fuchsia
:
deployment_resources
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
deployment_resources
"
]
_combined_package_list
=
[
invoker
.
package
]
-
169
7
+
169
7
template
(
"
fuchsia_package_installer
"
)
{
"
*
"
TESTONLY_AND_VISIBILITY
+
[
"
executable_args
"
]
)
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
executable
=
rebase_path
(
"
/
/
build
/
fuchsia
/
test
/
deploy_to_fuchsia
.
py
"
)
+
executable
=
rebase_path
(
"
/
/
chromium
/
build
/
fuchsia
/
test
/
deploy_to_fuchsia
.
py
"
)
executable_args
=
[
"
-
-
out
-
dir
"
"
WrappedPath
(
.
)
"
-
196
7
+
196
7
template
(
"
fuchsia_test_runner
"
)
{
"
package_deps
"
]
)
-
_test_runner_py
=
"
/
/
build
/
fuchsia
/
test
/
run_test
.
py
"
+
_test_runner_py
=
"
/
/
chromium
/
build
/
fuchsia
/
test
/
run_test
.
py
"
executable
=
rebase_path
(
_test_runner_py
)
diff
-
-
git
a
/
config
/
fuchsia
/
packaged_content_embedder_excluded_dirs
.
gni
b
/
config
/
fuchsia
/
packaged_content_embedder_excluded_dirs
.
gni
index
16f8260b4
.
.
17afa49be
100644
-
-
-
a
/
config
/
fuchsia
/
packaged_content_embedder_excluded_dirs
.
gni
+
+
+
b
/
config
/
fuchsia
/
packaged_content_embedder_excluded_dirs
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
devtools
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
devtools
.
gni
"
)
assert
(
is_fuchsia
)
diff
-
-
git
a
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
b
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
index
d259ded8d
.
.
1496ec3cf
100644
-
-
-
a
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
+
+
+
b
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
-
8
7
+
8
7
#
#
To
use
it
do
one
of
the
following
:
#
*
Add
the
following
to
your
gn
args
:
-
#
import
(
"
/
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
"
)
+
#
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
"
)
#
*
Add
the
following
to
gn_args
in
a
bot
recipe
:
#
'
args_file
'
:
'
/
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
'
diff
-
-
git
a
/
config
/
fuchsia
/
size_optimized_cast_receiver_args_internal
.
gn
b
/
config
/
fuchsia
/
size_optimized_cast_receiver_args_internal
.
gn
index
a6d8c8202
.
.
020189183
100644
-
-
-
a
/
config
/
fuchsia
/
size_optimized_cast_receiver_args_internal
.
gn
+
+
+
b
/
config
/
fuchsia
/
size_optimized_cast_receiver_args_internal
.
gn
-
11
7
+
11
7
#
*
Add
the
following
to
gn_args
in
a
bot
recipe
:
#
'
args_file
'
:
'
/
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args_internal
.
gn
'
-
import
(
"
/
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
size_optimized_cast_receiver_args
.
gn
"
)
enable_widevine
=
true
use_internal_isolated_origins
=
true
diff
-
-
git
a
/
config
/
fuchsia
/
sizes
.
gni
b
/
config
/
fuchsia
/
sizes
.
gni
index
bba225f29
.
.
69aacd934
100644
-
-
-
a
/
config
/
fuchsia
/
sizes
.
gni
+
+
+
b
/
config
/
fuchsia
/
sizes
.
gni
-
4
7
+
4
7
assert
(
is_fuchsia
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
template
(
"
compute_fuchsia_package_sizes
"
)
{
generate_wrapper
(
target_name
)
{
-
14
7
+
14
7
template
(
"
compute_fuchsia_package_sizes
"
)
{
"
data_deps
"
]
)
testonly
=
true
-
executable
=
"
/
/
build
/
fuchsia
/
binary_sizes
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
fuchsia
/
binary_sizes
.
py
"
wrapper_script
=
"
root_out_dir
/
bin
/
run_
{
target_name
}
"
assert
(
target_cpu
=
=
"
arm64
"
|
|
target_cpu
=
=
"
x64
"
-
32
7
+
32
7
template
(
"
compute_fuchsia_package_sizes
"
)
{
#
swarming
test
client
.
Note
fuchsia
-
arm64
is
also
running
binary
-
sizes
#
so
the
arm64
tools
are
included
.
data
+
=
[
-
"
/
/
build
/
fuchsia
/
"
+
"
/
/
chromium
/
build
/
fuchsia
/
"
"
/
/
tools
/
fuchsia
/
size_tests
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
tools
/
arm64
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
tools
/
x64
/
"
diff
-
-
git
a
/
config
/
fuchsia
/
symbol_archive
.
gni
b
/
config
/
fuchsia
/
symbol_archive
.
gni
index
e05af1155
.
.
09060e4ab
100644
-
-
-
a
/
config
/
fuchsia
/
symbol_archive
.
gni
+
+
+
b
/
config
/
fuchsia
/
symbol_archive
.
gni
-
19
7
+
19
7
template
(
"
symbol_archive
"
)
{
_ids_txt
=
invoker
.
ids_txt
_build_ids
=
invoker
.
archive_name
-
script
=
"
/
/
build
/
config
/
fuchsia
/
build_symbol_archive
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
fuchsia
/
build_symbol_archive
.
py
"
inputs
=
[
_ids_txt
]
diff
-
-
git
a
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
b
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
index
bfa19c7d3
.
.
515c7c03b
100644
-
-
-
a
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
+
+
+
b
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
{
include
:
[
-
"
/
/
build
/
config
/
fuchsia
/
test
/
sysmem
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
sysmem
.
shard
.
test
-
cml
"
]
children
:
[
{
diff
-
-
git
a
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
b
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
index
4e0103eea
.
.
d9975bb0c
100644
-
-
-
a
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
+
+
+
b
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
-
2
7
+
2
7
/
/
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
/
/
found
in
the
LICENSE
file
.
{
-
include
:
[
"
/
/
build
/
config
/
fuchsia
/
test
/
sysmem
.
shard
.
test
-
cml
"
]
+
include
:
[
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
sysmem
.
shard
.
test
-
cml
"
]
children
:
[
{
name
:
"
test_ui_stack
"
diff
-
-
git
a
/
config
/
fuchsia
/
test
/
web_instance
.
shard
.
test
-
cml
b
/
config
/
fuchsia
/
test
/
web_instance
.
shard
.
test
-
cml
index
b996f4ab6
.
.
793c329de
100644
-
-
-
a
/
config
/
fuchsia
/
test
/
web_instance
.
shard
.
test
-
cml
+
+
+
b
/
config
/
fuchsia
/
test
/
web_instance
.
shard
.
test
-
cml
-
3
12
+
3
12
/
/
found
in
the
LICENSE
file
.
{
include
:
[
-
"
/
/
build
/
config
/
fuchsia
/
test
/
audio_output
.
shard
.
test
-
cml
"
-
"
/
/
build
/
config
/
fuchsia
/
test
/
fonts
.
shard
.
test
-
cml
"
-
"
/
/
build
/
config
/
fuchsia
/
test
/
mark_vmo_executable
.
shard
.
test
-
cml
"
-
"
/
/
build
/
config
/
fuchsia
/
test
/
network
.
shard
.
test
-
cml
"
-
"
/
/
build
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
"
-
"
/
/
build
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
audio_output
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
fonts
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
mark_vmo_executable
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
network
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
platform_video_codecs
.
shard
.
test
-
cml
"
+
"
/
/
chromium
/
build
/
config
/
fuchsia
/
test
/
test_ui_stack
.
shard
.
test
-
cml
"
"
vulkan
/
client
.
shard
.
cml
"
]
use
:
[
diff
-
-
git
a
/
config
/
gcc
/
BUILD
.
gn
b
/
config
/
gcc
/
BUILD
.
gn
index
a659210b1
.
.
6e291bb3c
100644
-
-
-
a
/
config
/
gcc
/
BUILD
.
gn
+
+
+
b
/
config
/
gcc
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
When
non
empty
overrides
the
target
rpath
value
.
This
allows
a
user
to
-
61
7
+
61
7
config
(
"
symbol_visibility_default
"
)
{
#
this
is
OK
.
For
these
cases
use
something
like
this
:
#
#
if
(
(
is_linux
|
|
is_chromeos
)
&
&
!
is_component_build
)
{
-
#
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
rpath_for_built_shared_libraries
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
rpath_for_built_shared_libraries
"
]
#
}
config
(
"
rpath_for_built_shared_libraries
"
)
{
if
(
!
is_android
&
&
current_os
!
=
"
aix
"
&
&
!
is_castos
)
{
diff
-
-
git
a
/
config
/
host_byteorder
.
gni
b
/
config
/
host_byteorder
.
gni
index
1c3c72dd6
.
.
6156e1496
100644
-
-
-
a
/
config
/
host_byteorder
.
gni
+
+
+
b
/
config
/
host_byteorder
.
gni
-
17
7
+
17
7
if
(
host_cpu
=
=
"
ppc64
"
)
{
}
else
{
#
Only
use
the
script
when
absolutely
necessary
host_byteorder
=
-
exec_script
(
"
/
/
build
/
config
/
get_host_byteorder
.
py
"
[
]
"
trim
string
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
get_host_byteorder
.
py
"
[
]
"
trim
string
"
)
}
}
else
if
(
host_cpu
=
=
"
ppc
"
|
|
host_cpu
=
=
"
s390
"
|
|
host_cpu
=
=
"
s390x
"
|
|
host_cpu
=
=
"
mips
"
|
|
host_cpu
=
=
"
mips64
"
)
{
diff
-
-
git
a
/
config
/
ios
/
BUILD
.
gn
b
/
config
/
ios
/
BUILD
.
gn
index
a4db0c177
.
.
6296924b7
100644
-
-
-
a
/
config
/
ios
/
BUILD
.
gn
+
+
+
b
/
config
/
ios
/
BUILD
.
gn
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
-
276
7
+
276
7
_xctrunner_path
=
if
(
ios_use_xcode_symlinks
)
{
action
(
"
copy_xctrunner_app
"
)
{
testonly
=
true
-
script
=
"
/
/
build
/
noop
.
py
"
+
script
=
"
/
/
chromium
/
build
/
noop
.
py
"
outputs
=
[
"
_xctrunner_path
/
Info
.
plist
"
"
_xctrunner_path
/
PkgInfo
"
-
290
7
+
290
7
if
(
ios_use_xcode_symlinks
)
{
#
yet
supported
by
Apple
)
.
action
(
"
xctest_runner_without_arm64e
"
)
{
testonly
=
true
-
script
=
"
/
/
build
/
config
/
ios
/
strip_arm64e
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
strip_arm64e
.
py
"
sources
=
[
"
_xctrunner_path
/
XCTRunner
"
]
outputs
=
[
"
target_out_dir
/
XCTRunner
"
]
args
=
[
-
304
7
+
304
7
action
(
"
xctest_runner_without_arm64e
"
)
{
#
When
running
under
ASan
the
ASan
runtime
library
must
be
packaged
alongside
#
the
test
runner
binary
.
-
deps
=
[
"
/
/
build
/
config
/
sanitizers
:
deps
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
deps
"
]
if
(
ios_use_xcode_symlinks
)
{
deps
+
=
[
"
:
copy_xctrunner_app
"
]
}
diff
-
-
git
a
/
config
/
ios
/
config
.
gni
b
/
config
/
ios
/
config
.
gni
index
7d0d56369
.
.
4a0ac3555
100644
-
-
-
a
/
config
/
ios
/
config
.
gni
+
+
+
b
/
config
/
ios
/
config
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
declare_args
(
)
{
#
Generate
orderfile
at
application
startup
and
then
exit
.
diff
-
-
git
a
/
config
/
ios
/
ios_sdk
.
gni
b
/
config
/
ios
/
ios_sdk
.
gni
index
9a0ea63dd
.
.
bb870b5b1
100644
-
-
-
a
/
config
/
ios
/
ios_sdk
.
gni
+
+
+
b
/
config
/
ios
/
ios_sdk
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
assert
(
current_os
=
=
"
ios
"
)
-
109
7
+
109
7
if
(
ios_sdk_path
=
=
"
"
)
{
root_build_dir
]
}
-
script_name
=
"
/
/
build
/
config
/
apple
/
sdk_info
.
py
"
+
script_name
=
"
/
/
chromium
/
build
/
config
/
apple
/
sdk_info
.
py
"
_ios_sdk_result
=
exec_script
(
script_name
ios_sdk_info_args
"
scope
"
)
ios_bin_path
=
rebase_path
(
"
{
_ios_sdk_result
.
toolchains_path
}
/
usr
/
bin
/
"
root_build_dir
)
diff
-
-
git
a
/
config
/
ios
/
ios_sdk_overrides
.
gni
b
/
config
/
ios
/
ios_sdk_overrides
.
gni
index
4e5d71039
.
.
2dc3243ad
100644
-
-
-
a
/
config
/
ios
/
ios_sdk_overrides
.
gni
+
+
+
b
/
config
/
ios
/
ios_sdk_overrides
.
gni
-
5
7
+
5
7
#
This
file
contains
arguments
that
subprojects
may
choose
to
override
.
It
#
asserts
that
those
overrides
are
used
to
prevent
unused
args
warnings
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
declare_args
(
)
{
#
Version
of
iOS
that
we
'
re
targeting
.
diff
-
-
git
a
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
b
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
index
6fac03ff4
.
.
ffcd92004
100644
-
-
-
a
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
+
+
+
b
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
#
Invokes
generate_wrapper
to
create
an
executable
script
wrapping
iOS
'
#
run
.
py
with
baked
in
arguments
.
Only
takes
effect
when
test
entry
in
-
149
7
+
149
7
template
(
"
ios_test_runner_wrapper
"
)
{
"
/
/
ios
/
testing
/
plugin
"
#
exception
reporting
protos
-
"
/
/
build
/
util
/
lib
/
proto
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
proto
"
#
Variations
test
utilities
used
by
variations_runner
script
.
"
/
/
testing
/
scripts
/
variations_seed_access_helper
.
py
"
diff
-
-
git
a
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
b
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
index
9da3341f5
.
.
1f5b2f71c
100644
-
-
-
a
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
+
+
+
b
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
rules
.
gni
"
)
#
ios_test_runner_xcuitest
are
just
ios_xcuitest_test
with
an
#
ios_test_runner_wrapper
.
Currently
used
by
Crashpad
tests
which
do
not
depend
diff
-
-
git
a
/
config
/
ios
/
rules
.
gni
b
/
config
/
ios
/
rules
.
gni
index
290c1f326
.
.
e856096bd
100644
-
-
-
a
/
config
/
ios
/
rules
.
gni
+
+
+
b
/
config
/
ios
/
rules
.
gni
-
2
15
+
2
15
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
apple_info_plist
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
create_signed_bundle
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_bundle_data
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
apple_info_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
create_signed_bundle
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_bundle_data
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
iOS
-
specific
wrapper
around
apple_mobile_create_signed_bundle
.
-
95
7
+
95
7
template
(
"
ios_info_plist
"
)
{
extra_substitutions
+
=
invoker
.
extra_substitutions
}
plist_templates
=
[
-
"
/
/
build
/
config
/
ios
/
BuildInfo
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
BuildInfo
.
plist
"
_info_plist
]
if
(
defined
(
invoker
.
info_plist_target
)
)
{
-
359
7
+
359
7
template
(
"
ios_app_bundle
"
)
{
_binary_path
=
"
target_out_dir
/
_output_name
"
visibility
=
[
"
:
_metadata_bundledata
"
]
-
script
=
"
/
/
build
/
config
/
ios
/
extract_metadata
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
extract_metadata
.
py
"
sources
=
[
_binary_path
_module_info_path
-
431
7
+
431
7
template
(
"
ios_app_bundle
"
)
{
}
if
(
!
defined
(
invoker
.
entitlements_target
)
)
{
-
_entitlements_path
=
"
/
/
build
/
config
/
ios
/
entitlements
.
plist
"
+
_entitlements_path
=
"
/
/
chromium
/
build
/
config
/
ios
/
entitlements
.
plist
"
if
(
defined
(
invoker
.
entitlements_path
)
)
{
_entitlements_path
=
invoker
.
entitlements_path
}
-
449
7
+
449
7
template
(
"
ios_app_bundle
"
)
{
_gen_info_plist_outputs
=
get_target_outputs
(
"
:
_generate_info_plist
"
)
_info_plist_path
=
_gen_info_plist_outputs
[
0
]
-
script
=
"
/
/
build
/
config
/
apple
/
codesign
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
apple
/
codesign
.
py
"
deps
=
[
"
:
_generate_info_plist
"
]
if
(
defined
(
invoker
.
entitlements_target
)
)
{
deps
+
=
[
invoker
.
entitlements_target
]
-
478
8
+
478
8
template
(
"
ios_app_bundle
"
)
{
_create_pkg_info
=
target_name
+
"
_pkg_info
"
action
(
_create_pkg_info
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
write_pkg_info
.
py
"
-
inputs
=
[
"
/
/
build
/
apple
/
plist_util
.
py
"
]
+
script
=
"
/
/
chromium
/
build
/
apple
/
write_pkg_info
.
py
"
+
inputs
=
[
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
]
sources
=
get_target_outputs
(
"
:
_generate_info_plist
"
)
outputs
=
[
#
Cannot
name
the
output
PkgInfo
as
the
name
will
not
be
unique
if
-
568
7
+
568
7
template
(
"
ios_app_bundle
"
)
{
action
(
_target_name
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
ios
/
hardlink
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
hardlink
.
py
"
public_deps
=
[
]
foreach
(
_variant
_variants
)
{
public_deps
+
=
[
"
:
{
_variant
.
target_name
}
"
]
-
634
7
+
634
7
template
(
"
ios_appex_bundle
"
)
{
}
set_defaults
(
"
ios_appex_bundle
"
)
{
-
configs
=
[
"
/
/
build
/
config
/
ios
:
ios_extension_executable_flags
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
ios_extension_executable_flags
"
]
}
#
Template
to
package
a
shared
library
into
an
iOS
framework
bundle
.
-
839
7
+
839
7
template
(
"
ios_framework_bundle
"
)
{
"
public_deps
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
apple
/
write_framework_hmap
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
apple
/
write_framework_hmap
.
py
"
outputs
=
[
_header_map_filename
]
#
The
header
map
generation
only
wants
the
list
of
headers
not
all
of
-
864
7
+
864
7
template
(
"
ios_framework_bundle
"
)
{
_create_module_map_target
=
_target_name
+
"
_module_map
"
action
(
_create_module_map_target
)
{
visibility
=
[
"
:
_framework_headers_target
"
]
-
script
=
"
/
/
build
/
config
/
apple
/
write_framework_modulemap
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
apple
/
write_framework_modulemap
.
py
"
outputs
=
[
"
_framework_contents_dir
/
Modules
/
module
.
modulemap
"
]
args
=
[
_output_name
-
1101
7
+
1101
7
template
(
"
ios_xctest_bundle
"
)
{
testonly
=
true
visibility
=
[
"
:
_target_name
"
]
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
output_dir
=
target_out_dir
output_name
=
_output_name
-
1120
7
+
1120
7
template
(
"
ios_xctest_bundle
"
)
{
testonly
=
true
visibility
=
[
"
:
_info_plist_bundle
"
]
-
info_plist
=
"
/
/
build
/
config
/
ios
/
Module
-
Info
.
plist
"
+
info_plist
=
"
/
/
chromium
/
build
/
config
/
ios
/
Module
-
Info
.
plist
"
executable_name
=
_output_name
if
(
defined
(
invoker
.
xctest_bundle_principal_class
)
)
{
-
1240
9
+
1240
9
template
(
"
ios_xctest_test
"
)
{
_xctest_module_target_name
=
_xctest_target
+
"
shell_source
"
_xctest_module_target
=
"
:
_xctest_module_target_name
"
source_set
(
_xctest_module_target_name
)
{
-
sources
=
[
"
/
/
build
/
config
/
ios
/
xctest_shell
.
mm
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
config
/
ios
/
xctest_shell
.
mm
"
]
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
}
}
-
1267
10
+
1267
10
template
(
"
ios_xctest_test
"
)
{
testonly
=
true
output_name
=
_host_output
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
if
(
!
defined
(
invoker
.
info_plist
)
&
&
!
defined
(
invoker
.
info_plist_target
)
)
{
-
info_plist
=
"
/
/
build
/
config
/
ios
/
Host
-
Info
.
plist
"
+
info_plist
=
"
/
/
chromium
/
build
/
config
/
ios
/
Host
-
Info
.
plist
"
}
#
Xcode
needs
the
following
frameworks
installed
in
the
application
(
and
-
1356
7
+
1356
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
action
(
_info_plist_merge_plist
)
{
testonly
=
true
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
"
_xctrunner_path
/
Info
.
plist
"
-
1364
7
+
1364
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
#
NOTE
:
The
XCTRunnerAddition
+
Info
.
plist
must
come
after
the
Info
.
plist
#
because
it
overrides
the
values
under
"
CFBundleIdentifier
"
and
#
"
CFBundleName
"
.
-
"
/
/
build
/
config
/
ios
/
resources
/
XCTRunnerAddition
+
Info
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
resources
/
XCTRunnerAddition
+
Info
.
plist
"
]
_output_name
=
"
target_gen_dir
/
{
_target_name
}
_merged
.
plist
"
-
1377
7
+
1377
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
]
+
rebase_path
(
sources
root_build_dir
)
if
(
ios_use_xcode_symlinks
)
{
-
deps
=
[
"
/
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
}
}
-
1410
7
+
1410
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
outputs
=
[
"
{
{
bundle_contents_dir
}
}
/
PkgInfo
"
]
if
(
ios_use_xcode_symlinks
)
{
-
public_deps
=
[
"
/
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
+
public_deps
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
}
}
-
1418
7
+
1418
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
ios_create_signed_bundle
(
_target_name
)
{
testonly
=
true
-
bundle_binary_target
=
"
/
/
build
/
config
/
ios
:
xctest_runner_without_arm64e
"
+
bundle_binary_target
=
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_runner_without_arm64e
"
bundle_binary_output
=
"
XCTRunner
"
bundle_extension
=
"
.
app
"
product_type
=
apple_mobile_xcode_app_bundle_id
diff
-
-
git
a
/
config
/
linux
/
BUILD
.
gn
b
/
config
/
linux
/
BUILD
.
gn
index
b96e8cbe3
.
.
6ba0fde13
100644
-
-
-
a
/
config
/
linux
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
group
(
"
linux
"
)
{
visibility
=
[
"
/
/
:
optimize_gn_gen
"
]
-
16
7
+
16
7
group
(
"
linux
"
)
{
#
Linux
-
only
.
This
is
not
applied
to
Android
but
is
applied
to
ChromeOS
.
config
(
"
compiler
"
)
{
if
(
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
cflags
=
[
]
asmflags
=
[
]
if
(
arm_control_flow_integrity
=
=
"
standard
"
)
{
-
42
7
+
42
7
config
(
"
runtime_library
"
)
{
#
Mozilla
disable
libatomic
on
linux
builds
if
(
false
)
{
-
if
(
(
!
is_chromeos
|
|
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
&
&
+
if
(
(
!
is_chromeos
|
|
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
&
&
(
!
use_custom_libcxx
|
|
current_cpu
=
=
"
mipsel
"
)
)
{
libs
=
[
"
atomic
"
]
}
diff
-
-
git
a
/
config
/
linux
/
atk
/
BUILD
.
gn
b
/
config
/
linux
/
atk
/
BUILD
.
gn
index
239c3870a
.
.
e771711f1
100644
-
-
-
a
/
config
/
linux
/
atk
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
atk
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
#
CrOS
doesn
'
t
install
GTK
or
any
gnome
packages
.
assert
(
!
is_chromeos
)
diff
-
-
git
a
/
config
/
linux
/
atspi2
/
BUILD
.
gn
b
/
config
/
linux
/
atspi2
/
BUILD
.
gn
index
30bc77f9c
.
.
5df799747
100644
-
-
-
a
/
config
/
linux
/
atspi2
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
atspi2
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
#
These
packages
should
_only_
be
expected
when
building
for
a
target
.
assert
(
current_toolchain
=
=
default_toolchain
)
diff
-
-
git
a
/
config
/
linux
/
dbus
/
BUILD
.
gn
b
/
config
/
linux
/
dbus
/
BUILD
.
gn
index
7dcc68bbd
.
.
36e4f3709
100644
-
-
-
a
/
config
/
linux
/
dbus
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
dbus
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
buildflag_header
(
"
buildflags
"
)
{
header
=
"
buildflags
.
h
"
diff
-
-
git
a
/
config
/
linux
/
dri
/
BUILD
.
gn
b
/
config
/
linux
/
dri
/
BUILD
.
gn
index
e3a0a83a9
.
.
bdafaac36
100644
-
-
-
a
/
config
/
linux
/
dri
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
dri
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
gtk
/
BUILD
.
gn
b
/
config
/
linux
/
gtk
/
BUILD
.
gn
index
449848757
.
.
f4583b901
100644
-
-
-
a
/
config
/
linux
/
gtk
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
gtk
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
gtk
/
gtk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
gtk
/
gtk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
gtk
/
gtk
.
gni
b
/
config
/
linux
/
gtk
/
gtk
.
gni
index
4f560b290
.
.
927e11688
100644
-
-
-
a
/
config
/
linux
/
gtk
/
gtk
.
gni
+
+
+
b
/
config
/
linux
/
gtk
/
gtk
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
declare_args
(
)
{
#
Whether
or
not
we
should
use
libgtk
.
diff
-
-
git
a
/
config
/
linux
/
libdrm
/
BUILD
.
gn
b
/
config
/
linux
/
libdrm
/
BUILD
.
gn
index
7fd20c24e
.
.
bc7208540
100644
-
-
-
a
/
config
/
linux
/
libdrm
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libdrm
/
BUILD
.
gn
-
1
9
+
1
9
#
Copyright
2018
The
Chromium
Authors
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
|
|
is_chromeos
)
diff
-
-
git
a
/
config
/
linux
/
libffi
/
BUILD
.
gn
b
/
config
/
linux
/
libffi
/
BUILD
.
gn
index
6e45f4c22
.
.
5c18bf6f5
100644
-
-
-
a
/
config
/
linux
/
libffi
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libffi
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
declare_args
(
)
{
#
Controls
whether
the
build
should
use
the
version
of
libffi
library
shipped
-
10
7
+
10
7
declare_args
(
)
{
#
on
Linux
libffi
must
be
statically
linked
to
prevent
a
situation
where
the
#
runtime
version
of
libffi
is
different
from
the
build
-
time
version
from
the
#
sysroot
.
-
use_system_libffi
=
default_toolchain
=
=
"
/
/
build
/
toolchain
/
cros
:
target
"
+
use_system_libffi
=
default_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
}
if
(
use_system_libffi
)
{
diff
-
-
git
a
/
config
/
linux
/
libva
/
BUILD
.
gn
b
/
config
/
linux
/
libva
/
BUILD
.
gn
index
380da0435
.
.
0053888dd
100644
-
-
-
a
/
config
/
linux
/
libva
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libva
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
|
|
is_chromeos
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
nss
/
BUILD
.
gn
b
/
config
/
linux
/
nss
/
BUILD
.
gn
index
c67cefc14
.
.
2b8f4b5cf
100644
-
-
-
a
/
config
/
linux
/
nss
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
nss
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
is_linux
|
|
is_chromeos
)
{
#
This
is
a
dependency
on
NSS
with
no
libssl3
.
On
Linux
and
Chrome
OS
we
use
diff
-
-
git
a
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
b
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
index
e2030b817
.
.
4286dd90c
100644
-
-
-
a
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
use_pangocairo
)
{
pkg_config
(
"
pangocairo
"
)
{
diff
-
-
git
a
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
b
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
index
c7662ac33
.
.
b41da9fa6
100644
-
-
-
a
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
+
+
+
b
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
declare_args
(
)
{
use_pangocairo
=
is_linux
&
&
!
is_castos
diff
-
-
git
a
/
config
/
linux
/
pkg_config
.
gni
b
/
config
/
linux
/
pkg_config
.
gni
index
47fccd12b
.
.
c84606ae2
100644
-
-
-
a
/
config
/
linux
/
pkg_config
.
gni
+
+
+
b
/
config
/
linux
/
pkg_config
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
#
Defines
a
config
specifying
the
result
of
running
pkg
-
config
for
the
given
#
packages
.
Put
the
package
names
you
want
to
query
in
the
"
packages
"
variable
-
48
7
+
48
7
declare_args
(
)
{
system_libdir
=
"
lib
"
}
-
pkg_config_script
=
"
/
/
build
/
config
/
linux
/
pkg
-
config
.
py
"
+
pkg_config_script
=
"
/
/
chromium
/
build
/
config
/
linux
/
pkg
-
config
.
py
"
#
Define
the
args
we
pass
to
the
pkg
-
config
script
for
other
build
files
that
#
need
to
invoke
it
manually
.
diff
-
-
git
a
/
config
/
locales
.
gni
b
/
config
/
locales
.
gni
index
ed26f3de9
.
.
b23b608c7
100644
-
-
-
a
/
config
/
locales
.
gni
+
+
+
b
/
config
/
locales
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
#
This
file
creates
|
platform_pak_locales
|
which
is
the
set
of
packed
locales
#
based
on
the
current
platform
.
Locales
in
this
list
are
formatted
based
on
diff
-
-
git
a
/
config
/
logging
.
gni
b
/
config
/
logging
.
gni
index
73915fef4
.
.
add300d00
100644
-
-
-
a
/
config
/
logging
.
gni
+
+
+
b
/
config
/
logging
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
declare_args
(
)
{
#
Stack
traces
will
not
include
function
names
.
Instead
they
will
contain
diff
-
-
git
a
/
config
/
loongarch64
.
gni
b
/
config
/
loongarch64
.
gni
index
9a95ec915
.
.
76e4c9378
100644
-
-
-
a
/
config
/
loongarch64
.
gni
+
+
+
b
/
config
/
loongarch64
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
if
(
current_cpu
=
=
"
loong64
"
)
{
declare_args
(
)
{
diff
-
-
git
a
/
config
/
mac
/
BUILD
.
gn
b
/
config
/
mac
/
BUILD
.
gn
index
66ca06b7e
.
.
4d70334d3
100644
-
-
-
a
/
config
/
mac
/
BUILD
.
gn
+
+
+
b
/
config
/
mac
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
.
-
101
7
+
101
7
config
(
"
mac_dynamic_flags
"
)
{
#
/
/
build
/
config
/
apple
/
sdk_info
.
py
in
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
.
if
(
mac_use_xcode_symlinks
&
&
current_toolchain
=
=
default_toolchain
)
{
action
(
"
sdk_inputs
"
)
{
-
script
=
"
/
/
build
/
noop
.
py
"
+
script
=
"
/
/
chromium
/
build
/
noop
.
py
"
outputs
=
[
"
mac_sdk_path
/
usr
/
include
/
mach
/
exc
.
defs
"
"
mac_sdk_path
/
usr
/
include
/
mach
/
mach_exc
.
defs
"
diff
-
-
git
a
/
config
/
mac
/
mac_sdk
.
gni
b
/
config
/
mac
/
mac_sdk
.
gni
index
1b8a4c8c0
.
.
85ac2ae8a
100644
-
-
-
a
/
config
/
mac
/
mac_sdk
.
gni
+
+
+
b
/
config
/
mac
/
mac_sdk
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Allow
Android
builds
on
macOS
assert
(
current_os
=
=
"
mac
"
|
|
current_toolchain
=
=
default_toolchain
|
|
-
79
10
+
79
10
if
(
is_chrome_branded
&
&
is_official_build
&
&
target_os
!
=
"
ios
"
)
{
#
The
path
to
the
hermetic
install
of
Xcode
.
Only
relevant
when
#
use_system_xcode
=
false
.
if
(
!
use_system_xcode
)
{
-
_hermetic_xcode_path
=
"
/
/
build
/
mac_files
/
xcode_binaries
"
+
_hermetic_xcode_path
=
"
/
/
chromium
/
build
/
mac_files
/
xcode_binaries
"
}
-
script_name
=
"
/
/
build
/
config
/
apple
/
sdk_info
.
py
"
+
script_name
=
"
/
/
chromium
/
build
/
config
/
apple
/
sdk_info
.
py
"
sdk_info_args
=
[
]
if
(
!
use_system_xcode
)
{
sdk_info_args
+
=
[
-
147
7
+
147
7
if
(
use_system_xcode
)
{
mac_sdk_min
]
find_sdk_lines
=
-
exec_script
(
"
/
/
build
/
mac
/
find_sdk
.
py
"
find_sdk_args
"
list
lines
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
mac
/
find_sdk
.
py
"
find_sdk_args
"
list
lines
"
)
mac_sdk_version
=
find_sdk_lines
[
3
]
mac_sdk_build_version
=
find_sdk_lines
[
2
]
if
(
mac_sdk_path
=
=
"
"
)
{
diff
-
-
git
a
/
config
/
mac
/
rules
.
gni
b
/
config
/
mac
/
rules
.
gni
index
b4ee8b890
.
.
e66e94294
100644
-
-
-
a
/
config
/
mac
/
rules
.
gni
+
+
+
b
/
config
/
mac
/
rules
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
apple_info_plist
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
apple_info_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
_sanitizer_runtime_names
=
[
]
if
(
is_asan
)
{
-
60
7
+
60
7
template
(
"
mac_info_plist
"
)
{
extra_substitutions
+
=
invoker
.
extra_substitutions
}
plist_templates
=
[
-
"
/
/
build
/
config
/
mac
/
BuildInfo
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
BuildInfo
.
plist
"
_info_plist
]
if
(
defined
(
invoker
.
info_plist_target
)
)
{
-
238
7
+
238
7
template
(
"
mac_framework_bundle
"
)
{
#
Clean
the
entire
framework
if
the
framework_version
changes
.
_version_file
=
"
target_out_dir
/
{
target_name
}
_version
"
-
exec_script
(
"
/
/
build
/
config
/
mac
/
prepare_framework_version
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
mac
/
prepare_framework_version
.
py
"
[
rebase_path
(
_version_file
)
rebase_path
(
_framework_base_dir
)
-
248
7
+
248
7
template
(
"
mac_framework_bundle
"
)
{
#
Create
the
symlinks
.
_framework_package_target
=
target_name
+
"
_package
"
action
(
_framework_package_target
)
{
-
script
=
"
/
/
build
/
config
/
mac
/
package_framework
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
mac
/
package_framework
.
py
"
#
The
TOC
file
never
needs
to
be
read
since
its
contents
are
the
values
#
of
GN
variables
.
It
is
only
used
to
trigger
this
rule
when
the
values
-
469
8
+
469
8
template
(
"
mac_app_bundle
"
)
{
action
(
_pkg_info_target
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
write_pkg_info
.
py
"
-
inputs
=
[
"
/
/
build
/
apple
/
plist_util
.
py
"
]
+
script
=
"
/
/
chromium
/
build
/
apple
/
write_pkg_info
.
py
"
+
inputs
=
[
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
]
sources
=
get_target_outputs
(
"
:
_info_plist_target
"
)
outputs
=
[
"
target_gen_dir
/
_pkg_info_target
"
]
args
=
[
"
-
-
plist
"
]
+
rebase_path
(
sources
root_build_dir
)
+
diff
-
-
git
a
/
config
/
mips
.
gni
b
/
config
/
mips
.
gni
index
986ffcb45
.
.
2df1646a8
100644
-
-
-
a
/
config
/
mips
.
gni
+
+
+
b
/
config
/
mips
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
#
These
are
primarily
relevant
in
current_cpu
=
=
"
mips
*
"
contexts
where
#
MIPS
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
diff
-
-
git
a
/
config
/
nacl
/
BUILD
.
gn
b
/
config
/
nacl
/
BUILD
.
gn
index
77b04d71b
.
.
13489657f
100644
-
-
-
a
/
config
/
nacl
/
BUILD
.
gn
+
+
+
b
/
config
/
nacl
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
#
Native
Client
Definitions
config
(
"
nacl_defines
"
)
{
diff
-
-
git
a
/
config
/
nacl
/
config
.
gni
b
/
config
/
nacl
/
config
.
gni
index
c8062b41a
.
.
dd774495e
100644
-
-
-
a
/
config
/
nacl
/
config
.
gni
+
+
+
b
/
config
/
nacl
/
config
.
gni
-
49
5
+
49
5
nacl_toolchain_tooldir
=
"
{
nacl_toolchain_dir
}
/
{
nacl_toolchain_package
}
/
{
_nacl_tuple
}
"
nacl_toolprefix
=
"
{
nacl_toolchain_bindir
}
/
{
_nacl_tuple
}
-
"
-
nacl_irt_toolchain
=
"
/
/
build
/
toolchain
/
nacl
:
irt_
"
+
current_cpu
+
nacl_irt_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
irt_
"
+
current_cpu
is_nacl_irt
=
current_toolchain
=
=
nacl_irt_toolchain
diff
-
-
git
a
/
config
/
nacl
/
host_toolchain
.
gni
b
/
config
/
nacl
/
host_toolchain
.
gni
index
6bb2221ae
.
.
f877fe47b
100644
-
-
-
a
/
config
/
nacl
/
host_toolchain
.
gni
+
+
+
b
/
config
/
nacl
/
host_toolchain
.
gni
-
3
8
+
3
8
#
found
in
the
LICENSE
file
.
default_nacl_bootstrap_compiler
=
"
g
+
+
"
-
if
(
default_toolchain
=
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
{
-
import
(
"
/
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
+
if
(
default_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
{
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
if
(
target_cpu
=
=
"
arm64
"
&
&
current_cpu
=
=
"
arm
"
)
{
default_nacl_bootstrap_compiler
=
cros_nacl_helper_arm32_cxx
}
else
{
diff
-
-
git
a
/
config
/
nacl
/
rules
.
gni
b
/
config
/
nacl
/
rules
.
gni
index
a15d32622
.
.
7d916e8f5
100644
-
-
-
a
/
config
/
nacl
/
rules
.
gni
+
+
+
b
/
config
/
nacl
/
rules
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
#
Generate
a
nmf
file
#
-
101
7
+
101
7
template
(
"
generate_nmf
"
)
{
if
(
current_cpu
=
=
"
x64
"
|
|
target_os
=
=
"
win
"
)
{
#
For
x86
-
64
the
lib
/
directory
is
called
lib64
/
instead
#
when
copied
by
create_nmf
.
py
.
-
glibc_tc
=
"
/
/
build
/
toolchain
/
nacl
:
glibc
"
+
glibc_tc
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
glibc
"
assert
(
current_toolchain
=
=
"
{
glibc_tc
}
_
{
current_cpu
}
"
)
if
(
current_cpu
=
=
"
x64
"
)
{
x64_out_dir
=
root_out_dir
diff
-
-
git
a
/
config
/
ozone
.
gni
b
/
config
/
ozone
.
gni
index
a74459ca9
.
.
9d98d891f
100644
-
-
-
a
/
config
/
ozone
.
gni
+
+
+
b
/
config
/
ozone
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Indicates
if
Ozone
is
enabled
.
Ozone
is
a
low
-
level
library
layer
for
Linux
-
14
7
+
14
7
declare_args
(
)
{
declare_args
(
)
{
#
Ozone
extra
platforms
file
path
.
Can
be
overridden
to
build
out
of
#
tree
ozone
platforms
.
-
ozone_extra_path
=
"
/
/
build
/
config
/
ozone_extra
.
gni
"
+
ozone_extra_path
=
"
/
/
chromium
/
build
/
config
/
ozone_extra
.
gni
"
#
Select
platforms
automatically
.
Turn
this
off
for
manual
control
.
ozone_auto_platforms
=
use_ozone
diff
-
-
git
a
/
config
/
pch
.
gni
b
/
config
/
pch
.
gni
index
6f8504ae4
.
.
34d573193
100644
-
-
-
a
/
config
/
pch
.
gni
+
+
+
b
/
config
/
pch
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
declare_args
(
)
{
#
Precompiled
header
file
support
is
by
default
available
except
on
the
diff
-
-
git
a
/
config
/
posix
/
BUILD
.
gn
b
/
config
/
posix
/
BUILD
.
gn
index
9638527df
.
.
ec40cbe68
100644
-
-
-
a
/
config
/
posix
/
BUILD
.
gn
+
+
+
b
/
config
/
posix
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
#
This
build
configuration
is
used
by
both
Fuchsia
and
POSIX
systems
.
assert
(
is_posix
|
|
is_fuchsia
)
-
33
7
+
33
7
config
(
"
runtime_library
"
)
{
#
when
turning
the
sysroot
on
or
off
.
(
defines
are
passed
via
the
command
#
line
and
build
system
rebuilds
things
when
their
commandline
#
changes
)
.
Nothing
should
ever
read
this
define
.
-
import
(
"
/
/
build
/
linux
/
sysroot_scripts
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
linux
/
sysroot_scripts
/
sysroot
.
gni
"
)
defines
+
=
[
"
CR_SYSROOT_KEY
=
cr_sysroot_key
"
]
}
asmflags
+
=
sysroot_flags
diff
-
-
git
a
/
config
/
profiling
/
profiling
.
gni
b
/
config
/
profiling
/
profiling
.
gni
index
d30ef7456
.
.
f45647613
100644
-
-
-
a
/
config
/
profiling
/
profiling
.
gni
+
+
+
b
/
config
/
profiling
/
profiling
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
declare_args
(
)
{
use_clang_profiling
=
diff
-
-
git
a
/
config
/
python
.
gni
b
/
config
/
python
.
gni
index
f3431fcc0
.
.
36c46e008
100644
-
-
-
a
/
config
/
python
.
gni
+
+
+
b
/
config
/
python
.
gni
-
67
8
+
67
8
template
(
"
python_library
"
)
{
#
associated
.
pydeps
file
.
In
other
words
:
#
#
-
This
is
very
similar
to
just
an
action
(
)
except
that
|
script
|
must
point
-
#
to
a
Python
script
(
e
.
g
.
"
/
/
build
/
.
.
.
/
foo
.
py
"
)
that
has
a
corresponding
-
#
.
pydeps
file
in
the
source
tree
(
e
.
g
.
"
/
/
build
/
.
.
.
/
foo
.
pydeps
"
)
.
+
#
to
a
Python
script
(
e
.
g
.
"
/
/
chromium
/
build
/
.
.
.
/
foo
.
py
"
)
that
has
a
corresponding
+
#
.
pydeps
file
in
the
source
tree
(
e
.
g
.
"
/
/
chromium
/
build
/
.
.
.
/
foo
.
pydeps
"
)
.
#
#
-
The
.
pydeps
file
contains
a
list
of
python
dependencies
(
imports
really
)
#
and
is
generated
_manually_
by
using
a
command
like
:
diff
-
-
git
a
/
config
/
riscv
.
gni
b
/
config
/
riscv
.
gni
index
3e8e42533
.
.
afe2c7aee
100644
-
-
-
a
/
config
/
riscv
.
gni
+
+
+
b
/
config
/
riscv
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
if
(
current_cpu
=
=
"
riscv64
"
|
|
v8_current_cpu
=
=
"
riscv64
"
|
|
current_cpu
=
=
"
riscv32
"
|
|
v8_current_cpu
=
=
"
riscv32
"
)
{
diff
-
-
git
a
/
config
/
rust
.
gni
b
/
config
/
rust
.
gni
index
74b3b9ced
.
.
0b032436a
100644
-
-
-
a
/
config
/
rust
.
gni
+
+
+
b
/
config
/
rust
.
gni
-
2
18
+
2
18
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
}
if
(
is_ios
)
{
#
For
target_environment
and
target_platform
.
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
}
declare_args
(
)
{
-
219
7
+
219
7
if
(
is_linux
|
|
is_chromeos
)
{
cargo_target_abi
=
"
"
}
}
else
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
if
(
android_abi_target
=
=
"
i686
-
linux
-
android
"
)
{
rust_abi_target
=
android_abi_target
cargo_target_abi
=
"
"
diff
-
-
git
a
/
config
/
sanitizers
/
BUILD
.
gn
b
/
config
/
sanitizers
/
BUILD
.
gn
index
b854fda66
.
.
3f1e1f285
100644
-
-
-
a
/
config
/
sanitizers
/
BUILD
.
gn
+
+
+
b
/
config
/
sanitizers
/
BUILD
.
gn
-
2
16
+
2
16
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
}
declare_args
(
)
{
-
125
7
+
125
7
if
(
(
is_apple
|
|
is_win
)
&
&
(
is_asan
|
|
is_ubsan_any
)
)
{
#
On
iOS
the
runtime
library
need
to
be
code
signed
(
adhoc
signature
)
#
starting
with
Xcode
8
so
use
an
action
instead
of
a
copy
on
iOS
.
action
(
"
copy_sanitizer_runtime
"
)
{
-
script
=
"
/
/
build
/
config
/
apple
/
codesign
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
apple
/
codesign
.
py
"
sources
=
[
_clang_rt_dso_full_path
]
outputs
=
[
"
root_out_dir
/
"
+
get_path_info
(
sources
[
0
]
"
file
"
)
]
args
=
[
-
161
30
+
161
30
static_library
(
"
options_sources
"
)
{
"
:
deps
"
"
/
/
:
gn_all
"
]
-
sources
=
[
"
/
/
build
/
sanitizers
/
sanitizer_options
.
cc
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
sanitizers
/
sanitizer_options
.
cc
"
]
#
Don
'
t
compile
this
target
with
any
sanitizer
code
.
It
can
be
called
from
#
the
sanitizer
runtimes
so
instrumenting
these
functions
could
cause
#
recursive
calls
into
the
runtime
if
there
is
an
error
.
-
configs
-
=
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
if
(
is_asan
)
{
if
(
!
defined
(
asan_suppressions_file
)
)
{
-
asan_suppressions_file
=
"
/
/
build
/
sanitizers
/
asan_suppressions
.
cc
"
+
asan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
asan_suppressions
.
cc
"
}
sources
+
=
[
asan_suppressions_file
]
}
if
(
is_lsan
)
{
if
(
!
defined
(
lsan_suppressions_file
)
)
{
-
lsan_suppressions_file
=
"
/
/
build
/
sanitizers
/
lsan_suppressions
.
cc
"
+
lsan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
lsan_suppressions
.
cc
"
}
sources
+
=
[
lsan_suppressions_file
]
}
if
(
is_tsan
)
{
if
(
!
defined
(
tsan_suppressions_file
)
)
{
-
tsan_suppressions_file
=
"
/
/
build
/
sanitizers
/
tsan_suppressions
.
cc
"
+
tsan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
tsan_suppressions
.
cc
"
}
sources
+
=
[
tsan_suppressions_file
]
}
-
192
7
+
192
7
static_library
(
"
options_sources
"
)
{
if
(
use_dlcloseshim
)
{
source_set
(
"
dlclose_shim
"
)
{
-
sources
=
[
"
/
/
build
/
sanitizers
/
dlcloseshim
.
c
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
sanitizers
/
dlcloseshim
.
c
"
]
}
}
else
{
group
(
"
dlclose_shim
"
)
{
-
679
7
+
679
7
config
(
"
not_fuzzed
"
)
{
#
optimize_for_fuzzing
(
-
O1
)
.
When
given
multiple
optimization
flags
clang
#
obeys
the
last
one
so
as
long
as
this
flag
comes
after
-
O1
it
should
work
.
#
Since
this
config
will
always
be
depended
on
after
-
#
"
/
/
build
/
config
/
compiler
:
default_optimization
"
(
which
adds
-
O1
when
+
#
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
(
which
adds
-
O1
when
#
optimize_for_fuzzing
is
true
)
-
O2
should
always
be
the
second
flag
.
Even
#
though
this
sounds
fragile
it
isn
'
t
a
big
deal
if
it
breaks
since
proto
#
fuzzers
will
still
work
they
will
just
be
slightly
slower
.
diff
-
-
git
a
/
config
/
sanitizers
/
sanitizers
.
gni
b
/
config
/
sanitizers
/
sanitizers
.
gni
index
3acf256e7
.
.
105b28470
100644
-
-
-
a
/
config
/
sanitizers
/
sanitizers
.
gni
+
+
+
b
/
config
/
sanitizers
/
sanitizers
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Compile
for
Address
Sanitizer
to
find
memory
bugs
.
-
376
21
+
376
21
not_fuzzed_remove_nonasan_configs
=
[
]
if
(
use_fuzzing_engine
)
{
#
Removing
coverage
should
always
just
work
.
-
not_fuzzed_remove_configs
+
=
[
"
/
/
build
/
config
/
coverage
:
default_coverage
"
]
+
not_fuzzed_remove_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
not_fuzzed_remove_nonasan_configs
+
=
-
[
"
/
/
build
/
config
/
coverage
:
default_coverage
"
]
+
[
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
if
(
!
is_msan
)
{
#
Allow
sanitizer
instrumentation
to
be
removed
if
we
are
not
using
MSan
#
since
binaries
cannot
be
partially
instrumented
with
MSan
.
not_fuzzed_remove_configs
+
=
-
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
#
Certain
parts
of
binaries
must
be
instrumented
with
ASan
if
the
rest
of
#
the
binary
is
.
For
these
only
remove
non
-
ASan
sanitizer
instrumentation
.
if
(
!
is_asan
)
{
not_fuzzed_remove_nonasan_configs
+
=
-
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
assert
(
not_fuzzed_remove_nonasan_configs
=
=
not_fuzzed_remove_configs
)
}
-
400
8
+
400
8
if
(
use_fuzzing_engine
)
{
#
Options
common
to
different
fuzzer
engines
.
#
Engine
should
be
compiled
without
coverage
(
infinite
loop
in
trace_cmp
)
.
fuzzing_engine_remove_configs
=
[
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
-
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
#
Add
any
sanitizer
flags
back
.
In
MSAN
builds
instrumenting
libfuzzer
with
-
414
4
+
414
4
fuzzing_engine_remove_configs
=
[
#
expecting
one
particular
ABI
(
https
:
/
/
crbug
.
com
/
915422
)
.
The
other
sanitizers
#
are
added
back
for
the
same
reason
.
fuzzing_engine_add_configs
=
-
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags_but_coverage
"
]
+
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags_but_coverage
"
]
diff
-
-
git
a
/
config
/
sysroot
.
gni
b
/
config
/
sysroot
.
gni
index
71eedaaaf
.
.
6d96c685d
100644
-
-
-
a
/
config
/
sysroot
.
gni
+
+
+
b
/
config
/
sysroot
.
gni
-
11
7
+
11
7
declare_args
(
)
{
target_sysroot
=
"
"
#
The
path
to
directory
containing
linux
sysroot
images
.
-
target_sysroot_dir
=
"
/
/
build
/
linux
"
+
target_sysroot_dir
=
"
/
/
chromium
/
build
/
linux
"
#
The
path
of
the
sysroot
for
the
current
toolchain
.
If
empty
default
#
sysroot
is
used
.
-
30
7
+
30
7
if
(
sysroot
=
=
"
"
)
{
target_sysroot
!
=
"
"
)
{
sysroot
=
target_sysroot
}
else
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
#
Android
uses
unified
headers
and
thus
a
single
compile
time
sysroot
sysroot
=
"
android_toolchain_root
/
sysroot
"
-
65
13
+
65
13
if
(
sysroot
=
=
"
"
)
{
#
"
Missing
sysroot
(
sysroot
)
.
To
fix
run
:
build
/
linux
/
sysroot_scripts
/
install
-
sysroot
.
py
-
-
arch
=
_script_arch
"
)
}
}
else
if
(
is_mac
)
{
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
sysroot
=
mac_sdk_path
}
else
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
sysroot
=
ios_sdk_path
}
else
if
(
is_fuchsia
)
{
-
import
(
"
/
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
sysroot
=
"
{
fuchsia_arch_root
}
/
sysroot
"
}
}
diff
-
-
git
a
/
config
/
ui
.
gni
b
/
config
/
ui
.
gni
index
20e446e34
.
.
af652c777
100644
-
-
-
a
/
config
/
ui
.
gni
+
+
+
b
/
config
/
ui
.
gni
-
17
10
+
17
10
#
There
is
more
advice
on
where
to
put
build
flags
in
the
"
Build
flag
"
section
#
of
/
/
build
/
config
/
BUILDCONFIG
.
gn
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
declare_args
(
)
{
#
Indicates
if
Aura
is
enabled
.
Aura
is
a
low
-
level
windowing
library
sort
diff
-
-
git
a
/
config
/
v8_target_cpu
.
gni
b
/
config
/
v8_target_cpu
.
gni
index
6c41226a6
.
.
cc165effb
100644
-
-
-
a
/
config
/
v8_target_cpu
.
gni
+
+
+
b
/
config
/
v8_target_cpu
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
This
arg
is
used
when
we
want
to
tell
the
JIT
-
generating
v8
code
-
34
18
+
34
18
declare_args
(
)
{
}
if
(
v8_target_cpu
=
=
"
"
)
{
-
if
(
current_toolchain
=
=
"
/
/
build
/
toolchain
/
linux
:
clang_x64_v8_arm64
"
)
{
+
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x64_v8_arm64
"
)
{
v8_target_cpu
=
"
arm64
"
-
}
else
if
(
current_toolchain
=
=
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_arm
"
)
{
+
}
else
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_arm
"
)
{
v8_target_cpu
=
"
arm
"
}
else
if
(
current_toolchain
=
=
-
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_mips64el
"
)
{
+
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_mips64el
"
)
{
v8_target_cpu
=
"
mips64el
"
}
else
if
(
current_toolchain
=
=
-
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_mipsel
"
)
{
+
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_mipsel
"
)
{
v8_target_cpu
=
"
mipsel
"
}
else
if
(
current_toolchain
=
=
-
"
/
/
build
/
toolchain
/
linux
:
clang_x64_v8_riscv64
"
)
{
+
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x64_v8_riscv64
"
)
{
v8_target_cpu
=
"
riscv64
"
}
else
if
(
is_msan
)
{
#
If
we
'
re
running
under
a
sanitizer
if
we
configure
v8
to
generate
diff
-
-
git
a
/
config
/
win
/
BUILD
.
gn
b
/
config
/
win
/
BUILD
.
gn
index
e656a35e2
.
.
94bf8c16c
100644
-
-
-
a
/
config
/
win
/
BUILD
.
gn
+
+
+
b
/
config
/
win
/
BUILD
.
gn
-
2
17
+
2
17
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
control_flow_guard
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
-
import
(
"
/
/
build
/
timestamp
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
control_flow_guard
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
timestamp
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
assert
(
is_win
)
-
128
7
+
128
7
config
(
"
compiler
"
)
{
#
doesn
'
t
understand
ANSI
escape
codes
by
default
)
.
Make
sure
to
not
enable
#
this
if
remoteexec
is
in
use
because
this
will
lower
cache
hits
.
if
(
!
use_remoteexec
&
&
-
exec_script
(
"
/
/
build
/
win
/
use_ansi_codes
.
py
"
[
]
"
trim
string
"
)
=
=
+
exec_script
(
"
/
/
chromium
/
build
/
win
/
use_ansi_codes
.
py
"
[
]
"
trim
string
"
)
=
=
"
True
"
)
{
cflags
+
=
[
"
-
fansi
-
escape
-
codes
"
]
}
-
485
7
+
485
7
group
(
"
maybe_set_appcontainer_acls
"
)
{
if
(
build_with_chromium
&
&
current_cpu
=
=
target_cpu
&
&
host_os
=
=
"
win
"
)
{
action
(
"
set_appcontainer_acls
"
)
{
-
script
=
"
/
/
build
/
win
/
set_appcontainer_acls
.
py
"
+
script
=
"
/
/
chromium
/
build
/
win
/
set_appcontainer_acls
.
py
"
stamp_file
=
"
target_out_dir
/
acls
.
stamp
"
inputs
=
[
script
]
outputs
=
[
stamp_file
]
diff
-
-
git
a
/
config
/
win
/
console_app
.
gni
b
/
config
/
win
/
console_app
.
gni
index
038801e9f
.
.
5264410f1
100644
-
-
-
a
/
config
/
win
/
console_app
.
gni
+
+
+
b
/
config
/
win
/
console_app
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
If
true
builds
as
a
console
app
(
rather
than
a
windowed
app
)
which
allows
diff
-
-
git
a
/
config
/
win
/
control_flow_guard
.
gni
b
/
config
/
win
/
control_flow_guard
.
gni
index
176947f7f
.
.
76f082332
100644
-
-
-
a
/
config
/
win
/
control_flow_guard
.
gni
+
+
+
b
/
config
/
win
/
control_flow_guard
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
Set
this
to
true
to
enable
generation
of
CFG
indirect
call
dispatch
diff
-
-
git
a
/
config
/
win
/
manifest
.
gni
b
/
config
/
win
/
manifest
.
gni
index
e1859eacd
.
.
05e8a1a9a
100644
-
-
-
a
/
config
/
win
/
manifest
.
gni
+
+
+
b
/
config
/
win
/
manifest
.
gni
-
26
26
+
26
26
#
Reference
this
manifest
as
a
source
from
windows_manifest
targets
to
get
#
the
default
Chrome
OS
compatibility
list
.
-
default_compatibility_manifest
=
"
/
/
build
/
win
/
compatibility
.
manifest
"
+
default_compatibility_manifest
=
"
/
/
chromium
/
build
/
win
/
compatibility
.
manifest
"
#
Reference
this
manifest
as
a
source
from
windows_manifest
targets
to
get
#
the
default
Chrome
common
constrols
compatibility
.
-
common_controls_manifest
=
"
/
/
build
/
win
/
common_controls
.
manifest
"
+
common_controls_manifest
=
"
/
/
chromium
/
build
/
win
/
common_controls
.
manifest
"
#
Reference
this
manifest
to
request
that
Windows
not
perform
any
elevation
#
when
running
your
program
.
Otherwise
it
might
do
some
autodetection
and
#
request
elevated
privileges
from
the
user
.
This
is
normally
what
you
want
.
-
as_invoker_manifest
=
"
/
/
build
/
win
/
as_invoker
.
manifest
"
+
as_invoker_manifest
=
"
/
/
chromium
/
build
/
win
/
as_invoker
.
manifest
"
#
An
alternative
to
as_invoker_manifest
when
you
want
the
application
to
always
#
elevate
.
-
require_administrator_manifest
=
"
/
/
build
/
win
/
require_administrator
.
manifest
"
+
require_administrator_manifest
=
"
/
/
chromium
/
build
/
win
/
require_administrator
.
manifest
"
#
Request
the
segment
heap
.
See
https
:
/
/
crbug
.
com
/
1014701
for
details
.
declare_args
(
)
{
enable_segment_heap
=
false
}
-
segment_heap_manifest
=
"
/
/
build
/
win
/
segment_heap
.
manifest
"
+
segment_heap_manifest
=
"
/
/
chromium
/
build
/
win
/
segment_heap
.
manifest
"
#
Construct
a
target
to
combine
the
given
manifest
files
into
a
.
rc
file
.
#
diff
-
-
git
a
/
config
/
zip
.
gni
b
/
config
/
zip
.
gni
index
d623a0d0a
.
.
679a0d536
100644
-
-
-
a
/
config
/
zip
.
gni
+
+
+
b
/
config
/
zip
.
gni
-
29
7
+
29
7
template
(
"
zip
"
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
zip
.
py
"
inputs
=
invoker
.
inputs
outputs
=
[
invoker
.
output
]
diff
-
-
git
a
/
config
/
zos
/
BUILD
.
gn
b
/
config
/
zos
/
BUILD
.
gn
index
6d41055b4
.
.
c41d5237b
100644
-
-
-
a
/
config
/
zos
/
BUILD
.
gn
+
+
+
b
/
config
/
zos
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
specify
defines
and
flags
that
diff
-
-
git
a
/
dotfile_settings
.
gni
b
/
dotfile_settings
.
gni
index
f0a0a01d9
.
.
8105ba99c
100644
-
-
-
a
/
dotfile_settings
.
gni
+
+
+
b
/
dotfile_settings
.
gni
-
7
39
+
7
39
build_dotfile_settings
=
{
exec_script_allowlist
=
[
-
"
/
/
build
/
config
/
android
/
rules
.
gni
"
-
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
-
"
/
/
build
/
config
/
chromeos
/
rules
.
gni
"
-
"
/
/
build
/
config
/
clang
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
compiler
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
compiler
/
pgo
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
gcc
/
gcc_version
.
gni
"
-
"
/
/
build
/
config
/
host_byteorder
.
gni
"
-
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
-
"
/
/
build
/
config
/
ios
/
rules
.
gni
"
-
"
/
/
build
/
config
/
linux
/
atk
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
atspi2
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
dri
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
-
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
-
"
/
/
build
/
config
/
mac
/
rules
.
gni
"
-
"
/
/
build
/
config
/
posix
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
rust
.
gni
"
-
"
/
/
build
/
config
/
win
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
-
"
/
/
build
/
rust
/
analyze
.
gni
"
-
"
/
/
build
/
timestamp
.
gni
"
-
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
-
"
/
/
build
/
toolchain
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
-
"
/
/
build
/
toolchain
/
nacl
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
rbe
.
gni
"
-
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
-
"
/
/
build
/
toolchain
/
win
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
-
"
/
/
build
/
toolchain
/
zos
/
BUILD
.
gn
"
-
"
/
/
build
/
util
/
branding
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
chromeos
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
clang
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
gcc
/
gcc_version
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
host_byteorder
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
atk
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
atspi2
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
dri
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
posix
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
win
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
+
"
/
/
chromium
/
build
/
rust
/
analyze
.
gni
"
+
"
/
/
chromium
/
build
/
timestamp
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
nacl
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
win
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
zos
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
util
/
branding
.
gni
"
]
#
TODO
(
crbug
.
com
/
389986807
)
-
move
other
clients
to
exec_script_allowlist
diff
-
-
git
a
/
fuchsia
/
DIR_METADATA
b
/
fuchsia
/
DIR_METADATA
index
210aa6a95
.
.
ddd134a2b
100644
-
-
-
a
/
fuchsia
/
DIR_METADATA
+
+
+
b
/
fuchsia
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
diff
-
-
git
a
/
fuchsia
/
cipd
/
BUILD
.
gn
b
/
fuchsia
/
cipd
/
BUILD
.
gn
index
0b0834c59
.
.
5099df706
100644
-
-
-
a
/
fuchsia
/
cipd
/
BUILD
.
gn
+
+
+
b
/
fuchsia
/
cipd
/
BUILD
.
gn
-
6
10
+
6
10
assert
(
is_fuchsia
)
-
import
(
"
/
/
build
/
cipd
/
cipd
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
process_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
cipd
/
cipd
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
process_version
.
gni
"
)
import
(
"
/
/
third_party
/
fuchsia
-
gn
-
sdk
/
src
/
build_id_dir
.
gni
"
)
import
(
"
/
/
third_party
/
fuchsia
-
gn
-
sdk
/
src
/
cipd
.
gni
"
)
-
261
7
+
261
7
action
(
"
strip_chromedriver_binary
"
)
{
prog_name
=
"
{
root_out_dir
}
/
clang_x64
/
chromedriver
"
deps
=
[
"
/
/
chrome
/
test
/
chromedriver
:
chromedriver_server
(
host_toolchain
)
"
]
-
script
=
"
/
/
build
/
gn_run_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
gn_run_binary
.
py
"
sources
=
[
"
/
/
buildtools
/
third_party
/
eu
-
strip
/
bin
/
eu
-
strip
"
prog_name
diff
-
-
git
a
/
fuchsia
/
cipd
/
DIR_METADATA
b
/
fuchsia
/
cipd
/
DIR_METADATA
index
210aa6a95
.
.
ddd134a2b
100644
-
-
-
a
/
fuchsia
/
cipd
/
DIR_METADATA
+
+
+
b
/
fuchsia
/
cipd
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
diff
-
-
git
a
/
fuchsia
/
test
/
BUILD
.
gn
b
/
fuchsia
/
test
/
BUILD
.
gn
index
333dc48f1
.
.
f1b49e527
100644
-
-
-
a
/
fuchsia
/
test
/
BUILD
.
gn
+
+
+
b
/
fuchsia
/
test
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
python_library
(
"
version
"
)
{
data
=
[
-
13
7
+
13
7
python_library
(
"
version
"
)
{
python_library
(
"
gs_util_wrapper
"
)
{
data
=
[
-
"
/
/
build
/
find_depot_tools
.
py
"
+
"
/
/
chromium
/
build
/
find_depot_tools
.
py
"
"
/
/
third_party
/
depot_tools
/
"
"
gs_util_wrapper
.
py
"
]
diff
-
-
git
a
/
fuchsia
/
test
/
run_pytype
.
py
b
/
fuchsia
/
test
/
run_pytype
.
py
index
8e603313c
.
.
c7c3f873f
100755
-
-
-
a
/
fuchsia
/
test
/
run_pytype
.
py
+
+
+
b
/
fuchsia
/
test
/
run_pytype
.
py
-
27
7
+
27
7
FILES_AND_DIRECTORIES_TO_CHECK
=
[
os
.
path
.
join
(
FUCHSIA_TEST_DIR
f
)
for
f
in
COVERED_FILES
]
TEST_NAME
=
'
fuchsia_pytype
'
-
TEST_LOCATION
=
"
/
/
build
/
fuchsia
/
test
/
run_pytype
.
py
"
+
TEST_LOCATION
=
"
/
/
chromium
/
build
/
fuchsia
/
test
/
run_pytype
.
py
"
def
main
(
)
-
>
int
:
diff
-
-
git
a
/
gn_logs
.
gni
b
/
gn_logs
.
gni
index
df49ddab1
.
.
4c2c6abb7
100644
-
-
-
a
/
gn_logs
.
gni
+
+
+
b
/
gn_logs
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
build_gn_logs
=
[
"
#
#
#
rbe
.
gni
#
#
#
"
]
+
rbe_logs
build_gn_logs
+
=
[
"
"
]
-
14
14
+
14
14
build_gn_logs
+
=
[
"
#
#
#
compiler
.
gni
#
#
#
"
]
+
compiler_logs
build_gn_logs
+
=
[
"
"
]
if
(
target_os
=
=
"
android
"
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
build_gn_logs
+
=
[
"
#
#
#
android
/
config
.
gni
#
#
#
"
]
+
android_logs
build_gn_logs
+
=
[
"
"
]
}
if
(
target_os
=
=
"
ios
"
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
build_gn_logs
+
=
[
"
#
#
#
ios_sdk
.
gni
#
#
#
"
]
+
ios_sdk_logs
build_gn_logs
+
=
[
"
"
]
build_gn_logs
+
=
[
"
#
#
#
mac_sdk
.
gni
#
#
#
"
]
+
mac_sdk_logs
-
29
20
+
29
20
if
(
target_os
=
=
"
ios
"
)
{
}
if
(
target_os
=
=
"
mac
"
)
{
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
build_gn_logs
+
=
[
"
#
#
#
mac_sdk
.
gni
#
#
#
"
]
+
mac_sdk_logs
build_gn_logs
+
=
[
"
"
]
}
if
(
target_os
=
=
"
win
"
)
{
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
build_gn_logs
+
=
[
"
#
#
#
visual_studio_version
.
gni
#
#
#
"
]
+
visual_studio_version_logs
build_gn_logs
+
=
[
"
"
]
}
if
(
target_os
=
=
"
fuchsia
"
)
{
-
import
(
"
/
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
gn_configs
.
gni
"
)
build_gn_logs
+
=
[
"
#
#
#
fuchsia
/
gn_configs
.
gni
#
#
#
"
]
+
fuchsia_gn_logs
build_gn_logs
+
=
[
"
"
]
}
diff
-
-
git
a
/
ios
/
intent_definition
.
gni
b
/
ios
/
intent_definition
.
gni
index
652ff6684
.
.
00c447663
100644
-
-
-
a
/
ios
/
intent_definition
.
gni
+
+
+
b
/
ios
/
intent_definition
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
#
Template
to
compile
an
.
intentdefinition
file
.
#
-
34
7
+
34
7
template
(
"
intent_definition
"
)
{
"
target_gen_dir
/
"
+
get_path_info
(
invoker
.
intent_file
"
file
"
)
action
(
_compile_intent_target
)
{
-
script
=
"
/
/
build
/
apple
/
xcrun
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
xcrun
.
py
"
inputs
=
[
invoker
.
intent_file
]
outputs
=
[
_compile_intent_output
]
args
=
[
-
71
7
+
71
7
template
(
"
intent_definition
"
)
{
}
action
(
_generate_source_target
)
{
-
script
=
"
/
/
build
/
apple
/
xcrun
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
xcrun
.
py
"
inputs
=
[
invoker
.
intent_file
]
outputs
=
_generate_source_output
args
=
[
diff
-
-
git
a
/
linux
/
BUILD
.
gn
b
/
linux
/
BUILD
.
gn
index
653951df5
.
.
a3d8267f8
100644
-
-
-
a
/
linux
/
BUILD
.
gn
+
+
+
b
/
linux
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
use_gio
)
{
pkg_config
(
"
gio_config
"
)
{
-
26
7
+
26
7
if
(
use_system_freetype
)
{
#
the
system
use
with
caution
for
details
see
build
/
config
/
freetype
/
BUILD
.
gn
.
pkg_config
(
"
freetype_from_pkgconfig
"
)
{
visibility
=
[
-
"
/
/
build
/
config
/
freetype
:
freetype
"
+
"
/
/
chromium
/
build
/
config
/
freetype
:
freetype
"
"
/
/
third_party
:
freetype_harfbuzz
"
"
/
/
third_party
/
harfbuzz
-
ng
:
harfbuzz_source
"
]
diff
-
-
git
a
/
linux
/
extract_symbols
.
gni
b
/
linux
/
extract_symbols
.
gni
index
26426c8aa
.
.
af40a7cd8
100644
-
-
-
a
/
linux
/
extract_symbols
.
gni
+
+
+
b
/
linux
/
extract_symbols
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Extracts
symbols
from
a
binary
into
a
symbol
file
using
dump_app_syms
.
py
.
#
-
23
8
+
23
8
template
(
"
extract_symbols
"
)
{
dump_syms_binary
=
get_label_info
(
dump_syms_label
"
root_out_dir
"
)
+
"
/
"
+
"
dump_syms
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
-
script
=
"
/
/
build
/
linux
/
dump_app_syms
.
py
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
script
=
"
/
/
chromium
/
build
/
linux
/
dump_app_syms
.
py
"
inputs
=
[
invoker
.
binary
dump_syms_binary
diff
-
-
git
a
/
linux
/
strip_binary
.
gni
b
/
linux
/
strip_binary
.
gni
index
3675d39a5
.
.
fd4aed705
100644
-
-
-
a
/
linux
/
strip_binary
.
gni
+
+
+
b
/
linux
/
strip_binary
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Extracts
symbols
from
a
binary
into
a
symbol
file
.
#
-
21
7
+
21
7
template
(
"
strip_binary
"
)
{
]
)
action
(
"
{
target_name
}
"
)
{
eu_strip_binary
=
"
/
/
buildtools
/
third_party
/
eu
-
strip
/
bin
/
eu
-
strip
"
-
script
=
"
/
/
build
/
linux
/
strip_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
linux
/
strip_binary
.
py
"
if
(
defined
(
invoker
.
stripped_binary_output
)
)
{
stripped_binary_output
=
invoker
.
stripped_binary_output
diff
-
-
git
a
/
linux
/
unbundle
/
absl_algorithm
.
gn
b
/
linux
/
unbundle
/
absl_algorithm
.
gn
index
cc41c6861
.
.
09067ebe9
100644
-
-
-
a
/
linux
/
unbundle
/
absl_algorithm
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_algorithm
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_algorithm_container
"
)
{
packages
=
[
"
absl_algorithm_container
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_base
.
gn
b
/
linux
/
unbundle
/
absl_base
.
gn
index
b5ce0863e
.
.
1243bdac9
100644
-
-
-
a
/
linux
/
unbundle
/
absl_base
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_base
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_base
"
)
{
packages
=
[
"
absl_base
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_cleanup
.
gn
b
/
linux
/
unbundle
/
absl_cleanup
.
gn
index
61455edf3
.
.
31086cf1d
100644
-
-
-
a
/
linux
/
unbundle
/
absl_cleanup
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_cleanup
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_cleanup
"
)
{
packages
=
[
"
absl_cleanup
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_container
.
gn
b
/
linux
/
unbundle
/
absl_container
.
gn
index
e211c911c
.
.
e7b728e21
100644
-
-
-
a
/
linux
/
unbundle
/
absl_container
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_container
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_btree
"
)
{
packages
=
[
"
absl_btree
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_debugging
.
gn
b
/
linux
/
unbundle
/
absl_debugging
.
gn
index
b59a45b09
.
.
127f1e45f
100644
-
-
-
a
/
linux
/
unbundle
/
absl_debugging
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_debugging
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_failure_signal_handler
"
)
{
packages
=
[
"
absl_failure_signal_handler
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_flags
.
gn
b
/
linux
/
unbundle
/
absl_flags
.
gn
index
cb0358399
.
.
16aa24e18
100644
-
-
-
a
/
linux
/
unbundle
/
absl_flags
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_flags
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
absl_flags_config
"
)
{
#
This
target
is
referenced
by
/
/
third_party
/
abseil
-
cpp
:
absl_full_deps
diff
-
-
git
a
/
linux
/
unbundle
/
absl_functional
.
gn
b
/
linux
/
unbundle
/
absl_functional
.
gn
index
a996eb7b7
.
.
0ce9c0f1a
100644
-
-
-
a
/
linux
/
unbundle
/
absl_functional
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_functional
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_any_invocable
"
)
{
packages
=
[
"
absl_any_invocable
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_hash
.
gn
b
/
linux
/
unbundle
/
absl_hash
.
gn
index
1388ba811
.
.
c36ea4bf3
100644
-
-
-
a
/
linux
/
unbundle
/
absl_hash
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_hash
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_hash
"
)
{
packages
=
[
"
absl_hash
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_log
.
gn
b
/
linux
/
unbundle
/
absl_log
.
gn
index
d5c06506d
.
.
fdc111e2b
100644
-
-
-
a
/
linux
/
unbundle
/
absl_log
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_log
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_absl_check
"
)
{
packages
=
[
"
absl_absl_check
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_memory
.
gn
b
/
linux
/
unbundle
/
absl_memory
.
gn
index
5d6abe87f
.
.
144e32ec1
100644
-
-
-
a
/
linux
/
unbundle
/
absl_memory
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_memory
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_memory
"
)
{
packages
=
[
"
absl_memory
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_meta
.
gn
b
/
linux
/
unbundle
/
absl_meta
.
gn
index
7f79a06cc
.
.
494d790f3
100644
-
-
-
a
/
linux
/
unbundle
/
absl_meta
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_meta
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_type_traits
"
)
{
packages
=
[
"
absl_type_traits
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_numeric
.
gn
b
/
linux
/
unbundle
/
absl_numeric
.
gn
index
660263161
.
.
3d9da1718
100644
-
-
-
a
/
linux
/
unbundle
/
absl_numeric
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_numeric
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_bits
"
)
{
packages
=
[
"
absl_bits
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_random
.
gn
b
/
linux
/
unbundle
/
absl_random
.
gn
index
eae95345e
.
.
2a05d6b20
100644
-
-
-
a
/
linux
/
unbundle
/
absl_random
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_random
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_random_bit_gen_ref
"
)
{
packages
=
[
"
absl_random_bit_gen_ref
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_status
.
gn
b
/
linux
/
unbundle
/
absl_status
.
gn
index
190548581
.
.
988000b1e
100644
-
-
-
a
/
linux
/
unbundle
/
absl_status
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_status
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_status
"
)
{
packages
=
[
"
absl_status
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_strings
.
gn
b
/
linux
/
unbundle
/
absl_strings
.
gn
index
d91d84fc5
.
.
f6cc72608
100644
-
-
-
a
/
linux
/
unbundle
/
absl_strings
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_strings
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_cord
"
)
{
packages
=
[
"
absl_cord
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_synchronization
.
gn
b
/
linux
/
unbundle
/
absl_synchronization
.
gn
index
476d24279
.
.
bc2cd0ac7
100644
-
-
-
a
/
linux
/
unbundle
/
absl_synchronization
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_synchronization
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_synchronization
"
)
{
packages
=
[
"
absl_synchronization
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_time
.
gn
b
/
linux
/
unbundle
/
absl_time
.
gn
index
d925cae8e
.
.
68641413c
100644
-
-
-
a
/
linux
/
unbundle
/
absl_time
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_time
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_time
"
)
{
packages
=
[
"
absl_time
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_types
.
gn
b
/
linux
/
unbundle
/
absl_types
.
gn
index
8d2b13145
.
.
62440a2b4
100644
-
-
-
a
/
linux
/
unbundle
/
absl_types
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_types
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_any
"
)
{
packages
=
[
"
absl_any
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
absl_utility
.
gn
b
/
linux
/
unbundle
/
absl_utility
.
gn
index
ff2b0dd8d
.
.
549d3c7b9
100644
-
-
-
a
/
linux
/
unbundle
/
absl_utility
.
gn
+
+
+
b
/
linux
/
unbundle
/
absl_utility
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_absl_utility
"
)
{
packages
=
[
"
absl_utility
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
brotli
.
gn
b
/
linux
/
unbundle
/
brotli
.
gn
index
8e43b4e53
.
.
3313335e3
100644
-
-
-
a
/
linux
/
unbundle
/
brotli
.
gn
+
+
+
b
/
linux
/
unbundle
/
brotli
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_brotli_dec
"
)
{
packages
=
[
"
libbrotlidec
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
crc32c
.
gn
b
/
linux
/
unbundle
/
crc32c
.
gn
index
23f2292d9
.
.
36a7b9d8c
100644
-
-
-
a
/
linux
/
unbundle
/
crc32c
.
gn
+
+
+
b
/
linux
/
unbundle
/
crc32c
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
crc32c_shim
"
)
{
root_path
=
"
src
/
include
"
diff
-
-
git
a
/
linux
/
unbundle
/
dav1d
.
gn
b
/
linux
/
unbundle
/
dav1d
.
gn
index
a6d005a66
.
.
8b57f4216
100644
-
-
-
a
/
linux
/
unbundle
/
dav1d
.
gn
+
+
+
b
/
linux
/
unbundle
/
dav1d
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_dav1d
"
)
{
packages
=
[
"
dav1d
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
double
-
conversion
.
gn
b
/
linux
/
unbundle
/
double
-
conversion
.
gn
index
8f970c5a2
.
.
6feda2a2e
100644
-
-
-
a
/
linux
/
unbundle
/
double
-
conversion
.
gn
+
+
+
b
/
linux
/
unbundle
/
double
-
conversion
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
double_conversion_shim
"
)
{
root_path
=
"
.
"
diff
-
-
git
a
/
linux
/
unbundle
/
ffmpeg
.
gn
b
/
linux
/
unbundle
/
ffmpeg
.
gn
index
0008275da
.
.
6e1f58a20
100644
-
-
-
a
/
linux
/
unbundle
/
ffmpeg
.
gn
+
+
+
b
/
linux
/
unbundle
/
ffmpeg
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_ffmpeg
"
)
{
packages
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
flac
.
gn
b
/
linux
/
unbundle
/
flac
.
gn
index
ce9a1b377
.
.
6b01855b9
100644
-
-
-
a
/
linux
/
unbundle
/
flac
.
gn
+
+
+
b
/
linux
/
unbundle
/
flac
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_flac
"
)
{
packages
=
[
"
flac
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
flatbuffers
.
gn
b
/
linux
/
unbundle
/
flatbuffers
.
gn
index
7132f6c33
.
.
c79d2a409
100644
-
-
-
a
/
linux
/
unbundle
/
flatbuffers
.
gn
+
+
+
b
/
linux
/
unbundle
/
flatbuffers
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
config
(
"
flatbuffers_config
"
)
{
include_dirs
=
[
"
src
/
include
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
highway
.
gn
b
/
linux
/
unbundle
/
highway
.
gn
index
ac7e743f7
.
.
dbdef1de6
100644
-
-
-
a
/
linux
/
unbundle
/
highway
.
gn
+
+
+
b
/
linux
/
unbundle
/
highway
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
import
(
"
src
/
hwy
.
gni
"
)
pkg_config
(
"
libhwy_external_config
"
)
{
diff
-
-
git
a
/
linux
/
unbundle
/
icu
.
gn
b
/
linux
/
unbundle
/
icu
.
gn
index
bad83cda0
.
.
768d42e4c
100644
-
-
-
a
/
linux
/
unbundle
/
icu
.
gn
+
+
+
b
/
linux
/
unbundle
/
icu
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
group
(
"
icu
"
)
{
public_deps
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
jsoncpp
.
gn
b
/
linux
/
unbundle
/
jsoncpp
.
gn
index
e84a0ef27
.
.
f29647607
100644
-
-
-
a
/
linux
/
unbundle
/
jsoncpp
.
gn
+
+
+
b
/
linux
/
unbundle
/
jsoncpp
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
jsoncpp_config
"
)
{
packages
=
[
"
jsoncpp
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libXNVCtrl
.
gn
b
/
linux
/
unbundle
/
libXNVCtrl
.
gn
index
0e1265b8c
.
.
befa168c6
100644
-
-
-
a
/
linux
/
unbundle
/
libXNVCtrl
.
gn
+
+
+
b
/
linux
/
unbundle
/
libXNVCtrl
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
libXNVCtrl_shim
"
)
{
root_path
=
"
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
third_party
/
libXNVCtrl
"
diff
-
-
git
a
/
linux
/
unbundle
/
libaom
.
gn
b
/
linux
/
unbundle
/
libaom
.
gn
index
dab8dfaba
.
.
e5420d6e9
100644
-
-
-
a
/
linux
/
unbundle
/
libaom
.
gn
+
+
+
b
/
linux
/
unbundle
/
libaom
.
gn
-
1
6
+
1
6
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
import
(
"
/
/
third_party
/
libaom
/
options
.
gni
"
)
buildflag_header
(
"
libaom_buildflags
"
)
{
diff
-
-
git
a
/
linux
/
unbundle
/
libavif
.
gn
b
/
linux
/
unbundle
/
libavif
.
gn
index
c79f95ba4
.
.
d81db3d8f
100644
-
-
-
a
/
linux
/
unbundle
/
libavif
.
gn
+
+
+
b
/
linux
/
unbundle
/
libavif
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libavif
"
)
{
packages
=
[
"
libavif
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libdrm
.
gn
b
/
linux
/
unbundle
/
libdrm
.
gn
index
d461b8ca5
.
.
1bd6e85c8
100644
-
-
-
a
/
linux
/
unbundle
/
libdrm
.
gn
+
+
+
b
/
linux
/
unbundle
/
libdrm
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libdrm
"
)
{
packages
=
[
"
libdrm
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libpng
.
gn
b
/
linux
/
unbundle
/
libpng
.
gn
index
91e0ee45d
.
.
16e54b545
100644
-
-
-
a
/
linux
/
unbundle
/
libpng
.
gn
+
+
+
b
/
linux
/
unbundle
/
libpng
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
libpng_config
"
)
{
packages
=
[
"
libpng
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libsecret
.
gn
b
/
linux
/
unbundle
/
libsecret
.
gn
index
4cfd2f0d7
.
.
3fd2972d6
100644
-
-
-
a
/
linux
/
unbundle
/
libsecret
.
gn
+
+
+
b
/
linux
/
unbundle
/
libsecret
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
pkg_config
(
"
libsecret_config
"
)
{
packages
=
[
"
libsecret
-
1
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libusb
.
gn
b
/
linux
/
unbundle
/
libusb
.
gn
index
3d15851ab
.
.
410ac36d8
100644
-
-
-
a
/
linux
/
unbundle
/
libusb
.
gn
+
+
+
b
/
linux
/
unbundle
/
libusb
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libusb
"
)
{
packages
=
[
"
libusb
-
1
.
0
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libvpx
.
gn
b
/
linux
/
unbundle
/
libvpx
.
gn
index
8b7bb5e7c
.
.
d22d20204
100644
-
-
-
a
/
linux
/
unbundle
/
libvpx
.
gn
+
+
+
b
/
linux
/
unbundle
/
libvpx
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libvpx
"
)
{
packages
=
[
"
vpx
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libwebp
.
gn
b
/
linux
/
unbundle
/
libwebp
.
gn
index
50c618229
.
.
e7da862c4
100644
-
-
-
a
/
linux
/
unbundle
/
libwebp
.
gn
+
+
+
b
/
linux
/
unbundle
/
libwebp
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libwebp
"
)
{
packages
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
libxml
.
gn
b
/
linux
/
unbundle
/
libxml
.
gn
index
8567c154f
.
.
0f8d9adb6
100644
-
-
-
a
/
linux
/
unbundle
/
libxml
.
gn
+
+
+
b
/
linux
/
unbundle
/
libxml
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
pkg_config
(
"
system_libxml
"
)
{
packages
=
[
"
libxml
-
2
.
0
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libxslt
.
gn
b
/
linux
/
unbundle
/
libxslt
.
gn
index
787796063
.
.
3702f227a
100644
-
-
-
a
/
linux
/
unbundle
/
libxslt
.
gn
+
+
+
b
/
linux
/
unbundle
/
libxslt
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
pkg_config
(
"
system_libxslt
"
)
{
packages
=
[
"
libxslt
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libyuv
.
gn
b
/
linux
/
unbundle
/
libyuv
.
gn
index
116131ee4
.
.
69cccffcf
100644
-
-
-
a
/
linux
/
unbundle
/
libyuv
.
gn
+
+
+
b
/
linux
/
unbundle
/
libyuv
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
libyuv_config
"
)
{
packages
=
[
"
libyuv
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
openh264
.
gn
b
/
linux
/
unbundle
/
openh264
.
gn
index
90d14aa91
.
.
e81cbc00f
100644
-
-
-
a
/
linux
/
unbundle
/
openh264
.
gn
+
+
+
b
/
linux
/
unbundle
/
openh264
.
gn
-
2
14
+
2
14
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
config
(
"
encoder_cfi_flags
"
)
{
cflags
=
[
]
if
(
current_toolchain
=
=
default_toolchain
&
&
is_clang
)
{
openh264_cfi_ignorelist_path
=
-
rebase_path
(
"
/
/
build
/
linux
/
unbundle
/
openh264_encoder_cfi_ignores
.
txt
"
+
rebase_path
(
"
/
/
chromium
/
build
/
linux
/
unbundle
/
openh264_encoder_cfi_ignores
.
txt
"
root_build_dir
)
cflags
+
=
[
"
-
fsanitize
-
ignorelist
=
openh264_cfi_ignorelist_path
"
]
}
diff
-
-
git
a
/
linux
/
unbundle
/
opus
.
gn
b
/
linux
/
unbundle
/
opus
.
gn
index
b1a199a53
.
.
81dc4d09d
100644
-
-
-
a
/
linux
/
unbundle
/
opus
.
gn
+
+
+
b
/
linux
/
unbundle
/
opus
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
opus_config
"
)
{
packages
=
[
"
opus
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
re2
.
gn
b
/
linux
/
unbundle
/
re2
.
gn
index
d587619d0
.
.
3478afcf2
100644
-
-
-
a
/
linux
/
unbundle
/
re2
.
gn
+
+
+
b
/
linux
/
unbundle
/
re2
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
assert
(
!
use_custom_libcxx
"
Usage
of
the
system
libre2
.
so
is
not
supported
with
"
+
diff
-
-
git
a
/
linux
/
unbundle
/
simdutf
.
gn
b
/
linux
/
unbundle
/
simdutf
.
gn
index
67d86cb3b
.
.
062c0c1e1
100644
-
-
-
a
/
linux
/
unbundle
/
simdutf
.
gn
+
+
+
b
/
linux
/
unbundle
/
simdutf
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
header
"
)
{
root_path
=
"
.
"
diff
-
-
git
a
/
linux
/
unbundle
/
snappy
.
gn
b
/
linux
/
unbundle
/
snappy
.
gn
index
dea0b5543
.
.
e8087d118
100644
-
-
-
a
/
linux
/
unbundle
/
snappy
.
gn
+
+
+
b
/
linux
/
unbundle
/
snappy
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
snappy_shim
"
)
{
root_path
=
"
src
"
diff
-
-
git
a
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Headers
.
gn
b
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Headers
.
gn
index
24f79de1e
.
.
b002abd6e
100644
-
-
-
a
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Headers
.
gn
+
+
+
b
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Headers
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
SPIRV
-
Headers_shim
"
)
{
root_path
=
"
.
.
/
.
.
/
.
.
/
.
.
/
third_party
/
SPIRV
-
Headers
/
include
"
diff
-
-
git
a
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Tools
.
gn
b
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Tools
.
gn
index
eb9d9224e
.
.
e79807cfd
100644
-
-
-
a
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Tools
.
gn
+
+
+
b
/
linux
/
unbundle
/
swiftshader
-
SPIRV
-
Tools
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_SPIRV
-
Tools
"
)
{
packages
=
[
"
SPIRV
-
Tools
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Headers
.
gn
b
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Headers
.
gn
index
eb2495ce2
.
.
0d5e2f2f5
100644
-
-
-
a
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Headers
.
gn
+
+
+
b
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Headers
.
gn
-
1
6
+
1
6
#
This
shim
can
only
be
used
if
you
build
Chromium
without
DAWN
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
vulkan
-
SPIRV
-
Headers_shim
"
)
{
root_path
=
"
include
"
diff
-
-
git
a
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Tools
.
gn
b
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Tools
.
gn
index
a65c64c61
.
.
30bfbf539
100644
-
-
-
a
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Tools
.
gn
+
+
+
b
/
linux
/
unbundle
/
vulkan
-
SPIRV
-
Tools
.
gn
-
1
7
+
1
7
#
This
shim
can
only
be
used
if
you
build
Chromium
without
DAWN
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
spvtools_internal_config
"
)
{
packages
=
[
"
SPIRV
-
Tools
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
woff2
.
gn
b
/
linux
/
unbundle
/
woff2
.
gn
index
e7bae10fd
.
.
984719498
100644
-
-
-
a
/
linux
/
unbundle
/
woff2
.
gn
+
+
+
b
/
linux
/
unbundle
/
woff2
.
gn
-
1
5
+
1
5
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_woff2
"
)
{
packages
=
[
"
libwoff2dec
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
zlib
.
gn
b
/
linux
/
unbundle
/
zlib
.
gn
index
736d60958
.
.
bbcdd6e94
100644
-
-
-
a
/
linux
/
unbundle
/
zlib
.
gn
+
+
+
b
/
linux
/
unbundle
/
zlib
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
zlib_shim
"
)
{
root_path
=
"
.
"
diff
-
-
git
a
/
linux
/
unbundle
/
zstd
.
gn
b
/
linux
/
unbundle
/
zstd
.
gn
index
1a5dac6d4
.
.
f70a6e4d8
100644
-
-
-
a
/
linux
/
unbundle
/
zstd
.
gn
+
+
+
b
/
linux
/
unbundle
/
zstd
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_zstd
"
)
{
packages
=
[
"
libzstd
"
]
diff
-
-
git
a
/
nocompile
.
gni
b
/
nocompile
.
gni
index
2d9991bee
.
.
63c949b20
100644
-
-
-
a
/
nocompile
.
gni
+
+
+
b
/
nocompile
.
gni
-
10
7
+
10
7
#
#
1
.
Create
a
GN
target
:
#
-
#
import
(
"
/
/
build
/
nocompile
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
nocompile
.
gni
"
)
#
#
nocompile_source_set
(
"
base_nocompile_tests
"
)
{
#
sources
=
[
-
49
9
+
49
9
#
Also
see
:
#
http
:
/
/
dev
.
chromium
.
org
/
developers
/
testing
/
no
-
compile
-
tests
#
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
if
(
is_win
)
{
-
import
(
"
/
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
}
declare_args
(
)
{
-
78
7
+
78
7
if
(
enable_nocompile_tests
)
{
#
Disable
the
checks
that
the
Chrome
style
plugin
normally
enforces
to
#
reduce
the
amount
of
boilerplate
needed
in
nocompile
tests
.
-
configs
-
=
[
"
/
/
build
/
config
/
clang
:
find_bad_constructs
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
clang
:
find_bad_constructs
"
]
if
(
is_win
)
{
result_path
=
diff
-
-
git
a
/
partitioned_shared_library
.
gni
b
/
partitioned_shared_library
.
gni
index
18b5917a7
.
.
7bd0b89d9
100644
-
-
-
a
/
partitioned_shared_library
.
gni
+
+
+
b
/
partitioned_shared_library
.
gni
-
3
9
+
3
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
if
(
build_with_chromium
)
{
import
(
"
/
/
third_party
/
jni_zero
/
jni_zero
.
gni
"
)
}
-
77
7
+
77
7
template
(
"
partitioned_shared_library
"
)
{
template
(
"
partition_action
"
)
{
action
(
target_name
)
{
deps
=
[
"
:
_combined_library_target
"
]
-
script
=
"
/
/
build
/
extract_partition
.
py
"
+
script
=
"
/
/
chromium
/
build
/
extract_partition
.
py
"
sources
=
[
"
root_out_dir
/
lib
.
unstripped
/
lib
{
_output_name
}
__combined
.
so
"
]
outputs
=
[
-
151
7
+
151
7
template
(
"
partitioned_shared_library_with_jni
"
)
{
forward_variables_from
(
invoker
"
*
"
TESTONLY_AND_VISIBILITY
)
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
target_type
=
"
partitioned_shared_library
"
-
target_type_import
=
"
/
/
build
/
partitioned_shared_library
.
gni
"
+
target_type_import
=
"
/
/
chromium
/
build
/
partitioned_shared_library
.
gni
"
}
}
set_defaults
(
"
partitioned_shared_library_with_jni
"
)
{
diff
-
-
git
a
/
private_code_test
/
BUILD
.
gn
b
/
private_code_test
/
BUILD
.
gn
index
1e65d98bd
.
.
4034662db
100644
-
-
-
a
/
private_code_test
/
BUILD
.
gn
+
+
+
b
/
private_code_test
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
import
(
"
private_code_test
.
gni
"
)
diff
-
-
git
a
/
private_code_test
/
private_code_test
.
gni
b
/
private_code_test
/
private_code_test
.
gni
index
09d6a8dca
.
.
943cb9699
100644
-
-
-
a
/
private_code_test
/
private_code_test
.
gni
+
+
+
b
/
private_code_test
/
private_code_test
.
gni
-
29
9
+
29
9
template
(
"
private_code_test
"
)
{
_collect_sources_output
=
"
target_gen_dir
/
target_name
.
json
"
_collect_sources_target_name
=
"
{
target_name
}
__parse_ninja
"
action
(
_collect_sources_target_name
)
{
-
script
=
"
/
/
build
/
private_code_test
/
ninja_parser
.
py
"
+
script
=
"
/
/
chromium
/
build
/
private_code_test
/
ninja_parser
.
py
"
outputs
=
[
_collect_sources_output
]
-
inputs
=
[
"
/
/
build
/
action_helpers
.
py
"
]
+
inputs
=
[
"
/
/
chromium
/
build
/
action_helpers
.
py
"
]
depfile
=
"
target_gen_dir
/
target_name
.
d
"
#
The
script
does
not
read
this
file
so
the
dep
is
not
really
required
.
-
51
13
+
51
13
template
(
"
private_code_test
"
)
{
}
isolated_script_test
(
target_name
)
{
-
script
=
"
/
/
build
/
private_code_test
/
private_code_test
.
py
"
+
script
=
"
/
/
chromium
/
build
/
private_code_test
/
private_code_test
.
py
"
if
(
defined
(
invoker
.
private_paths_dep
)
)
{
_private_paths_dep
=
invoker
.
private_paths_dep
_private_paths_file
=
invoker
.
private_paths_file
}
else
{
_private_paths_dep
=
-
"
/
/
build
/
private_code_test
:
private_paths
(
default_toolchain
)
"
+
"
/
/
chromium
/
build
/
private_code_test
:
private_paths
(
default_toolchain
)
"
_private_paths_file
=
get_label_info
(
_private_paths_dep
"
target_gen_dir
"
)
+
"
/
private_paths
.
txt
"
diff
-
-
git
a
/
rust
/
BUILD
.
gn
b
/
rust
/
BUILD
.
gn
index
c2920d46d
.
.
a17812bda
100644
-
-
-
a
/
rust
/
BUILD
.
gn
+
+
+
b
/
rust
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
if
(
toolchain_has_rust
)
{
config
(
"
edition_2024
"
)
{
-
89
7
+
89
7
config
(
"
forbid_unsafe
"
)
{
}
config
(
"
panic_immediate_abort
"
)
{
-
visibility
=
[
"
/
/
build
/
rust
/
std
/
rules
:
*
"
]
+
visibility
=
[
"
/
/
chromium
/
build
/
rust
/
std
/
rules
:
*
"
]
if
(
is_official_build
)
{
rustflags
=
[
"
-
-
cfg
"
diff
-
-
git
a
/
rust
/
cargo_crate
.
gni
b
/
rust
/
cargo_crate
.
gni
index
6d11c538b
.
.
6e221c95d
100644
-
-
-
a
/
rust
/
cargo_crate
.
gni
+
+
+
b
/
rust
/
cargo_crate
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_macro
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_macro
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
#
This
template
allows
for
building
Cargo
crates
within
gn
.
#
-
363
7
+
363
7
template
(
"
cargo_crate
"
)
{
action
(
"
{
_build_script_name
}
_write_rustflags
"
)
{
_rustflags_txt
=
"
_build_script_env_out_dir
/
rustflags
.
txt
"
outputs
=
[
_rustflags_txt
]
-
script
=
rebase_path
(
"
/
/
build
/
rust
/
write_rustflags
.
py
"
)
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
write_rustflags
.
py
"
)
args
=
[
"
-
-
output
"
rebase_path
(
_rustflags_txt
root_build_dir
)
-
382
13
+
382
13
template
(
"
cargo_crate
"
)
{
#
Extra
targets
required
to
make
build
script
work
action
(
"
{
_build_script_name
}
_output
"
)
{
-
script
=
rebase_path
(
"
/
/
build
/
rust
/
run_build_script
.
py
"
)
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
run_build_script
.
py
"
)
_write_rustflags_outputs
=
get_target_outputs
(
"
:
{
_build_script_name
}
_write_rustflags
"
)
_rustflags_txt
=
_write_rustflags_outputs
[
0
]
inputs
=
[
-
"
/
/
build
/
action_helpers
.
py
"
-
"
/
/
build
/
gn_helpers
.
py
"
+
"
/
/
chromium
/
build
/
action_helpers
.
py
"
+
"
/
/
chromium
/
build
/
gn_helpers
.
py
"
_rustflags_txt
]
build_script_target
=
"
:
{
_build_script_name
}
(
rust_macro_toolchain
)
"
-
499
7
+
499
7
template
(
"
cargo_crate
"
)
{
"
rustflags
"
]
)
configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
#
Avoid
generating
profiling
data
for
build
scripts
.
#
-
511
9
+
511
9
template
(
"
cargo_crate
"
)
{
#
If
we
do
include
build
script
output
in
test
metrics
it
could
be
#
misleading
:
exercising
some
code
from
a
build
script
doesn
'
t
give
us
#
the
same
signal
as
an
actual
test
.
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
}
}
else
{
not_needed
(
invoker
diff
-
-
git
a
/
rust
/
chromium_prelude
/
BUILD
.
gn
b
/
rust
/
chromium_prelude
/
BUILD
.
gn
index
28e9a0abe
.
.
602549f37
100644
-
-
-
a
/
rust
/
chromium_prelude
/
BUILD
.
gn
+
+
+
b
/
rust
/
chromium_prelude
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_macro
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_macro
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
if
(
enable_chromium_prelude
)
{
rust_static_library
(
"
chromium_prelude
"
)
{
diff
-
-
git
a
/
rust
/
chromium_prelude
/
import_test
.
rs
b
/
rust
/
chromium_prelude
/
import_test
.
rs
index
a8ddcf428
.
.
2da9b3d53
100644
-
-
-
a
/
rust
/
chromium_prelude
/
import_test
.
rs
+
+
+
b
/
rust
/
chromium_prelude
/
import_test
.
rs
-
4
7
+
4
7
mod
test_direct
{
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
;
+
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
;
}
pub
fn
import_test
(
)
{
-
14
7
+
14
7
mod
test_direct
{
mod
test_as
{
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
as
library
;
+
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
as
library
;
}
pub
fn
import_test
(
)
{
-
24
7
+
24
7
mod
test_as
{
mod
test_pub
{
chromium
:
:
import
!
{
-
pub
"
/
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
as
library
;
+
pub
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
:
import_test_lib
"
as
library
;
}
}
diff
-
-
git
a
/
rust
/
crubit
/
BUILD
.
gn
b
/
rust
/
crubit
/
BUILD
.
gn
index
2bc6eb00e
.
.
3f1a3a550
100644
-
-
-
a
/
rust
/
crubit
/
BUILD
.
gn
+
+
+
b
/
rust
/
crubit
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_macro
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_macro
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
#
Common
constants
.
_support_dir
=
"
{
rust_sysroot
}
/
lib
/
crubit
"
diff
-
-
git
a
/
rust
/
rs_bindings_from_cc
.
gni
b
/
rust
/
rs_bindings_from_cc
.
gni
index
54775ea11
.
.
8748da7b8
100644
-
-
-
a
/
rust
/
rs_bindings_from_cc
.
gni
+
+
+
b
/
rust
/
rs_bindings_from_cc
.
gni
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
mixed_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_static_library
.
gni
"
)
#
Template
to
generate
and
build
Rust
bindings
for
a
set
of
C
+
+
headers
using
#
Crubit
'
s
rs_bindings_from_cc
tool
.
-
55
8
+
55
8
import
(
"
/
/
build
/
rust
/
mixed_static_library
.
gni
"
)
#
Usage
example
:
#
#
BUILD
.
gn
:
-
#
import
(
"
/
/
build
/
rust
/
rs_bindings_from_cc
.
gni
"
)
-
#
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
rust
/
rs_bindings_from_cc
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
#
#
rust_executable
(
"
my_target
"
)
{
#
crate_root
=
"
main
.
rs
"
-
247
7
+
247
7
template
(
"
rs_bindings_from_cc
"
)
{
visibility
=
_visibility
}
-
script
=
"
/
/
build
/
rust
/
run_rs_bindings_from_cc
.
py
"
+
script
=
"
/
/
chromium
/
build
/
rust
/
run_rs_bindings_from_cc
.
py
"
inputs
=
[
"
/
/
third_party
/
rust
-
toolchain
/
bin
/
rs_bindings_from_cc
"
]
sources
=
invoker
.
public_headers
outputs
=
[
diff
-
-
git
a
/
rust
/
rust_bindgen
.
gni
b
/
rust
/
rust_bindgen
.
gni
index
5c809c693
.
.
16f12ccbb
100644
-
-
-
a
/
rust
/
rust_bindgen
.
gni
+
+
+
b
/
rust
/
rust_bindgen
.
gni
-
2
14
+
2
14
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_bindgen_generator
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen_generator
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
if
(
is_win
)
{
-
import
(
"
/
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
}
_bindgen_path
=
"
{
rust_bindgen_root
}
/
bin
/
bindgen
"
-
96
7
+
96
7
template
(
"
rust_bindgen
"
)
{
"
cpp
"
]
)
-
crate_root
=
"
/
/
build
/
rust
/
bindings
.
rs
"
+
crate_root
=
"
/
/
chromium
/
build
/
rust
/
bindings
.
rs
"
sources
=
[
crate_root
]
bindgen_deps
=
[
"
:
_rust_bindgen_generator_name
"
]
allow_unsafe
=
true
diff
-
-
git
a
/
rust
/
rust_bindgen_generator
.
gni
b
/
rust
/
rust_bindgen_generator
.
gni
index
c91916be9
.
.
9ba22a3b6
100644
-
-
-
a
/
rust
/
rust_bindgen_generator
.
gni
+
+
+
b
/
rust
/
rust_bindgen_generator
.
gni
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
if
(
is_win
)
{
-
import
(
"
/
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
}
_bindgen_path
=
"
{
rust_bindgen_root
}
/
bin
/
bindgen
"
-
130
12
+
130
12
template
(
"
rust_bindgen_generator
"
)
{
output_file
=
"
output_dir
/
{
output_name
}
.
rs
"
-
script
=
rebase_path
(
"
/
/
build
/
rust
/
run_bindgen
.
py
"
)
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
run_bindgen
.
py
"
)
inputs
=
[
_bindgen_path
-
"
/
/
build
/
action_helpers
.
py
"
-
"
/
/
build
/
gn_helpers
.
py
"
-
"
/
/
build
/
rust
/
filter_clang_args
.
py
"
+
"
/
/
chromium
/
build
/
action_helpers
.
py
"
+
"
/
/
chromium
/
build
/
gn_helpers
.
py
"
+
"
/
/
chromium
/
build
/
rust
/
filter_clang_args
.
py
"
]
depfile
=
"
target_out_dir
/
{
target_name
}
.
d
"
diff
-
-
git
a
/
rust
/
rust_executable
.
gni
b
/
rust
/
rust_executable
.
gni
index
a1f38fdb2
.
.
2d3762f25
100644
-
-
-
a
/
rust
/
rust_executable
.
gni
+
+
+
b
/
rust
/
rust_executable
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
Rust
executable
.
#
diff
-
-
git
a
/
rust
/
rust_macro
.
gni
b
/
rust
/
rust_macro
.
gni
index
bcbb30ed4
.
.
d8146bf02
100644
-
-
-
a
/
rust
/
rust_macro
.
gni
+
+
+
b
/
rust
/
rust_macro
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Template
for
generating
a
Rust
proc
-
macro
library
.
Such
targets
produce
a
#
dynamic
library
that
is
loaded
during
compilation
and
used
to
generate
Rust
diff
-
-
git
a
/
rust
/
rust_shared_library
.
gni
b
/
rust
/
rust_shared_library
.
gni
index
e1358c5f2
.
.
24ad752ca
100644
-
-
-
a
/
rust
/
rust_shared_library
.
gni
+
+
+
b
/
rust
/
rust_shared_library
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Rust
dylibs
should
not
be
built
outside
of
component
builds
.
Non
-
component
#
builds
use
build
configurations
that
conflict
with
the
linking
of
dylibs
.
diff
-
-
git
a
/
rust
/
rust_static_library
.
gni
b
/
rust
/
rust_static_library
.
gni
index
f60ea6ab6
.
.
dc498c196
100644
-
-
-
a
/
rust
/
rust_static_library
.
gni
+
+
+
b
/
rust
/
rust_static_library
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
Rust
static
library
which
can
be
used
by
downstream
Rust
or
C
+
+
#
targets
.
This
is
a
single
Rust
compilation
unit
consisting
of
potentially
-
208
7
+
208
7
template
(
"
rust_static_library
"
)
{
}
}
_all_dependent_configs
+
=
[
"
:
{
target_name
}
_alwayslink
"
]
-
_configs
+
=
[
"
/
/
build
/
rust
:
is_gtest_unittests
"
]
+
_configs
+
=
[
"
/
/
chromium
/
build
/
rust
:
is_gtest_unittests
"
]
}
rust_target
(
_target_name
)
{
diff
-
-
git
a
/
rust
/
rust_target
.
gni
b
/
rust
/
rust_target
.
gni
index
1a2f96337
.
.
c296dd62d
100644
-
-
-
a
/
rust
/
rust_target
.
gni
+
+
+
b
/
rust
/
rust_target
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_test
.
gni
"
)
#
The
/
/
build
directory
is
re
-
used
for
non
-
Chromium
projects
.
Do
not
support
#
cxx
bindings
in
such
contexts
by
default
because
/
/
third_party
may
be
-
142
13
+
142
13
template
(
"
rust_target
"
)
{
}
assert
(
!
defined
(
configs
)
)
-
_configs
=
[
"
/
/
build
/
rust
:
edition_
{
_edition
}
"
]
+
_configs
=
[
"
/
/
chromium
/
build
/
rust
:
edition_
{
_edition
}
"
]
_test_configs
=
[
]
if
(
invoker
.
target_type
=
=
"
executable
"
)
{
_configs
+
=
invoker
.
executable_configs
}
else
if
(
invoker
.
target_type
=
=
"
rust_proc_macro
"
)
{
_configs
+
=
invoker
.
proc_macro_configs
-
_test_configs
+
=
[
"
/
/
build
/
rust
:
proc_macro_extern
"
]
+
_test_configs
+
=
[
"
/
/
chromium
/
build
/
rust
:
proc_macro_extern
"
]
}
else
if
(
invoker
.
target_type
=
=
"
shared_library
"
)
{
_configs
+
=
invoker
.
shared_library_configs
}
else
{
-
289
11
+
289
11
template
(
"
rust_target
"
)
{
#
implementation
of
these
types
are
provided
in
the
cxx_cppdeps
target
.
#
The
C
+
+
targets
depending
on
this
Rust
target
need
the
headers
while
#
the
Rust
target
needs
the
implementation
.
-
"
/
/
build
/
rust
:
cxx_cppdeps
"
+
"
/
/
chromium
/
build
/
rust
:
cxx_cppdeps
"
]
_cxx_generated_deps_for_rust
=
[
#
The
implementation
of
the
Cxx
library
needs
to
be
in
the
Rust
target
.
-
"
/
/
build
/
rust
:
cxx_cppdeps
"
+
"
/
/
chromium
/
build
/
rust
:
cxx_cppdeps
"
]
}
-
325
18
+
325
18
template
(
"
rust_target
"
)
{
#
no_chromium_prelude
.
if
(
!
defined
(
invoker
.
no_chromium_prelude
)
|
|
!
invoker
.
no_chromium_prelude
)
{
if
(
enable_chromium_prelude
)
{
-
_rust_deps
+
=
[
"
/
/
build
/
rust
/
chromium_prelude
"
]
+
_rust_deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
"
]
}
}
if
(
_cxx_bindings
!
=
[
]
)
{
#
The
Rust
target
(
and
unit
tests
)
need
the
Cxx
crate
when
using
it
to
#
generate
bindings
.
-
_rust_deps
+
=
[
"
/
/
build
/
rust
:
cxx_rustdeps
"
]
+
_rust_deps
+
=
[
"
/
/
chromium
/
build
/
rust
:
cxx_rustdeps
"
]
}
if
(
!
defined
(
invoker
.
no_std
)
|
|
!
invoker
.
no_std
)
{
-
_rust_deps
+
=
[
"
/
/
build
/
rust
/
std
"
]
+
_rust_deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
std
"
]
}
if
(
_build_unit_tests
)
{
-
379
7
+
379
7
template
(
"
rust_target
"
)
{
rustenv
=
_rustenv
if
(
!
_allow_unsafe
)
{
-
configs
+
=
[
"
/
/
build
/
rust
:
forbid_unsafe
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
rust
:
forbid_unsafe
"
]
}
}
}
else
{
-
470
7
+
470
7
template
(
"
rust_target
"
)
{
}
if
(
!
_allow_unsafe
)
{
-
configs
+
=
[
"
/
/
build
/
rust
:
forbid_unsafe
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
rust
:
forbid_unsafe
"
]
}
}
diff
-
-
git
a
/
rust
/
rust_unit_test
.
gni
b
/
rust
/
rust_unit_test
.
gni
index
be2bbeb4a
.
.
fd600b966
100644
-
-
-
a
/
rust
/
rust_unit_test
.
gni
+
+
+
b
/
rust
/
rust_unit_test
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
#
Defines
a
Rust
unit
test
.
#
-
63
7
+
63
7
template
(
"
rust_unit_test
"
)
{
if
(
defined
(
invoker
.
edition
)
)
{
_edition
=
invoker
.
edition
}
-
_configs
+
=
[
"
/
/
build
/
rust
:
edition_
{
_edition
}
"
]
+
_configs
+
=
[
"
/
/
chromium
/
build
/
rust
:
edition_
{
_edition
}
"
]
#
We
require
that
all
source
files
are
listed
even
though
this
is
#
not
a
requirement
for
rustc
.
The
reason
is
to
ensure
that
tools
-
132
7
+
132
7
template
(
"
rust_unit_test
"
)
{
}
if
(
!
defined
(
invoker
.
no_chromium_prelude
)
|
|
!
invoker
.
no_chromium_prelude
)
{
if
(
enable_chromium_prelude
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
chromium_prelude
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
"
]
}
}
}
diff
-
-
git
a
/
rust
/
std
/
BUILD
.
gn
b
/
rust
/
std
/
BUILD
.
gn
index
6b996aa1f
.
.
5442b54c4
100644
-
-
-
a
/
rust
/
std
/
BUILD
.
gn
+
+
+
b
/
rust
/
std
/
BUILD
.
gn
-
15
11
+
15
11
#
allocator
functions
to
PartitionAlloc
when
use_partition_alloc_as_malloc
is
#
true
so
that
Rust
and
C
+
+
use
the
same
allocator
backend
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
rust_allocator_uses_partition_alloc
=
false
if
(
build_with_chromium
)
{
diff
-
-
git
a
/
rust
/
std
/
BUILD
.
gn
.
hbs
b
/
rust
/
std
/
BUILD
.
gn
.
hbs
index
40e1f202c
.
.
093467a53
100644
-
-
-
a
/
rust
/
std
/
BUILD
.
gn
.
hbs
+
+
+
b
/
rust
/
std
/
BUILD
.
gn
.
hbs
-
4
7
+
4
7
#
generated
from
build
/
rust
/
std
/
BUILD
.
gn
.
hbs
by
tools
/
crates
/
gnrt
.
Do
not
edit
!
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
{
{
#
each
rules
}
}
{
{
#
with
this
.
detail
}
}
-
35
38
+
35
38
cargo_crate
(
"
{
{
.
.
/
name
}
}
"
)
{
cargo_pkg_description
=
"
{
{
gn_escape
this
}
}
"
{
{
/
with
}
}
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
{
{
#
each
remove_library_configs
}
}
"
{
{
this
}
}
"
{
{
/
each
}
}
{
{
#
unless
extra_kv
.
include_coverage
}
}
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
{
{
/
unless
}
}
]
library_configs
+
=
[
-
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
{
{
#
if
extra_kv
.
immediate_abort
}
}
-
"
/
/
build
/
rust
:
panic_immediate_abort
"
+
"
/
/
chromium
/
build
/
rust
:
panic_immediate_abort
"
{
{
/
if
}
}
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
{
{
#
each
remove_executable_configs
}
}
"
{
{
this
}
}
"
{
{
/
each
}
}
]
executable_configs
+
=
[
-
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
{
{
#
each
add_executable_configs
}
}
"
{
{
this
}
}
"
{
{
/
each
}
}
]
deps
=
[
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
{
{
#
if
extra_kv
.
include_coverage
}
}
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
{
{
/
if
}
}
{
{
#
unless
deps
}
}
]
diff
-
-
git
a
/
rust
/
std
/
rules
/
BUILD
.
gn
b
/
rust
/
std
/
rules
/
BUILD
.
gn
index
6a8234310
.
.
d5f8efac4
100644
-
-
-
a
/
rust
/
std
/
rules
/
BUILD
.
gn
+
+
+
b
/
rust
/
std
/
rules
/
BUILD
.
gn
-
4
7
+
4
7
#
generated
from
build
/
rust
/
std
/
BUILD
.
gn
.
hbs
by
tools
/
crates
/
gnrt
.
Do
not
edit
!
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
addr2line
"
)
{
crate_type
=
"
rlib
"
-
31
22
+
31
22
cargo_crate
(
"
addr2line
"
)
{
cargo_pkg_description
=
"
A
cross
-
platform
symbolication
library
written
in
Rust
using
gimli
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
gimli
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
alloc
=
"
:
rustc_std_workspace_alloc
"
-
89
20
+
89
20
cargo_crate
(
"
adler2
"
)
{
cargo_pkg_description
=
"
A
simple
clean
-
room
implementation
of
the
Adler
-
32
checksum
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
209
20
+
209
20
cargo_crate
(
"
alloc
"
)
{
cargo_pkg_name
=
"
alloc
"
cargo_pkg_description
=
"
The
Rust
core
allocation
and
collections
library
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
-
251
20
+
251
20
cargo_crate
(
"
cfg_if
"
)
{
cargo_pkg_name
=
"
cfg
-
if
"
cargo_pkg_description
=
"
A
macro
to
ergonomically
define
an
item
depending
on
a
large
number
of
#
[
cfg
]
parameters
.
Structured
like
an
if
-
else
chain
the
first
matching
branch
is
the
item
that
gets
emitted
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
518
19
+
518
19
cargo_crate
(
"
compiler_builtins
"
)
{
cargo_pkg_name
=
"
compiler_builtins
"
cargo_pkg_description
=
"
Compiler
intrinsics
used
by
the
Rust
compiler
.
Also
available
for
other
targets
if
necessary
!
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
1062
20
+
1062
20
cargo_crate
(
"
core
"
)
{
cargo_pkg_name
=
"
core
"
cargo_pkg_description
=
"
The
Rust
Core
Library
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
library_configs
+
=
[
-
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
-
"
/
/
build
/
rust
:
panic_immediate_abort
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
+
"
/
/
chromium
/
build
/
rust
:
panic_immediate_abort
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
-
deps
=
[
"
/
/
build
/
rust
/
std
:
std_build_deps
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
"
STD_ENV_ARCH
=
rust_target_arch
"
-
1106
21
+
1106
21
cargo_crate
(
"
getopts
"
)
{
cargo_pkg_name
=
"
getopts
"
cargo_pkg_description
=
"
getopts
-
like
option
parsing
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
rustc_std_workspace_core
"
"
:
rustc_std_workspace_std
"
"
:
unicode_width
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
1203
21
+
1203
21
cargo_crate
(
"
gimli
"
)
{
cargo_pkg_description
=
"
A
library
for
reading
and
writing
the
DWARF
debugging
format
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
alloc
=
"
:
rustc_std_workspace_alloc
"
-
1282
21
+
1282
21
cargo_crate
(
"
hashbrown
"
)
{
cargo_pkg_name
=
"
hashbrown
"
cargo_pkg_description
=
"
A
Rust
port
of
Google
'
s
SwissTable
hash
map
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
alloc
=
"
:
rustc_std_workspace_alloc
"
-
1519
19
+
1519
19
cargo_crate
(
"
libc
"
)
{
cargo_pkg_name
=
"
libc
"
cargo_pkg_description
=
"
Raw
FFI
bindings
to
platform
libraries
like
libc
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
features
=
[
"
align
"
-
1613
20
+
1613
20
cargo_crate
(
"
memchr
"
)
{
cargo_pkg_name
=
"
memchr
"
cargo_pkg_description
=
"
Provides
extremely
fast
(
uses
SIMD
on
x86_64
aarch64
and
wasm32
)
routines
for
1
2
or
3
byte
search
and
single
substring
search
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
1676
22
+
1676
22
cargo_crate
(
"
miniz_oxide
"
)
{
cargo_pkg_name
=
"
miniz_oxide
"
cargo_pkg_description
=
"
DEFLATE
compression
and
decompression
library
rewritten
in
Rust
based
on
miniz
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
adler2
"
"
:
compiler_builtins
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
alloc
=
"
:
rustc_std_workspace_alloc
"
-
1811
22
+
1811
22
cargo_crate
(
"
object
"
)
{
cargo_pkg_description
=
"
A
unified
interface
for
reading
and
writing
object
file
formats
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
memchr
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
alloc
=
"
:
rustc_std_workspace_alloc
"
-
1878
22
+
1878
22
cargo_crate
(
"
panic_abort
"
)
{
cargo_pkg_name
=
"
panic_abort
"
cargo_pkg_description
=
"
Implementation
of
Rust
panics
via
process
aborts
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
alloc
"
"
:
cfg_if
"
"
:
compiler_builtins
"
"
:
core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
"
:
libc
"
]
-
1932
23
+
1932
23
cargo_crate
(
"
panic_unwind
"
)
{
cargo_pkg_name
=
"
panic_unwind
"
cargo_pkg_description
=
"
Implementation
of
Rust
panics
via
stack
unwinding
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
alloc
"
"
:
cfg_if
"
"
:
compiler_builtins
"
"
:
core
"
"
:
unwind
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
"
:
libc
"
]
-
1995
20
+
1995
20
cargo_crate
(
"
proc_macro
"
)
{
cargo_pkg_version
=
"
0
.
0
.
0
"
cargo_pkg_name
=
"
proc_macro
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
core
"
"
:
std
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
-
2035
17
+
2035
17
cargo_crate
(
"
profiler_builtins
"
)
{
cargo_pkg_version
=
"
0
.
0
.
0
"
cargo_pkg_name
=
"
profiler_builtins
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
-
deps
=
[
"
/
/
build
/
rust
/
std
:
std_build_deps
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
"
STD_ENV_ARCH
=
rust_target_arch
"
-
2077
20
+
2077
20
cargo_crate
(
"
rustc_demangle
"
)
{
cargo_pkg_name
=
"
rustc
-
demangle
"
cargo_pkg_description
=
"
Rust
compiler
symbol
demangling
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
2126
19
+
2126
19
cargo_crate
(
"
rustc_std_workspace_alloc
"
)
{
cargo_pkg_name
=
"
rustc
-
std
-
workspace
-
alloc
"
cargo_pkg_description
=
"
Hack
for
the
compiler
'
s
own
build
system
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
alloc
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
-
2166
19
+
2166
19
cargo_crate
(
"
rustc_std_workspace_core
"
)
{
cargo_pkg_name
=
"
rustc
-
std
-
workspace
-
core
"
cargo_pkg_description
=
"
Hack
for
the
compiler
'
s
own
build
system
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
core
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
-
2206
19
+
2206
19
cargo_crate
(
"
rustc_std_workspace_std
"
)
{
cargo_pkg_name
=
"
rustc
-
std
-
workspace
-
std
"
cargo_pkg_description
=
"
Hack
for
the
compiler
'
s
own
build
system
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
std
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
-
2890
18
+
2890
18
cargo_crate
(
"
std
"
)
{
cargo_pkg_name
=
"
std
"
cargo_pkg_description
=
"
The
Rust
Standard
Library
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
library_configs
+
=
[
-
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
-
"
/
/
build
/
rust
:
panic_immediate_abort
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
+
"
/
/
chromium
/
build
/
rust
:
panic_immediate_abort
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
alloc
"
"
:
cfg_if
"
-
2913
8
+
2913
8
cargo_crate
(
"
std
"
)
{
"
:
rustc_demangle
"
"
:
std_detect
"
"
:
unwind
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
-
3007
22
+
3007
22
cargo_crate
(
"
std_detect
"
)
{
cargo_pkg_description
=
"
std
:
:
detect
-
Rust
'
s
standard
library
run
-
time
CPU
feature
detection
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
cfg_if
"
"
:
compiler_builtins
"
"
:
rustc_std_workspace_alloc
"
"
:
rustc_std_workspace_core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
"
:
libc
"
]
-
3065
22
+
3065
22
cargo_crate
(
"
sysroot
"
)
{
cargo_pkg_version
=
"
0
.
0
.
0
"
cargo_pkg_name
=
"
sysroot
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
proc_macro
"
"
:
profiler_builtins
"
"
:
std
"
"
:
test
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
features
=
[
"
backtrace
"
-
3145
21
+
3145
21
cargo_crate
(
"
test
"
)
{
cargo_pkg_version
=
"
0
.
0
.
0
"
cargo_pkg_name
=
"
test
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
core
"
"
:
getopts
"
"
:
std
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
"
:
libc
"
]
-
3195
21
+
3195
21
cargo_crate
(
"
unicode_width
"
)
{
cargo_pkg_name
=
"
unicode
-
width
"
cargo_pkg_description
=
"
Determine
displayed
width
of
char
and
str
types
according
to
Unicode
Standard
Annex
#
11
rules
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
compiler_builtins
"
"
:
rustc_std_workspace_core
"
"
:
rustc_std_workspace_std
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
aliased_deps
=
{
core
=
"
:
rustc_std_workspace_core
"
-
3252
21
+
3252
21
cargo_crate
(
"
unwind
"
)
{
cargo_pkg_version
=
"
0
.
0
.
0
"
cargo_pkg_name
=
"
unwind
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
deps
=
[
"
:
cfg_if
"
"
:
compiler_builtins
"
"
:
core
"
-
"
/
/
build
/
rust
/
std
:
profiler_builtins_group
"
-
"
/
/
build
/
rust
/
std
:
std_build_deps
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
profiler_builtins_group
"
+
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
if
(
!
is_win
)
{
deps
+
=
[
"
:
libc
"
]
-
3298
17
+
3298
17
cargo_crate
(
"
windows_targets
"
)
{
cargo_pkg_name
=
"
windows
-
targets
"
cargo_pkg_description
=
"
A
drop
-
in
replacement
for
the
real
windows
-
targets
crate
for
use
in
std
only
.
"
library_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
-
=
[
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
disallow_unstable_features
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
disallow_unstable_features
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
-
deps
=
[
"
/
/
build
/
rust
/
std
:
std_build_deps
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
std
:
std_build_deps
"
]
rustenv
=
[
"
CFG_DISABLE_UNSTABLE_FEATURES
=
0
"
"
STD_ENV_ARCH
=
rust_target_arch
"
diff
-
-
git
a
/
rust
/
tests
/
BUILD
.
gn
b
/
rust
/
tests
/
BUILD
.
gn
index
5a2c262e0
.
.
102bffd05
100644
-
-
-
a
/
rust
/
tests
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
#
Build
some
minimal
binaries
to
exercise
the
Rust
toolchain
#
only
if
that
toolchain
is
enabled
in
gn
args
.
-
23
21
+
23
21
group
(
"
deps
"
)
{
#
All
the
rest
require
Rust
.
if
(
toolchain_has_rust
)
{
deps
+
=
[
-
"
/
/
build
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
"
-
"
/
/
build
/
rust
/
tests
/
bindgen_static_fns_test
"
-
"
/
/
build
/
rust
/
tests
/
bindgen_test
"
-
"
/
/
build
/
rust
/
tests
/
test_aliased_deps
"
-
"
/
/
build
/
rust
/
tests
/
test_aliased_deps
:
test_aliased_deps_exe
"
-
"
/
/
build
/
rust
/
tests
/
test_bin_crate
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
target2
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
test_rlib_crate_associated_bin
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate_testonly
:
testonly_target
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_exe_2
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_cc_exe
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_exe
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
"
-
"
/
/
build
/
rust
/
tests
/
test_simple_rust_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_static_fns_test
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_test
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_aliased_deps
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_aliased_deps
:
test_aliased_deps_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_bin_crate
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
target2
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
test_rlib_crate_associated_bin
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate_testonly
:
testonly_target
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_exe_2
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_cc_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_simple_rust_exe
"
#
TODO
(
crbug
.
com
/
40226863
)
:
Enable
the
additional
target
below
#
once
rs_bindings_from_cc
is
distributed
via
gclient
sync
.
In
the
-
51
44
+
51
44
group
(
"
deps
"
)
{
#
selection
below
is
_loosely_
based
on
is_valid_x86_target
from
#
the
top
-
level
/
/
BUILD
.
gn
.
if
(
is_win
|
|
is_android
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_build_rs_target_arch_x86
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_build_rs_target_arch_x86
"
]
}
}
if
(
!
(
is_apple
&
&
is_official_build
)
)
{
#
TODO
:
crbug
.
com
/
372055517
-
Apple
lld
has
an
ordering
dependency
bug
#
when
LTO
is
enabled
and
this
particular
build
target
runs
into
that
.
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
bindgen_cpp_test
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_cpp_test
"
]
}
if
(
enable_chromium_prelude
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
chromium_prelude
:
import_test
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
chromium_prelude
:
import_test
"
]
}
if
(
enable_rust_cxx
)
{
deps
+
=
[
-
"
/
/
build
/
rust
/
tests
/
test_cpp_including_rust
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_calling_cpp
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_exe
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_cpp_including_rust
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_calling_cpp
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_exe
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
]
}
if
(
build_with_chromium
)
{
#
This
tests
integration
with
a
3p
library
that
downstream
projects
#
don
'
t
need
to
have
.
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_serde_json_lenient
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_serde_json_lenient
"
]
}
if
(
can_build_rust_unit_tests
)
{
deps
+
=
[
-
"
/
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
bindgen_static_fns_test_lib_unittests
"
-
"
/
/
build
/
rust
/
tests
/
bindgen_test
:
bindgen_test_lib_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_aliased_deps
:
test_aliased_deps_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1_test_rlib_crate_v0_2_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
target2_test_rlib_crate_v0_2_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib_v1_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib_v2_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
foo_tests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
bindgen_static_fns_test_lib_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_test
:
bindgen_test_lib_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_aliased_deps
:
test_aliased_deps_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1_test_rlib_crate_v0_2_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
target2_test_rlib_crate_v0_2_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
test_rust_metadata_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib_v1_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib_v2_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
foo_tests
"
#
TODO
(
crbug
.
com
/
40226863
)
:
Enable
the
additional
target
below
#
once
rs_bindings_from_cc
is
distributed
via
gclient
sync
.
In
the
-
99
10
+
99
10
group
(
"
deps
"
)
{
if
(
enable_rust_cxx
)
{
deps
+
=
[
-
"
/
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
test_cpp_including_rust_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_exe
:
test_rust_exe_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
test_cpp_including_rust_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_exe
:
test_rust_exe_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_unittests
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_unittests
"
]
}
}
-
111
21
+
111
21
group
(
"
deps
"
)
{
#
are
incompatible
with
shared
library
compilation
in
non
-
component
builds
#
(
such
as
code
coverage
https
:
/
/
crbug
.
com
/
1457533
)
.
if
(
is_component_build
&
&
enable_rust_cxx
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_rust_shared_library
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_shared_library
"
]
if
(
can_build_rust_unit_tests
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
test_cpp_including_rust_dylib_unittests
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
test_cpp_including_rust_dylib_unittests
"
]
#
TODO
(
crbug
.
com
/
40266882
)
:
The
shared
library
unittest
EXE
ends
up
#
requiring
the
DLL
to
run
even
though
it
does
not
use
the
DLL
.
if
(
!
is_win
&
&
!
is_mac
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_rust_shared_library
:
test_rust_shared_library_unittests
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_shared_library
:
test_rust_shared_library_unittests
"
]
}
}
}
if
(
is_win
)
{
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
windows_sys_test
"
]
-
deps
+
=
[
"
/
/
build
/
rust
/
tests
/
test_control_flow_guard
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
windows_sys_test
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_control_flow_guard
"
]
}
}
}
diff
-
-
git
a
/
rust
/
tests
/
bindgen_cpp_test
/
BUILD
.
gn
b
/
rust
/
tests
/
bindgen_cpp_test
/
BUILD
.
gn
index
8532fbed0
.
.
2a98ca2ae
100644
-
-
-
a
/
rust
/
tests
/
bindgen_cpp_test
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
bindgen_cpp_test
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_bindgen
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
source_set
(
"
cpp_lib
"
)
{
sources
=
[
diff
-
-
git
a
/
rust
/
tests
/
bindgen_cpp_test
/
main
.
rs
b
/
rust
/
tests
/
bindgen_cpp_test
/
main
.
rs
index
66a37572e
.
.
9b2cd5838
100644
-
-
-
a
/
rust
/
tests
/
bindgen_cpp_test
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_cpp_test
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_cpp_test
:
cpp_lib_bindgen
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_cpp_test
:
cpp_lib_bindgen
"
;
}
pub
fn
main
(
)
{
diff
-
-
git
a
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
BUILD
.
gn
b
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
BUILD
.
gn
index
130d2ae33
.
.
d1fee00dd
100644
-
-
-
a
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_bindgen
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
source_set
(
"
cpp_lib
"
)
{
sources
=
[
diff
-
-
git
a
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
lib
.
rs
b
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
lib
.
rs
index
25d80df65
.
.
3561ebbae
100644
-
-
-
a
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
lib
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
/
lib
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
:
cpp_lib_bindgen
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_cpp_test_with_cpp_linkage
:
cpp_lib_bindgen
"
;
}
#
[
no_mangle
]
diff
-
-
git
a
/
rust
/
tests
/
bindgen_static_fns_test
/
BUILD
.
gn
b
/
rust
/
tests
/
bindgen_static_fns_test
/
BUILD
.
gn
index
a07f1add6
.
.
47bd590cb
100644
-
-
-
a
/
rust
/
tests
/
bindgen_static_fns_test
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
bindgen_static_fns_test
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_bindgen
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
source_set
(
"
c_lib_headers
"
)
{
sources
=
[
"
lib
.
h
"
]
diff
-
-
git
a
/
rust
/
tests
/
bindgen_static_fns_test
/
main
.
rs
b
/
rust
/
tests
/
bindgen_static_fns_test
/
main
.
rs
index
3258345eb
.
.
497c73bbf
100644
-
-
-
a
/
rust
/
tests
/
bindgen_static_fns_test
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_static_fns_test
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
bindgen_static_fns_test_lib
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
bindgen_static_fns_test_lib
"
;
}
use
bindgen_static_fns_test_lib
:
:
mul_three_numbers_in_c
;
diff
-
-
git
a
/
rust
/
tests
/
bindgen_static_fns_test
/
src
/
lib
.
rs
b
/
rust
/
tests
/
bindgen_static_fns_test
/
src
/
lib
.
rs
index
267509f72
.
.
041b56c03
100644
-
-
-
a
/
rust
/
tests
/
bindgen_static_fns_test
/
src
/
lib
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_static_fns_test
/
src
/
lib
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
c_lib_bindgen
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_static_fns_test
:
c_lib_bindgen
"
;
}
pub
fn
mul_three_numbers_in_c
(
a
:
u32
b
:
u32
c
:
u32
)
-
>
u32
{
diff
-
-
git
a
/
rust
/
tests
/
bindgen_test
/
BUILD
.
gn
b
/
rust
/
tests
/
bindgen_test
/
BUILD
.
gn
index
ab1b9f39e
.
.
523c26335
100644
-
-
-
a
/
rust
/
tests
/
bindgen_test
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
bindgen_test
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_bindgen
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
source_set
(
"
c_lib_headers
"
)
{
sources
=
[
diff
-
-
git
a
/
rust
/
tests
/
bindgen_test
/
main
.
rs
b
/
rust
/
tests
/
bindgen_test
/
main
.
rs
index
0e30fa6c9
.
.
f63253ae1
100644
-
-
-
a
/
rust
/
tests
/
bindgen_test
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_test
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_test
:
bindgen_test_lib
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_test
:
bindgen_test_lib
"
;
}
use
bindgen_test_lib
:
:
add_two_numbers_in_c
;
diff
-
-
git
a
/
rust
/
tests
/
bindgen_test
/
src
/
lib
.
rs
b
/
rust
/
tests
/
bindgen_test
/
src
/
lib
.
rs
index
bd6ffafe6
.
.
9e51791be
100644
-
-
-
a
/
rust
/
tests
/
bindgen_test
/
src
/
lib
.
rs
+
+
+
b
/
rust
/
tests
/
bindgen_test
/
src
/
lib
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
bindgen_test
:
c_lib_bindgen
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
bindgen_test
:
c_lib_bindgen
"
;
}
pub
fn
add_two_numbers_in_c
(
a
:
u32
b
:
u32
)
-
>
u32
{
diff
-
-
git
a
/
rust
/
tests
/
test_aliased_deps
/
BUILD
.
gn
b
/
rust
/
tests
/
test_aliased_deps
/
BUILD
.
gn
index
98deeb01f
.
.
e9c88e328
100644
-
-
-
a
/
rust
/
tests
/
test_aliased_deps
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_aliased_deps
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_executable
(
"
test_aliased_deps_exe
"
)
{
crate_root
=
"
main
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_aliased_deps
/
main
.
rs
b
/
rust
/
tests
/
test_aliased_deps
/
main
.
rs
index
2d66598cf
.
.
05f7ecc2a
100644
-
-
-
a
/
rust
/
tests
/
test_aliased_deps
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
test_aliased_deps
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_aliased_deps
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_aliased_deps
"
;
}
fn
main
(
)
{
diff
-
-
git
a
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
index
835029cb7
.
.
1c6dd5505
100644
-
-
-
a
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_bin_crate
"
)
{
crate_type
=
"
bin
"
diff
-
-
git
a
/
rust
/
tests
/
test_build_rs_target_arch_x86
/
BUILD
.
gn
b
/
rust
/
tests
/
test_build_rs_target_arch_x86
/
BUILD
.
gn
index
72d34a7cd
.
.
66ae3aa91
100644
-
-
-
a
/
rust
/
tests
/
test_build_rs_target_arch_x86
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_build_rs_target_arch_x86
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_build_rs_target_arch_x86
"
)
{
crate_name
=
"
test_build_rs_target_arch_x86
"
diff
-
-
git
a
/
rust
/
tests
/
test_control_flow_guard
/
BUILD
.
gn
b
/
rust
/
tests
/
test_control_flow_guard
/
BUILD
.
gn
index
33401219f
.
.
8396f0356
100644
-
-
-
a
/
rust
/
tests
/
test_control_flow_guard
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_control_flow_guard
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
rust_executable
(
"
test_control_flow_guard
"
)
{
allow_unsafe
=
true
diff
-
-
git
a
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
b
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
index
3e974fc4a
.
.
9a0d98d07
100644
-
-
-
a
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
-
7
7
+
7
7
import
(
"
/
/
testing
/
test
.
gni
"
)
executable
(
"
test_cpp_including_rust
"
)
{
sources
=
[
"
main
.
cc
"
]
-
deps
=
[
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
]
}
test
(
"
test_cpp_including_rust_unittests
"
)
{
-
16
7
+
16
7
test
(
"
test_cpp_including_rust_unittests
"
)
{
"
/
/
base
"
"
/
/
base
/
allocator
:
buildflags
"
"
/
/
base
/
test
:
run_all_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
"
/
/
testing
/
gmock
"
"
/
/
testing
/
gtest
"
]
-
29
7
+
29
7
if
(
is_component_build
)
{
"
/
/
base
"
"
/
/
base
/
allocator
:
buildflags
"
"
/
/
base
/
test
:
run_all_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_shared_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_shared_library
"
"
/
/
testing
/
gmock
"
"
/
/
testing
/
gtest
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
index
c9b56a423
.
.
313b8fd8c
100644
-
-
-
a
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_proc_macro_crate
"
)
{
crate_root
=
"
crate
/
src
/
lib
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_proc_macro_crate_2
/
BUILD
.
gn
b
/
rust
/
tests
/
test_proc_macro_crate_2
/
BUILD
.
gn
index
30d1c75b9
.
.
6a77e853f
100644
-
-
-
a
/
rust
/
tests
/
test_proc_macro_crate_2
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_proc_macro_crate_2
/
BUILD
.
gn
-
4
7
+
4
7
#
Test
another
proc
macro
crate
of
the
same
name
but
different
epoch
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_proc_macro_crate
"
)
{
crate_root
=
"
crate
/
src
/
lib
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
index
953cebb24
.
.
238b4103f
100644
-
-
-
a
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
target1
"
)
{
crate_name
=
"
test_rlib_crate
"
diff
-
-
git
a
/
rust
/
tests
/
test_rlib_crate_testonly
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rlib_crate_testonly
/
BUILD
.
gn
index
d24670287
.
.
3c680d845
100644
-
-
-
a
/
rust
/
tests
/
test_rlib_crate_testonly
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rlib_crate_testonly
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
testonly_target
"
)
{
testonly
=
true
diff
-
-
git
a
/
rust
/
tests
/
test_rs_bindings_from_cc
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rs_bindings_from_cc
/
BUILD
.
gn
index
09830f747
.
.
1293051a4
100644
-
-
-
a
/
rust
/
tests
/
test_rs_bindings_from_cc
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rs_bindings_from_cc
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rs_bindings_from_cc
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rs_bindings_from_cc
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
rust_executable
(
"
test_rs_bindings_from_cc
"
)
{
crate_root
=
"
main
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_calling_cpp
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_calling_cpp
/
BUILD
.
gn
index
9fdfcd478
.
.
6d8057241
100644
-
-
-
a
/
rust
/
tests
/
test_rust_calling_cpp
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_calling_cpp
/
BUILD
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
static_library
(
"
cpp_library
"
)
{
sources
=
[
diff
-
-
git
a
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
index
cd8f4a5e0
.
.
86d035506
100644
-
-
-
a
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
-
2
16
+
2
16
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
rust_executable
(
"
test_rust_exe
"
)
{
crate_root
=
"
main
.
rs
"
sources
=
[
"
main
.
rs
"
]
deps
=
[
-
"
/
/
build
/
rust
/
tests
/
test_proc_macro_crate
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
lib
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_proc_macro_crate
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
:
target1
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
lib
"
]
build_native_rust_unit_tests
=
true
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_exe
/
main
.
rs
b
/
rust
/
tests
/
test_rust_exe
/
main
.
rs
index
ed6cd073e
.
.
ddc83a8a7
100644
-
-
-
a
/
rust
/
tests
/
test_rust_exe
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_exe
/
main
.
rs
-
3
8
+
3
8
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
;
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
lib
"
as
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
:
lib
"
as
test_rust_static_library_non_standard_arrangement
;
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_exe_2
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_exe_2
/
BUILD
.
gn
index
31bbacc6a
.
.
d612c4143
100644
-
-
-
a
/
rust
/
tests
/
test_rust_exe_2
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_exe_2
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
rust_executable
(
"
test_rust_exe_2
"
)
{
crate_root
=
"
main
.
rs
"
sources
=
[
"
main
.
rs
"
]
-
deps
=
[
"
/
/
build
/
rust
/
tests
/
test_proc_macro_crate_2
:
test_proc_macro_crate
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_proc_macro_crate_2
:
test_proc_macro_crate
"
]
build_native_rust_unit_tests
=
true
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_metadata
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_metadata
/
BUILD
.
gn
index
2491879a7
.
.
f8e6bba8f
100644
-
-
-
a
/
rust
/
tests
/
test_rust_metadata
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_metadata
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_test
.
gni
"
)
#
This
target
depends
on
two
variants
of
the
same
crate
:
one
directly
and
one
#
transitively
.
With
correct
metadata
handling
this
will
work
.
diff
-
-
git
a
/
rust
/
tests
/
test_rust_metadata
/
lib
.
rs
b
/
rust
/
tests
/
test_rust_metadata
/
lib
.
rs
index
bfe2e1b26
.
.
23cccef66
100644
-
-
-
a
/
rust
/
tests
/
test_rust_metadata
/
lib
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_metadata
/
lib
.
rs
-
12
7
+
12
7
extern
crate
transitive_dep
;
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
foo_dependency
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
foo_dependency
"
;
}
pub
use
foo_dependency
:
:
say_foo
;
diff
-
-
git
a
/
rust
/
tests
/
test_rust_metadata
/
main
.
rs
b
/
rust
/
tests
/
test_rust_metadata
/
main
.
rs
index
451910f03
.
.
579fa74a6
100644
-
-
-
a
/
rust
/
tests
/
test_rust_metadata
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_metadata
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
lib
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
lib
"
;
}
fn
main
(
)
{
diff
-
-
git
a
/
rust
/
tests
/
test_rust_metadata
/
tests
.
rs
b
/
rust
/
tests
/
test_rust_metadata
/
tests
.
rs
index
4dd9199df
.
.
1c442de17
100644
-
-
-
a
/
rust
/
tests
/
test_rust_metadata
/
tests
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_metadata
/
tests
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_metadata
:
lib
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_metadata
:
lib
"
;
}
#
[
test
]
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
index
4ebccae5f
.
.
384bb4a39
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
#
The
exe
depends
on
lib
v1
.
But
it
also
transitively
depends
on
lib
v2
.
#
The
code
in
the
exe
should
use
v1
and
the
code
in
the
transitive
lib
should
-
13
7
+
13
7
rust_executable
(
"
test_rust_multiple_dep_versions_exe
"
)
{
sources
=
[
"
main
.
rs
"
]
deps
=
[
"
:
transitive_v2
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib
"
]
}
-
21
5
+
21
5
rust_static_library
(
"
transitive_v2
"
)
{
crate_root
=
"
transitive_lib
.
rs
"
sources
=
[
"
transitive_lib
.
rs
"
]
deps
=
-
[
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib
"
]
+
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
main
.
rs
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
main
.
rs
index
fdf730dfe
.
.
63d84f204
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
:
transitive_v2
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
:
transitive_v2
"
;
}
/
/
To
mimic
third
-
party
the
test_lib
crate
has
a
short
name
which
does
not
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
index
5532b77ce
.
.
12ddf96d5
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_lib
"
)
{
crate_name
=
"
test_lib
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
index
bda02c537
.
.
9239fe9ce
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_lib
"
)
{
crate_name
=
"
test_lib
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
index
f2396c761
.
.
1ef92d4d3
100644
-
-
-
a
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_shared_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_shared_library
.
gni
"
)
rust_shared_library
(
"
test_rust_shared_library
"
)
{
allow_unsafe
=
true
diff
-
-
git
a
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
index
28a48cbc1
.
.
635137d43
100644
-
-
-
a
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
test_rust_static_library
"
)
{
allow_unsafe
=
true
diff
-
-
git
a
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
index
8f1a6c0e8
.
.
9deb02c25
100644
-
-
-
a
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
lib
"
)
{
sources
=
[
"
foo
.
rs
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
index
bdc1f84a6
.
.
0f4db60a2
100644
-
-
-
a
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_unit_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_test
.
gni
"
)
rust_unit_test
(
"
test_rust_unittests
"
)
{
sources
=
[
"
main
.
rs
"
]
crate_root
=
"
main
.
rs
"
-
deps
=
[
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_unittests
/
main
.
rs
b
/
rust
/
tests
/
test_rust_unittests
/
main
.
rs
index
236a8e7cb
.
.
180bfcf7a
100644
-
-
-
a
/
rust
/
tests
/
test_rust_unittests
/
main
.
rs
+
+
+
b
/
rust
/
tests
/
test_rust_unittests
/
main
.
rs
-
3
7
+
3
7
/
/
found
in
the
LICENSE
file
.
chromium
:
:
import
!
{
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
;
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
;
}
use
test_rust_static_library
:
:
add_two_ints_via_rust
;
diff
-
-
git
a
/
rust
/
tests
/
test_serde_json_lenient
/
BUILD
.
gn
b
/
rust
/
tests
/
test_serde_json_lenient
/
BUILD
.
gn
index
83284dfb3
.
.
2133e17df
100644
-
-
-
a
/
rust
/
tests
/
test_serde_json_lenient
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_serde_json_lenient
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
import
(
"
/
/
testing
/
test
.
gni
"
)
rust_static_library
(
"
test_serde_json_lenient_rs
"
)
{
diff
-
-
git
a
/
rust
/
tests
/
test_simple_rust_exe
/
BUILD
.
gn
b
/
rust
/
tests
/
test_simple_rust_exe
/
BUILD
.
gn
index
9d4dcf71e
.
.
1f1ad06dd
100644
-
-
-
a
/
rust
/
tests
/
test_simple_rust_exe
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_simple_rust_exe
/
BUILD
.
gn
-
9
5
+
9
5
executable
(
"
test_simple_rust_exe
"
)
{
crate_root
=
"
main
.
rs
"
sources
=
[
crate_root
]
-
deps
=
[
"
/
/
build
/
rust
/
std
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
/
std
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
windows_sys_test
/
BUILD
.
gn
b
/
rust
/
tests
/
windows_sys_test
/
BUILD
.
gn
index
a67e0926d
.
.
b7dad1285
100644
-
-
-
a
/
rust
/
tests
/
windows_sys_test
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
windows_sys_test
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_bindgen
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_bindgen
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_executable
(
"
windows_sys_test
"
)
{
allow_unsafe
=
true
#
Calls
FFI
.
diff
-
-
git
a
/
symlink
.
gni
b
/
symlink
.
gni
index
96b917789
.
.
218742b36
100644
-
-
-
a
/
symlink
.
gni
+
+
+
b
/
symlink
.
gni
-
16
7
+
16
7
template
(
"
symlink
"
)
{
"
visibility
"
]
)
outputs
=
[
invoker
.
output
]
-
script
=
"
/
/
build
/
symlink
.
py
"
+
script
=
"
/
/
chromium
/
build
/
symlink
.
py
"
args
=
[
"
-
f
"
rebase_path
(
invoker
.
source
get_path_info
(
invoker
.
output
"
dir
"
)
)
diff
-
-
git
a
/
timestamp
.
gni
b
/
timestamp
.
gni
index
b9b57d9dd
.
.
5c6136174
100644
-
-
-
a
/
timestamp
.
gni
+
+
+
b
/
timestamp
.
gni
-
4
7
+
4
7
#
#
Defines
the
build_timestamp
variable
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
declare_args
(
)
{
#
This
should
be
the
filename
of
a
script
that
prints
a
single
line
diff
-
-
git
a
/
toolchain
/
BUILD
.
gn
b
/
toolchain
/
BUILD
.
gn
index
d3a608e49
.
.
6a38b326d
100644
-
-
-
a
/
toolchain
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
declare_args
(
)
{
#
Pool
for
non
remote
tasks
.
diff
-
-
git
a
/
toolchain
/
aix
/
BUILD
.
gn
b
/
toolchain
/
aix
/
BUILD
.
gn
index
71e4de29b
.
.
1f8132a8d
100644
-
-
-
a
/
toolchain
/
aix
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
aix
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
gcc_toolchain
(
"
ppc64
"
)
{
cc
=
"
gcc
"
diff
-
-
git
a
/
toolchain
/
android
/
BUILD
.
gn
b
/
toolchain
/
android
/
BUILD
.
gn
index
44b94033f
.
.
5bba14cad
100644
-
-
-
a
/
toolchain
/
android
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
android
/
BUILD
.
gn
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
#
Imports
android
/
config
.
gni
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
#
Imports
android
/
config
.
gni
.
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
if
(
build_with_chromium
)
{
import
(
"
/
/
third_party
/
jni_zero
/
jni_zero
.
gni
"
)
}
diff
-
-
git
a
/
toolchain
/
android
/
DIR_METADATA
b
/
toolchain
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
toolchain
/
android
/
DIR_METADATA
+
+
+
b
/
toolchain
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
toolchain
/
apple
/
BUILD
.
gn
b
/
toolchain
/
apple
/
BUILD
.
gn
index
04d592016
.
.
ed81c27b5
100644
-
-
-
a
/
toolchain
/
apple
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
apple
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
declare_args
(
)
{
#
Reduce
the
number
of
tasks
using
the
copy_bundle_data
and
compile_xcassets
diff
-
-
git
a
/
toolchain
/
apple
/
toolchain
.
gni
b
/
toolchain
/
apple
/
toolchain
.
gni
index
384375fbd
.
.
8c3de67a1
100644
-
-
-
a
/
toolchain
/
apple
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
apple
/
toolchain
.
gni
-
6
14
+
6
14
#
some
enhancements
since
the
commands
on
Mac
are
slightly
different
than
on
#
Linux
.
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
TODO
(
crbug
.
com
/
40869822
)
:
This
import
is
required
to
detect
whether
the
-
21
8
+
21
8
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
swift
compiler
(
as
it
does
not
include
support
for
catalyst
)
.
Remove
it
#
once
the
support
is
available
.
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
mobile_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
}
assert
(
(
target_os
=
=
"
ios
"
&
&
host_os
=
=
"
mac
"
)
|
|
host_os
!
=
"
win
"
)
-
84
11
+
84
11
tool_versions
=
exec_script
(
"
get_tool_mtime
.
py
"
rebase_path
(
[
-
"
/
/
build
/
toolchain
/
apple
/
compile_xcassets
.
py
"
-
"
/
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
-
"
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
-
"
/
/
build
/
toolchain
/
apple
/
swift_const_gather_protocols
.
json
"
-
"
/
/
build
/
toolchain
/
apple
/
swiftc
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
compile_xcassets
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
swift_const_gather_protocols
.
json
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
swiftc
.
py
"
]
root_build_dir
)
"
trim
scope
"
)
-
196
7
+
196
7
template
(
"
single_apple_toolchain
"
)
{
toolchain_coverage_instrumentation_input_file
!
=
"
"
if
(
_use_clang_coverage_wrapper
)
{
_coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
+
"
-
-
files
-
to
-
instrument
=
"
+
rebase_path
(
toolchain_coverage_instrumentation_input_file
root_build_dir
)
+
"
-
-
target
-
os
=
"
+
target_os
-
206
7
+
206
7
template
(
"
single_apple_toolchain
"
)
{
linker_driver_env
=
"
TOOL_VERSION
=
{
tool_versions
.
linker_driver
}
"
linker_driver
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
root_build_dir
)
linker_driver_args
=
"
-
Wcrl
driver
ld
"
#
Specify
an
explicit
path
for
the
strip
binary
.
-
255
7
+
255
7
template
(
"
single_apple_toolchain
"
)
{
rustc_bin
=
"
rust_sysroot_relative
/
bin
/
rustc
"
rustc
=
"
rust_compiler_prefix
{
rustc_bin
}
"
rustc_wrapper
=
-
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
tool
(
"
rust_staticlib
"
)
{
libname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
-
310
7
+
310
7
template
(
"
single_apple_toolchain
"
)
{
exename
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
"
exename
.
rsp
"
depfile
=
"
exename
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
TODO
(
danakj
)
:
solink
can
generate
TOC
files
for
re
-
exporting
library
#
symbols
and
we
should
do
the
same
here
.
-
337
7
+
337
7
template
(
"
single_apple_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
"
dllname
.
rsp
"
depfile
=
"
dllname
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
TODO
(
danakj
)
:
solink
can
generate
TOC
files
for
re
-
exporting
library
#
symbols
and
we
should
do
the
same
here
.
-
366
7
+
366
7
template
(
"
single_apple_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
"
dllname
.
rsp
"
depfile
=
"
dllname
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
TODO
(
danakj
)
:
solink
can
generate
TOC
files
for
re
-
exporting
library
#
symbols
and
we
should
do
the
same
here
.
-
451
7
+
451
7
template
(
"
single_apple_toolchain
"
)
{
rspfile_content
=
"
{
{
inputs
}
}
"
if
(
!
toolchain_uses_lld
)
{
-
script
=
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
root_build_dir
)
#
Specify
explicit
path
for
libtool
.
-
477
7
+
477
7
template
(
"
single_apple_toolchain
"
)
{
#
E
.
g
.
"
.
/
libfoo
.
dylib
"
:
dylib
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
dylib
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
These
variables
are
not
built
into
GN
but
are
helpers
that
implement
#
(
1
)
linking
to
produce
a
.
dylib
(
2
)
extracting
the
symbols
from
that
-
552
7
+
552
7
template
(
"
single_apple_toolchain
"
)
{
#
E
.
g
.
"
.
/
libfoo
.
so
"
:
sofile
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
link_command
=
"
linker_driver_env
linker_driver
linker_driver_args
-
bundle
{
{
ldflags
}
}
-
o
\
"
sofile
\
"
\
"
rspfile
\
"
{
{
rlibs
}
}
"
link_command
+
=
dsym_switch
-
582
7
+
582
7
template
(
"
single_apple_toolchain
"
)
{
tool
(
"
link
"
)
{
outfile
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
"
outfile
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_driver_env
linker_driver
linker_driver_args
dsym_switch
{
{
ldflags
}
}
-
o
\
"
outfile
\
"
\
"
rspfile
\
"
{
{
rlibs
}
}
"
description
=
"
LINK
outfile
"
-
627
7
+
627
7
template
(
"
single_apple_toolchain
"
)
{
command
=
"
rm
-
rf
{
{
output
}
}
&
&
/
bin
/
cp
-
Rld
{
{
source
}
}
{
{
output
}
}
"
}
description
=
"
COPY_BUNDLE_DATA
{
{
source
}
}
{
{
output
}
}
"
-
pool
=
"
/
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
}
#
Swift
is
only
used
on
iOS
not
macOS
.
We
want
to
minimize
the
number
-
635
7
+
635
7
template
(
"
single_apple_toolchain
"
)
{
#
disallow
future
uses
of
Swift
on
macOS
.
https
:
/
/
crbug
.
com
/
965663
.
if
(
toolchain_args
.
current_os
=
=
"
ios
"
)
{
tool
(
"
swift
"
)
{
-
_tool
=
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
swiftc
.
py
"
root_build_dir
)
+
_tool
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
swiftc
.
py
"
root_build_dir
)
depfile
=
"
{
{
target_out_dir
}
}
/
{
{
module_name
}
}
.
d
"
depsformat
=
"
gcc
"
-
752
7
+
752
7
template
(
"
single_apple_toolchain
"
)
{
_src_dir
=
rebase_path
(
"
/
/
"
root_build_dir
)
_gen_dir
=
rebase_path
(
root_gen_dir
root_build_dir
)
_const_gather_protocols_file
=
rebase_path
(
-
"
/
/
build
/
toolchain
/
apple
/
swift_const_gather_protocols
.
json
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
swift_const_gather_protocols
.
json
"
root_build_dir
)
command
=
-
772
7
+
772
7
template
(
"
single_apple_toolchain
"
)
{
#
disallow
future
uses
of
xcassets
on
macOS
.
https
:
/
/
crbug
.
com
/
965663
.
if
(
toolchain_args
.
current_os
=
=
"
ios
"
)
{
tool
(
"
compile_xcassets
"
)
{
-
_tool
=
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
compile_xcassets
.
py
"
+
_tool
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
compile_xcassets
.
py
"
root_build_dir
)
_env_vars
=
"
TOOL_VERSION
=
{
tool_versions
.
compile_xcassets
}
"
-
789
12
+
789
12
template
(
"
single_apple_toolchain
"
)
{
"
{
{
xcasset_compiler_flags
}
}
"
+
"
-
o
{
{
output
}
}
{
{
inputs
}
}
"
description
=
"
COMPILE_XCASSETS
{
{
output
}
}
"
-
pool
=
"
/
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
}
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
}
}
diff
-
-
git
a
/
toolchain
/
cc_wrapper
.
gni
b
/
toolchain
/
cc_wrapper
.
gni
index
b9b558a8a
.
.
27ef02a09
100644
-
-
-
a
/
toolchain
/
cc_wrapper
.
gni
+
+
+
b
/
toolchain
/
cc_wrapper
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
#
Defines
the
configuration
of
cc
wrapper
#
ccache
sccache
:
c
/
c
+
+
compiler
caches
which
can
greatly
reduce
recompilation
diff
-
-
git
a
/
toolchain
/
concurrent_links
.
gni
b
/
toolchain
/
concurrent_links
.
gni
index
b34b0d2cf
.
.
d5bc86aa6
100644
-
-
-
a
/
toolchain
/
concurrent_links
.
gni
+
+
+
b
/
toolchain
/
concurrent_links
.
gni
-
7
13
+
7
13
#
in
the
context
of
the
default_toolchain
so
we
can
at
least
check
for
that
.
assert
(
current_toolchain
=
=
default_toolchain
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Limit
the
number
of
concurrent
links
;
we
often
want
to
run
fewer
diff
-
-
git
a
/
toolchain
/
cros
/
BUILD
.
gn
b
/
toolchain
/
cros
/
BUILD
.
gn
index
293b3e27b
.
.
a25f18b66
100644
-
-
-
a
/
toolchain
/
cros
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
cros
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cros
/
cros_config
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros
/
cros_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
This
is
mostly
identical
to
gcc_toolchain
but
handles
relativizing
toolchain
#
paths
.
This
is
needed
for
CrOS
since
these
paths
often
change
based
on
the
diff
-
-
git
a
/
toolchain
/
cros_toolchain
.
gni
b
/
toolchain
/
cros_toolchain
.
gni
index
c1fb4e2d6
.
.
279aac905
100644
-
-
-
a
/
toolchain
/
cros_toolchain
.
gni
+
+
+
b
/
toolchain
/
cros_toolchain
.
gni
-
31
8
+
31
8
#
cros_target_ar
=
"
x86_64
-
cros
-
linux
-
gnu
-
gcc
-
ar
"
#
target_cpu
=
"
x64
"
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
declare_args
(
)
{
#
These
must
be
specified
for
a
board
-
specific
build
.
diff
-
-
git
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
index
63504ea70
.
.
4040aa762
100644
-
-
-
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
Fuchsia
builds
using
the
Clang
toolchain
with
most
parameters
common
across
#
the
different
target
architectures
.
diff
-
-
git
a
/
toolchain
/
fuchsia
/
DIR_METADATA
b
/
toolchain
/
fuchsia
/
DIR_METADATA
index
210aa6a95
.
.
ddd134a2b
100644
-
-
-
a
/
toolchain
/
fuchsia
/
DIR_METADATA
+
+
+
b
/
toolchain
/
fuchsia
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
diff
-
-
git
a
/
toolchain
/
gcc_toolchain
.
gni
b
/
toolchain
/
gcc_toolchain
.
gni
index
9cad09923
.
.
b18f3e5cb
100644
-
-
-
a
/
toolchain
/
gcc_toolchain
.
gni
+
+
+
b
/
toolchain
/
gcc_toolchain
.
gni
-
2
22
+
2
22
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_nacl
)
{
#
To
keep
NaCl
variables
out
of
builds
that
don
'
t
include
NaCl
all
#
variables
defined
in
nacl
/
config
.
gni
referenced
here
should
be
protected
by
#
is_nacl
conditions
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
}
declare_args
(
)
{
-
230
7
+
230
7
template
(
"
single_gcc_toolchain
"
)
{
}
_coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
#
The
wrapper
needs
to
know
what
OS
we
target
because
it
uses
that
to
-
391
7
+
391
7
template
(
"
single_gcc_toolchain
"
)
{
#
existing
file
.
if
(
host_os
=
=
"
win
"
)
{
tool_wrapper_path
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
command
=
"
cmd
/
s
/
c
\
"
\
"
python_path
\
"
tool_wrapper_path
delete
-
file
{
{
output
}
}
&
&
command
\
"
"
}
else
{
command
=
"
rm
-
f
{
{
output
}
}
&
&
command
"
-
414
7
+
414
7
template
(
"
single_gcc_toolchain
"
)
{
sofile
=
"
{
{
output_dir
}
}
/
soname
"
#
Possibly
including
toolchain
dir
.
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
if
(
defined
(
invoker
.
strip
)
)
{
unstripped_sofile
=
"
{
{
root_out_dir
}
}
/
lib
.
unstripped
/
soname
"
-
455
7
+
455
7
template
(
"
single_gcc_toolchain
"
)
{
#
requiring
sh
control
structures
pipelines
and
POSIX
utilities
.
#
The
host
might
not
have
a
POSIX
shell
and
utilities
(
e
.
g
.
Windows
)
.
solink_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_solink_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_solink_wrapper
.
py
"
root_build_dir
)
solink_extra_flags
=
"
"
if
(
current_os
=
=
"
aix
"
)
{
#
to
be
intercepted
by
solink_wrapper
so
that
we
exit
immediately
-
527
7
+
527
7
template
(
"
single_gcc_toolchain
"
)
{
sofile
=
"
{
{
output_dir
}
}
/
soname
"
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
if
(
defined
(
invoker
.
strip
)
)
{
unstripped_sofile
=
"
{
{
root_out_dir
}
}
/
lib
.
unstripped
/
soname
"
-
584
7
+
584
7
template
(
"
single_gcc_toolchain
"
)
{
rspfile
=
"
outfile
.
rsp
"
unstripped_outfile
=
outfile
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
Use
this
for
{
{
output_extension
}
}
expansions
unless
a
target
manually
#
overrides
it
(
in
which
case
{
{
output_extension
}
}
will
be
what
the
target
-
626
7
+
626
7
template
(
"
single_gcc_toolchain
"
)
{
}
link_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
\
"
python_path
\
"
\
"
link_wrapper
\
"
-
-
output
=
\
"
outfile
\
"
strip_switch
map_switch
dwp_switch
-
-
link_command
"
description
=
"
LINK
outfile
"
-
672
7
+
672
7
template
(
"
single_gcc_toolchain
"
)
{
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
if
(
toolchain_has_rust
)
{
-
683
7
+
683
7
template
(
"
single_gcc_toolchain
"
)
{
rustc_bin
=
"
rust_sysroot_relative
/
bin
/
rustc
"
rustc
=
"
rust_compiler_prefix
{
rustc_bin
}
"
rustc_wrapper
=
-
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
#
RSP
manipulation
due
to
https
:
/
/
bugs
.
chromium
.
org
/
p
/
gn
/
issues
/
detail
?
id
=
249
tool
(
"
rust_staticlib
"
)
{
-
735
7
+
735
7
template
(
"
single_gcc_toolchain
"
)
{
exename
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
depfile
=
"
exename
.
d
"
rspfile
=
"
exename
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
default_executable_extension
default_output_dir
=
"
{
{
root_out_dir
}
}
"
-
751
7
+
751
7
template
(
"
single_gcc_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
depfile
=
"
dllname
.
d
"
rspfile
=
"
dllname
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
default_shlib_extension
output_prefix
=
"
lib
"
-
768
7
+
768
7
template
(
"
single_gcc_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
depfile
=
"
dllname
.
d
"
rspfile
=
"
dllname
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
default_shlib_extension
output_prefix
=
"
lib
"
diff
-
-
git
a
/
toolchain
/
ios
/
BUILD
.
gn
b
/
toolchain
/
ios
/
BUILD
.
gn
index
121ac470b
.
.
eaed740ab
100644
-
-
-
a
/
toolchain
/
ios
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
ios
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
#
Specialisation
of
the
apple_toolchain
template
to
declare
the
toolchain
#
and
its
tools
to
build
target
for
iOS
platform
.
diff
-
-
git
a
/
toolchain
/
linux
/
BUILD
.
gn
b
/
toolchain
/
linux
/
BUILD
.
gn
index
b9fdcdde5
.
.
ead0a34b8
100644
-
-
-
a
/
toolchain
/
linux
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
clang_toolchain
(
"
clang_ppc64
"
)
{
enable_linker_map
=
true
diff
-
-
git
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
index
a09149123
.
.
68502471e
100644
-
-
-
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
gcc_toolchain
(
"
default
"
)
{
cc
=
getenv
(
"
CC
"
)
diff
-
-
git
a
/
toolchain
/
mac
/
BUILD
.
gn
b
/
toolchain
/
mac
/
BUILD
.
gn
index
d8543c4f2
.
.
4b99db308
100644
-
-
-
a
/
toolchain
/
mac
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
mac
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
Specialisation
of
the
apple_toolchain
template
to
declare
the
toolchain
diff
-
-
git
a
/
toolchain
/
nacl
/
BUILD
.
gn
b
/
toolchain
/
nacl
/
BUILD
.
gn
index
910217c42
.
.
8d70258fc
100644
-
-
-
a
/
toolchain
/
nacl
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
nacl
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
nacl_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
nacl_toolchain
.
gni
"
)
#
Add
the
toolchain
revision
as
a
preprocessor
define
so
that
sources
are
#
rebuilt
when
a
toolchain
is
updated
.
diff
-
-
git
a
/
toolchain
/
nacl_toolchain
.
gni
b
/
toolchain
/
nacl_toolchain
.
gni
index
fbaa65e48
.
.
6ca7ce48a
100644
-
-
-
a
/
toolchain
/
nacl_toolchain
.
gni
+
+
+
b
/
toolchain
/
nacl_toolchain
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
This
template
defines
a
NaCl
toolchain
.
#
diff
-
-
git
a
/
toolchain
/
rbe
.
gni
b
/
toolchain
/
rbe
.
gni
index
444ac6573
.
.
c5ca47ba7
100644
-
-
-
a
/
toolchain
/
rbe
.
gni
+
+
+
b
/
toolchain
/
rbe
.
gni
-
4
8
+
4
8
#
Defines
the
configuration
of
Remote
Build
Execution
(
RBE
)
.
-
import
(
"
/
/
build
/
toolchain
/
remoteexec_defaults
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
siso
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
remoteexec_defaults
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
siso
.
gni
"
)
declare_args
(
)
{
#
Deprecated
:
Please
use
reclient_bin_dir
instead
.
-
135
7
+
135
7
if
(
use_reclient_cfgs
&
&
current_toolchain
=
=
default_toolchain
)
{
#
it
doesn
'
t
.
if
(
!
path_exists
(
reclient_cc_cfg_file
)
)
{
#
Use
exec_script
(
)
to
show
a
good
error
message
.
-
exec_script
(
rebase_path
(
"
/
/
build
/
toolchain
/
check_rewrapper_cfg
.
py
"
)
+
exec_script
(
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
check_rewrapper_cfg
.
py
"
)
[
reclient_cc_cfg_file
]
"
"
[
rebase_path
(
reclient_cc_cfg_file
"
.
"
root_build_dir
)
]
)
diff
-
-
git
a
/
toolchain
/
siso
.
gni
b
/
toolchain
/
siso
.
gni
index
94650c710
.
.
7725d666e
100644
-
-
-
a
/
toolchain
/
siso
.
gni
+
+
+
b
/
toolchain
/
siso
.
gni
-
1
6
+
1
6
#
Defines
the
configuration
of
siso
(
next
-
gen
build
system
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
#
use_siso_default
is
default
value
of
use_siso
.
#
need
to
match
with
autoninja
'
s
logic
.
-
16
7
+
16
7
if
(
path_exists
(
"
/
usr
/
bin
/
gcert
"
)
|
|
#
linux
_is_ninja_used
=
path_exists
(
rebase_path
(
"
.
ninja_deps
"
root_build_dir
)
)
-
if
(
path_exists
(
"
/
/
build
/
config
/
siso
/
.
sisoenv
"
)
&
&
+
if
(
path_exists
(
"
/
/
chromium
/
build
/
config
/
siso
/
.
sisoenv
"
)
&
&
defined
(
build_with_chromium
)
&
&
build_with_chromium
&
&
_is_google_corp_machine
&
&
!
_is_ninja_used
)
{
use_siso_default
=
true
diff
-
-
git
a
/
toolchain
/
toolchain
.
gni
b
/
toolchain
/
toolchain
.
gni
index
ce642da05
.
.
754f0e3bb
100644
-
-
-
a
/
toolchain
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
toolchain
.
gni
-
5
8
+
5
8
#
Toolchain
-
related
configuration
that
may
be
needed
outside
the
context
of
the
#
toolchain
(
)
rules
themselves
.
-
import
(
"
/
/
build
/
config
/
cast
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
cast
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
-
105
7
+
105
7
stamp_description
=
"
STAMP
{
{
output
}
}
"
copy_description
=
"
COPY
{
{
source
}
}
{
{
output
}
}
"
if
(
host_os
=
=
"
win
"
)
{
_tool_wrapper_path
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
stamp_command
=
"
cmd
/
c
type
nul
>
\
"
{
{
output
}
}
\
"
"
copy_command
=
"
\
"
python_path
\
"
_tool_wrapper_path
recursive
-
mirror
{
{
source
}
}
{
{
output
}
}
"
diff
-
-
git
a
/
toolchain
/
wasm
/
BUILD
.
gn
b
/
toolchain
/
wasm
/
BUILD
.
gn
index
38298f349
.
.
26d790b0b
100644
-
-
-
a
/
toolchain
/
wasm
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
wasm
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
This
WASM
toolchain
is
NOT
to
be
used
to
build
any
Chromium
code
#
i
.
e
.
tests
and
samples
are
currently
fine
.
diff
-
-
git
a
/
toolchain
/
win
/
BUILD
.
gn
b
/
toolchain
/
win
/
BUILD
.
gn
index
d7f348487
.
.
1727eb6f6
100644
-
-
-
a
/
toolchain
/
win
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
win
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
win
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
toolchain
.
gni
"
)
assert
(
is_win
"
Should
only
be
running
on
Windows
"
)
-
71
7
+
71
7
if
(
target_os
=
=
"
winuwp
"
)
{
#
as
the
UWP
toolchain
requires
the
environment
.
store_
CPU
variable
instead
#
of
the
usual
environment
.
CPU
.
store_cpu_toolchain_data
=
-
exec_script
(
"
/
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
[
visual_studio_path
windows_sdk_path
diff
-
-
git
a
/
toolchain
/
win
/
midl
.
gni
b
/
toolchain
/
win
/
midl
.
gni
index
c906b6394
.
.
fcab19141
100644
-
-
-
a
/
toolchain
/
win
/
midl
.
gni
+
+
+
b
/
toolchain
/
win
/
midl
.
gni
-
4
7
+
4
7
assert
(
is_win
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
#
This
template
defines
a
rule
to
invoke
the
MS
IDL
compiler
.
The
generated
#
source
code
will
be
compiled
and
linked
into
targets
that
depend
on
this
.
-
126
7
+
126
7
template
(
"
midl
"
)
{
action_foreach
(
action_name
)
{
visibility
=
[
"
:
source_set_name
"
]
-
script
=
"
/
/
build
/
toolchain
/
win
/
midl
.
py
"
+
script
=
"
/
/
chromium
/
build
/
toolchain
/
win
/
midl
.
py
"
sources
=
invoker
.
sources
diff
-
-
git
a
/
toolchain
/
win
/
toolchain
.
gni
b
/
toolchain
/
win
/
toolchain
.
gni
index
7dbd8a17e
.
.
96b978aad
100644
-
-
-
a
/
toolchain
/
win
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
win
/
toolchain
.
gni
-
2
21
+
2
21
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
win_toolchain_data
.
gni
"
)
assert
(
is_win
"
Should
only
be
running
on
Windows
"
)
#
This
tool
will
is
used
as
a
wrapper
for
various
commands
below
.
_tool_wrapper_path
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
if
(
host_os
=
=
"
win
"
)
{
_exe
=
"
.
exe
"
-
188
7
+
188
7
template
(
"
msvc_toolchain
"
)
{
}
coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
coverage_wrapper
=
coverage_wrapper
+
"
-
-
target
-
os
=
"
+
target_os
if
(
toolchain_coverage_instrumentation_input_file
!
=
"
"
)
{
-
306
7
+
306
7
template
(
"
msvc_toolchain
"
)
{
#
Wrap
ml
(
64
)
.
exe
with
a
script
that
makes
its
output
deterministic
.
#
It
'
s
lld
only
because
the
script
zaps
obj
Timestamp
which
#
link
.
exe
/
incremental
looks
at
.
-
ml_py
=
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
ml
.
py
"
root_build_dir
)
+
ml_py
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
ml
.
py
"
root_build_dir
)
ml
=
"
\
"
python_path
\
"
ml_py
ml
"
}
-
330
7
+
330
7
template
(
"
msvc_toolchain
"
)
{
rust_sysroot_relative
=
rebase_path
(
rust_sysroot
root_build_dir
)
rustc
=
"
rust_sysroot_relative
/
bin
/
rustc
"
rustc_wrapper
=
-
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
root_build_dir
)
rustc_windows_args
=
"
-
Clinker
=
link
rust_linkflags
rustc_common_args
"
tool
(
"
rust_staticlib
"
)
{
-
384
7
+
384
7
template
(
"
msvc_toolchain
"
)
{
pdbname
=
"
exename
.
pdb
"
rspfile
=
"
exename
.
rsp
"
depfile
=
"
exename
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
"
.
exe
"
default_output_dir
=
"
{
{
root_out_dir
}
}
"
-
409
7
+
409
7
template
(
"
msvc_toolchain
"
)
{
pdbname
=
"
dllname
.
pdb
"
rspfile
=
"
dllname
.
rsp
"
depfile
=
"
dllname
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
"
.
dll
"
default_output_dir
=
"
{
{
root_out_dir
}
}
"
-
445
7
+
445
7
template
(
"
msvc_toolchain
"
)
{
pdbname
=
"
dllname
.
pdb
"
rspfile
=
"
dllname
.
rsp
"
depfile
=
"
dllname
.
d
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
default_output_extension
=
"
.
dll
"
default_output_dir
=
"
{
{
root_out_dir
}
}
"
-
498
7
+
498
7
template
(
"
msvc_toolchain
"
)
{
libname
=
"
{
dllname
}
.
lib
"
#
e
.
g
.
foo
.
dll
.
lib
pdbname
=
"
{
dllname
}
.
pdb
"
rspfile
=
"
{
dllname
}
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
cc_linkflags
\
"
/
OUT
:
dllname
\
"
/
nologo
{
sys_lib_flags
}
\
"
/
IMPLIB
:
libname
\
"
/
DLL
\
"
/
PDB
:
pdbname
\
"
\
"
rspfile
\
"
"
-
533
7
+
533
7
template
(
"
msvc_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
pdbname
=
"
{
dllname
}
.
pdb
"
rspfile
=
"
{
dllname
}
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
cc_linkflags
\
"
/
OUT
:
dllname
\
"
/
nologo
{
sys_lib_flags
}
/
DLL
\
"
/
PDB
:
pdbname
\
"
\
"
rspfile
\
"
"
-
556
7
+
556
7
template
(
"
msvc_toolchain
"
)
{
exename
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
pdbname
=
"
exename
.
pdb
"
rspfile
=
"
exename
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
cc_linkflags
\
"
/
OUT
:
exename
\
"
/
nologo
{
sys_lib_flags
}
\
"
/
PDB
:
pdbname
\
"
\
"
rspfile
\
"
"
-
581
16
+
581
16
template
(
"
msvc_toolchain
"
)
{
tool
(
"
stamp
"
)
{
command
=
stamp_command
description
=
stamp_description
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
tool
(
"
copy
"
)
{
command
=
copy_command
description
=
copy_description
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
}
}
diff
-
-
git
a
/
toolchain
/
win
/
win_toolchain_data
.
gni
b
/
toolchain
/
win
/
win_toolchain_data
.
gni
index
a6e8328b2
.
.
495f5502d
100644
-
-
-
a
/
toolchain
/
win
/
win_toolchain_data
.
gni
+
+
+
b
/
toolchain
/
win
/
win_toolchain_data
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
declare_args
(
)
{
win_toolchain_data_x86
=
-
exec_script
(
"
/
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
[
visual_studio_path
windows_sdk_path
-
18
7
+
18
7
declare_args
(
)
{
"
scope
"
)
win_toolchain_data_x64
=
-
exec_script
(
"
/
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
[
visual_studio_path
windows_sdk_path
-
30
7
+
30
7
declare_args
(
)
{
"
scope
"
)
if
(
target_cpu
=
=
"
arm64
"
|
|
host_cpu
=
=
"
arm64
"
)
{
win_toolchain_data_arm64
=
-
exec_script
(
"
/
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
setup_toolchain
.
py
"
[
visual_studio_path
windows_sdk_path
diff
-
-
git
a
/
toolchain
/
zos
/
BUILD
.
gn
b
/
toolchain
/
zos
/
BUILD
.
gn
index
94f8caf1a
.
.
01689744c
100644
-
-
-
a
/
toolchain
/
zos
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
zos
/
BUILD
.
gn
-
4
7
+
4
7
#
This
file
is
based
on
gcc_toolchain
.
gni
and
customized
for
z
/
OS
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
toolchain
(
"
s390x
"
)
{
cc
=
"
ibm
-
clang
"
-
91
7
+
91
7
toolchain
(
"
s390x
"
)
{
link_command
=
"
ld
-
Wl
-
x
{
xfile
}
{
{
ldflags
}
}
{
extra_ldflags
}
-
o
\
"
sofile
\
"
cat
rspfile
"
solink_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
python_path
\
"
solink_wrapper
\
"
-
-
output
=
\
"
sofile
\
"
-
-
link_command
"
-
152
7
+
152
7
toolchain
(
"
s390x
"
)
{
link_command
=
"
ld
{
{
ldflags
}
}
{
extra_ldflags
}
-
o
\
"
outfile
\
"
cat
rspfile
{
{
solibs
}
}
{
{
libs
}
}
"
link_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
python_path
\
"
link_wrapper
\
"
-
-
output
=
\
"
outfile
\
"
-
-
link_command
"
diff
-
-
git
a
/
util
/
BUILD
.
gn
b
/
util
/
BUILD
.
gn
index
b5fd3bbf3
.
.
9b2301c7f
100644
-
-
-
a
/
util
/
BUILD
.
gn
+
+
+
b
/
util
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
action
(
"
chromium_git_revision
"
)
{
script
=
"
version
.
py
"
-
33
15
+
33
15
action
(
"
chromium_git_revision
"
)
{
group
(
"
test_results
"
)
{
data
=
[
"
/
/
.
vpython3
"
-
"
/
/
build
/
util
/
lib
/
__init__
.
py
"
-
"
/
/
build
/
util
/
lib
/
results
/
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
__init__
.
py
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
results
/
"
]
}
group
(
"
proto
"
)
{
data
=
[
"
/
/
.
vpython3
"
-
"
/
/
build
/
util
/
lib
/
__init__
.
py
"
-
"
/
/
build
/
util
/
lib
/
proto
/
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
__init__
.
py
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
proto
/
"
]
}
diff
-
-
git
a
/
util
/
branding
.
gni
b
/
util
/
branding
.
gni
index
1d4ffd68a
.
.
bb99883da
100644
-
-
-
a
/
util
/
branding
.
gni
+
+
+
b
/
util
/
branding
.
gni
-
12
7
+
12
7
#
These
values
should
only
be
used
if
you
REALLY
need
to
depend
on
them
at
#
build
-
time
for
example
in
the
computation
of
output
file
names
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
_branding_dictionary_template
=
"
full_name
=
\
"
PRODUCT_FULLNAME
\
"
"
+
diff
-
-
git
a
/
util
/
generate_wrapper
.
gni
b
/
util
/
generate_wrapper
.
gni
index
e2ceccc9e
.
.
ef90a26ed
100644
-
-
-
a
/
util
/
generate_wrapper
.
gni
+
+
+
b
/
util
/
generate_wrapper
.
gni
-
45
7
+
45
7
template
(
"
generate_wrapper
"
)
{
if
(
defined
(
invoker
.
generator_script
)
)
{
script
=
invoker
.
generator_script
}
else
{
-
script
=
"
/
/
build
/
util
/
generate_wrapper
.
py
"
+
script
=
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
py
"
}
_wrapper_script
=
invoker
.
wrapper_script
if
(
is_win
)
{
diff
-
-
git
a
/
util
/
java_action
.
gni
b
/
util
/
java_action
.
gni
index
81f6da5e1
.
.
9ac8d634a
100644
-
-
-
a
/
util
/
java_action
.
gni
+
+
+
b
/
util
/
java_action
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
jarrunner
=
"
/
/
build
/
util
/
java_action
.
py
"
+
jarrunner
=
"
/
/
chromium
/
build
/
util
/
java_action
.
py
"
#
Declare
a
target
that
runs
a
java
command
a
single
time
.
#
diff
-
-
git
a
/
util
/
lastchange
.
gni
b
/
util
/
lastchange
.
gni
index
8ed577a20
.
.
93801984a
100644
-
-
-
a
/
util
/
lastchange
.
gni
+
+
+
b
/
util
/
lastchange
.
gni
-
10
7
+
10
7
declare_args
(
)
{
}
if
(
use_dummy_lastchange
)
{
-
lastchange_file
=
"
/
/
build
/
util
/
LASTCHANGE
.
dummy
"
+
lastchange_file
=
"
/
/
chromium
/
build
/
util
/
LASTCHANGE
.
dummy
"
}
else
{
-
lastchange_file
=
"
/
/
build
/
util
/
LASTCHANGE
"
+
lastchange_file
=
"
/
/
chromium
/
build
/
util
/
LASTCHANGE
"
}
diff
-
-
git
a
/
util
/
process_version
.
gni
b
/
util
/
process_version
.
gni
index
3489bbaf4
.
.
06c53c1b6
100644
-
-
-
a
/
util
/
process_version
.
gni
+
+
+
b
/
util
/
process_version
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
#
Runs
the
version
processing
script
over
the
given
template
file
to
produce
#
an
output
file
.
This
is
used
for
generating
various
forms
of
files
that
-
67
9
+
67
9
template
(
"
process_version
"
)
{
}
action
(
action_name
)
{
-
script
=
"
/
/
build
/
util
/
version
.
py
"
+
script
=
"
/
/
chromium
/
build
/
util
/
version
.
py
"
-
sources
=
[
"
/
/
build
/
util
/
android_chrome_version
.
py
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
util
/
android_chrome_version
.
py
"
]
inputs
=
[
lastchange_file
]
if
(
defined
(
invoker
.
inputs
)
)
{
diff
-
-
git
a
/
win
/
BUILD
.
gn
b
/
win
/
BUILD
.
gn
index
a63996d6d
.
.
23be394aa
100644
-
-
-
a
/
win
/
BUILD
.
gn
+
+
+
b
/
win
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
manifest
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
manifest
.
gni
"
)
#
Depending
on
this
target
will
cause
the
manifests
for
Chrome
'
s
default
#
Windows
and
common
control
compatibility
and
elevation
for
executables
.
-
21
10
+
21
10
if
(
is_win
)
{
#
"
Windows
cross
-
builds
from
Mac
must
be
64
-
bit
.
"
)
action
(
"
copy_cdb_to_output
"
)
{
-
script
=
"
/
/
build
/
win
/
copy_cdb_to_output
.
py
"
+
script
=
"
/
/
chromium
/
build
/
win
/
copy_cdb_to_output
.
py
"
inputs
=
[
script
-
"
/
/
build
/
vs_toolchain
.
py
"
+
"
/
/
chromium
/
build
/
vs_toolchain
.
py
"
]
outputs
=
[
"
root_out_dir
/
cdb
/
cdb
.
exe
"
diff
-
-
git
a
/
win
/
message_compiler
.
gni
b
/
win
/
message_compiler
.
gni
index
c0b42b2dd
.
.
ffbfbf396
100644
-
-
-
a
/
win
/
message_compiler
.
gni
+
+
+
b
/
win
/
message_compiler
.
gni
-
40
7
+
40
7
template
(
"
message_compiler
"
)
{
forward_variables_from
(
invoker
[
"
visibility
"
]
)
}
-
script
=
"
/
/
build
/
win
/
message_compiler
.
py
"
+
script
=
"
/
/
chromium
/
build
/
win
/
message_compiler
.
py
"
outputs
=
[
"
target_gen_dir
/
{
{
source_name_part
}
}
.
h
"
