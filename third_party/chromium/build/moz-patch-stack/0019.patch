From
:
Michael
Froman
<
mfroman
mozilla
.
com
>
Date
:
Thu
3
Jul
2025
17
:
30
:
28
-
0500
Subject
:
Bug
1775143
-
pt14
-
(
mirror
)
58f47eacaf10
r
=
ng
Search
third_party
/
libwebrtc
/
build
for
current_cpu
removing
third_party
/
libwebrtc
/
build
/
config
/
BUILDCONFIG
.
gn
and
third_party
/
libwebrtc
/
build
/
config
/
v8_target_cpu
.
gni
from
the
list
.
ack
-
lw
current_cpu
third_party
/
libwebrtc
/
build
|
grep
-
v
"
BUILDCONFIG
\
.
gn
"
|
grep
-
v
"
v8_target_cpu
\
.
gni
"
That
gave
me
this
:
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
android
/
abi
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
android
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
android
/
config
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
android
/
rules
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
arm
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
chromecast
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
chromeos
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
compiler
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
compiler
/
compiler
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
ios
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
ios
/
config
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
ios
/
rules
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
linux
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
linux
/
pkg_config
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
mac
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
mips
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
nacl
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
nacl
/
config
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
nacl
/
host_toolchain
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
nacl
/
rules
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
posix
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
rust
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
sanitizers
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
sysroot
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
config
/
win
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
linux
/
extract_symbols
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
aix
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
android
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
cros
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
fuchsia
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
gcc_toolchain
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
ios
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
linux
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
mac
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
nacl
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
win
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
win
/
midl
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
win
/
toolchain
.
gni
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
toolchain
/
zos
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
win
/
BUILD
.
gn
sed
-
i
'
s
/
current_cpu
/
target_cpu
/
g
'
third_party
/
libwebrtc
/
build
/
win
/
message_compiler
.
gni
(
skip
-
generation
)
Depends
on
D149827
Differential
Revision
:
https
:
/
/
phabricator
.
services
.
mozilla
.
com
/
D149828
Mercurial
Revision
:
https
:
/
/
hg
.
mozilla
.
org
/
mozilla
-
central
/
rev
/
ec13234e5a641a026e946425ddea2d0de86435cd
-
-
-
config
/
BUILD
.
gn
|
2
+
-
config
/
android
/
BUILD
.
gn
|
8
+
-
-
config
/
android
/
abi
.
gni
|
14
+
+
+
-
-
-
config
/
android
/
config
.
gni
|
12
+
+
-
-
-
config
/
android
/
rules
.
gni
|
6
+
-
-
config
/
arm
.
gni
|
6
+
-
-
config
/
chromecast
/
BUILD
.
gn
|
4
+
-
config
/
chromeos
/
BUILD
.
gn
|
8
+
-
-
config
/
compiler
/
BUILD
.
gn
|
78
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-
-
-
-
-
-
-
-
-
-
-
-
-
-
config
/
compiler
/
compiler
.
gni
|
34
+
+
+
+
+
+
-
-
-
-
-
-
-
config
/
ios
/
BUILD
.
gn
|
10
+
+
-
-
config
/
ios
/
config
.
gni
|
2
+
-
config
/
ios
/
rules
.
gni
|
8
+
-
-
config
/
linux
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
pkg_config
.
gni
|
2
+
-
config
/
mac
/
BUILD
.
gn
|
10
+
+
-
-
config
/
mips
.
gni
|
10
+
+
-
-
config
/
nacl
/
BUILD
.
gn
|
8
+
-
-
config
/
nacl
/
config
.
gni
|
14
+
+
+
-
-
-
config
/
nacl
/
host_toolchain
.
gni
|
6
+
-
-
config
/
nacl
/
rules
.
gni
|
16
+
+
+
-
-
-
config
/
posix
/
BUILD
.
gn
|
2
+
-
config
/
rust
.
gni
|
40
+
+
+
+
+
+
+
-
-
-
-
-
-
-
-
config
/
sanitizers
/
BUILD
.
gn
|
14
+
+
+
-
-
-
config
/
sanitizers
/
sanitizers
.
gni
|
4
+
-
config
/
sysroot
.
gni
|
26
+
+
+
+
+
-
-
-
-
-
config
/
win
/
BUILD
.
gn
|
18
+
+
+
-
-
-
-
linux
/
extract_symbols
.
gni
|
2
+
-
toolchain
/
aix
/
BUILD
.
gn
|
2
+
-
toolchain
/
android
/
BUILD
.
gn
|
24
+
+
+
+
-
-
-
-
-
toolchain
/
cros
/
BUILD
.
gn
|
18
+
+
+
-
-
-
-
toolchain
/
fuchsia
/
BUILD
.
gn
|
4
+
-
toolchain
/
gcc_toolchain
.
gni
|
8
+
-
-
toolchain
/
ios
/
BUILD
.
gn
|
20
+
+
+
+
-
-
-
-
toolchain
/
linux
/
BUILD
.
gn
|
84
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
|
4
+
-
toolchain
/
mac
/
BUILD
.
gn
|
38
+
+
+
+
+
+
+
-
-
-
-
-
-
-
toolchain
/
nacl
/
BUILD
.
gn
|
8
+
-
-
toolchain
/
win
/
BUILD
.
gn
|
2
+
-
toolchain
/
win
/
midl
.
gni
|
6
+
-
-
toolchain
/
win
/
toolchain
.
gni
|
16
+
+
+
-
-
-
toolchain
/
zos
/
BUILD
.
gn
|
2
+
-
win
/
BUILD
.
gn
|
4
+
-
win
/
message_compiler
.
gni
|
2
+
-
44
files
changed
305
insertions
(
+
)
305
deletions
(
-
)
diff
-
-
git
a
/
config
/
BUILD
.
gn
b
/
config
/
BUILD
.
gn
index
278d76265
.
.
644415057
100644
-
-
-
a
/
config
/
BUILD
.
gn
+
+
+
b
/
config
/
BUILD
.
gn
-
122
7
+
122
7
config
(
"
debug
"
)
{
#
builds
and
we
have
to
tell
it
to
turn
it
off
.
defines
+
=
[
"
_HAS_ITERATOR_DEBUGGING
=
0
"
]
}
-
}
else
if
(
(
is_linux
|
|
is_chromeos
)
&
&
current_cpu
=
=
"
x64
"
&
&
+
}
else
if
(
(
is_linux
|
|
is_chromeos
)
&
&
target_cpu
=
=
"
x64
"
&
&
enable_iterator_debugging
)
{
#
Enable
libstdc
+
+
debugging
facilities
to
help
catch
problems
early
see
#
http
:
/
/
crbug
.
com
/
65151
.
diff
-
-
git
a
/
config
/
android
/
BUILD
.
gn
b
/
config
/
android
/
BUILD
.
gn
index
3da187c7d
.
.
c9b71c607
100644
-
-
-
a
/
config
/
android
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
BUILD
.
gn
-
40
14
+
40
14
config
(
"
compiler
"
)
{
"
-
Wl
-
-
exclude
-
libs
=
libvpx_assembly_arm
.
a
"
]
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
#
Reduce
the
page
size
from
65536
in
order
to
reduce
binary
size
slightly
#
by
shrinking
the
alignment
gap
between
segments
.
This
also
causes
all
#
segments
to
be
mapped
adjacently
which
breakpad
relies
on
.
ldflags
+
=
[
"
-
Wl
-
z
max
-
page
-
size
=
4096
"
]
}
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
if
(
arm_control_flow_integrity
=
=
"
standard
"
)
{
cflags
+
=
[
"
-
mbranch
-
protection
=
standard
"
]
}
else
if
(
arm_control_flow_integrity
=
=
"
pac
"
)
{
-
83
7
+
83
7
config
(
"
runtime_library
"
)
{
libs
=
[
]
ldflags
=
[
]
-
if
(
current_cpu
=
=
"
arm
"
&
&
arm_version
=
=
6
)
{
+
if
(
target_cpu
=
=
"
arm
"
&
&
arm_version
=
=
6
)
{
libs
+
=
[
"
atomic
"
]
}
}
-
114
7
+
114
7
config
(
"
lld_branch_target_hardening
"
)
{
#
Config
opts
a
shared
library
into
BTI
linker
hardening
.
This
#
is
an
opt
-
in
config
(
rather
than
default
-
enabled
)
to
avoid
#
interfering
with
the
V8
CFI
bots
(
crbug
.
com
/
1334614
)
.
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
if
(
arm_control_flow_integrity
=
=
"
standard
"
)
{
#
Linking
objects
without
GNU_PROPERTY_AARCH64_FEATURE_1_BTI
#
in
their
.
gnu
.
note
section
implicitly
results
in
the
final
diff
-
-
git
a
/
config
/
android
/
abi
.
gni
b
/
config
/
android
/
abi
.
gni
index
5e2ec054c
.
.
6b88d903c
100644
-
-
-
a
/
config
/
android
/
abi
.
gni
+
+
+
b
/
config
/
android
/
abi
.
gni
-
41
10
+
41
10
assert
(
!
devtools_instrumentation_dumping
|
|
use_order_profiling
assert
(
!
use_call_graph
|
|
use_order_profiling
"
use_call_graph
requires
use_order_profiling
"
)
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
android_app_abi
=
"
x86
"
android_abi_target
=
"
i686
-
linux
-
android
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
if
(
arm_version
<
7
)
{
android_app_abi
=
"
armeabi
"
-
52
25
+
52
25
if
(
current_cpu
=
=
"
x86
"
)
{
android_app_abi
=
"
armeabi
-
v7a
"
}
android_abi_target
=
"
arm
-
linux
-
androideabi
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
)
{
android_app_abi
=
"
mips
"
android_abi_target
=
"
mipsel
-
linux
-
android
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
android_app_abi
=
"
x86_64
"
#
Place
holder
for
x64
support
not
tested
.
#
TODO
:
Enable
clang
support
for
Android
x64
.
http
:
/
/
crbug
.
com
/
539781
android_abi_target
=
"
x86_64
-
linux
-
android
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
android_app_abi
=
"
arm64
-
v8a
"
android_abi_target
=
"
aarch64
-
linux
-
android
"
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
)
{
android_app_abi
=
"
mips64
"
#
Place
holder
for
mips64
support
not
tested
.
android_abi_target
=
"
mips64el
-
linux
-
android
"
}
else
{
-
assert
(
false
"
Unknown
Android
ABI
:
"
+
current_cpu
)
+
assert
(
false
"
Unknown
Android
ABI
:
"
+
target_cpu
)
}
if
(
target_cpu
=
=
"
arm64
"
|
|
target_cpu
=
=
"
x64
"
|
|
target_cpu
=
=
"
mips64el
"
)
{
diff
-
-
git
a
/
config
/
android
/
config
.
gni
b
/
config
/
android
/
config
.
gni
index
ee53b6234
.
.
2b807066f
100644
-
-
-
a
/
config
/
android
/
config
.
gni
+
+
+
b
/
config
/
android
/
config
.
gni
-
324
17
+
324
17
if
(
is_android
|
|
is_chromeos
)
{
#
Location
of
libgcc
.
This
is
only
needed
for
the
current
GN
toolchain
so
we
#
only
need
to
define
the
current
one
rather
than
one
for
every
platform
#
like
the
toolchain
roots
.
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
android_prebuilt_arch
=
"
android
-
x86
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
android_prebuilt_arch
=
"
android
-
arm
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
)
{
android_prebuilt_arch
=
"
android
-
mips
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
android_prebuilt_arch
=
"
android
-
x86_64
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
android_prebuilt_arch
=
"
android
-
arm64
"
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
)
{
android_prebuilt_arch
=
"
android
-
mips64
"
}
else
{
assert
(
false
"
Need
android
libgcc
support
for
your
target
arch
.
"
)
diff
-
-
git
a
/
config
/
android
/
rules
.
gni
b
/
config
/
android
/
rules
.
gni
index
a9760d799
.
.
1dfd1cfbf
100644
-
-
-
a
/
config
/
android
/
rules
.
gni
+
+
+
b
/
config
/
android
/
rules
.
gni
-
800
11
+
800
11
if
(
enable_java_templates
&
&
is_android
)
{
#
variables
must
not
be
set
.
template
(
"
write_native_libraries_java
"
)
{
_native_libraries_file
=
"
target_gen_dir
/
target_name
.
srcjar
"
-
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
{
_cpu_family
=
"
CPU_FAMILY_ARM
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
_cpu_family
=
"
CPU_FAMILY_X86
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
|
|
target_cpu
=
=
"
mips64el
"
)
{
_cpu_family
=
"
CPU_FAMILY_MIPS
"
}
else
{
assert
(
false
"
Unsupported
CPU
family
"
)
diff
-
-
git
a
/
config
/
arm
.
gni
b
/
config
/
arm
.
gni
index
ceed953f1
.
.
37ad6c047
100644
-
-
-
a
/
config
/
arm
.
gni
+
+
+
b
/
config
/
arm
.
gni
-
5
11
+
5
11
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
-
#
These
are
primarily
relevant
in
current_cpu
=
=
"
arm
"
contexts
where
+
#
These
are
primarily
relevant
in
target_cpu
=
=
"
arm
"
contexts
where
#
ARM
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
#
other
contexts
when
the
code
will
change
its
behavior
based
on
the
#
cpu
it
wants
to
generate
code
for
.
-
if
(
current_cpu
=
=
"
arm
"
|
|
v8_current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
|
|
v8_target_cpu
=
=
"
arm
"
)
{
declare_args
(
)
{
#
Version
of
the
ARM
processor
when
compiling
on
ARM
.
Ignored
on
non
-
ARM
#
platforms
.
-
124
7
+
124
7
if
(
current_cpu
=
=
"
arm
"
|
|
v8_current_cpu
=
=
"
arm
"
)
{
}
}
}
-
}
else
if
(
current_cpu
=
=
"
arm64
"
|
|
v8_current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
|
|
v8_target_cpu
=
=
"
arm64
"
)
{
#
arm64
supports
only
"
hard
"
.
arm_float_abi
=
"
hard
"
arm_use_neon
=
true
diff
-
-
git
a
/
config
/
chromecast
/
BUILD
.
gn
b
/
config
/
chromecast
/
BUILD
.
gn
index
55a9c50f3
.
.
554a0ff9a
100644
-
-
-
a
/
config
/
chromecast
/
BUILD
.
gn
+
+
+
b
/
config
/
chromecast
/
BUILD
.
gn
-
56
7
+
56
7
config
(
"
ldconfig
"
)
{
config
(
"
executable_config
"
)
{
configs
=
[
"
:
ldconfig
"
]
-
if
(
!
is_clang
&
&
current_cpu
=
=
"
arm
"
)
{
+
if
(
!
is_clang
&
&
target_cpu
=
=
"
arm
"
)
{
ldflags
=
[
#
Export
stdlibc
+
+
and
libgcc
symbols
to
force
shlibs
to
refer
to
these
#
symbols
from
the
executable
.
-
84
7
+
84
7
config
(
"
executable_config
"
)
{
#
shared
libs
to
inherit
RPATH
from
the
parent
executable
that
is
loading
#
the
shared
library
.
(
See
internal
b
/
37514052
for
more
details
.
)
config
(
"
shared_library_config
"
)
{
-
if
(
current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
)
{
configs
=
[
"
:
static_config
"
]
}
}
diff
-
-
git
a
/
config
/
chromeos
/
BUILD
.
gn
b
/
config
/
chromeos
/
BUILD
.
gn
index
e8135939b
.
.
e7177c4c0
100644
-
-
-
a
/
config
/
chromeos
/
BUILD
.
gn
+
+
+
b
/
config
/
chromeos
/
BUILD
.
gn
-
29
20
+
29
20
config
(
"
compiler_cpu_abi
"
)
{
#
Non
-
Lacros
Chrome
OS
builds
use
per
-
board
toolchains
which
might
use
#
different
triples
.
So
don
'
t
do
this
there
.
if
(
is_chromeos_device
&
&
is_chromeos_lacros
)
{
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
asmflags
=
[
"
-
-
target
=
x86_64
-
cros
-
linux
-
gnu
"
]
cflags
=
[
"
-
-
target
=
x86_64
-
cros
-
linux
-
gnu
"
]
ldflags
=
[
"
-
-
target
=
x86_64
-
cros
-
linux
-
gnu
"
]
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
asmflags
=
[
"
-
-
target
=
armv7a
-
cros
-
linux
-
gnueabihf
"
]
cflags
=
[
"
-
-
target
=
armv7a
-
cros
-
linux
-
gnueabihf
"
]
ldflags
=
[
"
-
-
target
=
armv7a
-
cros
-
linux
-
gnueabihf
"
]
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
asmflags
=
[
"
-
-
target
=
aarch64
-
cros
-
linux
-
gnu
"
]
cflags
=
[
"
-
-
target
=
aarch64
-
cros
-
linux
-
gnu
"
]
ldflags
=
[
"
-
-
target
=
aarch64
-
cros
-
linux
-
gnu
"
]
}
else
{
-
assert
(
false
"
add
support
for
current_cpu
here
"
)
+
assert
(
false
"
add
support
for
target_cpu
here
"
)
}
}
}
diff
-
-
git
a
/
config
/
compiler
/
BUILD
.
gn
b
/
config
/
compiler
/
BUILD
.
gn
index
1bd28a0f5
.
.
6e86c188e
100644
-
-
-
a
/
config
/
compiler
/
BUILD
.
gn
+
+
+
b
/
config
/
compiler
/
BUILD
.
gn
-
23
11
+
23
11
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
-
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
-
if
(
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
|
|
-
current_cpu
=
=
"
mips
"
|
|
current_cpu
=
=
"
mips64
"
)
{
+
if
(
target_cpu
=
=
"
mipsel
"
|
|
target_cpu
=
=
"
mips64el
"
|
|
+
target_cpu
=
=
"
mips
"
|
|
target_cpu
=
=
"
mips64
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
mips
.
gni
"
)
}
if
(
is_mac
)
{
-
196
8
+
196
8
declare_args
(
)
{
use_icf
=
(
is_posix
|
|
is_fuchsia
)
&
&
!
is_debug
&
&
!
using_sanitizer
&
&
!
use_clang_coverage
&
&
current_os
!
=
"
zos
"
&
&
!
(
is_android
&
&
use_order_profiling
)
&
&
-
(
use_lld
|
|
(
use_gold
&
&
(
is_chromeos
|
|
!
(
current_cpu
=
=
"
x86
"
|
|
-
current_cpu
=
=
"
x64
"
)
)
)
)
+
(
use_lld
|
|
(
use_gold
&
&
(
is_chromeos
|
|
!
(
target_cpu
=
=
"
x86
"
|
|
+
target_cpu
=
=
"
x64
"
)
)
)
)
}
if
(
is_android
|
|
(
is_chromeos_ash
&
&
is_chromeos_device
)
)
{
-
339
7
+
339
7
config
(
"
compiler
"
)
{
}
#
The
x86
toolchain
currently
has
problems
with
stack
-
protector
.
-
if
(
is_android
&
&
current_cpu
=
=
"
x86
"
)
{
+
if
(
is_android
&
&
target_cpu
=
=
"
x86
"
)
{
cflags
+
=
[
"
-
fno
-
stack
-
protector
"
]
}
else
if
(
current_os
!
=
"
aix
"
)
{
#
Not
available
on
aix
.
-
438
7
+
438
7
config
(
"
compiler
"
)
{
#
entries
)
.
This
reduces
object
file
size
a
bit
and
makes
linking
a
bit
#
faster
.
#
On
arm64
this
is
already
the
default
behavior
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
asmflags
+
=
[
"
-
femit
-
dwarf
-
unwind
=
no
-
compact
-
unwind
"
]
cflags
+
=
[
"
-
femit
-
dwarf
-
unwind
=
no
-
compact
-
unwind
"
]
}
-
739
7
+
739
7
config
(
"
compiler
"
)
{
#
TODO
(
https
:
/
/
crbug
.
com
/
1211155
)
:
investigate
why
this
isn
'
t
effective
on
#
arm32
.
-
if
(
!
is_android
|
|
current_cpu
=
=
"
arm64
"
)
{
+
if
(
!
is_android
|
|
target_cpu
=
=
"
arm64
"
)
{
cflags
+
=
[
"
-
fwhole
-
program
-
vtables
"
]
if
(
!
is_win
)
{
ldflags
+
=
[
"
-
fwhole
-
program
-
vtables
"
]
-
751
7
+
751
7
config
(
"
compiler
"
)
{
#
unless
the
architecture
revision
in
.
ARM
.
attributes
is
sufficiently
new
.
#
TODO
(
pcc
)
:
The
contents
of
.
ARM
.
attributes
should
be
based
on
the
#
-
march
flag
passed
at
compile
time
(
see
llvm
.
org
/
pr36291
)
.
-
if
(
current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
)
{
ldflags
+
=
[
"
-
march
=
arm_arch
"
]
}
}
-
985
7
+
985
7
config
(
"
compiler_cpu_abi
"
)
{
}
#
TODO
(
https
:
/
/
crbug
.
com
/
1383873
)
:
Remove
this
once
figured
out
.
-
if
(
is_apple
&
&
current_cpu
=
=
"
arm64
"
)
{
+
if
(
is_apple
&
&
target_cpu
=
=
"
arm64
"
)
{
cflags
+
=
[
"
-
fno
-
global
-
isel
"
]
ldflags
+
=
[
"
-
fno
-
global
-
isel
"
]
}
-
993
13
+
993
13
config
(
"
compiler_cpu_abi
"
)
{
if
(
(
is_posix
&
&
!
is_apple
)
|
|
is_fuchsia
)
{
#
CPU
architecture
.
We
may
or
may
not
be
doing
a
cross
compile
now
so
for
#
simplicity
we
always
explicitly
set
the
architecture
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
cflags
+
=
[
"
-
m64
"
"
-
msse3
"
]
ldflags
+
=
[
"
-
m64
"
]
-
}
else
if
(
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
)
{
cflags
+
=
[
"
-
m32
"
]
ldflags
+
=
[
"
-
m32
"
]
if
(
!
is_nacl
)
{
-
1008
7
+
1008
7
config
(
"
compiler_cpu_abi
"
)
{
"
-
msse2
"
]
}
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
if
(
is_clang
&
&
!
is_android
&
&
!
is_nacl
&
&
!
(
is_chromeos_lacros
&
&
is_chromeos_device
)
)
{
cflags
+
=
[
"
-
-
target
=
arm
-
linux
-
gnueabihf
"
]
-
1023
13
+
1023
13
config
(
"
compiler_cpu_abi
"
)
{
if
(
arm_tune
!
=
"
"
)
{
cflags
+
=
[
"
-
mtune
=
arm_tune
"
]
}
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
if
(
is_clang
&
&
!
is_android
&
&
!
is_nacl
&
&
!
is_fuchsia
&
&
!
(
is_chromeos_lacros
&
&
is_chromeos_device
)
)
{
cflags
+
=
[
"
-
-
target
=
aarch64
-
linux
-
gnu
"
]
ldflags
+
=
[
"
-
-
target
=
aarch64
-
linux
-
gnu
"
]
}
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
&
&
!
is_nacl
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
&
&
!
is_nacl
)
{
ldflags
+
=
[
"
-
Wl
-
-
hash
-
style
=
sysv
"
]
if
(
custom_toolchain
=
=
"
"
)
{
if
(
is_clang
)
{
-
1114
7
+
1114
7
config
(
"
compiler_cpu_abi
"
)
{
}
cflags
+
=
[
"
-
m
{
mips_float_abi
}
-
float
"
]
-
}
else
if
(
current_cpu
=
=
"
mips
"
&
&
!
is_nacl
)
{
+
}
else
if
(
target_cpu
=
=
"
mips
"
&
&
!
is_nacl
)
{
ldflags
+
=
[
"
-
Wl
-
-
hash
-
style
=
sysv
"
]
if
(
custom_toolchain
=
=
"
"
)
{
if
(
is_clang
)
{
-
1159
7
+
1159
7
config
(
"
compiler_cpu_abi
"
)
{
}
cflags
+
=
[
"
-
m
{
mips_float_abi
}
-
float
"
]
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
)
{
cflags
+
=
[
"
-
D__SANE_USERSPACE_TYPES__
"
]
ldflags
+
=
[
"
-
Wl
-
-
hash
-
style
=
sysv
"
]
if
(
custom_toolchain
=
=
"
"
)
{
-
1223
7
+
1223
7
config
(
"
compiler_cpu_abi
"
)
{
"
-
Wa
-
march
=
loongson3a
"
]
}
-
}
else
if
(
current_cpu
=
=
"
mips64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64
"
)
{
ldflags
+
=
[
"
-
Wl
-
-
hash
-
style
=
sysv
"
]
if
(
custom_toolchain
=
=
"
"
)
{
if
(
is_clang
)
{
-
1261
7
+
1261
7
config
(
"
compiler_cpu_abi
"
)
{
]
ldflags
+
=
[
"
-
mips64r2
"
]
}
-
}
else
if
(
current_cpu
=
=
"
ppc64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
ppc64
"
)
{
if
(
current_os
=
=
"
aix
"
)
{
cflags
+
=
[
"
-
maix64
"
]
ldflags
+
=
[
"
-
maix64
"
]
-
1269
13
+
1269
13
config
(
"
compiler_cpu_abi
"
)
{
cflags
+
=
[
"
-
m64
"
]
ldflags
+
=
[
"
-
m64
"
]
}
-
}
else
if
(
current_cpu
=
=
"
riscv64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
riscv64
"
)
{
if
(
is_clang
)
{
cflags
+
=
[
"
-
-
target
=
riscv64
-
linux
-
gnu
"
]
ldflags
+
=
[
"
-
-
target
=
riscv64
-
linux
-
gnu
"
]
}
cflags
+
=
[
"
-
mabi
=
lp64d
"
]
-
}
else
if
(
current_cpu
=
=
"
loong64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
loong64
"
)
{
if
(
is_clang
)
{
cflags
+
=
[
"
-
-
target
=
loongarch64
-
linux
-
gnu
"
]
ldflags
+
=
[
"
-
-
target
=
loongarch64
-
linux
-
gnu
"
]
-
1284
7
+
1284
7
config
(
"
compiler_cpu_abi
"
)
{
"
-
mabi
=
lp64d
"
"
-
mcmodel
=
medium
"
]
-
}
else
if
(
current_cpu
=
=
"
s390x
"
)
{
+
}
else
if
(
target_cpu
=
=
"
s390x
"
)
{
cflags
+
=
[
"
-
m64
"
]
ldflags
+
=
[
"
-
m64
"
]
}
-
1305
7
+
1305
7
config
(
"
compiler_codegen
"
)
{
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
compiler_codegen
"
]
}
-
if
(
current_cpu
=
=
"
arm64
"
&
&
!
is_win
)
{
+
if
(
target_cpu
=
=
"
arm64
"
&
&
!
is_win
)
{
#
Disable
outlining
everywhere
on
arm64
except
Win
.
For
more
information
see
#
crbug
.
com
/
931297
for
Android
and
crbug
.
com
/
1410297
for
iOS
.
#
TODO
(
crbug
.
com
/
1411363
)
:
Enable
this
on
Windows
if
possible
.
-
1444
7
+
1444
7
config
(
"
rustc_revision
"
)
{
}
config
(
"
compiler_arm_fpu
"
)
{
-
if
(
current_cpu
=
=
"
arm
"
&
&
!
is_ios
&
&
!
is_nacl
)
{
+
if
(
target_cpu
=
=
"
arm
"
&
&
!
is_ios
&
&
!
is_nacl
)
{
cflags
=
[
"
-
mfpu
=
arm_fpu
"
]
if
(
!
arm_use_thumb
)
{
cflags
+
=
[
"
-
marm
"
]
-
1454
14
+
1454
14
config
(
"
compiler_arm_fpu
"
)
{
}
config
(
"
compiler_arm_thumb
"
)
{
-
if
(
current_cpu
=
=
"
arm
"
&
&
arm_use_thumb
&
&
is_posix
&
&
+
if
(
target_cpu
=
=
"
arm
"
&
&
arm_use_thumb
&
&
is_posix
&
&
!
(
is_apple
|
|
is_nacl
)
)
{
cflags
=
[
"
-
mthumb
"
]
}
}
config
(
"
compiler_arm
"
)
{
-
if
(
current_cpu
=
=
"
arm
"
&
&
is_chromeos
)
{
+
if
(
target_cpu
=
=
"
arm
"
&
&
is_chromeos
)
{
#
arm
is
normally
the
default
mode
for
clang
but
on
chromeos
a
wrapper
#
is
used
to
pass
-
mthumb
and
therefor
change
the
default
.
cflags
=
[
"
-
marm
"
]
-
1569
7
+
1569
7
config
(
"
default_warnings
"
)
{
#
Suppress
warnings
about
ABI
changes
on
ARM
(
Clang
doesn
'
t
give
this
#
warning
)
.
-
if
(
current_cpu
=
=
"
arm
"
&
&
!
is_clang
)
{
+
if
(
target_cpu
=
=
"
arm
"
&
&
!
is_clang
)
{
cflags
+
=
[
"
-
Wno
-
psabi
"
]
}
-
1741
10
+
1741
10
config
(
"
chromium_code
"
)
{
"
__STDC_FORMAT_MACROS
"
]
-
if
(
!
is_debug
&
&
!
using_sanitizer
&
&
current_cpu
!
=
"
s390x
"
&
&
-
current_cpu
!
=
"
s390
"
&
&
current_cpu
!
=
"
ppc64
"
&
&
-
current_cpu
!
=
"
mips
"
&
&
current_cpu
!
=
"
mips64
"
&
&
-
current_cpu
!
=
"
riscv64
"
&
&
current_cpu
!
=
"
loong64
"
)
{
+
if
(
!
is_debug
&
&
!
using_sanitizer
&
&
target_cpu
!
=
"
s390x
"
&
&
+
target_cpu
!
=
"
s390
"
&
&
target_cpu
!
=
"
ppc64
"
&
&
+
target_cpu
!
=
"
mips
"
&
&
target_cpu
!
=
"
mips64
"
&
&
+
target_cpu
!
=
"
riscv64
"
&
&
target_cpu
!
=
"
loong64
"
)
{
#
Non
-
chromium
code
is
not
guaranteed
to
compile
cleanly
with
#
_FORTIFY_SOURCE
.
Also
fortified
build
may
fail
when
optimizations
are
#
disabled
so
only
do
that
for
Release
build
.
-
1989
9
+
1989
9
config
(
"
no_incompatible_pointer_warnings
"
)
{
cflags
=
[
]
if
(
is_clang
)
{
cflags
+
=
[
"
-
Wno
-
incompatible
-
pointer
-
types
"
]
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
|
|
target_cpu
=
=
"
mips64el
"
)
{
cflags
+
=
[
"
-
w
"
]
-
}
else
if
(
is_chromeos_ash
&
&
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
is_chromeos_ash
&
&
target_cpu
=
=
"
arm
"
)
{
cflags
+
=
[
"
-
w
"
]
}
}
-
2045
7
+
2045
7
if
(
is_win
)
{
if
(
is_android
)
{
#
TODO
(
jdduke
)
Re
-
enable
on
mips
after
resolving
linking
#
issues
with
libc
+
+
(
crbug
.
com
/
456380
)
.
-
if
(
current_cpu
!
=
"
mipsel
"
&
&
current_cpu
!
=
"
mips64el
"
)
{
+
if
(
target_cpu
!
=
"
mipsel
"
&
&
target_cpu
!
=
"
mips64el
"
)
{
common_optimize_on_ldflags
+
=
[
#
Warn
in
case
of
text
relocations
.
"
-
Wl
-
-
warn
-
shared
-
textrel
"
-
2096
7
+
2096
7
config
(
"
default_stack_frames
"
)
{
#
Omit
frame
pointers
for
leaf
functions
on
x86
otherwise
building
libyuv
#
gives
clang
'
s
register
allocator
issues
see
llvm
.
org
/
PR15798
/
#
crbug
.
com
/
233709
-
if
(
is_clang
&
&
current_cpu
=
=
"
x86
"
&
&
!
is_apple
)
{
+
if
(
is_clang
&
&
target_cpu
=
=
"
x86
"
&
&
!
is_apple
)
{
cflags
+
=
[
"
-
momit
-
leaf
-
frame
-
pointer
"
]
}
}
else
{
-
2486
12
+
2486
12
config
(
"
symbols
"
)
{
#
DWARF
info
may
be
corrupt
;
offsets
in
a
range
list
entry
are
in
different
#
sections
"
there
.
Maybe
just
a
bug
in
nacl_switch_32
.
S
.
_enable_gdb_index
=
-
symbol_level
=
=
2
&
&
!
is_apple
&
&
!
is_nacl
&
&
current_cpu
!
=
"
x86
"
&
&
+
symbol_level
=
=
2
&
&
!
is_apple
&
&
!
is_nacl
&
&
target_cpu
!
=
"
x86
"
&
&
current_os
!
=
"
zos
"
&
&
(
use_gold
|
|
use_lld
)
&
&
#
Disable
on
non
-
fission
32
-
bit
Android
because
it
pushes
#
libcomponents_unittests
over
the
4gb
size
limit
.
-
!
(
is_android
&
&
!
use_debug_fission
&
&
current_cpu
!
=
"
x64
"
&
&
-
current_cpu
!
=
"
arm64
"
)
+
!
(
is_android
&
&
!
use_debug_fission
&
&
target_cpu
!
=
"
x64
"
&
&
+
target_cpu
!
=
"
arm64
"
)
if
(
_enable_gdb_index
)
{
if
(
is_clang
)
{
#
This
flag
enables
the
GNU
-
format
pubnames
and
pubtypes
sections
-
2509
7
+
2509
7
config
(
"
symbols
"
)
{
#
Compress
debug
on
32
-
bit
ARM
to
stay
under
4GB
for
ChromeOS
#
https
:
/
/
b
/
243982712
.
if
(
symbol_level
=
=
2
&
&
is_chromeos_device
&
&
!
use_debug_fission
&
&
-
!
is_nacl
&
&
current_cpu
=
=
"
arm
"
)
{
+
!
is_nacl
&
&
target_cpu
=
=
"
arm
"
)
{
configs
+
=
[
"
/
/
chromium
/
build
/
config
:
compress_debug_sections
"
]
}
diff
-
-
git
a
/
config
/
compiler
/
compiler
.
gni
b
/
config
/
compiler
/
compiler
.
gni
index
e728e8441
.
.
7d4c8b2cf
100644
-
-
-
a
/
config
/
compiler
/
compiler
.
gni
+
+
+
b
/
config
/
compiler
/
compiler
.
gni
-
18
7
+
18
7
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_android
)
{
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
}
-
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
-
104
7
+
104
7
declare_args
(
)
{
#
#
It
'
s
currently
not
possible
to
collect
AFDO
profiles
on
anything
but
#
x86
{
_64
}
.
-
using_mismatched_sample_profile
=
current_cpu
!
=
"
x64
"
&
&
current_cpu
!
=
"
x86
"
+
using_mismatched_sample_profile
=
target_cpu
!
=
"
x64
"
&
&
target_cpu
!
=
"
x86
"
#
Whether
an
error
should
be
raised
on
attempts
to
make
debug
builds
with
#
is_component_build
=
false
.
Very
large
debug
symbols
can
have
unwanted
side
-
152
7
+
152
7
declare_args
(
)
{
#
Use
offsets
rather
than
pointers
in
vtables
in
order
to
reduce
the
number
of
#
relocations
.
This
is
safe
to
enable
only
when
all
C
+
+
code
is
built
with
the
#
flag
set
to
the
same
value
.
-
use_relative_vtables_abi
=
is_android
&
&
current_cpu
=
=
"
arm64
"
&
&
+
use_relative_vtables_abi
=
is_android
&
&
target_cpu
=
=
"
arm64
"
&
&
use_custom_libcxx
&
&
!
is_component_build
}
-
178
14
+
178
14
if
(
is_chromeos
)
{
#
However
Clang
does
not
currently
generate
usable
frame
pointers
in
ARM
#
32
-
bit
builds
(
https
:
/
/
bugs
.
llvm
.
org
/
show_bug
.
cgi
?
id
=
18505
)
so
disable
them
#
there
to
avoid
the
unnecessary
overhead
.
-
enable_frame_pointers
=
current_cpu
!
=
"
arm
"
+
enable_frame_pointers
=
target_cpu
!
=
"
arm
"
}
else
if
(
is_apple
|
|
is_linux
)
{
enable_frame_pointers
=
true
}
else
if
(
is_win
)
{
#
64
-
bit
Windows
ABI
doesn
'
t
support
frame
pointers
.
#
NOTE
:
This
setting
is
actually
not
used
in
the
BUILD
.
gn
for
Windows
#
but
it
still
reflects
correctly
that
we
don
'
t
emit
frame
pointers
on
x64
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
enable_frame_pointers
=
false
}
else
{
enable_frame_pointers
=
true
-
194
19
+
194
19
if
(
is_chromeos
)
{
enable_frame_pointers
=
enable_profiling
|
|
#
Ensure
that
stacks
from
arm64
crash
dumps
are
usable
(
crbug
.
com
/
391706
)
.
-
current_cpu
=
=
"
arm64
"
|
|
+
target_cpu
=
=
"
arm64
"
|
|
#
For
x86
Android
unwind
tables
are
huge
without
frame
pointers
#
(
crbug
.
com
/
762629
)
.
Enabling
frame
pointers
grows
the
code
size
slightly
#
but
overall
shrinks
binaries
considerably
by
avoiding
huge
unwind
#
tables
.
-
(
current_cpu
=
=
"
x86
"
&
&
!
exclude_unwind_tables
&
&
optimize_for_size
)
|
|
+
(
target_cpu
=
=
"
x86
"
&
&
!
exclude_unwind_tables
&
&
optimize_for_size
)
|
|
using_sanitizer
|
|
#
For
caller
-
callee
instrumentation
version
which
needs
frame
pointers
to
#
get
the
caller
address
.
use_call_graph
}
else
if
(
is_fuchsia
)
{
#
Fuchsia
on
arm64
could
use
shadow
call
stack
for
unwinding
.
-
enable_frame_pointers
=
current_cpu
!
=
"
arm64
"
+
enable_frame_pointers
=
target_cpu
!
=
"
arm64
"
}
else
{
#
Explicitly
ask
for
frame
pointers
otherwise
stacks
may
be
missing
for
#
sanitizer
and
profiling
builds
.
-
218
7
+
218
7
if
(
is_chromeos
)
{
#
most
translation
units
that
they
are
emitted
correctly
and
that
the
#
compiler
or
platform
provides
a
way
to
access
them
.
can_unwind_with_frame_pointers
=
enable_frame_pointers
-
if
(
current_cpu
=
=
"
arm
"
&
&
arm_use_thumb
)
{
+
if
(
target_cpu
=
=
"
arm
"
&
&
arm_use_thumb
)
{
#
We
cannot
currently
unwind
ARM
Thumb
frame
pointers
correctly
.
#
See
https
:
/
/
bugs
.
llvm
.
org
/
show_bug
.
cgi
?
id
=
18505
can_unwind_with_frame_pointers
=
false
-
233
23
+
233
23
assert
(
!
can_unwind_with_frame_pointers
|
|
enable_frame_pointers
)
#
Unwinding
with
CFI
table
is
only
possible
on
static
library
builds
and
#
requried
only
when
frame
pointers
are
not
enabled
.
can_unwind_with_cfi_table
=
is_android
&
&
!
is_component_build
&
&
-
!
enable_frame_pointers
&
&
current_cpu
=
=
"
arm
"
+
!
enable_frame_pointers
&
&
target_cpu
=
=
"
arm
"
#
Whether
or
not
cfi
table
should
be
enabled
on
arm
.
#
TODO
(
crbug
.
com
/
1090409
)
:
Replace
can_unwind_with_cfi_table
with
this
once
#
sampling
profiler
is
enabled
on
android
.
-
enable_arm_cfi_table
=
is_android
&
&
!
is_component_build
&
&
current_cpu
=
=
"
arm
"
+
enable_arm_cfi_table
=
is_android
&
&
!
is_component_build
&
&
target_cpu
=
=
"
arm
"
declare_args
(
)
{
#
Whether
to
use
the
gold
linker
from
binutils
instead
of
lld
or
bfd
.
use_gold
=
!
use_lld
&
&
!
(
is_castos
&
&
-
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
mipsel
"
)
)
&
&
+
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
mipsel
"
)
)
&
&
(
(
(
is_linux
|
|
is_chromeos_lacros
)
&
&
-
(
current_cpu
=
=
"
x64
"
|
|
current_cpu
=
=
"
x86
"
|
|
-
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
|
|
-
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
)
)
|
|
-
(
is_android
&
&
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
|
|
-
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
)
)
+
(
target_cpu
=
=
"
x64
"
|
|
target_cpu
=
=
"
x86
"
|
|
+
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
|
|
+
target_cpu
=
=
"
mipsel
"
|
|
target_cpu
=
=
"
mips64el
"
)
)
|
|
+
(
is_android
&
&
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
|
|
+
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
)
)
}
#
Use
relative
paths
for
debug
info
.
This
is
important
to
make
the
build
diff
-
-
git
a
/
config
/
ios
/
BUILD
.
gn
b
/
config
/
ios
/
BUILD
.
gn
index
4b6029c5e
.
.
c0318dcbf
100644
-
-
-
a
/
config
/
ios
/
BUILD
.
gn
+
+
+
b
/
config
/
ios
/
BUILD
.
gn
-
16
16
+
16
16
config
(
"
compiler
"
)
{
common_flags
=
[
]
#
CPU
architecture
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
triplet_cpu
=
"
x86_64
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
)
{
triplet_cpu
=
"
i386
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
armv7
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
armv7
"
)
{
triplet_cpu
=
"
armv7
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
triplet_cpu
=
"
arm64
"
}
else
{
-
assert
(
false
"
unsupported
cpu
:
current_cpu
"
)
+
assert
(
false
"
unsupported
cpu
:
target_cpu
"
)
}
#
Environment
.
diff
-
-
git
a
/
config
/
ios
/
config
.
gni
b
/
config
/
ios
/
config
.
gni
index
c5c10c3f7
.
.
3a5fe9920
100644
-
-
-
a
/
config
/
ios
/
config
.
gni
+
+
+
b
/
config
/
ios
/
config
.
gni
-
12
7
+
12
7
declare_args
(
)
{
}
if
(
target_environment
=
=
"
"
)
{
-
if
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
target_environment
=
"
simulator
"
}
else
{
target_environment
=
"
device
"
diff
-
-
git
a
/
config
/
ios
/
rules
.
gni
b
/
config
/
ios
/
rules
.
gni
index
597c4366f
.
.
546923972
100644
-
-
-
a
/
config
/
ios
/
rules
.
gni
+
+
+
b
/
config
/
ios
/
rules
.
gni
-
51
7
+
51
7
template
(
"
lipo_binary
"
)
{
_output_name
=
invoker
.
output_name
}
-
_all_target_cpu
=
[
current_cpu
]
+
additional_target_cpus
+
_all_target_cpu
=
[
target_cpu
]
+
additional_target_cpus
_all_toolchains
=
[
current_toolchain
]
+
additional_toolchains
_arch_binary_target
=
invoker
.
arch_binary_target
-
769
7
+
769
7
template
(
"
ios_app_bundle
"
)
{
output_name
=
_output_name
output_prefix_override
=
true
-
output_dir
=
"
target_out_dir
/
current_cpu
"
+
output_dir
=
"
target_out_dir
/
target_cpu
"
}
if
(
is_fat_secondary_toolchain
)
{
-
1388
7
+
1388
7
template
(
"
ios_framework_bundle
"
)
{
output_extension
=
"
"
output_name
=
_output_name
output_prefix_override
=
true
-
output_dir
=
"
target_out_dir
/
current_cpu
"
+
output_dir
=
"
target_out_dir
/
target_cpu
"
}
if
(
is_fat_secondary_toolchain
)
{
-
1733
7
+
1733
7
template
(
"
ios_xctest_bundle
"
)
{
deps
=
[
"
:
_arch_loadable_module_source
"
]
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
-
output_dir
=
"
target_out_dir
/
current_cpu
"
+
output_dir
=
"
target_out_dir
/
target_cpu
"
output_name
=
_output_name
output_prefix_override
=
true
output_extension
=
"
"
diff
-
-
git
a
/
config
/
linux
/
BUILD
.
gn
b
/
config
/
linux
/
BUILD
.
gn
index
6ba0fde13
.
.
a8b6d3d09
100644
-
-
-
a
/
config
/
linux
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
BUILD
.
gn
-
15
7
+
15
7
group
(
"
linux
"
)
{
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
that
is
#
Linux
-
only
.
This
is
not
applied
to
Android
but
is
applied
to
ChromeOS
.
config
(
"
compiler
"
)
{
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
cflags
=
[
]
asmflags
=
[
]
-
43
7
+
43
7
config
(
"
runtime_library
"
)
{
#
Mozilla
disable
libatomic
on
linux
builds
if
(
false
)
{
if
(
(
!
is_chromeos
|
|
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
&
&
-
(
!
use_custom_libcxx
|
|
current_cpu
=
=
"
mipsel
"
)
)
{
+
(
!
use_custom_libcxx
|
|
target_cpu
=
=
"
mipsel
"
)
)
{
libs
=
[
"
atomic
"
]
}
}
diff
-
-
git
a
/
config
/
linux
/
pkg_config
.
gni
b
/
config
/
linux
/
pkg_config
.
gni
index
56ea19e28
.
.
ced3813e1
100644
-
-
-
a
/
config
/
linux
/
pkg_config
.
gni
+
+
+
b
/
config
/
linux
/
pkg_config
.
gni
-
60
7
+
60
7
if
(
sysroot
!
=
"
"
)
{
"
-
s
"
rebase_path
(
sysroot
)
"
-
a
"
-
current_cpu
+
target_cpu
]
}
diff
-
-
git
a
/
config
/
mac
/
BUILD
.
gn
b
/
config
/
mac
/
BUILD
.
gn
index
36c46ca39
.
.
46f3b5d6d
100644
-
-
-
a
/
config
/
mac
/
BUILD
.
gn
+
+
+
b
/
config
/
mac
/
BUILD
.
gn
-
16
14
+
16
14
config
(
"
compiler
"
)
{
common_mac_flags
=
[
]
#
CPU
architecture
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
clang_arch
=
"
x86_64
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
)
{
clang_arch
=
"
i386
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
-
clang_arch
=
current_cpu
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
+
clang_arch
=
target_cpu
}
else
{
-
assert
(
false
"
unknown
current_cpu
current_cpu
"
)
+
assert
(
false
"
unknown
target_cpu
target_cpu
"
)
}
if
(
host_os
=
=
"
mac
"
)
{
common_mac_flags
+
=
[
diff
-
-
git
a
/
config
/
mips
.
gni
b
/
config
/
mips
.
gni
index
2df1646a8
.
.
056856198
100644
-
-
-
a
/
config
/
mips
.
gni
+
+
+
b
/
config
/
mips
.
gni
-
4
7
+
4
7
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
-
#
These
are
primarily
relevant
in
current_cpu
=
=
"
mips
*
"
contexts
where
+
#
These
are
primarily
relevant
in
target_cpu
=
=
"
mips
*
"
contexts
where
#
MIPS
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
#
other
contexts
when
the
code
will
change
its
behavior
based
on
the
#
cpu
it
wants
to
generate
code
for
.
-
13
8
+
13
8
declare_args
(
)
{
mips_use_mmi
=
false
}
-
if
(
current_cpu
=
=
"
mipsel
"
|
|
v8_current_cpu
=
=
"
mipsel
"
|
|
-
current_cpu
=
=
"
mips
"
|
|
v8_current_cpu
=
=
"
mips
"
)
{
+
if
(
target_cpu
=
=
"
mipsel
"
|
|
v8_target_cpu
=
=
"
mipsel
"
|
|
+
target_cpu
=
=
"
mips
"
|
|
v8_target_cpu
=
=
"
mips
"
)
{
declare_args
(
)
{
#
MIPS
arch
variant
.
Possible
values
are
:
#
"
r1
"
-
43
8
+
43
8
if
(
current_cpu
=
=
"
mipsel
"
|
|
v8_current_cpu
=
=
"
mipsel
"
|
|
#
"
fpxx
"
:
sets
the
GCC
-
mfpxx
option
.
mips_fpu_mode
=
"
fp32
"
}
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
|
|
v8_current_cpu
=
=
"
mips64el
"
|
|
-
current_cpu
=
=
"
mips64
"
|
|
v8_current_cpu
=
=
"
mips64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
|
|
v8_target_cpu
=
=
"
mips64el
"
|
|
+
target_cpu
=
=
"
mips64
"
|
|
v8_target_cpu
=
=
"
mips64
"
)
{
#
MIPS
arch
variant
.
Possible
values
are
:
#
"
r2
"
#
"
r6
"
diff
-
-
git
a
/
config
/
nacl
/
BUILD
.
gn
b
/
config
/
nacl
/
BUILD
.
gn
index
22d5827b9
.
.
8e79aa10a
100644
-
-
-
a
/
config
/
nacl
/
BUILD
.
gn
+
+
+
b
/
config
/
nacl
/
BUILD
.
gn
-
17
7
+
17
7
config
(
"
nacl_defines
"
)
{
defines
=
[
"
__STDC_LIMIT_MACROS
=
1
"
]
}
-
if
(
current_cpu
=
=
"
pnacl
"
)
{
+
if
(
target_cpu
=
=
"
pnacl
"
)
{
#
TODO
:
Remove
the
following
definition
once
NACL_BUILD_ARCH
and
#
NACL_BUILD_SUBARCH
are
defined
by
the
PNaCl
toolchain
.
defines
+
=
[
"
NACL_BUILD_ARCH
=
pnacl
"
]
-
49
7
+
49
7
config
(
"
nacl_static_libstdc
+
+
"
)
{
#
libstdc
+
+
can
then
lead
to
linking
against
symbols
that
are
not
found
when
#
running
the
executable
.
#
Therefore
link
statically
instead
.
-
if
(
is_linux
&
&
current_cpu
=
=
"
x86
"
)
{
+
if
(
is_linux
&
&
target_cpu
=
=
"
x86
"
)
{
ldflags
=
[
"
-
static
-
libstdc
+
+
"
]
}
}
-
76
7
+
76
7
config
(
"
compiler
"
)
{
ldflags
=
[
]
libs
=
[
]
-
if
(
is_clang
&
&
current_cpu
!
=
"
pnacl
"
)
{
+
if
(
is_clang
&
&
target_cpu
!
=
"
pnacl
"
)
{
#
-
no
-
integrated
-
as
is
the
default
in
nacl
-
clang
for
historical
#
compatibility
with
inline
assembly
code
and
so
forth
.
But
there
#
are
no
such
cases
in
Chromium
code
and
-
integrated
-
as
is
nicer
in
-
102
7
+
102
7
config
(
"
compiler_codegen
"
)
{
"
-
fomit
-
frame
-
pointer
"
]
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
#
The
x86
-
32
IRT
needs
to
be
callable
with
an
under
-
aligned
#
stack
;
so
we
disable
SSE
instructions
which
can
fault
on
#
misaligned
addresses
.
See
diff
-
-
git
a
/
config
/
nacl
/
config
.
gni
b
/
config
/
nacl
/
config
.
gni
index
dd774495e
.
.
103cb93d8
100644
-
-
-
a
/
config
/
nacl
/
config
.
gni
+
+
+
b
/
config
/
nacl
/
config
.
gni
-
18
22
+
18
22
declare_args
(
)
{
nacl_toolchain_dir
=
"
/
/
native_client
/
toolchain
/
{
host_os
}
_x86
"
if
(
is_nacl_glibc
)
{
-
if
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
nacl_toolchain_package
=
"
nacl_x86_glibc
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
nacl_toolchain_package
=
"
nacl_arm_glibc
"
}
}
else
{
nacl_toolchain_package
=
"
pnacl_newlib
"
}
-
if
(
current_cpu
=
=
"
pnacl
"
)
{
+
if
(
target_cpu
=
=
"
pnacl
"
)
{
_nacl_tuple
=
"
pnacl
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
_nacl_tuple
=
"
x86_64
-
nacl
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
_nacl_tuple
=
"
arm
-
nacl
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
)
{
_nacl_tuple
=
"
mipsel
-
nacl
"
}
else
{
#
In
order
to
allow
this
file
to
be
included
unconditionally
-
49
5
+
49
5
nacl_toolchain_tooldir
=
"
{
nacl_toolchain_dir
}
/
{
nacl_toolchain_package
}
/
{
_nacl_tuple
}
"
nacl_toolprefix
=
"
{
nacl_toolchain_bindir
}
/
{
_nacl_tuple
}
-
"
-
nacl_irt_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
irt_
"
+
current_cpu
+
nacl_irt_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
irt_
"
+
target_cpu
is_nacl_irt
=
current_toolchain
=
=
nacl_irt_toolchain
diff
-
-
git
a
/
config
/
nacl
/
host_toolchain
.
gni
b
/
config
/
nacl
/
host_toolchain
.
gni
index
df74e1e5f
.
.
6552ac0c7
100644
-
-
-
a
/
config
/
nacl
/
host_toolchain
.
gni
+
+
+
b
/
config
/
nacl
/
host_toolchain
.
gni
-
6
13
+
6
13
nacl_bootstrap_compiler
=
"
g
+
+
"
if
(
default_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
{
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
-
if
(
target_cpu
=
=
"
arm64
"
&
&
current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
&
&
target_cpu
=
=
"
arm
"
)
{
nacl_bootstrap_compiler
=
cros_nacl_helper_arm32_cxx
}
else
{
nacl_bootstrap_compiler
=
cros_target_cxx
}
-
}
else
if
(
current_cpu
=
=
"
arm
"
&
&
!
is_android
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
&
&
!
is_android
)
{
nacl_bootstrap_compiler
=
"
arm
-
linux
-
gnueabihf
-
g
+
+
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
&
&
!
is_android
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
&
&
!
is_android
)
{
nacl_bootstrap_compiler
=
"
mipsel
-
linux
-
gnu
-
g
+
+
"
}
diff
-
-
git
a
/
config
/
nacl
/
rules
.
gni
b
/
config
/
nacl
/
rules
.
gni
index
7d916e8f5
.
.
5a0daf061
100644
-
-
-
a
/
config
/
nacl
/
rules
.
gni
+
+
+
b
/
config
/
nacl
/
rules
.
gni
-
40
7
+
40
7
template
(
"
generate_nmf
"
)
{
#
TODO
(
phosek
)
:
Remove
this
conditional
once
#
https
:
/
/
bugs
.
chromium
.
org
/
p
/
nativeclient
/
issues
/
detail
?
id
=
4339
is
#
resolved
.
-
if
(
current_cpu
=
=
"
pnacl
"
)
{
+
if
(
target_cpu
=
=
"
pnacl
"
)
{
objdump
=
rebase_path
(
"
{
nacl_toolchain_bindir
}
/
x86_64
-
nacl
-
objdump
"
)
}
else
{
objdump
=
rebase_path
(
"
{
nacl_toolprefix
}
objdump
"
)
-
75
18
+
75
18
template
(
"
generate_nmf
"
)
{
#
NOTE
:
There
is
no
explicit
dependency
for
the
lib
directory
#
(
lib32
and
lib64
for
x86
/
x64
)
created
in
the
product
directory
.
#
They
are
created
as
a
side
-
effect
of
nmf
creation
.
-
if
(
current_cpu
!
=
"
x86
"
&
&
current_cpu
!
=
"
x64
"
)
{
+
if
(
target_cpu
!
=
"
x86
"
&
&
target_cpu
!
=
"
x64
"
)
{
nmfflags
+
=
[
"
-
-
library
-
path
=
"
+
rebase_path
(
"
{
nacl_toolchain_tooldir
}
/
lib
"
root_build_dir
)
]
-
if
(
current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
)
{
data
+
=
[
"
{
lib_path
}
/
libarm
/
"
]
}
else
{
data
+
=
[
"
{
lib_path
}
/
lib
/
"
]
}
}
else
{
#
For
x86
-
32
the
lib
/
directory
is
called
lib32
/
instead
.
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
nmfflags
+
=
[
"
-
-
library
-
path
=
"
+
rebase_path
(
"
{
nacl_toolchain_tooldir
}
/
lib32
"
root_build_dir
)
]
-
98
12
+
98
12
template
(
"
generate_nmf
"
)
{
#
gets
handled
at
a
higher
level
(
see
the
nacl_test_data
template
)
#
so
a
single
generate_nmf
invocation
gets
both
x86
-
32
and
x86
-
64
#
nexes
listed
in
executables
.
-
if
(
current_cpu
=
=
"
x64
"
|
|
target_os
=
=
"
win
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
|
|
target_os
=
=
"
win
"
)
{
#
For
x86
-
64
the
lib
/
directory
is
called
lib64
/
instead
#
when
copied
by
create_nmf
.
py
.
glibc_tc
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
glibc
"
-
assert
(
current_toolchain
=
=
"
{
glibc_tc
}
_
{
current_cpu
}
"
)
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
assert
(
current_toolchain
=
=
"
{
glibc_tc
}
_
{
target_cpu
}
"
)
+
if
(
target_cpu
=
=
"
x64
"
)
{
x64_out_dir
=
root_out_dir
}
else
{
x64_out_dir
=
get_label_info
(
"
:
{
target_name
}
(
{
glibc_tc
}
_x64
)
"
-
123
7
+
123
7
template
(
"
generate_nmf
"
)
{
"
-
-
objdump
=
"
+
rebase_path
(
objdump
root_build_dir
)
"
-
-
output
=
"
+
rebase_path
(
nmf
root_build_dir
)
]
+
nmfflags
+
rebase_path
(
sources
root_build_dir
)
-
if
(
is_nacl_glibc
&
&
current_cpu
=
=
"
arm
"
)
{
+
if
(
is_nacl_glibc
&
&
target_cpu
=
=
"
arm
"
)
{
deps
+
=
[
"
/
/
native_client
/
src
/
untrusted
/
elf_loader
:
elf_loader
"
]
}
}
diff
-
-
git
a
/
config
/
posix
/
BUILD
.
gn
b
/
config
/
posix
/
BUILD
.
gn
index
19cd33757
.
.
2e83cc90c
100644
-
-
-
a
/
config
/
posix
/
BUILD
.
gn
+
+
+
b
/
config
/
posix
/
BUILD
.
gn
-
35
7
+
35
7
config
(
"
runtime_library
"
)
{
#
changes
)
.
Nothing
should
ever
read
this
define
.
sysroot_key
=
exec_script
(
"
/
/
chromium
/
build
/
linux
/
sysroot_scripts
/
install
-
sysroot
.
py
"
-
[
"
-
-
print
-
key
=
current_cpu
"
]
+
[
"
-
-
print
-
key
=
target_cpu
"
]
"
trim
string
"
[
"
/
/
chromium
/
build
/
linux
/
sysroot_scripts
/
sysroots
.
json
"
]
)
defines
+
=
[
"
CR_SYSROOT_KEY
=
sysroot_key
"
]
diff
-
-
git
a
/
config
/
rust
.
gni
b
/
config
/
rust
.
gni
index
f0da1a889
.
.
35ee9f030
100644
-
-
-
a
/
config
/
rust
.
gni
+
+
+
b
/
config
/
rust
.
gni
-
81
11
+
81
11
declare_args
(
)
{
#
Platform
support
for
"
official
"
toolchains
(
Android
or
Chromium
)
android_toolchain_supports_platform
=
(
!
is_nacl
&
&
-
(
is_android
&
&
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
|
|
-
current_cpu
=
=
"
x64
"
|
|
current_cpu
=
=
"
x86
"
)
)
)
|
|
-
(
is_linux
&
&
current_cpu
=
=
"
x64
"
)
+
(
is_android
&
&
(
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
|
|
+
target_cpu
=
=
"
x64
"
|
|
target_cpu
=
=
"
x86
"
)
)
)
|
|
+
(
is_linux
&
&
target_cpu
=
=
"
x64
"
)
chromium_toolchain_supports_platform
=
-
!
is_nacl
&
&
is_linux
&
&
current_cpu
=
=
"
x64
"
+
!
is_nacl
&
&
is_linux
&
&
target_cpu
=
=
"
x64
"
custom_toolchain_supports_platform
=
!
is_nacl
|
|
rust_toolchain_supports_nacl
toolchain_has_rust
=
-
159
7
+
159
7
if
(
enable_rust
)
{
#
other
toolchains
.
rust_abi_target
=
"
"
if
(
is_linux
)
{
-
cpu
=
current_cpu
+
cpu
=
target_cpu
if
(
cpu
=
=
"
arm64
"
)
{
cpu
=
"
aarch64
"
}
else
if
(
cpu
=
=
"
x64
"
)
{
-
175
25
+
175
25
if
(
is_linux
)
{
rust_abi_target
=
"
armv7
-
linux
-
androideabi
"
}
}
else
if
(
is_fuchsia
)
{
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
rust_abi_target
=
"
aarch64
-
fuchsia
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
rust_abi_target
=
"
x86_64
-
fuchsia
"
}
else
{
assert
(
false
"
Architecture
not
supported
"
)
}
}
else
if
(
is_ios
)
{
-
if
(
current_cpu
=
=
"
arm64
"
)
{
+
if
(
target_cpu
=
=
"
arm64
"
)
{
rust_abi_target
=
"
aarch64
-
apple
-
ios
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
#
There
'
s
also
an
armv7s
-
apple
-
ios
which
targets
a
more
recent
ARMv7
#
generation
CPU
found
in
later
iPhones
.
We
'
ll
go
with
the
older
one
for
#
maximal
compatibility
.
As
we
come
to
support
all
the
different
platforms
#
with
Rust
we
might
want
to
be
more
precise
here
.
rust_abi_target
=
"
armv7
-
apple
-
ios
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
rust_abi_target
=
"
x86_64
-
apple
-
ios
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
)
{
rust_abi_target
=
"
i386
-
apple
-
ios
"
}
else
{
assert
(
false
"
Architecture
not
supported
"
)
-
206
23
+
206
23
assert
(
!
toolchain_has_rust
|
|
rust_abi_target
!
=
"
"
)
#
This
variable
is
passed
to
the
Rust
libstd
build
.
rust_target_arch
=
"
"
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
rust_target_arch
=
"
x86
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
rust_target_arch
=
"
x86_64
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
rust_target_arch
=
"
arm
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
rust_target_arch
=
"
aarch64
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
)
{
rust_target_arch
=
"
mips
"
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
)
{
rust_target_arch
=
"
mips64
"
-
}
else
if
(
current_cpu
=
=
"
s390x
"
)
{
+
}
else
if
(
target_cpu
=
=
"
s390x
"
)
{
rust_target_arch
=
"
s390x
"
-
}
else
if
(
current_cpu
=
=
"
ppc64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
ppc64
"
)
{
rust_target_arch
=
"
powerpc64
"
-
}
else
if
(
current_cpu
=
=
"
riscv64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
riscv64
"
)
{
rust_target_arch
=
"
riscv64
"
}
diff
-
-
git
a
/
config
/
sanitizers
/
BUILD
.
gn
b
/
config
/
sanitizers
/
BUILD
.
gn
index
a98e064da
.
.
fb0372910
100644
-
-
-
a
/
config
/
sanitizers
/
BUILD
.
gn
+
+
+
b
/
config
/
sanitizers
/
BUILD
.
gn
-
55
7
+
55
7
group
(
"
deps
"
)
{
}
}
-
assert
(
!
(
is_win
&
&
is_asan
&
&
current_cpu
=
=
"
x86
"
)
+
assert
(
!
(
is_win
&
&
is_asan
&
&
target_cpu
=
=
"
x86
"
)
"
ASan
is
only
supported
in
64
-
bit
builds
on
Windows
.
"
)
if
(
(
is_apple
|
|
is_win
)
&
&
is_asan
)
{
-
63
7
+
63
7
if
(
(
is_apple
|
|
is_win
)
&
&
is_asan
)
{
_clang_rt_dso_path
=
"
darwin
/
libclang_rt
.
asan_osx_dynamic
.
dylib
"
}
else
if
(
is_ios
)
{
_clang_rt_dso_path
=
"
darwin
/
libclang_rt
.
asan_iossim_dynamic
.
dylib
"
-
}
else
if
(
is_win
&
&
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
is_win
&
&
target_cpu
=
=
"
x64
"
)
{
_clang_rt_dso_path
=
"
windows
/
clang_rt
.
asan_dynamic
-
x86_64
.
dll
"
}
-
224
14
+
224
14
config
(
"
default_sanitizer_ldflags
"
)
{
#
In
the
static
-
library
build
ASan
libraries
are
different
for
#
executables
and
dlls
see
link_executable
and
link_shared_library
below
.
#
This
here
handles
only
the
component
build
.
-
assert
(
current_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
+
assert
(
target_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
libs
=
[
"
clang_rt
.
asan_dynamic
-
x86_64
.
lib
"
"
clang_rt
.
asan_dynamic_runtime_thunk
-
x86_64
.
lib
"
]
}
if
(
use_libfuzzer
)
{
-
assert
(
current_cpu
=
=
"
x64
"
"
LibFuzzer
unsupported
architecture
"
)
+
assert
(
target_cpu
=
=
"
x64
"
"
LibFuzzer
unsupported
architecture
"
)
assert
(
!
is_component_build
"
LibFuzzer
only
supports
non
-
component
builds
on
Windows
"
)
-
280
14
+
280
14
config
(
"
asan_flags
"
)
{
config
(
"
link_executable
"
)
{
if
(
is_asan
&
&
is_win
&
&
!
is_component_build
)
{
-
assert
(
current_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
+
assert
(
target_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
ldflags
=
[
"
-
wholearchive
:
clang_rt
.
asan
-
x86_64
.
lib
"
]
}
}
config
(
"
link_shared_library
"
)
{
if
(
is_asan
&
&
is_win
&
&
!
is_component_build
)
{
-
assert
(
current_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
+
assert
(
target_cpu
=
=
"
x64
"
"
WinASan
unsupported
architecture
"
)
libs
=
[
"
clang_rt
.
asan_dll_thunk
-
x86_64
.
lib
"
]
}
}
-
370
7
+
370
7
config
(
"
coverage_flags
"
)
{
"
-
mllvm
"
"
-
sanitizer
-
coverage
-
prune
-
blocks
=
1
"
]
-
if
(
current_cpu
=
=
"
arm
"
)
{
+
if
(
target_cpu
=
=
"
arm
"
)
{
#
http
:
/
/
crbug
.
com
/
517105
cflags
+
=
[
"
-
mllvm
"
diff
-
-
git
a
/
config
/
sanitizers
/
sanitizers
.
gni
b
/
config
/
sanitizers
/
sanitizers
.
gni
index
9cc221326
.
.
5eaca6194
100644
-
-
-
a
/
config
/
sanitizers
/
sanitizers
.
gni
+
+
+
b
/
config
/
sanitizers
/
sanitizers
.
gni
-
138
7
+
138
7
if
(
!
is_a_target_toolchain
|
|
toolchain_disables_sanitizers
)
{
use_libfuzzer
=
false
use_locally_built_instrumented_libraries
=
false
use_sanitizer_coverage
=
false
-
}
else
if
(
current_cpu
!
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
!
=
"
arm64
"
)
{
is_hwasan
=
false
}
-
222
7
+
222
7
if
(
use_libfuzzer
&
&
(
is_linux
|
|
is_chromeos
)
)
{
assert
(
!
is_debug
|
|
!
(
is_msan
|
|
is_ubsan
|
|
is_ubsan_vptr
)
"
Sanitizers
should
generally
be
used
in
release
(
set
is_debug
=
false
)
.
"
)
-
assert
(
!
is_msan
|
|
(
(
is_linux
|
|
is_chromeos
)
&
&
current_cpu
=
=
"
x64
"
)
+
assert
(
!
is_msan
|
|
(
(
is_linux
|
|
is_chromeos
)
&
&
target_cpu
=
=
"
x64
"
)
"
MSan
currently
only
works
on
64
-
bit
Linux
and
ChromeOS
builds
.
"
)
assert
(
!
is_lsan
|
|
is_asan
"
is_lsan
=
true
requires
is_asan
=
true
also
.
"
)
diff
-
-
git
a
/
config
/
sysroot
.
gni
b
/
config
/
sysroot
.
gni
index
09167b5a6
.
.
96e6dc3a8
100644
-
-
-
a
/
config
/
sysroot
.
gni
+
+
+
b
/
config
/
sysroot
.
gni
-
19
13
+
19
13
declare_args
(
)
{
#
Controls
default
is_linux
sysroot
.
If
set
to
true
and
sysroot
#
is
empty
default
sysroot
is
calculated
.
-
use_sysroot
=
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
|
|
-
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
|
|
-
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
+
use_sysroot
=
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
|
|
+
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
|
|
+
target_cpu
=
=
"
mipsel
"
|
|
target_cpu
=
=
"
mips64el
"
}
if
(
sysroot
=
=
"
"
)
{
-
if
(
current_os
=
=
target_os
&
&
current_cpu
=
=
target_cpu
&
&
+
if
(
current_os
=
=
target_os
&
&
target_cpu
=
=
target_cpu
&
&
target_sysroot
!
=
"
"
)
{
sysroot
=
target_sysroot
}
else
if
(
is_android
)
{
-
36
24
+
36
24
if
(
sysroot
=
=
"
"
)
{
}
else
if
(
(
is_linux
|
|
is_chromeos
)
&
&
use_sysroot
)
{
#
By
default
build
against
a
sysroot
image
downloaded
from
Cloud
Storage
#
during
gclient
runhooks
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_amd64
-
sysroot
"
-
}
else
if
(
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x86
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_i386
-
sysroot
"
-
}
else
if
(
current_cpu
=
=
"
mipsel
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mipsel
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_mips
-
sysroot
"
-
}
else
if
(
current_cpu
=
=
"
mips64el
"
)
{
+
}
else
if
(
target_cpu
=
=
"
mips64el
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_mips64el
-
sysroot
"
-
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_arm
-
sysroot
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
sysroot
=
"
target_sysroot_dir
/
debian_bullseye_arm64
-
sysroot
"
}
else
{
assert
(
false
"
No
linux
sysroot
for
cpu
:
target_cpu
"
)
}
if
(
sysroot
!
=
"
"
)
{
-
_script_arch
=
current_cpu
+
_script_arch
=
target_cpu
if
(
_script_arch
=
=
"
x86
"
)
{
_script_arch
=
"
i386
"
}
else
if
(
_script_arch
=
=
"
x64
"
)
{
-
72
8
+
72
8
if
(
sysroot
=
=
"
"
)
{
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
sysroot
=
ios_sdk_path
}
else
if
(
is_fuchsia
)
{
-
if
(
current_cpu
=
=
"
arm64
"
|
|
current_cpu
=
=
"
x64
"
)
{
-
sysroot
=
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
arch
/
current_cpu
/
sysroot
"
+
if
(
target_cpu
=
=
"
arm64
"
|
|
target_cpu
=
=
"
x64
"
)
{
+
sysroot
=
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
arch
/
target_cpu
/
sysroot
"
}
}
}
diff
-
-
git
a
/
config
/
win
/
BUILD
.
gn
b
/
config
/
win
/
BUILD
.
gn
index
827ba6b02
.
.
b8b41ad10
100644
-
-
-
a
/
config
/
win
/
BUILD
.
gn
+
+
+
b
/
config
/
win
/
BUILD
.
gn
-
50
7
+
50
7
declare_args
(
)
{
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
that
is
#
Windows
-
only
.
config
(
"
compiler
"
)
{
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
asmflags
=
[
#
When
/
safeseh
is
specified
the
linker
will
only
produce
an
image
if
it
#
can
also
produce
a
table
of
the
image
'
s
safe
exception
handlers
.
This
-
106
28
+
106
28
config
(
"
compiler
"
)
{
]
}
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
if
(
host_cpu
=
=
"
x86
"
|
|
host_cpu
=
=
"
x64
"
)
{
cflags
+
=
[
"
-
m32
"
]
}
else
{
cflags
+
=
[
"
-
-
target
=
i386
-
windows
"
]
}
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
if
(
host_cpu
=
=
"
x86
"
|
|
host_cpu
=
=
"
x64
"
)
{
cflags
+
=
[
"
-
m64
"
]
}
else
{
cflags
+
=
[
"
-
-
target
=
x86_64
-
windows
"
]
}
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
cflags
+
=
[
"
-
-
target
=
arm64
-
windows
"
]
}
else
{
-
assert
(
false
"
unknown
current_cpu
"
+
current_cpu
)
+
assert
(
false
"
unknown
target_cpu
"
+
target_cpu
)
}
#
Chrome
currently
requires
SSE3
.
Clang
supports
targeting
any
Intel
#
microarchitecture
.
MSVC
only
supports
a
subset
of
architectures
and
the
#
next
step
after
SSE2
will
be
AVX
.
-
if
(
current_cpu
=
=
"
x86
"
|
|
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
cflags
+
=
[
"
-
msse3
"
]
}
-
306
7
+
306
7
config
(
"
winver
"
)
{
#
Linker
flags
for
Windows
SDK
setup
this
is
applied
only
to
EXEs
and
DLLs
.
config
(
"
sdk_link
"
)
{
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
ldflags
=
[
"
/
SAFESEH
"
#
Not
compatible
with
x64
so
use
only
for
x86
.
"
/
largeaddressaware
"
-
530
11
+
530
11
config
(
"
static_crt
"
)
{
#
Subsystem
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
This
is
appended
to
the
subsystem
to
specify
a
minimum
version
.
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
#
The
number
after
the
comma
is
the
minimum
required
OS
version
.
#
5
.
02
=
Windows
Server
2003
.
subsystem_version_suffix
=
"
5
.
02
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
#
Windows
ARM64
requires
Windows
10
.
subsystem_version_suffix
=
"
10
.
0
"
}
else
{
diff
-
-
git
a
/
linux
/
extract_symbols
.
gni
b
/
linux
/
extract_symbols
.
gni
index
259ab3722
.
.
ea7c84c94
100644
-
-
-
a
/
linux
/
extract_symbols
.
gni
+
+
+
b
/
linux
/
extract_symbols
.
gni
-
10
7
+
10
7
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
binary
:
Path
to
the
binary
containing
symbols
to
extract
e
.
g
.
:
#
"
root_out_dir
/
chrome
"
#
symbol_file
:
Desired
output
file
for
symbols
e
.
g
.
:
-
#
"
root_out_dir
/
chrome
.
breakpad
.
current_cpu
"
+
#
"
root_out_dir
/
chrome
.
breakpad
.
target_cpu
"
template
(
"
extract_symbols
"
)
{
forward_variables_from
(
invoker
[
diff
-
-
git
a
/
toolchain
/
aix
/
BUILD
.
gn
b
/
toolchain
/
aix
/
BUILD
.
gn
index
1f8132a8d
.
.
4d1e2c1b7
100644
-
-
-
a
/
toolchain
/
aix
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
aix
/
BUILD
.
gn
-
14
7
+
14
7
gcc_toolchain
(
"
ppc64
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
ppc64
"
+
target_cpu
=
"
ppc64
"
current_os
=
"
aix
"
#
reclient
does
not
support
gcc
.
diff
-
-
git
a
/
toolchain
/
android
/
BUILD
.
gn
b
/
toolchain
/
android
/
BUILD
.
gn
index
76158de15
.
.
7f305699c
100644
-
-
-
a
/
toolchain
/
android
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
android
/
BUILD
.
gn
-
41
13
+
41
13
template
(
"
android_clang_toolchain
"
)
{
if
(
_use_debug_fission
)
{
#
llvm
-
dwp
does
not
work
with
thin
lto
so
use
binutils
one
.
#
https
:
/
/
crbug
.
com
/
1264130
-
if
(
toolchain_args
.
current_cpu
=
=
"
arm
"
)
{
+
if
(
toolchain_args
.
target_cpu
=
=
"
arm
"
)
{
_dwp
=
"
arm
-
linux
-
androideabi
-
4
.
9
/
prebuilt
/
linux
-
x86_64
/
bin
/
arm
-
linux
-
androideabi
-
dwp
"
-
}
else
if
(
toolchain_args
.
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
toolchain_args
.
target_cpu
=
=
"
arm64
"
)
{
_dwp
=
"
aarch64
-
linux
-
android
-
4
.
9
/
prebuilt
/
linux
-
x86_64
/
bin
/
aarch64
-
linux
-
android
-
dwp
"
-
}
else
if
(
toolchain_args
.
current_cpu
=
=
"
x86
"
)
{
+
}
else
if
(
toolchain_args
.
target_cpu
=
=
"
x86
"
)
{
_dwp
=
"
x86
-
4
.
9
/
prebuilt
/
linux
-
x86_64
/
bin
/
i686
-
linux
-
android
-
dwp
"
-
}
else
if
(
toolchain_args
.
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
toolchain_args
.
target_cpu
=
=
"
x64
"
)
{
_dwp
=
"
x86_64
-
4
.
9
/
prebuilt
/
linux
-
x86_64
/
bin
/
x86_64
-
linux
-
android
-
dwp
"
}
else
{
_dwp
=
"
llvm
/
prebuilt
/
linux
-
x86_64
/
bin
/
llvm
-
dwp
"
-
72
7
+
72
7
template
(
"
android_clang_toolchain
"
)
{
android_clang_toolchain
(
"
android_clang_x86
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
#
We
lack
the
libclang_rt
.
profile
library
for
x86
and
x86_64
so
we
cannot
#
link
any
binaries
that
are
generated
with
coverage
instrumentation
.
-
96
19
+
96
19
android_clang_toolchain
(
"
android_clang_x86
"
)
{
android_clang_toolchain
(
"
android_clang_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
}
}
android_clang_toolchain
(
"
android_clang_mipsel
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
mipsel
"
+
target_cpu
=
"
mipsel
"
}
}
android_clang_toolchain
(
"
android_clang_x64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
#
We
lack
the
libclang_rt
.
profile
library
for
x86
and
x86_64
so
we
cannot
#
link
any
binaries
that
are
generated
with
coverage
instrumentation
.
-
132
13
+
132
13
android_clang_toolchain
(
"
android_clang_x64
"
)
{
android_clang_toolchain
(
"
android_clang_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
}
}
android_clang_toolchain
(
"
android_clang_arm64_hwasan
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
is_hwasan
=
true
android64_ndk_api_level
=
29
}
-
146
7
+
146
7
android_clang_toolchain
(
"
android_clang_arm64_hwasan
"
)
{
android_clang_toolchain
(
"
android_clang_mips64el
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
mips64el
"
+
target_cpu
=
"
mips64el
"
}
}
-
162
7
+
162
7
android_clang_toolchain
(
"
android_clang_mips64el
"
)
{
clang_toolchain
(
"
robolectric_
host_cpu
"
)
{
toolchain_args
=
{
current_os
=
host_os
-
current_cpu
=
host_cpu
+
target_cpu
=
host_cpu
is_robolectric
=
true
}
}
diff
-
-
git
a
/
toolchain
/
cros
/
BUILD
.
gn
b
/
toolchain
/
cros
/
BUILD
.
gn
index
f0d4bd443
.
.
318b3d6a1
100644
-
-
-
a
/
toolchain
/
cros
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
cros
/
BUILD
.
gn
-
65
7
+
65
7
template
(
"
cros_toolchain
"
)
{
#
This
is
the
normal
toolchain
for
most
targets
.
cros_toolchain
(
"
target
"
)
{
toolchain_args
=
{
-
current_cpu
=
target_cpu
+
target_cpu
=
target_cpu
current_os
=
"
chromeos
"
sysroot
=
target_sysroot
}
-
98
9
+
98
9
cros_toolchain
(
"
target
"
)
{
cros_toolchain
(
"
nacl_bootstrap
"
)
{
toolchain_args
=
{
if
(
target_cpu
=
=
"
arm64
"
)
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
}
else
{
-
current_cpu
=
target_cpu
+
target_cpu
=
target_cpu
}
current_os
=
"
chromeos
"
use_debug_fission
=
false
-
144
7
+
144
7
cros_toolchain
(
"
nacl_bootstrap
"
)
{
#
building
an
Arm32
nacl_helper
binary
on
Arm64
ChromeOS
targets
.
cros_toolchain
(
"
nacl_helper_arm32
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
current_os
=
"
chromeos
"
use_debug_fission
=
false
use_gold
=
false
-
176
7
+
176
7
cros_toolchain
(
"
nacl_helper_arm32
"
)
{
cros_toolchain
(
"
host
"
)
{
toolchain_args
=
{
-
current_cpu
=
host_cpu
+
target_cpu
=
host_cpu
current_os
=
"
linux
"
sysroot
=
cros_host_sysroot
}
-
206
11
+
206
11
cros_toolchain
(
"
host
"
)
{
cros_toolchain
(
"
v8_snapshot
"
)
{
toolchain_args
=
{
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
mipsel
"
)
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
}
else
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
}
-
v8_current_cpu
=
v8_target_cpu
+
v8_target_cpu
=
v8_target_cpu
current_os
=
"
linux
"
sysroot
=
cros_v8_snapshot_sysroot
}
-
274
7
+
274
7
if
(
also_build_lacros_chrome_for_architecture
!
=
"
"
)
{
current_os
=
"
chromeos
"
target_os
=
"
chromeos
"
-
current_cpu
=
current_cpu
+
target_cpu
=
target_cpu
also_build_lacros_chrome_for_architecture
=
"
"
chromeos_is_browser_only
=
true
use_clang_coverage
=
false
diff
-
-
git
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
index
4040aa762
.
.
2136148db
100644
-
-
-
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
-
27
12
+
27
12
template
(
"
fuchsia_clang_toolchain
"
)
{
fuchsia_clang_toolchain
(
"
x64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
}
}
fuchsia_clang_toolchain
(
"
arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
}
}
diff
-
-
git
a
/
toolchain
/
gcc_toolchain
.
gni
b
/
toolchain
/
gcc_toolchain
.
gni
index
29b45eab5
.
.
f28d8cc0e
100644
-
-
-
a
/
toolchain
/
gcc_toolchain
.
gni
+
+
+
b
/
toolchain
/
gcc_toolchain
.
gni
-
132
8
+
132
8
template
(
"
single_gcc_toolchain
"
)
{
assert
(
defined
(
invoker
.
toolchain_args
)
"
Toolchains
must
specify
toolchain_args
"
)
invoker_toolchain_args
=
invoker
.
toolchain_args
-
assert
(
defined
(
invoker_toolchain_args
.
current_cpu
)
-
"
toolchain_args
must
specify
a
current_cpu
"
)
+
assert
(
defined
(
invoker_toolchain_args
.
target_cpu
)
+
"
toolchain_args
must
specify
a
target_cpu
"
)
assert
(
defined
(
invoker_toolchain_args
.
current_os
)
"
toolchain_args
must
specify
a
current_os
"
)
-
153
8
+
153
8
template
(
"
single_gcc_toolchain
"
)
{
#
macros
which
is
probably
the
same
but
might
have
sanitizers
disabled
.
host_toolchain_no_sanitizers
=
host_toolchain_no_sanitizers
-
if
(
!
defined
(
invoker_toolchain_args
.
v8_current_cpu
)
)
{
-
v8_current_cpu
=
invoker_toolchain_args
.
current_cpu
+
if
(
!
defined
(
invoker_toolchain_args
.
v8_target_cpu
)
)
{
+
v8_target_cpu
=
invoker_toolchain_args
.
target_cpu
}
}
diff
-
-
git
a
/
toolchain
/
ios
/
BUILD
.
gn
b
/
toolchain
/
ios
/
BUILD
.
gn
index
c379f2615
.
.
834841e91
100644
-
-
-
a
/
toolchain
/
ios
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
ios
/
BUILD
.
gn
-
30
20
+
30
20
template
(
"
ios_toolchain
"
)
{
ios_toolchain
(
"
ios_clang_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
}
}
ios_toolchain
(
"
ios_clang_arm64_13_4
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
ios_deployment_target
=
"
13
.
4
"
}
}
ios_toolchain
(
"
ios_clang_arm64_fat_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
is_fat_secondary_toolchain
=
true
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_arm64
"
}
-
51
19
+
51
19
ios_toolchain
(
"
ios_clang_arm64_fat_arm
"
)
{
ios_toolchain
(
"
ios_clang_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
}
}
ios_toolchain
(
"
ios_clang_x64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
}
}
ios_toolchain
(
"
ios_clang_x64_fat_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
is_fat_secondary_toolchain
=
true
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
}
-
71
14
+
71
14
ios_toolchain
(
"
ios_clang_x64_fat_arm64
"
)
{
ios_toolchain
(
"
ios_clang_x64_13_4
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
ios_deployment_target
=
"
13
.
4
"
}
}
ios_toolchain
(
"
ios_clang_x64_13_4_fat_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
is_fat_secondary_toolchain
=
true
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_x64_13_4
"
ios_deployment_target
=
"
13
.
4
"
-
87
7
+
87
7
ios_toolchain
(
"
ios_clang_x64_13_4_fat_arm64
"
)
{
ios_toolchain
(
"
ios_clang_x64_fat_x86
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
is_fat_secondary_toolchain
=
true
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
}
-
95
6
+
95
6
ios_toolchain
(
"
ios_clang_x64_fat_x86
"
)
{
ios_toolchain
(
"
ios_clang_x86
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
}
}
diff
-
-
git
a
/
toolchain
/
linux
/
BUILD
.
gn
b
/
toolchain
/
linux
/
BUILD
.
gn
index
a9b01e4c8
.
.
4fb891b64
100644
-
-
-
a
/
toolchain
/
linux
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
BUILD
.
gn
-
11
21
+
11
21
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
clang_toolchain
(
"
clang_ppc64
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
ppc64
"
+
target_cpu
=
"
ppc64
"
current_os
=
"
linux
"
}
}
clang_toolchain
(
"
clang_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
current_os
=
"
linux
"
}
}
clang_toolchain
(
"
clang_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
current_os
=
"
linux
"
}
}
-
42
7
+
42
7
gcc_toolchain
(
"
arm64
"
)
{
nm
=
"
{
toolprefix
}
nm
"
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
63
7
+
63
7
gcc_toolchain
(
"
arm
"
)
{
nm
=
"
{
toolprefix
}
nm
"
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
77
7
+
77
7
clang_toolchain
(
"
clang_x86
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
current_os
=
"
linux
"
}
}
-
95
7
+
95
7
gcc_toolchain
(
"
x86
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
109
7
+
109
7
clang_toolchain
(
"
clang_x64
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
current_os
=
"
linux
"
}
}
-
125
57
+
125
57
template
(
"
clang_v8_toolchain
"
)
{
clang_v8_toolchain
(
"
clang_x86_v8_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
-
v8_current_cpu
=
"
arm
"
+
target_cpu
=
"
x86
"
+
v8_target_cpu
=
"
arm
"
}
}
clang_v8_toolchain
(
"
clang_x86_v8_mipsel
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
-
v8_current_cpu
=
"
mipsel
"
+
target_cpu
=
"
x86
"
+
v8_target_cpu
=
"
mipsel
"
}
}
clang_v8_toolchain
(
"
clang_x86_v8_mips
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
-
v8_current_cpu
=
"
mips
"
+
target_cpu
=
"
x86
"
+
v8_target_cpu
=
"
mips
"
}
}
clang_v8_toolchain
(
"
clang_x64_v8_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
-
v8_current_cpu
=
"
arm64
"
+
target_cpu
=
"
x64
"
+
v8_target_cpu
=
"
arm64
"
}
}
clang_v8_toolchain
(
"
clang_x64_v8_mips64el
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
-
v8_current_cpu
=
"
mips64el
"
+
target_cpu
=
"
x64
"
+
v8_target_cpu
=
"
mips64el
"
}
}
clang_v8_toolchain
(
"
clang_x64_v8_mips64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
-
v8_current_cpu
=
"
mips64
"
+
target_cpu
=
"
x64
"
+
v8_target_cpu
=
"
mips64
"
}
}
clang_v8_toolchain
(
"
clang_x64_v8_riscv64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
-
v8_current_cpu
=
"
riscv64
"
+
target_cpu
=
"
x64
"
+
v8_target_cpu
=
"
riscv64
"
}
}
clang_v8_toolchain
(
"
clang_x64_v8_loong64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
-
v8_current_cpu
=
"
loong64
"
+
target_cpu
=
"
x64
"
+
v8_target_cpu
=
"
loong64
"
}
}
-
186
7
+
186
7
clang_toolchain
(
"
ash_clang_x64
"
)
{
#
This
turns
the
toolchain
into
the
"
Linux
ChromeOS
"
build
current_os
=
"
chromeos
"
target_os
=
"
chromeos
"
-
current_cpu
=
current_cpu
+
target_cpu
=
target_cpu
#
This
turns
off
all
of
the
LaCrOS
-
specific
flags
.
also_build_ash_chrome
=
false
-
207
7
+
207
7
clang_toolchain
(
"
lacros_clang_x64
"
)
{
#
This
turns
the
toolchain
into
the
"
Lacros
"
build
current_os
=
"
chromeos
"
target_os
=
"
chromeos
"
-
current_cpu
=
current_cpu
+
target_cpu
=
target_cpu
#
This
turns
on
the
LaCrOS
-
specific
flag
.
also_build_lacros_chrome
=
false
-
231
7
+
231
7
gcc_toolchain
(
"
x64
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
242
21
+
242
21
gcc_toolchain
(
"
x64
"
)
{
clang_toolchain
(
"
clang_mipsel
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
mipsel
"
+
target_cpu
=
"
mipsel
"
current_os
=
"
linux
"
}
}
clang_toolchain
(
"
clang_mips64el
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
mips64el
"
+
target_cpu
=
"
mips64el
"
current_os
=
"
linux
"
}
}
clang_toolchain
(
"
clang_mips64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
mips64
"
+
target_cpu
=
"
mips64
"
current_os
=
"
linux
"
}
}
-
273
7
+
273
7
gcc_toolchain
(
"
mipsel
"
)
{
toolchain_args
=
{
cc_wrapper
=
"
"
-
current_cpu
=
"
mipsel
"
+
target_cpu
=
"
mipsel
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
295
7
+
295
7
gcc_toolchain
(
"
mips64el
"
)
{
toolchain_args
=
{
cc_wrapper
=
"
"
-
current_cpu
=
"
mips64el
"
+
target_cpu
=
"
mips64el
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
308
7
+
308
7
gcc_toolchain
(
"
mips64el
"
)
{
clang_toolchain
(
"
clang_riscv64
"
)
{
enable_linker_map
=
true
toolchain_args
=
{
-
current_cpu
=
"
riscv64
"
+
target_cpu
=
"
riscv64
"
current_os
=
"
linux
"
is_clang
=
true
}
-
326
7
+
326
7
gcc_toolchain
(
"
riscv64
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
riscv64
"
+
target_cpu
=
"
riscv64
"
current_os
=
"
linux
"
is_clang
=
false
}
-
334
7
+
334
7
gcc_toolchain
(
"
riscv64
"
)
{
clang_toolchain
(
"
clang_s390x
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
s390x
"
+
target_cpu
=
"
s390x
"
current_os
=
"
linux
"
is_clang
=
true
}
-
350
7
+
350
7
gcc_toolchain
(
"
s390x
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
s390x
"
+
target_cpu
=
"
s390x
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
369
7
+
369
7
gcc_toolchain
(
"
s390x
"
)
{
#
ld
=
cxx
#
#
toolchain_args
=
{
-
#
current_cpu
=
"
mips64
"
+
#
target_cpu
=
"
mips64
"
#
current_os
=
"
linux
"
#
is_clang
=
false
#
}
-
385
7
+
385
7
gcc_toolchain
(
"
ppc64
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
ppc64
"
+
target_cpu
=
"
ppc64
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
406
7
+
406
7
gcc_toolchain
(
"
mips
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
mips
"
+
target_cpu
=
"
mips
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
427
7
+
427
7
gcc_toolchain
(
"
mips64
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
mips64
"
+
target_cpu
=
"
mips64
"
current_os
=
"
linux
"
#
reclient
does
not
support
gcc
.
-
438
7
+
438
7
gcc_toolchain
(
"
mips64
"
)
{
clang_toolchain
(
"
clang_loong64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
loong64
"
+
target_cpu
=
"
loong64
"
current_os
=
"
linux
"
}
}
-
455
7
+
455
7
gcc_toolchain
(
"
loong64
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
loong64
"
+
target_cpu
=
"
loong64
"
current_os
=
"
linux
"
is_clang
=
false
}
diff
-
-
git
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
index
68502471e
.
.
62317ef89
100644
-
-
-
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
-
17
7
+
17
7
gcc_toolchain
(
"
default
"
)
{
extra_ldflags
=
getenv
(
"
LDFLAGS
"
)
toolchain_args
=
{
-
current_cpu
=
current_cpu
+
target_cpu
=
target_cpu
current_os
=
current_os
}
}
-
35
7
+
35
7
gcc_toolchain
(
"
host
"
)
{
extra_ldflags
=
getenv
(
"
BUILD_LDFLAGS
"
)
toolchain_args
=
{
-
current_cpu
=
current_cpu
+
target_cpu
=
target_cpu
current_os
=
current_os
}
}
diff
-
-
git
a
/
toolchain
/
mac
/
BUILD
.
gn
b
/
toolchain
/
mac
/
BUILD
.
gn
index
aa9c7e8fb
.
.
42518d9df
100644
-
-
-
a
/
toolchain
/
mac
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
mac
/
BUILD
.
gn
-
49
74
+
49
74
template
(
"
mac_toolchain
"
)
{
mac_toolchain
(
"
clang_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm
"
+
target_cpu
=
"
arm
"
}
}
mac_toolchain
(
"
clang_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
}
}
mac_toolchain
(
"
clang_x64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
}
}
mac_toolchain
(
"
clang_x86
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
}
}
mac_toolchain
(
"
clang_x86_v8_arm
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
-
if
(
defined
(
v8_current_cpu
)
)
{
-
v8_current_cpu
=
"
arm
"
+
if
(
defined
(
v8_target_cpu
)
)
{
+
v8_target_cpu
=
"
arm
"
}
}
}
mac_toolchain
(
"
clang_x86_v8_mipsel
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x86
"
+
target_cpu
=
"
x86
"
-
if
(
defined
(
v8_current_cpu
)
)
{
-
v8_current_cpu
=
"
mipsel
"
+
if
(
defined
(
v8_target_cpu
)
)
{
+
v8_target_cpu
=
"
mipsel
"
}
}
}
mac_toolchain
(
"
clang_x64_v8_arm64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
-
if
(
defined
(
v8_current_cpu
)
)
{
-
v8_current_cpu
=
"
arm64
"
+
if
(
defined
(
v8_target_cpu
)
)
{
+
v8_target_cpu
=
"
arm64
"
}
}
}
mac_toolchain
(
"
clang_x64_v8_mips64el
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
x64
"
+
target_cpu
=
"
x64
"
-
if
(
defined
(
v8_current_cpu
)
)
{
-
v8_current_cpu
=
"
mips64el
"
+
if
(
defined
(
v8_target_cpu
)
)
{
+
v8_target_cpu
=
"
mips64el
"
}
}
}
mac_toolchain
(
"
clang_arm64_v8_x64
"
)
{
toolchain_args
=
{
-
current_cpu
=
"
arm64
"
+
target_cpu
=
"
arm64
"
-
if
(
defined
(
v8_current_cpu
)
)
{
-
v8_current_cpu
=
"
x64
"
+
if
(
defined
(
v8_target_cpu
)
)
{
+
v8_target_cpu
=
"
x64
"
}
}
}
diff
-
-
git
a
/
toolchain
/
nacl
/
BUILD
.
gn
b
/
toolchain
/
nacl
/
BUILD
.
gn
index
2c2340c1b
.
.
f30c85d40
100644
-
-
-
a
/
toolchain
/
nacl
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
nacl
/
BUILD
.
gn
-
95
7
+
95
7
template
(
"
pnacl_toolchain
"
)
{
toolchain_args
=
{
is_clang
=
true
-
current_cpu
=
"
pnacl
"
+
target_cpu
=
"
pnacl
"
use_lld
=
false
}
}
-
145
7
+
145
7
template
(
"
nacl_glibc_toolchain
"
)
{
strip
=
toolprefix
+
"
strip
"
+
toolsuffix
toolchain_args
=
{
-
current_cpu
=
toolchain_cpu
+
target_cpu
=
toolchain_cpu
#
reclient
does
not
support
gcc
.
use_remoteexec
=
false
-
206
7
+
206
7
template
(
"
nacl_clang_toolchain
"
)
{
strip
=
toolprefix
+
"
strip
"
+
toolsuffix
toolchain_args
=
{
-
current_cpu
=
toolchain_cpu
+
target_cpu
=
toolchain_cpu
is_clang
=
true
use_lld
=
false
}
-
251
7
+
251
7
template
(
"
nacl_irt_toolchain
"
)
{
ld
=
"
{
python_path
}
{
link_irt
}
-
-
tls
-
edit
=
{
tls_edit
}
-
-
link
-
cmd
=
{
cxx
}
-
-
readelf
-
cmd
=
{
readelf
}
"
toolchain_args
=
{
-
current_cpu
=
toolchain_cpu
+
target_cpu
=
toolchain_cpu
is_clang
=
true
use_lld
=
false
is_nacl_saigo
=
true
diff
-
-
git
a
/
toolchain
/
win
/
BUILD
.
gn
b
/
toolchain
/
win
/
BUILD
.
gn
index
d62ba807d
.
.
74ad5387c
100644
-
-
-
a
/
toolchain
/
win
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
win
/
BUILD
.
gn
-
82
7
+
82
7
if
(
target_os
=
=
"
winuwp
"
)
{
cl
=
"
\
"
{
store_cpu_toolchain_data
.
vc_bin_dir
}
/
cl
.
exe
\
"
"
toolchain_args
=
{
current_os
=
"
winuwp
"
-
current_cpu
=
target_cpu
+
target_cpu
=
target_cpu
is_clang
=
false
}
}
diff
-
-
git
a
/
toolchain
/
win
/
midl
.
gni
b
/
toolchain
/
win
/
midl
.
gni
index
e0ec0c7c5
.
.
7f8eda281
100644
-
-
-
a
/
toolchain
/
win
/
midl
.
gni
+
+
+
b
/
toolchain
/
win
/
midl
.
gni
-
146
13
+
146
13
template
(
"
midl
"
)
{
outputs
+
=
[
"
out_dir
/
proxy_file
"
]
}
-
if
(
current_cpu
=
=
"
x86
"
)
{
+
if
(
target_cpu
=
=
"
x86
"
)
{
win_tool_arch
=
"
environment
.
x86
"
idl_target_platform
=
"
win32
"
-
}
else
if
(
current_cpu
=
=
"
x64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
x64
"
)
{
win_tool_arch
=
"
environment
.
x64
"
idl_target_platform
=
"
x64
"
-
}
else
if
(
current_cpu
=
=
"
arm64
"
)
{
+
}
else
if
(
target_cpu
=
=
"
arm64
"
)
{
win_tool_arch
=
"
environment
.
arm64
"
idl_target_platform
=
"
arm64
"
}
else
{
diff
-
-
git
a
/
toolchain
/
win
/
toolchain
.
gni
b
/
toolchain
/
win
/
toolchain
.
gni
index
65febca2a
.
.
2f2125b5c
100644
-
-
-
a
/
toolchain
/
win
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
win
/
toolchain
.
gni
-
34
7
+
34
7
_clang_bin_path
=
rebase_path
(
"
clang_base_path
/
bin
"
root_build_dir
)
#
environment
:
File
name
of
environment
file
.
#
#
You
would
also
define
a
toolchain_args
variable
with
at
least
these
set
:
-
#
current_cpu
:
current_cpu
to
pass
as
a
build
arg
+
#
target_cpu
:
target_cpu
to
pass
as
a
build
arg
#
current_os
:
current_os
to
pass
as
a
build
arg
template
(
"
single_msvc_toolchain
"
)
{
toolchain
(
target_name
)
{
-
243
7
+
243
7
template
(
"
single_msvc_toolchain
"
)
{
tool
(
"
asm
"
)
{
is_msvc_assembler
=
true
-
if
(
toolchain_args
.
current_cpu
=
=
"
arm64
"
)
{
+
if
(
toolchain_args
.
target_cpu
=
=
"
arm64
"
)
{
if
(
toolchain_is_clang
)
{
ml
=
"
{
cl_prefix
}
{
_clang_bin_path
}
/
clang
-
cl
{
_exe
}
-
-
target
=
arm64
-
windows
"
if
(
host_os
=
=
"
win
"
)
{
-
261
13
+
261
13
template
(
"
single_msvc_toolchain
"
)
{
if
(
toolchain_is_clang
&
&
!
disable_llvm_ml
)
{
prefix
=
rebase_path
(
"
clang_base_path
/
bin
"
root_build_dir
)
ml
=
"
prefix
/
llvm
-
ml
{
_exe
}
"
-
if
(
toolchain_args
.
current_cpu
=
=
"
x64
"
)
{
+
if
(
toolchain_args
.
target_cpu
=
=
"
x64
"
)
{
ml
+
=
"
-
m64
"
}
else
{
ml
+
=
"
-
m32
"
}
}
else
{
-
if
(
toolchain_args
.
current_cpu
=
=
"
x64
"
)
{
+
if
(
toolchain_args
.
target_cpu
=
=
"
x64
"
)
{
ml
=
"
ml64
.
exe
"
}
else
{
ml
=
"
ml
.
exe
"
-
280
7
+
280
7
template
(
"
single_msvc_toolchain
"
)
{
#
Suppress
final
-
stage
linking
on
x64
/
x86
builds
.
(
Armasm64
does
not
#
require
/
c
because
it
doesn
'
t
support
linking
.
)
-
if
(
toolchain_args
.
current_cpu
!
=
"
arm64
"
)
{
+
if
(
toolchain_args
.
target_cpu
!
=
"
arm64
"
)
{
ml
+
=
"
/
c
"
}
if
(
use_lld
&
&
(
!
toolchain_is_clang
|
|
disable_llvm_ml
)
)
{
-
291
7
+
291
7
template
(
"
single_msvc_toolchain
"
)
{
ml
=
"
python_path
ml_py
ml
"
}
}
-
if
(
toolchain_args
.
current_cpu
!
=
"
arm64
"
|
|
toolchain_is_clang
)
{
+
if
(
toolchain_args
.
target_cpu
!
=
"
arm64
"
|
|
toolchain_is_clang
)
{
#
TODO
(
thakis
)
:
Stop
using
asm
-
wrapper
when
using
clang
.
command
=
"
python_path
_tool_wrapper_path
asm
-
wrapper
env
ml
{
{
defines
}
}
{
{
include_dirs
}
}
{
{
asmflags
}
}
{
{
source
}
}
"
}
else
{
-
563
7
+
563
7
template
(
"
win_toolchains
"
)
{
is_clang
=
false
use_clang_coverage
=
false
current_os
=
"
win
"
-
current_cpu
=
toolchain_arch
+
target_cpu
=
toolchain_arch
}
}
}
-
610
7
+
610
7
template
(
"
win_toolchains
"
)
{
}
is_clang
=
true
current_os
=
"
win
"
-
current_cpu
=
toolchain_arch
+
target_cpu
=
toolchain_arch
}
}
}
diff
-
-
git
a
/
toolchain
/
zos
/
BUILD
.
gn
b
/
toolchain
/
zos
/
BUILD
.
gn
index
34d36d306
.
.
7aacd2c6f
100644
-
-
-
a
/
toolchain
/
zos
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
zos
/
BUILD
.
gn
-
14
7
+
14
7
toolchain
(
"
s390x
"
)
{
ld
=
cxx
toolchain_args
=
{
-
current_cpu
=
"
s390x
"
+
target_cpu
=
"
s390x
"
current_os
=
"
zos
"
}
diff
-
-
git
a
/
win
/
BUILD
.
gn
b
/
win
/
BUILD
.
gn
index
696780c92
.
.
3f0bc27a3
100644
-
-
-
a
/
win
/
BUILD
.
gn
+
+
+
b
/
win
/
BUILD
.
gn
-
38
7
+
38
7
if
(
is_win
)
{
]
args
=
[
rebase_path
(
"
root_out_dir
/
cdb
"
root_out_dir
)
-
current_cpu
+
target_cpu
]
}
-
65
7
+
65
7
if
(
is_win
)
{
"
root_out_dir
/
vccorlib140
{
vcrt_suffix
}
.
dll
"
"
root_out_dir
/
vcruntime140
{
vcrt_suffix
}
.
dll
"
]
-
if
(
current_cpu
=
=
"
x64
"
)
{
+
if
(
target_cpu
=
=
"
x64
"
)
{
data
+
=
[
"
root_out_dir
/
vcruntime140_1
{
vcrt_suffix
}
.
dll
"
]
}
if
(
is_debug
)
{
diff
-
-
git
a
/
win
/
message_compiler
.
gni
b
/
win
/
message_compiler
.
gni
index
c9fd42568
.
.
375e4c3ad
100644
-
-
-
a
/
win
/
message_compiler
.
gni
+
+
+
b
/
win
/
message_compiler
.
gni
-
50
7
+
50
7
template
(
"
message_compiler
"
)
{
#
directory
.
This
is
required
because
the
Windows
toolchain
setup
saves
#
the
VC
paths
and
such
so
that
running
"
mc
.
exe
"
will
work
with
the
#
configured
toolchain
.
This
file
is
in
the
root
build
dir
.
-
"
environment
.
current_cpu
"
+
"
environment
.
target_cpu
"
#
Where
to
put
the
header
.
"
-
h
"
