From
:
Michael
Froman
<
mfroman
mozilla
.
com
>
Date
:
Tue
1
Jul
2025
18
:
13
:
09
-
0500
Subject
:
Bug
1921707
-
point
to
new
build
directory
location
in
third_party
/
chromium
/
build
r
=
ng
glandium
Ran
:
ack
-
l
"
\
"
/
/
build
/
"
third_party
/
chromium
/
build
|
xargs
sed
-
i
.
bak
-
E
'
s
/
\
"
\
/
\
/
build
\
/
/
\
"
\
/
\
/
chromium
\
/
build
\
/
/
'
ack
-
l
"
\
"
/
/
build
:
"
third_party
/
chromium
/
build
|
xargs
sed
-
i
.
bak
-
E
'
s
/
\
"
\
/
\
/
build
:
/
\
"
\
/
\
/
chromium
\
/
build
:
/
'
find
third_party
-
name
"
*
.
bak
"
|
xargs
rm
hg
revert
\
third_party
/
chromium
/
build
/
android
/
pylib
/
utils
/
gold_utils
.
py
\
third_party
/
chromium
/
build
/
args
/
README
.
txt
\
third_party
/
chromium
/
build
/
args
/
chromeos
/
README
.
md
\
third_party
/
chromium
/
build
/
gn_helpers_unittest
.
py
\
third_party
/
chromium
/
build
/
locale_tool
.
py
\
third_party
/
chromium
/
build
/
toolchain
/
linux
/
unbundle
/
README
.
md
Differential
Revision
:
https
:
/
/
phabricator
.
services
.
mozilla
.
com
/
D224542
Mercurial
Revision
:
https
:
/
/
hg
.
mozilla
.
org
/
mozilla
-
central
/
rev
/
6b855a2bf6b1f3feb9c6558a9357fed8e43c5b99
-
-
-
BUILD
.
gn
|
10
+
-
android
/
BUILD
.
gn
|
14
+
-
android
/
DIR_METADATA
|
2
+
-
android
/
bytecode
/
BUILD
.
gn
|
2
+
-
android
/
gtest_apk
/
BUILD
.
gn
|
2
+
-
android
/
gyp
/
test
/
BUILD
.
gn
|
2
+
-
android
/
incremental_install
/
BUILD
.
gn
|
2
+
-
android
/
native_flags
/
BUILD
.
gn
|
4
+
-
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
|
2
+
-
android
/
resource_sizes
.
gni
|
6
+
-
android
/
stacktrace
/
BUILD
.
gn
|
2
+
-
android
/
test
/
BUILD
.
gn
|
14
+
-
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
|
4
+
-
android
/
test
/
missing_symbol_test
.
gni
|
6
+
-
android
/
test
/
nocompile_gn
/
BUILD
.
gn
|
8
+
-
android
/
unused_resources
/
BUILD
.
gn
|
4
+
-
apple
/
apple_info_plist
.
gni
|
2
+
-
apple
/
compile_entitlements
.
gni
|
2
+
-
apple
/
compile_plist
.
gni
|
4
+
-
apple
/
convert_plist
.
gni
|
2
+
-
apple
/
tweak_info_plist
.
gni
|
8
+
-
args
/
headless
.
gn
|
2
+
-
buildflag_header
.
gni
|
4
+
-
cipd
/
cipd
.
gni
|
2
+
-
compiled_action
.
gni
|
4
+
-
config
/
BUILD
.
gn
|
62
+
+
+
+
-
-
-
-
config
/
BUILDCONFIG
.
gn
|
146
+
+
+
+
+
+
+
+
+
-
-
-
-
-
-
-
-
-
config
/
aix
/
BUILD
.
gn
|
4
+
-
config
/
android
/
BUILD
.
gn
|
14
+
-
config
/
android
/
DIR_METADATA
|
2
+
-
config
/
android
/
abi
.
gni
|
4
+
-
config
/
android
/
android_nocompile
.
gni
|
8
+
-
config
/
android
/
build_vars
.
gni
|
2
+
-
config
/
android
/
config
.
gni
|
14
+
-
config
/
android
/
copy_ex
.
gni
|
4
+
-
config
/
android
/
create_unwind_table
.
gni
|
4
+
-
config
/
android
/
extract_unwind_tables
.
gni
|
4
+
-
config
/
android
/
internal_rules
.
gni
|
106
+
+
+
+
+
+
-
-
-
-
-
-
-
config
/
android
/
linker_version_script
.
gni
|
4
+
-
config
/
android
/
rules
.
gni
|
118
+
+
+
+
+
+
+
-
-
-
-
-
-
-
config
/
android
/
test
/
classpath_order
/
BUILD
.
gn
|
2
+
-
config
/
android
/
test
/
proto
/
BUILD
.
gn
|
2
+
-
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
|
2
+
-
config
/
apple
/
symbols
.
gni
|
4
+
-
config
/
arm
.
gni
|
2
+
-
config
/
buildflags_paint_preview
.
gni
|
4
+
-
config
/
c
+
+
/
BUILD
.
gn
|
8
+
-
config
/
c
+
+
/
c
+
+
.
gni
|
6
+
-
config
/
chromecast
/
BUILD
.
gn
|
2
+
-
config
/
chromeos
/
BUILD
.
gn
|
2
+
-
config
/
chromeos
/
rules
.
gni
|
38
+
+
-
-
-
config
/
chromeos
/
ui_mode
.
gni
|
2
+
-
config
/
clang
/
clang
.
gni
|
4
+
-
config
/
compiler
/
BUILD
.
gn
|
120
+
+
+
+
+
+
+
-
-
-
-
-
-
-
config
/
compiler
/
compiler
.
gni
|
26
+
+
-
-
config
/
compiler
/
pgo
/
BUILD
.
gn
|
10
+
-
config
/
compiler
/
pgo
/
pgo
.
gni
|
4
+
-
config
/
coverage
/
BUILD
.
gn
|
2
+
-
config
/
coverage
/
coverage
.
gni
|
2
+
-
config
/
dcheck_always_on
.
gni
|
2
+
-
config
/
devtools
.
gni
|
2
+
-
config
/
features
.
gni
|
4
+
-
config
/
freetype
/
BUILD
.
gn
|
6
+
-
config
/
fuchsia
/
BUILD
.
gn
|
10
+
-
config
/
fuchsia
/
DIR_METADATA
|
2
+
-
config
/
fuchsia
/
generate_runner_scripts
.
gni
|
18
+
-
-
config
/
fuchsia
/
package
.
gni
|
4
+
-
config
/
fuchsia
/
rules
.
gni
|
2
+
-
config
/
fuchsia
/
sizes
.
gni
|
6
+
-
config
/
fuchsia
/
symbol_archive
.
gni
|
2
+
-
config
/
gcc
/
BUILD
.
gn
|
12
+
-
config
/
host_byteorder
.
gni
|
2
+
-
config
/
ios
/
BUILD
.
gn
|
14
+
-
config
/
ios
/
asset_catalog
.
gni
|
4
+
-
config
/
ios
/
ios_sdk
.
gni
|
12
+
-
config
/
ios
/
ios_test_runner_wrapper
.
gni
|
6
+
-
config
/
ios
/
ios_test_runner_xcuitest
.
gni
|
4
+
-
config
/
ios
/
rules
.
gni
|
68
+
+
+
+
-
-
-
-
config
/
linux
/
BUILD
.
gn
|
12
+
-
config
/
linux
/
atk
/
BUILD
.
gn
|
8
+
-
config
/
linux
/
atspi2
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
dbus
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
dri
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
gtk
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
gtk
/
gtk
.
gni
|
2
+
-
config
/
linux
/
libdrm
/
BUILD
.
gn
|
6
+
-
config
/
linux
/
libffi
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
libva
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
nss
/
BUILD
.
gn
|
2
+
-
config
/
linux
/
pangocairo
/
BUILD
.
gn
|
4
+
-
config
/
linux
/
pangocairo
/
pangocairo
.
gni
|
4
+
-
config
/
linux
/
pkg_config
.
gni
|
4
+
-
config
/
locales
.
gni
|
2
+
-
config
/
logging
.
gni
|
4
+
-
config
/
mac
/
BUILD
.
gn
|
14
+
-
config
/
mac
/
mac_sdk
.
gni
|
18
+
-
-
config
/
mac
/
rules
.
gni
|
16
+
-
config
/
mips
.
gni
|
2
+
-
config
/
nacl
/
BUILD
.
gn
|
2
+
-
config
/
nacl
/
config
.
gni
|
2
+
-
config
/
nacl
/
rules
.
gni
|
4
+
-
config
/
ozone
.
gni
|
8
+
-
config
/
pch
.
gni
|
4
+
-
config
/
posix
/
BUILD
.
gn
|
6
+
-
config
/
profiling
/
profiling
.
gni
|
4
+
-
config
/
python
.
gni
|
4
+
-
config
/
rust
.
gni
|
10
+
-
config
/
sanitizers
/
BUILD
.
gn
|
26
+
+
-
-
config
/
sanitizers
/
sanitizers
.
gni
|
20
+
-
-
config
/
sysroot
.
gni
|
12
+
-
config
/
ui
.
gni
|
8
+
-
config
/
v8_target_cpu
.
gni
|
10
+
-
config
/
win
/
BUILD
.
gn
|
22
+
-
-
config
/
win
/
console_app
.
gni
|
2
+
-
config
/
win
/
control_flow_guard
.
gni
|
2
+
-
config
/
win
/
manifest
.
gni
|
10
+
-
config
/
zip
.
gni
|
2
+
-
config
/
zos
/
BUILD
.
gn
|
4
+
-
dotfile_settings
.
gni
|
64
+
+
+
+
-
-
-
-
fuchsia
/
DIR_METADATA
|
2
+
-
gn_logs
.
gni
|
2
+
-
ios
/
intent_definition
.
gni
|
8
+
-
lacros
/
BUILD
.
gn
|
4
+
-
lacros
/
lacros_resource_sizes
.
gni
|
6
+
-
linux
/
BUILD
.
gn
|
8
+
-
linux
/
extract_symbols
.
gni
|
6
+
-
linux
/
strip_binary
.
gni
|
4
+
-
linux
/
unbundle
/
ffmpeg
.
gn
|
6
+
-
linux
/
unbundle
/
flac
.
gn
|
4
+
-
linux
/
unbundle
/
icu
.
gn
|
4
+
-
linux
/
unbundle
/
libdrm
.
gn
|
4
+
-
linux
/
unbundle
/
libevent
.
gn
|
2
+
-
linux
/
unbundle
/
libpng
.
gn
|
4
+
-
linux
/
unbundle
/
libvpx
.
gn
|
4
+
-
linux
/
unbundle
/
libwebp
.
gn
|
4
+
-
linux
/
unbundle
/
libxml
.
gn
|
2
+
-
linux
/
unbundle
/
libxslt
.
gn
|
2
+
-
linux
/
unbundle
/
openh264
.
gn
|
4
+
-
linux
/
unbundle
/
opus
.
gn
|
4
+
-
linux
/
unbundle
/
re2
.
gn
|
4
+
-
linux
/
unbundle
/
snappy
.
gn
|
2
+
-
linux
/
unbundle
/
zlib
.
gn
|
2
+
-
nocompile
.
gni
|
12
+
-
partitioned_shared_library
.
gni
|
8
+
-
rust
/
BUILD
.
gn
|
2
+
-
rust
/
cargo_crate
.
gni
|
18
+
-
-
rust
/
mixed_component
.
gni
|
6
+
-
rust
/
mixed_executable
.
gni
|
4
+
-
rust
/
mixed_shared_library
.
gni
|
4
+
-
rust
/
mixed_static_library
.
gni
|
4
+
-
rust
/
mixed_target
.
gni
|
12
+
-
rust
/
rust_cxx
.
gni
|
12
+
-
rust
/
rust_executable
.
gni
|
2
+
-
rust
/
rust_macro
.
gni
|
4
+
-
rust
/
rust_shared_library
.
gni
|
2
+
-
rust
/
rust_static_library
.
gni
|
2
+
-
rust
/
rust_target
.
gni
|
14
+
-
rust
/
rust_unit_test
.
gni
|
6
+
-
rust
/
std
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
|
8
+
-
rust
/
tests
/
test_mixed_component
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_mixed_executable
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_mixed_shared_library
/
BUILD
.
gn
|
10
+
-
rust
/
tests
/
test_mixed_static_library
/
BUILD
.
gn
|
10
+
-
.
.
.
/
test_mixed_testonly_executable
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
|
12
+
-
.
.
.
/
BUILD
.
gn
|
8
+
-
.
.
.
/
v1
/
BUILD
.
gn
|
2
+
-
.
.
.
/
v2
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
|
2
+
-
.
.
.
/
BUILD
.
gn
|
2
+
-
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
|
4
+
-
rust
/
tests
/
test_serde_jsonrc
/
BUILD
.
gn
|
2
+
-
.
.
.
/
test_variable_static_library
/
BUILD
.
gn
|
2
+
-
symlink
.
gni
|
2
+
-
timestamp
.
gni
|
2
+
-
toolchain
/
BUILD
.
gn
|
6
+
-
toolchain
/
aix
/
BUILD
.
gn
|
2
+
-
toolchain
/
android
/
BUILD
.
gn
|
12
+
-
toolchain
/
android
/
DIR_METADATA
|
2
+
-
toolchain
/
apple
/
BUILD
.
gn
|
2
+
-
toolchain
/
apple
/
toolchain
.
gni
|
50
+
+
+
-
-
-
toolchain
/
cc_wrapper
.
gni
|
4
+
-
toolchain
/
concurrent_links
.
gni
|
14
+
-
toolchain
/
cros
/
BUILD
.
gn
|
18
+
-
-
toolchain
/
cros_toolchain
.
gni
|
4
+
-
toolchain
/
fuchsia
/
BUILD
.
gn
|
2
+
-
toolchain
/
gcc_toolchain
.
gni
|
40
+
+
-
-
-
toolchain
/
ios
/
BUILD
.
gn
|
10
+
-
toolchain
/
linux
/
BUILD
.
gn
|
8
+
-
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
|
2
+
-
toolchain
/
mac
/
BUILD
.
gn
|
4
+
-
toolchain
/
nacl
/
BUILD
.
gn
|
6
+
-
toolchain
/
nacl_toolchain
.
gni
|
4
+
-
toolchain
/
toolchain
.
gni
|
6
+
-
toolchain
/
win
/
BUILD
.
gn
|
34
+
+
-
-
toolchain
/
win
/
midl
.
gni
|
4
+
-
toolchain
/
zos
/
BUILD
.
gn
|
6
+
-
util
/
BUILD
.
gn
|
6
+
-
util
/
branding
.
gni
|
2
+
-
util
/
generate_wrapper
.
gni
|
2
+
-
util
/
java_action
.
gni
|
2
+
-
util
/
lastchange
.
gni
|
4
+
-
util
/
process_version
.
gni
|
4
+
-
util
/
version
.
gni
|
2
+
-
win
/
BUILD
.
gn
|
10
+
-
win
/
message_compiler
.
gni
|
2
+
-
212
files
changed
972
insertions
(
+
)
972
deletions
(
-
)
diff
-
-
git
a
/
BUILD
.
gn
b
/
BUILD
.
gn
index
5adcff2ef
.
.
a91abdd21
100644
-
-
-
a
/
BUILD
.
gn
+
+
+
b
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
source_set
(
"
buildflag_header_h
"
)
{
sources
=
[
"
buildflag
.
h
"
]
diff
-
-
git
a
/
android
/
BUILD
.
gn
b
/
android
/
BUILD
.
gn
index
baa7120e7
.
.
0dce9324d
100644
-
-
-
a
/
android
/
BUILD
.
gn
+
+
+
b
/
android
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
build_vars
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
build_vars
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
enable_java_templates
)
{
-
55
7
+
55
7
python_library
(
"
devil_chromium_py
"
)
{
"
/
/
third_party
/
catapult
/
devil
/
devil
/
devil_dependencies
.
json
"
#
Read
by
gn_helpers
.
BuildWithChromium
(
)
-
"
/
/
build
/
config
/
gclient_args
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
]
}
-
65
7
+
65
7
group
(
"
apk_installer_data
"
)
{
#
Other
/
/
build
users
let
devil
library
fetch
these
from
Google
Storage
.
if
(
build_with_chromium
)
{
data_deps
=
[
-
"
/
/
build
/
android
/
pylib
/
device
/
commands
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
device
/
commands
"
"
/
/
tools
/
android
/
md5sum
"
]
data
=
[
"
/
/
third_party
/
android_build_tools
/
bundletool
/
bundletool
.
jar
"
]
-
109
7
+
109
7
python_library
(
"
test_runner_py
"
)
{
#
Proguard
is
needed
only
when
using
apks
(
rather
than
native
executables
)
.
if
(
enable_java_templates
)
{
-
deps
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
}
}
diff
-
-
git
a
/
android
/
DIR_METADATA
b
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
android
/
DIR_METADATA
+
+
+
b
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
android
/
bytecode
/
BUILD
.
gn
b
/
android
/
bytecode
/
BUILD
.
gn
index
8d717eb0a
.
.
aca9dcc8e
100644
-
-
-
a
/
android
/
bytecode
/
BUILD
.
gn
+
+
+
b
/
android
/
bytecode
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_binary
(
"
bytecode_processor
"
)
{
main_class
=
"
org
.
chromium
.
bytecode
.
ByteCodeProcessor
"
diff
-
-
git
a
/
android
/
gtest_apk
/
BUILD
.
gn
b
/
android
/
gtest_apk
/
BUILD
.
gn
index
2a72bc47e
.
.
fde499535
100644
-
-
-
a
/
android
/
gtest_apk
/
BUILD
.
gn
+
+
+
b
/
android
/
gtest_apk
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
android_library
(
"
native_test_instrumentation_test_runner_java
"
)
{
testonly
=
true
diff
-
-
git
a
/
android
/
gyp
/
test
/
BUILD
.
gn
b
/
android
/
gyp
/
test
/
BUILD
.
gn
index
301a220d0
.
.
421865b3e
100644
-
-
-
a
/
android
/
gyp
/
test
/
BUILD
.
gn
+
+
+
b
/
android
/
gyp
/
test
/
BUILD
.
gn
-
1
4
+
1
4
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_library
(
"
hello_world_java
"
)
{
sources
=
[
"
java
/
org
/
chromium
/
helloworld
/
HelloWorldPrinter
.
java
"
]
diff
-
-
git
a
/
android
/
incremental_install
/
BUILD
.
gn
b
/
android
/
incremental_install
/
BUILD
.
gn
index
8d26e9622
.
.
e4727be9e
100644
-
-
-
a
/
android
/
incremental_install
/
BUILD
.
gn
+
+
+
b
/
android
/
incremental_install
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
android_library
(
"
bootstrap_java
"
)
{
sources
=
[
diff
-
-
git
a
/
android
/
native_flags
/
BUILD
.
gn
b
/
android
/
native_flags
/
BUILD
.
gn
index
9c5be70ff
.
.
2c2184417
100644
-
-
-
a
/
android
/
native_flags
/
BUILD
.
gn
+
+
+
b
/
android
/
native_flags
/
BUILD
.
gn
-
3
7
+
3
7
#
found
in
the
LICENSE
file
.
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
A
toolchain
that
will
capture
compiler
and
linker
arguments
to
a
file
.
toolchain
(
"
flagcapture
"
)
{
-
26
7
+
26
7
if
(
current_toolchain
=
=
default_toolchain
)
{
description
=
stamp_description
}
}
-
}
else
if
(
current_toolchain
=
=
"
/
/
build
/
android
/
native_flags
:
flagcapture
"
)
{
+
}
else
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
android
/
native_flags
:
flagcapture
"
)
{
#
This
will
record
flags
from
all
default
configs
of
the
default
toolchain
.
source_set
(
"
default_ccflags
"
)
{
sources
=
[
"
empty
.
cc
"
]
diff
-
-
git
a
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
b
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
index
13b69f618
.
.
64912e7ed
100644
-
-
-
a
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
+
+
+
b
/
android
/
pylib
/
device
/
commands
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
group
(
"
commands
"
)
{
data_deps
=
[
"
:
chromium_commands_java
"
]
diff
-
-
git
a
/
android
/
resource_sizes
.
gni
b
/
android
/
resource_sizes
.
gni
index
5bc430ac1
.
.
fc7f91b50
100644
-
-
-
a
/
android
/
resource_sizes
.
gni
+
+
+
b
/
android
/
resource_sizes
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
#
Generates
a
script
in
the
bin
directory
that
runs
#
/
/
build
/
android
/
resource_sizes
.
py
against
the
provided
apk
.
-
18
13
+
18
13
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
template
(
"
android_resource_sizes_test
"
)
{
generate_android_wrapper
(
target_name
)
{
forward_variables_from
(
invoker
[
"
data_deps
"
]
)
-
executable
=
"
/
/
build
/
android
/
resource_sizes
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
android
/
resource_sizes
.
py
"
wrapper_script
=
"
root_out_dir
/
bin
/
run_
{
target_name
}
"
assert
(
defined
(
invoker
.
apk_name
)
!
=
defined
(
invoker
.
file_path
)
"
Exactly
one
of
apk_name
or
file_path
should
be
provided
.
"
)
-
deps
=
[
"
/
/
build
/
android
:
resource_sizes_py
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
android
:
resource_sizes_py
"
]
executable_args
=
[
"
-
-
output
-
format
"
"
histograms
"
diff
-
-
git
a
/
android
/
stacktrace
/
BUILD
.
gn
b
/
android
/
stacktrace
/
BUILD
.
gn
index
ce13a15b4
.
.
519297f53
100644
-
-
-
a
/
android
/
stacktrace
/
BUILD
.
gn
+
+
+
b
/
android
/
stacktrace
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_library
(
"
java_deobfuscate_java
"
)
{
sources
=
[
"
java
/
org
/
chromium
/
build
/
FlushingReTrace
.
java
"
]
diff
-
-
git
a
/
android
/
test
/
BUILD
.
gn
b
/
android
/
test
/
BUILD
.
gn
index
9edb6bfa4
.
.
98dd3796d
100644
-
-
-
a
/
android
/
test
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
import
(
"
missing_symbol_test
.
gni
"
)
import
(
"
nocompile_gn
/
nocompile_sources
.
gni
"
)
-
22
7
+
22
7
if
(
enable_java_templates
)
{
android_nocompile_test_suite
(
"
android_lint_tests
"
)
{
#
Depend
on
lint
script
so
that
the
action
is
re
-
run
whenever
the
script
is
modified
.
-
pydeps
=
[
"
/
/
build
/
android
/
gyp
/
lint
.
pydeps
"
]
+
pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
lint
.
pydeps
"
]
tests
=
[
{
-
55
12
+
55
12
if
(
enable_java_templates
)
{
rebase_path
(
import_child_missing_symbol_test_nocompile_sources
"
"
"
nocompile_gn
"
)
-
expected_compile_output_regex
=
"
error
:
package
test
\
.
missing_symbol
\
.
sub
does
not
exist
\
nHint
:
Add
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
sub_b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_child_missing_symbol_test_java
"
+
expected_compile_output_regex
=
"
error
:
package
test
\
.
missing_symbol
\
.
sub
does
not
exist
\
nHint
:
Add
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
sub_b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_child_missing_symbol_test_java
"
}
{
target
=
"
nocompile_gn
:
import_parent_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
B
\
nHint
:
Add
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_parent_missing_symbol_test_java
"
+
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
B
\
nHint
:
Add
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_parent_missing_symbol_test_java
"
}
{
target
=
"
nocompile_gn
:
import_turbine_missing_symbol_test_java
"
-
68
17
+
68
17
if
(
enable_java_templates
)
{
rebase_path
(
import_turbine_missing_symbol_test_nocompile_sources
"
"
"
nocompile_gn
"
)
-
expected_compile_output_regex
=
"
error
:
symbol
not
found
test
\
.
missing_symbol
\
.
B
\
nHint
:
Add
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_turbine_missing_symbol_test_java
"
+
expected_compile_output_regex
=
"
error
:
symbol
not
found
test
\
.
missing_symbol
\
.
B
\
nHint
:
Add
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
b_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
import_turbine_missing_symbol_test_java
"
}
{
target
=
"
nocompile_gn
:
prebuilt_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
C
\
nHint
:
Add
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
c_prebuilt_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
prebuilt_missing_symbol_test_java
"
+
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
C
\
nHint
:
Add
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
c_prebuilt_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
prebuilt_missing_symbol_test_java
"
}
{
target
=
"
nocompile_gn
:
cpp_template_missing_symbol_test_java
"
nocompile_sources
=
[
]
-
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
D
\
nHint
:
Add
\
"
/
/
build
/
android
/
test
/
nocompile_gn
:
d_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
cpp_template_missing_symbol_test_java
"
+
expected_compile_output_regex
=
"
error
:
cannot
find
symbol
test
\
.
missing_symbol
\
.
D
\
nHint
:
Add
\
"
/
/
chromium
/
build
/
android
/
test
/
nocompile_gn
:
d_java
\
"
to
deps
of
/
/
build
/
android
/
test
/
nocompile_gn
:
cpp_template_missing_symbol_test_java
"
}
]
}
diff
-
-
git
a
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
b
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
index
18c637448
.
.
1ad8c5dd5
100644
-
-
-
a
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
incremental_javac_gn
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
declare_args
(
)
{
incremental_javac_test_toggle_gn
=
false
-
85
7
+
85
7
incremental_javac_prebuilt
(
"
no_signature_change_prebuilt_generator
"
)
{
testonly
=
true
sources
=
all_test_sources
toggle_gn_target
=
"
:
changing_java
"
-
pydeps
=
[
"
/
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
+
pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
}
android_java_prebuilt
(
"
no_signature_change_prebuilt_java
"
)
{
diff
-
-
git
a
/
android
/
test
/
missing_symbol_test
.
gni
b
/
android
/
test
/
missing_symbol_test
.
gni
index
a11eef3cf
.
.
0b156fb6b
100644
-
-
-
a
/
android
/
test
/
missing_symbol_test
.
gni
+
+
+
b
/
android
/
test
/
missing_symbol_test
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
missing_symbol_generated_importer_template_nocompile_source
=
-
"
/
/
build
/
android
/
java
/
test
/
missing_symbol
/
Importer
.
template
"
+
"
/
/
chromium
/
build
/
android
/
java
/
test
/
missing_symbol
/
Importer
.
template
"
template
(
"
missing_symbol_test
"
)
{
#
Not
named
"
_java
"
to
prevent
target
from
being
considered
a
classpath
dep
.
diff
-
-
git
a
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
b
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
index
11feef6a4
.
.
05b6fc5c1
100644
-
-
-
a
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
+
+
+
b
/
android
/
test
/
nocompile_gn
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
android
/
test
/
missing_symbol_test
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
android
/
test
/
missing_symbol_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
android_nocompile
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
import
(
"
nocompile_sources
.
gni
"
)
template
(
"
lint_test
"
)
{
-
24
7
+
24
7
template
(
"
lint_test
"
)
{
#
targets
.
We
need
to
test
linting
a
normal
apk
target
.
apk_name
=
_apk_target_name
deps
=
[
"
:
_library_target_name
"
]
-
android_manifest
=
"
/
/
build
/
android
/
AndroidManifest
.
xml
"
+
android_manifest
=
"
/
/
chromium
/
build
/
android
/
AndroidManifest
.
xml
"
}
android_lint
(
target_name
)
{
diff
-
-
git
a
/
android
/
unused_resources
/
BUILD
.
gn
b
/
android
/
unused_resources
/
BUILD
.
gn
index
15961048b
.
.
bdb50fa3e
100644
-
-
-
a
/
android
/
unused_resources
/
BUILD
.
gn
+
+
+
b
/
android
/
unused_resources
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
java_binary
(
"
unused_resources
"
)
{
-
sources
=
[
"
/
/
build
/
android
/
unused_resources
/
UnusedResources
.
java
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
unused_resources
/
UnusedResources
.
java
"
]
main_class
=
"
build
.
android
.
unused_resources
.
UnusedResources
"
deps
=
[
"
/
/
third_party
/
android_deps
:
com_android_tools_common_java
"
diff
-
-
git
a
/
apple
/
apple_info_plist
.
gni
b
/
apple
/
apple_info_plist
.
gni
index
fe51773dd
.
.
db01f5b77
100644
-
-
-
a
/
apple
/
apple_info_plist
.
gni
+
+
+
b
/
apple
/
apple_info_plist
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
compile_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
compile_plist
.
gni
"
)
#
The
base
template
used
to
generate
Info
.
plist
files
for
iOS
and
Mac
apps
and
#
frameworks
.
diff
-
-
git
a
/
apple
/
compile_entitlements
.
gni
b
/
apple
/
compile_entitlements
.
gni
index
006d5ac2d
.
.
5cd6fa97d
100644
-
-
-
a
/
apple
/
compile_entitlements
.
gni
+
+
+
b
/
apple
/
compile_entitlements
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
compile_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
compile_plist
.
gni
"
)
#
Template
to
merge
multiple
.
entitlements
files
performing
variable
#
substitutions
.
diff
-
-
git
a
/
apple
/
compile_plist
.
gni
b
/
apple
/
compile_plist
.
gni
index
90485b6a2
.
.
6a3334da1
100644
-
-
-
a
/
apple
/
compile_plist
.
gni
+
+
+
b
/
apple
/
compile_plist
.
gni
-
43
7
+
43
7
template
(
"
compile_plist
"
)
{
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
invoker
.
plist_templates
outputs
=
[
_merged_name
]
args
=
[
-
59
7
+
59
7
template
(
"
compile_plist
"
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
_merged_name
]
outputs
=
[
_output_name
]
args
=
[
diff
-
-
git
a
/
apple
/
convert_plist
.
gni
b
/
apple
/
convert_plist
.
gni
index
a1134d9b3
.
.
6516846d1
100644
-
-
-
a
/
apple
/
convert_plist
.
gni
+
+
+
b
/
apple
/
convert_plist
.
gni
-
27
7
+
27
7
template
(
"
convert_plist
"
)
{
"
deps
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
invoker
.
source
]
outputs
=
[
invoker
.
output
]
args
=
[
diff
-
-
git
a
/
apple
/
tweak_info_plist
.
gni
b
/
apple
/
tweak_info_plist
.
gni
index
33f22ca2d
.
.
b7daa76d5
100644
-
-
-
a
/
apple
/
tweak_info_plist
.
gni
+
+
+
b
/
apple
/
tweak_info_plist
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
#
Template
to
run
the
tweak_info_plist
.
py
script
on
a
plist
.
#
-
36
7
+
36
7
template
(
"
tweak_info_plist
"
)
{
"
testonly
"
"
deps
"
]
)
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
invoker
.
info_plists
outputs
=
[
_source_name
]
args
=
[
-
62
10
+
62
10
template
(
"
tweak_info_plist
"
)
{
"
args
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
tweak_info_plist
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
tweak_info_plist
.
py
"
inputs
=
[
script
-
"
/
/
build
/
util
/
version
.
py
"
+
"
/
/
chromium
/
build
/
util
/
version
.
py
"
lastchange_file
"
/
/
chrome
/
VERSION
"
]
diff
-
-
git
a
/
args
/
headless
.
gn
b
/
args
/
headless
.
gn
index
0f1e2c517
.
.
b94bbd8b9
100644
-
-
-
a
/
args
/
headless
.
gn
+
+
+
b
/
args
/
headless
.
gn
-
2
7
+
2
7
#
#
Add
import
to
arg
.
gn
in
out
directory
and
run
gn
gen
on
the
directory
to
use
.
#
E
.
g
.
for
out
directory
out
/
foo
:
-
#
echo
'
import
(
"
/
/
build
/
args
/
headless
.
gn
"
)
'
>
out
/
foo
/
args
.
gn
+
#
echo
'
import
(
"
/
/
chromium
/
build
/
args
/
headless
.
gn
"
)
'
>
out
/
foo
/
args
.
gn
#
gn
gen
out
/
foo
#
#
Use
gn
args
to
add
your
own
build
preference
args
.
diff
-
-
git
a
/
buildflag_header
.
gni
b
/
buildflag_header
.
gni
index
821c4efe4
.
.
50e476fa8
100644
-
-
-
a
/
buildflag_header
.
gni
+
+
+
b
/
buildflag_header
.
gni
-
95
7
+
95
7
#
}
template
(
"
buildflag_header
"
)
{
action
(
target_name
)
{
-
script
=
"
/
/
build
/
write_buildflag_header
.
py
"
+
script
=
"
/
/
chromium
/
build
/
write_buildflag_header
.
py
"
if
(
defined
(
invoker
.
header_dir
)
)
{
header_file
=
"
{
invoker
.
header_dir
}
/
{
invoker
.
header
}
"
-
132
6
+
132
6
template
(
"
buildflag_header
"
)
{
"
visibility
"
]
)
-
public_deps
=
[
"
/
/
build
:
buildflag_header_h
"
]
+
public_deps
=
[
"
/
/
chromium
/
build
:
buildflag_header_h
"
]
}
}
diff
-
-
git
a
/
cipd
/
cipd
.
gni
b
/
cipd
/
cipd
.
gni
index
55701a483
.
.
8b7139106
100644
-
-
-
a
/
cipd
/
cipd
.
gni
+
+
+
b
/
cipd
/
cipd
.
gni
-
122
7
+
122
7
template
(
"
cipd_package_definition_by_file
"
)
{
_output_yaml_filename
=
invoker
.
package_definition_yaml
}
action
(
target_name
)
{
-
script
=
"
/
/
build
/
cipd
/
cipd_from_file
.
py
"
+
script
=
"
/
/
chromium
/
build
/
cipd
/
cipd_from_file
.
py
"
inputs
=
[
invoker
.
files_file
]
args
=
[
"
-
-
description
=
"
+
invoker
.
description
diff
-
-
git
a
/
compiled_action
.
gni
b
/
compiled_action
.
gni
index
7e25a0b6f
.
.
22df2c538
100644
-
-
-
a
/
compiled_action
.
gni
+
+
+
b
/
compiled_action
.
gni
-
98
7
+
98
7
template
(
"
compiled_action
"
)
{
inputs
=
[
]
}
-
script
=
"
/
/
build
/
gn_run_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
gn_run_binary
.
py
"
#
Constuct
the
host
toolchain
version
of
the
tool
.
host_tool
=
invoker
.
tool
+
"
(
host_toolchain
)
"
-
144
7
+
144
7
template
(
"
compiled_action_foreach
"
)
{
inputs
=
[
]
}
-
script
=
"
/
/
build
/
gn_run_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
gn_run_binary
.
py
"
#
Constuct
the
host
toolchain
version
of
the
tool
.
host_tool
=
invoker
.
tool
+
"
(
host_toolchain
)
"
diff
-
-
git
a
/
config
/
BUILD
.
gn
b
/
config
/
BUILD
.
gn
index
cf033c570
.
.
30a2462dd
100644
-
-
-
a
/
config
/
BUILD
.
gn
+
+
+
b
/
config
/
BUILD
.
gn
-
2
25
+
2
25
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
#
Subprojects
need
to
override
arguments
in
{
mac
ios
}
_sdk_overrides
.
gni
in
their
#
.
gn
config
but
those
arguments
are
only
used
on
macOS
.
Including
#
mac_sdk_overrides
.
gni
insures
that
this
doesn
'
t
trigger
an
unused
argument
#
warning
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
pch
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
pch
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
}
#
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
-
240
7
+
240
7
group
(
"
common_deps
"
)
{
public_deps
=
[
]
if
(
using_sanitizer
)
{
-
public_deps
+
=
[
"
/
/
build
/
config
/
sanitizers
:
deps
"
]
+
public_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
deps
"
]
}
#
if
(
use_custom_libcxx
)
{
-
259
7
+
259
7
group
(
"
common_deps
"
)
{
public_deps
+
=
[
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
build
/
config
:
runtime_library_group
"
]
if
(
is_asan
)
{
-
public_deps
+
=
[
"
/
/
build
/
config
/
fuchsia
:
asan_runtime_library
"
]
+
public_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
asan_runtime_library
"
]
}
}
}
-
287
8
+
287
8
group
(
"
shared_library_deps
"
)
{
#
Windows
linker
setup
for
EXEs
and
DLLs
.
if
(
is_win
)
{
_windows_linker_configs
=
[
-
"
/
/
build
/
config
/
win
:
sdk_link
"
-
"
/
/
build
/
config
/
win
:
common_linker_setup
"
+
"
/
/
chromium
/
build
/
config
/
win
:
sdk_link
"
+
"
/
/
chromium
/
build
/
config
/
win
:
common_linker_setup
"
]
}
-
299
18
+
299
18
config
(
"
executable_config
"
)
{
if
(
is_win
)
{
configs
+
=
_windows_linker_configs
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
}
else
if
(
is_ios
)
{
configs
+
=
[
-
"
/
/
build
/
config
/
ios
:
ios_dynamic_flags
"
-
"
/
/
build
/
config
/
ios
:
ios_executable_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_dynamic_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_executable_flags
"
]
}
else
if
(
is_linux
|
|
is_chromeos
|
|
is_android
|
|
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
executable_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
executable_config
"
]
if
(
is_chromecast
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromecast
:
executable_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromecast
:
executable_config
"
]
}
else
if
(
is_fuchsia
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
fuchsia
:
executable_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
executable_config
"
]
}
}
-
322
7
+
322
7
config
(
"
executable_config
"
)
{
if
(
use_locally_built_instrumented_libraries
)
{
configs
+
=
[
"
/
/
third_party
/
instrumented_libraries
:
locally_built_ldflags
"
]
}
-
configs
+
=
[
"
/
/
build
/
config
/
sanitizers
:
link_executable
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
link_executable
"
]
}
#
Shared
library
configs
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
334
16
+
334
16
config
(
"
shared_library_config
"
)
{
if
(
is_win
)
{
configs
+
=
_windows_linker_configs
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
mac_dynamic_flags
"
]
}
else
if
(
is_ios
)
{
configs
+
=
[
-
"
/
/
build
/
config
/
ios
:
ios_dynamic_flags
"
-
"
/
/
build
/
config
/
ios
:
ios_shared_library_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_dynamic_flags
"
+
"
/
/
chromium
/
build
/
config
/
ios
:
ios_shared_library_flags
"
]
}
else
if
(
is_chromecast
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromecast
:
shared_library_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromecast
:
shared_library_config
"
]
}
else
if
(
is_linux
|
|
is_chromeos
|
|
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
shared_library_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
shared_library_config
"
]
}
#
If
we
'
re
using
the
prebuilt
instrumented
libraries
with
the
sanitizers
we
-
354
7
+
354
7
config
(
"
shared_library_config
"
)
{
if
(
use_locally_built_instrumented_libraries
)
{
configs
+
=
[
"
/
/
third_party
/
instrumented_libraries
:
locally_built_ldflags
"
]
}
-
configs
+
=
[
"
/
/
build
/
config
/
sanitizers
:
link_shared_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
link_shared_library
"
]
}
#
Add
this
config
to
your
target
to
enable
precompiled
headers
.
-
376
12
+
376
12
config
(
"
precompiled_headers
"
)
{
#
This
is
a
file
that
GN
will
compile
with
the
above
header
.
It
will
be
#
implicitly
added
to
the
sources
(
potentially
multiple
times
with
one
#
variant
for
each
language
used
in
the
target
)
.
-
precompiled_source
=
"
/
/
build
/
precompile
.
cc
"
+
precompiled_source
=
"
/
/
chromium
/
build
/
precompile
.
cc
"
#
Force
include
the
header
.
cflags
=
[
"
/
FI
precompiled_header
"
]
}
else
if
(
is_mac
|
|
is_linux
)
{
-
precompiled_source
=
"
/
/
build
/
precompile
.
h
"
+
precompiled_source
=
"
/
/
chromium
/
build
/
precompile
.
h
"
}
}
}
diff
-
-
git
a
/
config
/
BUILDCONFIG
.
gn
b
/
config
/
BUILDCONFIG
.
gn
index
a1e89b030
.
.
8c7c04967
100644
-
-
-
a
/
config
/
BUILDCONFIG
.
gn
+
+
+
b
/
config
/
BUILDCONFIG
.
gn
-
191
33
+
191
33
if
(
host_toolchain
=
=
"
"
)
{
if
(
host_os
=
=
"
linux
"
|
|
host_os
=
=
"
openbsd
"
)
{
if
(
target_os
!
=
"
linux
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
}
else
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
host_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
host_cpu
"
}
}
else
if
(
host_os
=
=
"
mac
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
mac
:
clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
mac
:
clang_
host_cpu
"
}
else
if
(
host_os
=
=
"
win
"
)
{
#
On
Windows
always
use
the
target
CPU
for
host
builds
for
x86
/
x64
.
On
the
#
configurations
we
support
this
will
always
work
and
it
saves
build
steps
.
#
Windows
ARM64
targets
require
an
x64
host
for
cross
build
.
if
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
)
{
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
target_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
target_cpu
"
}
}
else
if
(
is_clang
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
host_cpu
"
}
else
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
win
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
host_cpu
"
}
}
else
if
(
host_os
=
=
"
aix
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
aix
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
aix
:
host_cpu
"
}
else
if
(
host_os
=
=
"
zos
"
)
{
-
host_toolchain
=
"
/
/
build
/
toolchain
/
zos
:
host_cpu
"
+
host_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
zos
:
host_cpu
"
}
else
{
assert
(
false
"
Unsupported
host_os
:
host_os
"
)
}
-
228
40
+
228
40
_default_toolchain
=
"
"
if
(
target_os
=
=
"
android
"
)
{
assert
(
host_os
=
=
"
linux
"
|
|
host_os
=
=
"
mac
"
"
Android
builds
are
only
supported
on
Linux
and
Mac
hosts
.
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
android
:
android_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
android
:
android_clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
chromeos
"
|
|
target_os
=
=
"
linux
"
|
|
target_os
=
=
"
openbsd
"
)
{
#
See
comments
in
build
/
toolchain
/
cros
/
BUILD
.
gn
about
board
compiles
.
if
(
is_clang
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_
target_cpu
"
}
else
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
linux
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
target_cpu
"
}
}
else
if
(
target_os
=
=
"
fuchsia
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
fuchsia
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
fuchsia
:
target_cpu
"
}
else
if
(
target_os
=
=
"
ios
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
ios
:
ios_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
mac
"
)
{
#
assert
(
host_os
=
=
"
mac
"
|
|
host_os
=
=
"
linux
"
#
"
Mac
cross
-
compiles
are
unsupported
.
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
mac
:
clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
mac
:
clang_
target_cpu
"
}
else
if
(
target_os
=
=
"
win
"
)
{
#
On
Windows
we
use
the
same
toolchain
for
host
and
target
by
default
.
#
Beware
win
cross
builds
have
some
caveats
see
docs
/
win_cross
.
md
if
(
is_clang
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
win_clang_
target_cpu
"
}
else
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
target_cpu
"
}
}
else
if
(
target_os
=
=
"
winuwp
"
)
{
#
Only
target
WinUWP
on
for
a
Windows
store
application
and
only
#
x86
x64
and
arm
are
supported
target
CPUs
.
assert
(
target_cpu
=
=
"
x86
"
|
|
target_cpu
=
=
"
x64
"
|
|
target_cpu
=
=
"
arm
"
|
|
target_cpu
=
=
"
arm64
"
)
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
win
:
uwp_
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
win
:
uwp_
target_cpu
"
}
else
if
(
target_os
=
=
"
aix
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
aix
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
aix
:
target_cpu
"
}
else
if
(
target_os
=
=
"
zos
"
)
{
-
_default_toolchain
=
"
/
/
build
/
toolchain
/
zos
:
target_cpu
"
+
_default_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
zos
:
target_cpu
"
}
else
{
assert
(
false
"
Unsupported
target_os
:
target_os
"
)
}
-
324
71
+
324
71
is_posix
=
!
is_win
&
&
!
is_fuchsia
#
Holds
all
configs
used
for
running
the
compiler
.
default_compiler_configs
=
[
-
"
/
/
build
/
config
:
feature_flags
"
-
"
/
/
build
/
config
/
compiler
:
afdo
"
-
"
/
/
build
/
config
/
compiler
:
afdo_optimize_size
"
-
"
/
/
build
/
config
/
compiler
:
cet_shadow_stack
"
-
"
/
/
build
/
config
/
compiler
:
chromium_code
"
-
"
/
/
build
/
config
/
compiler
:
compiler
"
-
"
/
/
build
/
config
/
compiler
:
compiler_arm_fpu
"
-
"
/
/
build
/
config
/
compiler
:
compiler_arm_thumb
"
-
"
/
/
build
/
config
/
compiler
:
default_include_dirs
"
-
"
/
/
build
/
config
/
compiler
:
default_init_stack_vars
"
-
"
/
/
build
/
config
/
compiler
:
default_optimization
"
-
"
/
/
build
/
config
/
compiler
:
default_stack_frames
"
-
"
/
/
build
/
config
/
compiler
:
default_symbols
"
-
"
/
/
build
/
config
/
compiler
:
export_dynamic
"
-
"
/
/
build
/
config
/
compiler
:
no_exceptions
"
-
"
/
/
build
/
config
/
compiler
:
no_rtti
"
-
"
/
/
build
/
config
/
compiler
:
no_unresolved_symbols
"
-
"
/
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
-
"
/
/
build
/
config
/
compiler
:
runtime_library
"
-
"
/
/
build
/
config
/
compiler
:
thin_archive
"
-
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
-
"
/
/
build
/
config
/
compiler
/
pgo
:
default_pgo_flags
"
-
"
/
/
build
/
config
/
coverage
:
default_coverage
"
-
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
+
"
/
/
chromium
/
build
/
config
:
feature_flags
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
afdo
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
afdo_optimize_size
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
cet_shadow_stack
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler_arm_fpu
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
compiler_arm_thumb
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_include_dirs
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_init_stack_vars
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_stack_frames
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
default_symbols
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
export_dynamic
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_exceptions
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_rtti
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
no_unresolved_symbols
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
runtime_library
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thin_archive
"
+
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
:
default_pgo_flags
"
+
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
+
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
if
(
is_win
)
{
default_compiler_configs
+
=
[
-
"
/
/
build
/
config
/
win
:
default_cfg_compiler
"
-
"
/
/
build
/
config
/
win
:
default_crt
"
-
"
/
/
build
/
config
/
win
:
lean_and_mean
"
-
"
/
/
build
/
config
/
win
:
nominmax
"
-
"
/
/
build
/
config
/
win
:
unicode
"
-
"
/
/
build
/
config
/
win
:
winver
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_cfg_compiler
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_crt
"
+
"
/
/
chromium
/
build
/
config
/
win
:
lean_and_mean
"
+
"
/
/
chromium
/
build
/
config
/
win
:
nominmax
"
+
"
/
/
chromium
/
build
/
config
/
win
:
unicode
"
+
"
/
/
chromium
/
build
/
config
/
win
:
winver
"
]
}
if
(
is_posix
)
{
if
(
current_os
!
=
"
aix
"
)
{
default_compiler_configs
+
=
-
[
"
/
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
+
[
"
/
/
chromium
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
}
}
if
(
is_fuchsia
)
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
symbol_visibility_hidden
"
]
}
if
(
is_android
)
{
default_compiler_configs
+
=
-
[
"
/
/
build
/
config
/
android
:
default_orderfile_instrumentation
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
default_orderfile_instrumentation
"
]
}
if
(
is_clang
&
&
!
is_nacl
)
{
default_compiler_configs
+
=
[
-
"
/
/
build
/
config
/
clang
:
find_bad_constructs
"
-
"
/
/
build
/
config
/
clang
:
extra_warnings
"
+
"
/
/
chromium
/
build
/
config
/
clang
:
find_bad_constructs
"
+
"
/
/
chromium
/
build
/
config
/
clang
:
extra_warnings
"
]
}
#
Debug
/
release
-
related
defines
.
if
(
is_debug
)
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
:
debug
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
:
debug
"
]
}
else
{
-
default_compiler_configs
+
=
[
"
/
/
build
/
config
:
release
"
]
+
default_compiler_configs
+
=
[
"
/
/
chromium
/
build
/
config
:
release
"
]
}
#
Static
libraries
and
source
sets
use
only
the
compiler
ones
.
-
411
28
+
411
28
if
(
is_win
)
{
#
Many
targets
remove
these
configs
so
they
are
not
contained
within
#
/
/
build
/
config
:
executable_config
for
easy
removal
.
_linker_configs
=
[
-
"
/
/
build
/
config
/
win
:
default_incremental_linking
"
+
"
/
/
chromium
/
build
/
config
/
win
:
default_incremental_linking
"
#
Default
to
console
-
mode
apps
.
Most
of
our
targets
are
tests
and
such
#
that
shouldn
'
t
use
the
windows
subsystem
.
-
"
/
/
build
/
config
/
win
:
console
"
+
"
/
/
chromium
/
build
/
config
/
win
:
console
"
]
}
else
if
(
is_mac
)
{
-
_linker_configs
=
[
"
/
/
build
/
config
/
mac
:
strip_all
"
]
+
_linker_configs
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
strip_all
"
]
}
else
{
_linker_configs
=
[
]
}
#
Executable
defaults
.
default_executable_configs
=
default_compiler_configs
+
[
-
"
/
/
build
/
config
:
default_libs
"
-
"
/
/
build
/
config
:
executable_config
"
+
"
/
/
chromium
/
build
/
config
:
default_libs
"
+
"
/
/
chromium
/
build
/
config
:
executable_config
"
]
+
_linker_configs
if
(
is_win
)
{
#
Turn
on
linker
CFI
for
executables
and
position
it
so
it
can
be
removed
#
if
needed
.
-
default_executable_configs
+
=
[
"
/
/
build
/
config
/
win
:
cfi_linker
"
]
+
default_executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
cfi_linker
"
]
}
set_defaults
(
"
executable
"
)
{
-
442
19
+
442
19
set_defaults
(
"
executable
"
)
{
#
Shared
library
and
loadable
module
defaults
(
also
for
components
in
component
#
mode
)
.
default_shared_library_configs
=
default_compiler_configs
+
[
-
"
/
/
build
/
config
:
default_libs
"
-
"
/
/
build
/
config
:
shared_library_config
"
+
"
/
/
chromium
/
build
/
config
:
default_libs
"
+
"
/
/
chromium
/
build
/
config
:
shared_library_config
"
]
+
_linker_configs
if
(
is_win
)
{
#
Turn
on
linker
CFI
for
DLLs
and
position
it
so
it
can
be
removed
if
needed
.
-
default_shared_library_configs
+
=
[
"
/
/
build
/
config
/
win
:
cfi_linker
"
]
+
default_shared_library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
cfi_linker
"
]
}
if
(
is_android
)
{
#
Strip
native
JNI
exports
from
shared
libraries
by
default
.
Binaries
that
#
want
this
can
remove
this
config
.
default_shared_library_configs
+
=
-
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
set_defaults
(
"
shared_library
"
)
{
configs
=
default_shared_library_configs
-
464
7
+
464
7
set_defaults
(
"
loadable_module
"
)
{
#
loadable_modules
are
generally
used
by
other
libs
not
just
via
JNI
.
if
(
is_android
)
{
-
configs
-
=
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
}
-
485
8
+
485
8
TESTONLY_AND_VISIBILITY
=
[
#
Variables
#
no_default_deps
:
If
true
no
standard
dependencies
will
be
added
.
#
Targets
that
set
this
usually
also
want
to
remove
-
#
"
/
/
build
/
config
/
compiler
:
runtime_library
"
from
configs
(
to
remove
-
#
its
subconfig
"
/
/
build
/
config
/
c
+
+
:
runtime_library
"
)
.
+
#
"
/
/
chromium
/
build
/
config
/
compiler
:
runtime_library
"
from
configs
(
to
remove
+
#
its
subconfig
"
/
/
chromium
/
build
/
config
/
c
+
+
:
runtime_library
"
)
.
foreach
(
_target_type
[
"
executable
"
-
511
7
+
511
7
foreach
(
_target_type
#
/
/
build
/
config
:
shared_library_deps
#
(
This
explicit
list
is
so
that
grepping
for
these
configs
finds
where
#
they
are
used
.
)
-
deps
+
=
[
"
/
/
build
/
config
:
{
_target_type
}
_deps
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
config
:
{
_target_type
}
_deps
"
]
}
#
On
Android
write
shared
library
output
file
to
metadata
.
We
will
use
-
592
7
+
592
7
if
(
is_component_build
)
{
default_component_configs
=
default_shared_library_configs
if
(
is_android
)
{
default_component_configs
-
=
-
[
"
/
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
+
[
"
/
/
chromium
/
build
/
config
/
android
:
hide_all_but_jni_onload
"
]
}
}
else
{
default_component_configs
=
default_compiler_configs
diff
-
-
git
a
/
config
/
aix
/
BUILD
.
gn
b
/
config
/
aix
/
BUILD
.
gn
index
9000f6dfa
.
.
6aaeaedae
100644
-
-
-
a
/
config
/
aix
/
BUILD
.
gn
+
+
+
b
/
config
/
aix
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
.
diff
-
-
git
a
/
config
/
android
/
BUILD
.
gn
b
/
config
/
android
/
BUILD
.
gn
index
28b7d8c91
.
.
37e6ca554
100644
-
-
-
a
/
config
/
android
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
BUILD
.
gn
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
}
assert
(
is_android
)
-
100
13
+
100
13
config
(
"
runtime_library
"
)
{
config
(
"
hide_all_but_jni_onload
"
)
{
ldflags
=
[
"
-
Wl
-
-
version
-
script
=
"
+
rebase_path
(
-
"
/
/
build
/
android
/
android_only_explicit_jni_exports
.
lst
"
+
"
/
/
chromium
/
build
/
android
/
android_only_explicit_jni_exports
.
lst
"
root_build_dir
)
]
}
config
(
"
hide_all_but_jni
"
)
{
ldflags
=
[
"
-
Wl
-
-
version
-
script
=
"
+
-
rebase_path
(
"
/
/
build
/
android
/
android_only_jni_exports
.
lst
"
+
rebase_path
(
"
/
/
chromium
/
build
/
android
/
android_only_jni_exports
.
lst
"
root_build_dir
)
]
}
diff
-
-
git
a
/
config
/
android
/
DIR_METADATA
b
/
config
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
config
/
android
/
DIR_METADATA
+
+
+
b
/
config
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
config
/
android
/
abi
.
gni
b
/
config
/
android
/
abi
.
gni
index
9f2f14b30
.
.
c2455baac
100644
-
-
-
a
/
config
/
android
/
abi
.
gni
+
+
+
b
/
config
/
android
/
abi
.
gni
-
45
7
+
45
7
if
(
current_cpu
=
=
"
x86
"
)
{
android_app_abi
=
"
x86
"
android_abi_target
=
"
i686
-
linux
-
android
"
}
else
if
(
current_cpu
=
=
"
arm
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
if
(
arm_version
<
7
)
{
android_app_abi
=
"
armeabi
"
}
else
{
-
97
5
+
97
5
if
(
target_cpu
=
=
"
arm64
"
)
{
if
(
defined
(
android_secondary_abi_cpu
)
)
{
android_secondary_abi_toolchain
=
-
"
/
/
build
/
toolchain
/
android
:
android_clang_
{
android_secondary_abi_cpu
}
"
+
"
/
/
chromium
/
build
/
toolchain
/
android
:
android_clang_
{
android_secondary_abi_cpu
}
"
}
diff
-
-
git
a
/
config
/
android
/
android_nocompile
.
gni
b
/
config
/
android
/
android_nocompile
.
gni
index
159ebd5f3
.
.
a8cd9804b
100644
-
-
-
a
/
config
/
android
/
android_nocompile
.
gni
+
+
+
b
/
config
/
android
/
android_nocompile
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
declare_args
(
)
{
#
Used
by
tests
to
enable
generating
build
files
for
GN
targets
which
should
-
33
8
+
33
8
template
(
"
android_nocompile_test_suite
"
)
{
action
(
target_name
)
{
testonly
=
true
-
script
=
"
/
/
build
/
android
/
gyp
/
nocompile_test
.
py
"
-
pool
=
"
/
/
build
/
config
/
android
:
nocompile_pool
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
nocompile_test
.
py
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
nocompile_pool
"
_tests
=
invoker
.
tests
_test0
=
_tests
[
0
]
-
58
7
+
58
7
template
(
"
android_nocompile_test_suite
"
)
{
#
Depend
on
compile_java
Python
scripts
so
that
the
action
is
re
-
run
whenever
the
script
is
#
modified
.
-
_pydeps
=
[
"
/
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
+
_pydeps
=
[
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
pydeps
"
]
if
(
defined
(
invoker
.
pydeps
)
)
{
_pydeps
+
=
invoker
.
pydeps
}
diff
-
-
git
a
/
config
/
android
/
build_vars
.
gni
b
/
config
/
android
/
build_vars
.
gni
index
a47607dc7
.
.
3c09ce0f0
100644
-
-
-
a
/
config
/
android
/
build_vars
.
gni
+
+
+
b
/
config
/
android
/
build_vars
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
#
Contains
useful
GN
variables
that
may
be
used
by
scripts
that
take
#
-
-
output
-
directory
as
an
arg
.
diff
-
-
git
a
/
config
/
android
/
config
.
gni
b
/
config
/
android
/
config
.
gni
index
5fa609988
.
.
ab17b2c1b
100644
-
-
-
a
/
config
/
android
/
config
.
gni
+
+
+
b
/
config
/
android
/
config
.
gni
-
8
9
+
8
9
#
toolchain
this
GNI
file
may
be
read
and
processed
from
within
Chrome
OS
#
toolchains
.
Checking
|
is_android
|
here
would
therefore
be
too
restrictive
.
if
(
is_android
|
|
is_chromeos
)
{
-
import
(
"
/
/
build
/
config
/
android
/
channel
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
channel
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
import
(
"
abi
.
gni
"
)
-
18
7
+
18
7
if
(
is_android
|
|
is_chromeos
)
{
#
Some
non
-
chromium
projects
(
e
.
g
.
WebRTC
)
use
our
build
configs
#
heavily
but
don
'
t
write
gclient
args
files
.
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
if
(
defined
(
checkout_android_native_support
)
)
{
n
=
"
0x0A
"
#
Newline
assert
(
checkout_android_native_support
-
32
7
+
32
7
if
(
is_android
|
|
is_chromeos
)
{
}
has_chrome_android_internal
=
-
exec_script
(
"
/
/
build
/
dir_exists
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
dir_exists
.
py
"
[
rebase_path
(
"
/
/
clank
"
root_build_dir
)
]
"
string
"
)
=
=
"
True
"
-
84
7
+
84
7
if
(
is_android
|
|
is_chromeos
)
{
if
(
enable_chrome_android_internal
)
{
import
(
"
/
/
clank
/
config
.
gni
"
)
}
else
{
-
import
(
"
/
/
build
/
config
/
android
/
sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
sdk
.
gni
"
)
declare_args
(
)
{
#
Which
Android
SDK
to
use
.
android_sdk_release
=
default_android_sdk_release
-
128
7
+
128
7
if
(
is_android
|
|
is_chromeos
)
{
}
if
(
!
defined
(
default_android_keystore_path
)
)
{
-
default_android_keystore_path
=
"
/
/
build
/
android
/
chromium
-
debug
.
keystore
"
+
default_android_keystore_path
=
"
/
/
chromium
/
build
/
android
/
chromium
-
debug
.
keystore
"
default_android_keystore_name
=
"
chromiumdebugkey
"
default_android_keystore_password
=
"
chromium
"
}
diff
-
-
git
a
/
config
/
android
/
copy_ex
.
gni
b
/
config
/
android
/
copy_ex
.
gni
index
d3705dd7e
.
.
1e64aecbd
100644
-
-
-
a
/
config
/
android
/
copy_ex
.
gni
+
+
+
b
/
config
/
android
/
copy_ex
.
gni
-
19
7
+
19
7
#
The
following
variables
have
the
usual
GN
meaning
:
data
deps
inputs
#
outputs
testonly
visibility
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
template
(
"
copy_ex
"
)
{
action_with_pydeps
(
target_name
)
{
-
43
7
+
43
7
template
(
"
copy_ex
"
)
{
inputs
=
invoker
.
inputs
}
-
script
=
"
/
/
build
/
android
/
gyp
/
copy_ex
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
copy_ex
.
py
"
args
=
[
"
-
-
dest
"
diff
-
-
git
a
/
config
/
android
/
create_unwind_table
.
gni
b
/
config
/
android
/
create_unwind_table
.
gni
index
15f8fd9e4
.
.
a7696891b
100644
-
-
-
a
/
config
/
android
/
create_unwind_table
.
gni
+
+
+
b
/
config
/
android
/
create_unwind_table
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
template
(
"
unwind_table_asset_v2
"
)
{
_asset_path
=
"
{
target_out_dir
}
/
{
target_name
}
/
unwind_cfi_32_v2
"
-
17
7
+
17
7
template
(
"
unwind_table_asset_v2
"
)
{
"
root_out_dir
"
)
}
-
script
=
"
/
/
build
/
android
/
gyp
/
create_unwind_table
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_unwind_table
.
py
"
outputs
=
[
_asset_path
]
inputs
=
[
"
{
_root_dir
}
/
lib
.
unstripped
/
shlib_prefix
{
invoker
.
library_target
}
shlib_extension
"
]
diff
-
-
git
a
/
config
/
android
/
extract_unwind_tables
.
gni
b
/
config
/
android
/
extract_unwind_tables
.
gni
index
5444c5b97
.
.
edec145f0
100644
-
-
-
a
/
config
/
android
/
extract_unwind_tables
.
gni
+
+
+
b
/
config
/
android
/
extract_unwind_tables
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
template
(
"
unwind_table_asset
"
)
{
#
Note
:
This
file
name
is
used
in
multiple
monochrome
build
scripts
.
-
18
7
+
18
7
template
(
"
unwind_table_asset
"
)
{
"
root_out_dir
"
)
}
-
script
=
"
/
/
build
/
android
/
gyp
/
extract_unwind_tables
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
extract_unwind_tables
.
py
"
outputs
=
[
_asset_path
]
inputs
=
[
"
{
_root_dir
}
/
lib
.
unstripped
/
shlib_prefix
{
invoker
.
library_target
}
shlib_extension
"
]
diff
-
-
git
a
/
config
/
android
/
internal_rules
.
gni
b
/
config
/
android
/
internal_rules
.
gni
index
0651e6b39
.
.
e4f82f08e
100644
-
-
-
a
/
config
/
android
/
internal_rules
.
gni
+
+
+
b
/
config
/
android
/
internal_rules
.
gni
-
4
19
+
4
19
#
Do
not
add
any
imports
to
non
-
/
/
build
directories
here
.
#
Some
projects
(
e
.
g
.
V8
)
do
not
have
non
-
build
directories
DEPS
'
ed
in
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
copy_ex
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compute_inputs_for_analyze
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
kythe
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
copy_ex
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compute_inputs_for_analyze
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
kythe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
current_toolchain
=
=
default_toolchain
)
{
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
}
assert
(
is_android
)
-
190
7
+
190
7
template
(
"
write_build_config
"
)
{
deps
+
=
[
invoker
.
android_manifest_dep
]
}
-
script
=
"
/
/
build
/
android
/
gyp
/
write_build_config
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
write_build_config
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
[
]
outputs
=
[
invoker
.
build_config
]
-
670
11
+
670
11
template
(
"
generate_android_wrapper
"
)
{
generate_wrapper
(
target_name
)
{
forward_variables_from
(
invoker
"
*
"
TESTONLY_AND_VISIBILITY
)
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
generator_script
=
"
/
/
build
/
android
/
gyp
/
generate_android_wrapper
.
py
"
+
generator_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
generate_android_wrapper
.
py
"
sources
=
[
-
"
/
/
build
/
android
/
gyp
/
util
/
build_utils
.
py
"
-
"
/
/
build
/
gn_helpers
.
py
"
-
"
/
/
build
/
util
/
generate_wrapper
.
py
"
+
"
/
/
chromium
/
build
/
android
/
gyp
/
util
/
build_utils
.
py
"
+
"
/
/
chromium
/
build
/
gn_helpers
.
py
"
+
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
py
"
]
}
}
-
702
7
+
702
7
template
(
"
generate_r_java
"
)
{
inputs
=
[
invoker
.
build_config
]
outputs
=
[
invoker
.
srcjar_path
]
_rebased_build_config
=
rebase_path
(
invoker
.
build_config
root_build_dir
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_r_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_r_java
.
py
"
args
=
[
"
-
-
depfile
"
rebase_path
(
depfile
root_build_dir
)
-
771
7
+
771
7
template
(
"
test_runner_script
"
)
{
if
(
defined
(
android_test_runner_script
)
)
{
_runner_script
=
android_test_runner_script
}
else
{
-
_runner_script
=
"
/
/
build
/
android
/
test_runner
.
py
"
+
_runner_script
=
"
/
/
chromium
/
build
/
android
/
test_runner
.
py
"
}
deps
=
[
]
-
779
7
+
779
7
template
(
"
test_runner_script
"
)
{
deps
=
invoker
.
deps
}
data_deps
=
[
-
"
/
/
build
/
android
:
test_runner_py
"
+
"
/
/
chromium
/
build
/
android
:
test_runner_py
"
"
/
/
testing
:
test_scripts_shared
"
]
if
(
defined
(
invoker
.
data_deps
)
)
{
-
1032
9
+
1032
9
if
(
enable_java_templates
)
{
#
https
:
/
/
crbug
.
com
/
1098752
Fix
for
bot
OOM
(
https
:
/
/
crbug
.
com
/
1098333
)
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
#
Lint
requires
generated
sources
and
generated
resources
from
the
build
.
-
1071
7
+
1071
7
if
(
enable_java_templates
)
{
_lint_gen_dir
=
"
target_gen_dir
/
target_name
"
_backported_methods
=
"
/
/
third_party
/
r8
/
backported_methods
.
txt
"
-
script
=
"
/
/
build
/
android
/
gyp
/
lint
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
lint
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
[
_lint_binary_path
-
1150
7
+
1150
7
if
(
enable_java_templates
)
{
}
else
{
_stamp_path
=
"
target_out_dir
/
target_name
/
build
.
lint
.
stamp
"
deps
+
=
[
-
"
/
/
build
/
android
:
prepare_android_lint_cache
"
+
"
/
/
chromium
/
build
/
android
:
prepare_android_lint_cache
"
invoker
.
build_config_dep
]
inputs
+
=
[
invoker
.
build_config
]
-
1189
7
+
1189
7
if
(
enable_java_templates
)
{
"
data_deps
"
"
public_deps
"
]
)
-
_script
=
"
/
/
build
/
android
/
gyp
/
proguard
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
proguard
.
py
"
_deps
=
invoker
.
deps
_inputs
=
[
-
1406
9
+
1406
9
if
(
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
}
-
1430
7
+
1430
7
if
(
enable_java_templates
)
{
_build_config
=
invoker
.
build_config
_script_name
=
invoker
.
script_name
-
script
=
"
/
/
build
/
android
/
gyp
/
create_java_binary_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_java_binary_script
.
py
"
inputs
=
[
_build_config
]
_java_script
=
"
root_build_dir
/
bin
/
_script_name
"
outputs
=
[
_java_script
]
-
1507
7
+
1507
7
if
(
enable_java_templates
)
{
"
apply_mapping
can
only
be
specified
if
proguard
is
enabled
.
"
)
if
(
_enable_main_dex_list
)
{
-
_main_dex_rules
=
"
/
/
build
/
android
/
main_dex_classes
.
flags
"
+
_main_dex_rules
=
"
/
/
chromium
/
build
/
android
/
main_dex_classes
.
flags
"
}
if
(
_desugar_needs_classpath
|
|
_proguard_enabled
)
{
-
1610
7
+
1610
7
if
(
enable_java_templates
)
{
"
data
"
"
data_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
dex
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dex
.
py
"
deps
=
_deps
depfile
=
"
target_gen_dir
/
target_name
.
d
"
outputs
=
[
invoker
.
output
]
-
1622
9
+
1622
9
if
(
enable_java_templates
)
{
if
(
!
_is_library
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
-
1779
7
+
1779
7
if
(
enable_java_templates
)
{
#
min_sdk_version
:
The
minimum
Android
SDK
version
this
target
supports
.
template
(
"
dex_jdk_libs
"
)
{
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
dex_jdk_libs
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dex_jdk_libs
.
py
"
inputs
=
[
_r8_path
_desugar_jdk_libs_json
-
1819
7
+
1819
7
if
(
enable_java_templates
)
{
_sources_json_file
=
"
target_out_dir
/
{
target_name
}
__jacoco_sources
.
json
"
_jacococli_jar
=
"
/
/
third_party
/
jacoco
/
lib
/
jacococli
.
jar
"
-
script
=
"
/
/
build
/
android
/
gyp
/
jacoco_instr
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jacoco_instr
.
py
"
inputs
=
invoker
.
java_files
+
[
_jacococli_jar
invoker
.
input_jar_path
-
1851
7
+
1851
7
if
(
enable_java_templates
)
{
template
(
"
filter_jar
"
)
{
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
filter_zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
filter_zip
.
py
"
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
inputs
=
[
invoker
.
input_jar
]
if
(
defined
(
invoker
.
inputs
)
)
{
-
1928
7
+
1928
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
_bytecode_checker_script
=
"
root_build_dir
/
bin
/
helper
/
bytecode_processor
"
-
script
=
"
/
/
build
/
android
/
gyp
/
bytecode_processor
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
bytecode_processor
.
py
"
inputs
=
[
invoker
.
build_config
invoker
.
input_jar
-
1937
7
+
1937
7
if
(
enable_java_templates
)
{
outputs
=
[
"
target_out_dir
/
target_name
.
bytecode
.
stamp
"
]
deps
=
invoker
.
deps
+
-
[
"
/
/
build
/
android
/
bytecode
:
bytecode_processor
(
default_toolchain
)
"
]
+
[
"
/
/
chromium
/
build
/
android
/
bytecode
:
bytecode_processor
(
default_toolchain
)
"
]
_rebased_build_config
=
rebase_path
(
invoker
.
build_config
root_build_dir
)
args
=
[
"
-
-
target
-
name
"
-
1976
7
+
1976
7
if
(
enable_java_templates
)
{
template
(
"
merge_manifests
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
merge_manifest
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
merge_manifest
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
inputs
=
[
-
2055
7
+
2055
7
if
(
enable_java_templates
)
{
"
deps
"
"
sources
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
prepare_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
prepare_resources
.
py
"
depfile
=
"
target_gen_dir
/
{
invoker
.
target_name
}
.
d
"
outputs
=
[
-
2221
7
+
2221
7
if
(
enable_java_templates
)
{
}
_final_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
-
_script
=
"
/
/
build
/
android
/
gyp
/
compile_resources
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_resources
.
py
"
_inputs
=
[
invoker
.
build_config
-
2546
7
+
2546
7
if
(
enable_java_templates
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
optimize_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
optimize_resources
.
py
"
outputs
=
[
invoker
.
optimized_proto_output
]
inputs
=
[
android_sdk_tools_bundle_aapt2
-
2594
7
+
2594
7
if
(
enable_java_templates
)
{
template
(
"
unused_resources
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
unused_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
unused_resources
.
py
"
depfile
=
"
target_gen_dir
/
{
target_name
}
.
d
"
_unused_resources_script
=
"
root_build_dir
/
bin
/
helper
/
unused_resources
"
inputs
=
[
_unused_resources_script
]
-
2605
7
+
2605
7
if
(
enable_java_templates
)
{
if
(
!
defined
(
deps
)
)
{
deps
=
[
]
}
-
deps
+
=
[
"
/
/
build
/
android
/
unused_resources
:
unused_resources
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
android
/
unused_resources
:
unused_resources
"
]
_rebased_module_build_config
=
rebase_path
(
invoker
.
build_config
root_build_dir
)
args
=
[
-
2651
7
+
2651
7
if
(
enable_java_templates
)
{
template
(
"
create_size_info_files
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_size_info_files
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_size_info_files
.
py
"
_jar_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
jar
.
info
"
_pak_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
pak
.
info
"
_res_info_path
=
"
root_build_dir
/
size
-
info
/
{
invoker
.
name
}
.
res
.
info
"
-
2748
7
+
2748
7
if
(
enable_java_templates
)
{
invoker
.
secondary_native_lib_placeholders
}
-
_script
=
"
/
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
_apksigner
=
"
android_sdk_build_tools
/
lib
/
apksigner
.
jar
"
_zipalign
=
"
android_sdk_build_tools
/
zipalign
"
-
3003
9
+
3003
9
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
if
(
invoker
.
use_turbine
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
turbine
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
turbine
.
py
"
}
else
{
-
script
=
"
/
/
build
/
android
/
gyp
/
compile_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
compile_java
.
py
"
}
if
(
target_name
=
=
"
chrome_java__header
"
)
{
-
3090
7
+
3090
7
if
(
enable_java_templates
)
{
args
+
=
[
"
-
-
gomacc
-
path
=
goma_dir
/
gomacc
"
]
#
Override
the
default
action_pool
when
goma
is
enabled
.
-
pool
=
"
/
/
build
/
config
/
android
:
goma_javac_pool
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
goma_javac_pool
"
}
#
Flag
enable_kythe_annotations
requires
-
3191
7
+
3191
7
if
(
enable_java_templates
)
{
"
data_deps
"
"
public_deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
ijar
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
ijar
.
py
"
deps
=
[
_ijar_target
]
if
(
defined
(
invoker
.
deps
)
)
{
deps
+
=
invoker
.
deps
-
3851
7
+
3851
7
if
(
enable_java_templates
)
{
get_label_info
(
invoker
.
bytecode_rewriter_target
"
name
"
)
_rebased_build_config
=
rebase_path
(
_build_config
root_build_dir
)
action_with_pydeps
(
_rewritten_jar_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
bytecode_rewriter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
bytecode_rewriter
.
py
"
inputs
=
[
_rewriter_path
_build_config
-
4110
7
+
4110
7
template
(
"
create_android_app_bundle_module
"
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
_deps
=
invoker
.
deps
-
_script
=
"
/
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
+
_script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
apkbuilder
.
py
"
#
NOTE
:
Compared
to
the
inputs
of
the
"
package_apk
"
template
action
#
this
list
is
much
smaller
since
finalize_apk
is
never
called
-
4176
7
+
4176
7
template
(
"
create_android_app_bundle_module
"
)
{
#
The
library
is
imported
via
proguard
when
proguard
is
enabled
.
if
(
!
_proguard_enabled
&
&
enable_jdk_library_desugaring
&
&
invoker
.
module_name
=
=
"
base
"
)
{
-
_all_jdk_libs
=
"
/
/
build
/
android
:
all_jdk_libs
"
+
_all_jdk_libs
=
"
/
/
chromium
/
build
/
android
:
all_jdk_libs
"
_deps
+
=
[
_all_jdk_libs
]
_jdk_libs_dex
=
get_label_info
(
_all_jdk_libs
"
target_out_dir
"
)
+
"
/
all_jdk_libs
.
l8
.
dex
"
-
4267
7
+
4267
7
template
(
"
create_android_app_bundle_module
"
)
{
template
(
"
dexsplitter
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
dexsplitter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dexsplitter
.
py
"
_stamp
=
"
{
target_gen_dir
}
/
{
target_name
}
.
stamp
"
outputs
=
[
_stamp
]
-
4322
7
+
4322
7
template
(
"
dexsplitter
"
)
{
#
output
:
Path
to
native
libraries
config
.
template
(
"
allot_native_libraries
"
)
{
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
allot_native_libraries
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
allot_native_libraries
.
py
"
args
=
[
"
-
-
output
"
rebase_path
(
invoker
.
output
root_build_dir
)
diff
-
-
git
a
/
config
/
android
/
linker_version_script
.
gni
b
/
config
/
android
/
linker_version_script
.
gni
index
96d8b665d
.
.
b71e6f499
100644
-
-
-
a
/
config
/
android
/
linker_version_script
.
gni
+
+
+
b
/
config
/
android
/
linker_version_script
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
#
Generate
a
custom
linker
version
script
that
can
later
be
used
with
#
"
-
Wl
-
-
version
-
script
=
<
path
>
"
ldflags
.
-
16
7
+
16
7
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
#
template
(
"
generate_linker_version_script
"
)
{
action_with_pydeps
(
target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
generate_linker_version_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
generate_linker_version_script
.
py
"
outputs
=
[
invoker
.
linker_script
]
inputs
=
[
]
args
=
[
"
-
-
output
=
"
+
rebase_path
(
invoker
.
linker_script
root_build_dir
)
]
diff
-
-
git
a
/
config
/
android
/
rules
.
gni
b
/
config
/
android
/
rules
.
gni
index
ce40de4de
.
.
4f11ddc42
100644
-
-
-
a
/
config
/
android
/
rules
.
gni
+
+
+
b
/
config
/
android
/
rules
.
gni
-
5
16
+
5
16
#
Do
not
add
any
imports
to
non
-
/
/
build
directories
here
.
#
Some
projects
(
e
.
g
.
V8
)
do
not
have
non
-
build
directories
DEPS
'
ed
in
.
-
import
(
"
/
/
build
/
config
/
android
/
channel
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rts
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
zip
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
channel
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
internal_rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rts
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
zip
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
assert
(
is_android
)
-
124
7
+
124
7
template
(
"
create_native_executable_dist
"
)
{
}
if
(
enable_java_templates
)
{
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
#
JNI
target
implementation
.
See
generate_jni
or
generate_jar_jni
for
usage
.
template
(
"
generate_jni_impl
"
)
{
-
143
7
+
143
7
if
(
enable_java_templates
)
{
#
cycle
though
.
"
/
/
base
:
debugging_buildflags
"
"
/
/
base
:
logging_buildflags
"
-
"
/
/
build
:
chromeos_buildflags
"
+
"
/
/
chromium
/
build
:
chromeos_buildflags
"
]
}
-
440
7
+
440
7
if
(
enable_java_templates
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
gcc_preprocess
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
gcc_preprocess
.
py
"
outputs
=
[
"
target_gen_dir
/
target_name
.
srcjar
"
]
_include_dirs
=
[
-
490
7
+
490
7
if
(
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_enum
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_enum
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
554
7
+
554
7
if
(
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_strings
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_strings
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
623
7
+
623
7
if
(
enable_java_templates
)
{
#
The
sources
aren
'
t
compiled
so
don
'
t
check
their
dependencies
.
check_includes
=
false
-
script
=
"
/
/
build
/
android
/
gyp
/
java_cpp_features
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
java_cpp_features
.
py
"
_srcjar_path
=
"
{
target_gen_dir
}
/
{
target_name
}
.
srcjar
"
_rebased_srcjar_path
=
rebase_path
(
_srcjar_path
root_build_dir
)
-
662
7
+
662
7
if
(
enable_java_templates
)
{
if
(
defined
(
invoker
.
includes
)
)
{
inputs
+
=
invoker
.
includes
}
-
script
=
"
/
/
build
/
android
/
gyp
/
jinja_template
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jinja_template
.
py
"
outputs
=
[
invoker
.
output
]
-
715
7
+
715
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
write_native_libraries_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
write_native_libraries_java
.
py
"
outputs
=
[
_native_libraries_file
]
args
=
[
"
-
-
output
"
-
780
7
+
780
7
if
(
enable_java_templates
)
{
#
#
action
(
"
my_resources__create_zip
"
)
{
#
_depfile
=
"
target_gen_dir
/
{
target_name
}
.
d
"
-
#
script
=
"
/
/
build
/
path
/
to
/
create_my_resources_zip
.
py
"
+
#
script
=
"
/
/
chromium
/
build
/
path
/
to
/
create_my_resources_zip
.
py
"
#
args
=
[
#
"
-
-
depfile
"
rebase_path
(
_depfile
root_build_dir
)
#
"
-
-
output
-
zip
"
rebase_path
(
_zip_archive
root_build_dir
)
-
818
7
+
818
7
if
(
enable_java_templates
)
{
]
inputs
=
[
invoker
.
generated_resources_zip
]
outputs
=
[
_rtxt_out_path
]
-
script
=
"
/
/
build
/
android
/
gyp
/
create_r_txt
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_r_txt
.
py
"
args
=
[
"
-
-
resources
-
zip
-
path
"
rebase_path
(
invoker
.
generated_resources_zip
root_build_dir
)
-
856
7
+
856
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
_generating_target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
inputs
=
invoker
.
resources
-
script
=
"
/
/
build
/
android
/
gyp
/
jinja_template
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
jinja_template
.
py
"
outputs
=
[
_resources_zip
]
-
910
7
+
910
7
if
(
enable_java_templates
)
{
"
deps
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
process_native_prebuilt
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
process_native_prebuilt
.
py
"
_lib_path
=
"
{
invoker
.
base_dir
}
/
android_app_abi
/
{
invoker
.
lib_name
}
"
_stripped_output_path
=
"
root_out_dir
/
{
invoker
.
lib_name
}
"
_unstripped_output_path
=
-
1350
7
+
1350
7
if
(
enable_java_templates
)
{
rename_manifest_package
=
_package_name
}
if
(
!
defined
(
android_manifest
)
)
{
-
android_manifest
=
"
/
/
build
/
android
/
AndroidManifest
.
xml
"
+
android_manifest
=
"
/
/
chromium
/
build
/
android
/
AndroidManifest
.
xml
"
}
arsc_output
=
_resource_arsc_output
min_sdk_version
=
default_min_sdk_version
-
1394
7
+
1394
7
if
(
enable_java_templates
)
{
"
:
_jni_srcjar_target
"
#
This
dep
is
required
for
any
targets
that
depend
on
/
/
base
:
base_java
.
-
"
/
/
build
/
android
:
build_config_gen
"
+
"
/
/
chromium
/
build
/
android
:
build_config_gen
"
]
}
-
1591
7
+
1591
7
if
(
enable_java_templates
)
{
_rebased_build_config
=
rebase_path
(
_build_config
root_build_dir
)
action_with_pydeps
(
_jar_target_name
)
{
forward_variables_from
(
invoker
[
"
data
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
zip
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
deps
=
_deps
-
1772
7
+
1772
7
if
(
enable_java_templates
)
{
forward_variables_from
(
invoker
[
"
data
"
]
)
depfile
=
"
target_gen_dir
/
target_name
.
d
"
deps
=
_deps
-
script
=
"
/
/
build
/
android
/
gyp
/
dist_aar
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
dist_aar
.
py
"
inputs
=
[
_build_config
]
-
1932
7
+
1932
7
if
(
enable_java_templates
)
{
template
(
"
generate_build_config_srcjar
"
)
{
java_cpp_template
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
sources
=
[
"
/
/
build
/
android
/
java
/
templates
/
BuildConfig
.
template
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
java
/
templates
/
BuildConfig
.
template
"
]
defines
=
[
]
#
Set
these
even
when
!
use_final_fields
so
that
they
have
correct
default
-
2002
7
+
2002
7
if
(
enable_java_templates
)
{
defines
+
=
[
"
USE_FINAL
"
]
}
-
sources
=
[
"
/
/
build
/
android
/
java
/
templates
/
ProductConfig
.
template
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
android
/
java
/
templates
/
ProductConfig
.
template
"
]
defines
+
=
[
"
PACKAGE
=
{
invoker
.
java_package
}
"
]
_use_chromium_linker
=
-
2835
7
+
2835
7
if
(
enable_java_templates
)
{
if
(
!
enable_java_asserts
&
&
(
!
defined
(
testonly
)
|
|
!
testonly
)
&
&
#
Injected
JaCoCo
code
causes
-
checkdiscards
to
fail
.
!
use_jacoco_coverage
)
{
-
proguard_configs
+
=
[
"
/
/
build
/
android
/
dcheck_is_off
.
flags
"
]
+
proguard_configs
+
=
[
"
/
/
chromium
/
build
/
android
/
dcheck_is_off
.
flags
"
]
}
if
(
!
_is_bundle_module
)
{
proguard_mapping_path
=
_proguard_mapping_path
-
3017
7
+
3017
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
_validate_dex_target
)
{
depfile
=
"
target_gen_dir
/
target_name
.
d
"
script
=
-
"
/
/
build
/
android
/
gyp
/
validate_static_library_dex_references
.
py
"
+
"
/
/
chromium
/
build
/
android
/
gyp
/
validate_static_library_dex_references
.
py
"
inputs
=
[
_build_config
]
_stamp
=
"
target_gen_dir
/
target_name
.
stamp
"
outputs
=
[
_stamp
]
-
3122
7
+
3122
7
if
(
enable_java_templates
)
{
"
:
_merge_manifest_target
"
]
script
=
-
"
/
/
build
/
android
/
incremental_install
/
generate_android_manifest
.
py
"
+
"
/
/
chromium
/
build
/
android
/
incremental_install
/
generate_android_manifest
.
py
"
inputs
=
[
_android_manifest
_build_config
-
3177
14
+
3177
14
if
(
enable_java_templates
)
{
if
(
(
!
_proguard_enabled
|
|
_incremental_apk
)
&
&
enable_jdk_library_desugaring
)
{
-
_all_jdk_libs
=
"
/
/
build
/
android
:
all_jdk_libs
"
+
_all_jdk_libs
=
"
/
/
chromium
/
build
/
android
:
all_jdk_libs
"
deps
+
=
[
_all_jdk_libs
]
jdk_libs_dex
=
get_label_info
(
_all_jdk_libs
"
target_out_dir
"
)
+
"
/
all_jdk_libs
.
l8
.
dex
"
}
if
(
_incremental_apk
)
{
-
_dex_target
=
"
/
/
build
/
android
/
incremental_install
:
apk_dex
"
+
_dex_target
=
"
/
/
chromium
/
build
/
android
/
incremental_install
:
apk_dex
"
deps
+
=
[
"
:
{
_incremental_compile_resources_target_name
}
"
-
3229
7
+
3229
7
if
(
enable_java_templates
)
{
if
(
_incremental_apk
)
{
_write_installer_json_rule_name
=
"
{
_template_name
}
__incremental_json
"
action_with_pydeps
(
_write_installer_json_rule_name
)
{
-
script
=
"
/
/
build
/
android
/
incremental_install
/
write_installer_json
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
incremental_install
/
write_installer_json
.
py
"
deps
=
[
"
:
_build_config_target
"
]
+
_all_native_libs_deps
data
=
[
_incremental_install_json_path
]
-
3282
7
+
3282
7
if
(
enable_java_templates
)
{
_apk_operations_target_name
=
"
{
target_name
}
__apk_operations
"
action_with_pydeps
(
_apk_operations_target_name
)
{
_generated_script
=
"
root_build_dir
/
bin
/
{
invoker
.
target_name
}
"
-
script
=
"
/
/
build
/
android
/
gyp
/
create_apk_operations_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_apk_operations_script
.
py
"
outputs
=
[
_generated_script
]
args
=
[
"
-
-
script
-
output
-
path
"
-
3319
13
+
3319
13
if
(
enable_java_templates
)
{
}
data
=
[
]
data_deps
=
[
-
"
/
/
build
/
android
:
apk_operations_py
"
-
"
/
/
build
/
android
:
stack_tools
"
+
"
/
/
chromium
/
build
/
android
:
apk_operations_py
"
+
"
/
/
chromium
/
build
/
android
:
stack_tools
"
]
if
(
_proguard_enabled
&
&
!
_incremental_apk
)
{
#
Required
by
logcat
command
.
-
data_deps
+
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
data
+
=
[
"
_final_apk_path
.
mapping
"
]
args
+
=
[
"
-
-
proguard
-
mapping
-
path
"
-
3684
7
+
3684
7
if
(
enable_java_templates
)
{
template
(
"
instrumentation_test_runner
"
)
{
if
(
use_rts
)
{
action
(
"
{
invoker
.
target_name
}
__rts_filters
"
)
{
-
script
=
"
/
/
build
/
add_rts_filters
.
py
"
+
script
=
"
/
/
chromium
/
build
/
add_rts_filters
.
py
"
rts_file
=
"
{
root_build_dir
}
/
gen
/
rts
/
{
invoker
.
target_name
}
.
filter
"
args
=
[
rebase_path
(
rts_file
root_build_dir
)
]
outputs
=
[
rts_file
]
-
3960
7
+
3960
7
if
(
enable_java_templates
)
{
if
(
!
defined
(
use_default_launcher
)
|
|
use_default_launcher
)
{
deps
+
=
[
"
/
/
base
:
base_java
"
-
"
/
/
build
/
android
/
gtest_apk
:
native_test_instrumentation_test_runner_java
"
+
"
/
/
chromium
/
build
/
android
/
gtest_apk
:
native_test_instrumentation_test_runner_java
"
"
/
/
testing
/
android
/
native_test
:
native_test_java
"
]
}
-
3995
7
+
3995
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
)
-
script
=
"
/
/
build
/
android
/
gyp
/
aidl
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
aidl
.
py
"
depfile
=
"
target_gen_dir
/
target_name
.
d
"
sources
=
invoker
.
sources
-
4071
7
+
4071
7
if
(
enable_java_templates
)
{
#
The
suffix
"
__protoc_java
.
srcjar
"
is
used
by
SuperSize
to
identify
#
protobuf
symbols
.
_srcjar_path
=
"
target_gen_dir
/
target_name
.
srcjar
"
-
script
=
"
/
/
build
/
protoc_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
protoc_java
.
py
"
deps
=
[
]
if
(
defined
(
invoker
.
deps
)
)
{
-
4148
7
+
4148
7
if
(
enable_java_templates
)
{
action_with_pydeps
(
"
{
_template_name
}
__flatc_java
"
)
{
_srcjar_path
=
"
target_gen_dir
/
target_name
.
srcjar
"
-
script
=
"
/
/
build
/
android
/
gyp
/
flatc_java
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
flatc_java
.
py
"
deps
=
[
_flatc_dep
]
if
(
defined
(
invoker
.
deps
)
)
{
-
4272
7
+
4272
7
if
(
enable_java_templates
)
{
#
Some
libraries
might
not
have
resources
;
others
might
have
two
jars
.
if
(
update_android_aar_prebuilts
)
{
print
(
"
Writing
"
+
rebase_path
(
_info_path
"
/
/
"
)
)
-
exec_script
(
"
/
/
build
/
android
/
gyp
/
aar
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
android
/
gyp
/
aar
.
py
"
[
"
list
"
"
-
-
output
"
-
4306
7
+
4306
7
if
(
enable_java_templates
)
{
assert
(
_scanned_files
.
has_classes_jar
|
|
_scanned_files
.
subjars
=
=
[
]
)
action_with_pydeps
(
_unpack_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
aar
.
py
"
#
Unzips
the
AAR
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
aar
.
py
"
#
Unzips
the
AAR
args
=
[
"
extract
"
"
-
-
output
-
dir
"
-
4798
12
+
4798
12
if
(
enable_java_templates
)
{
if
(
!
_uses_static_library_synchronized_proguard
)
{
if
(
_add_view_trace_events
)
{
_trace_event_rewriter_target
=
-
"
/
/
build
/
android
/
bytecode
:
trace_event_adder
"
+
"
/
/
chromium
/
build
/
android
/
bytecode
:
trace_event_adder
"
_rewritten_jar_target_name
=
"
{
target_name
}
__trace_event_rewritten
"
_rewriter_path
=
root_build_dir
+
"
/
bin
/
helper
/
trace_event_adder
"
_stamp
=
"
{
target_gen_dir
}
/
{
target_name
}
.
trace_event_rewrite
.
stamp
"
action_with_pydeps
(
_rewritten_jar_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
trace_event_bytecode_rewriter
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
trace_event_bytecode_rewriter
.
py
"
inputs
=
[
_rewriter_path
_build_config
-
4985
7
+
4985
7
if
(
enable_java_templates
)
{
_bundle_target_name
=
"
{
_target_name
}
__bundle
"
action_with_pydeps
(
_bundle_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle
.
py
"
inputs
=
_all_module_zip_paths
+
_all_module_build_configs
+
[
_BUNDLETOOL_JAR_PATH
]
outputs
=
[
_bundle_path
]
-
5054
9
+
5054
9
if
(
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
-
5095
7
+
5095
7
if
(
enable_java_templates
)
{
_bundle_wrapper_script_path
=
"
_bundle_wrapper_script_dir
/
_target_name
"
action_with_pydeps
(
"
{
_target_name
}
__wrapper_script
"
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_bundle_wrapper_script
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_bundle_wrapper_script
.
py
"
inputs
=
[
_base_module_build_config
]
outputs
=
[
_bundle_wrapper_script_path
]
-
5107
8
+
5107
8
if
(
enable_java_templates
)
{
_bundle_path
]
data_deps
=
[
-
"
/
/
build
/
android
:
apk_operations_py
"
-
"
/
/
build
/
android
:
stack_tools
"
+
"
/
/
chromium
/
build
/
android
:
apk_operations_py
"
+
"
/
/
chromium
/
build
/
android
:
stack_tools
"
]
deps
=
[
_base_module_build_config_target
]
-
5164
7
+
5164
7
if
(
enable_java_templates
)
{
]
#
Required
by
logcat
command
.
-
data_deps
+
=
[
"
/
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
android
/
stacktrace
:
java_deobfuscate
"
]
data
+
=
[
_proguard_mapping_path
]
}
}
-
5217
7
+
5217
7
if
(
enable_java_templates
)
{
_apks_path
=
"
root_build_dir
/
apks
/
_bundle_name
.
apks
"
action_with_pydeps
(
"
{
_target_name
}
_apks
"
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
inputs
=
[
_bundle_path
_BUNDLETOOL_JAR_PATH
-
5251
9
+
5251
9
if
(
enable_java_templates
)
{
#
http
:
/
/
crbug
.
com
/
725224
.
Fix
for
bots
running
out
of
memory
.
if
(
defined
(
java_cmd_pool_size
)
)
{
-
pool
=
"
/
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
config
/
android
:
java_cmd_pool
(
default_toolchain
)
"
}
else
{
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
}
}
}
-
5275
7
+
5275
7
if
(
enable_java_templates
)
{
template
(
"
create_app_bundle_minimal_apks
"
)
{
action_with_pydeps
(
target_name
)
{
forward_variables_from
(
invoker
TESTONLY_AND_VISIBILITY
+
[
"
deps
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_app_bundle_apks
.
py
"
_dir
=
get_path_info
(
invoker
.
bundle_path
"
dir
"
)
_name
=
get_path_info
(
invoker
.
bundle_path
"
name
"
)
_output_path
=
"
_dir
/
_name
.
minimal
.
apks
"
-
5315
7
+
5315
7
template
(
"
generate_ui_locale_resources
"
)
{
"
{
target_name
}
.
zip
"
action_with_pydeps
(
_generating_target_name
)
{
-
script
=
"
/
/
build
/
android
/
gyp
/
create_ui_locale_resources
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
create_ui_locale_resources
.
py
"
outputs
=
[
_output_zip
]
args
=
[
"
-
-
locale
-
list
=
{
invoker
.
ui_locales
}
"
diff
-
-
git
a
/
config
/
android
/
test
/
classpath_order
/
BUILD
.
gn
b
/
config
/
android
/
test
/
classpath_order
/
BUILD
.
gn
index
decd1a84d
.
.
1c2c5862e
100644
-
-
-
a
/
config
/
android
/
test
/
classpath_order
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
test
/
classpath_order
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
template
(
"
test_resources
"
)
{
jinja_template_resources
(
target_name
)
{
diff
-
-
git
a
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
b
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
index
a28111a66
.
.
75b80c851
100644
-
-
-
a
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
test
/
proto
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
import
(
"
/
/
third_party
/
protobuf
/
proto_library
.
gni
"
)
#
The
purpose
of
these
targets
is
test
that
|
deps
|
satisfies
java
compilation
diff
-
-
git
a
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
b
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
index
4a063d221
.
.
e550217a3
100644
-
-
-
a
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
+
+
+
b
/
config
/
android
/
test
/
resource_overlay
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
)
#
Tests
for
'
resource_overlay
'
parameter
in
android_resources
(
)
template
.
diff
-
-
git
a
/
config
/
apple
/
symbols
.
gni
b
/
config
/
apple
/
symbols
.
gni
index
dd1d796fa
.
.
deb34d179
100644
-
-
-
a
/
config
/
apple
/
symbols
.
gni
+
+
+
b
/
config
/
apple
/
symbols
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
#
This
file
declares
arguments
and
configs
that
control
whether
dSYM
debug
#
info
is
produced
and
whether
build
products
are
stripped
.
diff
-
-
git
a
/
config
/
arm
.
gni
b
/
config
/
arm
.
gni
index
410d3cb8f
.
.
c66667ce7
100644
-
-
-
a
/
config
/
arm
.
gni
+
+
+
b
/
config
/
arm
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
#
These
are
primarily
relevant
in
current_cpu
=
=
"
arm
"
contexts
where
#
ARM
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
diff
-
-
git
a
/
config
/
buildflags_paint_preview
.
gni
b
/
config
/
buildflags_paint_preview
.
gni
index
7129e7663
.
.
5206887fc
100644
-
-
-
a
/
config
/
buildflags_paint_preview
.
gni
+
+
+
b
/
config
/
buildflags_paint_preview
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
declare_args
(
)
{
#
Enable
basic
paint
preview
support
.
Does
not
work
on
iOS
or
Fuchsia
.
Should
diff
-
-
git
a
/
config
/
c
+
+
/
BUILD
.
gn
b
/
config
/
c
+
+
/
BUILD
.
gn
index
e7ed69ec8
.
.
c96e99655
100644
-
-
-
a
/
config
/
c
+
+
/
BUILD
.
gn
+
+
+
b
/
config
/
c
+
+
/
BUILD
.
gn
-
1
7
+
1
7
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
import
(
"
/
/
buildtools
/
deps_revisions
.
gni
"
)
assert
(
use_custom_libcxx
"
should
only
be
used
if
use_custom_libcxx
is
set
"
)
diff
-
-
git
a
/
config
/
c
+
+
/
c
+
+
.
gni
b
/
config
/
c
+
+
/
c
+
+
.
gni
index
626369884
.
.
27c63b2d2
100644
-
-
-
a
/
config
/
c
+
+
/
c
+
+
.
gni
+
+
+
b
/
config
/
c
+
+
/
c
+
+
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
Use
in
-
tree
libc
+
+
(
buildtools
/
third_party
/
libc
+
+
and
-
14
7
+
14
7
declare_args
(
)
{
use_custom_libcxx
=
is_fuchsia
|
|
is_android
|
|
is_apple
|
|
is_linux
|
|
is_chromeos_lacros
|
|
(
is_win
&
&
is_clang
)
|
|
-
(
is_chromeos
&
&
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
+
(
is_chromeos
&
&
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
#
Use
libc
+
+
instead
of
stdlibc
+
+
when
using
the
host_cpu
toolchain
even
if
#
use_custom_libcxx
is
false
.
This
is
useful
for
cross
-
compiles
where
a
custom
diff
-
-
git
a
/
config
/
chromecast
/
BUILD
.
gn
b
/
config
/
chromecast
/
BUILD
.
gn
index
a4ebc9821
.
.
a20dcfbe4
100644
-
-
-
a
/
config
/
chromecast
/
BUILD
.
gn
+
+
+
b
/
config
/
chromecast
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
assert
(
is_chromecast
)
diff
-
-
git
a
/
config
/
chromeos
/
BUILD
.
gn
b
/
config
/
chromeos
/
BUILD
.
gn
index
82d8190b5
.
.
5431d03dc
100644
-
-
-
a
/
config
/
chromeos
/
BUILD
.
gn
+
+
+
b
/
config
/
chromeos
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
assert
(
is_chromeos
)
diff
-
-
git
a
/
config
/
chromeos
/
rules
.
gni
b
/
config
/
chromeos
/
rules
.
gni
index
60a21ab94
.
.
a65ebd3cc
100644
-
-
-
a
/
config
/
chromeos
/
rules
.
gni
+
+
+
b
/
config
/
chromeos
/
rules
.
gni
-
2
13
+
2
13
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
assert
(
(
is_chromeos_ash
|
|
is_chromeos_lacros
)
&
&
is_chromeos_device
)
-
46
7
+
46
7
if
(
cros_sdk_version
!
=
"
"
)
{
foreach
(
b
_potential_test_boards
)
{
_cache_path_prefix
=
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
{
b
}
+
{
cros_sdk_version
}
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
{
b
}
+
{
cros_sdk_version
}
"
_cros_is_vm
=
false
foreach
(
b1
string_split
(
cros_boards_with_qemu_images
"
:
"
)
)
{
-
86
7
+
86
7
if
(
cros_sdk_version
!
=
"
"
)
{
_all_symlinks
+
=
m
[
1
]
}
_all_symlink_targets
=
-
exec_script
(
"
/
/
build
/
get_symlink_targets
.
py
"
_all_symlinks
"
list
lines
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
get_symlink_targets
.
py
"
_all_symlinks
"
list
lines
"
)
_index
=
0
foreach
(
m
_symlink_map
)
{
_symlink_targets
=
[
]
-
226
7
+
226
7
template
(
"
generate_runner_script
"
)
{
}
generate_wrapper
(
target_name
)
{
-
executable
=
"
/
/
build
/
chromeos
/
test_runner
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
chromeos
/
test_runner
.
py
"
wrapper_script
=
generated_script
executable_args
=
[
]
-
337
15
+
337
15
template
(
"
generate_runner_script
"
)
{
#
We
use
android
test
-
runner
'
s
results
libs
to
construct
gtest
output
#
json
.
-
"
/
/
build
/
android
/
pylib
/
__init__
.
py
"
-
"
/
/
build
/
android
/
pylib
/
base
/
"
-
"
/
/
build
/
android
/
pylib
/
results
/
"
-
"
/
/
build
/
chromeos
/
"
-
"
/
/
build
/
util
/
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
__init__
.
py
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
base
/
"
+
"
/
/
chromium
/
build
/
android
/
pylib
/
results
/
"
+
"
/
/
chromium
/
build
/
chromeos
/
"
+
"
/
/
chromium
/
build
/
util
/
"
#
Needed
for
various
SDK
components
used
below
.
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
misc
/
"
-
"
/
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
misc
/
"
+
"
/
/
chromium
/
build
/
cros_cache
/
chrome
-
sdk
/
symlinks
/
"
#
The
LKGM
file
controls
what
version
of
the
VM
image
to
download
.
Add
it
#
as
data
here
so
that
changes
to
it
will
trigger
analyze
.
-
477
7
+
477
7
template
(
"
lacros_tast_tests
"
)
{
"
/
/
components
/
crash
/
content
/
tools
/
generate_breakpad_symbols
.
py
"
#
A
script
needed
to
launch
Lacros
in
Lacros
Tast
tests
.
-
"
/
/
build
/
lacros
/
mojo_connection_lacros_launcher
.
py
"
+
"
/
/
chromium
/
build
/
lacros
/
mojo_connection_lacros_launcher
.
py
"
]
}
}
-
490
7
+
490
7
template
(
"
generate_skylab_runner_script
"
)
{
]
)
action
(
target_name
)
{
-
script
=
"
/
/
build
/
chromeos
/
gen_skylab_runner
.
py
"
+
script
=
"
/
/
chromium
/
build
/
chromeos
/
gen_skylab_runner
.
py
"
outputs
=
[
generated_script
]
args
=
[
"
-
-
test
-
exe
"
diff
-
-
git
a
/
config
/
chromeos
/
ui_mode
.
gni
b
/
config
/
chromeos
/
ui_mode
.
gni
index
12d18e83b
.
.
b38f96ec9
100644
-
-
-
a
/
config
/
chromeos
/
ui_mode
.
gni
+
+
+
b
/
config
/
chromeos
/
ui_mode
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
declare_args
(
)
{
#
Deprecated
use
is_lacros
.
diff
-
-
git
a
/
config
/
clang
/
clang
.
gni
b
/
config
/
clang
/
clang
.
gni
index
1e6621848
.
.
ad75c9b01
100644
-
-
-
a
/
config
/
clang
/
clang
.
gni
+
+
+
b
/
config
/
clang
/
clang
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
default_clang_base_path
=
"
/
/
third_party
/
llvm
-
build
/
Release
+
Asserts
"
-
12
7
+
12
7
declare_args
(
)
{
#
Chrome
OS
'
s
.
clang_use_chrome_plugins
=
is_clang
&
&
!
is_nacl
&
&
current_os
!
=
"
zos
"
&
&
-
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
+
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
clang_base_path
=
default_clang_base_path
}
diff
-
-
git
a
/
config
/
compiler
/
BUILD
.
gn
b
/
config
/
compiler
/
BUILD
.
gn
index
7e49d73c9
.
.
b38e736db
100644
-
-
-
a
/
config
/
compiler
/
BUILD
.
gn
+
+
+
b
/
config
/
compiler
/
BUILD
.
gn
-
2
49
+
2
49
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
-
#
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
host_byteorder
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
host_byteorder
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
if
(
current_cpu
=
=
"
mipsel
"
|
|
current_cpu
=
=
"
mips64el
"
|
|
current_cpu
=
=
"
mips
"
|
|
current_cpu
=
=
"
mips64
"
)
{
-
import
(
"
/
/
build
/
config
/
mips
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mips
.
gni
"
)
}
if
(
current_cpu
=
=
"
x64
"
)
{
-
import
(
"
/
/
build
/
config
/
x64
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
x64
.
gni
"
)
}
if
(
is_mac
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
}
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
}
if
(
is_nacl
)
{
#
To
keep
NaCl
variables
out
of
builds
that
don
'
t
include
NaCl
all
#
variables
defined
in
nacl
/
config
.
gni
referenced
here
should
be
protected
by
#
is_nacl
conditions
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
}
lld_path
=
"
"
-
267
26
+
267
26
config
(
"
compiler
"
)
{
#
categories
here
add
it
to
the
associated
file
to
keep
this
shared
config
#
smaller
.
if
(
is_win
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
win
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
compiler
"
]
}
else
if
(
is_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
android
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
android
:
compiler
"
]
}
else
if
(
is_linux
|
|
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
linux
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
linux
:
compiler
"
]
if
(
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromeos
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromeos
:
compiler
"
]
}
}
else
if
(
is_nacl
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
nacl
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
compiler
"
]
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
compiler
"
]
}
else
if
(
is_ios
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
compiler
"
]
}
else
if
(
is_fuchsia
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
fuchsia
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
compiler
"
]
}
else
if
(
current_os
=
=
"
aix
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
aix
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
aix
:
compiler
"
]
}
else
if
(
current_os
=
=
"
zos
"
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
zos
:
compiler
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
zos
:
compiler
"
]
}
configs
+
=
[
-
864
8
+
864
8
config
(
"
thinlto_optimize_default
"
)
{
#
Use
this
to
enable
optimization
in
the
ThinLTO
link
step
for
select
targets
#
when
thin_lto_enable_optimizations
is
set
by
doing
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_default
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
thinlto_optimize_max
"
]
#
#
Since
it
makes
linking
significantly
slower
and
more
resource
intensive
only
#
use
it
on
important
targets
such
as
the
main
browser
executable
or
dll
.
-
1195
7
+
1195
7
config
(
"
compiler_codegen
"
)
{
ldflags
=
[
]
if
(
is_nacl
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
nacl
:
compiler_codegen
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
compiler_codegen
"
]
}
if
(
current_cpu
=
=
"
arm64
"
&
&
is_android
)
{
-
1379
31
+
1379
31
config
(
"
runtime_library
"
)
{
#
libandroid_support
in
the
-
isystem
include
order
.
Otherwise
there
will
be
#
build
errors
related
to
symbols
declared
in
math
.
h
.
if
(
use_custom_libcxx
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
c
+
+
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
c
+
+
:
runtime_library
"
]
}
#
TODO
(
crbug
.
com
/
830987
)
:
Come
up
with
a
better
name
for
is
POSIX
+
Fuchsia
#
configuration
.
if
(
is_posix
|
|
is_fuchsia
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
posix
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
posix
:
runtime_library
"
]
}
#
System
-
specific
flags
.
If
your
compiler
flags
apply
to
one
of
the
#
categories
here
add
it
to
the
associated
file
to
keep
this
shared
config
#
smaller
.
if
(
is_win
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
win
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
win
:
runtime_library
"
]
}
else
if
(
is_linux
|
|
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
linux
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
linux
:
runtime_library
"
]
if
(
is_chromeos
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
chromeos
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
chromeos
:
runtime_library
"
]
}
}
else
if
(
is_ios
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
runtime_library
"
]
}
else
if
(
is_mac
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
mac
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
mac
:
runtime_library
"
]
}
else
if
(
is_android
)
{
-
configs
+
=
[
"
/
/
build
/
config
/
android
:
runtime_library
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
android
:
runtime_library
"
]
}
if
(
is_component_build
)
{
-
1540
7
+
1540
7
config
(
"
default_warnings
"
)
{
"
-
Wno
-
ignored
-
pragma
-
optimize
"
]
-
if
(
is_chromeos
|
|
default_toolchain
=
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
{
+
if
(
is_chromeos
|
|
default_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
{
#
TODO
(
https
:
/
/
crbug
.
com
/
1016945
)
:
Re
-
enable
once
ChromeOS
toolchain
is
up
to
date
cflags
+
=
[
"
-
Wno
-
builtin
-
assume
-
aligned
-
alignment
"
]
}
-
1585
7
+
1585
7
config
(
"
default_warnings
"
)
{
#
See
also
:
https
:
/
/
docs
.
google
.
com
/
document
/
d
/
14yKUwDaorqqNfgdGqHY_nck2nn02XBQcB5N0ue4fax8
#
#
To
enable
in
a
GN
target
use
:
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
config
(
"
prevent_unsafe_narrowing
"
)
{
#
TODO
(
crbug
.
com
/
1292951
)
:
Enable
this
config
-
1942
8
+
1942
8
config
(
"
no_incompatible_pointer_warnings
"
)
{
#
You
can
override
the
optimization
level
on
a
per
-
target
basis
by
removing
the
#
default
config
and
then
adding
the
named
one
you
want
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
Shared
settings
for
both
"
optimize
"
and
"
optimize_max
"
configs
.
#
IMPORTANT
:
On
Windows
"
/
O1
"
and
"
/
O2
"
must
go
before
the
common
flags
.
-
2135
12
+
2135
12
config
(
"
optimize_max
"
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
Various
components
do
:
#
if
(
!
is_debug
)
{
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
}
#
So
this
config
has
to
have
the
selection
logic
just
like
#
"
default_optimization
"
below
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
{
ldflags
=
common_optimize_on_ldflags
if
(
is_win
)
{
-
2168
12
+
2168
12
config
(
"
optimize_speed
"
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
Various
components
do
:
#
if
(
!
is_debug
)
{
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_optimization
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
optimize_max
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
optimize_max
"
]
#
}
#
So
this
config
has
to
have
the
selection
logic
just
like
#
"
default_optimization
"
below
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
{
ldflags
=
common_optimize_on_ldflags
if
(
is_win
)
{
-
2202
7
+
2202
7
config
(
"
default_optimization
"
)
{
if
(
is_nacl
&
&
is_nacl_irt
)
{
#
The
NaCl
IRT
is
a
special
case
and
always
wants
its
own
config
.
#
It
gets
optimized
the
same
way
regardless
of
the
type
of
build
.
-
configs
=
[
"
/
/
build
/
config
/
nacl
:
irt_optimize
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
nacl
:
irt_optimize
"
]
}
else
if
(
is_debug
)
{
configs
=
[
"
:
no_optimize
"
]
}
else
if
(
optimize_for_fuzzing
)
{
-
2284
8
+
2284
8
config
(
"
afdo
"
)
{
#
You
can
override
the
symbol
level
on
a
per
-
target
basis
by
removing
the
#
default
config
and
then
adding
the
named
one
you
want
:
#
-
#
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
default_symbols
"
]
-
#
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
symbols
"
]
+
#
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
default_symbols
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
symbols
"
]
#
A
helper
config
that
all
configs
passing
/
DEBUG
to
the
linker
should
#
include
as
sub
-
config
.
diff
-
-
git
a
/
config
/
compiler
/
compiler
.
gni
b
/
config
/
compiler
/
compiler
.
gni
index
9d25c1058
.
.
c7a19e7c2
100644
-
-
-
a
/
config
/
compiler
/
compiler
.
gni
+
+
+
b
/
config
/
compiler
/
compiler
.
gni
-
2
30
+
2
30
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
}
if
(
current_cpu
=
=
"
arm
"
|
|
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
}
if
(
is_apple
)
{
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
}
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
config
.
gni
"
)
}
declare_args
(
)
{
diff
-
-
git
a
/
config
/
compiler
/
pgo
/
BUILD
.
gn
b
/
config
/
compiler
/
pgo
/
BUILD
.
gn
index
84092b610
.
.
363e4edb9
100644
-
-
-
a
/
config
/
compiler
/
pgo
/
BUILD
.
gn
+
+
+
b
/
config
/
compiler
/
pgo
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Configuration
that
enables
PGO
instrumentation
.
config
(
"
pgo_instrumentation_flags
"
)
{
diff
-
-
git
a
/
config
/
compiler
/
pgo
/
pgo
.
gni
b
/
config
/
compiler
/
pgo
/
pgo
.
gni
index
c053eb530
.
.
94815e653
100644
-
-
-
a
/
config
/
compiler
/
pgo
/
pgo
.
gni
+
+
+
b
/
config
/
compiler
/
pgo
/
pgo
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
declare_args
(
)
{
#
Specify
the
current
PGO
phase
.
diff
-
-
git
a
/
config
/
coverage
/
BUILD
.
gn
b
/
config
/
coverage
/
BUILD
.
gn
index
09c227dce
.
.
0636b26f7
100644
-
-
-
a
/
config
/
coverage
/
BUILD
.
gn
+
+
+
b
/
config
/
coverage
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
config
(
"
default_coverage
"
)
{
if
(
use_clang_coverage
)
{
diff
-
-
git
a
/
config
/
coverage
/
coverage
.
gni
b
/
config
/
coverage
/
coverage
.
gni
index
b0e01c1d4
.
.
29031534e
100644
-
-
-
a
/
config
/
coverage
/
coverage
.
gni
+
+
+
b
/
config
/
coverage
/
coverage
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_fuchsia
)
{
import
(
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
build
/
component
.
gni
"
)
}
diff
-
-
git
a
/
config
/
dcheck_always_on
.
gni
b
/
config
/
dcheck_always_on
.
gni
index
9e7e943ec
.
.
d69f5e8bf
100644
-
-
-
a
/
config
/
dcheck_always_on
.
gni
+
+
+
b
/
config
/
dcheck_always_on
.
gni
-
5
7
+
5
7
#
TODO
(
crbug
.
com
/
1233050
)
:
Until
the
bug
is
resolved
we
need
to
include
#
gclient_args
for
the
definition
of
build_with_chromium
and
build_overrides
#
for
client
overrides
of
that
flag
.
The
latter
should
go
away
.
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
#
Enables
DCHECKs
to
be
built
-
in
but
to
default
to
being
non
-
fatal
/
log
-
only
.
diff
-
-
git
a
/
config
/
devtools
.
gni
b
/
config
/
devtools
.
gni
index
7a6d2b2f0
.
.
e3ddfd219
100644
-
-
-
a
/
config
/
devtools
.
gni
+
+
+
b
/
config
/
devtools
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
diff
-
-
git
a
/
config
/
features
.
gni
b
/
config
/
features
.
gni
index
62bf4bcb3
.
.
cf0f72dec
100644
-
-
-
a
/
config
/
features
.
gni
+
+
+
b
/
config
/
features
.
gni
-
14
8
+
14
8
#
There
is
more
advice
on
where
to
put
build
flags
in
the
"
Build
flag
"
section
#
of
/
/
build
/
config
/
BUILDCONFIG
.
gn
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
declare_args
(
)
{
#
Enables
proprietary
codecs
and
demuxers
;
e
.
g
.
H264
AAC
MP3
and
MP4
.
diff
-
-
git
a
/
config
/
freetype
/
BUILD
.
gn
b
/
config
/
freetype
/
BUILD
.
gn
index
76cb025fb
.
.
970627dad
100644
-
-
-
a
/
config
/
freetype
/
BUILD
.
gn
+
+
+
b
/
config
/
freetype
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
group
(
"
freetype
"
)
{
if
(
use_system_freetype
)
{
-
public_configs
=
[
"
/
/
build
/
linux
:
freetype_from_pkgconfig
"
]
+
public_configs
=
[
"
/
/
chromium
/
build
/
linux
:
freetype_from_pkgconfig
"
]
}
else
{
public_deps
=
[
"
/
/
third_party
:
freetype_harfbuzz
"
]
}
diff
-
-
git
a
/
config
/
fuchsia
/
BUILD
.
gn
b
/
config
/
fuchsia
/
BUILD
.
gn
index
257a031fb
.
.
9c0c3faee
100644
-
-
-
a
/
config
/
fuchsia
/
BUILD
.
gn
+
+
+
b
/
config
/
fuchsia
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
assert
(
is_fuchsia
)
assert
(
!
is_posix
)
-
34
8
+
34
8
config
(
"
executable_config
"
)
{
#
Files
required
to
run
on
Fuchsia
on
isolated
swarming
clients
.
group
(
"
deployment_resources
"
)
{
data
=
[
-
"
/
/
build
/
fuchsia
/
"
-
"
/
/
build
/
util
/
lib
/
"
+
"
/
/
chromium
/
build
/
fuchsia
/
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
.
build
-
id
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
bin
/
fpave
.
sh
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
bin
/
fuchsia
-
common
.
sh
"
diff
-
-
git
a
/
config
/
fuchsia
/
DIR_METADATA
b
/
config
/
fuchsia
/
DIR_METADATA
index
7dbde800d
.
.
b5c88b16a
100644
-
-
-
a
/
config
/
fuchsia
/
DIR_METADATA
+
+
+
b
/
config
/
fuchsia
/
DIR_METADATA
-
1
3
+
1
3
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
os
:
FUCHSIA
diff
-
-
git
a
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
b
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
index
fe4a9fdf8
.
.
3a1f8bd80
100644
-
-
-
a
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
+
+
+
b
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
-
4
12
+
4
12
assert
(
is_fuchsia
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
fuchsia
/
package
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
package
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
declare_args
(
)
{
#
Sets
the
Fuchsia
Amber
repository
which
will
be
used
by
default
by
the
-
97
7
+
97
7
template
(
"
fuchsia_run_script_with_packages
"
)
{
if
(
!
defined
(
data_deps
)
)
{
data_deps
=
[
]
}
-
data_deps
+
=
[
"
/
/
build
/
config
/
fuchsia
:
deployment_resources
"
]
+
data_deps
+
=
[
"
/
/
chromium
/
build
/
config
/
fuchsia
:
deployment_resources
"
]
_combined_package_list
=
[
invoker
.
package
]
if
(
defined
(
invoker
.
package_deps
)
)
{
-
179
7
+
179
7
template
(
"
fuchsia_package_installer
"
)
{
"
executable_args
"
]
)
-
executable
=
rebase_path
(
"
/
/
build
/
fuchsia
/
deploy_to_pkg_repo
.
py
"
)
+
executable
=
rebase_path
(
"
/
/
chromium
/
build
/
fuchsia
/
deploy_to_pkg_repo
.
py
"
)
output_name_format
=
"
deploy_
%
package
%
"
include_fuchsia_build_dir
=
true
}
-
202
7
+
202
7
template
(
"
fuchsia_test_runner
"
)
{
]
)
testonly
=
true
-
_test_runner_py
=
"
/
/
build
/
fuchsia
/
test_runner
.
py
"
+
_test_runner_py
=
"
/
/
chromium
/
build
/
fuchsia
/
test_runner
.
py
"
if
(
defined
(
invoker
.
is_test_exe
)
&
&
invoker
.
is_test_exe
)
{
executable
=
"
/
/
testing
/
test_env
.
py
"
diff
-
-
git
a
/
config
/
fuchsia
/
package
.
gni
b
/
config
/
fuchsia
/
package
.
gni
index
0df0dbdd7
.
.
302ce6887
100644
-
-
-
a
/
config
/
fuchsia
/
package
.
gni
+
+
+
b
/
config
/
fuchsia
/
package
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
devtools
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
devtools
.
gni
"
)
import
(
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
build
/
component
.
gni
"
)
import
(
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
build
/
package
.
gni
"
)
-
67
7
+
67
7
template
(
"
cr_fuchsia_package
"
)
{
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
fuchsia
/
build_cmx_from_fragment
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
fuchsia
/
build_cmx_from_fragment
.
py
"
inputs
=
[
invoker
.
manifest
]
outputs
=
[
_component_manifest
]
diff
-
-
git
a
/
config
/
fuchsia
/
rules
.
gni
b
/
config
/
fuchsia
/
rules
.
gni
index
689e130b6
.
.
747e79de9
100644
-
-
-
a
/
config
/
fuchsia
/
rules
.
gni
+
+
+
b
/
config
/
fuchsia
/
rules
.
gni
-
2
4
+
2
4
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
fuchsia
/
generate_runner_scripts
.
gni
"
)
diff
-
-
git
a
/
config
/
fuchsia
/
sizes
.
gni
b
/
config
/
fuchsia
/
sizes
.
gni
index
20a5bf831
.
.
114f62ecd
100644
-
-
-
a
/
config
/
fuchsia
/
sizes
.
gni
+
+
+
b
/
config
/
fuchsia
/
sizes
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
template
(
"
compute_fuchsia_package_sizes
"
)
{
generate_wrapper
(
target_name
)
{
-
12
7
+
12
7
template
(
"
compute_fuchsia_package_sizes
"
)
{
"
data_deps
"
]
)
testonly
=
true
-
executable
=
"
/
/
build
/
fuchsia
/
binary_sizes
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
fuchsia
/
binary_sizes
.
py
"
wrapper_script
=
"
root_out_dir
/
bin
/
run_
{
target_name
}
"
assert
(
target_cpu
=
=
"
arm64
"
|
|
target_cpu
=
=
"
x64
"
-
29
7
+
29
7
template
(
"
compute_fuchsia_package_sizes
"
)
{
#
Declares
the
files
that
are
needed
for
test
execution
on
the
#
swarming
test
client
.
data
+
=
[
-
"
/
/
build
/
fuchsia
/
"
+
"
/
/
chromium
/
build
/
fuchsia
/
"
"
/
/
fuchsia
/
release
/
size_tests
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
arch
/
"
"
/
/
third_party
/
fuchsia
-
sdk
/
sdk
/
tools
/
{
target_cpu
}
/
"
diff
-
-
git
a
/
config
/
fuchsia
/
symbol_archive
.
gni
b
/
config
/
fuchsia
/
symbol_archive
.
gni
index
9dcb53cae
.
.
7b7334c9f
100644
-
-
-
a
/
config
/
fuchsia
/
symbol_archive
.
gni
+
+
+
b
/
config
/
fuchsia
/
symbol_archive
.
gni
-
19
7
+
19
7
template
(
"
symbol_archive
"
)
{
_ids_txt
=
invoker
.
ids_txt
_build_ids
=
invoker
.
archive_name
-
script
=
"
/
/
build
/
config
/
fuchsia
/
build_symbol_archive
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
fuchsia
/
build_symbol_archive
.
py
"
inputs
=
[
_ids_txt
]
diff
-
-
git
a
/
config
/
gcc
/
BUILD
.
gn
b
/
config
/
gcc
/
BUILD
.
gn
index
893dae136
.
.
397f3125e
100644
-
-
-
a
/
config
/
gcc
/
BUILD
.
gn
+
+
+
b
/
config
/
gcc
/
BUILD
.
gn
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
When
non
empty
overrides
the
target
rpath
value
.
This
allows
a
user
to
-
60
7
+
60
7
config
(
"
symbol_visibility_default
"
)
{
#
this
is
OK
.
For
these
cases
use
something
like
this
:
#
#
if
(
(
is_linux
|
|
is_chromeos
)
&
&
!
is_component_build
)
{
-
#
configs
+
=
[
"
/
/
build
/
config
/
gcc
:
rpath_for_built_shared_libraries
"
]
+
#
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
gcc
:
rpath_for_built_shared_libraries
"
]
#
}
config
(
"
rpath_for_built_shared_libraries
"
)
{
if
(
!
is_android
&
&
!
is_chromecast
&
&
current_os
!
=
"
aix
"
)
{
diff
-
-
git
a
/
config
/
host_byteorder
.
gni
b
/
config
/
host_byteorder
.
gni
index
48a1a7f1e
.
.
22c7212ca
100644
-
-
-
a
/
config
/
host_byteorder
.
gni
+
+
+
b
/
config
/
host_byteorder
.
gni
-
17
7
+
17
7
if
(
host_cpu
=
=
"
ppc64
"
)
{
}
else
{
#
Only
use
the
script
when
absolutely
necessary
host_byteorder
=
-
exec_script
(
"
/
/
build
/
config
/
get_host_byteorder
.
py
"
[
]
"
trim
string
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
get_host_byteorder
.
py
"
[
]
"
trim
string
"
)
}
}
else
if
(
host_cpu
=
=
"
ppc
"
|
|
host_cpu
=
=
"
s390
"
|
|
host_cpu
=
=
"
s390x
"
|
|
host_cpu
=
=
"
mips
"
|
|
host_cpu
=
=
"
mips64
"
)
{
diff
-
-
git
a
/
config
/
ios
/
BUILD
.
gn
b
/
config
/
ios
/
BUILD
.
gn
index
0ec875e9c
.
.
7323b25d3
100644
-
-
-
a
/
config
/
ios
/
BUILD
.
gn
+
+
+
b
/
config
/
ios
/
BUILD
.
gn
-
5
11
+
5
11
#
TODO
(
crbug
.
com
/
1259122
)
:
Remove
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
when
#
Chromium
Clang
ship
with
a
catalyst
version
of
the
compiler
runtime
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
-
291
7
+
291
7
_xctrunner_path
=
if
(
use_system_xcode
&
&
(
use_goma
|
|
use_remoteexec
)
)
{
action
(
"
copy_xctrunner_app
"
)
{
testonly
=
true
-
script
=
"
/
/
build
/
noop
.
py
"
+
script
=
"
/
/
chromium
/
build
/
noop
.
py
"
outputs
=
[
"
_xctrunner_path
/
Info
.
plist
"
"
_xctrunner_path
/
PkgInfo
"
-
305
7
+
305
7
if
(
use_system_xcode
&
&
(
use_goma
|
|
use_remoteexec
)
)
{
#
yet
supported
by
Apple
)
.
action
(
"
xctest_runner_without_arm64e
"
)
{
testonly
=
true
-
script
=
"
/
/
build
/
config
/
ios
/
strip_arm64e
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
strip_arm64e
.
py
"
sources
=
[
"
_xctrunner_path
/
XCTRunner
"
]
outputs
=
[
"
target_out_dir
/
XCTRunner
"
]
args
=
[
diff
-
-
git
a
/
config
/
ios
/
asset_catalog
.
gni
b
/
config
/
ios
/
asset_catalog
.
gni
index
3b43246e2
.
.
adfb5cb4f
100644
-
-
-
a
/
config
/
ios
/
asset_catalog
.
gni
+
+
+
b
/
config
/
ios
/
asset_catalog
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
#
This
template
declares
a
bundle_data
target
that
references
an
asset
#
catalog
so
that
it
is
compiled
to
the
asset
catalog
of
the
generated
-
85
7
+
85
7
template
(
"
asset_catalog
"
)
{
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
ios
/
hardlink
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
hardlink
.
py
"
visibility
=
[
"
:
_data_target_name
"
]
sources
=
_sources
diff
-
-
git
a
/
config
/
ios
/
ios_sdk
.
gni
b
/
config
/
ios
/
ios_sdk
.
gni
index
5d5399a13
.
.
127193c12
100644
-
-
-
a
/
config
/
ios
/
ios_sdk
.
gni
+
+
+
b
/
config
/
ios
/
ios_sdk
.
gni
-
2
11
+
2
11
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
assert
(
current_os
=
=
"
ios
"
)
-
158
7
+
158
7
if
(
ios_sdk_path
=
=
"
"
)
{
"
sdk
/
xcode_links
"
]
}
-
script_name
=
"
/
/
build
/
config
/
apple
/
sdk_info
.
py
"
+
script_name
=
"
/
/
chromium
/
build
/
config
/
apple
/
sdk_info
.
py
"
_ios_sdk_result
=
exec_script
(
script_name
ios_sdk_info_args
"
scope
"
)
ios_bin_path
=
rebase_path
(
"
{
_ios_sdk_result
.
toolchains_path
}
/
usr
/
bin
/
"
root_build_dir
)
diff
-
-
git
a
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
b
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
index
cffa647f6
.
.
8728d7adb
100644
-
-
-
a
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
+
+
+
b
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
#
Invokes
generate_wrapper
to
create
an
executable
script
wrapping
iOS
'
#
run
.
py
with
baked
in
arguments
.
Only
takes
effect
when
test
entry
in
diff
-
-
git
a
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
b
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
index
17ffe0aa4
.
.
00ea45158
100644
-
-
-
a
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
+
+
+
b
/
config
/
ios
/
ios_test_runner_xcuitest
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
rules
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_test_runner_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
rules
.
gni
"
)
#
ios_test_runner_xcuitest
are
just
ios_xcuitest_test
with
an
#
ios_test_runner_wrapper
.
Currently
used
by
Crashpad
tests
which
do
not
depend
diff
-
-
git
a
/
config
/
ios
/
rules
.
gni
b
/
config
/
ios
/
rules
.
gni
index
b78090574
.
.
cbccb4da8
100644
-
-
-
a
/
config
/
ios
/
rules
.
gni
+
+
+
b
/
config
/
ios
/
rules
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
apple_info_plist
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
apple_info_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
-
78
10
+
78
10
template
(
"
lipo_binary
"
)
{
"
output_name
"
]
)
-
script
=
"
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
+
script
=
"
/
/
chromium
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
#
http
:
/
/
crbug
.
com
/
762840
.
Fix
for
bots
running
out
of
memory
.
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
outputs
=
[
"
target_out_dir
/
_output_name
"
]
-
283
7
+
283
7
template
(
"
create_signed_bundle
"
)
{
if
(
_enable_entitlements
)
{
if
(
!
defined
(
invoker
.
entitlements_target
)
)
{
-
_entitlements_path
=
"
/
/
build
/
config
/
ios
/
entitlements
.
plist
"
+
_entitlements_path
=
"
/
/
chromium
/
build
/
config
/
ios
/
entitlements
.
plist
"
if
(
defined
(
invoker
.
entitlements_path
)
)
{
_entitlements_path
=
invoker
.
entitlements_path
}
-
359
7
+
359
7
template
(
"
create_signed_bundle
"
)
{
if
(
_bundle_identifier
!
=
"
"
)
{
_ios_provisioning_profile_info
=
-
exec_script
(
"
/
/
build
/
config
/
ios
/
codesign
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
ios
/
codesign
.
py
"
[
"
find
-
provisioning
-
profile
"
"
-
b
=
"
+
_bundle_identifier
-
397
7
+
397
7
template
(
"
create_signed_bundle
"
)
{
deps
=
[
]
}
-
code_signing_script
=
"
/
/
build
/
config
/
ios
/
codesign
.
py
"
+
code_signing_script
=
"
/
/
chromium
/
build
/
config
/
ios
/
codesign
.
py
"
code_signing_sources
=
[
_bundle_binary_path
]
if
(
_enable_entitlements
)
{
if
(
defined
(
invoker
.
entitlements_target
)
)
{
-
477
7
+
477
7
template
(
"
create_signed_bundle
"
)
{
invoker
.
partial_info_plist
]
-
_plist_compiler_path
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
_plist_compiler_path
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
code_signing_sources
+
=
_partial_info_plists
code_signing_sources
+
=
[
_plist_compiler_path
]
-
549
7
+
549
7
template
(
"
ios_info_plist
"
)
{
extra_substitutions
+
=
invoker
.
extra_substitutions
}
plist_templates
=
[
-
"
/
/
build
/
config
/
ios
/
BuildInfo
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
BuildInfo
.
plist
"
_info_plist
]
if
(
defined
(
invoker
.
info_plist_target
)
)
{
-
842
7
+
842
7
template
(
"
ios_app_bundle
"
)
{
if
(
!
is_fat_secondary_toolchain
)
{
if
(
!
defined
(
invoker
.
entitlements_target
)
)
{
-
_entitlements_path
=
"
/
/
build
/
config
/
ios
/
entitlements
.
plist
"
+
_entitlements_path
=
"
/
/
chromium
/
build
/
config
/
ios
/
entitlements
.
plist
"
if
(
defined
(
invoker
.
entitlements_path
)
)
{
_entitlements_path
=
invoker
.
entitlements_path
}
-
860
7
+
860
7
template
(
"
ios_app_bundle
"
)
{
_gen_info_plist_outputs
=
get_target_outputs
(
"
:
_generate_info_plist
"
)
_info_plist_path
=
_gen_info_plist_outputs
[
0
]
-
script
=
"
/
/
build
/
config
/
ios
/
codesign
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
codesign
.
py
"
deps
=
[
"
:
_generate_info_plist
"
]
if
(
defined
(
invoker
.
entitlements_target
)
)
{
deps
+
=
[
invoker
.
entitlements_target
]
-
884
8
+
884
8
template
(
"
ios_app_bundle
"
)
{
_create_pkg_info
=
target_name
+
"
_pkg_info
"
action
(
_create_pkg_info
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
write_pkg_info
.
py
"
-
inputs
=
[
"
/
/
build
/
apple
/
plist_util
.
py
"
]
+
script
=
"
/
/
chromium
/
build
/
apple
/
write_pkg_info
.
py
"
+
inputs
=
[
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
]
sources
=
get_target_outputs
(
"
:
_generate_info_plist
"
)
outputs
=
[
#
Cannot
name
the
output
PkgInfo
as
the
name
will
not
be
unique
if
-
967
7
+
967
7
template
(
"
ios_app_bundle
"
)
{
action
(
_target_name
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
ios
/
hardlink
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
hardlink
.
py
"
public_deps
=
[
]
foreach
(
_variant
_variants
)
{
public_deps
+
=
[
"
:
{
_variant
.
target_name
}
"
]
-
1032
7
+
1032
7
template
(
"
ios_appex_bundle
"
)
{
}
set_defaults
(
"
ios_appex_bundle
"
)
{
-
configs
=
[
"
/
/
build
/
config
/
ios
:
ios_extension_executable_flags
"
]
+
configs
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
ios_extension_executable_flags
"
]
}
#
Template
to
compile
.
xib
and
.
storyboard
files
.
-
1063
7
+
1063
7
template
(
"
compile_ib_files
"
)
{
_output_extension
=
invoker
.
output_extension
-
script
=
"
/
/
build
/
config
/
ios
/
compile_ib_files
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
compile_ib_files
.
py
"
sources
=
invoker
.
sources
outputs
=
[
"
target_gen_dir
/
target_name
/
{
{
source_name_part
}
}
.
_output_extension
"
-
1467
7
+
1467
7
template
(
"
ios_framework_bundle
"
)
{
"
public_deps
"
"
testonly
"
]
)
-
script
=
"
/
/
build
/
config
/
ios
/
write_framework_hmap
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
write_framework_hmap
.
py
"
outputs
=
[
_header_map_filename
]
#
The
header
map
generation
only
wants
the
list
of
headers
not
all
of
-
1490
7
+
1490
7
template
(
"
ios_framework_bundle
"
)
{
_create_module_map_target
=
_target_name
+
"
_module_map
"
action
(
_create_module_map_target
)
{
visibility
=
[
"
:
_framework_headers_target
"
]
-
script
=
"
/
/
build
/
config
/
ios
/
write_framework_modulemap
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
write_framework_modulemap
.
py
"
outputs
=
[
"
_framework_contents_dir
/
Modules
/
module
.
modulemap
"
]
args
=
[
_output_name
-
1746
7
+
1746
7
template
(
"
ios_xctest_bundle
"
)
{
}
deps
=
[
"
:
_arch_loadable_module_source
"
]
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
output_dir
=
"
target_out_dir
/
current_cpu
"
output_name
=
_output_name
-
1778
7
+
1778
7
template
(
"
ios_xctest_bundle
"
)
{
testonly
=
true
visibility
=
[
"
:
_info_plist_bundle
"
]
-
info_plist
=
"
/
/
build
/
config
/
ios
/
Module
-
Info
.
plist
"
+
info_plist
=
"
/
/
chromium
/
build
/
config
/
ios
/
Module
-
Info
.
plist
"
executable_name
=
_output_name
if
(
defined
(
invoker
.
xctest_bundle_principal_class
)
)
{
-
1836
7
+
1836
7
template
(
"
ios_xctest_bundle
"
)
{
if
(
ios_set_attributes_for_xcode_project_generation
)
{
_ios_provisioning_profile_info
=
-
exec_script
(
"
/
/
build
/
config
/
ios
/
codesign
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
ios
/
codesign
.
py
"
[
"
find
-
provisioning
-
profile
"
"
-
b
=
"
+
_bundle_identifier
-
1922
9
+
1922
9
template
(
"
ios_xctest_test
"
)
{
_xctest_module_target_name
=
_xctest_target
+
"
shell_source
"
_xctest_module_target
=
"
:
_xctest_module_target_name
"
source_set
(
_xctest_module_target_name
)
{
-
sources
=
[
"
/
/
build
/
config
/
ios
/
xctest_shell
.
mm
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
config
/
ios
/
xctest_shell
.
mm
"
]
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
}
}
-
1954
10
+
1954
10
template
(
"
ios_xctest_test
"
)
{
testonly
=
true
output_name
=
_host_output
-
configs
+
=
[
"
/
/
build
/
config
/
ios
:
xctest_config
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_config
"
]
if
(
!
defined
(
invoker
.
info_plist
)
&
&
!
defined
(
invoker
.
info_plist_target
)
)
{
-
info_plist
=
"
/
/
build
/
config
/
ios
/
Host
-
Info
.
plist
"
+
info_plist
=
"
/
/
chromium
/
build
/
config
/
ios
/
Host
-
Info
.
plist
"
}
#
Xcode
needs
the
following
frameworks
installed
in
the
application
(
and
-
2034
7
+
2034
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
action
(
_info_plist_merge_plist
)
{
testonly
=
true
-
script
=
"
/
/
build
/
apple
/
plist_util
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
sources
=
[
"
_xctrunner_path
/
Info
.
plist
"
-
2042
7
+
2042
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
#
NOTE
:
The
XCTRunnerAddition
+
Info
.
plist
must
come
after
the
Info
.
plist
#
because
it
overrides
the
values
under
"
CFBundleIdentifier
"
and
#
"
CFBundleName
"
.
-
"
/
/
build
/
config
/
ios
/
resources
/
XCTRunnerAddition
+
Info
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
resources
/
XCTRunnerAddition
+
Info
.
plist
"
]
_output_name
=
"
target_gen_dir
/
{
_target_name
}
_merged
.
plist
"
-
2055
7
+
2055
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
]
+
rebase_path
(
sources
root_build_dir
)
if
(
use_system_xcode
&
&
(
use_goma
|
|
use_remoteexec
)
)
{
-
deps
=
[
"
/
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
}
}
-
2088
7
+
2088
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
outputs
=
[
"
{
{
bundle_contents_dir
}
}
/
PkgInfo
"
]
if
(
use_system_xcode
&
&
(
use_goma
|
|
use_remoteexec
)
)
{
-
public_deps
=
[
"
/
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
+
public_deps
=
[
"
/
/
chromium
/
build
/
config
/
ios
:
copy_xctrunner_app
"
]
}
}
-
2096
7
+
2096
7
template
(
"
ios_xcuitest_test_runner_bundle
"
)
{
create_signed_bundle
(
_target_name
)
{
testonly
=
true
-
bundle_binary_target
=
"
/
/
build
/
config
/
ios
:
xctest_runner_without_arm64e
"
+
bundle_binary_target
=
"
/
/
chromium
/
build
/
config
/
ios
:
xctest_runner_without_arm64e
"
bundle_binary_output
=
"
XCTRunner
"
bundle_extension
=
"
.
app
"
product_type
=
_ios_xcode_app_bundle_id
diff
-
-
git
a
/
config
/
linux
/
BUILD
.
gn
b
/
config
/
linux
/
BUILD
.
gn
index
c4eee13bf
.
.
9a60f997d
100644
-
-
-
a
/
config
/
linux
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
group
(
"
linux
"
)
{
visibility
=
[
"
/
/
:
optimize_gn_gen
"
]
-
16
7
+
16
7
group
(
"
linux
"
)
{
#
Linux
-
only
.
This
is
not
applied
to
Android
but
is
applied
to
ChromeOS
.
config
(
"
compiler
"
)
{
if
(
current_cpu
=
=
"
arm64
"
)
{
-
import
(
"
/
/
build
/
config
/
arm
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
arm
.
gni
"
)
cflags
=
[
]
asmflags
=
[
]
if
(
arm_control_flow_integrity
=
=
"
standard
"
)
{
-
43
7
+
43
7
config
(
"
runtime_library
"
)
{
#
Mozilla
disable
libatomic
on
linux
builds
if
(
false
)
{
if
(
(
!
(
is_chromeos_ash
|
|
is_chromeos_lacros
)
|
|
-
default_toolchain
!
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
&
&
+
default_toolchain
!
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
&
&
(
!
use_custom_libcxx
|
|
current_cpu
=
=
"
mipsel
"
)
)
{
libs
=
[
"
atomic
"
]
}
diff
-
-
git
a
/
config
/
linux
/
atk
/
BUILD
.
gn
b
/
config
/
linux
/
atk
/
BUILD
.
gn
index
647bef697
.
.
791dde2c2
100644
-
-
-
a
/
config
/
linux
/
atk
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
atk
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
#
CrOS
doesn
'
t
install
GTK
or
any
gnome
packages
.
assert
(
!
is_chromeos
)
diff
-
-
git
a
/
config
/
linux
/
atspi2
/
BUILD
.
gn
b
/
config
/
linux
/
atspi2
/
BUILD
.
gn
index
d103d09a3
.
.
dcde99538
100644
-
-
-
a
/
config
/
linux
/
atspi2
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
atspi2
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
#
These
packages
should
_only_
be
expected
when
building
for
a
target
.
assert
(
current_toolchain
=
=
default_toolchain
)
diff
-
-
git
a
/
config
/
linux
/
dbus
/
BUILD
.
gn
b
/
config
/
linux
/
dbus
/
BUILD
.
gn
index
f11cf7101
.
.
334501025
100644
-
-
-
a
/
config
/
linux
/
dbus
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
dbus
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
use_dbus
)
diff
-
-
git
a
/
config
/
linux
/
dri
/
BUILD
.
gn
b
/
config
/
linux
/
dri
/
BUILD
.
gn
index
4a5243277
.
.
da52d42ab
100644
-
-
-
a
/
config
/
linux
/
dri
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
dri
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
gtk
/
BUILD
.
gn
b
/
config
/
linux
/
gtk
/
BUILD
.
gn
index
349043f8a
.
.
1ceaaf489
100644
-
-
-
a
/
config
/
linux
/
gtk
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
gtk
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
gtk
/
gtk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
gtk
/
gtk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
gtk
/
gtk
.
gni
b
/
config
/
linux
/
gtk
/
gtk
.
gni
index
b846c8e62
.
.
e4c44586a
100644
-
-
-
a
/
config
/
linux
/
gtk
/
gtk
.
gni
+
+
+
b
/
config
/
linux
/
gtk
/
gtk
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
declare_args
(
)
{
#
Whether
or
not
we
should
use
libgtk
.
diff
-
-
git
a
/
config
/
linux
/
libdrm
/
BUILD
.
gn
b
/
config
/
linux
/
libdrm
/
BUILD
.
gn
index
79695cbc6
.
.
5fc383c81
100644
-
-
-
a
/
config
/
linux
/
libdrm
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libdrm
/
BUILD
.
gn
-
1
9
+
1
9
#
Copyright
2018
The
Chromium
Authors
.
All
rights
reserved
.
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
|
|
is_chromeos
)
diff
-
-
git
a
/
config
/
linux
/
libffi
/
BUILD
.
gn
b
/
config
/
linux
/
libffi
/
BUILD
.
gn
index
fb4fa18bf
.
.
719fbbb9c
100644
-
-
-
a
/
config
/
linux
/
libffi
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libffi
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
if
(
default_toolchain
=
=
"
/
/
build
/
toolchain
/
cros
:
target
"
)
{
+
if
(
default_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
cros
:
target
"
)
{
pkg_config
(
"
libffi
"
)
{
packages
=
[
"
libffi
"
]
}
diff
-
-
git
a
/
config
/
linux
/
libva
/
BUILD
.
gn
b
/
config
/
linux
/
libva
/
BUILD
.
gn
index
ada5d665f
.
.
9d1d44352
100644
-
-
-
a
/
config
/
linux
/
libva
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
libva
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
assert
(
is_linux
|
|
is_chromeos
"
This
file
should
only
be
referenced
on
Linux
"
)
diff
-
-
git
a
/
config
/
linux
/
nss
/
BUILD
.
gn
b
/
config
/
linux
/
nss
/
BUILD
.
gn
index
638b44ef2
.
.
43b9ae876
100644
-
-
-
a
/
config
/
linux
/
nss
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
nss
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
is_linux
|
|
is_chromeos
)
{
#
This
is
a
dependency
on
NSS
with
no
libssl3
.
On
Linux
and
Chrome
OS
we
use
diff
-
-
git
a
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
b
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
index
ddcc754bb
.
.
950d1973b
100644
-
-
-
a
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
+
+
+
b
/
config
/
linux
/
pangocairo
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
use_pangocairo
)
{
pkg_config
(
"
pangocairo
"
)
{
diff
-
-
git
a
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
b
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
index
6bc75294c
.
.
9fe47ed7a
100644
-
-
-
a
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
+
+
+
b
/
config
/
linux
/
pangocairo
/
pangocairo
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
declare_args
(
)
{
use_pangocairo
=
is_linux
&
&
!
is_chromecast
diff
-
-
git
a
/
config
/
linux
/
pkg_config
.
gni
b
/
config
/
linux
/
pkg_config
.
gni
index
635fd8dde
.
.
d42034446
100644
-
-
-
a
/
config
/
linux
/
pkg_config
.
gni
+
+
+
b
/
config
/
linux
/
pkg_config
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
#
Defines
a
config
specifying
the
result
of
running
pkg
-
config
for
the
given
#
packages
.
Put
the
package
names
you
want
to
query
in
the
"
packages
"
variable
-
47
7
+
47
7
declare_args
(
)
{
system_libdir
=
"
lib
"
}
-
pkg_config_script
=
"
/
/
build
/
config
/
linux
/
pkg
-
config
.
py
"
+
pkg_config_script
=
"
/
/
chromium
/
build
/
config
/
linux
/
pkg
-
config
.
py
"
#
Define
the
args
we
pass
to
the
pkg
-
config
script
for
other
build
files
that
#
need
to
invoke
it
manually
.
diff
-
-
git
a
/
config
/
locales
.
gni
b
/
config
/
locales
.
gni
index
f49e62d43
.
.
115d497c8
100644
-
-
-
a
/
config
/
locales
.
gni
+
+
+
b
/
config
/
locales
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
#
This
file
creates
|
platform_pak_locales
|
which
is
the
set
of
current
locales
#
based
on
the
current
platform
.
Locales
in
this
list
are
formatted
based
on
diff
-
-
git
a
/
config
/
logging
.
gni
b
/
config
/
logging
.
gni
index
c2f94e929
.
.
2b17f0c69
100644
-
-
-
a
/
config
/
logging
.
gni
+
+
+
b
/
config
/
logging
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
dcheck_always_on
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
dcheck_always_on
.
gni
"
)
declare_args
(
)
{
#
Use
LogErrorNotReached
(
)
for
NOTREACHED
(
)
.
diff
-
-
git
a
/
config
/
mac
/
BUILD
.
gn
b
/
config
/
mac
/
BUILD
.
gn
index
0fad7261e
.
.
941125c1d
100644
-
-
-
a
/
config
/
mac
/
BUILD
.
gn
+
+
+
b
/
config
/
mac
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
.
-
122
7
+
122
7
config
(
"
strip_all
"
)
{
if
(
use_system_xcode
&
&
(
use_goma
|
|
use_remoteexec
)
&
&
target_os
=
=
"
mac
"
&
&
current_toolchain
=
=
default_toolchain
)
{
action
(
"
sdk_inputs
"
)
{
-
script
=
"
/
/
build
/
noop
.
py
"
+
script
=
"
/
/
chromium
/
build
/
noop
.
py
"
outputs
=
[
"
mac_sdk_path
/
usr
/
include
/
mach
/
exc
.
defs
"
"
mac_sdk_path
/
usr
/
include
/
mach
/
mach_exc
.
defs
"
diff
-
-
git
a
/
config
/
mac
/
mac_sdk
.
gni
b
/
config
/
mac
/
mac_sdk
.
gni
index
e57cbaeae
.
.
80d0d88fd
100644
-
-
-
a
/
config
/
mac
/
mac_sdk
.
gni
+
+
+
b
/
config
/
mac
/
mac_sdk
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
gclient_args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
gclient_args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk_overrides
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
assert
(
current_os
=
=
"
mac
"
|
|
current_toolchain
=
=
default_toolchain
)
-
67
10
+
67
10
if
(
is_chrome_branded
&
&
is_official_build
&
&
target_os
!
=
"
ios
"
)
{
#
The
path
to
the
hermetic
install
of
Xcode
.
Only
relevant
when
#
use_system_xcode
=
false
.
if
(
!
use_system_xcode
)
{
-
_hermetic_xcode_path
=
"
/
/
build
/
mac_files
/
xcode_binaries
"
+
_hermetic_xcode_path
=
"
/
/
chromium
/
build
/
mac_files
/
xcode_binaries
"
}
-
script_name
=
"
/
/
build
/
config
/
apple
/
sdk_info
.
py
"
+
script_name
=
"
/
/
chromium
/
build
/
config
/
apple
/
sdk_info
.
py
"
sdk_info_args
=
[
]
if
(
!
use_system_xcode
)
{
sdk_info_args
+
=
[
-
106
7
+
106
7
if
(
use_system_xcode
)
{
mac_sdk_min
]
find_sdk_lines
=
-
exec_script
(
"
/
/
build
/
mac
/
find_sdk
.
py
"
find_sdk_args
"
list
lines
"
)
+
exec_script
(
"
/
/
chromium
/
build
/
mac
/
find_sdk
.
py
"
find_sdk_args
"
list
lines
"
)
mac_sdk_version
=
find_sdk_lines
[
2
]
if
(
mac_sdk_path
=
=
"
"
)
{
mac_sdk_path
=
find_sdk_lines
[
0
]
diff
-
-
git
a
/
config
/
mac
/
rules
.
gni
b
/
config
/
mac
/
rules
.
gni
index
03073f830
.
.
1870c9a94
100644
-
-
-
a
/
config
/
mac
/
rules
.
gni
+
+
+
b
/
config
/
mac
/
rules
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
apple
/
apple_info_plist
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
apple
/
apple_info_plist
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
#
Generates
Info
.
plist
files
for
Mac
apps
and
frameworks
.
#
-
52
7
+
52
7
template
(
"
mac_info_plist
"
)
{
extra_substitutions
+
=
invoker
.
extra_substitutions
}
plist_templates
=
[
-
"
/
/
build
/
config
/
mac
/
BuildInfo
.
plist
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
BuildInfo
.
plist
"
_info_plist
]
if
(
defined
(
invoker
.
info_plist_target
)
)
{
-
229
7
+
229
7
template
(
"
mac_framework_bundle
"
)
{
#
Clean
the
entire
framework
if
the
framework_version
changes
.
_version_file
=
"
target_out_dir
/
{
target_name
}
_version
"
-
exec_script
(
"
/
/
build
/
config
/
mac
/
prepare_framework_version
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
config
/
mac
/
prepare_framework_version
.
py
"
[
rebase_path
(
_version_file
)
rebase_path
(
_framework_base_dir
)
-
239
7
+
239
7
template
(
"
mac_framework_bundle
"
)
{
#
Create
the
symlinks
.
_framework_package_target
=
target_name
+
"
_package
"
action
(
_framework_package_target
)
{
-
script
=
"
/
/
build
/
config
/
mac
/
package_framework
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
mac
/
package_framework
.
py
"
#
The
TOC
file
never
needs
to
be
read
since
its
contents
are
the
values
#
of
GN
variables
.
It
is
only
used
to
trigger
this
rule
when
the
values
-
466
8
+
466
8
template
(
"
mac_app_bundle
"
)
{
action
(
_pkg_info_target
)
{
forward_variables_from
(
invoker
[
"
testonly
"
]
)
-
script
=
"
/
/
build
/
apple
/
write_pkg_info
.
py
"
-
inputs
=
[
"
/
/
build
/
apple
/
plist_util
.
py
"
]
+
script
=
"
/
/
chromium
/
build
/
apple
/
write_pkg_info
.
py
"
+
inputs
=
[
"
/
/
chromium
/
build
/
apple
/
plist_util
.
py
"
]
sources
=
get_target_outputs
(
"
:
_info_plist_target
"
)
outputs
=
[
"
target_gen_dir
/
_pkg_info_target
"
]
args
=
[
"
-
-
plist
"
]
+
rebase_path
(
sources
root_build_dir
)
+
diff
-
-
git
a
/
config
/
mips
.
gni
b
/
config
/
mips
.
gni
index
6365088b1
.
.
f1a13310e
100644
-
-
-
a
/
config
/
mips
.
gni
+
+
+
b
/
config
/
mips
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
#
These
are
primarily
relevant
in
current_cpu
=
=
"
mips
*
"
contexts
where
#
MIPS
code
is
being
compiled
.
But
they
can
also
be
relevant
in
the
diff
-
-
git
a
/
config
/
nacl
/
BUILD
.
gn
b
/
config
/
nacl
/
BUILD
.
gn
index
dfab7f74e
.
.
d639729f7
100644
-
-
-
a
/
config
/
nacl
/
BUILD
.
gn
+
+
+
b
/
config
/
nacl
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
#
Native
Client
Definitions
config
(
"
nacl_defines
"
)
{
diff
-
-
git
a
/
config
/
nacl
/
config
.
gni
b
/
config
/
nacl
/
config
.
gni
index
6e88fd297
.
.
93a2ee709
100644
-
-
-
a
/
config
/
nacl
/
config
.
gni
+
+
+
b
/
config
/
nacl
/
config
.
gni
-
51
5
+
51
5
nacl_toolchain_tooldir
=
"
{
nacl_toolchain_dir
}
/
{
nacl_toolchain_package
}
/
{
_nacl_tuple
}
"
nacl_toolprefix
=
"
{
nacl_toolchain_bindir
}
/
{
_nacl_tuple
}
-
"
-
nacl_irt_toolchain
=
"
/
/
build
/
toolchain
/
nacl
:
irt_
"
+
target_cpu
+
nacl_irt_toolchain
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
irt_
"
+
target_cpu
is_nacl_irt
=
current_toolchain
=
=
nacl_irt_toolchain
diff
-
-
git
a
/
config
/
nacl
/
rules
.
gni
b
/
config
/
nacl
/
rules
.
gni
index
a15d32622
.
.
7d916e8f5
100644
-
-
-
a
/
config
/
nacl
/
rules
.
gni
+
+
+
b
/
config
/
nacl
/
rules
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
#
Generate
a
nmf
file
#
-
101
7
+
101
7
template
(
"
generate_nmf
"
)
{
if
(
current_cpu
=
=
"
x64
"
|
|
target_os
=
=
"
win
"
)
{
#
For
x86
-
64
the
lib
/
directory
is
called
lib64
/
instead
#
when
copied
by
create_nmf
.
py
.
-
glibc_tc
=
"
/
/
build
/
toolchain
/
nacl
:
glibc
"
+
glibc_tc
=
"
/
/
chromium
/
build
/
toolchain
/
nacl
:
glibc
"
assert
(
current_toolchain
=
=
"
{
glibc_tc
}
_
{
current_cpu
}
"
)
if
(
current_cpu
=
=
"
x64
"
)
{
x64_out_dir
=
root_out_dir
diff
-
-
git
a
/
config
/
ozone
.
gni
b
/
config
/
ozone
.
gni
index
129a0d8df
.
.
e123b6b73
100644
-
-
-
a
/
config
/
ozone
.
gni
+
+
+
b
/
config
/
ozone
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Indicates
if
Ozone
is
enabled
.
Ozone
is
a
low
-
level
library
layer
for
Linux
-
16
7
+
16
7
declare_args
(
)
{
declare_args
(
)
{
#
Ozone
extra
platforms
file
path
.
Can
be
overridden
to
build
out
of
#
tree
ozone
platforms
.
-
ozone_extra_path
=
"
/
/
build
/
config
/
ozone_extra
.
gni
"
+
ozone_extra_path
=
"
/
/
chromium
/
build
/
config
/
ozone_extra
.
gni
"
#
Select
platforms
automatically
.
Turn
this
off
for
manual
control
.
ozone_auto_platforms
=
use_ozone
diff
-
-
git
a
/
config
/
pch
.
gni
b
/
config
/
pch
.
gni
index
efc8a3be3
.
.
07107afbe
100644
-
-
-
a
/
config
/
pch
.
gni
+
+
+
b
/
config
/
pch
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
declare_args
(
)
{
#
Precompiled
header
file
support
is
by
default
available
diff
-
-
git
a
/
config
/
posix
/
BUILD
.
gn
b
/
config
/
posix
/
BUILD
.
gn
index
5d1516387
.
.
ce38e739f
100644
-
-
-
a
/
config
/
posix
/
BUILD
.
gn
+
+
+
b
/
config
/
posix
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
#
This
build
configuration
is
used
by
both
Fuchsia
and
POSIX
systems
.
assert
(
is_posix
|
|
is_fuchsia
)
-
34
10
+
34
10
config
(
"
runtime_library
"
)
{
#
line
and
build
system
rebuilds
things
when
their
commandline
#
changes
)
.
Nothing
should
ever
read
this
define
.
sysroot_hash
=
-
exec_script
(
"
/
/
build
/
linux
/
sysroot_scripts
/
install
-
sysroot
.
py
"
+
exec_script
(
"
/
/
chromium
/
build
/
linux
/
sysroot_scripts
/
install
-
sysroot
.
py
"
[
"
-
-
print
-
hash
=
current_cpu
"
]
"
trim
string
"
-
[
"
/
/
build
/
linux
/
sysroot_scripts
/
sysroots
.
json
"
]
)
+
[
"
/
/
chromium
/
build
/
linux
/
sysroot_scripts
/
sysroots
.
json
"
]
)
defines
+
=
[
"
CR_SYSROOT_HASH
=
sysroot_hash
"
]
}
asmflags
+
=
sysroot_flags
diff
-
-
git
a
/
config
/
profiling
/
profiling
.
gni
b
/
config
/
profiling
/
profiling
.
gni
index
9ca3d4aa1
.
.
75b644cfa
100644
-
-
-
a
/
config
/
profiling
/
profiling
.
gni
+
+
+
b
/
config
/
profiling
/
profiling
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
pgo
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
declare_args
(
)
{
use_clang_profiling
=
diff
-
-
git
a
/
config
/
python
.
gni
b
/
config
/
python
.
gni
index
2dfb7e927
.
.
dcb67338d
100644
-
-
-
a
/
config
/
python
.
gni
+
+
+
b
/
config
/
python
.
gni
-
67
8
+
67
8
template
(
"
python_library
"
)
{
#
associated
.
pydeps
file
.
In
other
words
:
#
#
-
This
is
very
similar
to
just
an
action
(
)
except
that
|
script
|
must
point
-
#
to
a
Python
script
(
e
.
g
.
"
/
/
build
/
.
.
.
/
foo
.
py
"
)
that
has
a
corresponding
-
#
.
pydeps
file
in
the
source
tree
(
e
.
g
.
"
/
/
build
/
.
.
.
/
foo
.
pydeps
"
)
.
+
#
to
a
Python
script
(
e
.
g
.
"
/
/
chromium
/
build
/
.
.
.
/
foo
.
py
"
)
that
has
a
corresponding
+
#
.
pydeps
file
in
the
source
tree
(
e
.
g
.
"
/
/
chromium
/
build
/
.
.
.
/
foo
.
pydeps
"
)
.
#
#
-
The
.
pydeps
file
contains
a
list
of
python
dependencies
(
imports
really
)
#
and
is
generated
_manually_
by
using
a
command
like
:
diff
-
-
git
a
/
config
/
rust
.
gni
b
/
config
/
rust
.
gni
index
f212b2a2b
.
.
8aa69fcf1
100644
-
-
-
a
/
config
/
rust
.
gni
+
+
+
b
/
config
/
rust
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
}
declare_args
(
)
{
-
141
7
+
141
7
if
(
enable_rust
)
{
#
and
the
host
stdlib
will
be
used
.
rust_abi_target
=
"
"
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
abi
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
abi
.
gni
"
)
rust_abi_target
=
android_abi_target
if
(
rust_abi_target
=
=
"
arm
-
linux
-
androideabi
"
)
{
#
Android
clang
target
specifications
mostly
match
Rust
but
this
diff
-
-
git
a
/
config
/
sanitizers
/
BUILD
.
gn
b
/
config
/
sanitizers
/
BUILD
.
gn
index
c348e31ef
.
.
b74f8b583
100644
-
-
-
a
/
config
/
sanitizers
/
BUILD
.
gn
+
+
+
b
/
config
/
sanitizers
/
BUILD
.
gn
-
2
15
+
2
15
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
}
#
Contains
the
dependencies
needed
for
sanitizers
to
link
into
executables
and
-
76
7
+
76
7
if
(
(
is_apple
|
|
is_win
)
&
&
is_asan
)
{
#
On
iOS
the
runtime
library
need
to
be
code
signed
(
adhoc
signature
)
#
starting
with
Xcode
8
so
use
an
action
instead
of
a
copy
on
iOS
.
action
(
"
copy_asan_runtime
"
)
{
-
script
=
"
/
/
build
/
config
/
ios
/
codesign
.
py
"
+
script
=
"
/
/
chromium
/
build
/
config
/
ios
/
codesign
.
py
"
sources
=
[
_clang_rt_dso_full_path
]
outputs
=
[
"
root_out_dir
/
"
+
get_path_info
(
sources
[
0
]
"
file
"
)
]
args
=
[
-
112
30
+
112
30
static_library
(
"
options_sources
"
)
{
"
:
deps
"
"
/
/
:
gn_visibility
"
]
-
sources
=
[
"
/
/
build
/
sanitizers
/
sanitizer_options
.
cc
"
]
+
sources
=
[
"
/
/
chromium
/
build
/
sanitizers
/
sanitizer_options
.
cc
"
]
#
Don
'
t
compile
this
target
with
any
sanitizer
code
.
It
can
be
called
from
#
the
sanitizer
runtimes
so
instrumenting
these
functions
could
cause
#
recursive
calls
into
the
runtime
if
there
is
an
error
.
-
configs
-
=
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
if
(
is_asan
)
{
if
(
!
defined
(
asan_suppressions_file
)
)
{
-
asan_suppressions_file
=
"
/
/
build
/
sanitizers
/
asan_suppressions
.
cc
"
+
asan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
asan_suppressions
.
cc
"
}
sources
+
=
[
asan_suppressions_file
]
}
if
(
is_lsan
)
{
if
(
!
defined
(
lsan_suppressions_file
)
)
{
-
lsan_suppressions_file
=
"
/
/
build
/
sanitizers
/
lsan_suppressions
.
cc
"
+
lsan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
lsan_suppressions
.
cc
"
}
sources
+
=
[
lsan_suppressions_file
]
}
if
(
is_tsan
)
{
if
(
!
defined
(
tsan_suppressions_file
)
)
{
-
tsan_suppressions_file
=
"
/
/
build
/
sanitizers
/
tsan_suppressions
.
cc
"
+
tsan_suppressions_file
=
"
/
/
chromium
/
build
/
sanitizers
/
tsan_suppressions
.
cc
"
}
sources
+
=
[
tsan_suppressions_file
]
}
-
591
7
+
591
7
config
(
"
not_fuzzed
"
)
{
#
optimize_for_fuzzing
(
-
O1
)
.
When
given
multiple
optimization
flags
clang
#
obeys
the
last
one
so
as
long
as
this
flag
comes
after
-
O1
it
should
work
.
#
Since
this
config
will
always
be
depended
on
after
-
#
"
/
/
build
/
config
/
compiler
:
default_optimization
"
(
which
adds
-
O1
when
+
#
"
/
/
chromium
/
build
/
config
/
compiler
:
default_optimization
"
(
which
adds
-
O1
when
#
optimize_for_fuzzing
is
true
)
-
O2
should
always
be
the
second
flag
.
Even
#
though
this
sounds
fragile
it
isn
'
t
a
big
deal
if
it
breaks
since
proto
#
fuzzers
will
still
work
they
will
just
be
slightly
slower
.
diff
-
-
git
a
/
config
/
sanitizers
/
sanitizers
.
gni
b
/
config
/
sanitizers
/
sanitizers
.
gni
index
ded87a567
.
.
2dc50feed
100644
-
-
-
a
/
config
/
sanitizers
/
sanitizers
.
gni
+
+
+
b
/
config
/
sanitizers
/
sanitizers
.
gni
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
profiling
/
profiling
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Compile
for
Address
Sanitizer
to
find
memory
bugs
.
-
268
21
+
268
21
not_fuzzed_remove_nonasan_configs
=
[
]
if
(
use_fuzzing_engine
)
{
#
Removing
coverage
should
always
just
work
.
-
not_fuzzed_remove_configs
+
=
[
"
/
/
build
/
config
/
coverage
:
default_coverage
"
]
+
not_fuzzed_remove_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
not_fuzzed_remove_nonasan_configs
+
=
-
[
"
/
/
build
/
config
/
coverage
:
default_coverage
"
]
+
[
"
/
/
chromium
/
build
/
config
/
coverage
:
default_coverage
"
]
if
(
!
is_msan
)
{
#
Allow
sanitizer
instrumentation
to
be
removed
if
we
are
not
using
MSan
#
since
binaries
cannot
be
partially
instrumented
with
MSan
.
not_fuzzed_remove_configs
+
=
-
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
#
Certain
parts
of
binaries
must
be
instrumented
with
ASan
if
the
rest
of
#
the
binary
is
.
For
these
only
remove
non
-
ASan
sanitizer
instrumentation
.
if
(
!
is_asan
)
{
not_fuzzed_remove_nonasan_configs
+
=
-
[
"
/
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
+
[
"
/
/
chromium
/
build
/
config
/
sanitizers
:
default_sanitizer_flags
"
]
assert
(
not_fuzzed_remove_nonasan_configs
=
=
not_fuzzed_remove_configs
)
}
diff
-
-
git
a
/
config
/
sysroot
.
gni
b
/
config
/
sysroot
.
gni
index
97be0da77
.
.
14f708869
100644
-
-
-
a
/
config
/
sysroot
.
gni
+
+
+
b
/
config
/
sysroot
.
gni
-
5
7
+
5
7
#
This
header
file
defines
the
"
sysroot
"
variable
which
is
the
absolute
path
#
of
the
sysroot
.
If
no
sysroot
applies
the
variable
will
be
an
empty
string
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
declare_args
(
)
{
#
The
path
of
the
sysroot
that
is
applied
when
compiling
using
the
target
-
13
7
+
13
7
declare_args
(
)
{
target_sysroot
=
"
"
#
The
path
to
directory
containing
linux
sysroot
images
.
-
target_sysroot_dir
=
"
/
/
build
/
linux
"
+
target_sysroot_dir
=
"
/
/
chromium
/
build
/
linux
"
#
The
path
of
the
sysroot
for
the
current
toolchain
.
If
empty
default
#
sysroot
is
used
.
-
31
7
+
31
7
if
(
sysroot
=
=
"
"
)
{
target_sysroot
!
=
"
"
)
{
sysroot
=
target_sysroot
}
else
if
(
is_android
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
#
Android
uses
unified
headers
and
thus
a
single
compile
time
sysroot
sysroot
=
"
android_toolchain_root
/
sysroot
"
-
62
16
+
62
16
if
(
sysroot
=
=
"
"
)
{
_script_arch
=
"
amd64
"
}
#
assert
(
-
#
exec_script
(
"
/
/
build
/
dir_exists
.
py
"
+
#
exec_script
(
"
/
/
chromium
/
build
/
dir_exists
.
py
"
#
[
rebase_path
(
sysroot
)
]
#
"
string
"
)
=
=
"
True
"
#
"
Missing
sysroot
(
sysroot
)
.
To
fix
run
:
build
/
linux
/
sysroot_scripts
/
install
-
sysroot
.
py
-
-
arch
=
_script_arch
"
)
}
}
else
if
(
is_mac
)
{
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
sysroot
=
mac_sdk_path
}
else
if
(
is_ios
)
{
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
sysroot
=
ios_sdk_path
}
else
if
(
is_fuchsia
)
{
if
(
current_cpu
=
=
"
arm64
"
|
|
current_cpu
=
=
"
x64
"
)
{
diff
-
-
git
a
/
config
/
ui
.
gni
b
/
config
/
ui
.
gni
index
b6c314f10
.
.
9ff6eeefe
100644
-
-
-
a
/
config
/
ui
.
gni
+
+
+
b
/
config
/
ui
.
gni
-
17
10
+
17
10
#
There
is
more
advice
on
where
to
put
build
flags
in
the
"
Build
flag
"
section
#
of
/
/
build
/
config
/
BUILDCONFIG
.
gn
.
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
args
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
args
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
declare_args
(
)
{
#
Indicates
if
Aura
is
enabled
.
Aura
is
a
low
-
level
windowing
library
sort
diff
-
-
git
a
/
config
/
v8_target_cpu
.
gni
b
/
config
/
v8_target_cpu
.
gni
index
305981f3f
.
.
36905ce0c
100644
-
-
-
a
/
config
/
v8_target_cpu
.
gni
+
+
+
b
/
config
/
v8_target_cpu
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
This
arg
is
used
when
we
want
to
tell
the
JIT
-
generating
v8
code
-
34
15
+
34
15
declare_args
(
)
{
}
if
(
v8_target_cpu
=
=
"
"
)
{
-
if
(
current_toolchain
=
=
"
/
/
build
/
toolchain
/
linux
:
clang_x64_v8_arm64
"
)
{
+
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x64_v8_arm64
"
)
{
v8_target_cpu
=
"
arm64
"
-
}
else
if
(
current_toolchain
=
=
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_arm
"
)
{
+
}
else
if
(
current_toolchain
=
=
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_arm
"
)
{
v8_target_cpu
=
"
arm
"
}
else
if
(
current_toolchain
=
=
-
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_mips64el
"
)
{
+
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_mips64el
"
)
{
v8_target_cpu
=
"
mips64el
"
}
else
if
(
current_toolchain
=
=
-
"
/
/
build
/
toolchain
/
linux
:
clang_x86_v8_mipsel
"
)
{
+
"
/
/
chromium
/
build
/
toolchain
/
linux
:
clang_x86_v8_mipsel
"
)
{
v8_target_cpu
=
"
mipsel
"
}
else
if
(
is_msan
)
{
#
If
we
'
re
running
under
a
sanitizer
if
we
configure
v8
to
generate
diff
-
-
git
a
/
config
/
win
/
BUILD
.
gn
b
/
config
/
win
/
BUILD
.
gn
index
8de911b26
.
.
29df64c97
100644
-
-
-
a
/
config
/
win
/
BUILD
.
gn
+
+
+
b
/
config
/
win
/
BUILD
.
gn
-
2
16
+
2
16
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
control_flow_guard
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
-
import
(
"
/
/
build
/
timestamp
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
control_flow_guard
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
timestamp
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
assert
(
is_win
)
-
118
7
+
118
7
config
(
"
compiler
"
)
{
cflags
+
=
[
"
-
msse3
"
]
}
-
if
(
exec_script
(
"
/
/
build
/
win
/
use_ansi_codes
.
py
"
[
]
"
trim
string
"
)
=
=
+
if
(
exec_script
(
"
/
/
chromium
/
build
/
win
/
use_ansi_codes
.
py
"
[
]
"
trim
string
"
)
=
=
"
True
"
)
{
cflags
+
=
[
#
cmd
.
exe
doesn
'
t
understand
ANSI
escape
codes
by
default
diff
-
-
git
a
/
config
/
win
/
console_app
.
gni
b
/
config
/
win
/
console_app
.
gni
index
cac2ef5d7
.
.
0f4ae0ef3
100644
-
-
-
a
/
config
/
win
/
console_app
.
gni
+
+
+
b
/
config
/
win
/
console_app
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
If
true
builds
as
a
console
app
(
rather
than
a
windowed
app
)
which
allows
diff
-
-
git
a
/
config
/
win
/
control_flow_guard
.
gni
b
/
config
/
win
/
control_flow_guard
.
gni
index
6b0c7627c
.
.
c44cd1438
100644
-
-
-
a
/
config
/
win
/
control_flow_guard
.
gni
+
+
+
b
/
config
/
win
/
control_flow_guard
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
declare_args
(
)
{
#
Set
this
to
true
to
enable
generation
of
CFG
indirect
call
dispatch
diff
-
-
git
a
/
config
/
win
/
manifest
.
gni
b
/
config
/
win
/
manifest
.
gni
index
e2115083f
.
.
76c823581
100644
-
-
-
a
/
config
/
win
/
manifest
.
gni
+
+
+
b
/
config
/
win
/
manifest
.
gni
-
26
26
+
26
26
#
Reference
this
manifest
as
a
source
from
windows_manifest
targets
to
get
#
the
default
Chrome
OS
compatibility
list
.
-
default_compatibility_manifest
=
"
/
/
build
/
win
/
compatibility
.
manifest
"
+
default_compatibility_manifest
=
"
/
/
chromium
/
build
/
win
/
compatibility
.
manifest
"
#
Reference
this
manifest
as
a
source
from
windows_manifest
targets
to
get
#
the
default
Chrome
common
constrols
compatibility
.
-
common_controls_manifest
=
"
/
/
build
/
win
/
common_controls
.
manifest
"
+
common_controls_manifest
=
"
/
/
chromium
/
build
/
win
/
common_controls
.
manifest
"
#
Reference
this
manifest
to
request
that
Windows
not
perform
any
elevation
#
when
running
your
program
.
Otherwise
it
might
do
some
autodetection
and
#
request
elevated
privileges
from
the
user
.
This
is
normally
what
you
want
.
-
as_invoker_manifest
=
"
/
/
build
/
win
/
as_invoker
.
manifest
"
+
as_invoker_manifest
=
"
/
/
chromium
/
build
/
win
/
as_invoker
.
manifest
"
#
An
alternative
to
as_invoker_manifest
when
you
want
the
application
to
always
#
elevate
.
-
require_administrator_manifest
=
"
/
/
build
/
win
/
require_administrator
.
manifest
"
+
require_administrator_manifest
=
"
/
/
chromium
/
build
/
win
/
require_administrator
.
manifest
"
#
Request
the
segment
heap
.
See
https
:
/
/
crbug
.
com
/
1014701
for
details
.
declare_args
(
)
{
enable_segment_heap
=
false
}
-
segment_heap_manifest
=
"
/
/
build
/
win
/
segment_heap
.
manifest
"
+
segment_heap_manifest
=
"
/
/
chromium
/
build
/
win
/
segment_heap
.
manifest
"
#
Construct
a
target
to
combine
the
given
manifest
files
into
a
.
rc
file
.
#
diff
-
-
git
a
/
config
/
zip
.
gni
b
/
config
/
zip
.
gni
index
68bc49444
.
.
efd70eeaa
100644
-
-
-
a
/
config
/
zip
.
gni
+
+
+
b
/
config
/
zip
.
gni
-
27
7
+
27
7
template
(
"
zip
"
)
{
"
testonly
"
"
visibility
"
]
)
-
script
=
"
/
/
build
/
android
/
gyp
/
zip
.
py
"
+
script
=
"
/
/
chromium
/
build
/
android
/
gyp
/
zip
.
py
"
inputs
=
invoker
.
inputs
outputs
=
[
invoker
.
output
]
diff
-
-
git
a
/
config
/
zos
/
BUILD
.
gn
b
/
config
/
zos
/
BUILD
.
gn
index
72bf1257f
.
.
9783844b9
100644
-
-
-
a
/
config
/
zos
/
BUILD
.
gn
+
+
+
b
/
config
/
zos
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
This
is
included
by
reference
in
the
/
/
build
/
config
/
compiler
config
that
#
is
applied
to
all
targets
.
It
is
here
to
separate
out
the
logic
.
diff
-
-
git
a
/
dotfile_settings
.
gni
b
/
dotfile_settings
.
gni
index
cd9991adc
.
.
bba706ce0
100644
-
-
-
a
/
dotfile_settings
.
gni
+
+
+
b
/
dotfile_settings
.
gni
-
7
37
+
7
37
build_dotfile_settings
=
{
exec_script_whitelist
=
[
-
"
/
/
build
/
config
/
android
/
config
.
gni
"
-
"
/
/
build
/
config
/
android
/
internal_rules
.
gni
"
-
"
/
/
build
/
config
/
android
/
rules
.
gni
"
-
"
/
/
build
/
config
/
chromeos
/
rules
.
gni
"
-
"
/
/
build
/
config
/
compiler
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
compiler
/
pgo
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
gcc
/
gcc_version
.
gni
"
-
"
/
/
build
/
config
/
host_byteorder
.
gni
"
-
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
-
"
/
/
build
/
config
/
ios
/
rules
.
gni
"
-
"
/
/
build
/
config
/
linux
/
atk
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
atspi2
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
dri
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
-
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
-
"
/
/
build
/
config
/
mac
/
rules
.
gni
"
-
"
/
/
build
/
config
/
posix
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
sysroot
.
gni
"
-
"
/
/
build
/
config
/
win
/
BUILD
.
gn
"
-
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
-
"
/
/
build
/
timestamp
.
gni
"
-
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
-
"
/
/
build
/
toolchain
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
-
"
/
/
build
/
toolchain
/
goma
.
gni
"
-
"
/
/
build
/
toolchain
/
nacl
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
-
"
/
/
build
/
toolchain
/
win
/
BUILD
.
gn
"
-
"
/
/
build
/
toolchain
/
zos
/
BUILD
.
gn
"
-
"
/
/
build
/
util
/
branding
.
gni
"
-
"
/
/
build
/
util
/
version
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
android
/
internal_rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
android
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
chromeos
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
compiler
/
pgo
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
gcc
/
gcc_version
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
host_byteorder
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
ios
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
atk
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
atspi2
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
dri
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
mac
/
rules
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
posix
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
+
"
/
/
chromium
/
build
/
config
/
win
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
+
"
/
/
chromium
/
build
/
timestamp
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
nacl
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
+
"
/
/
chromium
/
build
/
toolchain
/
win
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
toolchain
/
zos
/
BUILD
.
gn
"
+
"
/
/
chromium
/
build
/
util
/
branding
.
gni
"
+
"
/
/
chromium
/
build
/
util
/
version
.
gni
"
]
}
diff
-
-
git
a
/
fuchsia
/
DIR_METADATA
b
/
fuchsia
/
DIR_METADATA
index
05b12cfca
.
.
1607d55dd
100644
-
-
-
a
/
fuchsia
/
DIR_METADATA
+
+
+
b
/
fuchsia
/
DIR_METADATA
-
1
2
+
1
2
-
mixins
:
"
/
/
build
/
fuchsia
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
fuchsia
/
COMMON_METADATA
"
diff
-
-
git
a
/
gn_logs
.
gni
b
/
gn_logs
.
gni
index
79a92b9d4
.
.
5c50a1a49
100644
-
-
-
a
/
gn_logs
.
gni
+
+
+
b
/
gn_logs
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
#
Log
lines
for
gn_logs
.
txt
that
originate
from
within
/
/
build
.
build_gn_logs
=
[
"
#
#
#
#
get_concurrent_links
.
py
#
#
#
#
"
]
+
concurrent_links_logs
diff
-
-
git
a
/
ios
/
intent_definition
.
gni
b
/
ios
/
intent_definition
.
gni
index
259f287fc
.
.
604013537
100644
-
-
-
a
/
ios
/
intent_definition
.
gni
+
+
+
b
/
ios
/
intent_definition
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
#
Template
to
compile
an
.
intentdefinition
file
.
#
-
34
7
+
34
7
template
(
"
intent_definition
"
)
{
"
target_gen_dir
/
"
+
get_path_info
(
invoker
.
intent_file
"
file
"
)
action
(
_compile_intent_target
)
{
-
script
=
"
/
/
build
/
apple
/
xcrun
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
xcrun
.
py
"
inputs
=
[
invoker
.
intent_file
]
outputs
=
[
_compile_intent_output
]
args
=
[
-
71
7
+
71
7
template
(
"
intent_definition
"
)
{
}
action
(
_generate_source_target
)
{
-
script
=
"
/
/
build
/
apple
/
xcrun
.
py
"
+
script
=
"
/
/
chromium
/
build
/
apple
/
xcrun
.
py
"
inputs
=
[
invoker
.
intent_file
]
outputs
=
_generate_source_output
args
=
[
-
111
7
+
111
7
template
(
"
intent_definition
"
)
{
}
sources
=
_generate_source_output
-
configs
+
=
[
"
/
/
build
/
config
/
compiler
:
enable_arc
"
]
+
configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
enable_arc
"
]
deps
+
=
[
"
:
_compile_intent_bundle
"
"
:
_generate_source_target
"
diff
-
-
git
a
/
lacros
/
BUILD
.
gn
b
/
lacros
/
BUILD
.
gn
index
09777f3dd
.
.
eeac1e9b4
100644
-
-
-
a
/
lacros
/
BUILD
.
gn
+
+
+
b
/
lacros
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
util
/
process_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
process_version
.
gni
"
)
python_library
(
"
lacros_resource_sizes_py
"
)
{
pydeps_file
=
"
lacros_resource_sizes
.
pydeps
"
diff
-
-
git
a
/
lacros
/
lacros_resource_sizes
.
gni
b
/
lacros
/
lacros_resource_sizes
.
gni
index
0c50e0fe3
.
.
b66e04252
100644
-
-
-
a
/
lacros
/
lacros_resource_sizes
.
gni
+
+
+
b
/
lacros
/
lacros_resource_sizes
.
gni
-
2
17
+
2
17
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
generate_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
gni
"
)
#
Generates
a
script
in
the
bin
directory
that
runs
#
/
/
build
/
lacros
/
lacros_resource_sizes
.
py
for
the
provided
configuration
.
template
(
"
lacros_resource_sizes_test
"
)
{
generate_wrapper
(
target_name
)
{
forward_variables_from
(
invoker
[
"
data_deps
"
]
)
-
executable
=
"
/
/
build
/
lacros
/
lacros_resource_sizes
.
py
"
+
executable
=
"
/
/
chromium
/
build
/
lacros
/
lacros_resource_sizes
.
py
"
wrapper_script
=
"
root_out_dir
/
bin
/
run_
{
target_name
}
"
-
deps
=
[
"
/
/
build
/
lacros
:
lacros_resource_sizes_py
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
lacros
:
lacros_resource_sizes_py
"
]
executable_args
=
[
"
-
-
chromium
-
output
-
directory
"
"
WrappedPath
(
.
)
"
diff
-
-
git
a
/
linux
/
BUILD
.
gn
b
/
linux
/
BUILD
.
gn
index
cd49e3d52
.
.
4cf7fee09
100644
-
-
-
a
/
linux
/
BUILD
.
gn
+
+
+
b
/
linux
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
features
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
features
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
freetype
/
freetype
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
if
(
use_gio
)
{
pkg_config
(
"
gio_config
"
)
{
-
23
7
+
23
7
if
(
use_system_freetype
)
{
#
the
system
use
with
caution
for
details
see
build
/
config
/
freetype
/
BUILD
.
gn
.
pkg_config
(
"
freetype_from_pkgconfig
"
)
{
visibility
=
[
-
"
/
/
build
/
config
/
freetype
:
freetype
"
+
"
/
/
chromium
/
build
/
config
/
freetype
:
freetype
"
"
/
/
third_party
:
freetype_harfbuzz
"
"
/
/
third_party
/
harfbuzz
-
ng
:
harfbuzz_source
"
]
diff
-
-
git
a
/
linux
/
extract_symbols
.
gni
b
/
linux
/
extract_symbols
.
gni
index
52cb1b50d
.
.
3dc7fa005
100644
-
-
-
a
/
linux
/
extract_symbols
.
gni
+
+
+
b
/
linux
/
extract_symbols
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Extracts
symbols
from
a
binary
into
a
symbol
file
using
dump_app_syms
.
py
.
#
-
22
8
+
22
8
template
(
"
extract_symbols
"
)
{
dump_syms_binary
=
get_label_info
(
dump_syms_label
"
root_out_dir
"
)
+
"
/
"
+
"
dump_syms
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
-
script
=
"
/
/
build
/
linux
/
dump_app_syms
.
py
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
script
=
"
/
/
chromium
/
build
/
linux
/
dump_app_syms
.
py
"
inputs
=
[
invoker
.
binary
dump_syms_binary
diff
-
-
git
a
/
linux
/
strip_binary
.
gni
b
/
linux
/
strip_binary
.
gni
index
2decba884
.
.
57e3df138
100644
-
-
-
a
/
linux
/
strip_binary
.
gni
+
+
+
b
/
linux
/
strip_binary
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Extracts
symbols
from
a
binary
into
a
symbol
file
.
#
-
21
7
+
21
7
template
(
"
strip_binary
"
)
{
]
)
action
(
"
{
target_name
}
"
)
{
eu_strip_binary
=
"
/
/
buildtools
/
third_party
/
eu
-
strip
/
bin
/
eu
-
strip
"
-
script
=
"
/
/
build
/
linux
/
strip_binary
.
py
"
+
script
=
"
/
/
chromium
/
build
/
linux
/
strip_binary
.
py
"
if
(
defined
(
invoker
.
stripped_binary_output
)
)
{
stripped_binary_output
=
invoker
.
stripped_binary_output
diff
-
-
git
a
/
linux
/
unbundle
/
ffmpeg
.
gn
b
/
linux
/
unbundle
/
ffmpeg
.
gn
index
16e207447
.
.
cbb35a883
100644
-
-
-
a
/
linux
/
unbundle
/
ffmpeg
.
gn
+
+
+
b
/
linux
/
unbundle
/
ffmpeg
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
buildflag_header
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
buildflag_header
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_ffmpeg
"
)
{
packages
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
flac
.
gn
b
/
linux
/
unbundle
/
flac
.
gn
index
ced81d655
.
.
76b9fe73e
100644
-
-
-
a
/
linux
/
unbundle
/
flac
.
gn
+
+
+
b
/
linux
/
unbundle
/
flac
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_flac
"
)
{
packages
=
[
"
flac
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
icu
.
gn
b
/
linux
/
unbundle
/
icu
.
gn
index
6f3f8438b
.
.
0937caf4c
100644
-
-
-
a
/
linux
/
unbundle
/
icu
.
gn
+
+
+
b
/
linux
/
unbundle
/
icu
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
group
(
"
icu
"
)
{
public_deps
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
libdrm
.
gn
b
/
linux
/
unbundle
/
libdrm
.
gn
index
30cdcef3e
.
.
a0fbe6eb3
100644
-
-
-
a
/
linux
/
unbundle
/
libdrm
.
gn
+
+
+
b
/
linux
/
unbundle
/
libdrm
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libdrm
"
)
{
packages
=
[
"
libdrm
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libevent
.
gn
b
/
linux
/
unbundle
/
libevent
.
gn
index
7e1c34d33
.
.
b8ced90a4
100644
-
-
-
a
/
linux
/
unbundle
/
libevent
.
gn
+
+
+
b
/
linux
/
unbundle
/
libevent
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
libevent_shim
"
)
{
root_path
=
"
.
"
diff
-
-
git
a
/
linux
/
unbundle
/
libpng
.
gn
b
/
linux
/
unbundle
/
libpng
.
gn
index
1d6590dca
.
.
d00e38418
100644
-
-
-
a
/
linux
/
unbundle
/
libpng
.
gn
+
+
+
b
/
linux
/
unbundle
/
libpng
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
libpng_config
"
)
{
packages
=
[
"
libpng
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libvpx
.
gn
b
/
linux
/
unbundle
/
libvpx
.
gn
index
87be30d17
.
.
f6f47fb16
100644
-
-
-
a
/
linux
/
unbundle
/
libvpx
.
gn
+
+
+
b
/
linux
/
unbundle
/
libvpx
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libvpx
"
)
{
packages
=
[
"
vpx
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libwebp
.
gn
b
/
linux
/
unbundle
/
libwebp
.
gn
index
de0c23031
.
.
5ca69cd9e
100644
-
-
-
a
/
linux
/
unbundle
/
libwebp
.
gn
+
+
+
b
/
linux
/
unbundle
/
libwebp
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
system_libwebp
"
)
{
packages
=
[
diff
-
-
git
a
/
linux
/
unbundle
/
libxml
.
gn
b
/
linux
/
unbundle
/
libxml
.
gn
index
243b62984
.
.
9198738a3
100644
-
-
-
a
/
linux
/
unbundle
/
libxml
.
gn
+
+
+
b
/
linux
/
unbundle
/
libxml
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
pkg_config
(
"
system_libxml
"
)
{
packages
=
[
"
libxml
-
2
.
0
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
libxslt
.
gn
b
/
linux
/
unbundle
/
libxslt
.
gn
index
885574ef8
.
.
e07ba656c
100644
-
-
-
a
/
linux
/
unbundle
/
libxslt
.
gn
+
+
+
b
/
linux
/
unbundle
/
libxslt
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
pkg_config
(
"
system_libxslt
"
)
{
packages
=
[
"
libxslt
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
openh264
.
gn
b
/
linux
/
unbundle
/
openh264
.
gn
index
882e0a822
.
.
b12a08920
100644
-
-
-
a
/
linux
/
unbundle
/
openh264
.
gn
+
+
+
b
/
linux
/
unbundle
/
openh264
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
config
"
)
{
packages
=
[
"
openh264
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
opus
.
gn
b
/
linux
/
unbundle
/
opus
.
gn
index
504d7d27f
.
.
3cafd4a4e
100644
-
-
-
a
/
linux
/
unbundle
/
opus
.
gn
+
+
+
b
/
linux
/
unbundle
/
opus
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
linux
/
pkg_config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
pkg_config
(
"
opus_config
"
)
{
packages
=
[
"
opus
"
]
diff
-
-
git
a
/
linux
/
unbundle
/
re2
.
gn
b
/
linux
/
unbundle
/
re2
.
gn
index
824d77881
.
.
0e15a8e68
100644
-
-
-
a
/
linux
/
unbundle
/
re2
.
gn
+
+
+
b
/
linux
/
unbundle
/
re2
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
assert
(
!
use_custom_libcxx
"
Usage
of
the
system
libre2
.
so
is
not
supported
with
"
+
diff
-
-
git
a
/
linux
/
unbundle
/
snappy
.
gn
b
/
linux
/
unbundle
/
snappy
.
gn
index
966666f80
.
.
a25cbc364
100644
-
-
-
a
/
linux
/
unbundle
/
snappy
.
gn
+
+
+
b
/
linux
/
unbundle
/
snappy
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
snappy_shim
"
)
{
root_path
=
"
src
"
diff
-
-
git
a
/
linux
/
unbundle
/
zlib
.
gn
b
/
linux
/
unbundle
/
zlib
.
gn
index
97d6aebe6
.
.
427f273a5
100644
-
-
-
a
/
linux
/
unbundle
/
zlib
.
gn
+
+
+
b
/
linux
/
unbundle
/
zlib
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
shim_headers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
shim_headers
.
gni
"
)
shim_headers
(
"
zlib_shim
"
)
{
root_path
=
"
.
"
diff
-
-
git
a
/
nocompile
.
gni
b
/
nocompile
.
gni
index
db937ed5c
.
.
6c0737ee1
100644
-
-
-
a
/
nocompile
.
gni
+
+
+
b
/
nocompile
.
gni
-
11
7
+
11
7
#
#
To
use
this
create
a
gyp
target
with
the
following
form
:
#
-
#
import
(
"
/
/
build
/
nocompile
.
gni
"
)
+
#
import
(
"
/
/
chromium
/
build
/
nocompile
.
gni
"
)
#
nocompile_test
(
"
my_module_nc_unittests
"
)
{
#
sources
=
[
#
'
nc_testset_1
.
nc
'
-
58
9
+
58
9
#
something
goes
wrong
and
know
during
the
unittest
run
that
the
test
was
at
#
least
processed
when
things
go
right
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
python
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
python
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
import
(
"
/
/
testing
/
test
.
gni
"
)
declare_args
(
)
{
-
70
8
+
70
8
declare_args
(
)
{
}
if
(
enable_nocompile_tests
)
{
-
import
(
"
/
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
c
+
+
/
c
+
+
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
template
(
"
nocompile_test
"
)
{
nocompile_target
=
target_name
+
"
_run_nocompile
"
diff
-
-
git
a
/
partitioned_shared_library
.
gni
b
/
partitioned_shared_library
.
gni
index
094f60f1d
.
.
5c46a7f1b
100644
-
-
-
a
/
partitioned_shared_library
.
gni
+
+
+
b
/
partitioned_shared_library
.
gni
-
3
9
+
3
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
#
This
template
creates
a
set
of
shared
libraries
by
linking
a
single
#
"
partitioned
"
shared
library
then
splitting
it
into
multiple
pieces
.
-
74
7
+
74
7
template
(
"
partitioned_shared_library
"
)
{
template
(
"
partition_action
"
)
{
action
(
target_name
)
{
deps
=
[
"
:
_combined_library_target
"
]
-
script
=
"
/
/
build
/
extract_partition
.
py
"
+
script
=
"
/
/
chromium
/
build
/
extract_partition
.
py
"
sources
=
[
"
root_out_dir
/
lib
.
unstripped
/
lib
{
_output_name
}
__combined
.
so
"
]
outputs
=
[
diff
-
-
git
a
/
rust
/
BUILD
.
gn
b
/
rust
/
BUILD
.
gn
index
c7a951a14
.
.
ba81b4f8c
100644
-
-
-
a
/
rust
/
BUILD
.
gn
+
+
+
b
/
rust
/
BUILD
.
gn
-
37
7
+
37
7
source_set
(
"
cxx_cppdeps
"
)
{
#
the
Rust
stdlib
explicitly
.
deps
=
[
"
:
cxx_rustdeps
"
-
"
/
/
build
/
rust
/
std
"
+
"
/
/
chromium
/
build
/
rust
/
std
"
]
public_configs
=
[
"
:
cxx_cppconfig
"
]
}
diff
-
-
git
a
/
rust
/
cargo_crate
.
gni
b
/
rust
/
cargo_crate
.
gni
index
e7a76ed85
.
.
6ac267237
100644
-
-
-
a
/
rust
/
cargo_crate
.
gni
+
+
+
b
/
rust
/
cargo_crate
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
This
template
allows
for
building
Cargo
crates
within
gn
.
#
-
168
7
+
168
7
template
(
"
cargo_crate
"
)
{
if
(
defined
(
invoker
.
build_root
)
)
{
#
Extra
targets
required
to
make
build
script
work
action
(
"
{
build_script_name
}
_output
"
)
{
-
script
=
rebase_path
(
"
/
/
build
/
rust
/
run_build_script
.
py
"
)
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
run_build_script
.
py
"
)
build_script_target
=
"
:
{
build_script_name
}
(
host_toolchain
)
"
deps
=
[
build_script_target
]
flags_file
=
"
target_out_dir
/
{
orig_target_name
}
_cargo_flags
.
rs
"
-
233
8
+
233
8
template
(
"
cargo_crate
"
)
{
"
edition
"
"
rustflags
"
]
)
-
executable_configs
-
=
[
"
/
/
build
/
config
/
compiler
:
chromium_code
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
}
}
else
{
not_needed
(
invoker
-
251
9
+
251
9
template
(
"
cargo_crate
"
)
{
set_defaults
(
"
cargo_crate
"
)
{
library_configs
=
default_compiler_configs
-
library_configs
-
=
[
"
/
/
build
/
config
/
compiler
:
chromium_code
"
]
-
library_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
library_configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
]
+
library_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
executable_configs
=
default_executable_configs
-
executable_configs
-
=
[
"
/
/
build
/
config
/
compiler
:
chromium_code
"
]
-
executable_configs
+
=
[
"
/
/
build
/
config
/
compiler
:
no_chromium_code
"
]
+
executable_configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
chromium_code
"
]
+
executable_configs
+
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
no_chromium_code
"
]
}
diff
-
-
git
a
/
rust
/
mixed_component
.
gni
b
/
rust
/
mixed_component
.
gni
index
0dced9a52
.
.
e75eb10c9
100644
-
-
-
a
/
rust
/
mixed_component
.
gni
+
+
+
b
/
rust
/
mixed_component
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
mixed_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_target
.
gni
"
)
#
Defines
a
component
containing
both
Rust
and
C
+
+
code
.
#
See
mixed_target
.
gni
for
documentation
.
-
29
5
+
29
5
set_defaults
(
"
mixed_component
"
)
{
configs
=
default_component_configs
#
TODO
(
crbug
.
com
/
1292951
)
:
Remove
this
line
.
-
configs
-
=
[
"
/
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
+
configs
-
=
[
"
/
/
chromium
/
build
/
config
/
compiler
:
prevent_unsafe_narrowing
"
]
}
diff
-
-
git
a
/
rust
/
mixed_executable
.
gni
b
/
rust
/
mixed_executable
.
gni
index
ced6426e7
.
.
1b81226b5
100644
-
-
-
a
/
rust
/
mixed_executable
.
gni
+
+
+
b
/
rust
/
mixed_executable
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
mixed_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_target
.
gni
"
)
#
Defines
an
executable
containing
both
Rust
and
C
+
+
code
.
#
See
mixed_target
.
gni
for
documentation
.
diff
-
-
git
a
/
rust
/
mixed_shared_library
.
gni
b
/
rust
/
mixed_shared_library
.
gni
index
5437fc06e
.
.
d2462b112
100644
-
-
-
a
/
rust
/
mixed_shared_library
.
gni
+
+
+
b
/
rust
/
mixed_shared_library
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
mixed_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_target
.
gni
"
)
#
Defines
a
shared_library
containing
both
Rust
and
C
+
+
code
.
#
See
mixed_target
.
gni
for
documentation
.
diff
-
-
git
a
/
rust
/
mixed_static_library
.
gni
b
/
rust
/
mixed_static_library
.
gni
index
f30ff7bf3
.
.
eceedc07d
100644
-
-
-
a
/
rust
/
mixed_static_library
.
gni
+
+
+
b
/
rust
/
mixed_static_library
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
mixed_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_target
.
gni
"
)
#
Defines
a
static_library
containing
both
Rust
and
C
+
+
code
.
See
#
mixed_target
.
gni
for
documentation
.
diff
-
-
git
a
/
rust
/
mixed_target
.
gni
b
/
rust
/
mixed_target
.
gni
index
8f7ad1c3d
.
.
918ef2e84
100644
-
-
-
a
/
rust
/
mixed_target
.
gni
+
+
+
b
/
rust
/
mixed_target
.
gni
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_cxx
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_cxx
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
target
containing
both
Rust
and
C
+
+
code
with
bidirectional
calls
.
#
It
'
s
rare
to
use
this
target
directly
-
instead
please
use
-
151
7
+
151
7
template
(
"
mixed_target
"
)
{
if
(
!
defined
(
deps
)
)
{
deps
=
[
]
}
-
deps
+
=
[
"
/
/
build
/
rust
:
cxx_rustdeps
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
:
cxx_rustdeps
"
]
}
}
}
else
{
-
183
7
+
183
7
template
(
"
mixed_target
"
)
{
#
Also
depend
on
the
cxx
'
standard
library
'
#
i
.
e
.
utilities
which
any
user
of
cxx
needs
to
#
have
.
-
"
/
/
build
/
rust
:
cxx_cppdeps
"
+
"
/
/
chromium
/
build
/
rust
:
cxx_cppdeps
"
]
if
(
!
defined
(
sources
)
)
{
sources
=
[
]
diff
-
-
git
a
/
rust
/
rust_cxx
.
gni
b
/
rust
/
rust_cxx
.
gni
index
bdd961b0f
.
.
2524b1ab5
100644
-
-
-
a
/
rust
/
rust_cxx
.
gni
+
+
+
b
/
rust
/
rust_cxx
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
set_defaults
(
"
rust_cxx
"
)
{
native_header_deps
=
[
]
-
106
7
+
106
7
template
(
"
rust_cxx
"
)
{
cxxbridge_executable
=
"
{
cxxbridge_executable
}
.
exe
"
}
-
script
=
"
/
/
build
/
rust
/
run_cxxbridge
.
py
"
+
script
=
"
/
/
chromium
/
build
/
rust
/
run_cxxbridge
.
py
"
inputs
=
[
cxxbridge_executable
script
-
151
13
+
151
13
template
(
"
rust_cxx
"
)
{
#
Anyone
building
the
header
files
we
generate
needs
to
have
#
RUST_CXX_NO_EXCEPTIONS
defined
so
that
they
build
without
exception
#
support
.
-
public_configs
=
[
"
/
/
build
/
rust
:
cxx_cppconfig
"
]
+
public_configs
=
[
"
/
/
chromium
/
build
/
rust
:
cxx_cppconfig
"
]
}
if
(
!
defined
(
invoker
.
generate_source_set
)
|
|
invoker
.
generate_source_set
)
{
source_set
(
target_name
)
{
sources
=
get_target_outputs
(
"
:
{
target_name
}
_gen
"
)
-
deps
=
[
"
/
/
build
/
rust
:
cxx_cppdeps
"
]
+
deps
=
[
"
/
/
chromium
/
build
/
rust
:
cxx_cppdeps
"
]
deps
+
=
invoker
.
native_header_deps
public_deps
=
[
"
:
{
target_name
}
_gen
"
]
}
diff
-
-
git
a
/
rust
/
rust_executable
.
gni
b
/
rust
/
rust_executable
.
gni
index
6c5973bbe
.
.
8095d5afb
100644
-
-
-
a
/
rust
/
rust_executable
.
gni
+
+
+
b
/
rust
/
rust_executable
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
Rust
executable
.
#
diff
-
-
git
a
/
rust
/
rust_macro
.
gni
b
/
rust
/
rust_macro
.
gni
index
f95106845
.
.
6f728319d
100644
-
-
-
a
/
rust
/
rust_macro
.
gni
+
+
+
b
/
rust
/
rust_macro
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Template
for
generating
a
Rust
proc
-
macro
library
.
Such
targets
produce
a
#
dynamic
library
that
is
loaded
during
compilation
and
used
to
generate
Rust
diff
-
-
git
a
/
rust
/
rust_shared_library
.
gni
b
/
rust
/
rust_shared_library
.
gni
index
fb35e366c
.
.
70f540028
100644
-
-
-
a
/
rust
/
rust_shared_library
.
gni
+
+
+
b
/
rust
/
rust_shared_library
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
shared_library
containing
just
Rust
code
.
Has
the
same
variables
#
available
as
a
rust_static_library
.
See
rust_static_library
.
gni
for
diff
-
-
git
a
/
rust
/
rust_static_library
.
gni
b
/
rust
/
rust_static_library
.
gni
index
a2d756fcf
.
.
ea365dee4
100644
-
-
-
a
/
rust
/
rust_static_library
.
gni
+
+
+
b
/
rust
/
rust_static_library
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_target
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_target
.
gni
"
)
#
Defines
a
Rust
static
library
which
can
be
used
by
downstream
Rust
or
C
+
+
#
targets
.
This
is
a
single
Rust
compilation
unit
consisting
of
potentially
diff
-
-
git
a
/
rust
/
rust_target
.
gni
b
/
rust
/
rust_target
.
gni
index
385bca9fe
.
.
bfcb3b985
100644
-
-
-
a
/
rust
/
rust_target
.
gni
+
+
+
b
/
rust
/
rust_target
.
gni
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_cxx
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_cxx
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_test
.
gni
"
)
#
Creates
a
Rust
target
(
rlib
executable
proc
macro
etc
.
)
with
#
ability
to
understand
some
handy
variables
such
as
"
edition
"
and
-
63
7
+
63
7
template
(
"
rust_target
"
)
{
}
_configs
=
[
string_join
(
"
"
[
-
"
/
/
build
/
rust
:
edition_
"
+
"
/
/
chromium
/
build
/
rust
:
edition_
"
_edition
]
)
]
if
(
invoker
.
target_type
=
=
"
executable
"
)
{
-
105
7
+
105
7
template
(
"
rust_target
"
)
{
if
(
defined
(
invoker
.
cxx_bindings
)
)
{
_deps_for_rust_targets
+
=
[
"
:
{
_target_name
}
_cxx
"
-
"
/
/
build
/
rust
:
cxx_rustdeps
"
+
"
/
/
chromium
/
build
/
rust
:
cxx_rustdeps
"
]
_cxx_bindings
=
invoker
.
cxx_bindings
}
-
155
7
+
155
7
template
(
"
rust_target
"
)
{
#
also
depend
on
the
Rust
standard
library
to
ensure
it
'
s
linked
into
#
the
final
binary
by
the
C
+
+
linker
.
This
isn
'
t
needed
for
a
#
shared_library
as
rustc
will
link
the
stdlib
into
it
already
.
-
"
/
/
build
/
rust
/
std
"
+
"
/
/
chromium
/
build
/
rust
/
std
"
]
}
if
(
defined
(
invoker
.
mutually_dependent_target
)
)
{
-
210
7
+
210
7
template
(
"
rust_target
"
)
{
configs
=
_configs
deps
=
_deps
if
(
defined
(
_cxx_bindings
)
)
{
-
deps
+
=
[
"
/
/
build
/
rust
:
cxx_rustdeps
"
]
+
deps
+
=
[
"
/
/
chromium
/
build
/
rust
:
cxx_rustdeps
"
]
}
rustflags
=
_rustflags
rustflags
+
=
[
string_join
(
"
"
diff
-
-
git
a
/
rust
/
rust_unit_test
.
gni
b
/
rust
/
rust_unit_test
.
gni
index
53ee453b4
.
.
6864436f7
100644
-
-
-
a
/
rust
/
rust_unit_test
.
gni
+
+
+
b
/
rust
/
rust_unit_test
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
#
Defines
a
Rust
unit
test
.
#
-
63
7
+
63
7
template
(
"
rust_unit_test
"
)
{
}
_configs
+
=
[
string_join
(
"
"
[
-
"
/
/
build
/
rust
:
edition_
"
+
"
/
/
chromium
/
build
/
rust
:
edition_
"
_edition
]
)
]
diff
-
-
git
a
/
rust
/
std
/
BUILD
.
gn
b
/
rust
/
std
/
BUILD
.
gn
index
d896cba16
.
.
0167de314
100644
-
-
-
a
/
rust
/
std
/
BUILD
.
gn
+
+
+
b
/
rust
/
std
/
BUILD
.
gn
-
26
8
+
26
8
#
https
:
/
/
github
.
com
/
rust
-
lang
/
rust
/
issues
/
64191
aims
to
make
this
#
officially
possible
.
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
#
List
of
Rust
stdlib
rlibs
which
are
present
in
the
official
#
Rust
toolchain
we
are
using
from
the
Android
team
.
This
is
usually
diff
-
-
git
a
/
rust
/
tests
/
BUILD
.
gn
b
/
rust
/
tests
/
BUILD
.
gn
index
b2986332d
.
.
f0019ddab
100644
-
-
-
a
/
rust
/
tests
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_tests_group
.
gni
"
)
group
(
"
tests
"
)
{
#
Build
some
minimal
binaries
to
exercise
the
Rust
toolchain
diff
-
-
git
a
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
index
0fc83b50f
.
.
b7a7178f7
100644
-
-
-
a
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_bin_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_bin_crate
"
)
{
crate_type
=
"
bin
"
diff
-
-
git
a
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
b
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
index
c34dbb6f6
.
.
aeb1118b3
100644
-
-
-
a
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_cpp_including_rust
/
BUILD
.
gn
-
8
8
+
8
8
import
(
"
/
/
testing
/
test
.
gni
"
)
executable
(
"
test_cpp_including_rust
"
)
{
sources
=
[
"
main
.
cc
"
]
deps
=
[
-
"
/
/
build
/
rust
/
tests
/
test_mixed_static_library
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_cpp_bindings
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_mixed_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_cpp_bindings
"
]
}
-
19
8
+
19
8
test
(
"
test_cpp_including_rust_unittests
"
)
{
"
/
/
base
"
"
/
/
base
/
allocator
:
buildflags
"
"
/
/
base
/
test
:
run_all_unittests
"
-
"
/
/
build
/
rust
/
tests
/
test_mixed_static_library
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_cpp_bindings
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_mixed_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
:
test_rust_static_library_cpp_bindings
"
"
/
/
testing
/
gmock
"
"
/
/
testing
/
gtest
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_mixed_component
/
BUILD
.
gn
b
/
rust
/
tests
/
test_mixed_component
/
BUILD
.
gn
index
4e0d1bf59
.
.
9410445a3
100644
-
-
-
a
/
rust
/
tests
/
test_mixed_component
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_mixed_component
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_component
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_component
.
gni
"
)
mixed_component
(
"
test_mixed_component
"
)
{
sources
=
[
diff
-
-
git
a
/
rust
/
tests
/
test_mixed_executable
/
BUILD
.
gn
b
/
rust
/
tests
/
test_mixed_executable
/
BUILD
.
gn
index
a55587bef
.
.
d21040dac
100644
-
-
-
a
/
rust
/
tests
/
test_mixed_executable
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_mixed_executable
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_executable
.
gni
"
)
mixed_executable
(
"
test_mixed_executable
"
)
{
sources
=
[
"
main
.
cc
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_mixed_shared_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_mixed_shared_library
/
BUILD
.
gn
index
3666b75cc
.
.
cb4578cf9
100644
-
-
-
a
/
rust
/
tests
/
test_mixed_shared_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_mixed_shared_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_shared_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_shared_library
.
gni
"
)
if
(
rustc_can_link
)
{
mixed_shared_library
(
"
test_mixed_shared_library
"
)
{
-
13
12
+
13
12
if
(
rustc_can_link
)
{
rs_sources
=
[
"
src
/
lib
.
rs
"
]
rs_cxx_bindings
=
[
"
src
/
lib
.
rs
"
]
rs_visibility
=
[
-
"
/
/
build
/
rust
/
tests
/
test_rust_unittests
:
*
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_exe
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_unittests
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_exe
:
*
"
]
visibility
=
[
-
"
/
/
build
/
rust
/
tests
:
*
"
-
"
/
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
*
"
]
deps
=
[
"
:
some_headers
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_mixed_static_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_mixed_static_library
/
BUILD
.
gn
index
d3e7efa5e
.
.
e7a30678e
100644
-
-
-
a
/
rust
/
tests
/
test_mixed_static_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_mixed_static_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_static_library
.
gni
"
)
mixed_static_library
(
"
test_mixed_static_library
"
)
{
sources
=
[
-
12
12
+
12
12
mixed_static_library
(
"
test_mixed_static_library
"
)
{
rs_sources
=
[
"
src
/
lib
.
rs
"
]
rs_cxx_bindings
=
[
"
src
/
lib
.
rs
"
]
rs_visibility
=
[
-
"
/
/
build
/
rust
/
tests
/
test_rust_unittests
:
*
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_exe
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_unittests
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_exe
:
*
"
]
visibility
=
[
-
"
/
/
build
/
rust
/
tests
:
*
"
-
"
/
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
:
*
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_cpp_including_rust
:
*
"
]
deps
=
[
"
:
some_headers
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_mixed_testonly_executable
/
BUILD
.
gn
b
/
rust
/
tests
/
test_mixed_testonly_executable
/
BUILD
.
gn
index
0e20ec7f6
.
.
6238885eb
100644
-
-
-
a
/
rust
/
tests
/
test_mixed_testonly_executable
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_mixed_testonly_executable
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_executable
.
gni
"
)
mixed_executable
(
"
test_mixed_testonly_executable
"
)
{
sources
=
[
"
main
.
cc
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
index
ee44d9e5b
.
.
6a0e89d58
100644
-
-
-
a
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_proc_macro_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_proc_macro_crate
"
)
{
crate_root
=
"
crate
/
src
/
lib
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
index
c38fb81d7
.
.
a6dd0c2cc
100644
-
-
-
a
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rlib_crate
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
cargo_crate
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
cargo_crate
.
gni
"
)
cargo_crate
(
"
test_rlib_crate
"
)
{
crate_root
=
"
crate
/
src
/
lib
.
rs
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
index
f5d0692ef
.
.
86e281922
100644
-
-
-
a
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_exe
/
BUILD
.
gn
-
2
16
+
2
16
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
rust_executable
(
"
test_rust_exe
"
)
{
crate_root
=
"
main
.
rs
"
sources
=
[
"
main
.
rs
"
]
deps
=
[
-
"
/
/
build
/
rust
/
tests
/
test_mixed_static_library
:
test_mixed_static_library_rs
"
-
"
/
/
build
/
rust
/
tests
/
test_proc_macro_crate
"
-
"
/
/
build
/
rust
/
tests
/
test_rlib_crate
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_mixed_static_library
:
test_mixed_static_library_rs
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_proc_macro_crate
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rlib_crate
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
index
877f17777
.
.
0eff6f633
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_executable
.
gni
"
)
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_executable
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
#
The
exe
depends
on
lib
v1
.
But
it
also
transitively
depends
on
lib
v2
.
#
The
code
in
the
exe
should
use
v1
and
the
code
in
the
transitive
lib
should
-
13
7
+
13
7
rust_executable
(
"
test_rust_multiple_dep_versions_exe
"
)
{
sources
=
[
"
main
.
rs
"
]
deps
=
[
"
:
transitive_v2
"
-
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
:
test_lib
"
]
}
-
21
5
+
21
5
rust_static_library
(
"
transitive_v2
"
)
{
crate_root
=
"
transitive_lib
.
rs
"
sources
=
[
"
transitive_lib
.
rs
"
]
deps
=
-
[
"
/
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib
"
]
+
[
"
/
/
chromium
/
build
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
:
test_lib
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
index
f97c9daa7
.
.
324794b69
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v1
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
test_lib
"
)
{
epoch
=
"
1
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
index
c4ac76535
.
.
dfbb11057
100644
-
-
-
a
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_multiple_dep_versions_exe
/
v2
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
test_lib
"
)
{
epoch
=
"
2
"
diff
-
-
git
a
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
index
9e9a17964
.
.
a769c029c
100644
-
-
-
a
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_shared_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_shared_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_shared_library
.
gni
"
)
if
(
rustc_can_link
)
{
rust_shared_library
(
"
test_rust_shared_library
"
)
{
diff
-
-
git
a
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
index
e565f1c57
.
.
0cfbf6f9c
100644
-
-
-
a
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_static_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
test_rust_static_library
"
)
{
sources
=
[
"
src
/
lib
.
rs
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
index
ffa362e76
.
.
6447074e1
100644
-
-
-
a
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_static_library_non_standard_arrangement
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
rust_static_library
(
"
test_rust_static_library_non_standard_arrangement
"
)
{
sources
=
[
"
foo
.
rs
"
]
diff
-
-
git
a
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
b
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
index
6d4fc8db6
.
.
688af8edb
100644
-
-
-
a
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_rust_unittests
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_unit_test
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_unit_test
.
gni
"
)
rust_unit_test
(
"
test_rust_unittests
"
)
{
sources
=
[
"
main
.
rs
"
]
crate_root
=
"
main
.
rs
"
deps
=
[
-
"
/
/
build
/
rust
/
tests
/
test_mixed_static_library
:
test_mixed_static_library_rs
"
+
"
/
/
chromium
/
build
/
rust
/
tests
/
test_mixed_static_library
:
test_mixed_static_library_rs
"
]
}
diff
-
-
git
a
/
rust
/
tests
/
test_serde_jsonrc
/
BUILD
.
gn
b
/
rust
/
tests
/
test_serde_jsonrc
/
BUILD
.
gn
index
8413d4a06
.
.
7962215ce
100644
-
-
-
a
/
rust
/
tests
/
test_serde_jsonrc
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_serde_jsonrc
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
rust_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
rust_static_library
.
gni
"
)
import
(
"
/
/
testing
/
test
.
gni
"
)
rust_static_library
(
"
test_serde_jsonrc_rs
"
)
{
diff
-
-
git
a
/
rust
/
tests
/
test_variable_static_library
/
BUILD
.
gn
b
/
rust
/
tests
/
test_variable_static_library
/
BUILD
.
gn
index
1823b36dc
.
.
861d455c1
100644
-
-
-
a
/
rust
/
tests
/
test_variable_static_library
/
BUILD
.
gn
+
+
+
b
/
rust
/
tests
/
test_variable_static_library
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
rust
/
mixed_static_library
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
rust
/
mixed_static_library
.
gni
"
)
#
This
example
exists
to
show
that
a
'
mixed_static_library
'
can
work
#
whether
or
not
Rust
is
enabled
in
the
toolchain
.
diff
-
-
git
a
/
symlink
.
gni
b
/
symlink
.
gni
index
dcaa5e504
.
.
496ca8951
100644
-
-
-
a
/
symlink
.
gni
+
+
+
b
/
symlink
.
gni
-
16
7
+
16
7
template
(
"
symlink
"
)
{
"
visibility
"
]
)
outputs
=
[
invoker
.
output
]
-
script
=
"
/
/
build
/
symlink
.
py
"
+
script
=
"
/
/
chromium
/
build
/
symlink
.
py
"
args
=
[
"
-
f
"
rebase_path
(
invoker
.
source
get_path_info
(
invoker
.
output
"
dir
"
)
)
diff
-
-
git
a
/
timestamp
.
gni
b
/
timestamp
.
gni
index
4d805c094
.
.
e059a234f
100644
-
-
-
a
/
timestamp
.
gni
+
+
+
b
/
timestamp
.
gni
-
4
7
+
4
7
#
#
Defines
the
build_timestamp
variable
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
declare_args
(
)
{
#
This
should
be
the
filename
of
a
script
that
prints
a
single
line
diff
-
-
git
a
/
toolchain
/
BUILD
.
gn
b
/
toolchain
/
BUILD
.
gn
index
ab51780af
.
.
c22ccecee
100644
-
-
-
a
/
toolchain
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
declare_args
(
)
{
#
Pool
for
non
goma
tasks
.
diff
-
-
git
a
/
toolchain
/
aix
/
BUILD
.
gn
b
/
toolchain
/
aix
/
BUILD
.
gn
index
cdcfbdb56
.
.
71ce31573
100644
-
-
-
a
/
toolchain
/
aix
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
aix
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
gcc_toolchain
(
"
ppc64
"
)
{
cc
=
"
gcc
"
diff
-
-
git
a
/
toolchain
/
android
/
BUILD
.
gn
b
/
toolchain
/
android
/
BUILD
.
gn
index
d291b40fd
.
.
b018d2d4a
100644
-
-
-
a
/
toolchain
/
android
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
android
/
BUILD
.
gn
-
2
12
+
2
12
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
#
Imports
android
/
config
.
gni
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
#
Imports
android
/
config
.
gni
.
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
declare_args
(
)
{
#
Whether
unstripped
binaries
i
.
e
.
compiled
with
debug
symbols
should
be
diff
-
-
git
a
/
toolchain
/
android
/
DIR_METADATA
b
/
toolchain
/
android
/
DIR_METADATA
index
cdc2d6fb6
.
.
37c98f5e4
100644
-
-
-
a
/
toolchain
/
android
/
DIR_METADATA
+
+
+
b
/
toolchain
/
android
/
DIR_METADATA
-
1
+
1
-
mixins
:
"
/
/
build
/
android
/
COMMON_METADATA
"
+
mixins
:
"
/
/
chromium
/
build
/
android
/
COMMON_METADATA
"
diff
-
-
git
a
/
toolchain
/
apple
/
BUILD
.
gn
b
/
toolchain
/
apple
/
BUILD
.
gn
index
6f074fd2d
.
.
657acfc3c
100644
-
-
-
a
/
toolchain
/
apple
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
apple
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
concurrent_links
.
gni
"
)
declare_args
(
)
{
#
Reduce
the
number
of
tasks
using
the
copy_bundle_data
and
compile_xcassets
diff
-
-
git
a
/
toolchain
/
apple
/
toolchain
.
gni
b
/
toolchain
/
apple
/
toolchain
.
gni
index
9c72d46a0
.
.
dfb0da528
100644
-
-
-
a
/
toolchain
/
apple
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
apple
/
toolchain
.
gni
-
6
15
+
6
15
#
some
enhancements
since
the
commands
on
Mac
are
slightly
different
than
on
#
Linux
.
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
assert
(
(
target_os
=
=
"
ios
"
&
&
host_os
=
=
"
mac
"
)
|
|
host_os
!
=
"
win
"
)
-
44
10
+
44
10
if
(
swift_whole_module_optimization
=
=
-
1
)
{
tool_versions
=
exec_script
(
"
get_tool_mtime
.
py
"
rebase_path
(
[
-
"
/
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
-
"
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
-
"
/
/
build
/
toolchain
/
ios
/
compile_xcassets
.
py
"
-
"
/
/
build
/
toolchain
/
ios
/
swiftc
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
ios
/
compile_xcassets
.
py
"
+
"
/
/
chromium
/
build
/
toolchain
/
ios
/
swiftc
.
py
"
]
root_build_dir
)
"
trim
scope
"
)
-
156
7
+
156
7
template
(
"
apple_toolchain
"
)
{
toolchain_coverage_instrumentation_input_file
!
=
"
"
if
(
_use_clang_coverage_wrapper
)
{
_coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
+
"
-
-
files
-
to
-
instrument
=
"
+
rebase_path
(
toolchain_coverage_instrumentation_input_file
root_build_dir
)
+
"
-
-
target
-
os
=
"
+
target_os
-
166
7
+
166
7
template
(
"
apple_toolchain
"
)
{
linker_driver
=
"
TOOL_VERSION
=
{
tool_versions
.
linker_driver
}
"
+
-
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
linker_driver
.
py
"
root_build_dir
)
#
Specify
an
explicit
path
for
the
strip
binary
.
_strippath
=
invoker
.
bin_path
+
"
strip
"
-
222
7
+
222
7
template
(
"
apple_toolchain
"
)
{
rustc_bin
=
rebase_path
(
"
{
rust_sysroot
}
/
bin
/
rustc
"
root_build_dir
)
rustc
=
"
rust_compiler_prefix
{
rustc_bin
}
"
rust_sysroot_relative_to_out
=
rebase_path
(
rust_sysroot
root_out_dir
)
-
rustc_wrapper
=
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
)
+
rustc_wrapper
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
)
#
Ideally
we
'
d
add
-
Clink
-
args
=
\
"
{
{
ldflags
}
}
\
"
to
each
of
the
Rust
#
tools
below
which
may
link
(
i
.
e
.
rust_bin
rust_cdylib
rust_macro
)
.
-
338
7
+
338
7
template
(
"
apple_toolchain
"
)
{
rspfile_content
=
"
{
{
inputs
}
}
"
if
(
!
toolchain_uses_lld
)
{
-
script
=
rebase_path
(
"
/
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
+
script
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
filter_libtool
.
py
"
root_build_dir
)
#
Specify
explicit
path
for
libtool
.
-
364
7
+
364
7
template
(
"
apple_toolchain
"
)
{
#
E
.
g
.
"
.
/
libfoo
.
dylib
"
:
dylib
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
dylib
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
These
variables
are
not
built
into
GN
but
are
helpers
that
implement
#
(
1
)
linking
to
produce
a
.
dylib
(
2
)
extracting
the
symbols
from
that
-
441
7
+
441
7
template
(
"
apple_toolchain
"
)
{
#
E
.
g
.
"
.
/
libfoo
.
so
"
:
sofile
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
link_command
=
"
linker_driver
ld
-
bundle
{
{
ldflags
}
}
-
o
\
"
sofile
\
"
\
"
rspfile
\
"
"
-
471
7
+
471
7
template
(
"
apple_toolchain
"
)
{
tool
(
"
link
"
)
{
outfile
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
rspfile
=
"
outfile
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_driver
ld
dsym_switch
{
{
ldflags
}
}
-
o
\
"
outfile
\
"
\
"
rspfile
\
"
"
description
=
"
LINK
outfile
"
-
515
7
+
515
7
template
(
"
apple_toolchain
"
)
{
command
=
"
rm
-
rf
{
{
output
}
}
&
&
/
bin
/
cp
-
Rl
{
{
source
}
}
{
{
output
}
}
"
}
description
=
"
COPY_BUNDLE_DATA
{
{
source
}
}
{
{
output
}
}
"
-
pool
=
"
/
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
}
#
Swift
is
only
used
on
iOS
not
macOS
.
We
want
to
minimize
the
number
-
523
7
+
523
7
template
(
"
apple_toolchain
"
)
{
#
disallow
future
uses
of
Swift
on
macOS
.
https
:
/
/
crbug
.
com
/
965663
.
if
(
toolchain_args
.
current_os
=
=
"
ios
"
)
{
tool
(
"
swift
"
)
{
-
_tool
=
rebase_path
(
"
/
/
build
/
toolchain
/
ios
/
swiftc
.
py
"
root_build_dir
)
+
_tool
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
ios
/
swiftc
.
py
"
root_build_dir
)
depfile
=
"
{
{
target_out_dir
}
}
/
{
{
module_name
}
}
.
d
"
depsformat
=
"
gcc
"
-
605
7
+
605
7
template
(
"
apple_toolchain
"
)
{
#
disallow
future
uses
of
xcassets
on
macOS
.
https
:
/
/
crbug
.
com
/
965663
.
if
(
toolchain_args
.
current_os
=
=
"
ios
"
)
{
tool
(
"
compile_xcassets
"
)
{
-
_tool
=
rebase_path
(
"
/
/
build
/
toolchain
/
ios
/
compile_xcassets
.
py
"
+
_tool
=
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
ios
/
compile_xcassets
.
py
"
root_build_dir
)
_env_vars
=
"
TOOL_VERSION
=
{
tool_versions
.
compile_xcassets
}
"
-
620
12
+
620
12
template
(
"
apple_toolchain
"
)
{
"
-
P
\
"
{
{
bundle_partial_info_plist
}
}
\
"
"
+
"
-
o
{
{
output
}
}
{
{
inputs
}
}
"
description
=
"
COMPILE_XCASSETS
{
{
output
}
}
"
-
pool
=
"
/
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
/
apple
:
bundle_pool
(
default_toolchain
)
"
}
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
}
}
diff
-
-
git
a
/
toolchain
/
cc_wrapper
.
gni
b
/
toolchain
/
cc_wrapper
.
gni
index
6186070e3
.
.
2a335575c
100644
-
-
-
a
/
toolchain
/
cc_wrapper
.
gni
+
+
+
b
/
toolchain
/
cc_wrapper
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
#
Defines
the
configuration
of
cc
wrapper
#
ccache
:
a
c
/
c
+
+
compiler
cache
which
can
greatly
reduce
recompilation
times
.
diff
-
-
git
a
/
toolchain
/
concurrent_links
.
gni
b
/
toolchain
/
concurrent_links
.
gni
index
1efd8208a
.
.
d3b1d07d2
100644
-
-
-
a
/
toolchain
/
concurrent_links
.
gni
+
+
+
b
/
toolchain
/
concurrent_links
.
gni
-
7
13
+
7
13
#
in
the
context
of
the
default_toolchain
so
we
can
at
least
check
for
that
.
assert
(
current_toolchain
=
=
default_toolchain
)
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
apple
/
symbols
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
apple
/
symbols
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromeos
/
ui_mode
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
declare_args
(
)
{
#
Limit
the
number
of
concurrent
links
;
we
often
want
to
run
fewer
diff
-
-
git
a
/
toolchain
/
cros
/
BUILD
.
gn
b
/
toolchain
/
cros
/
BUILD
.
gn
index
2dfe0450d
.
.
8ba2068d9
100644
-
-
-
a
/
toolchain
/
cros
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
cros
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cros_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
declare_args
(
)
{
#
If
set
build
lacros
with
Chromium
'
s
toolchain
instead
of
with
Chrome
OS
'
s
.
-
195
14
+
195
14
if
(
also_build_lacros_chrome_for_architecture
!
=
"
"
)
{
cros_toolchain
(
"
lacros_clang
"
)
{
if
(
also_build_lacros_chrome_for_architecture
=
=
"
amd64
"
)
{
lacros_args
=
-
read_file
(
"
/
/
build
/
args
/
chromeos
/
amd64
-
generic
-
crostoolchain
.
gni
"
+
read_file
(
"
/
/
chromium
/
build
/
args
/
chromeos
/
amd64
-
generic
-
crostoolchain
.
gni
"
"
scope
"
)
-
lacros_v8_snapshot_sysroot
=
"
/
/
build
/
linux
/
debian_sid_amd64
-
sysroot
"
+
lacros_v8_snapshot_sysroot
=
"
/
/
chromium
/
build
/
linux
/
debian_sid_amd64
-
sysroot
"
}
else
if
(
also_build_lacros_chrome_for_architecture
=
=
"
arm
"
)
{
lacros_args
=
-
read_file
(
"
/
/
build
/
args
/
chromeos
/
arm
-
generic
-
crostoolchain
.
gni
"
+
read_file
(
"
/
/
chromium
/
build
/
args
/
chromeos
/
arm
-
generic
-
crostoolchain
.
gni
"
"
scope
"
)
-
lacros_v8_snapshot_sysroot
=
"
/
/
build
/
linux
/
debian_sid_i386
-
sysroot
"
+
lacros_v8_snapshot_sysroot
=
"
/
/
chromium
/
build
/
linux
/
debian_sid_i386
-
sysroot
"
}
else
{
assert
(
false
"
also_build_lacros_chrome_for_architecture
is
not
"
+
-
218
7
+
218
7
if
(
also_build_lacros_chrome_for_architecture
!
=
"
"
)
{
also_build_lacros_chrome_for_architecture
=
"
"
chromeos_is_browser_only
=
true
use_clang_coverage
=
false
-
cros_host_sysroot
=
"
/
/
build
/
linux
/
debian_sid_amd64
-
sysroot
"
+
cros_host_sysroot
=
"
/
/
chromium
/
build
/
linux
/
debian_sid_amd64
-
sysroot
"
}
if
(
!
lacros_use_chromium_toolchain
)
{
#
These
are
args
for
the
template
.
diff
-
-
git
a
/
toolchain
/
cros_toolchain
.
gni
b
/
toolchain
/
cros_toolchain
.
gni
index
9b7e3b6d8
.
.
b4e2f0f4a
100644
-
-
-
a
/
toolchain
/
cros_toolchain
.
gni
+
+
+
b
/
toolchain
/
cros_toolchain
.
gni
-
32
8
+
32
8
#
cros_target_ar
=
"
x86_64
-
cros
-
linux
-
gnu
-
gcc
-
ar
"
#
target_cpu
=
"
x64
"
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
declare_args
(
)
{
#
These
must
be
specified
for
a
board
-
specific
build
.
diff
-
-
git
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
index
d77640b1a
.
.
643e12841
100644
-
-
-
a
/
toolchain
/
fuchsia
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
fuchsia
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
Fuchsia
builds
using
the
Clang
toolchain
with
most
parameters
common
across
#
the
different
target
architectures
.
diff
-
-
git
a
/
toolchain
/
gcc_toolchain
.
gni
b
/
toolchain
/
gcc_toolchain
.
gni
index
556b772e6
.
.
19f72175d
100644
-
-
-
a
/
toolchain
/
gcc_toolchain
.
gni
+
+
+
b
/
toolchain
/
gcc_toolchain
.
gni
-
2
22
+
2
22
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
v8_target_cpu
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
coverage
/
coverage
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
v8_target_cpu
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
if
(
is_nacl
)
{
#
To
keep
NaCl
variables
out
of
builds
that
don
'
t
include
NaCl
all
#
variables
defined
in
nacl
/
config
.
gni
referenced
here
should
be
protected
by
#
is_nacl
conditions
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
}
declare_args
(
)
{
-
258
7
+
258
7
template
(
"
gcc_toolchain
"
)
{
}
_coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
#
The
wrapper
needs
to
know
what
OS
we
target
because
it
uses
that
to
-
406
7
+
406
7
template
(
"
gcc_toolchain
"
)
{
#
existing
file
.
if
(
host_os
=
=
"
win
"
)
{
tool_wrapper_path
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
command
=
"
cmd
/
c
python_path
tool_wrapper_path
delete
-
file
{
{
output
}
}
&
&
command
"
}
else
{
command
=
"
rm
-
f
{
{
output
}
}
&
&
command
"
-
429
7
+
429
7
template
(
"
gcc_toolchain
"
)
{
sofile
=
"
{
{
output_dir
}
}
/
soname
"
#
Possibly
including
toolchain
dir
.
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
if
(
defined
(
invoker
.
strip
)
)
{
unstripped_sofile
=
"
{
{
root_out_dir
}
}
/
lib
.
unstripped
/
soname
"
-
470
7
+
470
7
template
(
"
gcc_toolchain
"
)
{
#
requiring
sh
control
structures
pipelines
and
POSIX
utilities
.
#
The
host
might
not
have
a
POSIX
shell
and
utilities
(
e
.
g
.
Windows
)
.
solink_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_solink_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_solink_wrapper
.
py
"
root_build_dir
)
solink_extra_flags
=
"
"
command
=
"
python_path
\
"
solink_wrapper
\
"
-
-
readelf
=
\
"
readelf
\
"
-
-
nm
=
\
"
nm
\
"
strip_switch
dwp_switch
-
-
sofile
=
\
"
unstripped_sofile
\
"
-
-
tocfile
=
\
"
tocfile
\
"
map_switch
-
-
output
=
\
"
sofile
\
"
-
-
link_command
solink_extra_flags
"
-
536
7
+
536
7
template
(
"
gcc_toolchain
"
)
{
sofile
=
"
{
{
output_dir
}
}
/
soname
"
rspfile
=
sofile
+
"
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
if
(
defined
(
invoker
.
strip
)
)
{
unstripped_sofile
=
"
{
{
root_out_dir
}
}
/
lib
.
unstripped
/
soname
"
-
592
7
+
592
7
template
(
"
gcc_toolchain
"
)
{
rspfile
=
"
outfile
.
rsp
"
unstripped_outfile
=
outfile
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
#
Use
this
for
{
{
output_extension
}
}
expansions
unless
a
target
manually
#
overrides
it
(
in
which
case
{
{
output_extension
}
}
will
be
what
the
target
-
629
7
+
629
7
template
(
"
gcc_toolchain
"
)
{
}
link_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
python_path
\
"
link_wrapper
\
"
-
-
output
=
\
"
outfile
\
"
strip_switch
map_switch
dwp_switch
-
-
link_command
"
description
=
"
LINK
outfile
"
-
694
7
+
694
7
template
(
"
gcc_toolchain
"
)
{
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
if
(
toolchain_has_rust
)
{
-
704
7
+
704
7
template
(
"
gcc_toolchain
"
)
{
rustc_bin
=
rebase_path
(
"
{
rust_sysroot
}
/
bin
/
rustc
"
root_build_dir
)
rustc
=
"
rust_compiler_prefix
{
rustc_bin
}
"
rust_sysroot_relative_to_out
=
rebase_path
(
rust_sysroot
root_out_dir
)
-
rustc_wrapper
=
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
)
+
rustc_wrapper
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
)
#
RSP
manipulation
due
to
https
:
/
/
bugs
.
chromium
.
org
/
p
/
gn
/
issues
/
detail
?
id
=
249
tool
(
"
rust_staticlib
"
)
{
diff
-
-
git
a
/
toolchain
/
ios
/
BUILD
.
gn
b
/
toolchain
/
ios
/
BUILD
.
gn
index
21de1f315
.
.
ef6fcfafa
100644
-
-
-
a
/
toolchain
/
ios
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
ios
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ios
/
ios_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
#
Specialisation
of
the
apple_toolchain
template
to
declare
the
toolchain
#
and
its
tools
to
build
target
for
iOS
platform
.
-
44
7
+
44
7
ios_toolchain
(
"
ios_clang_arm64_fat_arm
"
)
{
toolchain_args
=
{
current_cpu
=
"
arm
"
is_fat_secondary_toolchain
=
true
-
primary_fat_toolchain_name
=
"
/
/
build
/
toolchain
/
ios
:
ios_clang_arm64
"
+
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_arm64
"
}
}
-
64
7
+
64
7
ios_toolchain
(
"
ios_clang_x64_fat_arm64
"
)
{
toolchain_args
=
{
current_cpu
=
"
arm64
"
is_fat_secondary_toolchain
=
true
-
primary_fat_toolchain_name
=
"
/
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
+
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
}
}
-
79
7
+
79
7
ios_toolchain
(
"
ios_clang_x64_fat_x86
"
)
{
toolchain_args
=
{
current_cpu
=
"
x86
"
is_fat_secondary_toolchain
=
true
-
primary_fat_toolchain_name
=
"
/
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
+
primary_fat_toolchain_name
=
"
/
/
chromium
/
build
/
toolchain
/
ios
:
ios_clang_x64
"
}
}
diff
-
-
git
a
/
toolchain
/
linux
/
BUILD
.
gn
b
/
toolchain
/
linux
/
BUILD
.
gn
index
c9cc3662c
.
.
6e6bf839f
100644
-
-
-
a
/
toolchain
/
linux
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
BUILD
.
gn
-
2
10
+
2
10
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
ozone
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
ui
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ozone
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
ui
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
clang_toolchain
(
"
clang_ppc64
"
)
{
enable_linker_map
=
true
diff
-
-
git
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
index
4719d540b
.
.
13c776f9f
100644
-
-
-
a
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
linux
/
unbundle
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
gcc_toolchain
(
"
default
"
)
{
cc
=
getenv
(
"
CC
"
)
diff
-
-
git
a
/
toolchain
/
mac
/
BUILD
.
gn
b
/
toolchain
/
mac
/
BUILD
.
gn
index
0adce9400
.
.
e2b188f9e
100644
-
-
-
a
/
toolchain
/
mac
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
mac
/
BUILD
.
gn
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
mac
/
mac_sdk
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
apple
/
toolchain
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
#
Specialisation
of
the
apple_toolchain
template
to
declare
the
toolchain
diff
-
-
git
a
/
toolchain
/
nacl
/
BUILD
.
gn
b
/
toolchain
/
nacl
/
BUILD
.
gn
index
97f3da9b0
.
.
68960aa9d
100644
-
-
-
a
/
toolchain
/
nacl
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
nacl
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sysroot
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
nacl_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sysroot
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
nacl_toolchain
.
gni
"
)
#
Add
the
toolchain
revision
as
a
preprocessor
define
so
that
sources
are
#
rebuilt
when
a
toolchain
is
updated
.
diff
-
-
git
a
/
toolchain
/
nacl_toolchain
.
gni
b
/
toolchain
/
nacl_toolchain
.
gni
index
82fd3cb4d
.
.
43c6b3eee
100644
-
-
-
a
/
toolchain
/
nacl_toolchain
.
gni
+
+
+
b
/
toolchain
/
nacl_toolchain
.
gni
-
2
8
+
2
8
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
nacl
/
config
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
nacl
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
#
This
template
defines
a
NaCl
toolchain
.
#
diff
-
-
git
a
/
toolchain
/
toolchain
.
gni
b
/
toolchain
/
toolchain
.
gni
index
86d9ff778
.
.
6ab67af56
100644
-
-
-
a
/
toolchain
/
toolchain
.
gni
+
+
+
b
/
toolchain
/
toolchain
.
gni
-
5
8
+
5
8
#
Toolchain
-
related
configuration
that
may
be
needed
outside
the
context
of
the
#
toolchain
(
)
rules
themselves
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
chromecast_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chromecast_build
.
gni
"
)
import
(
"
/
/
build_overrides
/
build
.
gni
"
)
declare_args
(
)
{
-
75
7
+
75
7
stamp_description
=
"
STAMP
{
{
output
}
}
"
copy_description
=
"
COPY
{
{
source
}
}
{
{
output
}
}
"
if
(
host_os
=
=
"
win
"
)
{
_tool_wrapper_path
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
win
/
tool_wrapper
.
py
"
root_build_dir
)
stamp_command
=
"
cmd
/
c
type
nul
>
\
"
{
{
output
}
}
\
"
"
copy_command
=
diff
-
-
git
a
/
toolchain
/
win
/
BUILD
.
gn
b
/
toolchain
/
win
/
BUILD
.
gn
index
b54090070
.
.
c76d6df05
100644
-
-
-
a
/
toolchain
/
win
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
win
/
BUILD
.
gn
-
2
15
+
2
15
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
rust
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
goma
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
rbe
.
gni
"
)
-
import
(
"
/
/
build
/
toolchain
/
toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
compiler
/
compiler
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
rust
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
cc_wrapper
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
goma
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
rbe
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
toolchain
.
gni
"
)
#
Should
only
be
running
on
Windows
.
assert
(
is_win
)
-
172
7
+
172
7
template
(
"
msvc_toolchain
"
)
{
}
coverage_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
clang_code_coverage_wrapper
.
py
"
root_build_dir
)
coverage_wrapper
=
coverage_wrapper
+
"
-
-
target
-
os
=
"
+
target_os
if
(
toolchain_coverage_instrumentation_input_file
!
=
"
"
)
{
-
296
7
+
296
7
template
(
"
msvc_toolchain
"
)
{
}
if
(
toolchain_has_rust
)
{
-
rustc_wrapper
=
rebase_path
(
"
/
/
build
/
rust
/
rustc_wrapper
.
py
"
)
+
rustc_wrapper
=
rebase_path
(
"
/
/
chromium
/
build
/
rust
/
rustc_wrapper
.
py
"
)
#
TODO
(
https
:
/
/
crbug
.
com
/
1271215
)
#
Other
toolchains
(
Linux
Mac
)
pass
{
{
ldflags
}
}
to
rustc
.
-
388
7
+
388
7
template
(
"
msvc_toolchain
"
)
{
libname
=
"
{
dllname
}
.
lib
"
#
e
.
g
.
foo
.
dll
.
lib
pdbname
=
"
{
dllname
}
.
pdb
"
rspfile
=
"
{
dllname
}
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
/
OUT
:
dllname
/
nologo
{
sys_lib_flags
}
/
IMPLIB
:
libname
/
DLL
/
PDB
:
pdbname
rspfile
"
-
423
7
+
423
7
template
(
"
msvc_toolchain
"
)
{
dllname
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
pdbname
=
"
{
dllname
}
.
pdb
"
rspfile
=
"
{
dllname
}
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
/
OUT
:
dllname
/
nologo
{
sys_lib_flags
}
/
DLL
/
PDB
:
pdbname
rspfile
"
-
446
7
+
446
7
template
(
"
msvc_toolchain
"
)
{
exename
=
"
{
{
output_dir
}
}
/
{
{
target_output_name
}
}
{
{
output_extension
}
}
"
pdbname
=
"
exename
.
pdb
"
rspfile
=
"
exename
.
rsp
"
-
pool
=
"
/
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
link_pool
(
default_toolchain
)
"
command
=
"
linker_wrapper
link
/
OUT
:
exename
/
nologo
{
sys_lib_flags
}
/
PDB
:
pdbname
rspfile
"
-
471
16
+
471
16
template
(
"
msvc_toolchain
"
)
{
tool
(
"
stamp
"
)
{
command
=
stamp_command
description
=
stamp_description
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
tool
(
"
copy
"
)
{
command
=
copy_command
description
=
copy_description
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
tool
(
"
action
"
)
{
-
pool
=
"
/
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
+
pool
=
"
/
/
chromium
/
build
/
toolchain
:
action_pool
(
default_toolchain
)
"
}
}
}
diff
-
-
git
a
/
toolchain
/
win
/
midl
.
gni
b
/
toolchain
/
win
/
midl
.
gni
index
9f7014285
.
.
60fda3858
100644
-
-
-
a
/
toolchain
/
win
/
midl
.
gni
+
+
+
b
/
toolchain
/
win
/
midl
.
gni
-
4
7
+
4
7
assert
(
is_win
)
-
import
(
"
/
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
visual_studio_version
.
gni
"
)
#
This
template
defines
a
rule
to
invoke
the
MS
IDL
compiler
.
The
generated
#
source
code
will
be
compiled
and
linked
into
targets
that
depend
on
this
.
-
123
7
+
123
7
template
(
"
midl
"
)
{
action_foreach
(
action_name
)
{
visibility
=
[
"
:
source_set_name
"
]
-
script
=
"
/
/
build
/
toolchain
/
win
/
midl
.
py
"
+
script
=
"
/
/
chromium
/
build
/
toolchain
/
win
/
midl
.
py
"
sources
=
invoker
.
sources
diff
-
-
git
a
/
toolchain
/
zos
/
BUILD
.
gn
b
/
toolchain
/
zos
/
BUILD
.
gn
index
7070032f9
.
.
ce902048a
100644
-
-
-
a
/
toolchain
/
zos
/
BUILD
.
gn
+
+
+
b
/
toolchain
/
zos
/
BUILD
.
gn
-
4
7
+
4
7
#
This
file
is
based
on
gcc_toolchain
.
gni
and
customized
for
z
/
OS
.
-
import
(
"
/
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_toolchain
.
gni
"
)
toolchain
(
"
s390x
"
)
{
cc
=
"
xlclang
"
-
91
7
+
91
7
toolchain
(
"
s390x
"
)
{
link_command
=
"
ld
-
Wl
DLL
{
{
ldflags
}
}
{
extra_ldflags
}
-
o
\
"
sofile
\
"
cat
rspfile
"
solink_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
python_path
\
"
solink_wrapper
\
"
-
-
output
=
\
"
sofile
\
"
-
-
link_command
"
rspfile_content
=
"
{
{
inputs
}
}
{
{
solibs
}
}
{
{
libs
}
}
"
-
151
7
+
151
7
toolchain
(
"
s390x
"
)
{
link_command
=
"
ld
{
{
ldflags
}
}
{
extra_ldflags
}
-
o
\
"
outfile
\
"
cat
rspfile
{
{
solibs
}
}
{
{
libs
}
}
"
link_wrapper
=
-
rebase_path
(
"
/
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
+
rebase_path
(
"
/
/
chromium
/
build
/
toolchain
/
gcc_link_wrapper
.
py
"
root_build_dir
)
command
=
"
python_path
\
"
link_wrapper
\
"
-
-
output
=
\
"
outfile
\
"
-
-
link_command
"
diff
-
-
git
a
/
util
/
BUILD
.
gn
b
/
util
/
BUILD
.
gn
index
2745449ea
.
.
37053c4b3
100644
-
-
-
a
/
util
/
BUILD
.
gn
+
+
+
b
/
util
/
BUILD
.
gn
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
action
(
"
chromium_git_revision
"
)
{
script
=
"
version
.
py
"
-
32
7
+
32
7
group
(
"
test_results
"
)
{
data
=
[
"
/
/
.
vpython
"
"
/
/
.
vpython3
"
-
"
/
/
build
/
util
/
lib
/
__init__
.
py
"
-
"
/
/
build
/
util
/
lib
/
results
/
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
__init__
.
py
"
+
"
/
/
chromium
/
build
/
util
/
lib
/
results
/
"
]
}
diff
-
-
git
a
/
util
/
branding
.
gni
b
/
util
/
branding
.
gni
index
aa758e6a0
.
.
f3b204f3c
100644
-
-
-
a
/
util
/
branding
.
gni
+
+
+
b
/
util
/
branding
.
gni
-
12
7
+
12
7
#
These
values
should
only
be
used
if
you
REALLY
need
to
depend
on
them
at
#
build
-
time
for
example
in
the
computation
of
output
file
names
.
-
import
(
"
/
/
build
/
config
/
chrome_build
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
chrome_build
.
gni
"
)
_branding_dictionary_template
=
"
full_name
=
\
"
PRODUCT_FULLNAME
\
"
"
+
diff
-
-
git
a
/
util
/
generate_wrapper
.
gni
b
/
util
/
generate_wrapper
.
gni
index
d63720be1
.
.
e8ce1fa6f
100644
-
-
-
a
/
util
/
generate_wrapper
.
gni
+
+
+
b
/
util
/
generate_wrapper
.
gni
-
43
7
+
43
7
#
wrapper_script
=
"
root_build_dir
/
bin
/
run_sample_build_product
"
#
}
template
(
"
generate_wrapper
"
)
{
-
_generator_script
=
"
/
/
build
/
util
/
generate_wrapper
.
py
"
+
_generator_script
=
"
/
/
chromium
/
build
/
util
/
generate_wrapper
.
py
"
if
(
defined
(
invoker
.
generator_script
)
)
{
_generator_script
=
invoker
.
generator_script
}
diff
-
-
git
a
/
util
/
java_action
.
gni
b
/
util
/
java_action
.
gni
index
0615b3878
.
.
f14ceb489
100644
-
-
-
a
/
util
/
java_action
.
gni
+
+
+
b
/
util
/
java_action
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
jarrunner
=
"
/
/
build
/
util
/
java_action
.
py
"
+
jarrunner
=
"
/
/
chromium
/
build
/
util
/
java_action
.
py
"
#
Declare
a
target
that
runs
a
java
command
a
single
time
.
#
diff
-
-
git
a
/
util
/
lastchange
.
gni
b
/
util
/
lastchange
.
gni
index
a13295900
.
.
0a4e42966
100644
-
-
-
a
/
util
/
lastchange
.
gni
+
+
+
b
/
util
/
lastchange
.
gni
-
10
7
+
10
7
declare_args
(
)
{
}
if
(
use_dummy_lastchange
)
{
-
lastchange_file
=
"
/
/
build
/
util
/
LASTCHANGE
.
dummy
"
+
lastchange_file
=
"
/
/
chromium
/
build
/
util
/
LASTCHANGE
.
dummy
"
}
else
{
-
lastchange_file
=
"
/
/
build
/
util
/
LASTCHANGE
"
+
lastchange_file
=
"
/
/
chromium
/
build
/
util
/
LASTCHANGE
"
}
diff
-
-
git
a
/
util
/
process_version
.
gni
b
/
util
/
process_version
.
gni
index
591e0a4a9
.
.
5d186b10c
100644
-
-
-
a
/
util
/
process_version
.
gni
+
+
+
b
/
util
/
process_version
.
gni
-
2
7
+
2
7
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
util
/
lastchange
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
util
/
lastchange
.
gni
"
)
#
Runs
the
version
processing
script
over
the
given
template
file
to
produce
#
an
output
file
.
This
is
used
for
generating
various
forms
of
files
that
-
64
7
+
64
7
template
(
"
process_version
"
)
{
}
action
(
action_name
)
{
-
script
=
"
/
/
build
/
util
/
version
.
py
"
+
script
=
"
/
/
chromium
/
build
/
util
/
version
.
py
"
inputs
=
[
lastchange_file
]
if
(
defined
(
invoker
.
inputs
)
)
{
diff
-
-
git
a
/
util
/
version
.
gni
b
/
util
/
version
.
gni
index
998ce077d
.
.
d6c8a8a7c
100644
-
-
-
a
/
util
/
version
.
gni
+
+
+
b
/
util
/
version
.
gni
-
36
7
+
36
7
if
(
is_mac
)
{
"
PATCH_LO
=
int
(
PATCH
)
%
256
"
]
}
else
if
(
target_os
=
=
"
android
"
)
{
-
import
(
"
/
/
build
/
config
/
android
/
config
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
android
/
config
.
gni
"
)
_version_dictionary_template
+
=
"
chrome_version_code
=
"
+
"
\
"
CHROME_VERSION_CODE
\
"
"
+
diff
-
-
git
a
/
win
/
BUILD
.
gn
b
/
win
/
BUILD
.
gn
index
3b66ddf1c
.
.
a3d0d0e9c
100644
-
-
-
a
/
win
/
BUILD
.
gn
+
+
+
b
/
win
/
BUILD
.
gn
-
2
9
+
2
9
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
#
found
in
the
LICENSE
file
.
-
import
(
"
/
/
build
/
config
/
clang
/
clang
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
-
import
(
"
/
/
build
/
config
/
win
/
manifest
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
clang
/
clang
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
sanitizers
/
sanitizers
.
gni
"
)
+
import
(
"
/
/
chromium
/
build
/
config
/
win
/
manifest
.
gni
"
)
#
Depending
on
this
target
will
cause
the
manifests
for
Chrome
'
s
default
#
Windows
and
common
control
compatibility
and
elevation
for
executables
.
-
21
10
+
21
10
if
(
is_win
)
{
#
"
Windows
cross
-
builds
from
Mac
must
be
64
-
bit
.
"
)
action
(
"
copy_cdb_to_output
"
)
{
-
script
=
"
/
/
build
/
win
/
copy_cdb_to_output
.
py
"
+
script
=
"
/
/
chromium
/
build
/
win
/
copy_cdb_to_output
.
py
"
inputs
=
[
script
-
"
/
/
build
/
vs_toolchain
.
py
"
+
"
/
/
chromium
/
build
/
vs_toolchain
.
py
"
]
outputs
=
[
"
root_out_dir
/
cdb
/
cdb
.
exe
"
diff
-
-
git
a
/
win
/
message_compiler
.
gni
b
/
win
/
message_compiler
.
gni
index
0ddbc1f42
.
.
06fbbd4ff
100644
-
-
-
a
/
win
/
message_compiler
.
gni
+
+
+
b
/
win
/
message_compiler
.
gni
-
38
7
+
38
7
template
(
"
message_compiler
"
)
{
forward_variables_from
(
invoker
[
"
visibility
"
]
)
}
-
script
=
"
/
/
build
/
win
/
message_compiler
.
py
"
+
script
=
"
/
/
chromium
/
build
/
win
/
message_compiler
.
py
"
outputs
=
[
"
target_gen_dir
/
{
{
source_name_part
}
}
.
h
"
