cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
deleting
-
attributesq
X
mock
.
NonCallableMockq
X
mock
.
Mock
.
attach_mockq
X
mock
.
Mockq
X
mock
.
Mock
.
__class__q
X
mock
.
Mock
.
method_callsq
X
mock
.
Mock
.
_get_child_mockq
X
mock
.
Mock
.
mock_add_specq
X
mock
.
Mock
.
__dir__q
X
the
mock
classq
NX
mock
.
Mock
.
return_valueq
U
1
X
mock
.
Mock
.
side_effectq
X
mock
.
Mock
.
mock_callsq
X
mock
.
Mock
.
reset_mockq
X
mock
.
Mock
.
call_countq
X
mock
.
Mock
.
assert_any_callq
X
attaching
mocks
as
attributesq
NX
mock
.
Mock
.
call_args_listq
X
mock
.
Mock
.
calledq
X
mock
.
PropertyMockq
X
mock
.
Mock
.
assert_has_callsq
X
mock
.
Mock
.
configure_mockq
X
callingq
NX
mock
.
Mock
.
assert_called_withq
X
mock
.
Mock
.
call_argsq
X
!
mock
.
Mock
.
assert_called_once_withq
X
deleting
attributesq
NuU
substitution_defsq
!
}
q
"
U
parse_messagesq
#
]
q
U
current_sourceq
%
NU
decorationq
&
NU
autofootnote_startq
'
K
U
nameidsq
(
}
q
)
(
h
U
deleting
-
attributesq
*
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
U
the
-
mock
-
classq
+
h
h
U
1U
id3q
h
h
h
h
h
h
h
h
h
h
h
U
attaching
-
mocks
-
as
-
attributesq
-
h
h
h
h
h
h
h
h
h
h
h
U
callingq
.
h
h
h
h
h
h
h
U
id2q
/
uU
childrenq0
]
q1
(
cdocutils
.
nodes
section
q2
)
q3
}
q4
(
U
rawsourceq5U
U
parentq6h
U
sourceq7cdocutils
.
nodes
reprunicode
q8X
/
compile
/
mock
/
docs
/
mock
.
txtq9
q
:
}
q
;
bU
tagnameq
<
U
sectionq
=
U
attributesq
>
}
q
?
(
U
dupnamesq
]
qAU
classesqB
]
qCU
backrefsqD
]
qEU
idsqF
]
qGh
+
aU
namesqH
]
qIh
auU
lineqJK
U
documentqKh
h0
]
qL
(
cdocutils
.
nodes
title
qM
)
qN
}
qO
(
h5X
The
Mock
ClassqPh6h3h7h
:
h
<
U
titleqQh
>
}
qR
(
h
]
qShB
]
qThD
]
qUhF
]
qVhH
]
qWuhJK
hKh
h0
]
qXcdocutils
.
nodes
Text
qYX
The
Mock
ClassqZ
q
[
}
q
\
(
h5hPh6hNubaubcdocutils
.
nodes
comment
q
]
)
q
^
}
q_
(
h5X
class
SomeClass
:
passq
h6h3h7h
:
h
<
U
commentqah
>
}
qb
(
U
testnodetypeqcX
testsetupqdU
xml
:
spaceqeU
preserveqfhF
]
qghD
]
qhh
]
qihB
]
qjhH
]
qkU
groupsql
]
qmU
defaultqnaU
optionsqo
}
qpuhJK
hKh
h0
]
qqhYX
class
SomeClass
:
passqr
qs
}
qt
(
h5U
h6h
^
ubaubcdocutils
.
nodes
paragraph
qu
)
qv
}
qw
(
h5Xb
Mock
is
a
flexible
mock
object
intended
to
replace
the
use
of
stubs
and
test
doubles
throughout
your
code
.
Mocks
are
callable
and
create
attributes
as
new
mocks
when
you
access
them
[
#
]
_
.
Accessing
the
same
attribute
will
always
return
the
same
mock
.
Mocks
record
how
you
use
them
allowing
you
to
make
assertions
about
what
your
code
has
done
to
them
.
qxh6h3h7h
:
h
<
U
paragraphqyh
>
}
qz
(
h
]
q
{
hB
]
q
|
hD
]
q
}
hF
]
q
~
hH
]
q
uhJK
hKh
h0
]
q
(
cdocutils
.
nodes
title_reference
q
)
q
}
q
(
h5X
Mock
q
h
>
}
q
(
h
]
q
hB
]
q
hD
]
q
hF
]
q
hH
]
q
uh6hvh0
]
q
hYX
Mockq
q
}
q
(
h5U
h6h
ubah
<
U
title_referenceq
ubhYX
is
a
flexible
mock
object
intended
to
replace
the
use
of
stubs
and
test
doubles
throughout
your
code
.
Mocks
are
callable
and
create
attributes
as
new
mocks
when
you
access
them
q
q
}
q
(
h5X
is
a
flexible
mock
object
intended
to
replace
the
use
of
stubs
and
test
doubles
throughout
your
code
.
Mocks
are
callable
and
create
attributes
as
new
mocks
when
you
access
them
q
h6hvubcdocutils
.
nodes
footnote_reference
q
)
q
}
q
(
h5X
[
#
]
_q
U
resolvedq
K
h6hvh
<
U
footnote_referenceq
h
>
}
q
(
U
autoq
K
hF
]
q
U
id1q
ahD
]
q
h
]
q
hB
]
q
hH
]
q
U
refidq
h
uh0
]
q
hYX
1
q
}
q
(
h5U
h6h
ubaubhYX
.
Accessing
the
same
attribute
will
always
return
the
same
mock
.
Mocks
record
how
you
use
them
allowing
you
to
make
assertions
about
what
your
code
has
done
to
them
.
q
q
}
q
(
h5X
.
Accessing
the
same
attribute
will
always
return
the
same
mock
.
Mocks
record
how
you
use
them
allowing
you
to
make
assertions
about
what
your
code
has
done
to
them
.
q
h6hvubeubhu
)
q
}
q
(
h5X
:
class
:
MagicMock
is
a
subclass
of
Mock
with
all
the
magic
methods
pre
-
created
and
ready
to
use
.
There
are
also
non
-
callable
variants
useful
when
you
are
mocking
out
objects
that
aren
'
t
callable
:
:
class
:
NonCallableMock
and
:
class
:
NonCallableMagicMock
q
h6h3h7h
:
h
<
hyh
>
}
q
(
h
]
q
hB
]
q
hD
]
q
hF
]
q
hH
]
q
uhJK
hKh
h0
]
q
(
csphinx
.
addnodes
pending_xref
q
)
q
}
q
(
h5X
:
class
:
MagicMock
q
h6h
h7h
:
h
<
U
pending_xrefq
h
>
}
q
(
U
reftypeq
X
classq
U
refwarnq
U
reftargetq
X
MagicMockq
U
refdomainq
X
pyq
hF
]
q
hD
]
q
U
refexplicitq
h
]
q
hB
]
q
hH
]
q
U
refdocq
U
mockq
U
py
:
classq
NU
py
:
moduleq
X
mockq
uhJK
h0
]
q
cdocutils
.
nodes
literal
q
)
q
}
q
(
h5h
h
>
}
q
(
h
]
q
hB
]
q
(
U
xrefq
h
X
py
-
classq
ehD
]
q
hF
]
q
hH
]
q
uh6h
h0
]
q
hYX
MagicMockq
q
}
q
(
h5U
h6h
ubah
<
U
literalq
ubaubhYX
is
a
subclass
of
q
q
}
q
(
h5X
is
a
subclass
of
q
h6h
ubh
)
q
}
q
(
h5X
Mock
q
h
>
}
q
(
h
]
q
hB
]
q
hD
]
q
hF
]
q
hH
]
q
uh6h
h0
]
q
hYX
Mockq
q
}
q
(
h5U
h6h
ubah
<
h
ubhYX
with
all
the
magic
methods
pre
-
created
and
ready
to
use
.
There
are
also
non
-
callable
variants
useful
when
you
are
mocking
out
objects
that
aren
'
t
callable
:
q
q
}
q
(
h5X
with
all
the
magic
methods
pre
-
created
and
ready
to
use
.
There
are
also
non
-
callable
variants
useful
when
you
are
mocking
out
objects
that
aren
'
t
callable
:
q
h6h
ubh
)
q
}
q
(
h5X
:
class
:
NonCallableMock
q
h6h
h7h
:
h
<
h
h
>
}
q
(
U
reftypeq
X
classq
h
h
X
NonCallableMockq
U
refdomainq
X
pyq
hF
]
q
hD
]
q
U
refexplicitq
h
]
q
hB
]
q
hH
]
r
h
h
h
Nh
h
uhJK
h0
]
r
h
)
r
}
r
(
h5h
h
>
}
r
(
h
]
r
hB
]
r
(
h
h
X
py
-
classr
ehD
]
r
hF
]
r
hH
]
r
uh6h
h0
]
r
hYX
NonCallableMockr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6h
ubh
)
r
}
r
(
h5X
:
class
:
NonCallableMagicMock
r
h6h
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
classr
h
h
X
NonCallableMagicMockr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
!
h
h
h
Nh
h
uhJK
h0
]
r
"
h
)
r
#
}
r
(
h5j
h
>
}
r
%
(
h
]
r
&
hB
]
r
'
(
h
j
X
py
-
classr
(
ehD
]
r
)
hF
]
r
*
hH
]
r
+
uh6j
h0
]
r
hYX
NonCallableMagicMockr
-
r
.
}
r
/
(
h5U
h6j
#
ubah
<
h
ubaubeubhu
)
r0
}
r1
(
h5X
The
:
func
:
patch
decorators
makes
it
easy
to
temporarily
replace
classes
in
a
particular
module
with
a
Mock
object
.
By
default
patch
will
create
a
MagicMock
for
you
.
You
can
specify
an
alternative
class
of
Mock
using
the
new_callable
argument
to
patch
.
r2
h6h3h7h
:
h
<
hyh
>
}
r3
(
h
]
r4
hB
]
r5
hD
]
r6
hF
]
r7
hH
]
r8
uhJK
hKh
h0
]
r9
(
hYX
The
r
:
r
;
}
r
<
(
h5X
The
r
=
h6j0
ubh
)
r
>
}
r
?
(
h5X
:
func
:
patch
r
h6j0
h7h
:
h
<
h
h
>
}
rA
(
U
reftyperB
X
funcrC
h
h
X
patchrD
U
refdomainrE
X
pyrF
hF
]
rG
hD
]
rH
U
refexplicitrI
h
]
rJ
hB
]
rK
hH
]
rL
h
h
h
Nh
h
uhJK
h0
]
rM
h
)
rN
}
rO
(
h5j
h
>
}
rP
(
h
]
rQ
hB
]
rR
(
h
jF
X
py
-
funcrS
ehD
]
rT
hF
]
rU
hH
]
rV
uh6j
>
h0
]
rW
hYX
patch
(
)
rX
rY
}
rZ
(
h5U
h6jN
ubah
<
h
ubaubhYXW
decorators
makes
it
easy
to
temporarily
replace
classes
in
a
particular
module
with
a
r
[
r
\
}
r
]
(
h5XW
decorators
makes
it
easy
to
temporarily
replace
classes
in
a
particular
module
with
a
r
^
h6j0
ubh
)
r_
}
r
(
h5X
Mock
ra
h
>
}
rb
(
h
]
rc
hB
]
rd
hD
]
re
hF
]
rf
hH
]
rg
uh6j0
h0
]
rh
hYX
Mockri
rj
}
rk
(
h5U
h6j_
ubah
<
h
ubhYX
object
.
By
default
rl
rm
}
rn
(
h5X
object
.
By
default
ro
h6j0
ubh
)
rp
}
rq
(
h5X
patch
rr
h
>
}
rs
(
h
]
rt
hB
]
ru
hD
]
rv
hF
]
rw
hH
]
rx
uh6j0
h0
]
ry
hYX
patchrz
r
{
}
r
|
(
h5U
h6jp
ubah
<
h
ubhYX
will
create
a
r
}
r
~
}
r
(
h5X
will
create
a
r
h6j0
ubh
)
r
}
r
(
h5X
MagicMock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j0
h0
]
r
hYX
MagicMockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX2
for
you
.
You
can
specify
an
alternative
class
of
r
r
}
r
(
h5X2
for
you
.
You
can
specify
an
alternative
class
of
r
h6j0
ubh
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j0
h0
]
r
hYX
Mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
using
the
r
r
}
r
(
h5X
using
the
r
h6j0
ubh
)
r
}
r
(
h5X
new_callable
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j0
h0
]
r
hYX
new_callabler
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
argument
to
r
r
}
r
(
h5X
argument
to
r
h6j0
ubh
)
r
}
r
(
h5X
patch
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j0
h0
]
r
hYX
patchr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
r
}
r
(
h5X
.
h6j0
ubeubcsphinx
.
addnodes
index
r
)
r
}
r
(
h5U
h6h3h7h
:
h
<
U
indexr
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
U
singler
X
side_effectU
index
-
0r
U
tr
aU
inliner
uhJK
hKh
h0
]
r
ubcdocutils
.
nodes
target
r
)
r
}
r
(
h5U
h6h3h7h
:
h
<
U
targetr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
j
ahH
]
r
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
j
]
r
(
j
X
return_valueU
index
-
1r
U
tr
aj
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
j
ahH
]
r
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
j
]
r
(
j
X
wrapsU
index
-
2r
U
tr
aj
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
j
ahH
]
r
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
j
]
r
(
j
X
nameU
index
-
3r
U
tr
aj
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
j
ahH
]
r
uhJK
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
!
hD
]
r
"
h
]
r
#
hB
]
r
hH
]
r
%
j
]
r
&
(
j
X
specU
index
-
4r
'
U
tr
(
aj
uhJK
"
hKh
h0
]
r
)
ubj
)
r
*
}
r
+
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
h
]
r
-
hB
]
r
.
hD
]
r
/
hF
]
r0
j
'
ahH
]
r1
uhJK
"
hKh
h0
]
r2
ubj
)
r3
}
r4
(
h5U
h6h3h7Nh
<
j
h
>
}
r5
(
hF
]
r6
hD
]
r7
h
]
r8
hB
]
r9
hH
]
r
:
U
entriesr
;
]
r
<
(
j
X
Mock
(
class
in
mock
)
h
U
tr
=
auhJNhKh
h0
]
r
>
ubcsphinx
.
addnodes
desc
r
?
)
r
}
rA
(
h5U
h6h3h7Nh
<
U
descrB
h
>
}
rC
(
U
noindexrD
U
domainrE
X
pyrF
hF
]
rG
hD
]
rH
h
]
rI
hB
]
rJ
hH
]
rK
U
objtyperL
X
classrM
U
desctyperN
jM
uhJNhKh
h0
]
rO
(
csphinx
.
addnodes
desc_signature
rP
)
rQ
}
rR
(
h5Xg
Mock
(
spec
=
None
side_effect
=
None
return_value
=
DEFAULT
wraps
=
None
name
=
None
spec_set
=
None
*
*
kwargs
)
rS
h6j
h7h
:
h
<
U
desc_signaturerT
h
>
}
rU
(
hF
]
rV
h
aU
modulerW
h
hD
]
rX
h
]
rY
hB
]
rZ
hH
]
r
[
h
aU
fullnamer
\
X
Mockr
]
U
classr
^
U
U
firstr_
uhJM
hKh
h0
]
r
(
csphinx
.
addnodes
desc_annotation
ra
)
rb
}
rc
(
h5X
class
rd
h6jQ
h7h
:
h
<
U
desc_annotationre
h
>
}
rf
(
h
]
rg
hB
]
rh
hD
]
ri
hF
]
rj
hH
]
rk
uhJM
hKh
h0
]
rl
hYX
class
rm
rn
}
ro
(
h5U
h6jb
ubaubcsphinx
.
addnodes
desc_name
rp
)
rq
}
rr
(
h5j
]
h6jQ
h7h
:
h
<
U
desc_namers
h
>
}
rt
(
h
]
ru
hB
]
rv
hD
]
rw
hF
]
rx
hH
]
ry
uhJM
hKh
h0
]
rz
hYX
Mockr
{
r
|
}
r
}
(
h5U
h6jq
ubaubcsphinx
.
addnodes
desc_parameterlist
r
~
)
r
}
r
(
h5U
h6jQ
h7h
:
h
<
U
desc_parameterlistr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
csphinx
.
addnodes
desc_parameter
r
)
r
}
r
(
h5X
spec
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec
=
Noner
r
}
r
(
h5U
h6j
ubah
<
U
desc_parameterr
ubj
)
r
}
r
(
h5X
side_effect
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effect
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
return_value
=
DEFAULTr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_value
=
DEFAULTr
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
wraps
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
wraps
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
name
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
name
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
spec_set
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_set
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
*
*
kwargsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
*
kwargsr
r
}
r
(
h5U
h6j
ubah
<
j
ubeubeubcsphinx
.
addnodes
desc_content
r
)
r
}
r
(
h5U
h6j
h7h
:
h
<
U
desc_contentr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5Xr
Create
a
new
Mock
object
.
Mock
takes
several
optional
arguments
that
specify
the
behaviour
of
the
Mock
object
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
%
hKh
h0
]
r
(
hYX
Create
a
new
r
r
}
r
(
h5X
Create
a
new
r
h6j
ubh
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
object
.
r
r
}
r
(
h5X
object
.
r
h6j
ubh
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXP
takes
several
optional
arguments
that
specify
the
behaviour
of
the
Mock
object
:
r
r
}
r
(
h5XP
takes
several
optional
arguments
that
specify
the
behaviour
of
the
Mock
object
:
r
h6j
ubeubcdocutils
.
nodes
bullet_list
r
!
)
r
"
}
r
#
(
h5U
h6j
h7h
:
h
<
U
bullet_listr
h
>
}
r
%
(
U
bulletr
&
X
*
hF
]
r
'
hD
]
r
(
h
]
r
)
hB
]
r
*
hH
]
r
+
uhJK
(
hKh
h0
]
r
(
cdocutils
.
nodes
list_item
r
-
)
r
.
}
r
/
(
h5X
spec
:
This
can
be
either
a
list
of
strings
or
an
existing
object
(
a
class
or
instance
)
that
acts
as
the
specification
for
the
mock
object
.
If
you
pass
in
an
object
then
a
list
of
strings
is
formed
by
calling
dir
on
the
object
(
excluding
unsupported
magic
attributes
and
methods
)
.
Accessing
any
attribute
not
in
this
list
will
raise
an
AttributeError
.
If
spec
is
an
object
(
rather
than
a
list
of
strings
)
then
:
attr
:
__class__
returns
the
class
of
the
spec
object
.
This
allows
mocks
to
pass
isinstance
tests
.
r0
h6j
"
h7h
:
h
<
U
list_itemr1
h
>
}
r2
(
h
]
r3
hB
]
r4
hD
]
r5
hF
]
r6
hH
]
r7
uhJNhKh
h0
]
r8
(
hu
)
r9
}
r
:
(
h5Xb
spec
:
This
can
be
either
a
list
of
strings
or
an
existing
object
(
a
class
or
instance
)
that
acts
as
the
specification
for
the
mock
object
.
If
you
pass
in
an
object
then
a
list
of
strings
is
formed
by
calling
dir
on
the
object
(
excluding
unsupported
magic
attributes
and
methods
)
.
Accessing
any
attribute
not
in
this
list
will
raise
an
AttributeError
.
r
;
h6j
.
h7h
:
h
<
hyh
>
}
r
<
(
h
]
r
=
hB
]
r
>
hD
]
r
?
hF
]
r
hH
]
rA
uhJK
(
h0
]
rB
(
h
)
rC
}
rD
(
h5X
spec
rE
h
>
}
rF
(
h
]
rG
hB
]
rH
hD
]
rI
hF
]
rJ
hH
]
rK
uh6j9
h0
]
rL
hYX
specrM
rN
}
rO
(
h5U
h6jC
ubah
<
h
ubhYXK
:
This
can
be
either
a
list
of
strings
or
an
existing
object
(
a
class
or
instance
)
that
acts
as
the
specification
for
the
mock
object
.
If
you
pass
in
an
object
then
a
list
of
strings
is
formed
by
calling
dir
on
the
object
(
excluding
unsupported
magic
attributes
and
methods
)
.
Accessing
any
attribute
not
in
this
list
will
raise
an
rP
rQ
}
rR
(
h5XK
:
This
can
be
either
a
list
of
strings
or
an
existing
object
(
a
class
or
instance
)
that
acts
as
the
specification
for
the
mock
object
.
If
you
pass
in
an
object
then
a
list
of
strings
is
formed
by
calling
dir
on
the
object
(
excluding
unsupported
magic
attributes
and
methods
)
.
Accessing
any
attribute
not
in
this
list
will
raise
an
rS
h6j9
ubh
)
rT
}
rU
(
h5X
AttributeError
rV
h
>
}
rW
(
h
]
rX
hB
]
rY
hD
]
rZ
hF
]
r
[
hH
]
r
\
uh6j9
h0
]
r
]
hYX
AttributeErrorr
^
r_
}
r
(
h5U
h6jT
ubah
<
h
ubhYX
.
ra
}
rb
(
h5X
.
h6j9
ubeubhu
)
rc
}
rd
(
h5X
If
spec
is
an
object
(
rather
than
a
list
of
strings
)
then
:
attr
:
__class__
returns
the
class
of
the
spec
object
.
This
allows
mocks
to
pass
isinstance
tests
.
re
h6j
.
h7h
:
h
<
hyh
>
}
rf
(
h
]
rg
hB
]
rh
hD
]
ri
hF
]
rj
hH
]
rk
uhJK
.
h0
]
rl
(
hYX
If
rm
rn
}
ro
(
h5X
If
rp
h6jc
ubh
)
rq
}
rr
(
h5X
spec
rs
h
>
}
rt
(
h
]
ru
hB
]
rv
hD
]
rw
hF
]
rx
hH
]
ry
uh6jc
h0
]
rz
hYX
specr
{
r
|
}
r
}
(
h5U
h6jq
ubah
<
h
ubhYX3
is
an
object
(
rather
than
a
list
of
strings
)
then
r
~
r
}
r
(
h5X3
is
an
object
(
rather
than
a
list
of
strings
)
then
r
h6jc
ubh
)
r
}
r
(
h5X
:
attr
:
__class__
r
h6jc
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
__class__r
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
.
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
__class__r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYXA
returns
the
class
of
the
spec
object
.
This
allows
mocks
to
pass
r
r
}
r
(
h5XA
returns
the
class
of
the
spec
object
.
This
allows
mocks
to
pass
r
h6jc
ubh
)
r
}
r
(
h5X
isinstance
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jc
h0
]
r
hYX
isinstancer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
tests
.
r
r
}
r
(
h5X
tests
.
r
h6jc
ubeubeubj
-
)
r
}
r
(
h5X
spec_set
:
A
stricter
variant
of
spec
.
If
used
attempting
to
*
set
*
or
get
an
attribute
on
the
mock
that
isn
'
t
on
the
object
passed
as
spec_set
will
raise
an
AttributeError
.
r
h6j
"
h7h
:
h
<
j1
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJNhKh
h0
]
r
hu
)
r
}
r
(
h5X
spec_set
:
A
stricter
variant
of
spec
.
If
used
attempting
to
*
set
*
or
get
an
attribute
on
the
mock
that
isn
'
t
on
the
object
passed
as
spec_set
will
raise
an
AttributeError
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK2h0
]
r
(
h
)
r
}
r
(
h5X
spec_set
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_setr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
:
A
stricter
variant
of
r
r
}
r
(
h5X
:
A
stricter
variant
of
r
h6j
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
If
used
attempting
to
r
r
}
r
(
h5X
.
If
used
attempting
to
r
h6j
ubcdocutils
.
nodes
emphasis
r
)
r
}
r
(
h5X
*
set
*
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
setr
r
}
r
(
h5U
h6j
ubah
<
U
emphasisr
ubhYXD
or
get
an
attribute
on
the
mock
that
isn
'
t
on
the
object
passed
as
r
r
}
r
(
h5XD
or
get
an
attribute
on
the
mock
that
isn
'
t
on
the
object
passed
as
r
h6j
ubh
)
r
}
r
(
h5X
spec_set
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_setr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
will
raise
an
r
r
}
r
(
h5X
will
raise
an
r
h6j
ubh
)
r
}
r
(
h5X
AttributeError
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
AttributeErrorr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
r
}
r
(
h5X
.
h6j
ubeubaubj
-
)
r
}
r
(
h5X
side_effect
:
A
function
to
be
called
whenever
the
Mock
is
called
.
See
the
:
attr
:
~
Mock
.
side_effect
attribute
.
Useful
for
raising
exceptions
or
dynamically
changing
return
values
.
The
function
is
called
with
the
same
arguments
as
the
mock
and
unless
it
returns
:
data
:
DEFAULT
the
return
value
of
this
function
is
used
as
the
return
value
.
Alternatively
side_effect
can
be
an
exception
class
or
instance
.
In
this
case
the
exception
will
be
raised
when
the
mock
is
called
.
If
side_effect
is
an
iterable
then
each
call
to
the
mock
will
return
the
next
value
from
the
iterable
.
If
any
of
the
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
.
A
side_effect
can
be
cleared
by
setting
it
to
None
.
r
h6j
"
h7h
:
h
<
j1
h
>
}
r
(
h
]
r
!
hB
]
r
"
hD
]
r
#
hF
]
r
hH
]
r
%
uhJNhKh
h0
]
r
&
(
hu
)
r
'
}
r
(
(
h5XW
side_effect
:
A
function
to
be
called
whenever
the
Mock
is
called
.
See
the
:
attr
:
~
Mock
.
side_effect
attribute
.
Useful
for
raising
exceptions
or
dynamically
changing
return
values
.
The
function
is
called
with
the
same
arguments
as
the
mock
and
unless
it
returns
:
data
:
DEFAULT
the
return
value
of
this
function
is
used
as
the
return
value
.
r
)
h6j
h7h
:
h
<
hyh
>
}
r
*
(
h
]
r
+
hB
]
r
hD
]
r
-
hF
]
r
.
hH
]
r
/
uhJK6h0
]
r0
(
h
)
r1
}
r2
(
h5X
side_effect
r3
h
>
}
r4
(
h
]
r5
hB
]
r6
hD
]
r7
hF
]
r8
hH
]
r9
uh6j
'
h0
]
r
:
hYX
side_effectr
;
r
<
}
r
=
(
h5U
h6j1
ubah
<
h
ubhYX
?
:
A
function
to
be
called
whenever
the
Mock
is
called
.
See
the
r
>
r
?
}
r
(
h5X
?
:
A
function
to
be
called
whenever
the
Mock
is
called
.
See
the
rA
h6j
'
ubh
)
rB
}
rC
(
h5X
:
attr
:
~
Mock
.
side_effect
rD
h6j
'
h7h
:
h
<
h
h
>
}
rE
(
U
reftyperF
X
attrrG
h
h
X
Mock
.
side_effectrH
U
refdomainrI
X
pyrJ
hF
]
rK
hD
]
rL
U
refexplicitrM
h
]
rN
hB
]
rO
hH
]
rP
h
h
h
j
]
h
h
uhJK6h0
]
rQ
h
)
rR
}
rS
(
h5jD
h
>
}
rT
(
h
]
rU
hB
]
rV
(
h
jJ
X
py
-
attrrW
ehD
]
rX
hF
]
rY
hH
]
rZ
uh6jB
h0
]
r
[
hYX
side_effectr
\
r
]
}
r
^
(
h5U
h6jR
ubah
<
h
ubaubhYX
attribute
.
Useful
for
raising
exceptions
or
dynamically
changing
return
values
.
The
function
is
called
with
the
same
arguments
as
the
mock
and
unless
it
returns
r_
r
}
ra
(
h5X
attribute
.
Useful
for
raising
exceptions
or
dynamically
changing
return
values
.
The
function
is
called
with
the
same
arguments
as
the
mock
and
unless
it
returns
rb
h6j
'
ubh
)
rc
}
rd
(
h5X
:
data
:
DEFAULT
re
h6j
'
h7h
:
h
<
h
h
>
}
rf
(
U
reftyperg
X
datarh
h
h
X
DEFAULTri
U
refdomainrj
X
pyrk
hF
]
rl
hD
]
rm
U
refexplicitrn
h
]
ro
hB
]
rp
hH
]
rq
h
h
h
j
]
h
h
uhJK6h0
]
rr
h
)
rs
}
rt
(
h5je
h
>
}
ru
(
h
]
rv
hB
]
rw
(
h
jk
X
py
-
datarx
ehD
]
ry
hF
]
rz
hH
]
r
{
uh6jc
h0
]
r
|
hYX
DEFAULTr
}
r
~
}
r
(
h5U
h6js
ubah
<
h
ubaubhYX
the
return
value
of
this
function
is
used
as
the
return
value
.
r
r
}
r
(
h5X
the
return
value
of
this
function
is
used
as
the
return
value
.
r
h6j
'
ubeubhu
)
r
}
r
(
h5X
Alternatively
side_effect
can
be
an
exception
class
or
instance
.
In
this
case
the
exception
will
be
raised
when
the
mock
is
called
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
<
h0
]
r
(
hYX
Alternatively
r
r
}
r
(
h5X
Alternatively
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXj
can
be
an
exception
class
or
instance
.
In
this
case
the
exception
will
be
raised
when
the
mock
is
called
.
r
r
}
r
(
h5Xj
can
be
an
exception
class
or
instance
.
In
this
case
the
exception
will
be
raised
when
the
mock
is
called
.
r
h6j
ubeubhu
)
r
}
r
(
h5X
If
side_effect
is
an
iterable
then
each
call
to
the
mock
will
return
the
next
value
from
the
iterable
.
If
any
of
the
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
?
h0
]
r
(
hYX
If
r
r
}
r
(
h5X
If
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
is
an
iterable
then
each
call
to
the
mock
will
return
the
next
value
from
the
iterable
.
If
any
of
the
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
.
r
r
}
r
(
h5X
is
an
iterable
then
each
call
to
the
mock
will
return
the
next
value
from
the
iterable
.
If
any
of
the
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
.
r
h6j
ubeubhu
)
r
}
r
(
h5X7
A
side_effect
can
be
cleared
by
setting
it
to
None
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKCh0
]
r
(
hYX
A
r
r
}
r
(
h5X
A
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
!
can
be
cleared
by
setting
it
to
r
r
}
r
(
h5X
!
can
be
cleared
by
setting
it
to
r
h6j
ubh
)
r
}
r
(
h5X
None
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Noner
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
r
}
r
(
h5X
.
h6j
ubeubeubj
-
)
r
}
r
(
h5X
return_value
:
The
value
returned
when
the
mock
is
called
.
By
default
this
is
a
new
Mock
(
created
on
first
access
)
.
See
the
:
attr
:
return_value
attribute
.
r
h6j
"
h7h
:
h
<
j1
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJNhKh
h0
]
r
hu
)
r
}
r
(
h5X
return_value
:
The
value
returned
when
the
mock
is
called
.
By
default
this
is
a
new
Mock
(
created
on
first
access
)
.
See
the
:
attr
:
return_value
attribute
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKEh0
]
r
(
h
)
r
}
r
(
h5X
return_value
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXo
:
The
value
returned
when
the
mock
is
called
.
By
default
this
is
a
new
Mock
(
created
on
first
access
)
.
See
the
r
r
}
r
(
h5Xo
:
The
value
returned
when
the
mock
is
called
.
By
default
this
is
a
new
Mock
(
created
on
first
access
)
.
See
the
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
return_value
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
return_valuer
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
!
hB
]
r
"
hH
]
r
#
h
h
h
j
]
h
h
uhJKEh0
]
r
h
)
r
%
}
r
&
(
h5j
h
>
}
r
'
(
h
]
r
(
hB
]
r
)
(
h
j
X
py
-
attrr
*
ehD
]
r
+
hF
]
r
hH
]
r
-
uh6j
h0
]
r
.
hYX
return_valuer
/
r0
}
r1
(
h5U
h6j
%
ubah
<
h
ubaubhYX
attribute
.
r2
r3
}
r4
(
h5X
attribute
.
r5
h6j
ubeubaubj
-
)
r6
}
r7
(
h5X
wraps
:
Item
for
the
mock
object
to
wrap
.
If
wraps
is
not
None
then
calling
the
Mock
will
pass
the
call
through
to
the
wrapped
object
(
returning
the
real
result
and
ignoring
return_value
)
.
Attribute
access
on
the
mock
will
return
a
Mock
object
that
wraps
the
corresponding
attribute
of
the
wrapped
object
(
so
attempting
to
access
an
attribute
that
doesn
'
t
exist
will
raise
an
AttributeError
)
.
If
the
mock
has
an
explicit
return_value
set
then
calls
are
not
passed
to
the
wrapped
object
and
the
return_value
is
returned
instead
.
r8
h6j
"
h7h
:
h
<
j1
h
>
}
r9
(
h
]
r
:
hB
]
r
;
hD
]
r
<
hF
]
r
=
hH
]
r
>
uhJNhKh
h0
]
r
?
(
hu
)
r
}
rA
(
h5X
wraps
:
Item
for
the
mock
object
to
wrap
.
If
wraps
is
not
None
then
calling
the
Mock
will
pass
the
call
through
to
the
wrapped
object
(
returning
the
real
result
and
ignoring
return_value
)
.
Attribute
access
on
the
mock
will
return
a
Mock
object
that
wraps
the
corresponding
attribute
of
the
wrapped
object
(
so
attempting
to
access
an
attribute
that
doesn
'
t
exist
will
raise
an
AttributeError
)
.
rB
h6j6
h7h
:
h
<
hyh
>
}
rC
(
h
]
rD
hB
]
rE
hD
]
rF
hF
]
rG
hH
]
rH
uhJKIh0
]
rI
(
h
)
rJ
}
rK
(
h5X
wraps
rL
h
>
}
rM
(
h
]
rN
hB
]
rO
hD
]
rP
hF
]
rQ
hH
]
rR
uh6j
h0
]
rS
hYX
wrapsrT
rU
}
rV
(
h5U
h6jJ
ubah
<
h
ubhYX
'
:
Item
for
the
mock
object
to
wrap
.
If
rW
rX
}
rY
(
h5X
'
:
Item
for
the
mock
object
to
wrap
.
If
rZ
h6j
ubh
)
r
[
}
r
\
(
h5X
wraps
r
]
h
>
}
r
^
(
h
]
r_
hB
]
r
hD
]
ra
hF
]
rb
hH
]
rc
uh6j
h0
]
rd
hYX
wrapsre
rf
}
rg
(
h5U
h6j
[
ubah
<
h
ubhYX
|
is
not
None
then
calling
the
Mock
will
pass
the
call
through
to
the
wrapped
object
(
returning
the
real
result
and
ignoring
rh
ri
}
rj
(
h5X
|
is
not
None
then
calling
the
Mock
will
pass
the
call
through
to
the
wrapped
object
(
returning
the
real
result
and
ignoring
rk
h6j
ubh
)
rl
}
rm
(
h5X
return_value
rn
h
>
}
ro
(
h
]
rp
hB
]
rq
hD
]
rr
hF
]
rs
hH
]
rt
uh6j
h0
]
ru
hYX
return_valuerv
rw
}
rx
(
h5U
h6jl
ubah
<
h
ubhYX
)
.
Attribute
access
on
the
mock
will
return
a
Mock
object
that
wraps
the
corresponding
attribute
of
the
wrapped
object
(
so
attempting
to
access
an
attribute
that
doesn
'
t
exist
will
raise
an
ry
rz
}
r
{
(
h5X
)
.
Attribute
access
on
the
mock
will
return
a
Mock
object
that
wraps
the
corresponding
attribute
of
the
wrapped
object
(
so
attempting
to
access
an
attribute
that
doesn
'
t
exist
will
raise
an
r
|
h6j
ubh
)
r
}
}
r
~
(
h5X
AttributeError
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
AttributeErrorr
r
}
r
(
h5U
h6j
}
ubah
<
h
ubhYX
)
.
r
r
}
r
(
h5X
)
.
r
h6j
ubeubhu
)
r
}
r
(
h5X
If
the
mock
has
an
explicit
return_value
set
then
calls
are
not
passed
to
the
wrapped
object
and
the
return_value
is
returned
instead
.
r
h6j6
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKPh0
]
r
(
hYX
If
the
mock
has
an
explicit
r
r
}
r
(
h5X
If
the
mock
has
an
explicit
r
h6j
ubh
)
r
}
r
(
h5X
return_value
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
=
set
then
calls
are
not
passed
to
the
wrapped
object
and
the
r
r
}
r
(
h5X
=
set
then
calls
are
not
passed
to
the
wrapped
object
and
the
r
h6j
ubh
)
r
}
r
(
h5X
return_value
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
is
returned
instead
.
r
r
}
r
(
h5X
is
returned
instead
.
r
h6j
ubeubeubj
-
)
r
}
r
(
h5X
name
:
If
the
mock
has
a
name
then
it
will
be
used
in
the
repr
of
the
mock
.
This
can
be
useful
for
debugging
.
The
name
is
propagated
to
child
mocks
.
r
h6j
"
h7h
:
h
<
j1
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJNhKh
h0
]
r
hu
)
r
}
r
(
h5X
name
:
If
the
mock
has
a
name
then
it
will
be
used
in
the
repr
of
the
mock
.
This
can
be
useful
for
debugging
.
The
name
is
propagated
to
child
mocks
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKSh0
]
r
(
h
)
r
}
r
(
h5X
name
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
namer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
:
If
the
mock
has
a
name
then
it
will
be
used
in
the
repr
of
the
mock
.
This
can
be
useful
for
debugging
.
The
name
is
propagated
to
child
mocks
.
r
r
}
r
(
h5X
:
If
the
mock
has
a
name
then
it
will
be
used
in
the
repr
of
the
mock
.
This
can
be
useful
for
debugging
.
The
name
is
propagated
to
child
mocks
.
r
h6j
ubeubaubeubhu
)
r
}
r
(
h5X
Mocks
can
also
be
called
with
arbitrary
keyword
arguments
.
These
will
be
used
to
set
attributes
on
the
mock
after
it
is
created
.
See
the
:
meth
:
configure_mock
method
for
details
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKWhKh
h0
]
r
(
hYX
Mocks
can
also
be
called
with
arbitrary
keyword
arguments
.
These
will
be
used
to
set
attributes
on
the
mock
after
it
is
created
.
See
the
r
r
}
r
(
h5X
Mocks
can
also
be
called
with
arbitrary
keyword
arguments
.
These
will
be
used
to
set
attributes
on
the
mock
after
it
is
created
.
See
the
r
h6j
ubh
)
r
}
r
(
h5X
:
meth
:
configure_mock
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
methr
h
h
X
configure_mockr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJKWh0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
methr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
configure_mock
(
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
method
for
details
.
r
r
}
r
(
h5X
method
for
details
.
r
h6j
ubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
"
assert_called_with
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
!
hF
]
r
"
hD
]
r
#
h
]
r
hB
]
r
%
hH
]
r
&
jL
X
methodr
'
jN
j
'
uhJNhKh
h0
]
r
(
(
jP
)
r
)
}
r
*
(
h5X
#
assert_called_with
(
*
args
*
*
kwargs
)
r
+
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
-
h
ajW
h
hD
]
r
.
h
]
r
/
hB
]
r0
hH
]
r1
h
aj
\
X
Mock
.
assert_called_withr2
j
^
j
]
j_
uhJKhhKh
h0
]
r3
(
jp
)
r4
}
r5
(
h5X
assert_called_withr6
h6j
)
h7h
:
h
<
js
h
>
}
r7
(
h
]
r8
hB
]
r9
hD
]
r
:
hF
]
r
;
hH
]
r
<
uhJKhhKh
h0
]
r
=
hYX
assert_called_withr
>
r
?
}
r
(
h5U
h6j4
ubaubj
~
)
rA
}
rB
(
h5U
h6j
)
h7h
:
h
<
j
h
>
}
rC
(
h
]
rD
hB
]
rE
hD
]
rF
hF
]
rG
hH
]
rH
uhJKhhKh
h0
]
rI
(
j
)
rJ
}
rK
(
h5X
*
argsrL
h
>
}
rM
(
h
]
rN
hB
]
rO
hD
]
rP
hF
]
rQ
hH
]
rR
uh6jA
h0
]
rS
hYX
*
argsrT
rU
}
rV
(
h5U
h6jJ
ubah
<
j
ubj
)
rW
}
rX
(
h5X
*
*
kwargsrY
h
>
}
rZ
(
h
]
r
[
hB
]
r
\
hD
]
r
]
hF
]
r
^
hH
]
r_
uh6jA
h0
]
r
hYX
*
*
kwargsra
rb
}
rc
(
h5U
h6jW
ubah
<
j
ubeubeubj
)
rd
}
re
(
h5U
h6j
h7h
:
h
<
j
h
>
}
rf
(
h
]
rg
hB
]
rh
hD
]
ri
hF
]
rj
hH
]
rk
uhJKhhKh
h0
]
rl
(
hu
)
rm
}
rn
(
h5XU
This
method
is
a
convenient
way
of
asserting
that
calls
are
made
in
a
particular
way
:
ro
h6jd
h7h
:
h
<
hyh
>
}
rp
(
h
]
rq
hB
]
rr
hD
]
rs
hF
]
rt
hH
]
ru
uhJK
^
hKh
h0
]
rv
hYXU
This
method
is
a
convenient
way
of
asserting
that
calls
are
made
in
a
particular
way
:
rw
rx
}
ry
(
h5jo
h6jm
ubaubcdocutils
.
nodes
literal_block
rz
)
r
{
}
r
|
(
h5X
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
method
(
1
2
3
test
=
'
wow
'
)
<
Mock
name
=
'
mock
.
method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
method
.
assert_called_with
(
1
2
3
test
=
'
wow
'
)
r
}
h6jd
h7h
:
h
<
U
literal_blockr
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJKahKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
method
(
1
2
3
test
=
'
wow
'
)
<
Mock
name
=
'
mock
.
method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
method
.
assert_called_with
(
1
2
3
test
=
'
wow
'
)
r
r
}
r
(
h5U
h6j
{
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
'
assert_called_once_with
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
(
assert_called_once_with
(
*
args
*
*
kwargs
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
assert_called_once_withr
j
^
j
]
j_
uhJKyhKh
h0
]
r
(
jp
)
r
}
r
(
h5X
assert_called_once_withr
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKyhKh
h0
]
r
hYX
assert_called_once_withr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKyhKh
h0
]
r
(
j
)
r
}
r
(
h5X
*
argsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
argsr
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
*
*
kwargsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
*
kwargsr
r
}
r
(
h5U
h6j
ubah
<
j
ubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKyhKh
h0
]
r
(
hu
)
r
}
r
(
h5XN
Assert
that
the
mock
was
called
exactly
once
and
with
the
specified
arguments
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJKkhKh
h0
]
r
hYXN
Assert
that
the
mock
was
called
exactly
once
and
with
the
specified
arguments
.
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5X
#
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
.
assert_called_once_with
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
.
assert_called_once_with
(
'
foo
'
bar
=
'
baz
'
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Expected
to
be
called
once
.
Called
2
times
.
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJKnhKh
h0
]
r
hYX
#
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
.
assert_called_once_with
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
(
'
foo
'
bar
=
'
baz
'
)
>
>
>
mock
.
assert_called_once_with
(
'
foo
'
bar
=
'
baz
'
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Expected
to
be
called
once
.
Called
2
times
.
r
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
assert_any_call
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
assert_any_call
(
*
args
*
*
kwargs
)
r
!
h6j
h7h
:
h
<
jT
h
>
}
r
"
(
hF
]
r
#
h
ajW
h
hD
]
r
h
]
r
%
hB
]
r
&
hH
]
r
'
h
aj
\
X
Mock
.
assert_any_callr
(
j
^
j
]
j_
uhJK
hKh
h0
]
r
)
(
jp
)
r
*
}
r
+
(
h5X
assert_any_callr
h6j
h7h
:
h
<
js
h
>
}
r
-
(
h
]
r
.
hB
]
r
/
hD
]
r0
hF
]
r1
hH
]
r2
uhJK
hKh
h0
]
r3
hYX
assert_any_callr4
r5
}
r6
(
h5U
h6j
*
ubaubj
~
)
r7
}
r8
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r9
(
h
]
r
:
hB
]
r
;
hD
]
r
<
hF
]
r
=
hH
]
r
>
uhJK
hKh
h0
]
r
?
(
j
)
r
}
rA
(
h5X
*
argsrB
h
>
}
rC
(
h
]
rD
hB
]
rE
hD
]
rF
hF
]
rG
hH
]
rH
uh6j7
h0
]
rI
hYX
*
argsrJ
rK
}
rL
(
h5U
h6j
ubah
<
j
ubj
)
rM
}
rN
(
h5X
*
*
kwargsrO
h
>
}
rP
(
h
]
rQ
hB
]
rR
hD
]
rS
hF
]
rT
hH
]
rU
uh6j7
h0
]
rV
hYX
*
*
kwargsrW
rX
}
rY
(
h5U
h6jM
ubah
<
j
ubeubeubj
)
rZ
}
r
[
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
\
(
h
]
r
]
hB
]
r
^
hD
]
r_
hF
]
r
hH
]
ra
uhJK
hKh
h0
]
rb
(
hu
)
rc
}
rd
(
h5X
=
assert
the
mock
has
been
called
with
the
specified
arguments
.
re
h6jZ
h7h
:
h
<
hyh
>
}
rf
(
h
]
rg
hB
]
rh
hD
]
ri
hF
]
rj
hH
]
rk
uhJK
|
hKh
h0
]
rl
hYX
=
assert
the
mock
has
been
called
with
the
specified
arguments
.
rm
rn
}
ro
(
h5je
h6jc
ubaubhu
)
rp
}
rq
(
h5X
The
assert
passes
if
the
mock
has
*
ever
*
been
called
unlike
:
meth
:
assert_called_with
and
:
meth
:
assert_called_once_with
that
only
pass
if
the
call
is
the
most
recent
one
.
rr
h6jZ
h7h
:
h
<
hyh
>
}
rs
(
h
]
rt
hB
]
ru
hD
]
rv
hF
]
rw
hH
]
rx
uhJK
~
hKh
h0
]
ry
(
hYX
"
The
assert
passes
if
the
mock
has
rz
r
{
}
r
|
(
h5X
"
The
assert
passes
if
the
mock
has
r
}
h6jp
ubj
)
r
~
}
r
(
h5X
*
ever
*
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jp
h0
]
r
hYX
everr
r
}
r
(
h5U
h6j
~
ubah
<
j
ubhYX
been
called
unlike
r
r
}
r
(
h5X
been
called
unlike
r
h6jp
ubh
)
r
}
r
(
h5X
:
meth
:
assert_called_with
r
h6jp
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
methr
h
h
X
assert_called_withr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
~
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
methr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
assert_called_with
(
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6jp
ubh
)
r
}
r
(
h5X
:
meth
:
assert_called_once_with
r
h6jp
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
methr
h
h
X
assert_called_once_withr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
~
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
methr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
assert_called_once_with
(
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX3
that
only
pass
if
the
call
is
the
most
recent
one
.
r
r
}
r
(
h5X3
that
only
pass
if
the
call
is
the
most
recent
one
.
r
h6jp
ubeubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
1
2
arg
=
'
thing
'
)
>
>
>
mock
(
'
some
'
'
thing
'
'
else
'
)
>
>
>
mock
.
assert_any_call
(
1
2
arg
=
'
thing
'
)
r
h6jZ
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJK
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
1
2
arg
=
'
thing
'
)
>
>
>
mock
(
'
some
'
'
thing
'
'
else
'
)
>
>
>
mock
.
assert_any_call
(
1
2
arg
=
'
thing
'
)
r
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
assert_has_calls
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
(
assert_has_calls
(
calls
any_order
=
False
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
assert_has_callsr
j
^
j
]
j_
uhJK
hKh
h0
]
r
(
jp
)
r
}
r
(
h5X
assert_has_callsr
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
assert_has_callsr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
j
)
r
}
r
(
h5X
callsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
!
hF
]
r
"
hH
]
r
#
uh6j
h0
]
r
hYX
callsr
%
r
&
}
r
'
(
h5U
h6j
ubah
<
j
ubj
)
r
(
}
r
)
(
h5X
any_order
=
Falser
*
h
>
}
r
+
(
h
]
r
hB
]
r
-
hD
]
r
.
hF
]
r
/
hH
]
r0
uh6j
h0
]
r1
hYX
any_order
=
Falser2
r3
}
r4
(
h5U
h6j
(
ubah
<
j
ubeubeubj
)
r5
}
r6
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r7
(
h
]
r8
hB
]
r9
hD
]
r
:
hF
]
r
;
hH
]
r
<
uhJK
hKh
h0
]
r
=
(
hu
)
r
>
}
r
?
(
h5Xi
assert
the
mock
has
been
called
with
the
specified
calls
.
The
mock_calls
list
is
checked
for
the
calls
.
r
h6j5
h7h
:
h
<
hyh
>
}
rA
(
h
]
rB
hB
]
rC
hD
]
rD
hF
]
rE
hH
]
rF
uhJK
hKh
h0
]
rG
(
hYX
>
assert
the
mock
has
been
called
with
the
specified
calls
.
The
rH
rI
}
rJ
(
h5X
>
assert
the
mock
has
been
called
with
the
specified
calls
.
The
rK
h6j
>
ubh
)
rL
}
rM
(
h5X
mock_calls
rN
h
>
}
rO
(
h
]
rP
hB
]
rQ
hD
]
rR
hF
]
rS
hH
]
rT
uh6j
>
h0
]
rU
hYX
mock_callsrV
rW
}
rX
(
h5U
h6jL
ubah
<
h
ubhYX
list
is
checked
for
the
calls
.
rY
rZ
}
r
[
(
h5X
list
is
checked
for
the
calls
.
r
\
h6j
>
ubeubhu
)
r
]
}
r
^
(
h5X
If
any_order
is
False
(
the
default
)
then
the
calls
must
be
sequential
.
There
can
be
extra
calls
before
or
after
the
specified
calls
.
r_
h6j5
h7h
:
h
<
hyh
>
}
r
(
h
]
ra
hB
]
rb
hD
]
rc
hF
]
rd
hH
]
re
uhJK
hKh
h0
]
rf
(
hYX
If
rg
rh
}
ri
(
h5X
If
rj
h6j
]
ubh
)
rk
}
rl
(
h5X
any_order
rm
h
>
}
rn
(
h
]
ro
hB
]
rp
hD
]
rq
hF
]
rr
hH
]
rs
uh6j
]
h0
]
rt
hYX
any_orderru
rv
}
rw
(
h5U
h6jk
ubah
<
h
ubhYXx
is
False
(
the
default
)
then
the
calls
must
be
sequential
.
There
can
be
extra
calls
before
or
after
the
specified
calls
.
rx
ry
}
rz
(
h5Xx
is
False
(
the
default
)
then
the
calls
must
be
sequential
.
There
can
be
extra
calls
before
or
after
the
specified
calls
.
r
{
h6j
]
ubeubhu
)
r
|
}
r
}
(
h5Xj
If
any_order
is
True
then
the
calls
can
be
in
any
order
but
they
must
all
appear
in
:
attr
:
mock_calls
.
r
~
h6j5
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hYX
If
r
r
}
r
(
h5X
If
r
h6j
|
ubh
)
r
}
r
(
h5X
any_order
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
|
h0
]
r
hYX
any_orderr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXI
is
True
then
the
calls
can
be
in
any
order
but
they
must
all
appear
in
r
r
}
r
(
h5XI
is
True
then
the
calls
can
be
in
any
order
but
they
must
all
appear
in
r
h6j
|
ubh
)
r
}
r
(
h5X
:
attr
:
mock_calls
r
h6j
|
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
mock_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
.
r
}
r
(
h5X
.
h6j
|
ubeubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
1
)
>
>
>
mock
(
2
)
>
>
>
mock
(
3
)
>
>
>
mock
(
4
)
>
>
>
calls
=
[
call
(
2
)
call
(
3
)
]
>
>
>
mock
.
assert_has_calls
(
calls
)
>
>
>
calls
=
[
call
(
4
)
call
(
2
)
call
(
3
)
]
>
>
>
mock
.
assert_has_calls
(
calls
any_order
=
True
)
r
h6j5
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJK
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
1
)
>
>
>
mock
(
2
)
>
>
>
mock
(
3
)
>
>
>
mock
(
4
)
>
>
>
calls
=
[
call
(
2
)
call
(
3
)
]
>
>
>
mock
.
assert_has_calls
(
calls
)
>
>
>
calls
=
[
call
(
4
)
call
(
2
)
call
(
3
)
]
>
>
>
mock
.
assert_has_calls
(
calls
any_order
=
True
)
r
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
reset_mock
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
reset_mock
(
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
reset_mockr
j
^
j
]
j_
uhJK
hKh
h0
]
r
(
jp
)
r
}
r
(
h5X
reset_mockr
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
reset_mockr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
ubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hu
)
r
}
r
(
h5XF
The
reset_mock
method
resets
all
the
call
attributes
on
a
mock
object
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYXF
The
reset_mock
method
resets
all
the
call
attributes
on
a
mock
object
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5Xu
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
'
hello
'
)
>
>
>
mock
.
called
True
>
>
>
mock
.
reset_mock
(
)
>
>
>
mock
.
called
Falser
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
!
h
]
r
"
hB
]
r
#
hH
]
r
U
groupsr
%
]
r
&
hnaho
}
r
'
uhJK
hKh
h0
]
r
(
hYXu
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
'
hello
'
)
>
>
>
mock
.
called
True
>
>
>
mock
.
reset_mock
(
)
>
>
>
mock
.
called
Falser
)
r
*
}
r
+
(
h5U
h6j
ubaubhu
)
r
}
r
-
(
h5X
)
This
can
be
useful
where
you
want
to
make
a
series
of
assertions
that
reuse
the
same
object
.
Note
that
reset_mock
*
doesn
'
t
*
clear
the
return
value
:
attr
:
side_effect
or
any
child
attributes
you
have
set
using
normal
assignment
.
Child
mocks
and
the
return
value
mock
(
if
any
)
are
reset
as
well
.
r
.
h6j
h7h
:
h
<
hyh
>
}
r
/
(
h
]
r0
hB
]
r1
hD
]
r2
hF
]
r3
hH
]
r4
uhJK
hKh
h0
]
r5
(
hYXg
This
can
be
useful
where
you
want
to
make
a
series
of
assertions
that
reuse
the
same
object
.
Note
that
r6
r7
}
r8
(
h5Xg
This
can
be
useful
where
you
want
to
make
a
series
of
assertions
that
reuse
the
same
object
.
Note
that
r9
h6j
ubh
)
r
:
}
r
;
(
h5X
reset_mock
r
<
h
>
}
r
=
(
h
]
r
>
hB
]
r
?
hD
]
r
hF
]
rA
hH
]
rB
uh6j
h0
]
rC
hYX
reset_mockrD
rE
}
rF
(
h5U
h6j
:
ubah
<
h
ubhYX
rG
}
rH
(
h5X
h6j
ubj
)
rI
}
rJ
(
h5X
*
doesn
'
t
*
rK
h
>
}
rL
(
h
]
rM
hB
]
rN
hD
]
rO
hF
]
rP
hH
]
rQ
uh6j
h0
]
rR
hYX
doesn
'
trS
rT
}
rU
(
h5U
h6jI
ubah
<
j
ubhYX
clear
the
return
value
rV
rW
}
rX
(
h5X
clear
the
return
value
rY
h6j
ubh
)
rZ
}
r
[
(
h5X
:
attr
:
side_effect
r
\
h6j
h7h
:
h
<
h
h
>
}
r
]
(
U
reftyper
^
X
attrr_
h
h
X
side_effectr
U
refdomainra
X
pyrb
hF
]
rc
hD
]
rd
U
refexplicitre
h
]
rf
hB
]
rg
hH
]
rh
h
h
h
j
]
h
h
uhJK
h0
]
ri
h
)
rj
}
rk
(
h5j
\
h
>
}
rl
(
h
]
rm
hB
]
rn
(
h
jb
X
py
-
attrro
ehD
]
rp
hF
]
rq
hH
]
rr
uh6jZ
h0
]
rs
hYX
side_effectrt
ru
}
rv
(
h5U
h6jj
ubah
<
h
ubaubhYX
or
any
child
attributes
you
have
set
using
normal
assignment
.
Child
mocks
and
the
return
value
mock
(
if
any
)
are
reset
as
well
.
rw
rx
}
ry
(
h5X
or
any
child
attributes
you
have
set
using
normal
assignment
.
Child
mocks
and
the
return
value
mock
(
if
any
)
are
reset
as
well
.
rz
h6j
ubeubeubeubj
)
r
{
}
r
|
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
}
(
hF
]
r
~
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
mock_add_spec
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
#
mock_add_spec
(
spec
spec_set
=
False
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
mock_add_specr
j
^
j
]
j_
uhJK
hKh
h0
]
r
(
jp
)
r
}
r
(
h5X
mock_add_specr
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
mock_add_specr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
j
)
r
}
r
(
h5X
specr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
spec_set
=
Falser
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_set
=
Falser
r
}
r
(
h5U
h6j
ubah
<
j
ubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
Add
a
spec
to
a
mock
.
spec
can
either
be
an
object
or
a
list
of
strings
.
Only
attributes
on
the
spec
can
be
fetched
as
attributes
from
the
mock
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hYX
Add
a
spec
to
a
mock
.
r
r
}
r
(
h5X
Add
a
spec
to
a
mock
.
r
h6j
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXF
can
either
be
an
object
or
a
list
of
strings
.
Only
attributes
on
the
r
r
}
r
(
h5XF
can
either
be
an
object
or
a
list
of
strings
.
Only
attributes
on
the
r
h6j
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
can
be
fetched
as
attributes
from
the
mock
.
r
r
}
r
(
h5X
can
be
fetched
as
attributes
from
the
mock
.
r
h6j
ubeubhu
)
r
}
r
(
h5XD
If
spec_set
is
True
then
only
attributes
on
the
spec
can
be
set
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hYX
If
r
r
}
r
(
h5X
If
r
h6j
ubh
)
r
}
r
(
h5X
spec_set
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_setr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
is
r
!
r
"
}
r
#
(
h5X
is
r
h6j
ubh
)
r
%
}
r
&
(
h5X
True
r
'
h
>
}
r
(
(
h
]
r
)
hB
]
r
*
hD
]
r
+
hF
]
r
hH
]
r
-
uh6j
h0
]
r
.
hYX
Truer
/
r0
}
r1
(
h5U
h6j
%
ubah
<
h
ubhYX
-
then
only
attributes
on
the
spec
can
be
set
.
r2
r3
}
r4
(
h5X
-
then
only
attributes
on
the
spec
can
be
set
.
r5
h6j
ubeubeubeubj
)
r6
}
r7
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r8
(
hF
]
r9
hD
]
r
:
h
]
r
;
hB
]
r
<
hH
]
r
=
U
entriesr
>
]
r
?
(
j
X
attach_mock
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
rA
ubj
?
)
rB
}
rC
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
rD
(
jD
jE
X
pyrE
hF
]
rF
hD
]
rG
h
]
rH
hB
]
rI
hH
]
rJ
jL
X
methodrK
jN
jK
uhJNhKh
h0
]
rL
(
jP
)
rM
}
rN
(
h5X
attach_mock
(
mock
attribute
)
rO
h6jB
h7h
:
h
<
jT
h
>
}
rP
(
hF
]
rQ
h
ajW
h
hD
]
rR
h
]
rS
hB
]
rT
hH
]
rU
h
aj
\
X
Mock
.
attach_mockrV
j
^
j
]
j_
uhJK
hKh
h0
]
rW
(
jp
)
rX
}
rY
(
h5X
attach_mockrZ
h6jM
h7h
:
h
<
js
h
>
}
r
[
(
h
]
r
\
hB
]
r
]
hD
]
r
^
hF
]
r_
hH
]
r
uhJK
hKh
h0
]
ra
hYX
attach_mockrb
rc
}
rd
(
h5U
h6jX
ubaubj
~
)
re
}
rf
(
h5U
h6jM
h7h
:
h
<
j
h
>
}
rg
(
h
]
rh
hB
]
ri
hD
]
rj
hF
]
rk
hH
]
rl
uhJK
hKh
h0
]
rm
(
j
)
rn
}
ro
(
h5X
mockrp
h
>
}
rq
(
h
]
rr
hB
]
rs
hD
]
rt
hF
]
ru
hH
]
rv
uh6je
h0
]
rw
hYX
mockrx
ry
}
rz
(
h5U
h6jn
ubah
<
j
ubj
)
r
{
}
r
|
(
h5X
attributer
}
h
>
}
r
~
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6je
h0
]
r
hYX
attributer
r
}
r
(
h5U
h6j
{
ubah
<
j
ubeubeubj
)
r
}
r
(
h5U
h6jB
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hu
)
r
}
r
(
h5X
Attach
a
mock
as
an
attribute
of
this
one
replacing
its
name
and
parent
.
Calls
to
the
attached
mock
will
be
recorded
in
the
:
attr
:
method_calls
and
:
attr
:
mock_calls
attributes
of
this
one
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hYX
}
Attach
a
mock
as
an
attribute
of
this
one
replacing
its
name
and
parent
.
Calls
to
the
attached
mock
will
be
recorded
in
the
r
r
}
r
(
h5X
}
Attach
a
mock
as
an
attribute
of
this
one
replacing
its
name
and
parent
.
Calls
to
the
attached
mock
will
be
recorded
in
the
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
method_calls
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
method_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
method_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
mock_calls
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
mock_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJK
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
attributes
of
this
one
.
r
r
}
r
(
h5X
attributes
of
this
one
.
r
h6j
ubeubaubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
configure_mock
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
configure_mock
(
*
*
kwargs
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
configure_mockr
j
^
j
]
j_
uhJK
hKh
h0
]
r
(
jp
)
r
}
r
(
h5X
configure_mockr
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
configure_mockr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
j
)
r
}
r
(
h5X
*
*
kwargsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
!
uh6j
h0
]
r
"
hYX
*
*
kwargsr
#
r
}
r
%
(
h5U
h6j
ubah
<
j
ubaubeubj
)
r
&
}
r
'
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
(
h
]
r
)
hB
]
r
*
hD
]
r
+
hF
]
r
hH
]
r
-
uhJK
hKh
h0
]
r
.
(
hu
)
r
/
}
r0
(
h5X5
Set
attributes
on
the
mock
through
keyword
arguments
.
r1
h6j
&
h7h
:
h
<
hyh
>
}
r2
(
h
]
r3
hB
]
r4
hD
]
r5
hF
]
r6
hH
]
r7
uhJK
hKh
h0
]
r8
hYX5
Set
attributes
on
the
mock
through
keyword
arguments
.
r9
r
:
}
r
;
(
h5j1
h6j
/
ubaubhu
)
r
<
}
r
=
(
h5X
Attributes
plus
return
values
and
side
effects
can
be
set
on
child
mocks
using
standard
dot
notation
and
unpacking
a
dictionary
in
the
method
call
:
r
>
h6j
&
h7h
:
h
<
hyh
>
}
r
?
(
h
]
r
hB
]
rA
hD
]
rB
hF
]
rC
hH
]
rD
uhJK
hKh
h0
]
rE
hYX
Attributes
plus
return
values
and
side
effects
can
be
set
on
child
mocks
using
standard
dot
notation
and
unpacking
a
dictionary
in
the
method
call
:
rF
rG
}
rH
(
h5j
>
h6j
<
ubaubjz
)
rI
}
rJ
(
h5X
>
>
>
mock
=
Mock
(
)
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
.
configure_mock
(
*
*
attrs
)
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorrK
h6j
&
h7h
:
h
<
j
~
h
>
}
rL
(
U
testnodetyperM
X
doctestrN
hehfhF
]
rO
hD
]
rP
h
]
rQ
hB
]
rR
hH
]
rS
U
groupsrT
]
rU
hnaho
}
rV
uhJK
hKh
h0
]
rW
hYX
>
>
>
mock
=
Mock
(
)
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
.
configure_mock
(
*
*
attrs
)
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorrX
rY
}
rZ
(
h5U
h6jI
ubaubhu
)
r
[
}
r
\
(
h5X
The
same
thing
can
be
achieved
in
the
constructor
call
to
mocks
:
r
]
h6j
&
h7h
:
h
<
hyh
>
}
r
^
(
h
]
r_
hB
]
r
hD
]
ra
hF
]
rb
hH
]
rc
uhJK
hKh
h0
]
rd
hYX
The
same
thing
can
be
achieved
in
the
constructor
call
to
mocks
:
re
rf
}
rg
(
h5j
]
h6j
[
ubaubjz
)
rh
}
ri
(
h5X
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
=
Mock
(
some_attribute
=
'
eggs
'
*
*
attrs
)
>
>
>
mock
.
some_attribute
'
eggs
'
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorrj
h6j
&
h7h
:
h
<
j
~
h
>
}
rk
(
U
testnodetyperl
X
doctestrm
hehfhF
]
rn
hD
]
ro
h
]
rp
hB
]
rq
hH
]
rr
U
groupsrs
]
rt
hnaho
}
ru
uhJK
hKh
h0
]
rv
hYX
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
=
Mock
(
some_attribute
=
'
eggs
'
*
*
attrs
)
>
>
>
mock
.
some_attribute
'
eggs
'
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorrw
rx
}
ry
(
h5U
h6jh
ubaubhu
)
rz
}
r
{
(
h5X
^
configure_mock
exists
to
make
it
easier
to
do
configuration
after
the
mock
has
been
created
.
r
|
h6j
&
h7h
:
h
<
hyh
>
}
r
}
(
h
]
r
~
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
h
)
r
}
r
(
h5X
configure_mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jz
h0
]
r
hYX
configure_mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXN
exists
to
make
it
easier
to
do
configuration
after
the
mock
has
been
created
.
r
r
}
r
(
h5XN
exists
to
make
it
easier
to
do
configuration
after
the
mock
has
been
created
.
r
h6jz
ubeubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
__dir__
(
)
(
Mock
method
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
methodr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
__dir__
(
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
__dir__r
j
^
j
]
j_
uhJK
hKh
h0
]
r
(
jp
)
r
}
r
(
h5X
__dir__r
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
__dir__r
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
ubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
Mock
objects
limit
the
results
of
dir
(
some_mock
)
to
useful
results
.
For
mocks
with
a
spec
this
includes
all
the
permitted
attributes
for
the
mock
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
h
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
objects
limit
the
results
of
r
r
}
r
(
h5X
objects
limit
the
results
of
r
h6j
ubh
)
r
}
r
(
h5X
dir
(
some_mock
)
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
dir
(
some_mock
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
%
to
useful
results
.
For
mocks
with
a
r
r
}
r
(
h5X
%
to
useful
results
.
For
mocks
with
a
r
h6j
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX9
this
includes
all
the
permitted
attributes
for
the
mock
.
r
r
}
r
(
h5X9
this
includes
all
the
permitted
attributes
for
the
mock
.
r
h6j
ubeubhu
)
r
}
r
(
h5XN
See
:
data
:
FILTER_DIR
for
what
this
filtering
does
and
how
to
switch
it
off
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
(
hYX
See
r
r
}
r
(
h5X
See
r
h6j
ubh
)
r
!
}
r
"
(
h5X
:
data
:
FILTER_DIR
r
#
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
%
X
datar
&
h
h
X
FILTER_DIRr
'
U
refdomainr
(
X
pyr
)
hF
]
r
*
hD
]
r
+
U
refexplicitr
h
]
r
-
hB
]
r
.
hH
]
r
/
h
h
h
j
]
h
h
uhJK
h0
]
r0
h
)
r1
}
r2
(
h5j
#
h
>
}
r3
(
h
]
r4
hB
]
r5
(
h
j
)
X
py
-
datar6
ehD
]
r7
hF
]
r8
hH
]
r9
uh6j
!
h0
]
r
:
hYX
FILTER_DIRr
;
r
<
}
r
=
(
h5U
h6j1
ubah
<
h
ubaubhYX8
for
what
this
filtering
does
and
how
to
switch
it
off
.
r
>
r
?
}
r
(
h5X8
for
what
this
filtering
does
and
how
to
switch
it
off
.
rA
h6j
ubeubeubeubj
)
rB
}
rC
(
h5U
h6j
h7h
:
h
<
j
h
>
}
rD
(
hF
]
rE
hD
]
rF
h
]
rG
hB
]
rH
hH
]
rI
U
entriesrJ
]
rK
(
j
X
_get_child_mock
(
)
(
Mock
method
)
h
U
trL
auhJNhKh
h0
]
rM
ubj
?
)
rN
}
rO
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
rP
(
jD
jE
X
pyrQ
hF
]
rR
hD
]
rS
h
]
rT
hB
]
rU
hH
]
rV
jL
X
methodrW
jN
jW
uhJNhKh
h0
]
rX
(
jP
)
rY
}
rZ
(
h5X
_get_child_mock
(
*
*
kw
)
r
[
h6jN
h7h
:
h
<
jT
h
>
}
r
\
(
hF
]
r
]
h
ajW
h
hD
]
r
^
h
]
r_
hB
]
r
hH
]
ra
h
aj
\
X
Mock
.
_get_child_mockrb
j
^
j
]
j_
uhJM
hKh
h0
]
rc
(
jp
)
rd
}
re
(
h5X
_get_child_mockrf
h6jY
h7h
:
h
<
js
h
>
}
rg
(
h
]
rh
hB
]
ri
hD
]
rj
hF
]
rk
hH
]
rl
uhJM
hKh
h0
]
rm
hYX
_get_child_mockrn
ro
}
rp
(
h5U
h6jd
ubaubj
~
)
rq
}
rr
(
h5U
h6jY
h7h
:
h
<
j
h
>
}
rs
(
h
]
rt
hB
]
ru
hD
]
rv
hF
]
rw
hH
]
rx
uhJM
hKh
h0
]
ry
j
)
rz
}
r
{
(
h5X
*
*
kwr
|
h
>
}
r
}
(
h
]
r
~
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jq
h0
]
r
hYX
*
*
kwr
r
}
r
(
h5U
h6jz
ubah
<
j
ubaubeubj
)
r
}
r
(
h5U
h6jN
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
Create
the
child
mocks
for
attributes
and
return
value
.
By
default
child
mocks
will
be
the
same
type
as
the
parent
.
Subclasses
of
Mock
may
want
to
override
this
to
customize
the
way
child
mocks
are
made
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJK
hKh
h0
]
r
hYX
Create
the
child
mocks
for
attributes
and
return
value
.
By
default
child
mocks
will
be
the
same
type
as
the
parent
.
Subclasses
of
Mock
may
want
to
override
this
to
customize
the
way
child
mocks
are
made
.
r
r
}
r
(
h5j
h6j
ubaubhu
)
r
}
r
(
h5X
[
For
non
-
callable
mocks
the
callable
variant
will
be
used
(
rather
than
any
custom
subclass
)
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
[
For
non
-
callable
mocks
the
callable
variant
will
be
used
(
rather
than
any
custom
subclass
)
.
r
r
}
r
(
h5j
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
called
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
calledr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
calledr
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
calledr
r
}
r
(
h5U
h6j
ubaubaubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5XF
A
boolean
representing
whether
or
not
the
mock
object
has
been
called
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYXF
A
boolean
representing
whether
or
not
the
mock
object
has
been
called
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5XX
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
.
called
False
>
>
>
mock
(
)
>
>
>
mock
.
called
Truer
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYXX
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
.
called
False
>
>
>
mock
(
)
>
>
>
mock
.
called
Truer
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
call_count
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
call_countr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
call_countr
j
^
j
]
j_
uhJM
hKh
h0
]
r
!
jp
)
r
"
}
r
#
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
%
hB
]
r
&
hD
]
r
'
hF
]
r
(
hH
]
r
)
uhJM
hKh
h0
]
r
*
hYX
call_countr
+
r
}
r
-
(
h5U
h6j
"
ubaubaubj
)
r
.
}
r
/
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r0
(
h
]
r1
hB
]
r2
hD
]
r3
hF
]
r4
hH
]
r5
uhJM
hKh
h0
]
r6
(
hu
)
r7
}
r8
(
h5XF
An
integer
telling
you
how
many
times
the
mock
object
has
been
called
:
r9
h6j
.
h7h
:
h
<
hyh
>
}
r
:
(
h
]
r
;
hB
]
r
<
hD
]
r
=
hF
]
r
>
hH
]
r
?
uhJM
hKh
h0
]
r
hYXF
An
integer
telling
you
how
many
times
the
mock
object
has
been
called
:
rA
rB
}
rC
(
h5j9
h6j7
ubaubjz
)
rD
}
rE
(
h5Xd
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
.
call_count
0
>
>
>
mock
(
)
>
>
>
mock
(
)
>
>
>
mock
.
call_count
2rF
h6j
.
h7h
:
h
<
j
~
h
>
}
rG
(
U
testnodetyperH
X
doctestrI
hehfhF
]
rJ
hD
]
rK
h
]
rL
hB
]
rM
hH
]
rN
U
groupsrO
]
rP
hnaho
}
rQ
uhJM
hKh
h0
]
rR
hYXd
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
.
call_count
0
>
>
>
mock
(
)
>
>
>
mock
(
)
>
>
>
mock
.
call_count
2rS
rT
}
rU
(
h5U
h6jD
ubaubeubeubj
)
rV
}
rW
(
h5U
h6j
h7Nh
<
j
h
>
}
rX
(
hF
]
rY
hD
]
rZ
h
]
r
[
hB
]
r
\
hH
]
r
]
U
entriesr
^
]
r_
(
j
X
return_value
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
ra
ubj
?
)
rb
}
rc
(
h5U
h6j
h7Nh
<
jB
h
>
}
rd
(
jD
jE
X
pyre
hF
]
rf
hD
]
rg
h
]
rh
hB
]
ri
hH
]
rj
jL
X
attributerk
jN
jk
uhJNhKh
h0
]
rl
(
jP
)
rm
}
rn
(
h5X
return_valuero
h6jb
h7h
:
h
<
jT
h
>
}
rp
(
hF
]
rq
h
ajW
h
hD
]
rr
h
]
rs
hB
]
rt
hH
]
ru
h
aj
\
X
Mock
.
return_valuerv
j
^
j
]
j_
uhJM
hKh
h0
]
rw
jp
)
rx
}
ry
(
h5jo
h6jm
h7h
:
h
<
js
h
>
}
rz
(
h
]
r
{
hB
]
r
|
hD
]
r
}
hF
]
r
~
hH
]
r
uhJM
hKh
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6jx
ubaubaubj
)
r
}
r
(
h5U
h6jb
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
=
Set
this
to
configure
the
value
returned
by
calling
the
mock
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
"
hKh
h0
]
r
hYX
=
Set
this
to
configure
the
value
returned
by
calling
the
mock
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5XB
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
return_value
=
'
fish
'
>
>
>
mock
(
)
'
fish
'
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYXB
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
return_value
=
'
fish
'
>
>
>
mock
(
)
'
fish
'
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5XU
The
default
return
value
is
a
mock
object
and
you
can
configure
it
in
the
normal
way
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
+
hKh
h0
]
r
hYXU
The
default
return
value
is
a
mock
object
and
you
can
configure
it
in
the
normal
way
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
return_value
.
attribute
=
sentinel
.
Attribute
>
>
>
mock
.
return_value
(
)
<
Mock
name
=
'
mock
(
)
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
return_value
.
assert_called_with
(
)
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
.
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
return_value
.
attribute
=
sentinel
.
Attribute
>
>
>
mock
.
return_value
(
)
<
Mock
name
=
'
mock
(
)
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
return_value
.
assert_called_with
(
)
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X2
return_value
can
also
be
set
in
the
constructor
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM6
hKh
h0
]
r
(
h
)
r
}
r
(
h5X
return_value
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
can
also
be
set
in
the
constructor
:
r
r
}
r
(
h5X
can
also
be
set
in
the
constructor
:
r
h6j
ubeubjz
)
r
}
r
(
h5XD
>
>
>
mock
=
Mock
(
return_value
=
3
)
>
>
>
mock
.
return_value
3
>
>
>
mock
(
)
3r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM8
hKh
h0
]
r
hYXD
>
>
>
mock
=
Mock
(
return_value
=
3
)
>
>
>
mock
.
return_value
3
>
>
>
mock
(
)
3r
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
side_effect
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
side_effectr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
side_effectr
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
!
uhJM
hKh
h0
]
r
"
hYX
side_effectr
#
r
}
r
%
(
h5U
h6j
ubaubaubj
)
r
&
}
r
'
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
(
h
]
r
)
hB
]
r
*
hD
]
r
+
hF
]
r
hH
]
r
-
uhJM
hKh
h0
]
r
.
(
hu
)
r
/
}
r0
(
h5Xu
This
can
either
be
a
function
to
be
called
when
the
mock
is
called
or
an
exception
(
class
or
instance
)
to
be
raised
.
r1
h6j
&
h7h
:
h
<
hyh
>
}
r2
(
h
]
r3
hB
]
r4
hD
]
r5
hF
]
r6
hH
]
r7
uhJMC
hKh
h0
]
r8
hYXu
This
can
either
be
a
function
to
be
called
when
the
mock
is
called
or
an
exception
(
class
or
instance
)
to
be
raised
.
r9
r
:
}
r
;
(
h5j1
h6j
/
ubaubhu
)
r
<
}
r
=
(
h5XA
If
you
pass
in
a
function
it
will
be
called
with
same
arguments
as
the
mock
and
unless
the
function
returns
the
:
data
:
DEFAULT
singleton
the
call
to
the
mock
will
then
return
whatever
the
function
returns
.
If
the
function
returns
:
data
:
DEFAULT
then
the
mock
will
return
its
normal
value
(
from
the
:
attr
:
return_value
.
r
>
h6j
&
h7h
:
h
<
hyh
>
}
r
?
(
h
]
r
hB
]
rA
hD
]
rB
hF
]
rC
hH
]
rD
uhJMF
hKh
h0
]
rE
(
hYXp
If
you
pass
in
a
function
it
will
be
called
with
same
arguments
as
the
mock
and
unless
the
function
returns
the
rF
rG
}
rH
(
h5Xp
If
you
pass
in
a
function
it
will
be
called
with
same
arguments
as
the
mock
and
unless
the
function
returns
the
rI
h6j
<
ubh
)
rJ
}
rK
(
h5X
:
data
:
DEFAULT
rL
h6j
<
h7h
:
h
<
h
h
>
}
rM
(
U
reftyperN
X
datarO
h
h
X
DEFAULTrP
U
refdomainrQ
X
pyrR
hF
]
rS
hD
]
rT
U
refexplicitrU
h
]
rV
hB
]
rW
hH
]
rX
h
h
h
j
]
h
h
uhJMF
h0
]
rY
h
)
rZ
}
r
[
(
h5jL
h
>
}
r
\
(
h
]
r
]
hB
]
r
^
(
h
jR
X
py
-
datar_
ehD
]
r
hF
]
ra
hH
]
rb
uh6jJ
h0
]
rc
hYX
DEFAULTrd
re
}
rf
(
h5U
h6jZ
ubah
<
h
ubaubhYXh
singleton
the
call
to
the
mock
will
then
return
whatever
the
function
returns
.
If
the
function
returns
rg
rh
}
ri
(
h5Xh
singleton
the
call
to
the
mock
will
then
return
whatever
the
function
returns
.
If
the
function
returns
rj
h6j
<
ubh
)
rk
}
rl
(
h5X
:
data
:
DEFAULT
rm
h6j
<
h7h
:
h
<
h
h
>
}
rn
(
U
reftypero
X
datarp
h
h
X
DEFAULTrq
U
refdomainrr
X
pyrs
hF
]
rt
hD
]
ru
U
refexplicitrv
h
]
rw
hB
]
rx
hH
]
ry
h
h
h
j
]
h
h
uhJMF
h0
]
rz
h
)
r
{
}
r
|
(
h5jm
h
>
}
r
}
(
h
]
r
~
hB
]
r
(
h
js
X
py
-
datar
ehD
]
r
hF
]
r
hH
]
r
uh6jk
h0
]
r
hYX
DEFAULTr
r
}
r
(
h5U
h6j
{
ubah
<
h
ubaubhYX6
then
the
mock
will
return
its
normal
value
(
from
the
r
r
}
r
(
h5X6
then
the
mock
will
return
its
normal
value
(
from
the
r
h6j
<
ubh
)
r
}
r
(
h5X
:
attr
:
return_value
r
h6j
<
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
return_valuer
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJMF
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
.
r
}
r
(
h5X
.
h6j
<
ubeubhu
)
r
}
r
(
h5XU
An
example
of
a
mock
that
raises
an
exception
(
to
test
exception
handling
of
an
API
)
:
r
h6j
&
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJML
hKh
h0
]
r
hYXU
An
example
of
a
mock
that
raises
an
exception
(
to
test
exception
handling
of
an
API
)
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
side_effect
=
Exception
(
'
Boom
!
'
)
>
>
>
mock
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
Exception
:
Boom
!
r
h6j
&
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJMO
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
side_effect
=
Exception
(
'
Boom
!
'
)
>
>
>
mock
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
Exception
:
Boom
!
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X3
Using
side_effect
to
return
a
sequence
of
values
:
r
h6j
&
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMX
hKh
h0
]
r
(
hYX
Using
r
r
}
r
(
h5X
Using
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
to
return
a
sequence
of
values
:
r
r
}
r
(
h5X
to
return
a
sequence
of
values
:
r
h6j
ubeubjz
)
r
}
r
(
h5XW
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
side_effect
=
[
3
2
1
]
>
>
>
mock
(
)
mock
(
)
mock
(
)
(
3
2
1
)
r
h6j
&
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJMZ
hKh
h0
]
r
hYXW
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
side_effect
=
[
3
2
1
]
>
>
>
mock
(
)
mock
(
)
mock
(
)
(
3
2
1
)
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
The
side_effect
function
is
called
with
the
same
arguments
as
the
mock
(
so
it
is
wise
for
it
to
take
arbitrary
args
and
keyword
arguments
)
and
whatever
it
returns
is
used
as
the
return
value
for
the
call
.
The
exception
is
if
side_effect
returns
:
data
:
DEFAULT
in
which
case
the
normal
:
attr
:
return_value
is
used
.
r
h6j
&
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMa
hKh
h0
]
r
(
hYX
The
r
r
}
r
(
h5X
The
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
function
is
called
with
the
same
arguments
as
the
mock
(
so
it
is
wise
for
it
to
take
arbitrary
args
and
keyword
arguments
)
and
whatever
it
returns
is
used
as
the
return
value
for
the
call
.
The
exception
is
if
r
r
}
r
(
h5X
function
is
called
with
the
same
arguments
as
the
mock
(
so
it
is
wise
for
it
to
take
arbitrary
args
and
keyword
arguments
)
and
whatever
it
returns
is
used
as
the
return
value
for
the
call
.
The
exception
is
if
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
!
hH
]
r
"
uh6j
h0
]
r
#
hYX
side_effectr
r
%
}
r
&
(
h5U
h6j
ubah
<
h
ubhYX
returns
r
'
r
(
}
r
)
(
h5X
returns
r
*
h6j
ubh
)
r
+
}
r
(
h5X
:
data
:
DEFAULT
r
-
h6j
h7h
:
h
<
h
h
>
}
r
.
(
U
reftyper
/
X
datar0
h
h
X
DEFAULTr1
U
refdomainr2
X
pyr3
hF
]
r4
hD
]
r5
U
refexplicitr6
h
]
r7
hB
]
r8
hH
]
r9
h
h
h
j
]
h
h
uhJMa
h0
]
r
:
h
)
r
;
}
r
<
(
h5j
-
h
>
}
r
=
(
h
]
r
>
hB
]
r
?
(
h
j3
X
py
-
datar
ehD
]
rA
hF
]
rB
hH
]
rC
uh6j
+
h0
]
rD
hYX
DEFAULTrE
rF
}
rG
(
h5U
h6j
;
ubah
<
h
ubaubhYX
in
which
case
the
normal
rH
rI
}
rJ
(
h5X
in
which
case
the
normal
rK
h6j
ubh
)
rL
}
rM
(
h5X
:
attr
:
return_value
rN
h6j
h7h
:
h
<
h
h
>
}
rO
(
U
reftyperP
X
attrrQ
h
h
X
return_valuerR
U
refdomainrS
X
pyrT
hF
]
rU
hD
]
rV
U
refexplicitrW
h
]
rX
hB
]
rY
hH
]
rZ
h
h
h
j
]
h
h
uhJMa
h0
]
r
[
h
)
r
\
}
r
]
(
h5jN
h
>
}
r
^
(
h
]
r_
hB
]
r
(
h
jT
X
py
-
attrra
ehD
]
rb
hF
]
rc
hH
]
rd
uh6jL
h0
]
re
hYX
return_valuerf
rg
}
rh
(
h5U
h6j
\
ubah
<
h
ubaubhYX
is
used
.
ri
rj
}
rk
(
h5X
is
used
.
rl
h6j
ubeubjz
)
rm
}
rn
(
h5X
>
>
>
mock
=
Mock
(
return_value
=
3
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
DEFAULT
.
.
.
>
>
>
mock
.
side_effect
=
side_effect
>
>
>
mock
(
)
3ro
h6j
&
h7h
:
h
<
j
~
h
>
}
rp
(
U
testnodetyperq
X
doctestrr
hehfhF
]
rs
hD
]
rt
h
]
ru
hB
]
rv
hH
]
rw
U
groupsrx
]
ry
hnaho
}
rz
uhJMg
hKh
h0
]
r
{
hYX
>
>
>
mock
=
Mock
(
return_value
=
3
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
DEFAULT
.
.
.
>
>
>
mock
.
side_effect
=
side_effect
>
>
>
mock
(
)
3r
|
r
}
}
r
~
(
h5U
h6jm
ubaubhu
)
r
}
r
(
h5X
side_effect
can
be
set
in
the
constructor
.
Here
'
s
an
example
that
adds
one
to
the
value
the
mock
is
called
with
and
returns
it
:
r
h6j
&
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMq
hKh
h0
]
r
(
h
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXt
can
be
set
in
the
constructor
.
Here
'
s
an
example
that
adds
one
to
the
value
the
mock
is
called
with
and
returns
it
:
r
r
}
r
(
h5Xt
can
be
set
in
the
constructor
.
Here
'
s
an
example
that
adds
one
to
the
value
the
mock
is
called
with
and
returns
it
:
r
h6j
ubeubjz
)
r
}
r
(
h5Xp
>
>
>
side_effect
=
lambda
value
:
value
+
1
>
>
>
mock
=
Mock
(
side_effect
=
side_effect
)
>
>
>
mock
(
3
)
4
>
>
>
mock
(
-
8
)
-
7r
h6j
&
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJMt
hKh
h0
]
r
hYXp
>
>
>
side_effect
=
lambda
value
:
value
+
1
>
>
>
mock
=
Mock
(
side_effect
=
side_effect
)
>
>
>
mock
(
3
)
4
>
>
>
mock
(
-
8
)
-
7r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
*
Setting
side_effect
to
None
clears
it
:
r
h6j
&
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
}
hKh
h0
]
r
(
hYX
Setting
r
r
}
r
(
h5X
Setting
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
to
r
r
}
r
(
h5X
to
r
h6j
ubh
)
r
}
r
(
h5X
None
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Noner
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
clears
it
:
r
r
}
r
(
h5X
clears
it
:
r
h6j
ubeubjz
)
r
}
r
(
h5X
>
>
>
from
mock
import
Mock
>
>
>
m
=
Mock
(
side_effect
=
KeyError
return_value
=
3
)
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyError
>
>
>
m
.
side_effect
=
None
>
>
>
m
(
)
3r
h6j
&
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
from
mock
import
Mock
>
>
>
m
=
Mock
(
side_effect
=
KeyError
return_value
=
3
)
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyError
>
>
>
m
.
side_effect
=
None
>
>
>
m
(
)
3r
r
}
r
(
h5U
h6j
ubaubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
call_args
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
call_argsr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
call_argsr
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
call_argsr
r
}
r
(
h5U
h6j
ubaubaubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
!
hF
]
r
"
hH
]
r
#
uhJM
hKh
h0
]
r
(
hu
)
r
%
}
r
&
(
h5X1
This
is
either
None
(
if
the
mock
hasn
'
t
been
called
)
or
the
arguments
that
the
mock
was
last
called
with
.
This
will
be
in
the
form
of
a
tuple
:
the
first
member
is
any
ordered
arguments
the
mock
was
called
with
(
or
an
empty
tuple
)
and
the
second
member
is
any
keyword
arguments
(
or
an
empty
dictionary
)
.
r
'
h6j
h7h
:
h
<
hyh
>
}
r
(
(
h
]
r
)
hB
]
r
*
hD
]
r
+
hF
]
r
hH
]
r
-
uhJM
hKh
h0
]
r
.
(
hYX
This
is
either
r
/
r0
}
r1
(
h5X
This
is
either
r2
h6j
%
ubh
)
r3
}
r4
(
h5X
None
r5
h
>
}
r6
(
h
]
r7
hB
]
r8
hD
]
r9
hF
]
r
:
hH
]
r
;
uh6j
%
h0
]
r
<
hYX
Noner
=
r
>
}
r
?
(
h5U
h6j3
ubah
<
h
ubhYX
(
if
the
mock
hasn
'
t
been
called
)
or
the
arguments
that
the
mock
was
last
called
with
.
This
will
be
in
the
form
of
a
tuple
:
the
first
member
is
any
ordered
arguments
the
mock
was
called
with
(
or
an
empty
tuple
)
and
the
second
member
is
any
keyword
arguments
(
or
an
empty
dictionary
)
.
r
rA
}
rB
(
h5X
(
if
the
mock
hasn
'
t
been
called
)
or
the
arguments
that
the
mock
was
last
called
with
.
This
will
be
in
the
form
of
a
tuple
:
the
first
member
is
any
ordered
arguments
the
mock
was
called
with
(
or
an
empty
tuple
)
and
the
second
member
is
any
keyword
arguments
(
or
an
empty
dictionary
)
.
rC
h6j
%
ubeubjz
)
rD
}
rE
(
h5X
<
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
print
mock
.
call_args
None
>
>
>
mock
(
)
>
>
>
mock
.
call_args
call
(
)
>
>
>
mock
.
call_args
=
=
(
)
True
>
>
>
mock
(
3
4
)
>
>
>
mock
.
call_args
call
(
3
4
)
>
>
>
mock
.
call_args
=
=
(
(
3
4
)
)
True
>
>
>
mock
(
3
4
5
key
=
'
fish
'
next
=
'
w00t
!
'
)
>
>
>
mock
.
call_args
call
(
3
4
5
key
=
'
fish
'
next
=
'
w00t
!
'
)
rF
h6j
h7h
:
h
<
j
~
h
>
}
rG
(
U
testnodetyperH
X
doctestrI
hehfhF
]
rJ
hD
]
rK
h
]
rL
hB
]
rM
hH
]
rN
U
groupsrO
]
rP
hnaho
}
rQ
uhJM
hKh
h0
]
rR
hYX
<
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
print
mock
.
call_args
None
>
>
>
mock
(
)
>
>
>
mock
.
call_args
call
(
)
>
>
>
mock
.
call_args
=
=
(
)
True
>
>
>
mock
(
3
4
)
>
>
>
mock
.
call_args
call
(
3
4
)
>
>
>
mock
.
call_args
=
=
(
(
3
4
)
)
True
>
>
>
mock
(
3
4
5
key
=
'
fish
'
next
=
'
w00t
!
'
)
>
>
>
mock
.
call_args
call
(
3
4
5
key
=
'
fish
'
next
=
'
w00t
!
'
)
rS
rT
}
rU
(
h5U
h6jD
ubaubhu
)
rV
}
rW
(
h5X
'
call_args
along
with
members
of
the
lists
:
attr
:
call_args_list
:
attr
:
method_calls
and
:
attr
:
mock_calls
are
:
data
:
call
objects
.
These
are
tuples
so
they
can
be
unpacked
to
get
at
the
individual
arguments
and
make
more
complex
assertions
.
See
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
.
rX
h6j
h7h
:
h
<
hyh
>
}
rY
(
h
]
rZ
hB
]
r
[
hD
]
r
\
hF
]
r
]
hH
]
r
^
uhJM
hKh
h0
]
r_
(
h
)
r
}
ra
(
h5X
call_args
rb
h
>
}
rc
(
h
]
rd
hB
]
re
hD
]
rf
hF
]
rg
hH
]
rh
uh6jV
h0
]
ri
hYX
call_argsrj
rk
}
rl
(
h5U
h6j
ubah
<
h
ubhYX
"
along
with
members
of
the
lists
rm
rn
}
ro
(
h5X
"
along
with
members
of
the
lists
rp
h6jV
ubh
)
rq
}
rr
(
h5X
:
attr
:
call_args_list
rs
h6jV
h7h
:
h
<
h
h
>
}
rt
(
U
reftyperu
X
attrrv
h
h
X
call_args_listrw
U
refdomainrx
X
pyry
hF
]
rz
hD
]
r
{
U
refexplicitr
|
h
]
r
}
hB
]
r
~
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5js
h
>
}
r
(
h
]
r
hB
]
r
(
h
jy
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6jq
h0
]
r
hYX
call_args_listr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
r
r
}
r
(
h5X
r
h6jV
ubh
)
r
}
r
(
h5X
:
attr
:
method_calls
r
h6jV
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
method_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
method_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6jV
ubh
)
r
}
r
(
h5X
:
attr
:
mock_calls
r
h6jV
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
mock_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
are
r
r
}
r
(
h5X
are
r
h6jV
ubh
)
r
}
r
(
h5X
:
data
:
call
r
h6jV
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
datar
h
h
X
callr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
datar
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
callr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
}
objects
.
These
are
tuples
so
they
can
be
unpacked
to
get
at
the
individual
arguments
and
make
more
complex
assertions
.
See
r
r
}
r
(
h5X
}
objects
.
These
are
tuples
so
they
can
be
unpacked
to
get
at
the
individual
arguments
and
make
more
complex
assertions
.
See
r
h6jV
ubh
)
r
}
r
(
h5X
(
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
r
h6jV
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
calls
-
as
-
tuplesr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJM
h0
]
r
j
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
std
-
refr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
calls
as
tuplesr
r
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
.
r
}
r
(
h5X
.
h6jV
ubeubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
call_args_list
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
!
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
"
(
jD
jE
X
pyr
#
hF
]
r
hD
]
r
%
h
]
r
&
hB
]
r
'
hH
]
r
(
jL
X
attributer
)
jN
j
)
uhJNhKh
h0
]
r
*
(
jP
)
r
+
}
r
(
h5X
call_args_listr
-
h6j
h7h
:
h
<
jT
h
>
}
r
.
(
hF
]
r
/
h
ajW
h
hD
]
r0
h
]
r1
hB
]
r2
hH
]
r3
h
aj
\
X
Mock
.
call_args_listr4
j
^
j
]
j_
uhJM
hKh
h0
]
r5
jp
)
r6
}
r7
(
h5j
-
h6j
+
h7h
:
h
<
js
h
>
}
r8
(
h
]
r9
hB
]
r
:
hD
]
r
;
hF
]
r
<
hH
]
r
=
uhJM
hKh
h0
]
r
>
hYX
call_args_listr
?
r
}
rA
(
h5U
h6j6
ubaubaubj
)
rB
}
rC
(
h5U
h6j
h7h
:
h
<
j
h
>
}
rD
(
h
]
rE
hB
]
rF
hD
]
rG
hF
]
rH
hH
]
rI
uhJM
hKh
h0
]
rJ
(
hu
)
rK
}
rL
(
h5X2
This
is
a
list
of
all
the
calls
made
to
the
mock
object
in
sequence
(
so
the
length
of
the
list
is
the
number
of
times
it
has
been
called
)
.
Before
any
calls
have
been
made
it
is
an
empty
list
.
The
:
data
:
call
object
can
be
used
for
conveniently
constructing
lists
of
calls
to
compare
with
call_args_list
.
rM
h6jB
h7h
:
h
<
hyh
>
}
rN
(
h
]
rO
hB
]
rP
hD
]
rQ
hF
]
rR
hH
]
rS
uhJM
hKh
h0
]
rT
(
hYX
This
is
a
list
of
all
the
calls
made
to
the
mock
object
in
sequence
(
so
the
length
of
the
list
is
the
number
of
times
it
has
been
called
)
.
Before
any
calls
have
been
made
it
is
an
empty
list
.
The
rU
rV
}
rW
(
h5X
This
is
a
list
of
all
the
calls
made
to
the
mock
object
in
sequence
(
so
the
length
of
the
list
is
the
number
of
times
it
has
been
called
)
.
Before
any
calls
have
been
made
it
is
an
empty
list
.
The
rX
h6jK
ubh
)
rY
}
rZ
(
h5X
:
data
:
call
r
[
h6jK
h7h
:
h
<
h
h
>
}
r
\
(
U
reftyper
]
X
datar
^
h
h
X
callr_
U
refdomainr
X
pyra
hF
]
rb
hD
]
rc
U
refexplicitrd
h
]
re
hB
]
rf
hH
]
rg
h
h
h
j
]
h
h
uhJM
h0
]
rh
h
)
ri
}
rj
(
h5j
[
h
>
}
rk
(
h
]
rl
hB
]
rm
(
h
ja
X
py
-
datarn
ehD
]
ro
hF
]
rp
hH
]
rq
uh6jY
h0
]
rr
hYX
callrs
rt
}
ru
(
h5U
h6ji
ubah
<
h
ubaubhYXQ
object
can
be
used
for
conveniently
constructing
lists
of
calls
to
compare
with
rv
rw
}
rx
(
h5XQ
object
can
be
used
for
conveniently
constructing
lists
of
calls
to
compare
with
ry
h6jK
ubh
)
rz
}
r
{
(
h5X
call_args_list
r
|
h
>
}
r
}
(
h
]
r
~
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jK
h0
]
r
hYX
call_args_listr
r
}
r
(
h5U
h6jz
ubah
<
h
ubhYX
.
r
}
r
(
h5X
.
h6jK
ubeubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
)
>
>
>
mock
(
3
4
)
>
>
>
mock
(
key
=
'
fish
'
next
=
'
w00t
!
'
)
>
>
>
mock
.
call_args_list
[
call
(
)
call
(
3
4
)
call
(
key
=
'
fish
'
next
=
'
w00t
!
'
)
]
>
>
>
expected
=
[
(
)
(
(
3
4
)
)
(
{
'
key
'
:
'
fish
'
'
next
'
:
'
w00t
!
'
}
)
]
>
>
>
mock
.
call_args_list
=
=
expected
Truer
h6jB
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
return_value
=
None
)
>
>
>
mock
(
)
>
>
>
mock
(
3
4
)
>
>
>
mock
(
key
=
'
fish
'
next
=
'
w00t
!
'
)
>
>
>
mock
.
call_args_list
[
call
(
)
call
(
3
4
)
call
(
key
=
'
fish
'
next
=
'
w00t
!
'
)
]
>
>
>
expected
=
[
(
)
(
(
3
4
)
)
(
{
'
key
'
:
'
fish
'
'
next
'
:
'
w00t
!
'
}
)
]
>
>
>
mock
.
call_args_list
=
=
expected
Truer
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
Members
of
call_args_list
are
:
data
:
call
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
.
r
h6jB
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
Members
of
r
r
}
r
(
h5X
Members
of
r
h6j
ubh
)
r
}
r
(
h5X
call_args_list
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
call_args_listr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
are
r
r
}
r
(
h5X
are
r
h6j
ubh
)
r
}
r
(
h5X
:
data
:
call
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
datar
h
h
X
callr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
datar
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
callr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYXR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
r
}
r
(
h5XR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
h6j
ubh
)
r
}
r
(
h5X
(
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
calls
-
as
-
tuplesr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJM
h0
]
r
j
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
std
-
refr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
calls
as
tuplesr
r
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
.
r
}
r
(
h5X
.
h6j
ubeubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
method_calls
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
method_callsr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
method_callsr
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
!
hF
]
r
"
hH
]
r
#
uhJM
hKh
h0
]
r
hYX
method_callsr
%
r
&
}
r
'
(
h5U
h6j
ubaubaubj
)
r
(
}
r
)
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
*
(
h
]
r
+
hB
]
r
hD
]
r
-
hF
]
r
.
hH
]
r
/
uhJM
hKh
h0
]
r0
(
hu
)
r1
}
r2
(
h5X
~
As
well
as
tracking
calls
to
themselves
mocks
also
track
calls
to
methods
and
attributes
and
*
their
*
methods
and
attributes
:
r3
h6j
(
h7h
:
h
<
hyh
>
}
r4
(
h
]
r5
hB
]
r6
hD
]
r7
hF
]
r8
hH
]
r9
uhJM
hKh
h0
]
r
:
(
hYX_
As
well
as
tracking
calls
to
themselves
mocks
also
track
calls
to
methods
and
attributes
and
r
;
r
<
}
r
=
(
h5X_
As
well
as
tracking
calls
to
themselves
mocks
also
track
calls
to
methods
and
attributes
and
r
>
h6j1
ubj
)
r
?
}
r
(
h5X
*
their
*
rA
h
>
}
rB
(
h
]
rC
hB
]
rD
hD
]
rE
hF
]
rF
hH
]
rG
uh6j1
h0
]
rH
hYX
theirrI
rJ
}
rK
(
h5U
h6j
?
ubah
<
j
ubhYX
methods
and
attributes
:
rL
rM
}
rN
(
h5X
methods
and
attributes
:
rO
h6j1
ubeubjz
)
rP
}
rQ
(
h5X
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
method
(
)
<
Mock
name
=
'
mock
.
method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
property
.
method
.
attribute
(
)
<
Mock
name
=
'
mock
.
property
.
method
.
attribute
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
method_calls
[
call
.
method
(
)
call
.
property
.
method
.
attribute
(
)
]
rR
h6j
(
h7h
:
h
<
j
~
h
>
}
rS
(
U
testnodetyperT
X
doctestrU
hehfhF
]
rV
hD
]
rW
h
]
rX
hB
]
rY
hH
]
rZ
U
groupsr
[
]
r
\
hnaho
}
r
]
uhJM
hKh
h0
]
r
^
hYX
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
method
(
)
<
Mock
name
=
'
mock
.
method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
property
.
method
.
attribute
(
)
<
Mock
name
=
'
mock
.
property
.
method
.
attribute
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
method_calls
[
call
.
method
(
)
call
.
property
.
method
.
attribute
(
)
]
r_
r
}
ra
(
h5U
h6jP
ubaubhu
)
rb
}
rc
(
h5X
Members
of
method_calls
are
:
data
:
call
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
.
rd
h6j
(
h7h
:
h
<
hyh
>
}
re
(
h
]
rf
hB
]
rg
hD
]
rh
hF
]
ri
hH
]
rj
uhJM
hKh
h0
]
rk
(
hYX
Members
of
rl
rm
}
rn
(
h5X
Members
of
ro
h6jb
ubh
)
rp
}
rq
(
h5X
method_calls
rr
h
>
}
rs
(
h
]
rt
hB
]
ru
hD
]
rv
hF
]
rw
hH
]
rx
uh6jb
h0
]
ry
hYX
method_callsrz
r
{
}
r
|
(
h5U
h6jp
ubah
<
h
ubhYX
are
r
}
r
~
}
r
(
h5X
are
r
h6jb
ubh
)
r
}
r
(
h5X
:
data
:
call
r
h6jb
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
datar
h
h
X
callr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
j
]
h
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
datar
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
callr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYXR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
r
}
r
(
h5XR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
h6jb
ubh
)
r
}
r
(
h5X
(
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
r
h6jb
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
calls
-
as
-
tuplesr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJM
h0
]
r
j
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
std
-
refr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
calls
as
tuplesr
r
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
.
r
}
r
(
h5X
.
h6jb
ubeubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
mock_calls
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
mock_callsr
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
mock_callsr
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
mock_callsr
r
}
r
(
h5U
h6j
ubaubaubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5Xi
mock_calls
records
*
all
*
calls
to
the
mock
object
its
methods
magic
methods
*
and
*
return
value
mocks
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
h
)
r
}
r
(
h5X
mock_calls
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
records
r
r
}
r
(
h5X
records
r
h6j
ubj
)
r
}
r
(
h5X
*
all
*
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
allr
r
}
r
(
h5U
h6j
ubah
<
j
ubhYX6
calls
to
the
mock
object
its
methods
magic
methods
r
r
!
}
r
"
(
h5X6
calls
to
the
mock
object
its
methods
magic
methods
r
#
h6j
ubj
)
r
}
r
%
(
h5X
*
and
*
r
&
h
>
}
r
'
(
h
]
r
(
hB
]
r
)
hD
]
r
*
hF
]
r
+
hH
]
r
uh6j
h0
]
r
-
hYX
andr
.
r
/
}
r0
(
h5U
h6j
ubah
<
j
ubhYX
return
value
mocks
.
r1
r2
}
r3
(
h5X
return
value
mocks
.
r4
h6j
ubeubjz
)
r5
}
r6
(
h5Xp
>
>
>
mock
=
MagicMock
(
)
>
>
>
result
=
mock
(
1
2
3
)
>
>
>
mock
.
first
(
a
=
3
)
<
MagicMock
name
=
'
mock
.
first
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
second
(
)
<
MagicMock
name
=
'
mock
.
second
(
)
'
id
=
'
.
.
.
'
>
>
>
>
int
(
mock
)
1
>
>
>
result
(
1
)
<
MagicMock
name
=
'
mock
(
)
(
)
'
id
=
'
.
.
.
'
>
>
>
>
expected
=
[
call
(
1
2
3
)
call
.
first
(
a
=
3
)
call
.
second
(
)
.
.
.
call
.
__int__
(
)
call
(
)
(
1
)
]
>
>
>
mock
.
mock_calls
=
=
expected
Truer7
h6j
h7h
:
h
<
j
~
h
>
}
r8
(
U
testnodetyper9
X
doctestr
:
hehfhF
]
r
;
hD
]
r
<
h
]
r
=
hB
]
r
>
hH
]
r
?
U
groupsr
]
rA
hnaho
}
rB
uhJM
hKh
h0
]
rC
hYXp
>
>
>
mock
=
MagicMock
(
)
>
>
>
result
=
mock
(
1
2
3
)
>
>
>
mock
.
first
(
a
=
3
)
<
MagicMock
name
=
'
mock
.
first
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
second
(
)
<
MagicMock
name
=
'
mock
.
second
(
)
'
id
=
'
.
.
.
'
>
>
>
>
int
(
mock
)
1
>
>
>
result
(
1
)
<
MagicMock
name
=
'
mock
(
)
(
)
'
id
=
'
.
.
.
'
>
>
>
>
expected
=
[
call
(
1
2
3
)
call
.
first
(
a
=
3
)
call
.
second
(
)
.
.
.
call
.
__int__
(
)
call
(
)
(
1
)
]
>
>
>
mock
.
mock_calls
=
=
expected
TruerD
rE
}
rF
(
h5U
h6j5
ubaubhu
)
rG
}
rH
(
h5X
Members
of
mock_calls
are
:
data
:
call
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
.
rI
h6j
h7h
:
h
<
hyh
>
}
rJ
(
h
]
rK
hB
]
rL
hD
]
rM
hF
]
rN
hH
]
rO
uhJM
hKh
h0
]
rP
(
hYX
Members
of
rQ
rR
}
rS
(
h5X
Members
of
rT
h6jG
ubh
)
rU
}
rV
(
h5X
mock_calls
rW
h
>
}
rX
(
h
]
rY
hB
]
rZ
hD
]
r
[
hF
]
r
\
hH
]
r
]
uh6jG
h0
]
r
^
hYX
mock_callsr_
r
}
ra
(
h5U
h6jU
ubah
<
h
ubhYX
are
rb
rc
}
rd
(
h5X
are
re
h6jG
ubh
)
rf
}
rg
(
h5X
:
data
:
call
rh
h6jG
h7h
:
h
<
h
h
>
}
ri
(
U
reftyperj
X
datark
h
h
X
callrl
U
refdomainrm
X
pyrn
hF
]
ro
hD
]
rp
U
refexplicitrq
h
]
rr
hB
]
rs
hH
]
rt
h
h
h
j
]
h
h
uhJM
h0
]
ru
h
)
rv
}
rw
(
h5jh
h
>
}
rx
(
h
]
ry
hB
]
rz
(
h
jn
X
py
-
datar
{
ehD
]
r
|
hF
]
r
}
hH
]
r
~
uh6jf
h0
]
r
hYX
callr
r
}
r
(
h5U
h6jv
ubah
<
h
ubaubhYXR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
r
}
r
(
h5XR
objects
.
These
can
be
unpacked
as
tuples
to
get
at
the
individual
arguments
.
See
r
h6jG
ubh
)
r
}
r
(
h5X
(
:
ref
:
calls
as
tuples
<
calls
-
as
-
tuples
>
r
h6jG
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
calls
-
as
-
tuplesr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJM
h0
]
r
j
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
std
-
refr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
calls
as
tuplesr
r
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
.
r
}
r
(
h5X
.
h6jG
ubeubeubeubj
)
r
}
r
(
h5U
h6j
h7Nh
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
__class__
(
Mock
attribute
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6j
h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
attributer
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
__class__r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
Mock
.
__class__r
j
^
j
]
j_
uhJM
hKh
h0
]
r
jp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
__class__r
r
}
r
(
h5U
h6j
ubaubaubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
Normally
the
__class__
attribute
of
an
object
will
return
its
type
.
For
a
mock
object
with
a
spec
__class__
returns
the
spec
class
instead
.
This
allows
mock
objects
to
pass
isinstance
tests
for
the
object
they
are
replacing
/
masquerading
as
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
Normally
the
r
r
}
r
(
h5X
Normally
the
r
h6j
ubh
)
r
}
r
(
h5X
__class__
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
__class__r
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXG
attribute
of
an
object
will
return
its
type
.
For
a
mock
object
with
a
r
r
}
r
(
h5XG
attribute
of
an
object
will
return
its
type
.
For
a
mock
object
with
a
r
h6j
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
r
}
r
(
h5X
h6j
ubh
)
r
}
r
(
h5X
__class__
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
__class__r
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXB
returns
the
spec
class
instead
.
This
allows
mock
objects
to
pass
r
r
}
r
(
h5XB
returns
the
spec
class
instead
.
This
allows
mock
objects
to
pass
r
h6j
ubh
)
r
}
r
(
h5X
isinstance
r
h
>
}
r
(
h
]
r
hB
]
r
!
hD
]
r
"
hF
]
r
#
hH
]
r
uh6j
h0
]
r
%
hYX
isinstancer
&
r
'
}
r
(
(
h5U
h6j
ubah
<
h
ubhYX
;
tests
for
the
object
they
are
replacing
/
masquerading
as
:
r
)
r
*
}
r
+
(
h5X
;
tests
for
the
object
they
are
replacing
/
masquerading
as
:
r
h6j
ubeubjz
)
r
-
}
r
.
(
h5X6
>
>
>
mock
=
Mock
(
spec
=
3
)
>
>
>
isinstance
(
mock
int
)
Truer
/
h6j
h7h
:
h
<
j
~
h
>
}
r0
(
U
testnodetyper1
X
doctestr2
hehfhF
]
r3
hD
]
r4
h
]
r5
hB
]
r6
hH
]
r7
U
groupsr8
]
r9
hnaho
}
r
:
uhJM
hKh
h0
]
r
;
hYX6
>
>
>
mock
=
Mock
(
spec
=
3
)
>
>
>
isinstance
(
mock
int
)
Truer
<
r
=
}
r
>
(
h5U
h6j
-
ubaubhu
)
r
?
}
r
(
h5Xq
__class__
is
assignable
to
this
allows
a
mock
to
pass
an
isinstance
check
without
forcing
you
to
use
a
spec
:
rA
h6j
h7h
:
h
<
hyh
>
}
rB
(
h
]
rC
hB
]
rD
hD
]
rE
hF
]
rF
hH
]
rG
uhJM
hKh
h0
]
rH
(
h
)
rI
}
rJ
(
h5X
__class__
rK
h
>
}
rL
(
h
]
rM
hB
]
rN
hD
]
rO
hF
]
rP
hH
]
rQ
uh6j
?
h0
]
rR
hYX
__class__rS
rT
}
rU
(
h5U
h6jI
ubah
<
h
ubhYX1
is
assignable
to
this
allows
a
mock
to
pass
an
rV
rW
}
rX
(
h5X1
is
assignable
to
this
allows
a
mock
to
pass
an
rY
h6j
?
ubh
)
rZ
}
r
[
(
h5X
isinstance
r
\
h
>
}
r
]
(
h
]
r
^
hB
]
r_
hD
]
r
hF
]
ra
hH
]
rb
uh6j
?
h0
]
rc
hYX
isinstancerd
re
}
rf
(
h5U
h6jZ
ubah
<
h
ubhYX
)
check
without
forcing
you
to
use
a
spec
:
rg
rh
}
ri
(
h5X
)
check
without
forcing
you
to
use
a
spec
:
rj
h6j
?
ubeubjz
)
rk
}
rl
(
h5XK
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
__class__
=
dict
>
>
>
isinstance
(
mock
dict
)
Truerm
h6j
h7h
:
h
<
j
~
h
>
}
rn
(
U
testnodetypero
X
doctestrp
hehfhF
]
rq
hD
]
rr
h
]
rs
hB
]
rt
hH
]
ru
U
groupsrv
]
rw
hnaho
}
rx
uhJM
hKh
h0
]
ry
hYXK
>
>
>
mock
=
Mock
(
)
>
>
>
mock
.
__class__
=
dict
>
>
>
isinstance
(
mock
dict
)
Truerz
r
{
}
r
|
(
h5U
h6jk
ubaubeubeubeubeubj
)
r
}
}
r
~
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
entriesr
]
r
(
j
X
NonCallableMock
(
class
in
mock
)
h
U
tr
auhJNhKh
h0
]
r
ubj
?
)
r
}
r
(
h5U
h6h3h7h
:
h
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
classr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5XJ
NonCallableMock
(
spec
=
None
wraps
=
None
name
=
None
spec_set
=
None
*
*
kwargs
)
r
h6j
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
NonCallableMockr
j
^
U
j_
uhJM
hKh
h0
]
r
(
ja
)
r
}
r
(
h5X
class
r
h6j
h7h
:
h
<
je
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
class
r
r
}
r
(
h5U
h6j
ubaubjp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
NonCallableMockr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
j
)
r
}
r
(
h5X
spec
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
wraps
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
wraps
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
name
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
name
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
spec_set
=
Noner
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
spec_set
=
Noner
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
*
*
kwargsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
*
kwargsr
r
}
r
(
h5U
h6j
ubah
<
j
ubeubeubj
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hu
)
r
}
r
(
h5X
A
non
-
callable
version
of
Mock
.
The
constructor
parameters
have
the
same
meaning
of
Mock
with
the
exception
of
return_value
and
side_effect
which
have
no
meaning
on
a
non
-
callable
mock
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
A
non
-
callable
version
of
r
r
}
r
(
h5X
A
non
-
callable
version
of
r
h6j
ubh
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
!
uh6j
h0
]
r
"
hYX
Mockr
#
r
}
r
%
(
h5U
h6j
ubah
<
h
ubhYX6
.
The
constructor
parameters
have
the
same
meaning
of
r
&
r
'
}
r
(
(
h5X6
.
The
constructor
parameters
have
the
same
meaning
of
r
)
h6j
ubh
)
r
*
}
r
+
(
h5X
Mock
r
h
>
}
r
-
(
h
]
r
.
hB
]
r
/
hD
]
r0
hF
]
r1
hH
]
r2
uh6j
h0
]
r3
hYX
Mockr4
r5
}
r6
(
h5U
h6j
*
ubah
<
h
ubhYX
with
the
exception
of
r7
r8
}
r9
(
h5X
with
the
exception
of
r
:
h6j
ubh
)
r
;
}
r
<
(
h5X
return_value
r
=
h
>
}
r
>
(
h
]
r
?
hB
]
r
hD
]
rA
hF
]
rB
hH
]
rC
uh6j
h0
]
rD
hYX
return_valuerE
rF
}
rG
(
h5U
h6j
;
ubah
<
h
ubhYX
and
rH
rI
}
rJ
(
h5X
and
rK
h6j
ubh
)
rL
}
rM
(
h5X
side_effect
rN
h
>
}
rO
(
h
]
rP
hB
]
rQ
hD
]
rR
hF
]
rS
hH
]
rT
uh6j
h0
]
rU
hYX
side_effectrV
rW
}
rX
(
h5U
h6jL
ubah
<
h
ubhYX
.
which
have
no
meaning
on
a
non
-
callable
mock
.
rY
rZ
}
r
[
(
h5X
.
which
have
no
meaning
on
a
non
-
callable
mock
.
r
\
h6j
ubeubaubeubhu
)
r
]
}
r
^
(
h5Xj
Mock
objects
that
use
a
class
or
an
instance
as
a
spec
or
spec_set
are
able
to
pass
isintance
tests
:
r_
h6h3h7h
:
h
<
hyh
>
}
r
(
h
]
ra
hB
]
rb
hD
]
rc
hF
]
rd
hH
]
re
uhJM
hKh
h0
]
rf
(
hYX2
Mock
objects
that
use
a
class
or
an
instance
as
a
rg
rh
}
ri
(
h5X2
Mock
objects
that
use
a
class
or
an
instance
as
a
rj
h6j
]
ubh
)
rk
}
rl
(
h5X
spec
rm
h
>
}
rn
(
h
]
ro
hB
]
rp
hD
]
rq
hF
]
rr
hH
]
rs
uh6j
]
h0
]
rt
hYX
specru
rv
}
rw
(
h5U
h6jk
ubah
<
h
ubhYX
or
rx
ry
}
rz
(
h5X
or
r
{
h6j
]
ubh
)
r
|
}
r
}
(
h5X
spec_set
r
~
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
]
h0
]
r
hYX
spec_setr
r
}
r
(
h5U
h6j
|
ubah
<
h
ubhYX
are
able
to
pass
r
r
}
r
(
h5X
are
able
to
pass
r
h6j
]
ubh
)
r
}
r
(
h5X
isintance
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
]
h0
]
r
hYX
isintancer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
tests
:
r
r
}
r
(
h5X
tests
:
r
h6j
]
ubeubjz
)
r
}
r
(
h5X
>
>
>
mock
=
Mock
(
spec
=
SomeClass
)
>
>
>
isinstance
(
mock
SomeClass
)
True
>
>
>
mock
=
Mock
(
spec_set
=
SomeClass
(
)
)
>
>
>
isinstance
(
mock
SomeClass
)
Truer
h6h3h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
mock
=
Mock
(
spec
=
SomeClass
)
>
>
>
isinstance
(
mock
SomeClass
)
True
>
>
>
mock
=
Mock
(
spec_set
=
SomeClass
(
)
)
>
>
>
isinstance
(
mock
SomeClass
)
Truer
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5Xy
The
Mock
classes
have
support
for
mocking
magic
methods
.
See
:
ref
:
magic
methods
<
magic
-
methods
>
for
the
full
details
.
r
h6h3h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
The
r
r
}
r
(
h5X
The
r
h6j
ubh
)
r
}
r
(
h5X
Mock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Mockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX5
classes
have
support
for
mocking
magic
methods
.
See
r
r
}
r
(
h5X5
classes
have
support
for
mocking
magic
methods
.
See
r
h6j
ubh
)
r
}
r
(
h5X
:
ref
:
magic
methods
<
magic
-
methods
>
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
magic
-
methodsr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJM
h0
]
r
j
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
std
-
refr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
magic
methodsr
r
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
for
the
full
details
.
r
r
}
r
(
h5X
for
the
full
details
.
r
h6j
ubeubhu
)
r
}
r
(
h5X
The
mock
classes
and
the
:
func
:
patch
decorators
all
take
arbitrary
keyword
arguments
for
configuration
.
For
the
patch
decorators
the
keywords
are
passed
to
the
constructor
of
the
mock
being
created
.
The
keyword
arguments
are
for
configuring
attributes
of
the
mock
:
r
h6h3h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
"
hKh
h0
]
r
(
hYX
The
mock
classes
and
the
r
r
}
r
(
h5X
The
mock
classes
and
the
r
h6j
ubh
)
r
}
r
(
h5X
:
func
:
patch
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
funcr
h
h
X
patchr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJM
"
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
funcr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
patch
(
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYXL
decorators
all
take
arbitrary
keyword
arguments
for
configuration
.
For
the
r
r
}
r
(
h5XL
decorators
all
take
arbitrary
keyword
arguments
for
configuration
.
For
the
r
h6j
ubh
)
r
}
r
(
h5X
patch
r
!
h
>
}
r
"
(
h
]
r
#
hB
]
r
hD
]
r
%
hF
]
r
&
hH
]
r
'
uh6j
h0
]
r
(
hYX
patchr
)
r
*
}
r
+
(
h5U
h6j
ubah
<
h
ubhYX
decorators
the
keywords
are
passed
to
the
constructor
of
the
mock
being
created
.
The
keyword
arguments
are
for
configuring
attributes
of
the
mock
:
r
r
-
}
r
.
(
h5X
decorators
the
keywords
are
passed
to
the
constructor
of
the
mock
being
created
.
The
keyword
arguments
are
for
configuring
attributes
of
the
mock
:
r
/
h6j
ubeubjz
)
r0
}
r1
(
h5XQ
>
>
>
m
=
MagicMock
(
attribute
=
3
other
=
'
fish
'
)
>
>
>
m
.
attribute
3
>
>
>
m
.
other
'
fish
'
r2
h6h3h7h
:
h
<
j
~
h
>
}
r3
(
U
testnodetyper4
X
doctestr5
hehfhF
]
r6
hD
]
r7
h
]
r8
hB
]
r9
hH
]
r
:
U
groupsr
;
]
r
<
hnaho
}
r
=
uhJM
'
hKh
h0
]
r
>
hYXQ
>
>
>
m
=
MagicMock
(
attribute
=
3
other
=
'
fish
'
)
>
>
>
m
.
attribute
3
>
>
>
m
.
other
'
fish
'
r
?
r
}
rA
(
h5U
h6j0
ubaubhu
)
rB
}
rC
(
h5X
The
return
value
and
side
effect
of
child
mocks
can
be
set
in
the
same
way
using
dotted
notation
.
As
you
can
'
t
use
dotted
names
directly
in
a
call
you
have
to
create
a
dictionary
and
unpack
it
using
*
*
:
rD
h6h3h7h
:
h
<
hyh
>
}
rE
(
h
]
rF
hB
]
rG
hD
]
rH
hF
]
rI
hH
]
rJ
uhJM
/
hKh
h0
]
rK
(
hYX
The
return
value
and
side
effect
of
child
mocks
can
be
set
in
the
same
way
using
dotted
notation
.
As
you
can
'
t
use
dotted
names
directly
in
a
call
you
have
to
create
a
dictionary
and
unpack
it
using
rL
rM
}
rN
(
h5X
The
return
value
and
side
effect
of
child
mocks
can
be
set
in
the
same
way
using
dotted
notation
.
As
you
can
'
t
use
dotted
names
directly
in
a
call
you
have
to
create
a
dictionary
and
unpack
it
using
rO
h6jB
ubh
)
rP
}
rQ
(
h5X
*
*
rR
h
>
}
rS
(
h
]
rT
hB
]
rU
hD
]
rV
hF
]
rW
hH
]
rX
uh6jB
h0
]
rY
hYX
*
*
rZ
r
[
}
r
\
(
h5U
h6jP
ubah
<
h
ubhYX
:
r
]
}
r
^
(
h5X
:
h6jB
ubeubjz
)
r_
}
r
(
h5X
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
=
Mock
(
some_attribute
=
'
eggs
'
*
*
attrs
)
>
>
>
mock
.
some_attribute
'
eggs
'
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorra
h6h3h7h
:
h
<
j
~
h
>
}
rb
(
U
testnodetyperc
X
doctestrd
hehfhF
]
re
hD
]
rf
h
]
rg
hB
]
rh
hH
]
ri
U
groupsrj
]
rk
hnaho
}
rl
uhJM3
hKh
h0
]
rm
hYX
>
>
>
attrs
=
{
'
method
.
return_value
'
:
3
'
other
.
side_effect
'
:
KeyError
}
>
>
>
mock
=
Mock
(
some_attribute
=
'
eggs
'
*
*
attrs
)
>
>
>
mock
.
some_attribute
'
eggs
'
>
>
>
mock
.
method
(
)
3
>
>
>
mock
.
other
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyErrorrn
ro
}
rp
(
h5U
h6j_
ubaubj
)
rq
}
rr
(
h5U
h6h3h7Nh
<
j
h
>
}
rs
(
hF
]
rt
hD
]
ru
h
]
rv
hB
]
rw
hH
]
rx
U
entriesry
]
rz
(
j
X
PropertyMock
(
class
in
mock
)
h
U
tr
{
auhJNhKh
h0
]
r
|
ubj
?
)
r
}
}
r
~
(
h5U
h6h3h7Nh
<
jB
h
>
}
r
(
jD
jE
X
pyr
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
jL
X
classr
jN
j
uhJNhKh
h0
]
r
(
jP
)
r
}
r
(
h5X
PropertyMock
(
*
args
*
*
kwargs
)
r
h6j
}
h7h
:
h
<
jT
h
>
}
r
(
hF
]
r
h
ajW
h
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
aj
\
X
PropertyMockr
j
^
U
j_
uhJM
]
hKh
h0
]
r
(
ja
)
r
}
r
(
h5X
class
r
h6j
h7h
:
h
<
je
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
]
hKh
h0
]
r
hYX
class
r
r
}
r
(
h5U
h6j
ubaubjp
)
r
}
r
(
h5j
h6j
h7h
:
h
<
js
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
]
hKh
h0
]
r
hYX
PropertyMockr
r
}
r
(
h5U
h6j
ubaubj
~
)
r
}
r
(
h5U
h6j
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
]
hKh
h0
]
r
(
j
)
r
}
r
(
h5X
*
argsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
argsr
r
}
r
(
h5U
h6j
ubah
<
j
ubj
)
r
}
r
(
h5X
*
*
kwargsr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
*
*
kwargsr
r
}
r
(
h5U
h6j
ubah
<
j
ubeubeubj
)
r
}
r
(
h5U
h6j
}
h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
]
hKh
h0
]
r
(
hu
)
r
}
r
(
h5X
A
mock
intended
to
be
used
as
a
property
or
other
descriptor
on
a
class
.
PropertyMock
provides
__get__
and
__set__
methods
so
you
can
specify
a
return
value
when
it
is
fetched
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMC
hKh
h0
]
r
(
hYXK
A
mock
intended
to
be
used
as
a
property
or
other
descriptor
on
a
class
.
r
r
}
r
(
h5XK
A
mock
intended
to
be
used
as
a
property
or
other
descriptor
on
a
class
.
r
h6j
ubh
)
r
}
r
(
h5X
PropertyMock
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
PropertyMockr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
provides
r
r
}
r
(
h5X
provides
r
h6j
ubh
)
r
}
r
(
h5X
__get__
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
__get__r
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
and
r
r
}
r
(
h5X
and
r
h6j
ubh
)
r
}
r
(
h5X
__set__
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
__set__r
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
>
methods
so
you
can
specify
a
return
value
when
it
is
fetched
.
r
r
}
r
(
h5X
>
methods
so
you
can
specify
a
return
value
when
it
is
fetched
.
r
h6j
ubeubhu
)
r
}
r
(
h5X
Fetching
a
PropertyMock
instance
from
an
object
calls
the
mock
with
no
args
.
Setting
it
calls
the
mock
with
the
value
being
set
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
!
uhJMG
hKh
h0
]
r
"
(
hYX
Fetching
a
r
#
r
}
r
%
(
h5X
Fetching
a
r
&
h6j
ubh
)
r
'
}
r
(
(
h5X
PropertyMock
r
)
h
>
}
r
*
(
h
]
r
+
hB
]
r
hD
]
r
-
hF
]
r
.
hH
]
r
/
uh6j
h0
]
r0
hYX
PropertyMockr1
r2
}
r3
(
h5U
h6j
'
ubah
<
h
ubhYXj
instance
from
an
object
calls
the
mock
with
no
args
.
Setting
it
calls
the
mock
with
the
value
being
set
.
r4
r5
}
r6
(
h5Xj
instance
from
an
object
calls
the
mock
with
no
args
.
Setting
it
calls
the
mock
with
the
value
being
set
.
r7
h6j
ubeubjz
)
r8
}
r9
(
h5X
>
>
>
class
Foo
(
object
)
:
.
.
.
property
.
.
.
def
foo
(
self
)
:
.
.
.
return
'
something
'
.
.
.
foo
.
setter
.
.
.
def
foo
(
self
value
)
:
.
.
.
pass
.
.
.
>
>
>
with
patch
(
'
__main__
.
Foo
.
foo
'
new_callable
=
PropertyMock
)
as
mock_foo
:
.
.
.
mock_foo
.
return_value
=
'
mockity
-
mock
'
.
.
.
this_foo
=
Foo
(
)
.
.
.
print
this_foo
.
foo
.
.
.
this_foo
.
foo
=
6
.
.
.
mockity
-
mock
>
>
>
mock_foo
.
mock_calls
[
call
(
)
call
(
6
)
]
r
:
h6j
h7h
:
h
<
j
~
h
>
}
r
;
(
U
testnodetyper
<
X
doctestr
=
hehfhF
]
r
>
hD
]
r
?
h
]
r
hB
]
rA
hH
]
rB
U
groupsrC
]
rD
hnaho
}
rE
uhJMJ
hKh
h0
]
rF
hYX
>
>
>
class
Foo
(
object
)
:
.
.
.
property
.
.
.
def
foo
(
self
)
:
.
.
.
return
'
something
'
.
.
.
foo
.
setter
.
.
.
def
foo
(
self
value
)
:
.
.
.
pass
.
.
.
>
>
>
with
patch
(
'
__main__
.
Foo
.
foo
'
new_callable
=
PropertyMock
)
as
mock_foo
:
.
.
.
mock_foo
.
return_value
=
'
mockity
-
mock
'
.
.
.
this_foo
=
Foo
(
)
.
.
.
print
this_foo
.
foo
.
.
.
this_foo
.
foo
=
6
.
.
.
mockity
-
mock
>
>
>
mock_foo
.
mock_calls
[
call
(
)
call
(
6
)
]
rG
rH
}
rI
(
h5U
h6j8
ubaubeubeubhu
)
rJ
}
rK
(
h5X
Because
of
the
way
mock
attributes
are
stored
you
can
'
t
directly
attach
a
PropertyMock
to
a
mock
object
.
Instead
you
can
attach
it
to
the
mock
type
object
:
rL
h6h3h7h
:
h
<
hyh
>
}
rM
(
h
]
rN
hB
]
rO
hD
]
rP
hF
]
rQ
hH
]
rR
uhJM
^
hKh
h0
]
rS
(
hYXJ
Because
of
the
way
mock
attributes
are
stored
you
can
'
t
directly
attach
a
rT
rU
}
rV
(
h5XJ
Because
of
the
way
mock
attributes
are
stored
you
can
'
t
directly
attach
a
rW
h6jJ
ubh
)
rX
}
rY
(
h5X
PropertyMock
rZ
h
>
}
r
[
(
h
]
r
\
hB
]
r
]
hD
]
r
^
hF
]
r_
hH
]
r
uh6jJ
h0
]
ra
hYX
PropertyMockrb
rc
}
rd
(
h5U
h6jX
ubah
<
h
ubhYXE
to
a
mock
object
.
Instead
you
can
attach
it
to
the
mock
type
object
:
re
rf
}
rg
(
h5XE
to
a
mock
object
.
Instead
you
can
attach
it
to
the
mock
type
object
:
rh
h6jJ
ubeubjz
)
ri
}
rj
(
h5Xx
>
>
>
m
=
MagicMock
(
)
>
>
>
p
=
PropertyMock
(
return_value
=
3
)
>
>
>
type
(
m
)
.
foo
=
p
>
>
>
m
.
foo
3
>
>
>
p
.
assert_called_once_with
(
)
rk
h6h3h7h
:
h
<
j
~
h
>
}
rl
(
U
testnodetyperm
X
doctestrn
hehfhF
]
ro
hD
]
rp
h
]
rq
hB
]
rr
hH
]
rs
U
groupsrt
]
ru
hnaho
}
rv
uhJMb
hKh
h0
]
rw
hYXx
>
>
>
m
=
MagicMock
(
)
>
>
>
p
=
PropertyMock
(
return_value
=
3
)
>
>
>
type
(
m
)
.
foo
=
p
>
>
>
m
.
foo
3
>
>
>
p
.
assert_called_once_with
(
)
rx
ry
}
rz
(
h5U
h6ji
ubaubj
)
r
{
}
r
|
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
}
(
hF
]
r
~
hD
]
r
h
]
r
hB
]
r
hH
]
r
j
]
r
(
j
X
__call__U
index
-
5r
U
tr
aj
uhJMl
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
j
ahH
]
r
uhJMl
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
j
]
r
(
j
X
callingU
index
-
6r
U
tr
aj
uhJMn
hKh
h0
]
r
ubj
)
r
}
r
(
h5U
h6h3h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
j
uhJMn
hKh
h0
]
r
ubeubh2
)
r
}
r
(
h5U
h6h
h7h
:
U
expect_referenced_by_namer
}
r
h
<
h
=
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
(
h
.
j
ehH
]
r
h
auhJMp
hKh
U
expect_referenced_by_idr
}
r
j
j
sh0
]
r
(
hM
)
r
}
r
(
h5X
Callingr
h6j
h7h
:
h
<
hQh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMp
hKh
h0
]
r
hYX
Callingr
r
}
r
(
h5j
h6j
ubaubhu
)
r
}
r
(
h5X6
Mock
objects
are
callable
.
The
call
will
return
the
value
set
as
the
:
attr
:
~
Mock
.
return_value
attribute
.
The
default
return
value
is
a
new
Mock
object
;
it
is
created
the
first
time
the
return
value
is
accessed
(
either
explicitly
or
by
calling
the
Mock
)
-
but
it
is
stored
and
the
same
one
returned
each
time
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMr
hKh
h0
]
r
(
hYXE
Mock
objects
are
callable
.
The
call
will
return
the
value
set
as
the
r
r
}
r
(
h5XE
Mock
objects
are
callable
.
The
call
will
return
the
value
set
as
the
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
return_value
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
Mock
.
return_valuer
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJMr
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
attribute
.
The
default
return
value
is
a
new
Mock
object
;
it
is
created
the
first
time
the
return
value
is
accessed
(
either
explicitly
or
by
calling
the
Mock
)
-
but
it
is
stored
and
the
same
one
returned
each
time
.
r
r
}
r
(
h5X
attribute
.
The
default
return
value
is
a
new
Mock
object
;
it
is
created
the
first
time
the
return
value
is
accessed
(
either
explicitly
or
by
calling
the
Mock
)
-
but
it
is
stored
and
the
same
one
returned
each
time
.
r
h6j
ubeubhu
)
r
}
r
(
h5Xz
Calls
made
to
the
object
will
be
recorded
in
the
attributes
like
:
attr
:
~
Mock
.
call_args
and
:
attr
:
~
Mock
.
call_args_list
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMx
hKh
h0
]
r
(
hYXA
Calls
made
to
the
object
will
be
recorded
in
the
attributes
like
r
r
}
r
(
h5XA
Calls
made
to
the
object
will
be
recorded
in
the
attributes
like
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
call_args
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
Mock
.
call_argsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJMx
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
call_argsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
call_args_list
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
!
X
attrr
"
h
h
X
Mock
.
call_args_listr
#
U
refdomainr
X
pyr
%
hF
]
r
&
hD
]
r
'
U
refexplicitr
(
h
]
r
)
hB
]
r
*
hH
]
r
+
h
h
h
Nh
h
uhJMx
h0
]
r
h
)
r
-
}
r
.
(
h5j
h
>
}
r
/
(
h
]
r0
hB
]
r1
(
h
j
%
X
py
-
attrr2
ehD
]
r3
hF
]
r4
hH
]
r5
uh6j
h0
]
r6
hYX
call_args_listr7
r8
}
r9
(
h5U
h6j
-
ubah
<
h
ubaubhYX
.
r
:
}
r
;
(
h5X
.
h6j
ubeubhu
)
r
<
}
r
=
(
h5X
If
:
attr
:
~
Mock
.
side_effect
is
set
then
it
will
be
called
after
the
call
has
been
recorded
so
if
side_effect
raises
an
exception
the
call
is
still
recorded
.
r
>
h6j
h7h
:
h
<
hyh
>
}
r
?
(
h
]
r
hB
]
rA
hD
]
rB
hF
]
rC
hH
]
rD
uhJM
{
hKh
h0
]
rE
(
hYX
If
rF
rG
}
rH
(
h5X
If
rI
h6j
<
ubh
)
rJ
}
rK
(
h5X
:
attr
:
~
Mock
.
side_effect
rL
h6j
<
h7h
:
h
<
h
h
>
}
rM
(
U
reftyperN
X
attrrO
h
h
X
Mock
.
side_effectrP
U
refdomainrQ
X
pyrR
hF
]
rS
hD
]
rT
U
refexplicitrU
h
]
rV
hB
]
rW
hH
]
rX
h
h
h
Nh
h
uhJM
{
h0
]
rY
h
)
rZ
}
r
[
(
h5jL
h
>
}
r
\
(
h
]
r
]
hB
]
r
^
(
h
jR
X
py
-
attrr_
ehD
]
r
hF
]
ra
hH
]
rb
uh6jJ
h0
]
rc
hYX
side_effectrd
re
}
rf
(
h5U
h6jZ
ubah
<
h
ubaubhYXG
is
set
then
it
will
be
called
after
the
call
has
been
recorded
so
if
rg
rh
}
ri
(
h5XG
is
set
then
it
will
be
called
after
the
call
has
been
recorded
so
if
rj
h6j
<
ubh
)
rk
}
rl
(
h5X
side_effect
rm
h
>
}
rn
(
h
]
ro
hB
]
rp
hD
]
rq
hF
]
rr
hH
]
rs
uh6j
<
h0
]
rt
hYX
side_effectru
rv
}
rw
(
h5U
h6jk
ubah
<
h
ubhYX0
raises
an
exception
the
call
is
still
recorded
.
rx
ry
}
rz
(
h5X0
raises
an
exception
the
call
is
still
recorded
.
r
{
h6j
<
ubeubhu
)
r
|
}
r
}
(
h5X
The
simplest
way
to
make
a
mock
raise
an
exception
when
called
is
to
make
:
attr
:
~
Mock
.
side_effect
an
exception
class
or
instance
:
r
~
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYXJ
The
simplest
way
to
make
a
mock
raise
an
exception
when
called
is
to
make
r
r
}
r
(
h5XJ
The
simplest
way
to
make
a
mock
raise
an
exception
when
called
is
to
make
r
h6j
|
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
side_effect
r
h6j
|
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
Mock
.
side_effectr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
an
exception
class
or
instance
:
r
r
}
r
(
h5X
an
exception
class
or
instance
:
r
h6j
|
ubeubjz
)
r
}
r
(
h5XK
>
>
>
m
=
MagicMock
(
side_effect
=
IndexError
)
>
>
>
m
(
1
2
3
)
Traceback
(
most
recent
call
last
)
:
.
.
.
IndexError
>
>
>
m
.
mock_calls
[
call
(
1
2
3
)
]
>
>
>
m
.
side_effect
=
KeyError
(
'
Bang
!
'
)
>
>
>
m
(
'
two
'
'
three
'
'
four
'
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyError
:
'
Bang
!
'
>
>
>
m
.
mock_calls
[
call
(
1
2
3
)
call
(
'
two
'
'
three
'
'
four
'
)
]
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYXK
>
>
>
m
=
MagicMock
(
side_effect
=
IndexError
)
>
>
>
m
(
1
2
3
)
Traceback
(
most
recent
call
last
)
:
.
.
.
IndexError
>
>
>
m
.
mock_calls
[
call
(
1
2
3
)
]
>
>
>
m
.
side_effect
=
KeyError
(
'
Bang
!
'
)
>
>
>
m
(
'
two
'
'
three
'
'
four
'
)
Traceback
(
most
recent
call
last
)
:
.
.
.
KeyError
:
'
Bang
!
'
>
>
>
m
.
mock_calls
[
call
(
1
2
3
)
call
(
'
two
'
'
three
'
'
four
'
)
]
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
If
side_effect
is
a
function
then
whatever
that
function
returns
is
what
calls
to
the
mock
return
.
The
side_effect
function
is
called
with
the
same
arguments
as
the
mock
.
This
allows
you
to
vary
the
return
value
of
the
call
dynamically
based
on
the
input
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
If
r
r
}
r
(
h5X
If
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXY
is
a
function
then
whatever
that
function
returns
is
what
calls
to
the
mock
return
.
The
r
r
}
r
(
h5XY
is
a
function
then
whatever
that
function
returns
is
what
calls
to
the
mock
return
.
The
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
function
is
called
with
the
same
arguments
as
the
mock
.
This
allows
you
to
vary
the
return
value
of
the
call
dynamically
based
on
the
input
:
r
r
}
r
(
h5X
function
is
called
with
the
same
arguments
as
the
mock
.
This
allows
you
to
vary
the
return
value
of
the
call
dynamically
based
on
the
input
:
r
h6j
ubeubjz
)
r
}
r
(
h5X
>
>
>
def
side_effect
(
value
)
:
.
.
.
return
value
+
1
.
.
.
>
>
>
m
=
MagicMock
(
side_effect
=
side_effect
)
>
>
>
m
(
1
)
2
>
>
>
m
(
2
)
3
>
>
>
m
.
mock_calls
[
call
(
1
)
call
(
2
)
]
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
def
side_effect
(
value
)
:
.
.
.
return
value
+
1
.
.
.
>
>
>
m
=
MagicMock
(
side_effect
=
side_effect
)
>
>
>
m
(
1
)
2
>
>
>
m
(
2
)
3
>
>
>
m
.
mock_calls
[
call
(
1
)
call
(
2
)
]
r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
If
you
want
the
mock
to
still
return
the
default
return
value
(
a
new
mock
)
or
any
set
return
value
then
there
are
two
ways
of
doing
this
.
Either
return
mock
.
return_value
from
inside
side_effect
or
return
:
data
:
DEFAULT
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
If
you
want
the
mock
to
still
return
the
default
return
value
(
a
new
mock
)
or
any
set
return
value
then
there
are
two
ways
of
doing
this
.
Either
return
r
r
}
r
(
h5X
If
you
want
the
mock
to
still
return
the
default
return
value
(
a
new
mock
)
or
any
set
return
value
then
there
are
two
ways
of
doing
this
.
Either
return
r
h6j
ubh
)
r
}
r
(
h5X
mock
.
return_value
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock
.
return_valuer
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
from
inside
r
r
}
r
(
h5X
from
inside
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
!
(
h
]
r
"
hB
]
r
#
hD
]
r
hF
]
r
%
hH
]
r
&
uh6j
h0
]
r
'
hYX
side_effectr
(
r
)
}
r
*
(
h5U
h6j
ubah
<
h
ubhYX
or
return
r
+
r
}
r
-
(
h5X
or
return
r
.
h6j
ubh
)
r
/
}
r0
(
h5X
:
data
:
DEFAULT
r1
h6j
h7h
:
h
<
h
h
>
}
r2
(
U
reftyper3
X
datar4
h
h
X
DEFAULTr5
U
refdomainr6
X
pyr7
hF
]
r8
hD
]
r9
U
refexplicitr
:
h
]
r
;
hB
]
r
<
hH
]
r
=
h
h
h
Nh
h
uhJM
h0
]
r
>
h
)
r
?
}
r
(
h5j1
h
>
}
rA
(
h
]
rB
hB
]
rC
(
h
j7
X
py
-
datarD
ehD
]
rE
hF
]
rF
hH
]
rG
uh6j
/
h0
]
rH
hYX
DEFAULTrI
rJ
}
rK
(
h5U
h6j
?
ubah
<
h
ubaubhYX
:
rL
}
rM
(
h5X
:
h6j
ubeubjz
)
rN
}
rO
(
h5X
>
>
>
m
=
MagicMock
(
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
m
.
return_value
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
.
return_value
=
3
>
>
>
m
(
)
3
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
DEFAULT
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
(
)
3rP
h6j
h7h
:
h
<
j
~
h
>
}
rQ
(
U
testnodetyperR
X
doctestrS
hehfhF
]
rT
hD
]
rU
h
]
rV
hB
]
rW
hH
]
rX
U
groupsrY
]
rZ
hnaho
}
r
[
uhJM
hKh
h0
]
r
\
hYX
>
>
>
m
=
MagicMock
(
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
m
.
return_value
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
.
return_value
=
3
>
>
>
m
(
)
3
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
DEFAULT
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
(
)
3r
]
r
^
}
r_
(
h5U
h6jN
ubaubhu
)
r
}
ra
(
h5X
To
remove
a
side_effect
and
return
to
the
default
behaviour
set
the
side_effect
to
None
:
rb
h6j
h7h
:
h
<
hyh
>
}
rc
(
h
]
rd
hB
]
re
hD
]
rf
hF
]
rg
hH
]
rh
uhJM
hKh
h0
]
ri
(
hYX
To
remove
a
rj
rk
}
rl
(
h5X
To
remove
a
rm
h6j
ubh
)
rn
}
ro
(
h5X
side_effect
rp
h
>
}
rq
(
h
]
rr
hB
]
rs
hD
]
rt
hF
]
ru
hH
]
rv
uh6j
h0
]
rw
hYX
side_effectrx
ry
}
rz
(
h5U
h6jn
ubah
<
h
ubhYX
/
and
return
to
the
default
behaviour
set
the
r
{
r
|
}
r
}
(
h5X
/
and
return
to
the
default
behaviour
set
the
r
~
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
to
r
r
}
r
(
h5X
to
r
h6j
ubh
)
r
}
r
(
h5X
None
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
Noner
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
:
r
}
r
(
h5X
:
h6j
ubeubjz
)
r
}
r
(
h5X
>
>
>
m
=
MagicMock
(
return_value
=
6
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
3
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
(
)
3
>
>
>
m
.
side_effect
=
None
>
>
>
m
(
)
6r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
m
=
MagicMock
(
return_value
=
6
)
>
>
>
def
side_effect
(
*
args
*
*
kwargs
)
:
.
.
.
return
3
.
.
.
>
>
>
m
.
side_effect
=
side_effect
>
>
>
m
(
)
3
>
>
>
m
.
side_effect
=
None
>
>
>
m
(
)
6r
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
The
side_effect
can
also
be
any
iterable
object
.
Repeated
calls
to
the
mock
will
return
values
from
the
iterable
(
until
the
iterable
is
exhausted
and
a
StopIteration
is
raised
)
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
The
r
r
}
r
(
h5X
The
r
h6j
ubh
)
r
}
r
(
h5X
side_effect
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
side_effectr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
can
also
be
any
iterable
object
.
Repeated
calls
to
the
mock
will
return
values
from
the
iterable
(
until
the
iterable
is
exhausted
and
a
r
r
}
r
(
h5X
can
also
be
any
iterable
object
.
Repeated
calls
to
the
mock
will
return
values
from
the
iterable
(
until
the
iterable
is
exhausted
and
a
r
h6j
ubh
)
r
}
r
(
h5X
StopIteration
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
StopIterationr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
is
raised
)
:
r
r
}
r
(
h5X
is
raised
)
:
r
h6j
ubeubjz
)
r
}
r
(
h5X
>
>
>
m
=
MagicMock
(
side_effect
=
[
1
2
3
]
)
>
>
>
m
(
)
1
>
>
>
m
(
)
2
>
>
>
m
(
)
3
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
StopIterationr
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
m
=
MagicMock
(
side_effect
=
[
1
2
3
]
)
>
>
>
m
(
)
1
>
>
>
m
(
)
2
>
>
>
m
(
)
3
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
StopIterationr
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5XV
If
any
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYXV
If
any
members
of
the
iterable
are
exceptions
they
will
be
raised
instead
of
returned
:
r
r
}
r
(
h5j
h6j
ubaubjz
)
r
}
r
(
h5X
>
>
>
iterable
=
(
33
ValueError
66
)
>
>
>
m
=
MagicMock
(
side_effect
=
iterable
)
>
>
>
m
(
)
33
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
ValueError
>
>
>
m
(
)
66r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
iterable
=
(
33
ValueError
66
)
>
>
>
m
=
MagicMock
(
side_effect
=
iterable
)
>
>
>
m
(
)
33
>
>
>
m
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
ValueError
>
>
>
m
(
)
66r
r
}
r
(
h5U
h6j
ubaubj
)
r
}
r
(
h5X
.
.
_deleting
-
attributes
:
r
h6j
h7h
:
h
<
j
h
>
}
r
(
hF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
h
h
*
uhJM
hKh
h0
]
r
ubeubh2
)
r
}
r
(
h5U
h6h
h7h
:
j
}
r
h
j
sh
<
h
=
h
>
}
r
(
h
]
r
hB
]
r
!
hD
]
r
"
hF
]
r
#
(
h
*
h
/
ehH
]
r
(
h
h
euhJM
hKh
j
}
r
%
h
*
j
sh0
]
r
&
(
hM
)
r
'
}
r
(
(
h5X
Deleting
Attributesr
)
h6j
h7h
:
h
<
hQh
>
}
r
*
(
h
]
r
+
hB
]
r
hD
]
r
-
hF
]
r
.
hH
]
r
/
uhJM
hKh
h0
]
r0
hYX
Deleting
Attributesr1
r2
}
r3
(
h5j
)
h6j
'
ubaubhu
)
r4
}
r5
(
h5X
Mock
objects
create
attributes
on
demand
.
This
allows
them
to
pretend
to
be
objects
of
any
type
.
r6
h6j
h7h
:
h
<
hyh
>
}
r7
(
h
]
r8
hB
]
r9
hD
]
r
:
hF
]
r
;
hH
]
r
<
uhJM
hKh
h0
]
r
=
hYX
Mock
objects
create
attributes
on
demand
.
This
allows
them
to
pretend
to
be
objects
of
any
type
.
r
>
r
?
}
r
(
h5j6
h6j4
ubaubhu
)
rA
}
rB
(
h5X
You
may
want
a
mock
object
to
return
False
to
a
hasattr
call
or
raise
an
AttributeError
when
an
attribute
is
fetched
.
You
can
do
this
by
providing
an
object
as
a
spec
for
a
mock
but
that
isn
'
t
always
convenient
.
rC
h6j
h7h
:
h
<
hyh
>
}
rD
(
h
]
rE
hB
]
rF
hD
]
rG
hF
]
rH
hH
]
rI
uhJM
hKh
h0
]
rJ
(
hYX
%
You
may
want
a
mock
object
to
return
rK
rL
}
rM
(
h5X
%
You
may
want
a
mock
object
to
return
rN
h6jA
ubh
)
rO
}
rP
(
h5X
False
rQ
h
>
}
rR
(
h
]
rS
hB
]
rT
hD
]
rU
hF
]
rV
hH
]
rW
uh6jA
h0
]
rX
hYX
FalserY
rZ
}
r
[
(
h5U
h6jO
ubah
<
h
ubhYX
to
a
r
\
r
]
}
r
^
(
h5X
to
a
r_
h6jA
ubh
)
r
}
ra
(
h5X
hasattr
rb
h
>
}
rc
(
h
]
rd
hB
]
re
hD
]
rf
hF
]
rg
hH
]
rh
uh6jA
h0
]
ri
hYX
hasattrrj
rk
}
rl
(
h5U
h6j
ubah
<
h
ubhYX
call
or
raise
an
rm
rn
}
ro
(
h5X
call
or
raise
an
rp
h6jA
ubh
)
rq
}
rr
(
h5X
AttributeError
rs
h
>
}
rt
(
h
]
ru
hB
]
rv
hD
]
rw
hF
]
rx
hH
]
ry
uh6jA
h0
]
rz
hYX
AttributeErrorr
{
r
|
}
r
}
(
h5U
h6jq
ubah
<
h
ubhYXK
when
an
attribute
is
fetched
.
You
can
do
this
by
providing
an
object
as
a
r
~
r
}
r
(
h5XK
when
an
attribute
is
fetched
.
You
can
do
this
by
providing
an
object
as
a
r
h6jA
ubh
)
r
}
r
(
h5X
spec
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jA
h0
]
r
hYX
specr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
for
a
mock
but
that
isn
'
t
always
convenient
.
r
r
}
r
(
h5X
.
for
a
mock
but
that
isn
'
t
always
convenient
.
r
h6jA
ubeubhu
)
r
}
r
(
h5Xm
You
"
block
"
attributes
by
deleting
them
.
Once
deleted
accessing
an
attribute
will
raise
an
AttributeError
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
\
You
"
block
"
attributes
by
deleting
them
.
Once
deleted
accessing
an
attribute
will
raise
an
r
r
}
r
(
h5X
\
You
"
block
"
attributes
by
deleting
them
.
Once
deleted
accessing
an
attribute
will
raise
an
r
h6j
ubh
)
r
}
r
(
h5X
AttributeError
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
AttributeErrorr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYX
.
r
}
r
(
h5X
.
h6j
ubeubjz
)
r
}
r
(
h5X
>
>
>
mock
=
MagicMock
(
)
>
>
>
hasattr
(
mock
'
m
'
)
True
>
>
>
del
mock
.
m
>
>
>
hasattr
(
mock
'
m
'
)
False
>
>
>
del
mock
.
f
>
>
>
mock
.
f
Traceback
(
most
recent
call
last
)
:
.
.
.
AttributeError
:
fr
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM
hKh
h0
]
r
hYX
>
>
>
mock
=
MagicMock
(
)
>
>
>
hasattr
(
mock
'
m
'
)
True
>
>
>
del
mock
.
m
>
>
>
hasattr
(
mock
'
m
'
)
False
>
>
>
del
mock
.
f
>
>
>
mock
.
f
Traceback
(
most
recent
call
last
)
:
.
.
.
AttributeError
:
fr
r
}
r
(
h5U
h6j
ubaubeubh2
)
r
}
r
(
h5U
h6h
h7h
:
h
<
h
=
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
h
-
ahH
]
r
h
auhJM
hKh
h0
]
r
(
hM
)
r
}
r
(
h5X
Attaching
Mocks
as
Attributesr
h6j
h7h
:
h
<
hQh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
hYX
Attaching
Mocks
as
Attributesr
r
}
r
(
h5j
h6j
ubaubhu
)
r
}
r
(
h5X
When
you
attach
a
mock
as
an
attribute
of
another
mock
(
or
as
the
return
value
)
it
becomes
a
"
child
"
of
that
mock
.
Calls
to
the
child
are
recorded
in
the
:
attr
:
~
Mock
.
method_calls
and
:
attr
:
~
Mock
.
mock_calls
attributes
of
the
parent
.
This
is
useful
for
configuring
child
mocks
and
then
attaching
them
to
the
parent
or
for
attaching
mocks
to
a
parent
that
records
all
calls
to
the
children
and
allows
you
to
make
assertions
about
the
order
of
calls
between
mocks
:
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJM
hKh
h0
]
r
(
hYX
When
you
attach
a
mock
as
an
attribute
of
another
mock
(
or
as
the
return
value
)
it
becomes
a
"
child
"
of
that
mock
.
Calls
to
the
child
are
recorded
in
the
r
r
}
r
(
h5X
When
you
attach
a
mock
as
an
attribute
of
another
mock
(
or
as
the
return
value
)
it
becomes
a
"
child
"
of
that
mock
.
Calls
to
the
child
are
recorded
in
the
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
method_calls
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
Mock
.
method_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
method_callsr
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
and
r
r
}
r
(
h5X
and
r
h6j
ubh
)
r
}
r
(
h5X
:
attr
:
~
Mock
.
mock_calls
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
attrr
h
h
X
Mock
.
mock_callsr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJM
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
attrr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
mock_callsr
!
r
"
}
r
#
(
h5U
h6j
ubah
<
h
ubaubhYX
attributes
of
the
parent
.
This
is
useful
for
configuring
child
mocks
and
then
attaching
them
to
the
parent
or
for
attaching
mocks
to
a
parent
that
records
all
calls
to
the
children
and
allows
you
to
make
assertions
about
the
order
of
calls
between
mocks
:
r
r
%
}
r
&
(
h5X
attributes
of
the
parent
.
This
is
useful
for
configuring
child
mocks
and
then
attaching
them
to
the
parent
or
for
attaching
mocks
to
a
parent
that
records
all
calls
to
the
children
and
allows
you
to
make
assertions
about
the
order
of
calls
between
mocks
:
r
'
h6j
ubeubjz
)
r
(
}
r
)
(
h5X
>
>
>
parent
=
MagicMock
(
)
>
>
>
child1
=
MagicMock
(
return_value
=
None
)
>
>
>
child2
=
MagicMock
(
return_value
=
None
)
>
>
>
parent
.
child1
=
child1
>
>
>
parent
.
child2
=
child2
>
>
>
child1
(
1
)
>
>
>
child2
(
2
)
>
>
>
parent
.
mock_calls
[
call
.
child1
(
1
)
call
.
child2
(
2
)
]
r
*
h6j
h7h
:
h
<
j
~
h
>
}
r
+
(
U
testnodetyper
X
doctestr
-
hehfhF
]
r
.
hD
]
r
/
h
]
r0
hB
]
r1
hH
]
r2
U
groupsr3
]
r4
hnaho
}
r5
uhJM
hKh
h0
]
r6
hYX
>
>
>
parent
=
MagicMock
(
)
>
>
>
child1
=
MagicMock
(
return_value
=
None
)
>
>
>
child2
=
MagicMock
(
return_value
=
None
)
>
>
>
parent
.
child1
=
child1
>
>
>
parent
.
child2
=
child2
>
>
>
child1
(
1
)
>
>
>
child2
(
2
)
>
>
>
parent
.
mock_calls
[
call
.
child1
(
1
)
call
.
child2
(
2
)
]
r7
r8
}
r9
(
h5U
h6j
(
ubaubhu
)
r
:
}
r
;
(
h5X
The
exception
to
this
is
if
the
mock
has
a
name
.
This
allows
you
to
prevent
the
"
parenting
"
if
for
some
reason
you
don
'
t
want
it
to
happen
.
r
<
h6j
h7h
:
h
<
hyh
>
}
r
=
(
h
]
r
>
hB
]
r
?
hD
]
r
hF
]
rA
hH
]
rB
uhJM
"
hKh
h0
]
rC
hYX
The
exception
to
this
is
if
the
mock
has
a
name
.
This
allows
you
to
prevent
the
"
parenting
"
if
for
some
reason
you
don
'
t
want
it
to
happen
.
rD
rE
}
rF
(
h5j
<
h6j
:
ubaubjz
)
rG
}
rH
(
h5X
>
>
>
mock
=
MagicMock
(
)
>
>
>
not_a_child
=
MagicMock
(
name
=
'
not
-
a
-
child
'
)
>
>
>
mock
.
attribute
=
not_a_child
>
>
>
mock
.
attribute
(
)
<
MagicMock
name
=
'
not
-
a
-
child
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
mock_calls
[
]
rI
h6j
h7h
:
h
<
j
~
h
>
}
rJ
(
U
testnodetyperK
X
doctestrL
hehfhF
]
rM
hD
]
rN
h
]
rO
hB
]
rP
hH
]
rQ
U
groupsrR
]
rS
hnaho
}
rT
uhJM
%
hKh
h0
]
rU
hYX
>
>
>
mock
=
MagicMock
(
)
>
>
>
not_a_child
=
MagicMock
(
name
=
'
not
-
a
-
child
'
)
>
>
>
mock
.
attribute
=
not_a_child
>
>
>
mock
.
attribute
(
)
<
MagicMock
name
=
'
not
-
a
-
child
(
)
'
id
=
'
.
.
.
'
>
>
>
>
mock
.
mock_calls
[
]
rV
rW
}
rX
(
h5U
h6jG
ubaubhu
)
rY
}
rZ
(
h5X
Mocks
created
for
you
by
:
func
:
patch
are
automatically
given
names
.
To
attach
mocks
that
have
names
to
a
parent
you
use
the
:
meth
:
~
Mock
.
attach_mock
method
:
r
[
h6j
h7h
:
h
<
hyh
>
}
r
\
(
h
]
r
]
hB
]
r
^
hD
]
r_
hF
]
r
hH
]
ra
uhJM
/
hKh
h0
]
rb
(
hYX
Mocks
created
for
you
by
rc
rd
}
re
(
h5X
Mocks
created
for
you
by
rf
h6jY
ubh
)
rg
}
rh
(
h5X
:
func
:
patch
ri
h6jY
h7h
:
h
<
h
h
>
}
rj
(
U
reftyperk
X
funcrl
h
h
X
patchrm
U
refdomainrn
X
pyro
hF
]
rp
hD
]
rq
U
refexplicitrr
h
]
rs
hB
]
rt
hH
]
ru
h
h
h
Nh
h
uhJM
/
h0
]
rv
h
)
rw
}
rx
(
h5ji
h
>
}
ry
(
h
]
rz
hB
]
r
{
(
h
jo
X
py
-
funcr
|
ehD
]
r
}
hF
]
r
~
hH
]
r
uh6jg
h0
]
r
hYX
patch
(
)
r
r
}
r
(
h5U
h6jw
ubah
<
h
ubaubhYXX
are
automatically
given
names
.
To
attach
mocks
that
have
names
to
a
parent
you
use
the
r
r
}
r
(
h5XX
are
automatically
given
names
.
To
attach
mocks
that
have
names
to
a
parent
you
use
the
r
h6jY
ubh
)
r
}
r
(
h5X
:
meth
:
~
Mock
.
attach_mock
r
h6jY
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
methr
h
h
X
Mock
.
attach_mockr
U
refdomainr
X
pyr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
h
Nh
h
uhJM
/
h0
]
r
h
)
r
}
r
(
h5j
h
>
}
r
(
h
]
r
hB
]
r
(
h
j
X
py
-
methr
ehD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
attach_mock
(
)
r
r
}
r
(
h5U
h6j
ubah
<
h
ubaubhYX
method
:
r
r
}
r
(
h5X
method
:
r
h6jY
ubeubjz
)
r
}
r
(
h5X
>
>
>
thing1
=
object
(
)
>
>
>
thing2
=
object
(
)
>
>
>
parent
=
MagicMock
(
)
>
>
>
with
patch
(
'
__main__
.
thing1
'
return_value
=
None
)
as
child1
:
.
.
.
with
patch
(
'
__main__
.
thing2
'
return_value
=
None
)
as
child2
:
.
.
.
parent
.
attach_mock
(
child1
'
child1
'
)
.
.
.
parent
.
attach_mock
(
child2
'
child2
'
)
.
.
.
child1
(
'
one
'
)
.
.
.
child2
(
'
two
'
)
.
.
.
>
>
>
parent
.
mock_calls
[
call
.
child1
(
'
one
'
)
call
.
child2
(
'
two
'
)
]
r
h6j
h7h
:
h
<
j
~
h
>
}
r
(
U
testnodetyper
X
doctestr
hehfhF
]
r
hD
]
r
h
]
r
hB
]
r
hH
]
r
U
groupsr
]
r
hnaho
}
r
uhJM3
hKh
h0
]
r
hYX
>
>
>
thing1
=
object
(
)
>
>
>
thing2
=
object
(
)
>
>
>
parent
=
MagicMock
(
)
>
>
>
with
patch
(
'
__main__
.
thing1
'
return_value
=
None
)
as
child1
:
.
.
.
with
patch
(
'
__main__
.
thing2
'
return_value
=
None
)
as
child2
:
.
.
.
parent
.
attach_mock
(
child1
'
child1
'
)
.
.
.
parent
.
attach_mock
(
child2
'
child2
'
)
.
.
.
child1
(
'
one
'
)
.
.
.
child2
(
'
two
'
)
.
.
.
>
>
>
parent
.
mock_calls
[
call
.
child1
(
'
one
'
)
call
.
child2
(
'
two
'
)
]
r
r
}
r
(
h5U
h6j
ubaubcdocutils
.
nodes
transition
r
)
r
}
r
(
h5X
-
-
-
-
-
r
h6j
h7h
:
h
<
U
transitionr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJMC
hKh
h0
]
r
ubcdocutils
.
nodes
footnote
r
)
r
}
r
(
h5X
The
only
exceptions
are
magic
methods
and
attributes
(
those
that
have
leading
and
trailing
double
underscores
)
.
Mock
doesn
'
t
create
these
but
instead
of
raises
an
AttributeError
.
This
is
because
the
interpreter
will
often
implicitly
request
these
methods
and
gets
*
very
*
confused
to
get
a
new
Mock
object
when
it
expects
a
magic
method
.
If
you
need
magic
method
support
see
:
ref
:
magic
methods
<
magic
-
methods
>
.
r
h6j
h7h
:
h
<
U
footnoter
h
>
}
r
(
h
K
hF
]
r
h
ahD
]
r
h
ah
]
r
hB
]
r
hH
]
r
U
1auhJME
hKh
h0
]
r
(
cdocutils
.
nodes
label
r
)
r
}
r
(
h5U
h6j
h7Nh
<
U
labelr
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJNhKh
h0
]
r
hYX
1
r
}
r
(
h5U
h6j
ubaubhu
)
r
}
r
(
h5X
The
only
exceptions
are
magic
methods
and
attributes
(
those
that
have
leading
and
trailing
double
underscores
)
.
Mock
doesn
'
t
create
these
but
instead
of
raises
an
AttributeError
.
This
is
because
the
interpreter
will
often
implicitly
request
these
methods
and
gets
*
very
*
confused
to
get
a
new
Mock
object
when
it
expects
a
magic
method
.
If
you
need
magic
method
support
see
:
ref
:
magic
methods
<
magic
-
methods
>
.
r
h6j
h7h
:
h
<
hyh
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uhJME
h0
]
r
(
hYX
The
only
exceptions
are
magic
methods
and
attributes
(
those
that
have
leading
and
trailing
double
underscores
)
.
Mock
doesn
'
t
create
these
but
instead
of
raises
an
r
r
}
r
(
h5X
The
only
exceptions
are
magic
methods
and
attributes
(
those
that
have
leading
and
trailing
double
underscores
)
.
Mock
doesn
'
t
create
these
but
instead
of
raises
an
r
h6j
ubh
)
r
}
r
(
h5X
AttributeError
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
AttributeErrorr
r
}
r
(
h5U
h6j
ubah
<
h
ubhYXX
.
This
is
because
the
interpreter
will
often
implicitly
request
these
methods
and
gets
r
r
}
r
(
h5XX
.
This
is
because
the
interpreter
will
often
implicitly
request
these
methods
and
gets
r
h6j
ubj
)
r
}
r
(
h5X
*
very
*
r
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
veryr
r
}
r
(
h5U
h6j
ubah
<
j
ubhYXh
confused
to
get
a
new
Mock
object
when
it
expects
a
magic
method
.
If
you
need
magic
method
support
see
r
r
}
r
(
h5Xh
confused
to
get
a
new
Mock
object
when
it
expects
a
magic
method
.
If
you
need
magic
method
support
see
r
h6j
ubh
)
r
}
r
(
h5X
:
ref
:
magic
methods
<
magic
-
methods
>
r
h6j
h7h
:
h
<
h
h
>
}
r
(
U
reftyper
X
refr
h
h
X
magic
-
methodsr
U
refdomainr
X
stdr
hF
]
r
hD
]
r
U
refexplicitr
h
]
r
hB
]
r
hH
]
r
h
h
uhJME
h0
]
r
j
)
r
}
r
!
(
h5j
h
>
}
r
"
(
h
]
r
#
hB
]
r
(
h
j
X
std
-
refr
%
ehD
]
r
&
hF
]
r
'
hH
]
r
(
uh6j
h0
]
r
)
hYX
magic
methodsr
*
r
+
}
r
(
h5U
h6j
ubah
<
j
ubaubhYX
.
r
-
}
r
.
(
h5X
.
h6j
ubeubeubeubeh5U
U
transformerr
/
NU
footnote_refsr0
}
r1
U
refnamesr2
}
r3
U
symbol_footnotesr4
]
r5
U
autofootnote_refsr6
]
r7
h
aU
symbol_footnote_refsr8
]
r9
U
citationsr
:
]
r
;
hKh
U
current_liner
<
NU
transform_messagesr
=
]
r
>
(
cdocutils
.
nodes
system_message
r
?
)
r
}
rA
(
h5U
h
>
}
rB
(
h
]
rC
U
levelrD
K
hF
]
rE
hD
]
rF
U
sourcerG
h
:
hB
]
rH
hH
]
rI
U
linerJ
K
U
typerK
U
INFOrL
uh0
]
rM
hu
)
rN
}
rO
(
h5U
h
>
}
rP
(
h
]
rQ
hB
]
rR
hD
]
rS
hF
]
rT
hH
]
rU
uh6j
h0
]
rV
hYX
-
Hyperlink
target
"
index
-
0
"
is
not
referenced
.
rW
rX
}
rY
(
h5U
h6jN
ubah
<
hyubah
<
U
system_messagerZ
ubj
?
)
r
[
}
r
\
(
h5U
h
>
}
r
]
(
h
]
r
^
U
levelr_
K
hF
]
r
hD
]
ra
U
sourcerb
h
:
hB
]
rc
hH
]
rd
U
linere
K
U
typerf
jL
uh0
]
rg
hu
)
rh
}
ri
(
h5U
h
>
}
rj
(
h
]
rk
hB
]
rl
hD
]
rm
hF
]
rn
hH
]
ro
uh6j
[
h0
]
rp
hYX
-
Hyperlink
target
"
index
-
1
"
is
not
referenced
.
rq
rr
}
rs
(
h5U
h6jh
ubah
<
hyubah
<
jZ
ubj
?
)
rt
}
ru
(
h5U
h
>
}
rv
(
h
]
rw
U
levelrx
K
hF
]
ry
hD
]
rz
U
sourcer
{
h
:
hB
]
r
|
hH
]
r
}
U
liner
~
K
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6jt
h0
]
r
hYX
-
Hyperlink
target
"
index
-
2
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubj
?
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
U
levelr
K
hF
]
r
hD
]
r
U
sourcer
h
:
hB
]
r
hH
]
r
U
liner
K
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
-
Hyperlink
target
"
index
-
3
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubj
?
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
U
levelr
K
hF
]
r
hD
]
r
U
sourcer
h
:
hB
]
r
hH
]
r
U
liner
K
"
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
-
Hyperlink
target
"
index
-
4
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubj
?
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
U
levelr
K
hF
]
r
hD
]
r
U
sourcer
h
:
hB
]
r
hH
]
r
U
liner
Ml
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
-
Hyperlink
target
"
index
-
5
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubj
?
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
U
levelr
K
hF
]
r
hD
]
r
U
sourcer
h
:
hB
]
r
hH
]
r
U
liner
Mn
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX
-
Hyperlink
target
"
index
-
6
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubj
?
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
U
levelr
K
hF
]
r
hD
]
r
U
sourcer
h
:
hB
]
r
hH
]
r
U
liner
M
U
typer
jL
uh0
]
r
hu
)
r
}
r
(
h5U
h
>
}
r
(
h
]
r
hB
]
r
hD
]
r
hF
]
r
hH
]
r
uh6j
h0
]
r
hYX9
Hyperlink
target
"
deleting
-
attributes
"
is
not
referenced
.
r
r
}
r
(
h5U
h6j
ubah
<
hyubah
<
jZ
ubeU
reporterr
NU
id_startr
K
U
autofootnotesr
]
r
j
aU
citation_refsr
}
r
U
indirect_targetsr
]
r
U
settingsr
(
cdocutils
.
frontend
Values
r
or
}
r
(
U
footnote_backlinksr
K
U
record_dependenciesr
NU
rfc_base_urlr
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
r
U
tracebackr
U
pep_referencesr
NU
strip_commentsr
NU
toc_backlinksr
U
entryr
U
language_coder
U
enr
U
datestampr
!
NU
report_levelr
"
K
U
_destinationr
#
NU
halt_levelr
K
U
strip_classesr
%
NhQNU
error_encoding_error_handlerr
&
U
backslashreplacer
'
U
debugr
(
NU
embed_stylesheetr
)
U
output_encoding_error_handlerr
*
U
strictr
+
U
sectnum_xformr
K
U
dump_transformsr
-
NU
docinfo_xformr
.
K
U
warning_streamr
/
NU
pep_file_url_templater0
U
pep
-
%
04dr1
U
exit_status_levelr2
K
U
configr3
NU
strict_visitorr4
NU
cloak_email_addressesr5
U
trim_footnote_reference_spacer6
U
envr7
NU
dump_pseudo_xmlr8
NU
expose_internalsr9
NU
sectsubtitle_xformr
:
U
source_linkr
;
NU
rfc_referencesr
<
NU
output_encodingr
=
U
utf
-
8r
>
U
source_urlr
?
NU
input_encodingr
U
utf
-
8
-
sigrA
U
_disable_configrB
NU
id_prefixrC
U
U
tab_widthrD
K
U
error_encodingrE
U
mac
-
romanrF
U
_sourcerG
U
/
compile
/
mock
/
docs
/
mock
.
txtrH
U
gettext_compactrI
U
generatorrJ
NU
dump_internalsrK
NU
pep_base_urlrL
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
rM
U
syntax_highlightrN
U
shortrO
U
input_encoding_error_handlerrP
j
+
U
auto_id_prefixrQ
U
idrR
U
doctitle_xformrS
U
strip_elements_with_classesrT
NU
_config_filesrU
]
rV
U
file_insertion_enabledrW
K
U
raw_enabledrX
K
U
dump_settingsrY
NubU
symbol_footnote_startrZ
K
U
idsr
[
}
r
\
(
h
j
h
*
j
h
j
h
j
)
h
jQ
h
j
h
j
h
jY
h
j
h
j
h
/
j
j
j
h
jm
h
h
j
'
j
*
j
j
h
j
j
j
j
j
j
j
j
j
h
+
h3h
j
h
j
h
j
h
j
+
h
j
h
j
h
j
h
j
h
j
h
.
j
h
jM
h
j
h
-
j
h
j
uU
substitution_namesr
]
}
r
^
h
<
hKh
>
}
r_
(
h
]
r
hF
]
ra
hD
]
rb
U
sourcerc
h
:
hB
]
rd
hH
]
re
uU
footnotesrf
]
rg
U
refidsrh
}
ri
(
h
*
]
rj
j
aj
]
rk
j
ah
]
rl
h
auub
.
