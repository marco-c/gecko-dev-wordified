"
"
"
    
pygments
.
lexers
.
testing
    
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
    
Lexers
for
testing
languages
.
    
:
copyright
:
Copyright
2006
-
2024
by
the
Pygments
team
see
AUTHORS
.
    
:
license
:
BSD
see
LICENSE
for
details
.
"
"
"
from
pygments
.
lexer
import
RegexLexer
include
bygroups
from
pygments
.
token
import
Comment
Keyword
Name
String
Number
Generic
Text
__all__
=
[
'
GherkinLexer
'
'
TAPLexer
'
]
class
GherkinLexer
(
RegexLexer
)
:
    
"
"
"
    
For
Gherkin
syntax
.
    
"
"
"
    
name
=
'
Gherkin
'
    
aliases
=
[
'
gherkin
'
'
cucumber
'
]
    
filenames
=
[
'
*
.
feature
'
]
    
mimetypes
=
[
'
text
/
x
-
gherkin
'
]
    
url
=
'
https
:
/
/
cucumber
.
io
/
docs
/
gherkin
'
    
version_added
=
'
1
.
2
'
    
feature_keywords
=
'
^
(
|
|
|
|
|
|
|
|
|
|
|
|
zellik
|
W
a
ciwo
|
T
nh
n
ng
|
Trajto
|
Savyb
|
Po
iadavka
|
Po
adavek
|
Osobina
|
Ominaisuus
|
Omadus
|
OH
HAI
|
Mogu
nost
|
Mogucnost
|
Jellemz
|
F
a
|
Funzionalit
|
Funktionalit
t
|
Funkcionalnost
|
Funkcionalit
te
|
Func
ionalitate
|
Functionaliteit
|
Functionalitate
|
Funcionalitat
|
Funcionalidade
|
Fonctionnalit
|
Fitur
|
Feature
|
Egenskap
|
Egenskab
|
Crikey
|
Caracter
stica
|
Arwedd
)
(
:
)
(
.
*
)
'
    
feature_element_keywords
=
'
^
(
\
\
s
*
)
(
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
Za
o
enia
|
Wharrimean
is
|
T
nh
hu
ng
|
The
thing
of
it
is
|
Tausta
|
Taust
|
Tapausaihio
|
Tapaus
|
Szenariogrundriss
|
Szenario
|
Szablon
scenariusza
|
Stsenaarium
|
Struktura
scenarija
|
Skica
|
Skenario
konsep
|
Skenario
|
Situ
cija
|
Senaryo
tasla
|
Senaryo
|
Sc
n
|
Sc
nario
|
Schema
dello
scenario
|
Scen
rijs
p
c
parauga
|
Scen
rijs
|
Scen
r
|
Scenaro
|
Scenariusz
|
Scenariul
de
ablon
|
Scenariul
de
sablon
|
Scenariu
|
Scenario
Outline
|
Scenario
Amlinellol
|
Scenario
|
Scenarijus
|
Scenarijaus
ablonas
|
Scenarij
|
Scenarie
|
Rerefons
|
Raamstsenaarium
|
Primer
|
Pozad
|
Pozadina
|
Pozadie
|
Plan
du
sc
nario
|
Plan
du
Sc
nario
|
Osnova
sc
n
e
|
Osnova
|
N
rt
Sc
n
e
|
N
rt
Scen
ru
|
Mate
|
MISHUN
SRSLY
|
MISHUN
|
K
ch
b
n
|
Konturo
de
la
scenaro
|
Kontext
|
Konteksts
|
Kontekstas
|
Kontekst
|
Koncept
|
Khung
t
nh
hu
ng
|
Khung
k
ch
b
n
|
H
tt
r
|
Grundlage
|
Ge
mi
|
Forgat
k
nyv
v
zlat
|
Forgat
k
nyv
|
Fono
|
Esquema
do
Cen
rio
|
Esquema
do
Cenario
|
Esquema
del
escenario
|
Esquema
de
l
\
'
escenari
|
Escenario
|
Escenari
|
Dis
is
what
went
down
|
Dasar
|
Contexto
|
Contexte
|
Contesto
|
Condi
ii
|
Conditii
|
Cen
rio
|
Cenario
|
Cefndir
|
B
i
c
nh
|
Blokes
|
Bakgrunn
|
Bakgrund
|
Baggrund
|
Background
|
B4
|
Antecedents
|
Antecedentes
|
All
y
\
'
all
|
Achtergrond
|
Abstrakt
Scenario
|
Abstract
Scenario
)
(
:
)
(
.
*
)
'
    
examples_keywords
=
'
^
(
\
\
s
*
)
(
|
|
|
|
|
|
|
|
|
|
|
rnekler
|
Voorbeelden
|
Variantai
|
Tapaukset
|
Scenarios
|
Scenariji
|
Scenarijai
|
P
klady
|
P
ld
k
|
Pr
klady
|
Przyk
ady
|
Primjeri
|
Primeri
|
Piem
ri
|
Pavyzd
iai
|
Paraugs
|
Juhtumid
|
Exemplos
|
Exemples
|
Exemplele
|
Exempel
|
Examples
|
Esempi
|
Enghreifftiau
|
Ekzemploj
|
Eksempler
|
Ejemplos
|
EXAMPLZ
|
D
li
u
|
Contoh
|
Cobber
|
Beispiele
)
(
:
)
(
.
*
)
'
    
step_keywords
=
'
^
(
\
\
s
*
)
(
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
i
|
s
|
Zatati
|
Zak
adaj
c
|
Zadato
|
Zadate
|
Zadano
|
Zadani
|
Zadan
|
Youse
know
when
youse
got
|
Youse
know
like
when
|
Yna
|
Ya
know
how
|
Ya
gotta
|
Y
|
Wun
|
Wtedy
|
When
y
\
'
all
|
When
|
Wenn
|
WEN
|
V
|
Ve
|
Und
|
Un
|
Th
|
Then
y
\
'
all
|
Then
|
Tapi
|
Tak
|
Tada
|
Tad
|
S
|
Stel
|
Soit
|
Siis
|
Si
|
Sed
|
Se
|
Quando
|
Quand
|
Quan
|
Pryd
|
Pokud
|
Pokia
|
Per
|
Pero
|
Pak
|
Oraz
|
Onda
|
Ond
|
Oletetaan
|
Og
|
Och
|
O
zaman
|
N
r
|
N
r
|
Niin
|
Nh
ng
|
N
|
Mutta
|
Men
|
Mas
|
Maka
|
Majd
|
Mais
|
Maar
|
Ma
|
Lorsque
|
Lorsqu
\
'
|
Kun
|
Kuid
|
Kui
|
Khi
|
Ke
|
Ketika
|
Kdy
|
Kaj
|
Kai
|
Kada
|
Kad
|
Je
eli
|
Ja
|
Ir
|
I
CAN
HAZ
|
I
|
Ha
|
Givun
|
Givet
|
Given
y
\
'
all
|
Given
|
Gitt
|
Gegeven
|
Gegeben
sei
|
Fakat
|
E
er
ki
|
Etant
donn
|
Et
|
Ent
o
|
Entonces
|
Entao
|
En
|
Eeldades
|
E
|
Duota
|
Dun
|
Donita
o
|
Donat
|
Donada
|
Do
|
Diyelim
ki
|
Dengan
|
Den
youse
gotta
|
De
|
Dato
|
Dar
|
Dann
|
Dan
|
Dado
|
Dac
|
Daca
|
DEN
|
C
nd
|
Cuando
|
Cho
|
Cept
|
Cand
|
Cal
|
But
y
\
'
all
|
But
|
Buh
|
Bi
t
|
Bet
|
BUT
|
At
s
|
Atunci
|
Atesa
|
Anrhegedig
a
|
Angenommen
|
And
y
\
'
all
|
And
|
An
|
Ama
|
Als
|
Alors
|
Allora
|
Ali
|
Aleshores
|
Ale
|
Akkor
|
Aber
|
AN
|
A
tak
|
A
|
\
\
*
)
'
    
tokens
=
{
        
'
comments
'
:
[
            
(
r
'
^
\
s
*
#
.
*
'
Comment
)
        
]
        
'
feature_elements
'
:
[
            
(
step_keywords
Keyword
"
step_content_stack
"
)
            
include
(
'
comments
'
)
            
(
r
"
(
\
s
|
.
)
"
Name
.
Function
)
        
]
        
'
feature_elements_on_stack
'
:
[
            
(
step_keywords
Keyword
"
#
pop
:
2
"
)
            
include
(
'
comments
'
)
            
(
r
"
(
\
s
|
.
)
"
Name
.
Function
)
        
]
        
'
examples_table
'
:
[
            
(
r
"
\
s
+
\
|
"
Keyword
'
examples_table_header
'
)
            
include
(
'
comments
'
)
            
(
r
"
(
\
s
|
.
)
"
Name
.
Function
)
        
]
        
'
examples_table_header
'
:
[
            
(
r
"
\
s
+
\
|
\
s
*
"
Keyword
"
#
pop
:
2
"
)
            
include
(
'
comments
'
)
            
(
r
"
\
\
\
|
"
Name
.
Variable
)
            
(
r
"
\
s
*
\
|
"
Keyword
)
            
(
r
"
[
^
|
]
"
Name
.
Variable
)
        
]
        
'
scenario_sections_on_stack
'
:
[
            
(
feature_element_keywords
             
bygroups
(
Name
.
Function
Keyword
Keyword
Name
.
Function
)
             
"
feature_elements_on_stack
"
)
        
]
        
'
narrative
'
:
[
            
include
(
'
scenario_sections_on_stack
'
)
            
include
(
'
comments
'
)
            
(
r
"
(
\
s
|
.
)
"
Name
.
Function
)
        
]
        
'
table_vars
'
:
[
            
(
r
'
(
<
[
^
>
]
+
>
)
'
Name
.
Variable
)
        
]
        
'
numbers
'
:
[
            
(
r
'
(
\
d
+
\
.
?
\
d
*
|
\
d
*
\
.
\
d
+
)
(
[
eE
]
[
+
-
]
?
[
0
-
9
]
+
)
?
'
String
)
        
]
        
'
string
'
:
[
            
include
(
'
table_vars
'
)
            
(
r
'
(
\
s
|
.
)
'
String
)
        
]
        
'
py_string
'
:
[
            
(
r
'
"
"
"
'
Keyword
"
#
pop
"
)
            
include
(
'
string
'
)
        
]
        
'
step_content_root
'
:
[
            
(
r
"
"
Keyword
"
#
pop
"
)
            
include
(
'
step_content
'
)
        
]
        
'
step_content_stack
'
:
[
            
(
r
"
"
Keyword
"
#
pop
:
2
"
)
            
include
(
'
step_content
'
)
        
]
        
'
step_content
'
:
[
            
(
r
'
"
'
Name
.
Function
"
double_string
"
)
            
include
(
'
table_vars
'
)
            
include
(
'
numbers
'
)
            
include
(
'
comments
'
)
            
(
r
'
(
\
s
|
.
)
'
Name
.
Function
)
        
]
        
'
table_content
'
:
[
            
(
r
"
\
s
+
\
|
\
s
*
"
Keyword
"
#
pop
"
)
            
include
(
'
comments
'
)
            
(
r
"
\
\
\
|
"
String
)
            
(
r
"
\
s
*
\
|
"
Keyword
)
            
include
(
'
string
'
)
        
]
        
'
double_string
'
:
[
            
(
r
'
"
'
Name
.
Function
"
#
pop
"
)
            
include
(
'
string
'
)
        
]
        
'
root
'
:
[
            
(
r
'
\
n
'
Name
.
Function
)
            
include
(
'
comments
'
)
            
(
r
'
"
"
"
'
Keyword
"
py_string
"
)
            
(
r
'
\
s
+
\
|
'
Keyword
'
table_content
'
)
            
(
r
'
"
'
Name
.
Function
"
double_string
"
)
            
include
(
'
table_vars
'
)
            
include
(
'
numbers
'
)
            
(
r
'
(
\
s
*
)
(
[
^
\
r
\
n
\
t
]
+
)
'
bygroups
(
Name
.
Function
Name
.
Tag
)
)
            
(
step_keywords
bygroups
(
Name
.
Function
Keyword
)
             
'
step_content_root
'
)
            
(
feature_keywords
bygroups
(
Keyword
Keyword
Name
.
Function
)
             
'
narrative
'
)
            
(
feature_element_keywords
             
bygroups
(
Name
.
Function
Keyword
Keyword
Name
.
Function
)
             
'
feature_elements
'
)
            
(
examples_keywords
             
bygroups
(
Name
.
Function
Keyword
Keyword
Name
.
Function
)
             
'
examples_table
'
)
            
(
r
'
(
\
s
|
.
)
'
Name
.
Function
)
        
]
    
}
    
def
analyse_text
(
self
text
)
:
        
return
class
TAPLexer
(
RegexLexer
)
:
    
"
"
"
    
For
Test
Anything
Protocol
(
TAP
)
output
.
    
"
"
"
    
name
=
'
TAP
'
    
url
=
'
https
:
/
/
testanything
.
org
/
'
    
aliases
=
[
'
tap
'
]
    
filenames
=
[
'
*
.
tap
'
]
    
version_added
=
'
2
.
1
'
    
tokens
=
{
        
'
root
'
:
[
            
#
A
TAP
version
may
be
specified
.
            
(
r
'
^
TAP
version
\
d
+
\
n
'
Name
.
Namespace
)
            
#
Specify
a
plan
with
a
plan
line
.
            
(
r
'
^
1
\
.
\
.
\
d
+
'
Keyword
.
Declaration
'
plan
'
)
            
#
A
test
failure
            
(
r
'
^
(
not
ok
)
(
[
^
\
S
\
n
]
*
)
(
\
d
*
)
'
             
bygroups
(
Generic
.
Error
Text
Number
.
Integer
)
'
test
'
)
            
#
A
test
success
            
(
r
'
^
(
ok
)
(
[
^
\
S
\
n
]
*
)
(
\
d
*
)
'
             
bygroups
(
Keyword
.
Reserved
Text
Number
.
Integer
)
'
test
'
)
            
#
Diagnostics
start
with
a
hash
.
            
(
r
'
^
#
.
*
\
n
'
Comment
)
            
#
TAP
'
s
version
of
an
abort
statement
.
            
(
r
'
^
Bail
out
!
.
*
\
n
'
Generic
.
Error
)
            
#
TAP
ignores
any
unrecognized
lines
.
            
(
r
'
^
.
*
\
n
'
Text
)
        
]
        
'
plan
'
:
[
            
#
Consume
whitespace
(
but
not
newline
)
.
            
(
r
'
[
^
\
S
\
n
]
+
'
Text
)
            
#
A
plan
may
have
a
directive
with
it
.
            
(
r
'
#
'
Comment
'
directive
'
)
            
#
Or
it
could
just
end
.
            
(
r
'
\
n
'
Comment
'
#
pop
'
)
            
#
Anything
else
is
wrong
.
            
(
r
'
.
*
\
n
'
Generic
.
Error
'
#
pop
'
)
        
]
        
'
test
'
:
[
            
#
Consume
whitespace
(
but
not
newline
)
.
            
(
r
'
[
^
\
S
\
n
]
+
'
Text
)
            
#
A
test
may
have
a
directive
with
it
.
            
(
r
'
#
'
Comment
'
directive
'
)
            
(
r
'
\
S
+
'
Text
)
            
(
r
'
\
n
'
Text
'
#
pop
'
)
        
]
        
'
directive
'
:
[
            
#
Consume
whitespace
(
but
not
newline
)
.
            
(
r
'
[
^
\
S
\
n
]
+
'
Comment
)
            
#
Extract
todo
items
.
            
(
r
'
(
?
i
)
\
bTODO
\
b
'
Comment
.
Preproc
)
            
#
Extract
skip
items
.
            
(
r
'
(
?
i
)
\
bSKIP
\
S
*
'
Comment
.
Preproc
)
            
(
r
'
\
S
+
'
Comment
)
            
(
r
'
\
n
'
Comment
'
#
pop
:
2
'
)
        
]
    
}
