/
/
Generated
by
the
protocol
buffer
compiler
.
DO
NOT
EDIT
!
/
/
source
:
opentelemetry
/
proto
/
trace
/
v1
/
trace
.
proto
#
include
"
opentelemetry
/
proto
/
trace
/
v1
/
trace
.
pb
.
h
"
#
include
<
algorithm
>
#
include
<
google
/
protobuf
/
io
/
coded_stream
.
h
>
#
include
<
google
/
protobuf
/
extension_set
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
io
/
zero_copy_stream_impl_lite
.
h
>
/
/
protoc_insertion_point
(
includes
)
#
include
<
google
/
protobuf
/
port_def
.
inc
>
PROTOBUF_PRAGMA_INIT_SEG
namespace
_pb
=
:
:
PROTOBUF_NAMESPACE_ID
;
namespace
_pbi
=
_pb
:
:
internal
;
namespace
opentelemetry
{
namespace
proto
{
namespace
trace
{
namespace
v1
{
PROTOBUF_CONSTEXPR
TracesData
:
:
TracesData
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
resource_spans_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
TracesDataDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
TracesDataDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
TracesDataDefaultTypeInternal
(
)
{
}
union
{
TracesData
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
TracesDataDefaultTypeInternal
_TracesData_default_instance_
;
PROTOBUF_CONSTEXPR
ResourceSpans
:
:
ResourceSpans
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
scope_spans_
)
*
/
{
}
/
*
decltype
(
_impl_
.
schema_url_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
resource_
)
*
/
nullptr
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
ResourceSpansDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
ResourceSpansDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
ResourceSpansDefaultTypeInternal
(
)
{
}
union
{
ResourceSpans
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
ResourceSpansDefaultTypeInternal
_ResourceSpans_default_instance_
;
PROTOBUF_CONSTEXPR
ScopeSpans
:
:
ScopeSpans
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
spans_
)
*
/
{
}
/
*
decltype
(
_impl_
.
schema_url_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
scope_
)
*
/
nullptr
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
ScopeSpansDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
ScopeSpansDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
ScopeSpansDefaultTypeInternal
(
)
{
}
union
{
ScopeSpans
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
ScopeSpansDefaultTypeInternal
_ScopeSpans_default_instance_
;
PROTOBUF_CONSTEXPR
Span_Event
:
:
Span_Event
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
attributes_
)
*
/
{
}
/
*
decltype
(
_impl_
.
name_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
time_unix_nano_
)
*
/
uint64_t
{
0u
}
/
*
decltype
(
_impl_
.
dropped_attributes_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
Span_EventDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
Span_EventDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
Span_EventDefaultTypeInternal
(
)
{
}
union
{
Span_Event
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
Span_EventDefaultTypeInternal
_Span_Event_default_instance_
;
PROTOBUF_CONSTEXPR
Span_Link
:
:
Span_Link
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
attributes_
)
*
/
{
}
/
*
decltype
(
_impl_
.
trace_id_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
span_id_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
trace_state_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
dropped_attributes_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
flags_
)
*
/
0u
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
Span_LinkDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
Span_LinkDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
Span_LinkDefaultTypeInternal
(
)
{
}
union
{
Span_Link
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
Span_LinkDefaultTypeInternal
_Span_Link_default_instance_
;
PROTOBUF_CONSTEXPR
Span
:
:
Span
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
attributes_
)
*
/
{
}
/
*
decltype
(
_impl_
.
events_
)
*
/
{
}
/
*
decltype
(
_impl_
.
links_
)
*
/
{
}
/
*
decltype
(
_impl_
.
trace_id_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
span_id_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
trace_state_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
parent_span_id_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
name_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
status_
)
*
/
nullptr
/
*
decltype
(
_impl_
.
start_time_unix_nano_
)
*
/
uint64_t
{
0u
}
/
*
decltype
(
_impl_
.
end_time_unix_nano_
)
*
/
uint64_t
{
0u
}
/
*
decltype
(
_impl_
.
kind_
)
*
/
0
/
*
decltype
(
_impl_
.
dropped_attributes_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
dropped_events_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
dropped_links_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
flags_
)
*
/
0u
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
SpanDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
SpanDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
SpanDefaultTypeInternal
(
)
{
}
union
{
Span
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
SpanDefaultTypeInternal
_Span_default_instance_
;
PROTOBUF_CONSTEXPR
Status
:
:
Status
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
message_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
code_
)
*
/
0
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
StatusDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
StatusDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
StatusDefaultTypeInternal
(
)
{
}
union
{
Status
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
StatusDefaultTypeInternal
_Status_default_instance_
;
}
/
/
namespace
v1
}
/
/
namespace
trace
}
/
/
namespace
proto
}
/
/
namespace
opentelemetry
namespace
opentelemetry
{
namespace
proto
{
namespace
trace
{
namespace
v1
{
bool
Span_SpanKind_IsValid
(
int
value
)
{
switch
(
value
)
{
case
0
:
case
1
:
case
2
:
case
3
:
case
4
:
case
5
:
return
true
;
default
:
return
false
;
}
}
static
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExplicitlyConstructed
<
std
:
:
string
>
Span_SpanKind_strings
[
6
]
=
{
}
;
static
const
char
Span_SpanKind_names
[
]
=
"
SPAN_KIND_CLIENT
"
"
SPAN_KIND_CONSUMER
"
"
SPAN_KIND_INTERNAL
"
"
SPAN_KIND_PRODUCER
"
"
SPAN_KIND_SERVER
"
"
SPAN_KIND_UNSPECIFIED
"
;
static
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
EnumEntry
Span_SpanKind_entries
[
]
=
{
{
{
Span_SpanKind_names
+
0
16
}
3
}
{
{
Span_SpanKind_names
+
16
18
}
5
}
{
{
Span_SpanKind_names
+
34
18
}
1
}
{
{
Span_SpanKind_names
+
52
18
}
4
}
{
{
Span_SpanKind_names
+
70
16
}
2
}
{
{
Span_SpanKind_names
+
86
21
}
0
}
}
;
static
const
int
Span_SpanKind_entries_by_number
[
]
=
{
5
/
/
0
-
>
SPAN_KIND_UNSPECIFIED
2
/
/
1
-
>
SPAN_KIND_INTERNAL
4
/
/
2
-
>
SPAN_KIND_SERVER
0
/
/
3
-
>
SPAN_KIND_CLIENT
3
/
/
4
-
>
SPAN_KIND_PRODUCER
1
/
/
5
-
>
SPAN_KIND_CONSUMER
}
;
const
std
:
:
string
&
Span_SpanKind_Name
(
Span_SpanKind
value
)
{
static
const
bool
dummy
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
InitializeEnumStrings
(
Span_SpanKind_entries
Span_SpanKind_entries_by_number
6
Span_SpanKind_strings
)
;
(
void
)
dummy
;
int
idx
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumName
(
Span_SpanKind_entries
Span_SpanKind_entries_by_number
6
value
)
;
return
idx
=
=
-
1
?
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
(
)
:
Span_SpanKind_strings
[
idx
]
.
get
(
)
;
}
bool
Span_SpanKind_Parse
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
ConstStringParam
name
Span_SpanKind
*
value
)
{
int
int_value
;
bool
success
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumValue
(
Span_SpanKind_entries
6
name
&
int_value
)
;
if
(
success
)
{
*
value
=
static_cast
<
Span_SpanKind
>
(
int_value
)
;
}
return
success
;
}
#
if
(
__cplusplus
<
201703
)
&
&
(
!
defined
(
_MSC_VER
)
|
|
(
_MSC_VER
>
=
1900
&
&
_MSC_VER
<
1912
)
)
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_UNSPECIFIED
;
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_INTERNAL
;
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_SERVER
;
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_CLIENT
;
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_PRODUCER
;
constexpr
Span_SpanKind
Span
:
:
SPAN_KIND_CONSUMER
;
constexpr
Span_SpanKind
Span
:
:
SpanKind_MIN
;
constexpr
Span_SpanKind
Span
:
:
SpanKind_MAX
;
constexpr
int
Span
:
:
SpanKind_ARRAYSIZE
;
#
endif
/
/
(
__cplusplus
<
201703
)
&
&
(
!
defined
(
_MSC_VER
)
|
|
(
_MSC_VER
>
=
1900
&
&
_MSC_VER
<
1912
)
)
bool
Status_StatusCode_IsValid
(
int
value
)
{
switch
(
value
)
{
case
0
:
case
1
:
case
2
:
return
true
;
default
:
return
false
;
}
}
static
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExplicitlyConstructed
<
std
:
:
string
>
Status_StatusCode_strings
[
3
]
=
{
}
;
static
const
char
Status_StatusCode_names
[
]
=
"
STATUS_CODE_ERROR
"
"
STATUS_CODE_OK
"
"
STATUS_CODE_UNSET
"
;
static
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
EnumEntry
Status_StatusCode_entries
[
]
=
{
{
{
Status_StatusCode_names
+
0
17
}
2
}
{
{
Status_StatusCode_names
+
17
14
}
1
}
{
{
Status_StatusCode_names
+
31
17
}
0
}
}
;
static
const
int
Status_StatusCode_entries_by_number
[
]
=
{
2
/
/
0
-
>
STATUS_CODE_UNSET
1
/
/
1
-
>
STATUS_CODE_OK
0
/
/
2
-
>
STATUS_CODE_ERROR
}
;
const
std
:
:
string
&
Status_StatusCode_Name
(
Status_StatusCode
value
)
{
static
const
bool
dummy
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
InitializeEnumStrings
(
Status_StatusCode_entries
Status_StatusCode_entries_by_number
3
Status_StatusCode_strings
)
;
(
void
)
dummy
;
int
idx
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumName
(
Status_StatusCode_entries
Status_StatusCode_entries_by_number
3
value
)
;
return
idx
=
=
-
1
?
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
(
)
:
Status_StatusCode_strings
[
idx
]
.
get
(
)
;
}
bool
Status_StatusCode_Parse
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
ConstStringParam
name
Status_StatusCode
*
value
)
{
int
int_value
;
bool
success
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumValue
(
Status_StatusCode_entries
3
name
&
int_value
)
;
if
(
success
)
{
*
value
=
static_cast
<
Status_StatusCode
>
(
int_value
)
;
}
return
success
;
}
#
if
(
__cplusplus
<
201703
)
&
&
(
!
defined
(
_MSC_VER
)
|
|
(
_MSC_VER
>
=
1900
&
&
_MSC_VER
<
1912
)
)
constexpr
Status_StatusCode
Status
:
:
STATUS_CODE_UNSET
;
constexpr
Status_StatusCode
Status
:
:
STATUS_CODE_OK
;
constexpr
Status_StatusCode
Status
:
:
STATUS_CODE_ERROR
;
constexpr
Status_StatusCode
Status
:
:
StatusCode_MIN
;
constexpr
Status_StatusCode
Status
:
:
StatusCode_MAX
;
constexpr
int
Status
:
:
StatusCode_ARRAYSIZE
;
#
endif
/
/
(
__cplusplus
<
201703
)
&
&
(
!
defined
(
_MSC_VER
)
|
|
(
_MSC_VER
>
=
1900
&
&
_MSC_VER
<
1912
)
)
bool
SpanFlags_IsValid
(
int
value
)
{
switch
(
value
)
{
case
0
:
case
255
:
case
256
:
case
512
:
return
true
;
default
:
return
false
;
}
}
static
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExplicitlyConstructed
<
std
:
:
string
>
SpanFlags_strings
[
4
]
=
{
}
;
static
const
char
SpanFlags_names
[
]
=
"
SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK
"
"
SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK
"
"
SPAN_FLAGS_DO_NOT_USE
"
"
SPAN_FLAGS_TRACE_FLAGS_MASK
"
;
static
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
EnumEntry
SpanFlags_entries
[
]
=
{
{
{
SpanFlags_names
+
0
37
}
256
}
{
{
SpanFlags_names
+
37
33
}
512
}
{
{
SpanFlags_names
+
70
21
}
0
}
{
{
SpanFlags_names
+
91
27
}
255
}
}
;
static
const
int
SpanFlags_entries_by_number
[
]
=
{
2
/
/
0
-
>
SPAN_FLAGS_DO_NOT_USE
3
/
/
255
-
>
SPAN_FLAGS_TRACE_FLAGS_MASK
0
/
/
256
-
>
SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK
1
/
/
512
-
>
SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK
}
;
const
std
:
:
string
&
SpanFlags_Name
(
SpanFlags
value
)
{
static
const
bool
dummy
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
InitializeEnumStrings
(
SpanFlags_entries
SpanFlags_entries_by_number
4
SpanFlags_strings
)
;
(
void
)
dummy
;
int
idx
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumName
(
SpanFlags_entries
SpanFlags_entries_by_number
4
value
)
;
return
idx
=
=
-
1
?
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
(
)
:
SpanFlags_strings
[
idx
]
.
get
(
)
;
}
bool
SpanFlags_Parse
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
ConstStringParam
name
SpanFlags
*
value
)
{
int
int_value
;
bool
success
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
LookUpEnumValue
(
SpanFlags_entries
4
name
&
int_value
)
;
if
(
success
)
{
*
value
=
static_cast
<
SpanFlags
>
(
int_value
)
;
}
return
success
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
TracesData
:
:
_Internal
{
public
:
}
;
TracesData
:
:
TracesData
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
}
TracesData
:
:
TracesData
(
const
TracesData
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
TracesData
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
resource_spans_
)
{
from
.
_impl_
.
resource_spans_
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
}
inline
void
TracesData
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
resource_spans_
)
{
arena
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
}
TracesData
:
:
~
TracesData
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
TracesData
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
resource_spans_
.
~
RepeatedPtrField
(
)
;
}
void
TracesData
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
TracesData
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
resource_spans_
.
Clear
(
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
TracesData
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
resource_spans
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_resource_spans
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
10
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
TracesData
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
resource_spans
=
1
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_resource_spans_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_resource_spans
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
1
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
return
target
;
}
size_t
TracesData
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
resource_spans
=
1
;
total_size
+
=
1UL
*
this
-
>
_internal_resource_spans_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
resource_spans_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
TracesData
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
TracesData
*
>
(
&
from
)
)
;
}
void
TracesData
:
:
MergeFrom
(
const
TracesData
&
from
)
{
TracesData
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
resource_spans_
.
MergeFrom
(
from
.
_impl_
.
resource_spans_
)
;
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
TracesData
:
:
CopyFrom
(
const
TracesData
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
TracesData
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
TracesData
:
:
InternalSwap
(
TracesData
*
other
)
{
using
std
:
:
swap
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
resource_spans_
.
InternalSwap
(
&
other
-
>
_impl_
.
resource_spans_
)
;
}
std
:
:
string
TracesData
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
TracesData
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
ResourceSpans
:
:
_Internal
{
public
:
static
const
:
:
opentelemetry
:
:
proto
:
:
resource
:
:
v1
:
:
Resource
&
resource
(
const
ResourceSpans
*
msg
)
;
}
;
const
:
:
opentelemetry
:
:
proto
:
:
resource
:
:
v1
:
:
Resource
&
ResourceSpans
:
:
_Internal
:
:
resource
(
const
ResourceSpans
*
msg
)
{
return
*
msg
-
>
_impl_
.
resource_
;
}
void
ResourceSpans
:
:
clear_resource
(
)
{
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
resource_
!
=
nullptr
)
{
delete
_impl_
.
resource_
;
}
_impl_
.
resource_
=
nullptr
;
}
ResourceSpans
:
:
ResourceSpans
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
}
ResourceSpans
:
:
ResourceSpans
(
const
ResourceSpans
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
ResourceSpans
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
scope_spans_
)
{
from
.
_impl_
.
scope_spans_
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
resource_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
schema_url_
.
Set
(
from
.
_internal_schema_url
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
if
(
from
.
_internal_has_resource
(
)
)
{
_this
-
>
_impl_
.
resource_
=
new
:
:
opentelemetry
:
:
proto
:
:
resource
:
:
v1
:
:
Resource
(
*
from
.
_impl_
.
resource_
)
;
}
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
}
inline
void
ResourceSpans
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
scope_spans_
)
{
arena
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
resource_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ResourceSpans
:
:
~
ResourceSpans
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
ResourceSpans
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
scope_spans_
.
~
RepeatedPtrField
(
)
;
_impl_
.
schema_url_
.
Destroy
(
)
;
if
(
this
!
=
internal_default_instance
(
)
)
delete
_impl_
.
resource_
;
}
void
ResourceSpans
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
ResourceSpans
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
scope_spans_
.
Clear
(
)
;
_impl_
.
schema_url_
.
ClearToEmpty
(
)
;
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
resource_
!
=
nullptr
)
{
delete
_impl_
.
resource_
;
}
_impl_
.
resource_
=
nullptr
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
ResourceSpans
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
.
opentelemetry
.
proto
.
resource
.
v1
.
Resource
resource
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_resource
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
scope_spans
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_scope_spans
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
18
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
schema_url
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
auto
str
=
_internal_mutable_schema_url
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
ResourceSpans
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
.
opentelemetry
.
proto
.
resource
.
v1
.
Resource
resource
=
1
;
if
(
this
-
>
_internal_has_resource
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
1
_Internal
:
:
resource
(
this
)
_Internal
:
:
resource
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
scope_spans
=
2
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_scope_spans_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_scope_spans
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
2
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
string
schema_url
=
3
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_schema_url
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_schema_url
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
.
schema_url
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
3
this
-
>
_internal_schema_url
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
return
target
;
}
size_t
ResourceSpans
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
scope_spans
=
2
;
total_size
+
=
1UL
*
this
-
>
_internal_scope_spans_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
scope_spans_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
string
schema_url
=
3
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_schema_url
(
)
)
;
}
/
/
.
opentelemetry
.
proto
.
resource
.
v1
.
Resource
resource
=
1
;
if
(
this
-
>
_internal_has_resource
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
resource_
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
ResourceSpans
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
ResourceSpans
*
>
(
&
from
)
)
;
}
void
ResourceSpans
:
:
MergeFrom
(
const
ResourceSpans
&
from
)
{
ResourceSpans
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
scope_spans_
.
MergeFrom
(
from
.
_impl_
.
scope_spans_
)
;
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_schema_url
(
from
.
_internal_schema_url
(
)
)
;
}
if
(
from
.
_internal_has_resource
(
)
)
{
_this
-
>
_internal_mutable_resource
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
resource
:
:
v1
:
:
Resource
:
:
MergeFrom
(
from
.
_internal_resource
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
ResourceSpans
:
:
CopyFrom
(
const
ResourceSpans
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
ResourceSpans
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
ResourceSpans
:
:
InternalSwap
(
ResourceSpans
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
scope_spans_
.
InternalSwap
(
&
other
-
>
_impl_
.
scope_spans_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
schema_url_
lhs_arena
&
other
-
>
_impl_
.
schema_url_
rhs_arena
)
;
swap
(
_impl_
.
resource_
other
-
>
_impl_
.
resource_
)
;
}
std
:
:
string
ResourceSpans
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
ResourceSpans
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
ScopeSpans
:
:
_Internal
{
public
:
static
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
&
scope
(
const
ScopeSpans
*
msg
)
;
}
;
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
&
ScopeSpans
:
:
_Internal
:
:
scope
(
const
ScopeSpans
*
msg
)
{
return
*
msg
-
>
_impl_
.
scope_
;
}
void
ScopeSpans
:
:
clear_scope
(
)
{
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
scope_
!
=
nullptr
)
{
delete
_impl_
.
scope_
;
}
_impl_
.
scope_
=
nullptr
;
}
ScopeSpans
:
:
ScopeSpans
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
}
ScopeSpans
:
:
ScopeSpans
(
const
ScopeSpans
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
ScopeSpans
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
spans_
)
{
from
.
_impl_
.
spans_
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
scope_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
schema_url_
.
Set
(
from
.
_internal_schema_url
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
if
(
from
.
_internal_has_scope
(
)
)
{
_this
-
>
_impl_
.
scope_
=
new
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
(
*
from
.
_impl_
.
scope_
)
;
}
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
}
inline
void
ScopeSpans
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
spans_
)
{
arena
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
scope_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ScopeSpans
:
:
~
ScopeSpans
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
ScopeSpans
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
spans_
.
~
RepeatedPtrField
(
)
;
_impl_
.
schema_url_
.
Destroy
(
)
;
if
(
this
!
=
internal_default_instance
(
)
)
delete
_impl_
.
scope_
;
}
void
ScopeSpans
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
ScopeSpans
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
spans_
.
Clear
(
)
;
_impl_
.
schema_url_
.
ClearToEmpty
(
)
;
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
scope_
!
=
nullptr
)
{
delete
_impl_
.
scope_
;
}
_impl_
.
scope_
=
nullptr
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
ScopeSpans
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
scope
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_scope
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
spans
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_spans
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
18
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
schema_url
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
auto
str
=
_internal_mutable_schema_url
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
ScopeSpans
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
scope
=
1
;
if
(
this
-
>
_internal_has_scope
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
1
_Internal
:
:
scope
(
this
)
_Internal
:
:
scope
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
spans
=
2
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_spans_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_spans
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
2
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
string
schema_url
=
3
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_schema_url
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_schema_url
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
.
schema_url
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
3
this
-
>
_internal_schema_url
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
return
target
;
}
size_t
ScopeSpans
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
spans
=
2
;
total_size
+
=
1UL
*
this
-
>
_internal_spans_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
spans_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
string
schema_url
=
3
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_schema_url
(
)
)
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
scope
=
1
;
if
(
this
-
>
_internal_has_scope
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
scope_
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
ScopeSpans
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
ScopeSpans
*
>
(
&
from
)
)
;
}
void
ScopeSpans
:
:
MergeFrom
(
const
ScopeSpans
&
from
)
{
ScopeSpans
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
spans_
.
MergeFrom
(
from
.
_impl_
.
spans_
)
;
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_schema_url
(
from
.
_internal_schema_url
(
)
)
;
}
if
(
from
.
_internal_has_scope
(
)
)
{
_this
-
>
_internal_mutable_scope
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
:
:
MergeFrom
(
from
.
_internal_scope
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
ScopeSpans
:
:
CopyFrom
(
const
ScopeSpans
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
ScopeSpans
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
ScopeSpans
:
:
InternalSwap
(
ScopeSpans
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
spans_
.
InternalSwap
(
&
other
-
>
_impl_
.
spans_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
schema_url_
lhs_arena
&
other
-
>
_impl_
.
schema_url_
rhs_arena
)
;
swap
(
_impl_
.
scope_
other
-
>
_impl_
.
scope_
)
;
}
std
:
:
string
ScopeSpans
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
ScopeSpans
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
Span_Event
:
:
_Internal
{
public
:
}
;
void
Span_Event
:
:
clear_attributes
(
)
{
_impl_
.
attributes_
.
Clear
(
)
;
}
Span_Event
:
:
Span_Event
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
}
Span_Event
:
:
Span_Event
(
const
Span_Event
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
Span_Event
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
from
.
_impl_
.
attributes_
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
time_unix_nano_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
name_
.
Set
(
from
.
_internal_name
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
:
:
memcpy
(
&
_impl_
.
time_unix_nano_
&
from
.
_impl_
.
time_unix_nano_
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
dropped_attributes_count_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
time_unix_nano_
)
)
+
sizeof
(
_impl_
.
dropped_attributes_count_
)
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
}
inline
void
Span_Event
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
arena
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
time_unix_nano_
)
{
uint64_t
{
0u
}
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
0u
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Span_Event
:
:
~
Span_Event
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
Span_Event
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
attributes_
.
~
RepeatedPtrField
(
)
;
_impl_
.
name_
.
Destroy
(
)
;
}
void
Span_Event
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
Span_Event
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
attributes_
.
Clear
(
)
;
_impl_
.
name_
.
ClearToEmpty
(
)
;
:
:
memset
(
&
_impl_
.
time_unix_nano_
0
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
dropped_attributes_count_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
time_unix_nano_
)
)
+
sizeof
(
_impl_
.
dropped_attributes_count_
)
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
Span_Event
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
fixed64
time_unix_nano
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
9
)
)
{
_impl_
.
time_unix_nano_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
uint64_t
>
(
ptr
)
;
ptr
+
=
sizeof
(
uint64_t
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
name
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_name
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_attributes
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
26
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_attributes_count
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
32
)
)
{
_impl_
.
dropped_attributes_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
Span_Event
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
fixed64
time_unix_nano
=
1
;
if
(
this
-
>
_internal_time_unix_nano
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteFixed64ToArray
(
1
this
-
>
_internal_time_unix_nano
(
)
target
)
;
}
/
/
string
name
=
2
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_name
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_name
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
.
name
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
2
this
-
>
_internal_name
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_attributes_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_attributes
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
3
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_attributes_count
=
4
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
4
this
-
>
_internal_dropped_attributes_count
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
return
target
;
}
size_t
Span_Event
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
total_size
+
=
1UL
*
this
-
>
_internal_attributes_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
attributes_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
string
name
=
2
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_name
(
)
)
;
}
/
/
fixed64
time_unix_nano
=
1
;
if
(
this
-
>
_internal_time_unix_nano
(
)
!
=
0
)
{
total_size
+
=
1
+
8
;
}
/
/
uint32
dropped_attributes_count
=
4
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_attributes_count
(
)
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
Span_Event
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
Span_Event
*
>
(
&
from
)
)
;
}
void
Span_Event
:
:
MergeFrom
(
const
Span_Event
&
from
)
{
Span_Event
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
attributes_
.
MergeFrom
(
from
.
_impl_
.
attributes_
)
;
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_name
(
from
.
_internal_name
(
)
)
;
}
if
(
from
.
_internal_time_unix_nano
(
)
!
=
0
)
{
_this
-
>
_internal_set_time_unix_nano
(
from
.
_internal_time_unix_nano
(
)
)
;
}
if
(
from
.
_internal_dropped_attributes_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_attributes_count
(
from
.
_internal_dropped_attributes_count
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
Span_Event
:
:
CopyFrom
(
const
Span_Event
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
Span_Event
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
Span_Event
:
:
InternalSwap
(
Span_Event
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
attributes_
.
InternalSwap
(
&
other
-
>
_impl_
.
attributes_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
name_
lhs_arena
&
other
-
>
_impl_
.
name_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
memswap
<
PROTOBUF_FIELD_OFFSET
(
Span_Event
_impl_
.
dropped_attributes_count_
)
+
sizeof
(
Span_Event
:
:
_impl_
.
dropped_attributes_count_
)
-
PROTOBUF_FIELD_OFFSET
(
Span_Event
_impl_
.
time_unix_nano_
)
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
time_unix_nano_
)
reinterpret_cast
<
char
*
>
(
&
other
-
>
_impl_
.
time_unix_nano_
)
)
;
}
std
:
:
string
Span_Event
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
Span_Link
:
:
_Internal
{
public
:
}
;
void
Span_Link
:
:
clear_attributes
(
)
{
_impl_
.
attributes_
.
Clear
(
)
;
}
Span_Link
:
:
Span_Link
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
}
Span_Link
:
:
Span_Link
(
const
Span_Link
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
Span_Link
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
from
.
_impl_
.
attributes_
}
decltype
(
_impl_
.
trace_id_
)
{
}
decltype
(
_impl_
.
span_id_
)
{
}
decltype
(
_impl_
.
trace_state_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
}
decltype
(
_impl_
.
flags_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
trace_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_trace_id
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
trace_id_
.
Set
(
from
.
_internal_trace_id
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
span_id_
.
Set
(
from
.
_internal_span_id
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
trace_state_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_trace_state
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
trace_state_
.
Set
(
from
.
_internal_trace_state
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
:
:
memcpy
(
&
_impl_
.
dropped_attributes_count_
&
from
.
_impl_
.
dropped_attributes_count_
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
flags_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
dropped_attributes_count_
)
)
+
sizeof
(
_impl_
.
flags_
)
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
}
inline
void
Span_Link
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
arena
}
decltype
(
_impl_
.
trace_id_
)
{
}
decltype
(
_impl_
.
span_id_
)
{
}
decltype
(
_impl_
.
trace_state_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
0u
}
decltype
(
_impl_
.
flags_
)
{
0u
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
trace_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Span_Link
:
:
~
Span_Link
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
Span_Link
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
attributes_
.
~
RepeatedPtrField
(
)
;
_impl_
.
trace_id_
.
Destroy
(
)
;
_impl_
.
span_id_
.
Destroy
(
)
;
_impl_
.
trace_state_
.
Destroy
(
)
;
}
void
Span_Link
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
Span_Link
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
attributes_
.
Clear
(
)
;
_impl_
.
trace_id_
.
ClearToEmpty
(
)
;
_impl_
.
span_id_
.
ClearToEmpty
(
)
;
_impl_
.
trace_state_
.
ClearToEmpty
(
)
;
:
:
memset
(
&
_impl_
.
dropped_attributes_count_
0
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
flags_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
dropped_attributes_count_
)
)
+
sizeof
(
_impl_
.
flags_
)
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
Span_Link
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
bytes
trace_id
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_trace_id
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
bytes
span_id
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_span_id
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
trace_state
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
auto
str
=
_internal_mutable_trace_state
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
34
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_attributes
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
34
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_attributes_count
=
5
;
case
5
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
40
)
)
{
_impl_
.
dropped_attributes_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
fixed32
flags
=
6
;
case
6
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
53
)
)
{
_impl_
.
flags_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
uint32_t
>
(
ptr
)
;
ptr
+
=
sizeof
(
uint32_t
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
Span_Link
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
bytes
trace_id
=
1
;
if
(
!
this
-
>
_internal_trace_id
(
)
.
empty
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
1
this
-
>
_internal_trace_id
(
)
target
)
;
}
/
/
bytes
span_id
=
2
;
if
(
!
this
-
>
_internal_span_id
(
)
.
empty
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
2
this
-
>
_internal_span_id
(
)
target
)
;
}
/
/
string
trace_state
=
3
;
if
(
!
this
-
>
_internal_trace_state
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_trace_state
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_trace_state
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
.
trace_state
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
3
this
-
>
_internal_trace_state
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
4
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_attributes_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_attributes
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
4
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_attributes_count
=
5
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
5
this
-
>
_internal_dropped_attributes_count
(
)
target
)
;
}
/
/
fixed32
flags
=
6
;
if
(
this
-
>
_internal_flags
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteFixed32ToArray
(
6
this
-
>
_internal_flags
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
return
target
;
}
size_t
Span_Link
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
4
;
total_size
+
=
1UL
*
this
-
>
_internal_attributes_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
attributes_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
bytes
trace_id
=
1
;
if
(
!
this
-
>
_internal_trace_id
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_trace_id
(
)
)
;
}
/
/
bytes
span_id
=
2
;
if
(
!
this
-
>
_internal_span_id
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_span_id
(
)
)
;
}
/
/
string
trace_state
=
3
;
if
(
!
this
-
>
_internal_trace_state
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_trace_state
(
)
)
;
}
/
/
uint32
dropped_attributes_count
=
5
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_attributes_count
(
)
)
;
}
/
/
fixed32
flags
=
6
;
if
(
this
-
>
_internal_flags
(
)
!
=
0
)
{
total_size
+
=
1
+
4
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
Span_Link
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
Span_Link
*
>
(
&
from
)
)
;
}
void
Span_Link
:
:
MergeFrom
(
const
Span_Link
&
from
)
{
Span_Link
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
attributes_
.
MergeFrom
(
from
.
_impl_
.
attributes_
)
;
if
(
!
from
.
_internal_trace_id
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_trace_id
(
from
.
_internal_trace_id
(
)
)
;
}
if
(
!
from
.
_internal_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_span_id
(
from
.
_internal_span_id
(
)
)
;
}
if
(
!
from
.
_internal_trace_state
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_trace_state
(
from
.
_internal_trace_state
(
)
)
;
}
if
(
from
.
_internal_dropped_attributes_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_attributes_count
(
from
.
_internal_dropped_attributes_count
(
)
)
;
}
if
(
from
.
_internal_flags
(
)
!
=
0
)
{
_this
-
>
_internal_set_flags
(
from
.
_internal_flags
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
Span_Link
:
:
CopyFrom
(
const
Span_Link
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
Span_Link
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
Span_Link
:
:
InternalSwap
(
Span_Link
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
attributes_
.
InternalSwap
(
&
other
-
>
_impl_
.
attributes_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
trace_id_
lhs_arena
&
other
-
>
_impl_
.
trace_id_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
span_id_
lhs_arena
&
other
-
>
_impl_
.
span_id_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
trace_state_
lhs_arena
&
other
-
>
_impl_
.
trace_state_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
memswap
<
PROTOBUF_FIELD_OFFSET
(
Span_Link
_impl_
.
flags_
)
+
sizeof
(
Span_Link
:
:
_impl_
.
flags_
)
-
PROTOBUF_FIELD_OFFSET
(
Span_Link
_impl_
.
dropped_attributes_count_
)
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
dropped_attributes_count_
)
reinterpret_cast
<
char
*
>
(
&
other
-
>
_impl_
.
dropped_attributes_count_
)
)
;
}
std
:
:
string
Span_Link
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
Span
:
:
_Internal
{
public
:
static
const
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
&
status
(
const
Span
*
msg
)
;
}
;
const
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
&
Span
:
:
_Internal
:
:
status
(
const
Span
*
msg
)
{
return
*
msg
-
>
_impl_
.
status_
;
}
void
Span
:
:
clear_attributes
(
)
{
_impl_
.
attributes_
.
Clear
(
)
;
}
Span
:
:
Span
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
}
Span
:
:
Span
(
const
Span
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
Span
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
from
.
_impl_
.
attributes_
}
decltype
(
_impl_
.
events_
)
{
from
.
_impl_
.
events_
}
decltype
(
_impl_
.
links_
)
{
from
.
_impl_
.
links_
}
decltype
(
_impl_
.
trace_id_
)
{
}
decltype
(
_impl_
.
span_id_
)
{
}
decltype
(
_impl_
.
trace_state_
)
{
}
decltype
(
_impl_
.
parent_span_id_
)
{
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
status_
)
{
nullptr
}
decltype
(
_impl_
.
start_time_unix_nano_
)
{
}
decltype
(
_impl_
.
end_time_unix_nano_
)
{
}
decltype
(
_impl_
.
kind_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
}
decltype
(
_impl_
.
dropped_events_count_
)
{
}
decltype
(
_impl_
.
dropped_links_count_
)
{
}
decltype
(
_impl_
.
flags_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
trace_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_trace_id
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
trace_id_
.
Set
(
from
.
_internal_trace_id
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
span_id_
.
Set
(
from
.
_internal_span_id
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
trace_state_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_trace_state
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
trace_state_
.
Set
(
from
.
_internal_trace_state
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
parent_span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
parent_span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_parent_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
parent_span_id_
.
Set
(
from
.
_internal_parent_span_id
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
name_
.
Set
(
from
.
_internal_name
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
if
(
from
.
_internal_has_status
(
)
)
{
_this
-
>
_impl_
.
status_
=
new
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
(
*
from
.
_impl_
.
status_
)
;
}
:
:
memcpy
(
&
_impl_
.
start_time_unix_nano_
&
from
.
_impl_
.
start_time_unix_nano_
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
flags_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
start_time_unix_nano_
)
)
+
sizeof
(
_impl_
.
flags_
)
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
}
inline
void
Span
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
arena
}
decltype
(
_impl_
.
events_
)
{
arena
}
decltype
(
_impl_
.
links_
)
{
arena
}
decltype
(
_impl_
.
trace_id_
)
{
}
decltype
(
_impl_
.
span_id_
)
{
}
decltype
(
_impl_
.
trace_state_
)
{
}
decltype
(
_impl_
.
parent_span_id_
)
{
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
status_
)
{
nullptr
}
decltype
(
_impl_
.
start_time_unix_nano_
)
{
uint64_t
{
0u
}
}
decltype
(
_impl_
.
end_time_unix_nano_
)
{
uint64_t
{
0u
}
}
decltype
(
_impl_
.
kind_
)
{
0
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
0u
}
decltype
(
_impl_
.
dropped_events_count_
)
{
0u
}
decltype
(
_impl_
.
dropped_links_count_
)
{
0u
}
decltype
(
_impl_
.
flags_
)
{
0u
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
trace_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
trace_state_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
parent_span_id_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
parent_span_id_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Span
:
:
~
Span
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
Span
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
attributes_
.
~
RepeatedPtrField
(
)
;
_impl_
.
events_
.
~
RepeatedPtrField
(
)
;
_impl_
.
links_
.
~
RepeatedPtrField
(
)
;
_impl_
.
trace_id_
.
Destroy
(
)
;
_impl_
.
span_id_
.
Destroy
(
)
;
_impl_
.
trace_state_
.
Destroy
(
)
;
_impl_
.
parent_span_id_
.
Destroy
(
)
;
_impl_
.
name_
.
Destroy
(
)
;
if
(
this
!
=
internal_default_instance
(
)
)
delete
_impl_
.
status_
;
}
void
Span
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
Span
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
attributes_
.
Clear
(
)
;
_impl_
.
events_
.
Clear
(
)
;
_impl_
.
links_
.
Clear
(
)
;
_impl_
.
trace_id_
.
ClearToEmpty
(
)
;
_impl_
.
span_id_
.
ClearToEmpty
(
)
;
_impl_
.
trace_state_
.
ClearToEmpty
(
)
;
_impl_
.
parent_span_id_
.
ClearToEmpty
(
)
;
_impl_
.
name_
.
ClearToEmpty
(
)
;
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
status_
!
=
nullptr
)
{
delete
_impl_
.
status_
;
}
_impl_
.
status_
=
nullptr
;
:
:
memset
(
&
_impl_
.
start_time_unix_nano_
0
static_cast
<
size_t
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
flags_
)
-
reinterpret_cast
<
char
*
>
(
&
_impl_
.
start_time_unix_nano_
)
)
+
sizeof
(
_impl_
.
flags_
)
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
Span
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
bytes
trace_id
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_trace_id
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
bytes
span_id
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_span_id
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
trace_state
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
auto
str
=
_internal_mutable_trace_state
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
bytes
parent_span_id
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
34
)
)
{
auto
str
=
_internal_mutable_parent_span_id
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
name
=
5
;
case
5
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
42
)
)
{
auto
str
=
_internal_mutable_name
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
SpanKind
kind
=
6
;
case
6
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
48
)
)
{
uint64_t
val
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint64
(
&
ptr
)
;
CHK_
(
ptr
)
;
_internal_set_kind
(
static_cast
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_SpanKind
>
(
val
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
fixed64
start_time_unix_nano
=
7
;
case
7
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
57
)
)
{
_impl_
.
start_time_unix_nano_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
uint64_t
>
(
ptr
)
;
ptr
+
=
sizeof
(
uint64_t
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
fixed64
end_time_unix_nano
=
8
;
case
8
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
65
)
)
{
_impl_
.
end_time_unix_nano_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
uint64_t
>
(
ptr
)
;
ptr
+
=
sizeof
(
uint64_t
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
9
;
case
9
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
74
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_attributes
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
74
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_attributes_count
=
10
;
case
10
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
80
)
)
{
_impl_
.
dropped_attributes_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
events
=
11
;
case
11
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
90
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_events
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
90
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_events_count
=
12
;
case
12
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
96
)
)
{
_impl_
.
dropped_events_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
links
=
13
;
case
13
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
106
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_links
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
106
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_links_count
=
14
;
case
14
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
112
)
)
{
_impl_
.
dropped_links_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
status
=
15
;
case
15
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
122
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_status
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
fixed32
flags
=
16
;
case
16
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
133
)
)
{
_impl_
.
flags_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
uint32_t
>
(
ptr
)
;
ptr
+
=
sizeof
(
uint32_t
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
Span
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
bytes
trace_id
=
1
;
if
(
!
this
-
>
_internal_trace_id
(
)
.
empty
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
1
this
-
>
_internal_trace_id
(
)
target
)
;
}
/
/
bytes
span_id
=
2
;
if
(
!
this
-
>
_internal_span_id
(
)
.
empty
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
2
this
-
>
_internal_span_id
(
)
target
)
;
}
/
/
string
trace_state
=
3
;
if
(
!
this
-
>
_internal_trace_state
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_trace_state
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_trace_state
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
trace_state
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
3
this
-
>
_internal_trace_state
(
)
target
)
;
}
/
/
bytes
parent_span_id
=
4
;
if
(
!
this
-
>
_internal_parent_span_id
(
)
.
empty
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
4
this
-
>
_internal_parent_span_id
(
)
target
)
;
}
/
/
string
name
=
5
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_name
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_name
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
name
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
5
this
-
>
_internal_name
(
)
target
)
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
SpanKind
kind
=
6
;
if
(
this
-
>
_internal_kind
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteEnumToArray
(
6
this
-
>
_internal_kind
(
)
target
)
;
}
/
/
fixed64
start_time_unix_nano
=
7
;
if
(
this
-
>
_internal_start_time_unix_nano
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteFixed64ToArray
(
7
this
-
>
_internal_start_time_unix_nano
(
)
target
)
;
}
/
/
fixed64
end_time_unix_nano
=
8
;
if
(
this
-
>
_internal_end_time_unix_nano
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteFixed64ToArray
(
8
this
-
>
_internal_end_time_unix_nano
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
9
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_attributes_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_attributes
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
9
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_attributes_count
=
10
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
10
this
-
>
_internal_dropped_attributes_count
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
events
=
11
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_events_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_events
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
11
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_events_count
=
12
;
if
(
this
-
>
_internal_dropped_events_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
12
this
-
>
_internal_dropped_events_count
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
links
=
13
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_links_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_links
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
13
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_links_count
=
14
;
if
(
this
-
>
_internal_dropped_links_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
14
this
-
>
_internal_dropped_links_count
(
)
target
)
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
status
=
15
;
if
(
this
-
>
_internal_has_status
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
15
_Internal
:
:
status
(
this
)
_Internal
:
:
status
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
fixed32
flags
=
16
;
if
(
this
-
>
_internal_flags
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteFixed32ToArray
(
16
this
-
>
_internal_flags
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
return
target
;
}
size_t
Span
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
9
;
total_size
+
=
1UL
*
this
-
>
_internal_attributes_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
attributes_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Event
events
=
11
;
total_size
+
=
1UL
*
this
-
>
_internal_events_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
events_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
Link
links
=
13
;
total_size
+
=
1UL
*
this
-
>
_internal_links_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
links_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
bytes
trace_id
=
1
;
if
(
!
this
-
>
_internal_trace_id
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_trace_id
(
)
)
;
}
/
/
bytes
span_id
=
2
;
if
(
!
this
-
>
_internal_span_id
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_span_id
(
)
)
;
}
/
/
string
trace_state
=
3
;
if
(
!
this
-
>
_internal_trace_state
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_trace_state
(
)
)
;
}
/
/
bytes
parent_span_id
=
4
;
if
(
!
this
-
>
_internal_parent_span_id
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_parent_span_id
(
)
)
;
}
/
/
string
name
=
5
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_name
(
)
)
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
status
=
15
;
if
(
this
-
>
_internal_has_status
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
status_
)
;
}
/
/
fixed64
start_time_unix_nano
=
7
;
if
(
this
-
>
_internal_start_time_unix_nano
(
)
!
=
0
)
{
total_size
+
=
1
+
8
;
}
/
/
fixed64
end_time_unix_nano
=
8
;
if
(
this
-
>
_internal_end_time_unix_nano
(
)
!
=
0
)
{
total_size
+
=
1
+
8
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Span
.
SpanKind
kind
=
6
;
if
(
this
-
>
_internal_kind
(
)
!
=
0
)
{
total_size
+
=
1
+
:
:
_pbi
:
:
WireFormatLite
:
:
EnumSize
(
this
-
>
_internal_kind
(
)
)
;
}
/
/
uint32
dropped_attributes_count
=
10
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_attributes_count
(
)
)
;
}
/
/
uint32
dropped_events_count
=
12
;
if
(
this
-
>
_internal_dropped_events_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_events_count
(
)
)
;
}
/
/
uint32
dropped_links_count
=
14
;
if
(
this
-
>
_internal_dropped_links_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_links_count
(
)
)
;
}
/
/
fixed32
flags
=
16
;
if
(
this
-
>
_internal_flags
(
)
!
=
0
)
{
total_size
+
=
2
+
4
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
Span
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
Span
*
>
(
&
from
)
)
;
}
void
Span
:
:
MergeFrom
(
const
Span
&
from
)
{
Span
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
attributes_
.
MergeFrom
(
from
.
_impl_
.
attributes_
)
;
_this
-
>
_impl_
.
events_
.
MergeFrom
(
from
.
_impl_
.
events_
)
;
_this
-
>
_impl_
.
links_
.
MergeFrom
(
from
.
_impl_
.
links_
)
;
if
(
!
from
.
_internal_trace_id
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_trace_id
(
from
.
_internal_trace_id
(
)
)
;
}
if
(
!
from
.
_internal_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_span_id
(
from
.
_internal_span_id
(
)
)
;
}
if
(
!
from
.
_internal_trace_state
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_trace_state
(
from
.
_internal_trace_state
(
)
)
;
}
if
(
!
from
.
_internal_parent_span_id
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_parent_span_id
(
from
.
_internal_parent_span_id
(
)
)
;
}
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_name
(
from
.
_internal_name
(
)
)
;
}
if
(
from
.
_internal_has_status
(
)
)
{
_this
-
>
_internal_mutable_status
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
:
:
MergeFrom
(
from
.
_internal_status
(
)
)
;
}
if
(
from
.
_internal_start_time_unix_nano
(
)
!
=
0
)
{
_this
-
>
_internal_set_start_time_unix_nano
(
from
.
_internal_start_time_unix_nano
(
)
)
;
}
if
(
from
.
_internal_end_time_unix_nano
(
)
!
=
0
)
{
_this
-
>
_internal_set_end_time_unix_nano
(
from
.
_internal_end_time_unix_nano
(
)
)
;
}
if
(
from
.
_internal_kind
(
)
!
=
0
)
{
_this
-
>
_internal_set_kind
(
from
.
_internal_kind
(
)
)
;
}
if
(
from
.
_internal_dropped_attributes_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_attributes_count
(
from
.
_internal_dropped_attributes_count
(
)
)
;
}
if
(
from
.
_internal_dropped_events_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_events_count
(
from
.
_internal_dropped_events_count
(
)
)
;
}
if
(
from
.
_internal_dropped_links_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_links_count
(
from
.
_internal_dropped_links_count
(
)
)
;
}
if
(
from
.
_internal_flags
(
)
!
=
0
)
{
_this
-
>
_internal_set_flags
(
from
.
_internal_flags
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
Span
:
:
CopyFrom
(
const
Span
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Span
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
Span
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
Span
:
:
InternalSwap
(
Span
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
attributes_
.
InternalSwap
(
&
other
-
>
_impl_
.
attributes_
)
;
_impl_
.
events_
.
InternalSwap
(
&
other
-
>
_impl_
.
events_
)
;
_impl_
.
links_
.
InternalSwap
(
&
other
-
>
_impl_
.
links_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
trace_id_
lhs_arena
&
other
-
>
_impl_
.
trace_id_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
span_id_
lhs_arena
&
other
-
>
_impl_
.
span_id_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
trace_state_
lhs_arena
&
other
-
>
_impl_
.
trace_state_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
parent_span_id_
lhs_arena
&
other
-
>
_impl_
.
parent_span_id_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
name_
lhs_arena
&
other
-
>
_impl_
.
name_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
memswap
<
PROTOBUF_FIELD_OFFSET
(
Span
_impl_
.
flags_
)
+
sizeof
(
Span
:
:
_impl_
.
flags_
)
-
PROTOBUF_FIELD_OFFSET
(
Span
_impl_
.
status_
)
>
(
reinterpret_cast
<
char
*
>
(
&
_impl_
.
status_
)
reinterpret_cast
<
char
*
>
(
&
other
-
>
_impl_
.
status_
)
)
;
}
std
:
:
string
Span
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
Span
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
Status
:
:
_Internal
{
public
:
}
;
Status
:
:
Status
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
}
Status
:
:
Status
(
const
Status
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
Status
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
message_
)
{
}
decltype
(
_impl_
.
code_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
message_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
message_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_message
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
message_
.
Set
(
from
.
_internal_message
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_this
-
>
_impl_
.
code_
=
from
.
_impl_
.
code_
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
}
inline
void
Status
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
message_
)
{
}
decltype
(
_impl_
.
code_
)
{
0
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
message_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
message_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Status
:
:
~
Status
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
Status
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
message_
.
Destroy
(
)
;
}
void
Status
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
Status
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
message_
.
ClearToEmpty
(
)
;
_impl_
.
code_
=
0
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
Status
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
string
message
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_message
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
.
StatusCode
code
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
24
)
)
{
uint64_t
val
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint64
(
&
ptr
)
;
CHK_
(
ptr
)
;
_internal_set_code
(
static_cast
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status_StatusCode
>
(
val
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
Status
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
string
message
=
2
;
if
(
!
this
-
>
_internal_message
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_message
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_message
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
trace
.
v1
.
Status
.
message
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
2
this
-
>
_internal_message
(
)
target
)
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
.
StatusCode
code
=
3
;
if
(
this
-
>
_internal_code
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteEnumToArray
(
3
this
-
>
_internal_code
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
return
target
;
}
size_t
Status
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
string
message
=
2
;
if
(
!
this
-
>
_internal_message
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_message
(
)
)
;
}
/
/
.
opentelemetry
.
proto
.
trace
.
v1
.
Status
.
StatusCode
code
=
3
;
if
(
this
-
>
_internal_code
(
)
!
=
0
)
{
total_size
+
=
1
+
:
:
_pbi
:
:
WireFormatLite
:
:
EnumSize
(
this
-
>
_internal_code
(
)
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
Status
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
Status
*
>
(
&
from
)
)
;
}
void
Status
:
:
MergeFrom
(
const
Status
&
from
)
{
Status
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
if
(
!
from
.
_internal_message
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_message
(
from
.
_internal_message
(
)
)
;
}
if
(
from
.
_internal_code
(
)
!
=
0
)
{
_this
-
>
_internal_set_code
(
from
.
_internal_code
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
Status
:
:
CopyFrom
(
const
Status
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
trace
.
v1
.
Status
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
Status
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
Status
:
:
InternalSwap
(
Status
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
message_
lhs_arena
&
other
-
>
_impl_
.
message_
rhs_arena
)
;
swap
(
_impl_
.
code_
other
-
>
_impl_
.
code_
)
;
}
std
:
:
string
Status
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
trace
.
v1
.
Status
"
;
}
/
/
protoc_insertion_point
(
namespace_scope
)
}
/
/
namespace
v1
}
/
/
namespace
trace
}
/
/
namespace
proto
}
/
/
namespace
opentelemetry
PROTOBUF_NAMESPACE_OPEN
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
TracesData
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
TracesData
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
TracesData
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ResourceSpans
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ResourceSpans
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ResourceSpans
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ScopeSpans
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ScopeSpans
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
ScopeSpans
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Event
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Event
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Event
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Link
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Link
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span_Link
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Span
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
trace
:
:
v1
:
:
Status
>
(
arena
)
;
}
PROTOBUF_NAMESPACE_CLOSE
/
/
protoc_insertion_point
(
global_scope
)
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
