/
/
Generated
by
the
protocol
buffer
compiler
.
DO
NOT
EDIT
!
/
/
source
:
opentelemetry
/
proto
/
common
/
v1
/
common
.
proto
#
include
"
opentelemetry
/
proto
/
common
/
v1
/
common
.
pb
.
h
"
#
include
<
algorithm
>
#
include
<
google
/
protobuf
/
io
/
coded_stream
.
h
>
#
include
<
google
/
protobuf
/
extension_set
.
h
>
#
include
<
google
/
protobuf
/
wire_format_lite
.
h
>
#
include
<
google
/
protobuf
/
io
/
zero_copy_stream_impl_lite
.
h
>
/
/
protoc_insertion_point
(
includes
)
#
include
<
google
/
protobuf
/
port_def
.
inc
>
PROTOBUF_PRAGMA_INIT_SEG
namespace
_pb
=
:
:
PROTOBUF_NAMESPACE_ID
;
namespace
_pbi
=
_pb
:
:
internal
;
namespace
opentelemetry
{
namespace
proto
{
namespace
common
{
namespace
v1
{
PROTOBUF_CONSTEXPR
AnyValue
:
:
AnyValue
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
value_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_oneof_case_
)
*
/
{
}
}
{
}
struct
AnyValueDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
AnyValueDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
AnyValueDefaultTypeInternal
(
)
{
}
union
{
AnyValue
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
AnyValueDefaultTypeInternal
_AnyValue_default_instance_
;
PROTOBUF_CONSTEXPR
ArrayValue
:
:
ArrayValue
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
values_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
ArrayValueDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
ArrayValueDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
ArrayValueDefaultTypeInternal
(
)
{
}
union
{
ArrayValue
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
ArrayValueDefaultTypeInternal
_ArrayValue_default_instance_
;
PROTOBUF_CONSTEXPR
KeyValueList
:
:
KeyValueList
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
values_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
KeyValueListDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
KeyValueListDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
KeyValueListDefaultTypeInternal
(
)
{
}
union
{
KeyValueList
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
KeyValueListDefaultTypeInternal
_KeyValueList_default_instance_
;
PROTOBUF_CONSTEXPR
KeyValue
:
:
KeyValue
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
key_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
value_
)
*
/
nullptr
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
KeyValueDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
KeyValueDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
KeyValueDefaultTypeInternal
(
)
{
}
union
{
KeyValue
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
KeyValueDefaultTypeInternal
_KeyValue_default_instance_
;
PROTOBUF_CONSTEXPR
InstrumentationScope
:
:
InstrumentationScope
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
attributes_
)
*
/
{
}
/
*
decltype
(
_impl_
.
name_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
version_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
dropped_attributes_count_
)
*
/
0u
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
InstrumentationScopeDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
InstrumentationScopeDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
InstrumentationScopeDefaultTypeInternal
(
)
{
}
union
{
InstrumentationScope
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
InstrumentationScopeDefaultTypeInternal
_InstrumentationScope_default_instance_
;
PROTOBUF_CONSTEXPR
EntityRef
:
:
EntityRef
(
:
:
_pbi
:
:
ConstantInitialized
)
:
_impl_
{
/
*
decltype
(
_impl_
.
id_keys_
)
*
/
{
}
/
*
decltype
(
_impl_
.
description_keys_
)
*
/
{
}
/
*
decltype
(
_impl_
.
schema_url_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
type_
)
*
/
{
&
:
:
_pbi
:
:
fixed_address_empty_string
:
:
_pbi
:
:
ConstantInitialized
{
}
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
{
}
struct
EntityRefDefaultTypeInternal
{
PROTOBUF_CONSTEXPR
EntityRefDefaultTypeInternal
(
)
:
_instance
(
:
:
_pbi
:
:
ConstantInitialized
{
}
)
{
}
~
EntityRefDefaultTypeInternal
(
)
{
}
union
{
EntityRef
_instance
;
}
;
}
;
PROTOBUF_ATTRIBUTE_NO_DESTROY
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
EntityRefDefaultTypeInternal
_EntityRef_default_instance_
;
}
/
/
namespace
v1
}
/
/
namespace
common
}
/
/
namespace
proto
}
/
/
namespace
opentelemetry
namespace
opentelemetry
{
namespace
proto
{
namespace
common
{
namespace
v1
{
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
AnyValue
:
:
_Internal
{
public
:
static
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
&
array_value
(
const
AnyValue
*
msg
)
;
static
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
&
kvlist_value
(
const
AnyValue
*
msg
)
;
}
;
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
&
AnyValue
:
:
_Internal
:
:
array_value
(
const
AnyValue
*
msg
)
{
return
*
msg
-
>
_impl_
.
value_
.
array_value_
;
}
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
&
AnyValue
:
:
_Internal
:
:
kvlist_value
(
const
AnyValue
*
msg
)
{
return
*
msg
-
>
_impl_
.
value_
.
kvlist_value_
;
}
void
AnyValue
:
:
set_allocated_array_value
(
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
*
array_value
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
message_arena
=
GetArenaForAllocation
(
)
;
clear_value
(
)
;
if
(
array_value
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
submessage_arena
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
:
:
InternalGetOwningArena
(
array_value
)
;
if
(
message_arena
!
=
submessage_arena
)
{
array_value
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetOwnedMessage
(
message_arena
array_value
submessage_arena
)
;
}
set_has_array_value
(
)
;
_impl_
.
value_
.
array_value_
=
array_value
;
}
/
/
protoc_insertion_point
(
field_set_allocated
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
.
array_value
)
}
void
AnyValue
:
:
set_allocated_kvlist_value
(
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
*
kvlist_value
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
message_arena
=
GetArenaForAllocation
(
)
;
clear_value
(
)
;
if
(
kvlist_value
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
submessage_arena
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
:
:
InternalGetOwningArena
(
kvlist_value
)
;
if
(
message_arena
!
=
submessage_arena
)
{
kvlist_value
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetOwnedMessage
(
message_arena
kvlist_value
submessage_arena
)
;
}
set_has_kvlist_value
(
)
;
_impl_
.
value_
.
kvlist_value_
=
kvlist_value
;
}
/
/
protoc_insertion_point
(
field_set_allocated
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
.
kvlist_value
)
}
AnyValue
:
:
AnyValue
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
}
AnyValue
:
:
AnyValue
(
const
AnyValue
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
AnyValue
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
value_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_oneof_case_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
clear_has_value
(
)
;
switch
(
from
.
value_case
(
)
)
{
case
kStringValue
:
{
_this
-
>
_internal_set_string_value
(
from
.
_internal_string_value
(
)
)
;
break
;
}
case
kBoolValue
:
{
_this
-
>
_internal_set_bool_value
(
from
.
_internal_bool_value
(
)
)
;
break
;
}
case
kIntValue
:
{
_this
-
>
_internal_set_int_value
(
from
.
_internal_int_value
(
)
)
;
break
;
}
case
kDoubleValue
:
{
_this
-
>
_internal_set_double_value
(
from
.
_internal_double_value
(
)
)
;
break
;
}
case
kArrayValue
:
{
_this
-
>
_internal_mutable_array_value
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
:
:
MergeFrom
(
from
.
_internal_array_value
(
)
)
;
break
;
}
case
kKvlistValue
:
{
_this
-
>
_internal_mutable_kvlist_value
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
:
:
MergeFrom
(
from
.
_internal_kvlist_value
(
)
)
;
break
;
}
case
kBytesValue
:
{
_this
-
>
_internal_set_bytes_value
(
from
.
_internal_bytes_value
(
)
)
;
break
;
}
case
VALUE_NOT_SET
:
{
break
;
}
}
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
}
inline
void
AnyValue
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
value_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
/
*
decltype
(
_impl_
.
_oneof_case_
)
*
/
{
}
}
;
clear_has_value
(
)
;
}
AnyValue
:
:
~
AnyValue
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
AnyValue
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
if
(
has_value
(
)
)
{
clear_value
(
)
;
}
}
void
AnyValue
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
AnyValue
:
:
clear_value
(
)
{
/
/
protoc_insertion_point
(
one_of_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
switch
(
value_case
(
)
)
{
case
kStringValue
:
{
_impl_
.
value_
.
string_value_
.
Destroy
(
)
;
break
;
}
case
kBoolValue
:
{
/
/
No
need
to
clear
break
;
}
case
kIntValue
:
{
/
/
No
need
to
clear
break
;
}
case
kDoubleValue
:
{
/
/
No
need
to
clear
break
;
}
case
kArrayValue
:
{
if
(
GetArenaForAllocation
(
)
=
=
nullptr
)
{
delete
_impl_
.
value_
.
array_value_
;
}
break
;
}
case
kKvlistValue
:
{
if
(
GetArenaForAllocation
(
)
=
=
nullptr
)
{
delete
_impl_
.
value_
.
kvlist_value_
;
}
break
;
}
case
kBytesValue
:
{
_impl_
.
value_
.
bytes_value_
.
Destroy
(
)
;
break
;
}
case
VALUE_NOT_SET
:
{
break
;
}
}
_impl_
.
_oneof_case_
[
0
]
=
VALUE_NOT_SET
;
}
void
AnyValue
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
clear_value
(
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
AnyValue
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
string
string_value
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_string_value
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
bool
bool_value
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
16
)
)
{
_internal_set_bool_value
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint64
(
&
ptr
)
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
int64
int_value
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
24
)
)
{
_internal_set_int_value
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint64
(
&
ptr
)
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
double
double_value
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
33
)
)
{
_internal_set_double_value
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
UnalignedLoad
<
double
>
(
ptr
)
)
;
ptr
+
=
sizeof
(
double
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
array_value
=
5
;
case
5
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
42
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_array_value
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
kvlist_value
=
6
;
case
6
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
50
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_kvlist_value
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
bytes
bytes_value
=
7
;
case
7
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
58
)
)
{
auto
str
=
_internal_mutable_bytes_value
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
AnyValue
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
string
string_value
=
1
;
if
(
_internal_has_string_value
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_string_value
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_string_value
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
.
string_value
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
1
this
-
>
_internal_string_value
(
)
target
)
;
}
/
/
bool
bool_value
=
2
;
if
(
_internal_has_bool_value
(
)
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteBoolToArray
(
2
this
-
>
_internal_bool_value
(
)
target
)
;
}
/
/
int64
int_value
=
3
;
if
(
_internal_has_int_value
(
)
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteInt64ToArray
(
3
this
-
>
_internal_int_value
(
)
target
)
;
}
/
/
double
double_value
=
4
;
if
(
_internal_has_double_value
(
)
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteDoubleToArray
(
4
this
-
>
_internal_double_value
(
)
target
)
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
array_value
=
5
;
if
(
_internal_has_array_value
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
5
_Internal
:
:
array_value
(
this
)
_Internal
:
:
array_value
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
kvlist_value
=
6
;
if
(
_internal_has_kvlist_value
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
6
_Internal
:
:
kvlist_value
(
this
)
_Internal
:
:
kvlist_value
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
bytes
bytes_value
=
7
;
if
(
_internal_has_bytes_value
(
)
)
{
target
=
stream
-
>
WriteBytesMaybeAliased
(
7
this
-
>
_internal_bytes_value
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
return
target
;
}
size_t
AnyValue
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
switch
(
value_case
(
)
)
{
/
/
string
string_value
=
1
;
case
kStringValue
:
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_string_value
(
)
)
;
break
;
}
/
/
bool
bool_value
=
2
;
case
kBoolValue
:
{
total_size
+
=
1
+
1
;
break
;
}
/
/
int64
int_value
=
3
;
case
kIntValue
:
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
Int64SizePlusOne
(
this
-
>
_internal_int_value
(
)
)
;
break
;
}
/
/
double
double_value
=
4
;
case
kDoubleValue
:
{
total_size
+
=
1
+
8
;
break
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
array_value
=
5
;
case
kArrayValue
:
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
value_
.
array_value_
)
;
break
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
kvlist_value
=
6
;
case
kKvlistValue
:
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
value_
.
kvlist_value_
)
;
break
;
}
/
/
bytes
bytes_value
=
7
;
case
kBytesValue
:
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
BytesSize
(
this
-
>
_internal_bytes_value
(
)
)
;
break
;
}
case
VALUE_NOT_SET
:
{
break
;
}
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
AnyValue
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
AnyValue
*
>
(
&
from
)
)
;
}
void
AnyValue
:
:
MergeFrom
(
const
AnyValue
&
from
)
{
AnyValue
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
switch
(
from
.
value_case
(
)
)
{
case
kStringValue
:
{
_this
-
>
_internal_set_string_value
(
from
.
_internal_string_value
(
)
)
;
break
;
}
case
kBoolValue
:
{
_this
-
>
_internal_set_bool_value
(
from
.
_internal_bool_value
(
)
)
;
break
;
}
case
kIntValue
:
{
_this
-
>
_internal_set_int_value
(
from
.
_internal_int_value
(
)
)
;
break
;
}
case
kDoubleValue
:
{
_this
-
>
_internal_set_double_value
(
from
.
_internal_double_value
(
)
)
;
break
;
}
case
kArrayValue
:
{
_this
-
>
_internal_mutable_array_value
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
:
:
MergeFrom
(
from
.
_internal_array_value
(
)
)
;
break
;
}
case
kKvlistValue
:
{
_this
-
>
_internal_mutable_kvlist_value
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
:
:
MergeFrom
(
from
.
_internal_kvlist_value
(
)
)
;
break
;
}
case
kBytesValue
:
{
_this
-
>
_internal_set_bytes_value
(
from
.
_internal_bytes_value
(
)
)
;
break
;
}
case
VALUE_NOT_SET
:
{
break
;
}
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
AnyValue
:
:
CopyFrom
(
const
AnyValue
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
AnyValue
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
AnyValue
:
:
InternalSwap
(
AnyValue
*
other
)
{
using
std
:
:
swap
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
swap
(
_impl_
.
value_
other
-
>
_impl_
.
value_
)
;
swap
(
_impl_
.
_oneof_case_
[
0
]
other
-
>
_impl_
.
_oneof_case_
[
0
]
)
;
}
std
:
:
string
AnyValue
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
ArrayValue
:
:
_Internal
{
public
:
}
;
ArrayValue
:
:
ArrayValue
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
}
ArrayValue
:
:
ArrayValue
(
const
ArrayValue
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
ArrayValue
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
values_
)
{
from
.
_impl_
.
values_
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
}
inline
void
ArrayValue
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
values_
)
{
arena
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
}
ArrayValue
:
:
~
ArrayValue
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
ArrayValue
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
values_
.
~
RepeatedPtrField
(
)
;
}
void
ArrayValue
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
ArrayValue
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
values_
.
Clear
(
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
ArrayValue
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
values
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_values
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
10
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
ArrayValue
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
values
=
1
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_values_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_values
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
1
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
return
target
;
}
size_t
ArrayValue
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
values
=
1
;
total_size
+
=
1UL
*
this
-
>
_internal_values_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
values_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
ArrayValue
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
ArrayValue
*
>
(
&
from
)
)
;
}
void
ArrayValue
:
:
MergeFrom
(
const
ArrayValue
&
from
)
{
ArrayValue
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
values_
.
MergeFrom
(
from
.
_impl_
.
values_
)
;
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
ArrayValue
:
:
CopyFrom
(
const
ArrayValue
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
ArrayValue
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
ArrayValue
:
:
InternalSwap
(
ArrayValue
*
other
)
{
using
std
:
:
swap
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
values_
.
InternalSwap
(
&
other
-
>
_impl_
.
values_
)
;
}
std
:
:
string
ArrayValue
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
ArrayValue
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
KeyValueList
:
:
_Internal
{
public
:
}
;
KeyValueList
:
:
KeyValueList
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
}
KeyValueList
:
:
KeyValueList
(
const
KeyValueList
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
KeyValueList
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
values_
)
{
from
.
_impl_
.
values_
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
}
inline
void
KeyValueList
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
values_
)
{
arena
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
}
KeyValueList
:
:
~
KeyValueList
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
KeyValueList
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
values_
.
~
RepeatedPtrField
(
)
;
}
void
KeyValueList
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
KeyValueList
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
values_
.
Clear
(
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
KeyValueList
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
values
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_values
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
10
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
KeyValueList
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
values
=
1
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_values_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_values
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
1
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
return
target
;
}
size_t
KeyValueList
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
values
=
1
;
total_size
+
=
1UL
*
this
-
>
_internal_values_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
values_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
KeyValueList
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
KeyValueList
*
>
(
&
from
)
)
;
}
void
KeyValueList
:
:
MergeFrom
(
const
KeyValueList
&
from
)
{
KeyValueList
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
values_
.
MergeFrom
(
from
.
_impl_
.
values_
)
;
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
KeyValueList
:
:
CopyFrom
(
const
KeyValueList
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
KeyValueList
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
KeyValueList
:
:
InternalSwap
(
KeyValueList
*
other
)
{
using
std
:
:
swap
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
values_
.
InternalSwap
(
&
other
-
>
_impl_
.
values_
)
;
}
std
:
:
string
KeyValueList
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
KeyValueList
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
KeyValue
:
:
_Internal
{
public
:
static
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
&
value
(
const
KeyValue
*
msg
)
;
}
;
const
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
&
KeyValue
:
:
_Internal
:
:
value
(
const
KeyValue
*
msg
)
{
return
*
msg
-
>
_impl_
.
value_
;
}
KeyValue
:
:
KeyValue
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
}
KeyValue
:
:
KeyValue
(
const
KeyValue
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
KeyValue
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
key_
)
{
}
decltype
(
_impl_
.
value_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
key_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
key_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_key
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
key_
.
Set
(
from
.
_internal_key
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
if
(
from
.
_internal_has_value
(
)
)
{
_this
-
>
_impl_
.
value_
=
new
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
(
*
from
.
_impl_
.
value_
)
;
}
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
}
inline
void
KeyValue
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
key_
)
{
}
decltype
(
_impl_
.
value_
)
{
nullptr
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
key_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
key_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
KeyValue
:
:
~
KeyValue
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
KeyValue
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
key_
.
Destroy
(
)
;
if
(
this
!
=
internal_default_instance
(
)
)
delete
_impl_
.
value_
;
}
void
KeyValue
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
KeyValue
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
key_
.
ClearToEmpty
(
)
;
if
(
GetArenaForAllocation
(
)
=
=
nullptr
&
&
_impl_
.
value_
!
=
nullptr
)
{
delete
_impl_
.
value_
;
}
_impl_
.
value_
=
nullptr
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
KeyValue
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
string
key
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_key
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
value
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
ptr
=
ctx
-
>
ParseMessage
(
_internal_mutable_value
(
)
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
KeyValue
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
string
key
=
1
;
if
(
!
this
-
>
_internal_key
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_key
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_key
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
.
key
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
1
this
-
>
_internal_key
(
)
target
)
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
value
=
2
;
if
(
this
-
>
_internal_has_value
(
)
)
{
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
2
_Internal
:
:
value
(
this
)
_Internal
:
:
value
(
this
)
.
GetCachedSize
(
)
target
stream
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
return
target
;
}
size_t
KeyValue
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
string
key
=
1
;
if
(
!
this
-
>
_internal_key
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_key
(
)
)
;
}
/
/
.
opentelemetry
.
proto
.
common
.
v1
.
AnyValue
value
=
2
;
if
(
this
-
>
_internal_has_value
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
*
_impl_
.
value_
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
KeyValue
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
KeyValue
*
>
(
&
from
)
)
;
}
void
KeyValue
:
:
MergeFrom
(
const
KeyValue
&
from
)
{
KeyValue
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
if
(
!
from
.
_internal_key
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_key
(
from
.
_internal_key
(
)
)
;
}
if
(
from
.
_internal_has_value
(
)
)
{
_this
-
>
_internal_mutable_value
(
)
-
>
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
:
:
MergeFrom
(
from
.
_internal_value
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
KeyValue
:
:
CopyFrom
(
const
KeyValue
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
KeyValue
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
KeyValue
:
:
InternalSwap
(
KeyValue
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
key_
lhs_arena
&
other
-
>
_impl_
.
key_
rhs_arena
)
;
swap
(
_impl_
.
value_
other
-
>
_impl_
.
value_
)
;
}
std
:
:
string
KeyValue
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
InstrumentationScope
:
:
_Internal
{
public
:
}
;
InstrumentationScope
:
:
InstrumentationScope
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
}
InstrumentationScope
:
:
InstrumentationScope
(
const
InstrumentationScope
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
InstrumentationScope
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
from
.
_impl_
.
attributes_
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
version_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
name_
.
Set
(
from
.
_internal_name
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
version_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
version_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_version
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
version_
.
Set
(
from
.
_internal_version
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_this
-
>
_impl_
.
dropped_attributes_count_
=
from
.
_impl_
.
dropped_attributes_count_
;
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
}
inline
void
InstrumentationScope
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
attributes_
)
{
arena
}
decltype
(
_impl_
.
name_
)
{
}
decltype
(
_impl_
.
version_
)
{
}
decltype
(
_impl_
.
dropped_attributes_count_
)
{
0u
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
name_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
name_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
version_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
version_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
InstrumentationScope
:
:
~
InstrumentationScope
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
InstrumentationScope
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
attributes_
.
~
RepeatedPtrField
(
)
;
_impl_
.
name_
.
Destroy
(
)
;
_impl_
.
version_
.
Destroy
(
)
;
}
void
InstrumentationScope
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
InstrumentationScope
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
attributes_
.
Clear
(
)
;
_impl_
.
name_
.
ClearToEmpty
(
)
;
_impl_
.
version_
.
ClearToEmpty
(
)
;
_impl_
.
dropped_attributes_count_
=
0u
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
InstrumentationScope
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
string
name
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_name
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
version
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_version
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
ptr
=
ctx
-
>
ParseMessage
(
_internal_add_attributes
(
)
ptr
)
;
CHK_
(
ptr
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
26
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
uint32
dropped_attributes_count
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
32
)
)
{
_impl_
.
dropped_attributes_count_
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ReadVarint32
(
&
ptr
)
;
CHK_
(
ptr
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
InstrumentationScope
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
string
name
=
1
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_name
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_name
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
.
name
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
1
this
-
>
_internal_name
(
)
target
)
;
}
/
/
string
version
=
2
;
if
(
!
this
-
>
_internal_version
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_version
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_version
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
.
version
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
2
this
-
>
_internal_version
(
)
target
)
;
}
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
for
(
unsigned
i
=
0
n
=
static_cast
<
unsigned
>
(
this
-
>
_internal_attributes_size
(
)
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
repfield
=
this
-
>
_internal_attributes
(
i
)
;
target
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
InternalWriteMessage
(
3
repfield
repfield
.
GetCachedSize
(
)
target
stream
)
;
}
/
/
uint32
dropped_attributes_count
=
4
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
target
=
stream
-
>
EnsureSpace
(
target
)
;
target
=
:
:
_pbi
:
:
WireFormatLite
:
:
WriteUInt32ToArray
(
4
this
-
>
_internal_dropped_attributes_count
(
)
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
return
target
;
}
size_t
InstrumentationScope
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
.
opentelemetry
.
proto
.
common
.
v1
.
KeyValue
attributes
=
3
;
total_size
+
=
1UL
*
this
-
>
_internal_attributes_size
(
)
;
for
(
const
auto
&
msg
:
this
-
>
_impl_
.
attributes_
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
MessageSize
(
msg
)
;
}
/
/
string
name
=
1
;
if
(
!
this
-
>
_internal_name
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_name
(
)
)
;
}
/
/
string
version
=
2
;
if
(
!
this
-
>
_internal_version
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_version
(
)
)
;
}
/
/
uint32
dropped_attributes_count
=
4
;
if
(
this
-
>
_internal_dropped_attributes_count
(
)
!
=
0
)
{
total_size
+
=
:
:
_pbi
:
:
WireFormatLite
:
:
UInt32SizePlusOne
(
this
-
>
_internal_dropped_attributes_count
(
)
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
InstrumentationScope
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
InstrumentationScope
*
>
(
&
from
)
)
;
}
void
InstrumentationScope
:
:
MergeFrom
(
const
InstrumentationScope
&
from
)
{
InstrumentationScope
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
attributes_
.
MergeFrom
(
from
.
_impl_
.
attributes_
)
;
if
(
!
from
.
_internal_name
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_name
(
from
.
_internal_name
(
)
)
;
}
if
(
!
from
.
_internal_version
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_version
(
from
.
_internal_version
(
)
)
;
}
if
(
from
.
_internal_dropped_attributes_count
(
)
!
=
0
)
{
_this
-
>
_internal_set_dropped_attributes_count
(
from
.
_internal_dropped_attributes_count
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
InstrumentationScope
:
:
CopyFrom
(
const
InstrumentationScope
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
InstrumentationScope
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
InstrumentationScope
:
:
InternalSwap
(
InstrumentationScope
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
attributes_
.
InternalSwap
(
&
other
-
>
_impl_
.
attributes_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
name_
lhs_arena
&
other
-
>
_impl_
.
name_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
version_
lhs_arena
&
other
-
>
_impl_
.
version_
rhs_arena
)
;
swap
(
_impl_
.
dropped_attributes_count_
other
-
>
_impl_
.
dropped_attributes_count_
)
;
}
std
:
:
string
InstrumentationScope
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
InstrumentationScope
"
;
}
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
class
EntityRef
:
:
_Internal
{
public
:
}
;
EntityRef
:
:
EntityRef
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
Arena
*
arena
bool
is_message_owned
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
arena
is_message_owned
)
{
SharedCtor
(
arena
is_message_owned
)
;
/
/
protoc_insertion_point
(
arena_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
}
EntityRef
:
:
EntityRef
(
const
EntityRef
&
from
)
:
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
(
)
{
EntityRef
*
const
_this
=
this
;
(
void
)
_this
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
id_keys_
)
{
from
.
_impl_
.
id_keys_
}
decltype
(
_impl_
.
description_keys_
)
{
from
.
_impl_
.
description_keys_
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
type_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
schema_url_
.
Set
(
from
.
_internal_schema_url
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
_impl_
.
type_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
type_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
if
(
!
from
.
_internal_type
(
)
.
empty
(
)
)
{
_this
-
>
_impl_
.
type_
.
Set
(
from
.
_internal_type
(
)
_this
-
>
GetArenaForAllocation
(
)
)
;
}
/
/
protoc_insertion_point
(
copy_constructor
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
}
inline
void
EntityRef
:
:
SharedCtor
(
:
:
_pb
:
:
Arena
*
arena
bool
is_message_owned
)
{
(
void
)
arena
;
(
void
)
is_message_owned
;
new
(
&
_impl_
)
Impl_
{
decltype
(
_impl_
.
id_keys_
)
{
arena
}
decltype
(
_impl_
.
description_keys_
)
{
arena
}
decltype
(
_impl_
.
schema_url_
)
{
}
decltype
(
_impl_
.
type_
)
{
}
/
*
decltype
(
_impl_
.
_cached_size_
)
*
/
{
}
}
;
_impl_
.
schema_url_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
schema_url_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
type_
.
InitDefault
(
)
;
#
ifdef
PROTOBUF_FORCE_COPY_DEFAULT_STRING
_impl_
.
type_
.
Set
(
"
"
GetArenaForAllocation
(
)
)
;
#
endif
/
/
PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
EntityRef
:
:
~
EntityRef
(
)
{
/
/
protoc_insertion_point
(
destructor
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
if
(
auto
*
arena
=
_internal_metadata_
.
DeleteReturnArena
<
std
:
:
string
>
(
)
)
{
(
void
)
arena
;
return
;
}
SharedDtor
(
)
;
}
inline
void
EntityRef
:
:
SharedDtor
(
)
{
GOOGLE_DCHECK
(
GetArenaForAllocation
(
)
=
=
nullptr
)
;
_impl_
.
id_keys_
.
~
RepeatedPtrField
(
)
;
_impl_
.
description_keys_
.
~
RepeatedPtrField
(
)
;
_impl_
.
schema_url_
.
Destroy
(
)
;
_impl_
.
type_
.
Destroy
(
)
;
}
void
EntityRef
:
:
SetCachedSize
(
int
size
)
const
{
_impl_
.
_cached_size_
.
Set
(
size
)
;
}
void
EntityRef
:
:
Clear
(
)
{
/
/
protoc_insertion_point
(
message_clear_start
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
_impl_
.
id_keys_
.
Clear
(
)
;
_impl_
.
description_keys_
.
Clear
(
)
;
_impl_
.
schema_url_
.
ClearToEmpty
(
)
;
_impl_
.
type_
.
ClearToEmpty
(
)
;
_internal_metadata_
.
Clear
<
std
:
:
string
>
(
)
;
}
const
char
*
EntityRef
:
:
_InternalParse
(
const
char
*
ptr
:
:
_pbi
:
:
ParseContext
*
ctx
)
{
#
define
CHK_
(
x
)
if
(
PROTOBUF_PREDICT_FALSE
(
!
(
x
)
)
)
goto
failure
while
(
!
ctx
-
>
Done
(
&
ptr
)
)
{
uint32_t
tag
;
ptr
=
:
:
_pbi
:
:
ReadTag
(
ptr
&
tag
)
;
switch
(
tag
>
>
3
)
{
/
/
string
schema_url
=
1
;
case
1
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
10
)
)
{
auto
str
=
_internal_mutable_schema_url
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
string
type
=
2
;
case
2
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
18
)
)
{
auto
str
=
_internal_mutable_type
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
string
id_keys
=
3
;
case
3
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
26
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
auto
str
=
_internal_add_id_keys
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
26
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
/
/
repeated
string
description_keys
=
4
;
case
4
:
if
(
PROTOBUF_PREDICT_TRUE
(
static_cast
<
uint8_t
>
(
tag
)
=
=
34
)
)
{
ptr
-
=
1
;
do
{
ptr
+
=
1
;
auto
str
=
_internal_add_description_keys
(
)
;
ptr
=
:
:
_pbi
:
:
InlineGreedyStringParser
(
str
ptr
ctx
)
;
CHK_
(
ptr
)
;
CHK_
(
:
:
_pbi
:
:
VerifyUTF8
(
str
nullptr
)
)
;
if
(
!
ctx
-
>
DataAvailable
(
ptr
)
)
break
;
}
while
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ExpectTag
<
34
>
(
ptr
)
)
;
}
else
goto
handle_unusual
;
continue
;
default
:
goto
handle_unusual
;
}
/
/
switch
handle_unusual
:
if
(
(
tag
=
=
0
)
|
|
(
(
tag
&
7
)
=
=
4
)
)
{
CHK_
(
ptr
)
;
ctx
-
>
SetLastTag
(
tag
)
;
goto
message_done
;
}
ptr
=
UnknownFieldParse
(
tag
_internal_metadata_
.
mutable_unknown_fields
<
std
:
:
string
>
(
)
ptr
ctx
)
;
CHK_
(
ptr
!
=
nullptr
)
;
}
/
/
while
message_done
:
return
ptr
;
failure
:
ptr
=
nullptr
;
goto
message_done
;
#
undef
CHK_
}
uint8_t
*
EntityRef
:
:
_InternalSerialize
(
uint8_t
*
target
:
:
PROTOBUF_NAMESPACE_ID
:
:
io
:
:
EpsCopyOutputStream
*
stream
)
const
{
/
/
protoc_insertion_point
(
serialize_to_array_start
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
/
/
string
schema_url
=
1
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_schema_url
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_schema_url
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
.
schema_url
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
1
this
-
>
_internal_schema_url
(
)
target
)
;
}
/
/
string
type
=
2
;
if
(
!
this
-
>
_internal_type
(
)
.
empty
(
)
)
{
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
this
-
>
_internal_type
(
)
.
data
(
)
static_cast
<
int
>
(
this
-
>
_internal_type
(
)
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
.
type
"
)
;
target
=
stream
-
>
WriteStringMaybeAliased
(
2
this
-
>
_internal_type
(
)
target
)
;
}
/
/
repeated
string
id_keys
=
3
;
for
(
int
i
=
0
n
=
this
-
>
_internal_id_keys_size
(
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
s
=
this
-
>
_internal_id_keys
(
i
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
s
.
data
(
)
static_cast
<
int
>
(
s
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
.
id_keys
"
)
;
target
=
stream
-
>
WriteString
(
3
s
target
)
;
}
/
/
repeated
string
description_keys
=
4
;
for
(
int
i
=
0
n
=
this
-
>
_internal_description_keys_size
(
)
;
i
<
n
;
i
+
+
)
{
const
auto
&
s
=
this
-
>
_internal_description_keys
(
i
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
VerifyUtf8String
(
s
.
data
(
)
static_cast
<
int
>
(
s
.
length
(
)
)
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
SERIALIZE
"
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
.
description_keys
"
)
;
target
=
stream
-
>
WriteString
(
4
s
target
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
target
=
stream
-
>
WriteRaw
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
data
(
)
static_cast
<
int
>
(
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
)
target
)
;
}
/
/
protoc_insertion_point
(
serialize_to_array_end
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
return
target
;
}
size_t
EntityRef
:
:
ByteSizeLong
(
)
const
{
/
/
protoc_insertion_point
(
message_byte_size_start
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
size_t
total_size
=
0
;
uint32_t
cached_has_bits
=
0
;
/
/
Prevent
compiler
warnings
about
cached_has_bits
being
unused
(
void
)
cached_has_bits
;
/
/
repeated
string
id_keys
=
3
;
total_size
+
=
1
*
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
FromIntSize
(
_impl_
.
id_keys_
.
size
(
)
)
;
for
(
int
i
=
0
n
=
_impl_
.
id_keys_
.
size
(
)
;
i
<
n
;
i
+
+
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
_impl_
.
id_keys_
.
Get
(
i
)
)
;
}
/
/
repeated
string
description_keys
=
4
;
total_size
+
=
1
*
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
FromIntSize
(
_impl_
.
description_keys_
.
size
(
)
)
;
for
(
int
i
=
0
n
=
_impl_
.
description_keys_
.
size
(
)
;
i
<
n
;
i
+
+
)
{
total_size
+
=
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
_impl_
.
description_keys_
.
Get
(
i
)
)
;
}
/
/
string
schema_url
=
1
;
if
(
!
this
-
>
_internal_schema_url
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_schema_url
(
)
)
;
}
/
/
string
type
=
2
;
if
(
!
this
-
>
_internal_type
(
)
.
empty
(
)
)
{
total_size
+
=
1
+
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
WireFormatLite
:
:
StringSize
(
this
-
>
_internal_type
(
)
)
;
}
if
(
PROTOBUF_PREDICT_FALSE
(
_internal_metadata_
.
have_unknown_fields
(
)
)
)
{
total_size
+
=
_internal_metadata_
.
unknown_fields
<
std
:
:
string
>
(
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
GetEmptyString
)
.
size
(
)
;
}
int
cached_size
=
:
:
_pbi
:
:
ToCachedSize
(
total_size
)
;
SetCachedSize
(
cached_size
)
;
return
total_size
;
}
void
EntityRef
:
:
CheckTypeAndMergeFrom
(
const
:
:
PROTOBUF_NAMESPACE_ID
:
:
MessageLite
&
from
)
{
MergeFrom
(
*
:
:
_pbi
:
:
DownCast
<
const
EntityRef
*
>
(
&
from
)
)
;
}
void
EntityRef
:
:
MergeFrom
(
const
EntityRef
&
from
)
{
EntityRef
*
const
_this
=
this
;
/
/
protoc_insertion_point
(
class_specific_merge_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
GOOGLE_DCHECK_NE
(
&
from
_this
)
;
uint32_t
cached_has_bits
=
0
;
(
void
)
cached_has_bits
;
_this
-
>
_impl_
.
id_keys_
.
MergeFrom
(
from
.
_impl_
.
id_keys_
)
;
_this
-
>
_impl_
.
description_keys_
.
MergeFrom
(
from
.
_impl_
.
description_keys_
)
;
if
(
!
from
.
_internal_schema_url
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_schema_url
(
from
.
_internal_schema_url
(
)
)
;
}
if
(
!
from
.
_internal_type
(
)
.
empty
(
)
)
{
_this
-
>
_internal_set_type
(
from
.
_internal_type
(
)
)
;
}
_this
-
>
_internal_metadata_
.
MergeFrom
<
std
:
:
string
>
(
from
.
_internal_metadata_
)
;
}
void
EntityRef
:
:
CopyFrom
(
const
EntityRef
&
from
)
{
/
/
protoc_insertion_point
(
class_specific_copy_from_start
:
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
)
if
(
&
from
=
=
this
)
return
;
Clear
(
)
;
MergeFrom
(
from
)
;
}
bool
EntityRef
:
:
IsInitialized
(
)
const
{
return
true
;
}
void
EntityRef
:
:
InternalSwap
(
EntityRef
*
other
)
{
using
std
:
:
swap
;
auto
*
lhs_arena
=
GetArenaForAllocation
(
)
;
auto
*
rhs_arena
=
other
-
>
GetArenaForAllocation
(
)
;
_internal_metadata_
.
InternalSwap
(
&
other
-
>
_internal_metadata_
)
;
_impl_
.
id_keys_
.
InternalSwap
(
&
other
-
>
_impl_
.
id_keys_
)
;
_impl_
.
description_keys_
.
InternalSwap
(
&
other
-
>
_impl_
.
description_keys_
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
schema_url_
lhs_arena
&
other
-
>
_impl_
.
schema_url_
rhs_arena
)
;
:
:
PROTOBUF_NAMESPACE_ID
:
:
internal
:
:
ArenaStringPtr
:
:
InternalSwap
(
&
_impl_
.
type_
lhs_arena
&
other
-
>
_impl_
.
type_
rhs_arena
)
;
}
std
:
:
string
EntityRef
:
:
GetTypeName
(
)
const
{
return
"
opentelemetry
.
proto
.
common
.
v1
.
EntityRef
"
;
}
/
/
protoc_insertion_point
(
namespace_scope
)
}
/
/
namespace
v1
}
/
/
namespace
common
}
/
/
namespace
proto
}
/
/
namespace
opentelemetry
PROTOBUF_NAMESPACE_OPEN
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
ArrayValue
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValueList
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValue
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValue
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValue
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
InstrumentationScope
>
(
arena
)
;
}
template
<
>
PROTOBUF_NOINLINE
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
EntityRef
*
Arena
:
:
CreateMaybeMessage
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
EntityRef
>
(
Arena
*
arena
)
{
return
Arena
:
:
CreateMessageInternal
<
:
:
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
EntityRef
>
(
arena
)
;
}
PROTOBUF_NAMESPACE_CLOSE
/
/
protoc_insertion_point
(
global_scope
)
#
include
<
google
/
protobuf
/
port_undef
.
inc
>
