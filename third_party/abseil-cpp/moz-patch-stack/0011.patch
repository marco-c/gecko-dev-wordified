From
:
Michael
Froman
<
mfroman
mozilla
.
com
>
Date
:
Fri
22
Dec
2023
19
:
44
:
00
+
0000
Subject
:
Bug
1871006
-
cherry
-
pick
abseil
-
cpp
#
1553
to
fix
OpenBSD
builds
.
r
=
ng
webrtc
-
reviewers
Cherry
-
picks
https
:
/
/
github
.
com
/
abseil
/
abseil
-
cpp
/
pull
/
1553
We
should
uplift
this
to
beta
and
release
.
Differential
Revision
:
https
:
/
/
phabricator
.
services
.
mozilla
.
com
/
D197102
Mercurial
Revision
:
https
:
/
/
hg
.
mozilla
.
org
/
mozilla
-
central
/
rev
/
a6f389a38c4e109c8758e6fbcdf62bdd8a869234
-
-
-
abseil
-
cpp
/
absl
/
base
/
internal
/
raw_logging
.
cc
|
15
+
+
+
+
+
+
-
-
-
-
-
-
-
-
-
1
file
changed
6
insertions
(
+
)
9
deletions
(
-
)
diff
-
-
git
a
/
abseil
-
cpp
/
absl
/
base
/
internal
/
raw_logging
.
cc
b
/
abseil
-
cpp
/
absl
/
base
/
internal
/
raw_logging
.
cc
index
4c922ccf2c1
.
.
69b942658ee
100644
-
-
-
a
/
abseil
-
cpp
/
absl
/
base
/
internal
/
raw_logging
.
cc
+
+
+
b
/
abseil
-
cpp
/
absl
/
base
/
internal
/
raw_logging
.
cc
-
56
8
+
56
7
/
/
ABSL_HAVE_SYSCALL_WRITE
is
defined
when
the
platform
provides
the
syscall
/
/
syscall
(
SYS_write
/
*
int
*
/
fd
/
*
char
*
*
/
buf
/
*
size_t
*
/
len
)
;
/
/
for
low
level
operations
that
want
to
avoid
libc
.
-
#
if
(
defined
(
__linux__
)
|
|
defined
(
__FreeBSD__
)
|
|
defined
(
__OpenBSD__
)
)
&
&
\
-
!
defined
(
__ANDROID__
)
+
#
if
(
defined
(
__linux__
)
|
|
defined
(
__FreeBSD__
)
)
&
&
!
defined
(
__ANDROID__
)
#
include
<
sys
/
syscall
.
h
>
#
define
ABSL_HAVE_SYSCALL_WRITE
1
#
define
ABSL_LOW_LEVEL_WRITE_SUPPORTED
1
-
93
8
+
92
7
constexpr
char
kTruncated
[
]
=
"
.
.
.
(
message
truncated
)
\
n
"
;
bool
VADoRawLog
(
char
*
*
buf
int
*
size
const
char
*
format
va_list
ap
)
ABSL_PRINTF_ATTRIBUTE
(
3
0
)
;
bool
VADoRawLog
(
char
*
*
buf
int
*
size
const
char
*
format
va_list
ap
)
{
-
if
(
*
size
<
0
)
-
return
false
;
+
if
(
*
size
<
0
)
return
false
;
int
n
=
vsnprintf
(
*
buf
static_cast
<
size_t
>
(
*
size
)
format
ap
)
;
bool
result
=
true
;
if
(
n
<
0
|
|
n
>
*
size
)
{
-
122
8
+
120
7
constexpr
int
kLogBufSize
=
3000
;
bool
DoRawLog
(
char
*
*
buf
int
*
size
const
char
*
format
.
.
.
)
ABSL_PRINTF_ATTRIBUTE
(
3
4
)
;
bool
DoRawLog
(
char
*
*
buf
int
*
size
const
char
*
format
.
.
.
)
{
-
if
(
*
size
<
0
)
-
return
false
;
+
if
(
*
size
<
0
)
return
false
;
va_list
ap
;
va_start
(
ap
format
)
;
int
n
=
vsnprintf
(
*
buf
static_cast
<
size_t
>
(
*
size
)
format
ap
)
;
-
242
8
+
239
8
void
AsyncSignalSafeWriteError
(
const
char
*
s
size_t
len
)
{
_write
(
/
*
stderr
*
/
2
s
static_cast
<
unsigned
>
(
len
)
)
;
#
else
/
/
stderr
logging
unsupported
on
this
platform
-
(
void
)
s
;
-
(
void
)
len
;
+
(
void
)
s
;
+
(
void
)
len
;
#
endif
}
-
258
7
+
255
7
void
RawLog
(
absl
:
:
LogSeverity
severity
const
char
*
file
int
line
bool
RawLoggingFullySupported
(
)
{
#
ifdef
ABSL_LOW_LEVEL_WRITE_SUPPORTED
return
true
;
-
#
else
/
/
!
ABSL_LOW_LEVEL_WRITE_SUPPORTED
+
#
else
/
/
!
ABSL_LOW_LEVEL_WRITE_SUPPORTED
return
false
;
#
endif
/
/
!
ABSL_LOW_LEVEL_WRITE_SUPPORTED
}
