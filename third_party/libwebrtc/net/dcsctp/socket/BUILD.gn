#
Copyright
(
c
)
2021
The
WebRTC
project
authors
.
All
Rights
Reserved
.
#
#
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
#
that
can
be
found
in
the
LICENSE
file
in
the
root
of
the
source
#
tree
.
An
additional
intellectual
property
rights
grant
can
be
found
#
in
the
file
PATENTS
.
All
contributing
project
authors
may
#
be
found
in
the
AUTHORS
file
in
the
root
of
the
source
tree
.
import
(
"
.
.
/
.
.
/
.
.
/
webrtc
.
gni
"
)
rtc_source_set
(
"
context
"
)
{
sources
=
[
"
context
.
h
"
]
deps
=
[
"
.
.
/
common
:
internal_types
"
"
.
.
/
packet
:
sctp_packet
"
"
.
.
/
public
:
socket
"
"
.
.
/
public
:
types
"
]
}
rtc_library
(
"
heartbeat_handler
"
)
{
deps
=
[
"
:
context
"
"
.
.
/
.
.
/
.
.
/
api
:
array_view
"
"
.
.
/
.
.
/
.
.
/
rtc_base
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
checks
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
rtc_base_approved
"
"
.
.
/
public
:
types
"
]
sources
=
[
"
heartbeat_handler
.
cc
"
"
heartbeat_handler
.
h
"
]
}
rtc_library
(
"
stream_reset_handler
"
)
{
deps
=
[
"
:
context
"
"
.
.
/
.
.
/
.
.
/
api
:
array_view
"
"
.
.
/
.
.
/
.
.
/
rtc_base
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
checks
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
rtc_base_approved
"
"
.
.
/
public
:
types
"
]
sources
=
[
"
stream_reset_handler
.
cc
"
"
stream_reset_handler
.
h
"
]
}
rtc_library
(
"
transmission_control_block
"
)
{
deps
=
[
"
:
context
"
"
:
heartbeat_handler
"
"
:
stream_reset_handler
"
"
.
.
/
.
.
/
.
.
/
api
:
array_view
"
"
.
.
/
.
.
/
.
.
/
rtc_base
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
checks
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
rtc_base_approved
"
"
.
.
/
common
:
sequence_numbers
"
"
.
.
/
packet
:
sctp_packet
"
"
.
.
/
public
:
socket
"
"
.
.
/
public
:
types
"
"
.
.
/
rx
:
data_tracker
"
"
.
.
/
rx
:
reassembly_queue
"
"
.
.
/
timer
:
timer
"
"
.
.
/
tx
:
retransmission_error_counter
"
"
.
.
/
tx
:
retransmission_queue
"
"
.
.
/
tx
:
retransmission_timeout
"
"
.
.
/
tx
:
send_queue
"
]
sources
=
[
"
capabilities
.
h
"
"
transmission_control_block
.
cc
"
"
transmission_control_block
.
h
"
]
}
rtc_library
(
"
dcsctp_socket
"
)
{
deps
=
[
"
:
context
"
"
:
transmission_control_block
"
"
.
.
/
.
.
/
.
.
/
api
:
array_view
"
"
.
.
/
.
.
/
.
.
/
rtc_base
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
checks
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
rtc_base_approved
"
"
.
.
/
packet
:
chunk_validators
"
"
.
.
/
public
:
types
"
"
.
.
/
tx
:
fcfs_send_queue
"
]
sources
=
[
"
callback_deferrer
.
h
"
"
dcsctp_socket
.
cc
"
"
dcsctp_socket
.
h
"
"
state_cookie
.
cc
"
"
state_cookie
.
h
"
]
}
if
(
rtc_include_tests
)
{
rtc_source_set
(
"
mock_callbacks
"
)
{
testonly
=
true
sources
=
[
"
mock_dcsctp_socket_callbacks
.
h
"
]
deps
=
[
"
.
.
/
public
:
socket
"
]
}
rtc_source_set
(
"
mock_context
"
)
{
testonly
=
true
sources
=
[
"
mock_context
.
h
"
]
deps
=
[
"
:
context
"
"
:
mock_callbacks
"
"
.
.
/
common
:
internal_types
"
"
.
.
/
packet
:
sctp_packet
"
"
.
.
/
public
:
socket
"
"
.
.
/
public
:
types
"
]
}
rtc_library
(
"
dcsctp_socket_unittests
"
)
{
testonly
=
true
deps
=
[
"
:
dcsctp_socket
"
"
:
heartbeat_handler
"
"
:
stream_reset_handler
"
"
.
.
/
.
.
/
.
.
/
api
:
array_view
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
checks
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
gunit_helpers
"
"
.
.
/
.
.
/
.
.
/
rtc_base
:
rtc_base_approved
"
"
.
.
/
.
.
/
.
.
/
test
:
test_support
"
]
sources
=
[
"
dcsctp_socket_test
.
cc
"
"
heartbeat_handler_test
.
cc
"
"
state_cookie_test
.
cc
"
"
stream_reset_handler_test
.
cc
"
]
}
}
