From
:
Daniel
Baker
<
dbaker
mozilla
.
com
>
Date
:
Fri
15
Mar
2024
20
:
16
:
27
-
0600
Subject
:
(
tmp
-
cherry
-
pick
)
Revert
"
Remove
FLOW
trace
events
as
these
are
unused
and
don
'
t
work
"
(
192c0628cb
)
MIME
-
Version
:
1
.
0
Content
-
Type
:
text
/
plain
;
charset
=
UTF
-
8
Content
-
Transfer
-
Encoding
:
8bit
This
reverts
commit
680025a612b93d91a5a16bb2580352a5ac1d4a9b
.
Reason
for
revert
:
Breaks
downstream
project
Original
change
'
s
description
:
>
Remove
FLOW
trace
events
as
these
are
unused
and
don
'
t
work
>
>
Fixing
this
would
require
a
new
bridge
function
to
the
legacy
Chrome
>
event
system
or
preferably
migrating
to
the
typed
Perfetto
SDK
.
>
>
Bug
:
webrtc
:
14822
>
Change
-
Id
:
I7a39ed177d436429321de2daee569c496604aae3
>
Reviewed
-
on
:
https
:
/
/
webrtc
-
review
.
googlesource
.
com
/
c
/
src
/
+
/
335043
>
Reviewed
-
by
:
Mirko
Bonadei
<
mbonadei
webrtc
.
org
>
>
Commit
-
Queue
:
Evan
Shrubsole
<
eshr
google
.
com
>
>
Cr
-
Commit
-
Position
:
refs
/
heads
/
main
{
#
41557
}
Bug
:
webrtc
:
14822
Change
-
Id
:
I1c374e8c22740fda376893613a55e5c018553761
No
-
Presubmit
:
true
No
-
Tree
-
Checks
:
true
No
-
Try
:
true
Reviewed
-
on
:
https
:
/
/
webrtc
-
review
.
googlesource
.
com
/
c
/
src
/
+
/
335100
Reviewed
-
by
:
Mirko
Bonadei
<
mbonadei
webrtc
.
org
>
Bot
-
Commit
:
rubber
-
stamper
appspot
.
gserviceaccount
.
com
<
rubber
-
stamper
appspot
.
gserviceaccount
.
com
>
Commit
-
Queue
:
Mirko
Bonadei
<
mbonadei
webrtc
.
org
>
Auto
-
Submit
:
Henrik
Bostr
m
<
hbos
webrtc
.
org
>
Cr
-
Commit
-
Position
:
refs
/
heads
/
main
{
#
41558
}
-
-
-
rtc_base
/
trace_event
.
h
|
131
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
1
file
changed
131
insertions
(
+
)
diff
-
-
git
a
/
rtc_base
/
trace_event
.
h
b
/
rtc_base
/
trace_event
.
h
index
32ad031385
.
.
6689bc0c37
100644
-
-
-
a
/
rtc_base
/
trace_event
.
h
+
+
+
b
/
rtc_base
/
trace_event
.
h
-
430
6
+
430
100
name
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
arg1_val
arg2_name
arg2_val
)
+
/
/
Records
a
single
FLOW_BEGIN
event
called
"
name
"
immediately
with
0
1
or
2
+
/
/
associated
arguments
.
If
the
category
is
not
enabled
then
this
+
/
/
does
nothing
.
+
/
/
-
category
and
name
strings
must
have
application
lifetime
(
statics
or
+
/
/
literals
)
.
They
may
not
include
"
chars
.
+
/
/
-
id
is
used
to
match
the
FLOW_BEGIN
event
with
the
FLOW_END
event
.
FLOW
+
/
/
events
are
considered
to
match
if
their
category
name
and
id
values
all
+
/
/
match
.
id
must
either
be
a
pointer
or
an
integer
value
up
to
64
bits
.
If
+
/
/
it
'
s
a
pointer
the
bits
will
be
xored
with
a
hash
of
the
process
ID
so
+
/
/
that
the
same
pointer
on
two
different
processes
will
not
collide
.
+
/
/
FLOW
events
are
different
from
ASYNC
events
in
how
they
are
drawn
by
the
+
/
/
tracing
UI
.
A
FLOW
defines
asynchronous
data
flow
such
as
posting
a
task
+
/
/
(
FLOW_BEGIN
)
and
later
executing
that
task
(
FLOW_END
)
.
Expect
FLOWs
to
be
+
/
/
drawn
as
lines
or
arrows
from
FLOW_BEGIN
scopes
to
FLOW_END
scopes
.
Similar
+
/
/
to
ASYNC
a
FLOW
can
consist
of
multiple
phases
.
The
first
phase
is
defined
+
/
/
by
the
FLOW_BEGIN
calls
.
Additional
phases
can
be
defined
using
the
FLOW_STEP
+
/
/
macros
.
When
the
operation
completes
call
FLOW_END
.
An
async
operation
can
+
/
/
span
threads
and
processes
but
all
events
in
that
operation
must
use
the
+
/
/
same
name
and
id
.
Each
event
can
have
its
own
args
.
+
#
define
TRACE_EVENT_FLOW_BEGIN0
(
category
name
id
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_NONE
)
+
#
define
TRACE_EVENT_FLOW_BEGIN1
(
category
name
id
arg1_name
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
+
arg1_val
)
+
#
define
TRACE_EVENT_FLOW_BEGIN2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
+
arg1_val
arg2_name
arg2_val
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN0
(
category
name
id
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_COPY
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN1
(
category
name
id
arg1_name
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
+
arg1_val
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_BEGIN
category
\
+
name
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
+
arg1_val
arg2_name
arg2_val
)
+
+
/
/
Records
a
single
FLOW_STEP
event
for
step
immediately
.
If
the
category
+
/
/
is
not
enabled
then
this
does
nothing
.
The
name
and
id
must
match
the
+
/
/
FLOW_BEGIN
event
above
.
The
step
param
identifies
this
step
within
the
+
/
/
async
event
.
This
should
be
called
at
the
beginning
of
the
next
phase
of
an
+
/
/
asynchronous
operation
.
+
#
define
TRACE_EVENT_FLOW_STEP0
(
category
name
id
step
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
category
\
+
name
id
TRACE_EVENT_FLAG_NONE
"
step
"
\
+
step
)
+
#
define
TRACE_EVENT_FLOW_STEP1
(
category
name
id
step
arg1_name
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
category
\
+
name
id
TRACE_EVENT_FLAG_NONE
"
step
"
\
+
step
arg1_name
arg1_val
)
+
#
define
TRACE_EVENT_COPY_FLOW_STEP0
(
category
name
id
step
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
category
\
+
name
id
TRACE_EVENT_FLAG_COPY
"
step
"
\
+
step
)
+
#
define
TRACE_EVENT_COPY_FLOW_STEP1
(
category
name
id
step
arg1_name
\
+
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_STEP
category
\
+
name
id
TRACE_EVENT_FLAG_COPY
"
step
"
\
+
step
arg1_name
arg1_val
)
+
+
/
/
Records
a
single
FLOW_END
event
for
"
name
"
immediately
.
If
the
category
+
/
/
is
not
enabled
then
this
does
nothing
.
+
#
define
TRACE_EVENT_FLOW_END0
(
category
name
id
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_NONE
)
+
#
define
TRACE_EVENT_FLOW_END1
(
category
name
id
arg1_name
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
+
arg1_val
)
+
#
define
TRACE_EVENT_FLOW_END2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_NONE
arg1_name
\
+
arg1_val
arg2_name
arg2_val
)
+
#
define
TRACE_EVENT_COPY_FLOW_END0
(
category
name
id
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_COPY
)
+
#
define
TRACE_EVENT_COPY_FLOW_END1
(
category
name
id
arg1_name
arg1_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
+
arg1_val
)
+
#
define
TRACE_EVENT_COPY_FLOW_END2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
INTERNAL_TRACE_EVENT_ADD_WITH_ID
(
TRACE_EVENT_PHASE_FLOW_END
category
name
\
+
id
TRACE_EVENT_FLAG_COPY
arg1_name
\
+
arg1_val
arg2_name
arg2_val
)
+
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
Implementation
specific
tracing
API
definitions
.
-
536
6
+
630
9
#
define
TRACE_EVENT_PHASE_ASYNC_BEGIN
(
'
S
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_STEP
(
'
T
'
)
#
define
TRACE_EVENT_PHASE_ASYNC_END
(
'
F
'
)
+
#
define
TRACE_EVENT_PHASE_FLOW_BEGIN
(
'
s
'
)
+
#
define
TRACE_EVENT_PHASE_FLOW_STEP
(
'
t
'
)
+
#
define
TRACE_EVENT_PHASE_FLOW_END
(
'
f
'
)
#
define
TRACE_EVENT_PHASE_METADATA
(
'
M
'
)
#
define
TRACE_EVENT_PHASE_COUNTER
(
'
C
'
)
-
912
6
+
1009
40
class
TraceEndOnScopeClose
{
arg2_name
arg2_val
)
\
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_BEGIN0
(
category
name
id
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_BEGIN1
(
category
name
id
arg1_name
arg1_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_BEGIN2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN0
(
category
name
id
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN1
(
category
name
id
arg1_name
arg1_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_BEGIN2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
RTC_NOOP
(
)
+
+
#
define
TRACE_EVENT_FLOW_STEP0
(
category
name
id
step
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_STEP1
(
category
name
id
step
arg1_name
arg1_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_STEP0
(
category
name
id
step
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_STEP1
(
category
name
id
step
arg1_name
\
+
arg1_val
)
\
+
RTC_NOOP
(
)
+
+
#
define
TRACE_EVENT_FLOW_END0
(
category
name
id
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_END1
(
category
name
id
arg1_name
arg1_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_FLOW_END2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_END0
(
category
name
id
)
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_END1
(
category
name
id
arg1_name
arg1_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_COPY_FLOW_END2
(
category
name
id
arg1_name
arg1_val
\
+
arg2_name
arg2_val
)
\
+
RTC_NOOP
(
)
+
#
define
TRACE_EVENT_API_GET_CATEGORY_ENABLED
"
"
#
define
TRACE_EVENT_API_ADD_TRACE_EVENT
RTC_NOOP
(
)
