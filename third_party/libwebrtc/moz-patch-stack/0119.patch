From
:
Natalia
Csoregi
<
ncsoregi
mozilla
.
com
>
Date
:
Thu
15
Jun
2023
13
:
19
:
00
+
0300
Subject
:
Backed
out
4
changesets
(
bug
1724900
)
for
causing
crashes
on
getUserMedia
-
audio
.
CLOSED
TREE
Backed
out
changeset
b94558d76bd2
(
bug
1724900
)
Backed
out
changeset
8ac9e05de573
(
bug
1724900
)
Backed
out
changeset
8ebb0f9ec0ae
(
bug
1724900
)
Backed
out
changeset
241d7632685a
(
bug
1724900
)
Mercurial
Revision
:
https
:
/
/
hg
.
mozilla
.
org
/
mozilla
-
central
/
rev
/
08cb4ca984b3aabd7881a042a28bdae29c0a5095
-
-
-
modules
/
video_capture
/
BUILD
.
gn
|
2
-
modules
/
video_capture
/
linux
/
camera_portal
.
cc
|
242
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
modules
/
video_capture
/
linux
/
camera_portal
.
h
|
47
-
-
-
-
.
.
.
/
video_capture
/
linux
/
pipewire_session
.
cc
|
200
+
+
+
+
+
+
+
+
+
+
+
+
-
-
-
.
.
.
/
video_capture
/
linux
/
pipewire_session
.
h
|
48
+
+
-
-
.
.
.
/
linux
/
video_capture_pipewire
.
cc
|
4
-
.
.
.
/
video_capture
/
video_capture_options
.
cc
|
2
+
-
modules
/
video_capture
/
video_capture_options
.
h
|
5
+
-
8
files
changed
204
insertions
(
+
)
346
deletions
(
-
)
delete
mode
100644
modules
/
video_capture
/
linux
/
camera_portal
.
cc
delete
mode
100644
modules
/
video_capture
/
linux
/
camera_portal
.
h
diff
-
-
git
a
/
modules
/
video_capture
/
BUILD
.
gn
b
/
modules
/
video_capture
/
BUILD
.
gn
index
1e32e87fa8
.
.
65468cecd7
100644
-
-
-
a
/
modules
/
video_capture
/
BUILD
.
gn
+
+
+
b
/
modules
/
video_capture
/
BUILD
.
gn
-
82
8
+
82
6
if
(
!
build_with_chromium
|
|
is_linux
|
|
is_chromeos
)
{
if
(
rtc_use_pipewire
)
{
sources
+
=
[
-
"
linux
/
camera_portal
.
cc
"
-
"
linux
/
camera_portal
.
h
"
"
linux
/
device_info_pipewire
.
cc
"
"
linux
/
device_info_pipewire
.
h
"
"
linux
/
pipewire_session
.
cc
"
diff
-
-
git
a
/
modules
/
video_capture
/
linux
/
camera_portal
.
cc
b
/
modules
/
video_capture
/
linux
/
camera_portal
.
cc
deleted
file
mode
100644
index
d217dc7251
.
.
0000000000
-
-
-
a
/
modules
/
video_capture
/
linux
/
camera_portal
.
cc
+
+
+
/
dev
/
null
-
1
242
+
0
0
-
/
*
-
*
Copyright
(
c
)
2023
The
WebRTC
project
authors
.
All
Rights
Reserved
.
-
*
-
*
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
-
*
that
can
be
found
in
the
LICENSE
file
in
the
root
of
the
source
-
*
tree
.
An
additional
intellectual
property
rights
grant
can
be
found
-
*
in
the
file
PATENTS
.
All
contributing
project
authors
may
-
*
be
found
in
the
AUTHORS
file
in
the
root
of
the
source
tree
.
-
*
/
-
-
#
include
"
modules
/
video_capture
/
linux
/
camera_portal
.
h
"
-
-
#
include
<
gio
/
gio
.
h
>
-
#
include
<
gio
/
gunixfdlist
.
h
>
-
-
#
include
"
modules
/
portal
/
xdg_desktop_portal_utils
.
h
"
-
-
namespace
webrtc
{
-
-
using
xdg_portal
:
:
RequestResponse
;
-
using
xdg_portal
:
:
RequestResponseFromPortalResponse
;
-
using
xdg_portal
:
:
RequestSessionProxy
;
-
-
constexpr
char
kCameraInterfaceName
[
]
=
"
org
.
freedesktop
.
portal
.
Camera
"
;
-
-
class
CameraPortalPrivate
{
-
public
:
-
explicit
CameraPortalPrivate
(
CameraPortal
:
:
PortalNotifier
*
notifier
)
;
-
~
CameraPortalPrivate
(
)
;
-
-
void
Start
(
)
;
-
-
private
:
-
void
OnPortalDone
(
xdg_portal
:
:
RequestResponse
result
int
fd
=
-
1
)
;
-
-
static
void
OnProxyRequested
(
GObject
*
object
-
GAsyncResult
*
result
-
gpointer
user_data
)
;
-
void
ProxyRequested
(
GDBusProxy
*
proxy
)
;
-
-
static
void
OnAccessResponse
(
GDBusProxy
*
proxy
-
GAsyncResult
*
result
-
gpointer
user_data
)
;
-
static
void
OnResponseSignalEmitted
(
GDBusConnection
*
connection
-
const
char
*
sender_name
-
const
char
*
object_path
-
const
char
*
interface_name
-
const
char
*
signal_name
-
GVariant
*
parameters
-
gpointer
user_data
)
;
-
static
void
OnOpenResponse
(
GDBusProxy
*
proxy
-
GAsyncResult
*
result
-
gpointer
user_data
)
;
-
-
CameraPortal
:
:
PortalNotifier
*
notifier_
=
nullptr
;
-
-
GDBusConnection
*
connection_
=
nullptr
;
-
GDBusProxy
*
proxy_
=
nullptr
;
-
GCancellable
*
cancellable_
=
nullptr
;
-
guint
access_request_signal_id_
=
0
;
-
}
;
-
-
CameraPortalPrivate
:
:
CameraPortalPrivate
(
CameraPortal
:
:
PortalNotifier
*
notifier
)
-
:
notifier_
(
notifier
)
{
}
-
-
CameraPortalPrivate
:
:
~
CameraPortalPrivate
(
)
{
-
if
(
access_request_signal_id_
)
{
-
g_dbus_connection_signal_unsubscribe
(
connection_
-
access_request_signal_id_
)
;
-
access_request_signal_id_
=
0
;
-
}
-
if
(
cancellable_
)
{
-
g_cancellable_cancel
(
cancellable_
)
;
-
g_object_unref
(
cancellable_
)
;
-
cancellable_
=
nullptr
;
-
}
-
if
(
proxy_
)
{
-
g_object_unref
(
proxy_
)
;
-
proxy_
=
nullptr
;
-
connection_
=
nullptr
;
-
}
-
}
-
-
void
CameraPortalPrivate
:
:
Start
(
)
{
-
cancellable_
=
g_cancellable_new
(
)
;
-
Scoped
<
GError
>
error
;
-
RequestSessionProxy
(
kCameraInterfaceName
OnProxyRequested
cancellable_
-
this
)
;
-
}
-
-
/
/
static
-
void
CameraPortalPrivate
:
:
OnProxyRequested
(
GObject
*
gobject
-
GAsyncResult
*
result
-
gpointer
user_data
)
{
-
CameraPortalPrivate
*
that
=
static_cast
<
CameraPortalPrivate
*
>
(
user_data
)
;
-
Scoped
<
GError
>
error
;
-
GDBusProxy
*
proxy
=
g_dbus_proxy_new_finish
(
result
error
.
receive
(
)
)
;
-
if
(
!
proxy
)
{
-
/
/
Ignore
the
error
caused
by
user
cancelling
the
request
via
cancellable_
-
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
-
return
;
-
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
get
a
proxy
for
the
portal
:
"
-
<
<
error
-
>
message
;
-
that
-
>
OnPortalDone
(
RequestResponse
:
:
kError
)
;
-
return
;
-
}
-
-
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Successfully
created
proxy
for
the
portal
.
"
;
-
that
-
>
ProxyRequested
(
proxy
)
;
-
}
-
-
void
CameraPortalPrivate
:
:
ProxyRequested
(
GDBusProxy
*
proxy
)
{
-
GVariantBuilder
builder
;
-
Scoped
<
char
>
variant_string
;
-
std
:
:
string
access_handle
;
-
-
proxy_
=
proxy
;
-
connection_
=
g_dbus_proxy_get_connection
(
proxy
)
;
-
-
g_variant_builder_init
(
&
builder
G_VARIANT_TYPE_VARDICT
)
;
-
variant_string
=
-
g_strdup_printf
(
"
capture
%
d
"
g_random_int_range
(
0
G_MAXINT
)
)
;
-
g_variant_builder_add
(
&
builder
"
{
sv
}
"
"
handle_token
"
-
g_variant_new_string
(
variant_string
.
get
(
)
)
)
;
-
-
access_handle
=
-
xdg_portal
:
:
PrepareSignalHandle
(
variant_string
.
get
(
)
connection_
)
;
-
access_request_signal_id_
=
xdg_portal
:
:
SetupRequestResponseSignal
(
-
access_handle
.
c_str
(
)
OnResponseSignalEmitted
this
connection_
)
;
-
-
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Requesting
camera
access
from
the
portal
.
"
;
-
g_dbus_proxy_call
(
proxy_
"
AccessCamera
"
g_variant_new
(
"
(
a
{
sv
}
)
"
&
builder
)
-
G_DBUS_CALL_FLAGS_NONE
/
*
timeout_msec
=
*
/
-
1
cancellable_
-
reinterpret_cast
<
GAsyncReadyCallback
>
(
OnAccessResponse
)
-
this
)
;
-
}
-
-
/
/
static
-
void
CameraPortalPrivate
:
:
OnAccessResponse
(
GDBusProxy
*
proxy
-
GAsyncResult
*
result
-
gpointer
user_data
)
{
-
CameraPortalPrivate
*
that
=
static_cast
<
CameraPortalPrivate
*
>
(
user_data
)
;
-
RTC_DCHECK
(
that
)
;
-
-
Scoped
<
GError
>
error
;
-
Scoped
<
GVariant
>
variant
(
-
g_dbus_proxy_call_finish
(
proxy
result
error
.
receive
(
)
)
)
;
-
if
(
!
variant
)
{
-
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
-
return
;
-
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
access
portal
:
"
<
<
error
-
>
message
;
-
if
(
that
-
>
access_request_signal_id_
)
{
-
g_dbus_connection_signal_unsubscribe
(
that
-
>
connection_
-
that
-
>
access_request_signal_id_
)
;
-
that
-
>
access_request_signal_id_
=
0
;
-
}
-
that
-
>
OnPortalDone
(
RequestResponse
:
:
kError
)
;
-
}
-
}
-
-
/
/
static
-
void
CameraPortalPrivate
:
:
OnResponseSignalEmitted
(
GDBusConnection
*
connection
-
const
char
*
sender_name
-
const
char
*
object_path
-
const
char
*
interface_name
-
const
char
*
signal_name
-
GVariant
*
parameters
-
gpointer
user_data
)
{
-
CameraPortalPrivate
*
that
=
static_cast
<
CameraPortalPrivate
*
>
(
user_data
)
;
-
RTC_DCHECK
(
that
)
;
-
-
uint32_t
portal_response
;
-
g_variant_get
(
parameters
"
(
u
a
{
sv
}
)
"
&
portal_response
nullptr
)
;
-
if
(
portal_response
)
{
-
RTC_LOG
(
LS_INFO
)
<
<
"
Camera
access
denied
by
the
XDG
portal
.
"
;
-
that
-
>
OnPortalDone
(
RequestResponseFromPortalResponse
(
portal_response
)
)
;
-
return
;
-
}
-
-
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Camera
access
granted
by
the
XDG
portal
.
"
;
-
-
GVariantBuilder
builder
;
-
g_variant_builder_init
(
&
builder
G_VARIANT_TYPE_VARDICT
)
;
-
-
g_dbus_proxy_call
(
-
that
-
>
proxy_
"
OpenPipeWireRemote
"
g_variant_new
(
"
(
a
{
sv
}
)
"
&
builder
)
-
G_DBUS_CALL_FLAGS_NONE
/
*
timeout_msec
=
*
/
-
1
that
-
>
cancellable_
-
reinterpret_cast
<
GAsyncReadyCallback
>
(
OnOpenResponse
)
that
)
;
-
}
-
-
void
CameraPortalPrivate
:
:
OnOpenResponse
(
GDBusProxy
*
proxy
-
GAsyncResult
*
result
-
gpointer
user_data
)
{
-
CameraPortalPrivate
*
that
=
static_cast
<
CameraPortalPrivate
*
>
(
user_data
)
;
-
RTC_DCHECK
(
that
)
;
-
-
Scoped
<
GError
>
error
;
-
Scoped
<
GUnixFDList
>
outlist
;
-
Scoped
<
GVariant
>
variant
(
g_dbus_proxy_call_with_unix_fd_list_finish
(
-
proxy
outlist
.
receive
(
)
result
error
.
receive
(
)
)
)
;
-
if
(
!
variant
)
{
-
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
-
return
;
-
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
open
PipeWire
remote
:
"
<
<
error
-
>
message
;
-
if
(
that
-
>
access_request_signal_id_
)
{
-
g_dbus_connection_signal_unsubscribe
(
that
-
>
connection_
-
that
-
>
access_request_signal_id_
)
;
-
that
-
>
access_request_signal_id_
=
0
;
-
}
-
that
-
>
OnPortalDone
(
RequestResponse
:
:
kError
)
;
-
return
;
-
}
-
-
int32_t
index
;
-
g_variant_get
(
variant
.
get
(
)
"
(
h
)
"
&
index
)
;
-
-
int
fd
=
g_unix_fd_list_get
(
outlist
.
get
(
)
index
error
.
receive
(
)
)
;
-
-
if
(
fd
=
=
-
1
)
{
-
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
get
file
descriptor
from
the
list
:
"
-
<
<
error
-
>
message
;
-
that
-
>
OnPortalDone
(
RequestResponse
:
:
kError
)
;
-
return
;
-
}
-
-
that
-
>
OnPortalDone
(
RequestResponse
:
:
kSuccess
fd
)
;
-
}
-
-
void
CameraPortalPrivate
:
:
OnPortalDone
(
RequestResponse
result
int
fd
)
{
-
notifier_
-
>
OnCameraRequestResult
(
result
fd
)
;
-
}
-
-
CameraPortal
:
:
CameraPortal
(
PortalNotifier
*
notifier
)
-
:
private_
(
std
:
:
make_unique
<
CameraPortalPrivate
>
(
notifier
)
)
{
}
-
-
CameraPortal
:
:
~
CameraPortal
(
)
{
}
-
-
void
CameraPortal
:
:
Start
(
)
{
-
private_
-
>
Start
(
)
;
-
}
-
-
}
/
/
namespace
webrtc
diff
-
-
git
a
/
modules
/
video_capture
/
linux
/
camera_portal
.
h
b
/
modules
/
video_capture
/
linux
/
camera_portal
.
h
deleted
file
mode
100644
index
36f2ec8b8a
.
.
0000000000
-
-
-
a
/
modules
/
video_capture
/
linux
/
camera_portal
.
h
+
+
+
/
dev
/
null
-
1
47
+
0
0
-
/
*
-
*
Copyright
(
c
)
2023
The
WebRTC
project
authors
.
All
Rights
Reserved
.
-
*
-
*
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
-
*
that
can
be
found
in
the
LICENSE
file
in
the
root
of
the
source
-
*
tree
.
An
additional
intellectual
property
rights
grant
can
be
found
-
*
in
the
file
PATENTS
.
All
contributing
project
authors
may
-
*
be
found
in
the
AUTHORS
file
in
the
root
of
the
source
tree
.
-
*
/
-
-
#
ifndef
MODULES_VIDEO_CAPTURE_LINUX_CAMERA_PORTAL_H_
-
#
define
MODULES_VIDEO_CAPTURE_LINUX_CAMERA_PORTAL_H_
-
-
#
include
<
memory
>
-
#
include
<
string
>
-
-
#
include
"
modules
/
portal
/
portal_request_response
.
h
"
-
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
-
-
namespace
webrtc
{
-
-
class
CameraPortalPrivate
;
-
-
class
RTC_EXPORT
CameraPortal
{
-
public
:
-
class
PortalNotifier
{
-
public
:
-
virtual
void
OnCameraRequestResult
(
xdg_portal
:
:
RequestResponse
result
-
int
fd
)
=
0
;
-
-
protected
:
-
PortalNotifier
(
)
=
default
;
-
virtual
~
PortalNotifier
(
)
=
default
;
-
}
;
-
-
explicit
CameraPortal
(
PortalNotifier
*
notifier
)
;
-
~
CameraPortal
(
)
;
-
-
void
Start
(
)
;
-
-
private
:
-
std
:
:
unique_ptr
<
CameraPortalPrivate
>
private_
;
-
}
;
-
-
}
/
/
namespace
webrtc
-
-
#
endif
/
/
MODULES_VIDEO_CAPTURE_LINUX_CAMERA_PORTAL_H_
diff
-
-
git
a
/
modules
/
video_capture
/
linux
/
pipewire_session
.
cc
b
/
modules
/
video_capture
/
linux
/
pipewire_session
.
cc
index
f2680b2816
.
.
14d557d6c1
100644
-
-
-
a
/
modules
/
video_capture
/
linux
/
pipewire_session
.
cc
+
+
+
b
/
modules
/
video_capture
/
linux
/
pipewire_session
.
cc
-
10
6
+
10
7
#
include
"
modules
/
video_capture
/
linux
/
pipewire_session
.
h
"
+
#
include
<
gio
/
gunixfdlist
.
h
>
#
include
<
spa
/
monitor
/
device
.
h
>
#
include
<
spa
/
param
/
format
-
utils
.
h
>
#
include
<
spa
/
param
/
format
.
h
>
-
18
14
+
19
18
#
include
"
common_video
/
libyuv
/
include
/
webrtc_libyuv
.
h
"
#
include
"
modules
/
portal
/
pipewire_utils
.
h
"
+
#
include
"
modules
/
portal
/
xdg_desktop_portal_utils
.
h
"
#
include
"
modules
/
video_capture
/
device_info_impl
.
h
"
-
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
string_encode
.
h
"
#
include
"
rtc_base
/
string_to_number
.
h
"
namespace
webrtc
{
namespace
videocapturemodule
{
+
using
xdg_portal
:
:
RequestSessionProxy
;
+
+
constexpr
char
kCameraInterfaceName
[
]
=
"
org
.
freedesktop
.
portal
.
Camera
"
;
+
VideoType
PipeWireRawFormatToVideoType
(
uint32_t
id
)
{
switch
(
id
)
{
case
SPA_VIDEO_FORMAT_I420
:
-
210
45
+
215
181
bool
PipeWireNode
:
:
ParseFormat
(
const
spa_pod
*
param
return
cap
-
>
videoType
!
=
VideoType
:
:
kUnknown
;
}
-
CameraPortalNotifier
:
:
CameraPortalNotifier
(
PipeWireSession
*
session
)
-
:
session_
(
session
)
{
}
-
-
void
CameraPortalNotifier
:
:
OnCameraRequestResult
(
-
xdg_portal
:
:
RequestResponse
result
-
int
fd
)
{
-
if
(
result
=
=
xdg_portal
:
:
RequestResponse
:
:
kSuccess
)
{
-
session_
-
>
InitPipeWire
(
fd
)
;
-
}
else
if
(
result
=
=
xdg_portal
:
:
RequestResponse
:
:
kUserCancelled
)
{
-
session_
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
DENIED
)
;
-
}
else
{
-
session_
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
-
}
-
}
-
-
PipeWireSession
:
:
PipeWireSession
(
)
{
}
+
PipeWireSession
:
:
PipeWireSession
(
)
+
:
status_
(
VideoCaptureOptions
:
:
Status
:
:
UNINITIALIZED
)
{
}
PipeWireSession
:
:
~
PipeWireSession
(
)
{
Cleanup
(
)
;
}
-
void
PipeWireSession
:
:
Init
(
VideoCaptureOptions
:
:
Callback
*
callback
int
fd
)
{
+
void
PipeWireSession
:
:
Init
(
VideoCaptureOptions
:
:
Callback
*
callback
)
{
callback_
=
callback
;
+
cancellable_
=
g_cancellable_new
(
)
;
+
Scoped
<
GError
>
error
;
+
RequestSessionProxy
(
kCameraInterfaceName
OnProxyRequested
cancellable_
+
this
)
;
+
}
-
if
(
fd
!
=
-
1
)
{
-
InitPipeWire
(
fd
)
;
-
}
else
{
-
portal_notifier_
=
std
:
:
make_unique
<
CameraPortalNotifier
>
(
this
)
;
-
portal_
=
std
:
:
make_unique
<
CameraPortal
>
(
portal_notifier_
.
get
(
)
)
;
-
portal_
-
>
Start
(
)
;
+
/
/
static
+
void
PipeWireSession
:
:
OnProxyRequested
(
GObject
*
gobject
+
GAsyncResult
*
result
+
gpointer
user_data
)
{
+
PipeWireSession
*
that
=
static_cast
<
PipeWireSession
*
>
(
user_data
)
;
+
Scoped
<
GError
>
error
;
+
GDBusProxy
*
proxy
=
g_dbus_proxy_new_finish
(
result
error
.
receive
(
)
)
;
+
if
(
!
proxy
)
{
+
/
/
Ignore
the
error
caused
by
user
cancelling
the
request
via
cancellable_
+
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
+
return
;
+
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
get
a
proxy
for
the
portal
:
"
+
<
<
error
-
>
message
;
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
DENIED
)
;
+
return
;
}
+
+
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Successfully
created
proxy
for
the
portal
.
"
;
+
that
-
>
ProxyRequested
(
proxy
)
;
+
}
+
+
void
PipeWireSession
:
:
ProxyRequested
(
GDBusProxy
*
proxy
)
{
+
GVariantBuilder
builder
;
+
Scoped
<
char
>
variant_string
;
+
std
:
:
string
access_handle
;
+
+
proxy_
=
proxy
;
+
connection_
=
g_dbus_proxy_get_connection
(
proxy
)
;
+
+
g_variant_builder_init
(
&
builder
G_VARIANT_TYPE_VARDICT
)
;
+
variant_string
=
+
g_strdup_printf
(
"
capture
%
d
"
g_random_int_range
(
0
G_MAXINT
)
)
;
+
g_variant_builder_add
(
&
builder
"
{
sv
}
"
"
handle_token
"
+
g_variant_new_string
(
variant_string
.
get
(
)
)
)
;
+
+
access_handle
=
+
xdg_portal
:
:
PrepareSignalHandle
(
variant_string
.
get
(
)
connection_
)
;
+
access_request_signal_id_
=
xdg_portal
:
:
SetupRequestResponseSignal
(
+
access_handle
.
c_str
(
)
OnResponseSignalEmitted
this
connection_
)
;
+
+
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Requesting
camera
access
from
the
portal
.
"
;
+
g_dbus_proxy_call
(
proxy_
"
AccessCamera
"
g_variant_new
(
"
(
a
{
sv
}
)
"
&
builder
)
+
G_DBUS_CALL_FLAGS_NONE
/
*
timeout_msec
=
*
/
-
1
cancellable_
+
reinterpret_cast
<
GAsyncReadyCallback
>
(
OnAccessResponse
)
+
this
)
;
}
-
void
PipeWireSession
:
:
InitPipeWire
(
int
fd
)
{
-
if
(
!
InitializePipeWire
(
)
)
-
Finish
(
VideoCaptureOptions
:
:
Status
:
:
UNAVAILABLE
)
;
+
/
/
static
+
void
PipeWireSession
:
:
OnAccessResponse
(
GDBusProxy
*
proxy
+
GAsyncResult
*
result
+
gpointer
user_data
)
{
+
PipeWireSession
*
that
=
static_cast
<
PipeWireSession
*
>
(
user_data
)
;
+
RTC_DCHECK
(
that
)
;
+
+
Scoped
<
GError
>
error
;
+
Scoped
<
GVariant
>
variant
(
+
g_dbus_proxy_call_finish
(
proxy
result
error
.
receive
(
)
)
)
;
+
if
(
!
variant
)
{
+
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
+
return
;
+
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
access
portal
:
"
<
<
error
-
>
message
;
+
if
(
that
-
>
access_request_signal_id_
)
{
+
g_dbus_connection_signal_unsubscribe
(
that
-
>
connection_
+
that
-
>
access_request_signal_id_
)
;
+
that
-
>
access_request_signal_id_
=
0
;
+
}
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
+
}
+
}
+
+
/
/
static
+
void
PipeWireSession
:
:
OnResponseSignalEmitted
(
GDBusConnection
*
connection
+
const
char
*
sender_name
+
const
char
*
object_path
+
const
char
*
interface_name
+
const
char
*
signal_name
+
GVariant
*
parameters
+
gpointer
user_data
)
{
+
PipeWireSession
*
that
=
static_cast
<
PipeWireSession
*
>
(
user_data
)
;
+
RTC_DCHECK
(
that
)
;
+
+
uint32_t
portal_response
;
+
g_variant_get
(
parameters
"
(
u
a
{
sv
}
)
"
&
portal_response
nullptr
)
;
+
if
(
portal_response
)
{
+
RTC_LOG
(
LS_INFO
)
<
<
"
Camera
access
denied
by
the
XDG
portal
.
"
;
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
DENIED
)
;
+
return
;
+
}
-
if
(
!
StartPipeWire
(
fd
)
)
-
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
+
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Camera
access
granted
by
the
XDG
portal
.
"
;
+
+
GVariantBuilder
builder
;
+
g_variant_builder_init
(
&
builder
G_VARIANT_TYPE_VARDICT
)
;
+
+
g_dbus_proxy_call
(
+
that
-
>
proxy_
"
OpenPipeWireRemote
"
g_variant_new
(
"
(
a
{
sv
}
)
"
&
builder
)
+
G_DBUS_CALL_FLAGS_NONE
/
*
timeout_msec
=
*
/
-
1
that
-
>
cancellable_
+
reinterpret_cast
<
GAsyncReadyCallback
>
(
OnOpenResponse
)
that
)
;
+
}
+
+
void
PipeWireSession
:
:
OnOpenResponse
(
GDBusProxy
*
proxy
+
GAsyncResult
*
result
+
gpointer
user_data
)
{
+
PipeWireSession
*
that
=
static_cast
<
PipeWireSession
*
>
(
user_data
)
;
+
RTC_DCHECK
(
that
)
;
+
+
Scoped
<
GError
>
error
;
+
Scoped
<
GUnixFDList
>
outlist
;
+
Scoped
<
GVariant
>
variant
(
g_dbus_proxy_call_with_unix_fd_list_finish
(
+
proxy
outlist
.
receive
(
)
result
error
.
receive
(
)
)
)
;
+
if
(
!
variant
)
{
+
if
(
g_error_matches
(
error
.
get
(
)
G_IO_ERROR
G_IO_ERROR_CANCELLED
)
)
+
return
;
+
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
open
PipeWire
remote
:
"
<
<
error
-
>
message
;
+
if
(
that
-
>
access_request_signal_id_
)
{
+
g_dbus_connection_signal_unsubscribe
(
that
-
>
connection_
+
that
-
>
access_request_signal_id_
)
;
+
that
-
>
access_request_signal_id_
=
0
;
+
}
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
+
return
;
+
}
+
+
int32_t
index
;
+
g_variant_get
(
variant
.
get
(
)
"
(
h
)
"
&
index
)
;
+
+
int
fd
=
g_unix_fd_list_get
(
outlist
.
get
(
)
index
error
.
receive
(
)
)
;
+
+
if
(
fd
=
=
-
1
)
{
+
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
get
file
descriptor
from
the
list
:
"
+
<
<
error
-
>
message
;
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
+
return
;
+
}
+
+
if
(
!
InitializePipeWire
(
)
)
{
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
UNAVAILABLE
)
;
+
return
;
+
}
+
+
if
(
!
that
-
>
StartPipeWire
(
fd
)
)
+
that
-
>
Finish
(
VideoCaptureOptions
:
:
Status
:
:
ERROR
)
;
+
}
+
+
void
PipeWireSession
:
:
StopDBus
(
)
{
+
if
(
access_request_signal_id_
)
{
+
g_dbus_connection_signal_unsubscribe
(
connection_
+
access_request_signal_id_
)
;
+
access_request_signal_id_
=
0
;
+
}
+
if
(
cancellable_
)
{
+
g_cancellable_cancel
(
cancellable_
)
;
+
g_object_unref
(
cancellable_
)
;
+
cancellable_
=
nullptr
;
+
}
+
if
(
proxy_
)
{
+
g_object_unref
(
proxy_
)
;
+
proxy_
=
nullptr
;
+
connection_
=
nullptr
;
+
}
}
bool
PipeWireSession
:
:
StartPipeWire
(
int
fd
)
{
-
382
6
+
523
7
void
PipeWireSession
:
:
Finish
(
VideoCaptureOptions
:
:
Status
status
)
{
void
PipeWireSession
:
:
Cleanup
(
)
{
StopPipeWire
(
)
;
+
StopDBus
(
)
;
}
}
/
/
namespace
videocapturemodule
diff
-
-
git
a
/
modules
/
video_capture
/
linux
/
pipewire_session
.
h
b
/
modules
/
video_capture
/
linux
/
pipewire_session
.
h
index
7055e50fae
.
.
71cd1fed8b
100644
-
-
-
a
/
modules
/
video_capture
/
linux
/
pipewire_session
.
h
+
+
+
b
/
modules
/
video_capture
/
linux
/
pipewire_session
.
h
-
11
6
+
11
7
#
ifndef
MODULES_VIDEO_CAPTURE_LINUX_PIPEWIRE_SESSION_H_
#
define
MODULES_VIDEO_CAPTURE_LINUX_PIPEWIRE_SESSION_H_
+
#
include
<
gio
/
gio
.
h
>
#
include
<
pipewire
/
core
.
h
>
#
include
<
pipewire
/
pipewire
.
h
>
-
20
7
+
21
6
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
-
#
include
"
modules
/
video_capture
/
linux
/
camera_portal
.
h
"
#
include
"
modules
/
video_capture
/
video_capture
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_options
.
h
"
-
66
33
+
66
40
class
PipeWireNode
{
std
:
:
vector
<
VideoCaptureCapability
>
capabilities_
;
}
;
-
class
CameraPortalNotifier
:
public
CameraPortal
:
:
PortalNotifier
{
-
public
:
-
CameraPortalNotifier
(
PipeWireSession
*
session
)
;
-
~
CameraPortalNotifier
(
)
=
default
;
-
-
void
OnCameraRequestResult
(
xdg_portal
:
:
RequestResponse
result
-
int
fd
)
override
;
-
-
private
:
-
PipeWireSession
*
session_
;
-
}
;
-
class
PipeWireSession
:
public
rtc
:
:
RefCountedNonVirtual
<
PipeWireSession
>
{
public
:
PipeWireSession
(
)
;
~
PipeWireSession
(
)
;
-
void
Init
(
VideoCaptureOptions
:
:
Callback
*
callback
int
fd
=
-
1
)
;
+
void
Init
(
VideoCaptureOptions
:
:
Callback
*
callback
)
;
+
void
CancelInit
(
)
;
const
std
:
:
deque
<
PipeWireNode
>
&
nodes
(
)
const
{
return
nodes_
;
}
-
friend
class
CameraPortalNotifier
;
friend
class
PipeWireNode
;
friend
class
VideoCaptureModulePipeWire
;
private
:
-
void
InitPipeWire
(
int
fd
)
;
+
static
void
OnProxyRequested
(
GObject
*
object
+
GAsyncResult
*
result
+
gpointer
user_data
)
;
+
void
ProxyRequested
(
GDBusProxy
*
proxy
)
;
+
+
static
void
OnAccessResponse
(
GDBusProxy
*
proxy
+
GAsyncResult
*
result
+
gpointer
user_data
)
;
+
static
void
OnResponseSignalEmitted
(
GDBusConnection
*
connection
+
const
char
*
sender_name
+
const
char
*
object_path
+
const
char
*
interface_name
+
const
char
*
signal_name
+
GVariant
*
parameters
+
gpointer
user_data
)
;
+
static
void
OnOpenResponse
(
GDBusProxy
*
proxy
+
GAsyncResult
*
result
+
gpointer
user_data
)
;
+
void
StopDBus
(
)
;
+
bool
StartPipeWire
(
int
fd
)
;
void
StopPipeWire
(
)
;
void
PipeWireSync
(
)
;
-
117
6
+
124
13
class
PipeWireSession
:
public
rtc
:
:
RefCountedNonVirtual
<
PipeWireSession
>
{
VideoCaptureOptions
:
:
Callback
*
callback_
=
nullptr
;
+
GDBusConnection
*
connection_
=
nullptr
;
+
GDBusProxy
*
proxy_
=
nullptr
;
+
GCancellable
*
cancellable_
=
nullptr
;
+
guint
access_request_signal_id_
=
0
;
+
+
VideoCaptureOptions
:
:
Status
status_
;
+
struct
pw_thread_loop
*
pw_main_loop_
=
nullptr
;
struct
pw_context
*
pw_context_
=
nullptr
;
struct
pw_core
*
pw_core_
=
nullptr
;
-
128
8
+
142
6
class
PipeWireSession
:
public
rtc
:
:
RefCountedNonVirtual
<
PipeWireSession
>
{
int
sync_seq_
=
0
;
std
:
:
deque
<
PipeWireNode
>
nodes_
;
-
std
:
:
unique_ptr
<
CameraPortal
>
portal_
;
-
std
:
:
unique_ptr
<
CameraPortalNotifier
>
portal_notifier_
;
}
;
}
/
/
namespace
videocapturemodule
diff
-
-
git
a
/
modules
/
video_capture
/
linux
/
video_capture_pipewire
.
cc
b
/
modules
/
video_capture
/
linux
/
video_capture_pipewire
.
cc
index
99109e00e6
.
.
c1e6aae5ea
100644
-
-
-
a
/
modules
/
video_capture
/
linux
/
video_capture_pipewire
.
cc
+
+
+
b
/
modules
/
video_capture
/
linux
/
video_capture_pipewire
.
cc
-
62
10
+
62
6
int32_t
VideoCaptureModulePipeWire
:
:
Init
(
const
char
*
deviceUniqueId
)
{
node_id_
=
id
.
value
(
)
;
-
const
int
len
=
strlen
(
deviceUniqueId
)
;
-
_deviceUniqueId
=
new
(
std
:
:
nothrow
)
char
[
len
+
1
]
;
-
memcpy
(
_deviceUniqueId
deviceUniqueId
len
+
1
)
;
-
return
0
;
}
diff
-
-
git
a
/
modules
/
video_capture
/
video_capture_options
.
cc
b
/
modules
/
video_capture
/
video_capture_options
.
cc
index
203d0a604b
.
.
444c23fcbc
100644
-
-
-
a
/
modules
/
video_capture
/
video_capture_options
.
cc
+
+
+
b
/
modules
/
video_capture
/
video_capture_options
.
cc
-
33
7
+
33
7
void
VideoCaptureOptions
:
:
Init
(
Callback
*
callback
)
{
if
(
allow_pipewire_
)
{
pipewire_session_
=
rtc
:
:
make_ref_counted
<
videocapturemodule
:
:
PipeWireSession
>
(
)
;
-
pipewire_session_
-
>
Init
(
callback
pipewire_fd_
)
;
+
pipewire_session_
-
>
Init
(
callback
)
;
return
;
}
#
endif
diff
-
-
git
a
/
modules
/
video_capture
/
video_capture_options
.
h
b
/
modules
/
video_capture
/
video_capture_options
.
h
index
c90e035f37
.
.
f35c6142b6
100644
-
-
-
a
/
modules
/
video_capture
/
video_capture_options
.
h
+
+
+
b
/
modules
/
video_capture
/
video_capture_options
.
h
-
21
7
+
21
8
class
PipeWireSession
;
}
#
endif
-
/
/
An
object
that
stores
initialization
parameters
for
video
capturers
+
/
/
An
object
that
stores
initialization
parameters
for
screen
and
window
+
/
/
capturers
.
class
RTC_EXPORT
VideoCaptureOptions
{
public
:
VideoCaptureOptions
(
)
;
-
59
7
+
60
6
class
RTC_EXPORT
VideoCaptureOptions
{
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
bool
allow_pipewire
(
)
const
{
return
allow_pipewire_
;
}
void
set_allow_pipewire
(
bool
allow
)
{
allow_pipewire_
=
allow
;
}
-
void
set_pipewire_fd
(
int
fd
)
{
pipewire_fd_
=
fd
;
}
rtc
:
:
scoped_refptr
<
videocapturemodule
:
:
PipeWireSession
>
pipewire_session
(
)
;
#
endif
-
69
7
+
69
6
class
RTC_EXPORT
VideoCaptureOptions
{
#
endif
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
bool
allow_pipewire_
=
false
;
-
int
pipewire_fd_
=
-
1
;
rtc
:
:
scoped_refptr
<
videocapturemodule
:
:
PipeWireSession
>
pipewire_session_
;
#
endif
}
;
-
-
2
.
37
.
1
(
Apple
Git
-
137
.
1
)
