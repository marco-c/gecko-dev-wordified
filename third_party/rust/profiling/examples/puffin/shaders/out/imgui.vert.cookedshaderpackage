z
Q
#
include
<
metal_stdlib
>
#
include
<
simd
/
simd
.
h
>
using
namespace
metal
;
struct
Args
{
float4x4
mvp
;
}
;
struct
spvDescriptorSetBuffer0
{
constant
Args
*
uniform_buffer
[
[
id
(
2
)
]
]
;
}
;
struct
main0_out
{
float2
uv
[
[
user
(
locn0
)
]
]
;
float4
color
[
[
user
(
locn1
)
]
]
;
float4
gl_Position
[
[
position
]
]
;
}
;
struct
main0_in
{
float2
pos
[
[
attribute
(
0
)
]
]
;
float2
in_uv
[
[
attribute
(
1
)
]
]
;
float4
in_color
[
[
attribute
(
2
)
]
]
;
}
;
vertex
main0_out
main0
(
main0_in
in
[
[
stage_in
]
]
constant
spvDescriptorSetBuffer0
&
spvDescriptorSet0
[
[
buffer
(
0
)
]
]
)
{
main0_out
out
=
{
}
;
out
.
uv
=
in
.
in_uv
;
out
.
color
=
in
.
in_color
;
out
.
gl_Position
=
(
*
spvDescriptorSet0
.
uniform_buffer
)
.
mvp
*
float4
(
in
.
pos
.
x
in
.
pos
.
y
0
.
0
1
.
0
)
;
return
out
;
}
#
4
GLSL
.
std
.
450
main
"
GL_ARB_separate_shader_objects
GL_GOOGLE_cpp_style_line_directive
GL_GOOGLE_include_directive
main
uv
in_uv
color
in_color
gl_PerVertex
gl_Position
gl_PointSize
gl_ClipDistance
gl_CullDistance
Args
mvp
uniform_buffer
"
pos
0
smp
3
tex
G
G
G
G
H
H
H
H
G
H
H
#
H
G
G
"
G
!
G
"
G
0
"
G
0
!
G
3
"
G
3
!
!
;
;
;
;
+
;
+
;
;
"
+
#
+
)
+
*
?
.
/
.
;
/
0
1
2
1
;
2
3
6
=
>
=
>
A
=
!
A
%
"
#
=
&
%
A
'
"
=
(
'
P
+
&
(
)
*
!
+
A
-
>
-
8
Args
tex
smp
main
in_uv
TEXCOORD
in_color
COLOR
pos
POSITION
