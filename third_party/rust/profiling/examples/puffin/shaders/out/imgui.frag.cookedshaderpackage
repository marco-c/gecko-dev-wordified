A
:
Q
#
include
<
metal_stdlib
>
#
include
<
simd
/
simd
.
h
>
using
namespace
metal
;
struct
Args
{
float4x4
mvp
;
}
;
struct
spvDescriptorSetBuffer0
{
texture2d
<
float
>
tex
[
[
id
(
1
)
]
]
;
}
;
struct
main0_out
{
float4
out_color
[
[
color
(
0
)
]
]
;
}
;
struct
main0_in
{
float2
uv
[
[
user
(
locn0
)
]
]
;
float4
color
[
[
user
(
locn1
)
]
]
;
}
;
fragment
main0_out
main0
(
main0_in
in
[
[
stage_in
]
]
constant
spvDescriptorSetBuffer0
&
spvDescriptorSet0
[
[
buffer
(
0
)
]
]
)
{
constexpr
sampler
smp
(
filter
:
:
linear
mip_filter
:
:
linear
address
:
:
repeat
compare_func
:
:
never
max_anisotropy
(
1
)
)
;
main0_out
out
=
{
}
;
out
.
out_color
=
spvDescriptorSet0
.
tex
.
sample
(
smp
in
.
uv
)
*
in
.
color
;
return
out
;
}
H
#
!
GLSL
.
std
.
450
main
GL_ARB_separate_shader_objects
GL_GOOGLE_cpp_style_line_directive
GL_GOOGLE_include_directive
main
out_color
tex
smp
uv
color
Args
mvp
uniform_buffer
G
G
"
G
!
G
"
G
!
G
G
H
H
#
H
G
G
"
G
!
!
;
;
;
;
;
;
6
=
=
V
=
W
=
>
8
Args
tex
smp
main
