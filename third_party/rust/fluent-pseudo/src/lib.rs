use
regex
:
:
Captures
;
use
regex
:
:
Regex
;
use
std
:
:
borrow
:
:
Cow
;
static
TRANSFORM_SMALL_MAP
:
&
[
char
]
=
&
[
'
a
'
'
'
'
'
'
'
'
e
'
'
'
'
'
'
'
'
i
'
'
'
'
'
'
'
'
'
'
'
'
o
'
'
'
'
'
'
'
'
'
'
'
'
u
'
'
'
'
'
'
'
'
'
'
'
]
;
static
TRANSFORM_CAPS_MAP
:
&
[
char
]
=
&
[
'
A
'
'
'
'
'
'
'
'
E
'
'
'
'
'
'
'
'
I
'
'
'
'
'
'
'
'
'
'
'
'
O
'
'
'
'
'
'
'
'
'
'
'
'
U
'
'
'
'
'
'
'
'
'
'
'
]
;
static
FLIPPED_SMALL_MAP
:
&
[
char
]
=
&
[
'
'
'
q
'
'
'
'
p
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
u
'
'
o
'
'
d
'
'
b
'
'
'
'
s
'
'
'
'
n
'
'
'
'
'
'
x
'
'
'
'
z
'
]
;
static
FLIPPED_CAPS_MAP
:
&
[
char
]
=
&
[
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
H
'
'
I
'
'
'
'
'
'
'
'
W
'
'
N
'
'
O
'
'
'
'
'
'
'
'
S
'
'
'
'
'
'
'
'
M
'
'
X
'
'
'
'
Z
'
]
;
static
mut
RE_EXCLUDED
:
Option
<
Regex
>
=
None
;
static
mut
RE_AZ
:
Option
<
Regex
>
=
None
;
pub
fn
transform_dom
(
s
:
&
str
flipped
:
bool
elongate
:
bool
)
-
>
Cow
<
str
>
{
/
/
Exclude
access
-
keys
and
other
single
-
char
messages
if
s
.
len
(
)
=
=
1
{
return
s
.
into
(
)
;
}
/
/
XML
entities
(
&
#
x202a
;
)
and
XML
tags
.
let
re_excluded
=
unsafe
{
RE_EXCLUDED
.
get_or_insert_with
(
|
|
Regex
:
:
new
(
r
"
&
[
#
\
w
]
+
;
|
<
\
s
*
.
+
?
\
s
*
>
"
)
.
unwrap
(
)
)
}
;
let
mut
result
=
Cow
:
:
from
(
s
)
;
let
mut
pos
=
0
;
let
mut
diff
=
0
;
for
cap
in
re_excluded
.
captures_iter
(
s
)
{
let
capture
=
cap
.
get
(
0
)
.
unwrap
(
)
;
let
sub_len
=
capture
.
start
(
)
-
pos
;
let
range
=
pos
.
.
capture
.
start
(
)
;
let
result_range
=
pos
+
diff
.
.
capture
.
start
(
)
+
diff
;
let
sub
=
&
s
[
range
.
clone
(
)
]
;
let
transform_sub
=
transform
(
&
sub
false
true
)
;
diff
+
=
transform_sub
.
len
(
)
-
sub_len
;
result
.
to_mut
(
)
.
replace_range
(
result_range
.
clone
(
)
&
transform_sub
)
;
pos
=
capture
.
end
(
)
;
}
let
range
=
pos
.
.
s
.
len
(
)
;
let
result_range
=
pos
+
diff
.
.
result
.
len
(
)
;
let
transform_sub
=
transform
(
&
s
[
range
]
flipped
elongate
)
;
result
.
to_mut
(
)
.
replace_range
(
result_range
&
transform_sub
)
;
result
}
pub
fn
transform
(
s
:
&
str
flipped
:
bool
elongate
:
bool
)
-
>
Cow
<
str
>
{
let
re_az
=
unsafe
{
RE_AZ
.
get_or_insert_with
(
|
|
Regex
:
:
new
(
r
"
[
a
-
zA
-
Z
]
"
)
.
unwrap
(
)
)
}
;
let
(
small_map
caps_map
)
=
if
flipped
{
(
FLIPPED_SMALL_MAP
FLIPPED_CAPS_MAP
)
}
else
{
(
TRANSFORM_SMALL_MAP
TRANSFORM_CAPS_MAP
)
}
;
re_az
.
replace_all
(
s
|
caps
:
&
Captures
|
{
let
ch
=
caps
[
0
]
.
chars
(
)
.
next
(
)
.
unwrap
(
)
;
let
cc
=
ch
as
u8
;
if
cc
>
=
97
&
&
cc
<
=
122
{
let
pos
=
cc
-
97
;
let
new_char
=
small_map
[
pos
as
usize
]
;
/
/
duplicate
"
a
"
"
e
"
"
o
"
and
"
u
"
to
emulate
~
30
%
longer
text
if
elongate
&
&
(
cc
=
=
97
|
|
cc
=
=
101
|
|
cc
=
=
111
|
|
cc
=
=
117
)
{
let
mut
s
=
new_char
.
to_string
(
)
;
s
.
push
(
new_char
)
;
s
}
else
{
new_char
.
to_string
(
)
}
}
else
if
cc
>
=
65
&
&
cc
<
=
90
{
let
pos
=
cc
-
65
;
let
new_char
=
caps_map
[
pos
as
usize
]
;
new_char
.
to_string
(
)
}
else
{
ch
.
to_string
(
)
}
}
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
it_works
(
)
{
let
x
=
transform
(
"
Hello
World
"
false
true
)
;
assert_eq
!
(
x
"
ee
oo
oo
"
)
;
let
x
=
transform
(
"
Hello
World
"
false
false
)
;
assert_eq
!
(
x
"
e
o
o
"
)
;
let
x
=
transform
(
"
Hello
World
"
true
false
)
;
assert_eq
!
(
x
"
H
o
Mo
p
"
)
;
let
x
=
transform
(
"
f
"
false
true
)
;
assert_eq
!
(
x
"
"
)
;
}
#
[
test
]
fn
dom_test
(
)
{
let
x
=
transform_dom
(
"
Hello
<
a
>
World
<
/
a
>
"
false
true
)
;
assert_eq
!
(
x
"
ee
oo
<
a
>
oo
<
/
a
>
"
)
;
let
x
=
transform_dom
(
"
Hello
<
a
>
World
<
/
a
>
in
<
b
>
my
<
/
b
>
House
.
"
false
true
)
;
assert_eq
!
(
x
"
ee
oo
<
a
>
oo
<
/
a
>
i
<
b
>
<
/
b
>
oouu
ee
.
"
)
;
/
/
Don
'
t
touch
single
character
values
.
let
x
=
transform_dom
(
"
f
"
false
true
)
;
assert_eq
!
(
x
"
f
"
)
;
}
}
