/
/
You
might
think
topsrcdir
is
'
.
'
but
that
'
s
not
true
when
the
Gradle
build
/
/
is
launched
from
within
IntelliJ
.
def
topsrcdir
=
rootProject
.
projectDir
.
absolutePath
def
commandLine
=
[
"
{
topsrcdir
}
/
mach
"
"
environment
"
"
-
-
format
"
"
json
"
"
-
-
verbose
"
]
def
proc
=
commandLine
.
execute
(
null
new
File
(
topsrcdir
)
)
def
standardOutput
=
new
ByteArrayOutputStream
(
)
proc
.
consumeProcessOutput
(
standardOutput
standardOutput
)
proc
.
waitFor
(
)
/
/
Only
show
the
output
if
something
went
wrong
.
if
(
proc
.
exitValue
(
)
!
=
0
)
{
throw
new
GradleException
(
"
Process
'
{
commandLine
}
'
finished
with
non
-
zero
exit
value
{
proc
.
exitValue
(
)
}
:
\
n
\
n
{
standardOutput
.
toString
(
)
}
"
)
}
import
groovy
.
json
.
JsonSlurper
def
slurper
=
new
JsonSlurper
(
)
def
json
=
slurper
.
parseText
(
standardOutput
.
toString
(
)
)
if
(
json
.
substs
.
MOZ_BUILD_APP
!
=
'
mobile
/
android
'
)
{
throw
new
GradleException
(
"
Building
with
Gradle
is
only
supported
for
Fennec
i
.
e
.
MOZ_BUILD_APP
=
=
'
mobile
/
android
'
.
"
)
;
}
def
srcdir
=
{
dst
src
-
>
def
d
=
java
.
nio
.
file
.
Paths
.
get
(
"
{
json
.
topobjdir
}
/
gradle
/
{
dst
}
"
)
def
s
=
java
.
nio
.
file
.
Paths
.
get
(
"
{
json
.
topsrcdir
}
/
{
src
}
"
)
try
{
java
.
nio
.
file
.
Files
.
createDirectories
(
d
.
getParent
(
)
)
}
catch
(
java
.
nio
.
file
.
FileAlreadyExistsException
e
)
{
/
/
Do
nothing
.
}
try
{
java
.
nio
.
file
.
Files
.
createSymbolicLink
(
d
s
)
}
catch
(
java
.
nio
.
file
.
FileAlreadyExistsException
e
)
{
/
/
Do
nothing
.
}
}
/
/
Since
base
/
doesn
'
t
have
the
correct
package
prefix
directory
structure
we
/
/
still
need
to
symlink
.
srcdir
(
'
base
/
src
/
org
/
mozilla
/
gecko
'
'
mobile
/
android
/
base
'
)
include
'
:
app
'
include
'
:
base
'
include
'
:
omnijar
'
include
'
:
thirdparty
'
project
(
'
:
app
'
)
.
projectDir
=
new
File
(
"
{
json
.
topsrcdir
}
/
mobile
/
android
/
app
"
)
project
(
'
:
base
'
)
.
projectDir
=
new
File
(
"
{
json
.
topsrcdir
}
/
mobile
/
android
/
app
/
base
"
)
project
(
'
:
omnijar
'
)
.
projectDir
=
new
File
(
"
{
json
.
topsrcdir
}
/
mobile
/
android
/
app
/
omnijar
"
)
project
(
'
:
thirdparty
'
)
.
projectDir
=
new
File
(
"
{
json
.
topsrcdir
}
/
mobile
/
android
/
thirdparty
"
)
/
/
The
Gradle
instance
is
shared
between
settings
.
gradle
and
all
the
/
/
other
build
.
gradle
files
(
see
/
/
http
:
/
/
forums
.
gradle
.
org
/
gradle
/
topics
/
define_extension_properties_from_settings_xml
)
.
/
/
We
use
this
ext
property
to
pass
the
per
-
object
-
directory
mozconfig
/
/
between
scripts
.
This
lets
us
execute
set
-
up
code
before
we
gradle
/
/
tries
to
configure
the
project
even
once
and
as
a
side
benefit
/
/
saves
invoking
|
mach
environment
|
multiple
times
.
gradle
.
ext
.
mozconfig
=
json
