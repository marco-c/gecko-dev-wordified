/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
nsEventListenerManager
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
void
EventTarget
:
:
RemoveEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
ErrorResult
&
aRv
)
{
nsEventListenerManager
*
elm
=
GetListenerManager
(
false
)
;
if
(
elm
)
{
elm
-
>
RemoveEventListener
(
aType
aListener
aUseCapture
)
;
}
}
EventHandlerNonNull
*
EventTarget
:
:
GetEventHandler
(
nsIAtom
*
aType
const
nsAString
&
aTypeString
)
{
nsEventListenerManager
*
elm
=
GetListenerManager
(
false
)
;
return
elm
?
elm
-
>
GetEventHandler
(
aType
aTypeString
)
:
nullptr
;
}
void
EventTarget
:
:
SetEventHandler
(
const
nsAString
&
aType
EventHandlerNonNull
*
aHandler
ErrorResult
&
rv
)
{
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIAtom
>
type
=
do_GetAtom
(
aType
)
;
return
SetEventHandler
(
type
EmptyString
(
)
aHandler
rv
)
;
}
return
SetEventHandler
(
nullptr
Substring
(
aType
2
)
/
/
Remove
"
on
"
aHandler
rv
)
;
}
void
EventTarget
:
:
SetEventHandler
(
nsIAtom
*
aType
const
nsAString
&
aTypeString
EventHandlerNonNull
*
aHandler
ErrorResult
&
rv
)
{
rv
=
GetListenerManager
(
true
)
-
>
SetEventHandler
(
aType
aTypeString
aHandler
)
;
}
}
/
/
namespace
dom
}
/
/
namespace
mozilla
