/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
4
et
sw
=
4
tw
=
99
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jsprf
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
AccessCheck
.
h
"
#
include
"
WrapperFactory
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
XPCInlines
.
h
"
#
include
"
XPCQuickStubs
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
Exceptions
.
h
"
using
namespace
mozilla
;
using
namespace
JS
;
nsresult
xpc_qsUnwrapArgImpl
(
JSContext
*
cx
HandleObject
src
const
nsIID
&
iid
void
*
*
ppArg
)
{
nsISupports
*
iface
=
xpc
:
:
UnwrapReflectorToISupports
(
src
)
;
if
(
iface
)
{
if
(
NS_FAILED
(
iface
-
>
QueryInterface
(
iid
ppArg
)
)
)
{
return
NS_ERROR_XPC_BAD_CONVERT_JS
;
}
return
NS_OK
;
}
nsRefPtr
<
nsXPCWrappedJS
>
wrappedJS
;
nsresult
rv
=
nsXPCWrappedJS
:
:
GetNewOrUsed
(
src
iid
getter_AddRefs
(
wrappedJS
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
wrappedJS
)
{
return
rv
;
}
/
/
We
need
to
go
through
the
QueryInterface
logic
to
make
this
return
/
/
the
right
thing
for
the
various
'
special
'
interfaces
;
e
.
g
.
/
/
nsIPropertyBag
.
We
must
use
AggregatedQueryInterface
in
cases
where
/
/
there
is
an
outer
to
avoid
nasty
recursion
.
return
wrappedJS
-
>
QueryInterface
(
iid
ppArg
)
;
}
namespace
xpc
{
bool
NonVoidStringToJsval
(
JSContext
*
cx
nsAString
&
str
MutableHandleValue
rval
)
{
nsStringBuffer
*
sharedBuffer
;
if
(
!
XPCStringConvert
:
:
ReadableToJSVal
(
cx
str
&
sharedBuffer
rval
)
)
return
false
;
if
(
sharedBuffer
)
{
/
/
The
string
was
shared
but
ReadableToJSVal
didn
'
t
addref
it
.
/
/
Move
the
ownership
from
str
to
jsstr
.
str
.
ForgetSharedBuffer
(
)
;
}
return
true
;
}
}
/
/
namespace
xpc
