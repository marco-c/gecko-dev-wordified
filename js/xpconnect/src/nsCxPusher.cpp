/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
nsCxPusher
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsDOMJSUtils
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
WorkerPrivate
.
h
"
using
mozilla
:
:
DebugOnly
;
namespace
mozilla
{
AutoJSContext
:
:
AutoJSContext
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
:
mCx
(
nullptr
)
{
Init
(
false
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
;
}
AutoJSContext
:
:
AutoJSContext
(
bool
aSafe
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
:
mCx
(
nullptr
)
{
Init
(
aSafe
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
;
}
void
AutoJSContext
:
:
Init
(
bool
aSafe
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
{
JS
:
:
AutoSuppressGCAnalysis
nogc
;
MOZ_ASSERT
(
!
mCx
"
mCx
should
not
be
initialized
!
"
)
;
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
nsXPConnect
*
xpc
=
nsXPConnect
:
:
XPConnect
(
)
;
if
(
!
aSafe
)
{
mCx
=
xpc
-
>
GetCurrentJSContext
(
)
;
}
if
(
!
mCx
)
{
mCx
=
xpc
-
>
GetSafeJSContext
(
)
;
mPusher
.
emplace
(
mCx
)
;
}
}
AutoJSContext
:
:
operator
JSContext
*
(
)
const
{
return
mCx
;
}
ThreadsafeAutoJSContext
:
:
ThreadsafeAutoJSContext
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
NS_IsMainThread
(
)
)
{
mCx
=
nullptr
;
mAutoJSContext
.
emplace
(
)
;
}
else
{
mCx
=
mozilla
:
:
dom
:
:
workers
:
:
GetCurrentThreadJSContext
(
)
;
mRequest
.
emplace
(
mCx
)
;
}
}
ThreadsafeAutoJSContext
:
:
operator
JSContext
*
(
)
const
{
if
(
mCx
)
{
return
mCx
;
}
else
{
return
*
mAutoJSContext
;
}
}
AutoSafeJSContext
:
:
AutoSafeJSContext
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
:
AutoJSContext
(
true
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
mAc
(
mCx
XPCJSRuntime
:
:
Get
(
)
-
>
GetJSContextStack
(
)
-
>
GetSafeJSContextGlobal
(
)
)
{
}
ThreadsafeAutoSafeJSContext
:
:
ThreadsafeAutoSafeJSContext
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM_IN_IMPL
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
NS_IsMainThread
(
)
)
{
mCx
=
nullptr
;
mAutoSafeJSContext
.
emplace
(
)
;
}
else
{
mCx
=
mozilla
:
:
dom
:
:
workers
:
:
GetCurrentThreadJSContext
(
)
;
mRequest
.
emplace
(
mCx
)
;
}
}
ThreadsafeAutoSafeJSContext
:
:
operator
JSContext
*
(
)
const
{
if
(
mCx
)
{
return
mCx
;
}
else
{
return
*
mAutoSafeJSContext
;
}
}
}
/
/
namespace
mozilla
