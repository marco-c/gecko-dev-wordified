/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
dvander
alliedmods
.
net
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
include
"
Assembler
-
arm
.
h
"
#
include
"
jsgcmark
.
h
"
using
namespace
js
;
using
namespace
js
:
:
ion
;
void
Assembler
:
:
executableCopy
(
uint8
*
buffer
)
{
#
if
0
AssemblerARMShared
:
:
executableCopy
(
buffer
)
;
for
(
size_t
i
=
0
;
i
<
jumps_
.
length
(
)
;
i
+
+
)
{
RelativePatch
&
rp
=
jumps_
[
i
]
;
JSC
:
:
ARMAssembler
:
:
setRel32
(
buffer
+
rp
.
offset
rp
.
target
)
;
}
#
endif
}
class
RelocationIterator
{
CompactBufferReader
reader_
;
uint32
offset_
;
public
:
RelocationIterator
(
CompactBufferReader
&
reader
)
:
reader_
(
reader
)
{
}
bool
read
(
)
{
if
(
!
reader_
.
more
(
)
)
return
false
;
offset_
=
reader_
.
readUnsigned
(
)
;
return
true
;
}
uint32
offset
(
)
const
{
return
offset_
;
}
}
;
static
inline
IonCode
*
CodeFromJump
(
uint8
*
jump
)
{
#
if
0
uint8
*
target
=
(
uint8
*
)
JSC
:
:
ARMAssembler
:
:
getRel32Target
(
jump
)
;
return
IonCode
:
:
FromExecutable
(
target
)
;
#
endif
return
NULL
;
}
void
Assembler
:
:
TraceRelocations
(
JSTracer
*
trc
IonCode
*
code
CompactBufferReader
&
reader
)
{
#
if
0
RelocationIterator
iter
(
reader
)
;
while
(
iter
.
read
(
)
)
{
IonCode
*
child
=
CodeFromJump
(
code
-
>
raw
(
)
+
iter
.
offset
(
)
)
;
MarkIonCode
(
trc
child
"
rel32
"
)
;
}
;
#
endif
}
void
Assembler
:
:
copyRelocationTable
(
uint8
*
dest
)
{
#
if
0
if
(
relocations_
.
length
(
)
)
memcpy
(
dest
relocations_
.
buffer
(
)
relocations_
.
length
(
)
)
;
#
endif
}
void
Assembler
:
:
trace
(
JSTracer
*
trc
)
{
#
if
0
for
(
size_t
i
=
0
;
i
<
jumps_
.
length
(
)
;
i
+
+
)
{
RelativePatch
&
rp
=
jumps_
[
i
]
;
if
(
rp
.
kind
=
=
Relocation
:
:
CODE
)
MarkIonCode
(
trc
IonCode
:
:
FromExecutable
(
(
uint8
*
)
rp
.
target
)
"
masmrel32
"
)
;
}
#
endif
}
void
Assembler
:
:
executableCopy
(
void
*
buffer
)
{
masm
.
executableCopy
(
buffer
)
;
}
void
Assembler
:
:
processDeferredData
(
IonCode
*
code
uint8
*
data
)
{
for
(
size_t
i
=
0
;
i
<
data_
.
length
(
)
;
i
+
+
)
{
DeferredData
*
deferred
=
data_
[
i
]
;
Bind
(
code
deferred
-
>
label
(
)
data
+
deferred
-
>
offset
(
)
)
;
deferred
-
>
copy
(
code
data
+
deferred
-
>
offset
(
)
)
;
}
}
void
Assembler
:
:
processCodeLabels
(
IonCode
*
code
)
{
for
(
size_t
i
=
0
;
i
<
codeLabels_
.
length
(
)
;
i
+
+
)
{
CodeLabel
*
label
=
codeLabels_
[
i
]
;
Bind
(
code
label
-
>
dest
(
)
code
-
>
raw
(
)
+
label
-
>
src
(
)
-
>
offset
(
)
)
;
}
}
Assembler
:
:
Condition
Assembler
:
:
inverseCondition
(
Condition
cond
)
{
#
if
0
switch
(
cond
)
{
case
LessThan
:
return
GreaterThanOrEqual
;
case
LessThanOrEqual
:
return
GreaterThan
;
case
GreaterThan
:
return
LessThanOrEqual
;
case
GreaterThanOrEqual
:
return
LessThan
;
default
:
JS_NOT_REACHED
(
"
Comparisons
other
than
LT
LE
GT
GE
not
yet
supported
"
)
;
return
Equal
;
}
#
endif
JS_NOT_REACHED
(
"
inverse
Not
Implemented
"
)
;
return
Equal
;
}
