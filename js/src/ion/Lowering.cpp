/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
include
"
IonLIR
.
h
"
#
include
"
Lowering
.
h
"
#
include
"
MIR
.
h
"
#
include
"
MIRGraph
.
h
"
#
include
"
IonSpewer
.
h
"
#
include
"
jsbool
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
shared
/
Lowering
-
shared
-
inl
.
h
"
using
namespace
js
;
using
namespace
ion
;
bool
LIRGenerator
:
:
visitParameter
(
MParameter
*
param
)
{
ptrdiff_t
offset
;
if
(
param
-
>
index
(
)
=
=
-
1
)
offset
=
THIS_FRAME_SLOT
;
else
offset
=
1
+
param
-
>
index
(
)
;
LParameter
*
ins
=
new
LParameter
;
if
(
!
defineBox
(
ins
param
LDefinition
:
:
PRESET
)
)
return
false
;
offset
*
=
sizeof
(
Value
)
;
#
if
defined
(
JS_NUNBOX32
)
#
if
defined
(
IS_BIG_ENDIAN
)
ins
-
>
getDef
(
0
)
-
>
setOutput
(
LArgument
(
offset
)
)
;
ins
-
>
getDef
(
1
)
-
>
setOutput
(
LArgument
(
offset
+
4
)
)
;
#
else
ins
-
>
getDef
(
0
)
-
>
setOutput
(
LArgument
(
offset
+
4
)
)
;
ins
-
>
getDef
(
1
)
-
>
setOutput
(
LArgument
(
offset
)
)
;
#
endif
#
elif
defined
(
JS_PUNBOX64
)
ins
-
>
getDef
(
0
)
-
>
setOutput
(
LArgument
(
offset
)
)
;
#
endif
return
true
;
}
bool
LIRGenerator
:
:
visitTableSwitch
(
MTableSwitch
*
tableswitch
)
{
MDefinition
*
opd
=
tableswitch
-
>
getOperand
(
0
)
;
/
/
There
should
be
at
least
1
successor
.
The
default
case
!
JS_ASSERT
(
tableswitch
-
>
numSuccessors
(
)
>
0
)
;
/
/
If
there
are
no
cases
the
default
case
is
always
taken
.
if
(
tableswitch
-
>
numSuccessors
(
)
=
=
1
)
return
add
(
new
LGoto
(
tableswitch
-
>
getDefault
(
)
)
)
;
/
/
Case
indices
are
numeric
so
other
types
will
always
go
to
the
default
case
.
if
(
opd
-
>
type
(
)
!
=
MIRType_Int32
&
&
opd
-
>
type
(
)
!
=
MIRType_Double
)
return
add
(
new
LGoto
(
tableswitch
-
>
getDefault
(
)
)
)
;
/
/
Return
an
LTableSwitch
capable
of
handling
either
an
integer
or
/
/
floating
-
point
index
.
LAllocation
index
;
LDefinition
tempInt
;
if
(
opd
-
>
type
(
)
=
=
MIRType_Int32
)
{
index
=
useCopy
(
opd
)
;
tempInt
=
LDefinition
:
:
BogusTemp
(
)
;
}
else
{
index
=
useRegister
(
opd
)
;
tempInt
=
temp
(
LDefinition
:
:
INTEGER
)
;
}
return
add
(
new
LTableSwitch
(
index
tempInt
temp
(
LDefinition
:
:
POINTER
)
tableswitch
)
)
;
}
bool
LIRGenerator
:
:
visitGoto
(
MGoto
*
ins
)
{
return
add
(
new
LGoto
(
ins
-
>
target
(
)
)
)
;
}
bool
LIRGenerator
:
:
visitTest
(
MTest
*
test
)
{
MDefinition
*
opd
=
test
-
>
getOperand
(
0
)
;
MBasicBlock
*
ifTrue
=
test
-
>
ifTrue
(
)
;
MBasicBlock
*
ifFalse
=
test
-
>
ifFalse
(
)
;
if
(
opd
-
>
type
(
)
=
=
MIRType_Value
)
{
LTestVAndBranch
*
lir
=
new
LTestVAndBranch
(
ifTrue
ifFalse
tempFloat
(
)
)
;
if
(
!
useBox
(
lir
LTestVAndBranch
:
:
Input
opd
)
)
return
false
;
return
add
(
lir
)
;
}
/
/
These
must
be
explicitly
sniffed
out
since
they
are
constants
and
have
/
/
no
payload
.
if
(
opd
-
>
type
(
)
=
=
MIRType_Undefined
|
|
opd
-
>
type
(
)
=
=
MIRType_Null
)
return
add
(
new
LGoto
(
ifFalse
)
)
;
/
/
Check
if
the
operand
for
this
test
is
a
compare
operation
.
If
it
is
we
want
/
/
to
emit
an
LCompare
*
AndBranch
rather
than
an
LTest
*
AndBranch
to
fuse
the
/
/
compare
and
jump
instructions
.
if
(
opd
-
>
isCompare
(
)
)
{
MCompare
*
comp
=
opd
-
>
toCompare
(
)
;
MDefinition
*
left
=
comp
-
>
getOperand
(
0
)
;
MDefinition
*
right
=
comp
-
>
getOperand
(
1
)
;
if
(
comp
-
>
specialization
(
)
=
=
MIRType_Int32
)
{
return
add
(
new
LCompareIAndBranch
(
comp
-
>
jsop
(
)
useRegister
(
left
)
use
(
right
)
ifTrue
ifFalse
)
)
;
}
if
(
comp
-
>
specialization
(
)
=
=
MIRType_Double
)
{
return
add
(
new
LCompareDAndBranch
(
comp
-
>
jsop
(
)
useRegister
(
left
)
useRegister
(
right
)
ifTrue
ifFalse
)
)
;
}
/
/
:
TODO
:
implment
LCompareVAndBranch
.
Bug
:
679804
}
if
(
opd
-
>
type
(
)
=
=
MIRType_Double
)
return
add
(
new
LTestDAndBranch
(
useRegister
(
opd
)
ifTrue
ifFalse
)
)
;
return
add
(
new
LTestIAndBranch
(
useRegister
(
opd
)
ifTrue
ifFalse
)
)
;
}
bool
LIRGenerator
:
:
visitCompare
(
MCompare
*
comp
)
{
MDefinition
*
left
=
comp
-
>
getOperand
(
0
)
;
MDefinition
*
right
=
comp
-
>
getOperand
(
1
)
;
if
(
comp
-
>
specialization
(
)
!
=
MIRType_None
)
{
/
/
Sniff
out
if
the
output
of
this
compare
is
used
only
for
a
branching
.
/
/
If
it
is
then
we
willl
emit
an
LCompare
*
AndBranch
instruction
in
place
/
/
of
this
compare
and
any
test
that
uses
this
compare
.
Thus
we
can
/
/
ignore
this
Compare
.
bool
willOptimize
=
true
;
for
(
MUseIterator
iter
(
comp
-
>
usesBegin
(
)
)
;
iter
!
=
comp
-
>
usesEnd
(
)
;
iter
+
+
)
{
MNode
*
node
=
iter
-
>
node
(
)
;
if
(
node
-
>
isResumePoint
(
)
|
|
(
node
-
>
isDefinition
(
)
&
&
!
node
-
>
toDefinition
(
)
-
>
isControlInstruction
(
)
)
)
{
willOptimize
=
false
;
break
;
}
}
if
(
willOptimize
&
&
!
comp
-
>
isEmittedAtUses
(
)
)
return
emitAtUses
(
comp
)
;
if
(
comp
-
>
specialization
(
)
=
=
MIRType_Int32
)
return
define
(
new
LCompareI
(
comp
-
>
jsop
(
)
useRegister
(
left
)
use
(
right
)
)
comp
)
;
if
(
comp
-
>
specialization
(
)
=
=
MIRType_Double
)
return
define
(
new
LCompareD
(
comp
-
>
jsop
(
)
useRegister
(
left
)
useRegister
(
right
)
)
comp
)
;
}
/
/
:
TODO
:
implement
LCompareV
.
Bug
:
679804
JS_NOT_REACHED
(
"
LCompareV
NYI
"
)
;
return
true
;
}
static
void
ReorderCommutative
(
MDefinition
*
*
lhsp
MDefinition
*
*
rhsp
)
{
MDefinition
*
lhs
=
*
lhsp
;
MDefinition
*
rhs
=
*
rhsp
;
/
/
Put
the
constant
in
the
left
-
hand
side
if
there
is
one
.
if
(
lhs
-
>
isConstant
(
)
)
{
*
rhsp
=
lhs
;
*
lhsp
=
rhs
;
}
}
bool
LIRGenerator
:
:
lowerBitOp
(
JSOp
op
MInstruction
*
ins
)
{
MDefinition
*
lhs
=
ins
-
>
getOperand
(
0
)
;
MDefinition
*
rhs
=
ins
-
>
getOperand
(
1
)
;
if
(
lhs
-
>
type
(
)
=
=
MIRType_Int32
&
&
rhs
-
>
type
(
)
=
=
MIRType_Int32
)
{
ReorderCommutative
(
&
lhs
&
rhs
)
;
return
lowerForALU
(
new
LBitOp
(
op
)
ins
lhs
rhs
)
;
}
JS_NOT_REACHED
(
"
NYI
"
)
;
return
false
;
}
bool
LIRGenerator
:
:
visitBitNot
(
MBitNot
*
ins
)
{
MDefinition
*
input
=
ins
-
>
getOperand
(
0
)
;
JS_ASSERT
(
input
-
>
type
(
)
=
=
MIRType_Int32
)
;
return
lowerForALU
(
new
LBitNot
(
)
ins
input
)
;
}
bool
LIRGenerator
:
:
visitBitAnd
(
MBitAnd
*
ins
)
{
return
lowerBitOp
(
JSOP_BITAND
ins
)
;
}
bool
LIRGenerator
:
:
visitBitOr
(
MBitOr
*
ins
)
{
return
lowerBitOp
(
JSOP_BITOR
ins
)
;
}
bool
LIRGenerator
:
:
visitBitXor
(
MBitXor
*
ins
)
{
return
lowerBitOp
(
JSOP_BITXOR
ins
)
;
}
bool
LIRGenerator
:
:
lowerShiftOp
(
JSOp
op
MInstruction
*
ins
)
{
MDefinition
*
lhs
=
ins
-
>
getOperand
(
0
)
;
MDefinition
*
rhs
=
ins
-
>
getOperand
(
1
)
;
if
(
lhs
-
>
type
(
)
=
=
MIRType_Int32
&
&
rhs
-
>
type
(
)
=
=
MIRType_Int32
)
{
LShiftOp
*
lir
=
new
LShiftOp
(
ins
op
)
;
if
(
op
=
=
JSOP_URSH
)
{
MUrsh
*
ursh
=
ins
-
>
toUrsh
(
)
;
if
(
ursh
-
>
fallible
(
)
&
&
!
assignSnapshot
(
lir
)
)
return
false
;
}
return
lowerForShift
(
lir
ins
lhs
rhs
)
;
}
JS_NOT_REACHED
(
"
NYI
"
)
;
return
false
;
}
bool
LIRGenerator
:
:
visitLsh
(
MLsh
*
ins
)
{
return
lowerShiftOp
(
JSOP_LSH
ins
)
;
}
bool
LIRGenerator
:
:
visitRsh
(
MRsh
*
ins
)
{
return
lowerShiftOp
(
JSOP_RSH
ins
)
;
}
bool
LIRGenerator
:
:
visitUrsh
(
MUrsh
*
ins
)
{
return
lowerShiftOp
(
JSOP_URSH
ins
)
;
}
bool
LIRGenerator
:
:
visitAdd
(
MAdd
*
ins
)
{
MDefinition
*
lhs
=
ins
-
>
getOperand
(
0
)
;
MDefinition
*
rhs
=
ins
-
>
getOperand
(
1
)
;
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
rhs
-
>
type
(
)
)
;
if
(
ins
-
>
specialization
(
)
=
=
MIRType_Int32
)
{
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
MIRType_Int32
)
;
ReorderCommutative
(
&
lhs
&
rhs
)
;
LAddI
*
lir
=
new
LAddI
;
if
(
!
assignSnapshot
(
lir
)
)
return
false
;
return
lowerForALU
(
lir
ins
lhs
rhs
)
;
}
if
(
ins
-
>
specialization
(
)
=
=
MIRType_Double
)
{
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
MIRType_Double
)
;
return
lowerForFPU
(
new
LMathD
(
JSOP_ADD
)
ins
lhs
rhs
)
;
}
JS_NOT_REACHED
(
"
NYI
"
)
;
return
false
;
}
bool
LIRGenerator
:
:
visitMul
(
MMul
*
ins
)
{
MDefinition
*
lhs
=
ins
-
>
getOperand
(
0
)
;
MDefinition
*
rhs
=
ins
-
>
getOperand
(
1
)
;
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
rhs
-
>
type
(
)
)
;
if
(
ins
-
>
specialization
(
)
=
=
MIRType_Int32
)
{
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
MIRType_Int32
)
;
ReorderCommutative
(
&
lhs
&
rhs
)
;
LMulI
*
lir
=
new
LMulI
(
ins
)
;
if
(
ins
-
>
fallible
(
)
&
&
!
assignSnapshot
(
lir
)
)
return
false
;
return
lowerForALU
(
lir
ins
lhs
rhs
)
;
}
if
(
ins
-
>
specialization
(
)
=
=
MIRType_Double
)
{
JS_ASSERT
(
lhs
-
>
type
(
)
=
=
MIRType_Double
)
;
return
lowerForFPU
(
new
LMathD
(
JSOP_MUL
)
ins
lhs
rhs
)
;
}
JS_NOT_REACHED
(
"
NYI
"
)
;
return
false
;
}
bool
LIRGenerator
:
:
visitStart
(
MStart
*
start
)
{
/
/
This
is
a
no
-
op
.
return
true
;
}
bool
LIRGenerator
:
:
visitToDouble
(
MToDouble
*
convert
)
{
MDefinition
*
opd
=
convert
-
>
input
(
)
;
switch
(
opd
-
>
type
(
)
)
{
case
MIRType_Value
:
{
LValueToDouble
*
lir
=
new
LValueToDouble
(
)
;
if
(
!
useBox
(
lir
LValueToDouble
:
:
Input
opd
)
)
return
false
;
return
define
(
lir
convert
)
&
&
assignSnapshot
(
lir
)
;
}
case
MIRType_Null
:
return
lowerConstantDouble
(
0
convert
)
;
case
MIRType_Undefined
:
return
lowerConstantDouble
(
js_NaN
convert
)
;
case
MIRType_Int32
:
case
MIRType_Boolean
:
{
LInt32ToDouble
*
lir
=
new
LInt32ToDouble
(
useRegister
(
opd
)
)
;
return
define
(
lir
convert
)
;
}
case
MIRType_Double
:
return
redefine
(
convert
opd
)
;
default
:
/
/
Objects
might
not
be
idempotent
.
/
/
Strings
are
complicated
-
we
don
'
t
handle
them
yet
.
JS_NOT_REACHED
(
"
unexpected
type
"
)
;
}
return
false
;
}
bool
LIRGenerator
:
:
visitToInt32
(
MToInt32
*
convert
)
{
MDefinition
*
opd
=
convert
-
>
input
(
)
;
switch
(
opd
-
>
type
(
)
)
{
case
MIRType_Value
:
{
LValueToInt32
*
lir
=
new
LValueToInt32
(
tempFloat
(
)
LValueToInt32
:
:
NORMAL
)
;
if
(
!
useBox
(
lir
LValueToInt32
:
:
Input
opd
)
)
return
false
;
return
define
(
lir
convert
)
&
&
assignSnapshot
(
lir
)
;
}
case
MIRType_Null
:
return
define
(
new
LInteger
(
0
)
convert
)
;
case
MIRType_Int32
:
case
MIRType_Boolean
:
return
redefine
(
convert
opd
)
;
default
:
/
/
Undefined
coerces
to
NaN
not
int32
.
/
/
Objects
might
not
be
idempotent
.
/
/
Strings
are
complicated
-
we
don
'
t
handle
them
yet
.
/
/
Doubles
should
have
changed
the
caller
'
s
specialization
.
JS_NOT_REACHED
(
"
unexpected
type
"
)
;
}
return
false
;
}
bool
LIRGenerator
:
:
visitTruncateToInt32
(
MTruncateToInt32
*
truncate
)
{
MDefinition
*
opd
=
truncate
-
>
input
(
)
;
switch
(
opd
-
>
type
(
)
)
{
case
MIRType_Value
:
{
LValueToInt32
*
lir
=
new
LValueToInt32
(
tempFloat
(
)
LValueToInt32
:
:
TRUNCATE
)
;
if
(
!
useBox
(
lir
LValueToInt32
:
:
Input
opd
)
)
return
false
;
return
define
(
lir
truncate
)
&
&
assignSnapshot
(
lir
)
;
}
case
MIRType_Null
:
case
MIRType_Undefined
:
return
define
(
new
LInteger
(
0
)
truncate
)
;
case
MIRType_Int32
:
case
MIRType_Boolean
:
return
redefine
(
truncate
opd
)
;
case
MIRType_Double
:
{
LTruncateDToInt32
*
lir
=
new
LTruncateDToInt32
(
useRegister
(
opd
)
)
;
return
define
(
lir
truncate
)
&
&
assignSnapshot
(
lir
)
;
}
default
:
/
/
Objects
might
not
be
idempotent
.
/
/
Strings
are
complicated
-
we
don
'
t
handle
them
yet
.
JS_NOT_REACHED
(
"
unexpected
type
"
)
;
}
return
false
;
}
bool
LIRGenerator
:
:
visitCopy
(
MCopy
*
ins
)
{
JS_NOT_REACHED
(
"
unexpected
copy
"
)
;
return
false
;
}
static
void
SpewResumePoint
(
MBasicBlock
*
block
MInstruction
*
ins
MResumePoint
*
resumePoint
)
{
fprintf
(
IonSpewFile
"
Current
resume
point
%
p
details
:
\
n
"
(
void
*
)
resumePoint
)
;
if
(
ins
)
{
fprintf
(
IonSpewFile
"
taken
after
:
"
)
;
ins
-
>
printName
(
IonSpewFile
)
;
}
else
{
fprintf
(
IonSpewFile
"
taken
at
block
%
d
entry
"
block
-
>
id
(
)
)
;
}
fprintf
(
IonSpewFile
"
\
n
"
)
;
fprintf
(
IonSpewFile
"
pc
:
%
p
\
n
"
resumePoint
-
>
pc
(
)
)
;
for
(
size_t
i
=
0
;
i
<
resumePoint
-
>
numOperands
(
)
;
i
+
+
)
{
MDefinition
*
in
=
resumePoint
-
>
getOperand
(
i
)
;
fprintf
(
IonSpewFile
"
slot
%
u
:
"
(
unsigned
)
i
)
;
in
-
>
printName
(
IonSpewFile
)
;
fprintf
(
IonSpewFile
"
\
n
"
)
;
}
}
bool
LIRGenerator
:
:
visitInstruction
(
MInstruction
*
ins
)
{
if
(
!
gen
-
>
ensureBallast
(
)
)
return
false
;
if
(
!
ins
-
>
accept
(
this
)
)
return
false
;
if
(
ins
-
>
resumePoint
(
)
)
updateResumeState
(
ins
)
;
if
(
gen
-
>
errored
(
)
)
return
false
;
#
ifdef
DEBUG
ins
-
>
setInWorklistUnchecked
(
)
;
#
endif
return
true
;
}
bool
LIRGenerator
:
:
definePhis
(
)
{
size_t
lirIndex
=
0
;
MBasicBlock
*
block
=
current
-
>
mir
(
)
;
for
(
MPhiIterator
phi
(
block
-
>
phisBegin
(
)
)
;
phi
!
=
block
-
>
phisEnd
(
)
;
phi
+
+
)
{
if
(
phi
-
>
type
(
)
=
=
MIRType_Value
)
{
if
(
!
defineUntypedPhi
(
*
phi
lirIndex
)
)
return
false
;
lirIndex
+
=
BOX_PIECES
;
}
else
{
if
(
!
defineTypedPhi
(
*
phi
lirIndex
)
)
return
false
;
lirIndex
+
=
1
;
}
}
return
true
;
}
void
LIRGenerator
:
:
updateResumeState
(
MInstruction
*
ins
)
{
lastResumePoint_
=
ins
-
>
resumePoint
(
)
;
if
(
IonSpewEnabled
(
IonSpew_Snapshots
)
)
SpewResumePoint
(
NULL
ins
lastResumePoint_
)
;
}
void
LIRGenerator
:
:
updateResumeState
(
MBasicBlock
*
block
)
{
lastResumePoint_
=
block
-
>
entryResumePoint
(
)
;
if
(
IonSpewEnabled
(
IonSpew_Snapshots
)
)
SpewResumePoint
(
block
NULL
lastResumePoint_
)
;
}
bool
LIRGenerator
:
:
visitBlock
(
MBasicBlock
*
block
)
{
current
=
block
-
>
lir
(
)
;
updateResumeState
(
block
)
;
if
(
!
definePhis
(
)
)
return
false
;
for
(
MInstructionIterator
iter
=
block
-
>
begin
(
)
;
*
iter
!
=
block
-
>
lastIns
(
)
;
iter
+
+
)
{
if
(
!
visitInstruction
(
*
iter
)
)
return
false
;
}
if
(
block
-
>
successorWithPhis
(
)
)
{
/
/
If
we
have
a
successor
with
phis
lower
the
phi
input
now
that
we
/
/
are
approaching
the
join
point
.
MBasicBlock
*
successor
=
block
-
>
successorWithPhis
(
)
;
uint32
position
=
block
-
>
positionInPhiSuccessor
(
)
;
size_t
lirIndex
=
0
;
for
(
MPhiIterator
phi
(
successor
-
>
phisBegin
(
)
)
;
phi
!
=
successor
-
>
phisEnd
(
)
;
phi
+
+
)
{
MDefinition
*
opd
=
phi
-
>
getOperand
(
position
)
;
if
(
!
ensureDefined
(
opd
)
)
return
false
;
JS_ASSERT
(
opd
-
>
type
(
)
=
=
phi
-
>
type
(
)
)
;
if
(
phi
-
>
type
(
)
=
=
MIRType_Value
)
{
lowerUntypedPhiInput
(
*
phi
position
successor
-
>
lir
(
)
lirIndex
)
;
lirIndex
+
=
BOX_PIECES
;
}
else
{
lowerTypedPhiInput
(
*
phi
position
successor
-
>
lir
(
)
lirIndex
)
;
lirIndex
+
=
1
;
}
}
}
/
/
Now
emit
the
last
instruction
which
is
some
form
of
branch
.
if
(
!
visitInstruction
(
block
-
>
lastIns
(
)
)
)
return
false
;
return
true
;
}
bool
LIRGenerator
:
:
precreatePhi
(
LBlock
*
block
MPhi
*
phi
)
{
LPhi
*
lir
=
LPhi
:
:
New
(
gen
phi
)
;
if
(
!
lir
)
return
false
;
if
(
!
block
-
>
addPhi
(
lir
)
)
return
false
;
return
true
;
}
bool
LIRGenerator
:
:
generate
(
)
{
/
/
Create
all
blocks
and
prep
all
phis
beforehand
.
for
(
ReversePostorderIterator
block
(
graph
.
rpoBegin
(
)
)
;
block
!
=
graph
.
rpoEnd
(
)
;
block
+
+
)
{
current
=
LBlock
:
:
New
(
*
block
)
;
if
(
!
current
)
return
false
;
if
(
!
lirGraph_
.
addBlock
(
current
)
)
return
false
;
block
-
>
assignLir
(
current
)
;
/
/
For
each
MIR
phi
add
LIR
phis
as
appropriate
.
We
'
ll
fill
in
their
/
/
operands
on
each
incoming
edge
and
set
their
definitions
at
the
/
/
start
of
their
defining
block
.
for
(
MPhiIterator
phi
(
block
-
>
phisBegin
(
)
)
;
phi
!
=
block
-
>
phisEnd
(
)
;
phi
+
+
)
{
int
numPhis
=
(
phi
-
>
type
(
)
=
=
MIRType_Value
)
?
BOX_PIECES
:
1
;
for
(
int
i
=
0
;
i
<
numPhis
;
i
+
+
)
{
if
(
!
precreatePhi
(
block
-
>
lir
(
)
*
phi
)
)
return
false
;
}
}
}
for
(
ReversePostorderIterator
block
(
graph
.
rpoBegin
(
)
)
;
block
!
=
graph
.
rpoEnd
(
)
;
block
+
+
)
{
if
(
!
visitBlock
(
*
block
)
)
return
false
;
}
return
true
;
}
