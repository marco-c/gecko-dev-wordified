/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
include
"
CodeGenerator
-
shared
.
h
"
#
include
"
ion
/
MIRGenerator
.
h
"
#
include
"
ion
/
IonFrames
.
h
"
#
include
"
ion
/
MIR
.
h
"
#
include
"
CodeGenerator
-
shared
-
inl
.
h
"
#
include
"
ion
/
IonSpewer
.
h
"
using
namespace
js
;
using
namespace
js
:
:
ion
;
CodeGeneratorShared
:
:
CodeGeneratorShared
(
MIRGenerator
*
gen
LIRGraph
&
graph
)
:
gen
(
gen
)
graph
(
graph
)
deoptTable_
(
NULL
)
frameDepth_
(
graph
.
localSlotCount
(
)
*
sizeof
(
STACK_SLOT_SIZE
)
+
graph
.
argumentSlotCount
(
)
*
sizeof
(
Value
)
)
{
frameClass_
=
FrameSizeClass
:
:
FromDepth
(
frameDepth_
)
;
}
bool
CodeGeneratorShared
:
:
generateOutOfLineCode
(
)
{
for
(
size_t
i
=
0
;
i
<
outOfLineCode_
.
length
(
)
;
i
+
+
)
{
if
(
!
outOfLineCode_
[
i
]
-
>
generate
(
this
)
)
return
false
;
}
return
true
;
}
bool
CodeGeneratorShared
:
:
addOutOfLineCode
(
OutOfLineCode
*
code
)
{
return
outOfLineCode_
.
append
(
code
)
;
}
bool
CodeGeneratorShared
:
:
encodeSlots
(
LSnapshot
*
snapshot
MResumePoint
*
resumePoint
uint32
*
startIndex
)
{
IonSpew
(
IonSpew_Codegen
"
Encoding
%
u
of
resume
point
%
p
'
s
operands
starting
from
%
u
"
resumePoint
-
>
numOperands
(
)
(
void
*
)
resumePoint
*
startIndex
)
;
for
(
uint32
slotno
=
0
;
slotno
<
resumePoint
-
>
numOperands
(
)
;
slotno
+
+
)
{
uint32
i
=
slotno
+
*
startIndex
;
MDefinition
*
mir
=
resumePoint
-
>
getOperand
(
slotno
)
;
MIRType
type
=
mir
-
>
isUnused
(
)
?
MIRType_Undefined
:
mir
-
>
type
(
)
;
switch
(
type
)
{
case
MIRType_Undefined
:
snapshots_
.
addUndefinedSlot
(
)
;
break
;
case
MIRType_Null
:
snapshots_
.
addNullSlot
(
)
;
break
;
case
MIRType_Int32
:
case
MIRType_String
:
case
MIRType_Object
:
case
MIRType_Boolean
:
case
MIRType_Double
:
{
LAllocation
*
payload
=
snapshot
-
>
payloadOfSlot
(
i
)
;
JSValueType
type
=
ValueTypeFromMIRType
(
mir
-
>
type
(
)
)
;
if
(
payload
-
>
isMemory
(
)
)
{
snapshots_
.
addSlot
(
type
ToStackOffset
(
payload
)
)
;
}
else
if
(
payload
-
>
isGeneralReg
(
)
)
{
snapshots_
.
addSlot
(
type
ToRegister
(
payload
)
)
;
}
else
if
(
payload
-
>
isFloatReg
(
)
)
{
snapshots_
.
addSlot
(
ToFloatRegister
(
payload
)
)
;
}
else
{
MConstant
*
constant
=
mir
-
>
toConstant
(
)
;
const
Value
&
v
=
constant
-
>
value
(
)
;
/
/
Don
'
t
bother
with
the
constant
pool
for
smallish
integers
.
if
(
v
.
isInt32
(
)
&
&
v
.
toInt32
(
)
>
=
-
32
&
&
v
.
toInt32
(
)
<
=
32
)
{
snapshots_
.
addInt32Slot
(
v
.
toInt32
(
)
)
;
}
else
{
uint32
index
;
if
(
!
graph
.
addConstantToPool
(
constant
&
index
)
)
return
false
;
snapshots_
.
addConstantPoolSlot
(
index
)
;
}
}
break
;
}
default
:
{
JS_ASSERT
(
mir
-
>
type
(
)
=
=
MIRType_Value
)
;
LAllocation
*
payload
=
snapshot
-
>
payloadOfSlot
(
i
)
;
#
ifdef
JS_NUNBOX32
LAllocation
*
type
=
snapshot
-
>
typeOfSlot
(
i
)
;
if
(
type
-
>
isRegister
(
)
)
{
if
(
payload
-
>
isRegister
(
)
)
snapshots_
.
addSlot
(
ToRegister
(
type
)
ToRegister
(
payload
)
)
;
else
snapshots_
.
addSlot
(
ToRegister
(
type
)
ToStackOffset
(
payload
)
)
;
}
else
{
if
(
payload
-
>
isRegister
(
)
)
snapshots_
.
addSlot
(
ToStackOffset
(
type
)
ToRegister
(
payload
)
)
;
else
snapshots_
.
addSlot
(
ToStackOffset
(
type
)
ToStackOffset
(
payload
)
)
;
}
#
elif
JS_PUNBOX64
if
(
payload
-
>
isRegister
(
)
)
snapshots_
.
addSlot
(
ToRegister
(
payload
)
)
;
else
snapshots_
.
addSlot
(
ToStackOffset
(
payload
)
)
;
#
endif
break
;
}
}
}
*
startIndex
+
=
resumePoint
-
>
numOperands
(
)
;
return
true
;
}
bool
CodeGeneratorShared
:
:
encode
(
LSnapshot
*
snapshot
)
{
if
(
snapshot
-
>
snapshotOffset
(
)
!
=
INVALID_SNAPSHOT_OFFSET
)
return
true
;
uint32
frameCount
=
snapshot
-
>
mir
(
)
-
>
frameCount
(
)
;
IonSpew
(
IonSpew_Snapshots
"
Encoding
LSnapshot
%
p
(
frameCount
%
u
)
"
(
void
*
)
snapshot
frameCount
)
;
SnapshotOffset
offset
=
snapshots_
.
startSnapshot
(
frameCount
snapshot
-
>
bailoutKind
(
)
)
;
FlattenedMResumePointIter
mirOperandIter
(
snapshot
-
>
mir
(
)
)
;
if
(
!
mirOperandIter
.
init
(
)
)
return
false
;
uint32
startIndex
=
0
;
for
(
MResumePoint
*
*
it
=
mirOperandIter
.
begin
(
)
*
*
end
=
mirOperandIter
.
end
(
)
;
it
!
=
end
;
+
+
it
)
{
MResumePoint
*
mir
=
*
it
;
MBasicBlock
*
block
=
mir
-
>
block
(
)
;
JSFunction
*
fun
=
block
-
>
info
(
)
.
fun
(
)
;
JSScript
*
script
=
block
-
>
info
(
)
.
script
(
)
;
jsbytecode
*
pc
=
mir
-
>
pc
(
)
;
uint32
exprStack
=
mir
-
>
stackDepth
(
)
-
block
-
>
info
(
)
.
ninvoke
(
)
;
snapshots_
.
startFrame
(
fun
script
pc
exprStack
)
;
encodeSlots
(
snapshot
mir
&
startIndex
)
;
snapshots_
.
endFrame
(
)
;
}
snapshots_
.
endSnapshot
(
)
;
snapshot
-
>
setSnapshotOffset
(
offset
)
;
return
!
snapshots_
.
oom
(
)
;
}
bool
CodeGeneratorShared
:
:
assignBailoutId
(
LSnapshot
*
snapshot
)
{
JS_ASSERT
(
snapshot
-
>
snapshotOffset
(
)
!
=
INVALID_SNAPSHOT_OFFSET
)
;
/
/
Can
we
not
use
bailout
tables
at
all
?
if
(
!
deoptTable_
)
return
false
;
JS_ASSERT
(
frameClass_
!
=
FrameSizeClass
:
:
None
(
)
)
;
if
(
snapshot
-
>
bailoutId
(
)
!
=
INVALID_BAILOUT_ID
)
return
true
;
/
/
Is
the
bailout
table
full
?
if
(
bailouts_
.
length
(
)
>
=
BAILOUT_TABLE_SIZE
)
return
false
;
uintN
bailoutId
=
bailouts_
.
length
(
)
;
snapshot
-
>
setBailoutId
(
bailoutId
)
;
IonSpew
(
IonSpew_Snapshots
"
Assigned
snapshot
bailout
id
%
u
"
bailoutId
)
;
return
bailouts_
.
append
(
snapshot
-
>
snapshotOffset
(
)
)
;
}
