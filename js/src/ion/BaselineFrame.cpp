/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
4
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
99
:
*
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
BaselineFrame
.
h
"
#
include
"
vm
/
ScopeObject
.
h
"
using
namespace
js
;
using
namespace
js
:
:
ion
;
void
BaselineFrame
:
:
trace
(
JSTracer
*
trc
)
{
/
/
Mark
scope
chain
.
gc
:
:
MarkObjectRoot
(
trc
&
scopeChain_
"
baseline
-
scopechain
"
)
;
/
/
Mark
return
value
.
if
(
hasReturnValue
(
)
)
gc
:
:
MarkValueRoot
(
trc
returnValue
(
)
"
baseline
-
rval
"
)
;
if
(
isEvalFrame
(
)
)
gc
:
:
MarkScriptRoot
(
trc
&
evalScript_
"
baseline
-
evalscript
"
)
;
/
/
Mark
locals
and
stack
values
.
size_t
nvalues
=
numValueSlots
(
)
;
if
(
nvalues
>
0
)
{
/
/
The
stack
grows
down
so
start
at
the
last
Value
.
Value
*
last
=
valueSlot
(
nvalues
-
1
)
;
gc
:
:
MarkValueRootRange
(
trc
nvalues
last
"
baseline
-
stack
"
)
;
}
}
bool
BaselineFrame
:
:
copyRawFrameSlots
(
AutoValueVector
*
vec
)
const
{
unsigned
nfixed
=
script
(
)
-
>
nfixed
;
unsigned
nformals
=
numFormalArgs
(
)
;
if
(
!
vec
-
>
resize
(
nformals
+
nfixed
)
)
return
false
;
PodCopy
(
vec
-
>
begin
(
)
formals
(
)
nformals
)
;
for
(
unsigned
i
=
0
;
i
<
nfixed
;
i
+
+
)
(
*
vec
)
[
nformals
+
i
]
=
*
valueSlot
(
i
)
;
return
true
;
}
bool
BaselineFrame
:
:
strictEvalPrologue
(
JSContext
*
cx
)
{
JS_ASSERT
(
isStrictEvalFrame
(
)
)
;
CallObject
*
callobj
=
CallObject
:
:
createForStrictEval
(
cx
this
)
;
if
(
!
callobj
)
return
false
;
pushOnScopeChain
(
*
callobj
)
;
flags_
|
=
HAS_CALL_OBJ
;
return
true
;
}
