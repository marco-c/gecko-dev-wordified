/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
dvander
alliedmods
.
net
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
include
"
jscntxt
.
h
"
#
include
"
jscompartment
.
h
"
#
include
"
ion
/
Bailouts
.
h
"
#
include
"
ion
/
IonCompartment
.
h
"
#
include
"
ion
/
IonFrames
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
ion
;
#
if
defined
(
_WIN32
)
#
pragma
pack
(
push
1
)
#
endif
namespace
js
{
namespace
ion
{
class
BailoutStack
{
uintptr_t
frameClassId_
;
double
fpregs_
[
FloatRegisters
:
:
Total
]
;
uintptr_t
regs_
[
Registers
:
:
Total
]
;
union
{
uintptr_t
frameSize_
;
uintptr_t
tableOffset_
;
}
;
uintptr_t
snapshotOffset_
;
public
:
FrameSizeClass
frameClass
(
)
const
{
return
FrameSizeClass
:
:
FromClass
(
frameClassId_
)
;
}
uintptr_t
tableOffset
(
)
const
{
JS_ASSERT
(
frameClass
(
)
!
=
FrameSizeClass
:
:
None
(
)
)
;
return
tableOffset_
;
}
uint32
frameSize
(
)
const
{
if
(
frameClass
(
)
=
=
FrameSizeClass
:
:
None
(
)
)
return
frameSize_
;
return
frameClass
(
)
.
frameSize
(
)
;
}
MachineState
machine
(
)
{
return
MachineState
:
:
FromBailout
(
regs_
fpregs_
)
;
}
SnapshotOffset
snapshotOffset
(
)
const
{
JS_ASSERT
(
frameClass
(
)
=
=
FrameSizeClass
:
:
None
(
)
)
;
return
snapshotOffset_
;
}
uint8
*
parentStackPointer
(
)
const
{
if
(
frameClass
(
)
=
=
FrameSizeClass
:
:
None
(
)
)
return
(
uint8
*
)
this
+
sizeof
(
BailoutStack
)
;
return
(
uint8
*
)
this
+
offsetof
(
BailoutStack
snapshotOffset_
)
;
}
}
;
}
/
/
namespace
ion
}
/
/
namespace
js
#
if
defined
(
_WIN32
)
#
pragma
pack
(
pop
)
#
endif
IonBailoutIterator
:
:
IonBailoutIterator
(
const
IonActivationIterator
&
activations
BailoutStack
*
bailout
)
:
IonFrameIterator
(
activations
)
machine_
(
bailout
-
>
machine
(
)
)
{
uint8
*
sp
=
bailout
-
>
parentStackPointer
(
)
;
uint8
*
fp
=
sp
+
bailout
-
>
frameSize
(
)
;
current_
=
fp
;
type_
=
IonFrame_JS
;
topFrameSize_
=
current_
-
sp
;
topIonScript_
=
script
(
)
-
>
ion
;
if
(
bailout
-
>
frameClass
(
)
=
=
FrameSizeClass
:
:
None
(
)
)
{
snapshotOffset_
=
bailout
-
>
snapshotOffset
(
)
;
return
;
}
/
/
Compute
the
snapshot
offset
from
the
bailout
ID
.
IonActivation
*
activation
=
activations
.
activation
(
)
;
JSCompartment
*
jsCompartment
=
activation
-
>
compartment
(
)
;
IonCompartment
*
ionCompartment
=
jsCompartment
-
>
ionCompartment
(
)
;
IonCode
*
code
=
ionCompartment
-
>
getBailoutTable
(
bailout
-
>
frameClass
(
)
)
;
uintptr_t
tableOffset
=
bailout
-
>
tableOffset
(
)
;
uintptr_t
tableStart
=
reinterpret_cast
<
uintptr_t
>
(
code
-
>
raw
(
)
)
;
JS_ASSERT
(
tableOffset
>
=
tableStart
&
&
tableOffset
<
tableStart
+
code
-
>
instructionsSize
(
)
)
;
JS_ASSERT
(
(
tableOffset
-
tableStart
)
%
BAILOUT_TABLE_ENTRY_SIZE
=
=
0
)
;
uint32
bailoutId
=
(
(
tableOffset
-
tableStart
)
/
BAILOUT_TABLE_ENTRY_SIZE
)
-
1
;
JS_ASSERT
(
bailoutId
<
BAILOUT_TABLE_SIZE
)
;
snapshotOffset_
=
topIonScript_
-
>
bailoutToSnapshot
(
bailoutId
)
;
}
IonBailoutIterator
:
:
IonBailoutIterator
(
const
IonActivationIterator
&
activations
InvalidationBailoutStack
*
bailout
)
:
IonFrameIterator
(
activations
)
machine_
(
bailout
-
>
machine
(
)
)
{
returnAddressToFp_
=
bailout
-
>
osiPointReturnAddress
(
)
;
topIonScript_
=
bailout
-
>
ionScript
(
)
;
const
OsiIndex
*
osiIndex
=
topIonScript_
-
>
getOsiIndex
(
returnAddressToFp_
)
;
current_
=
(
uint8
*
)
bailout
-
>
fp
(
)
;
type_
=
IonFrame_JS
;
topFrameSize_
=
current_
-
bailout
-
>
sp
(
)
;
snapshotOffset_
=
osiIndex
-
>
snapshotOffset
(
)
;
}
