/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
if
!
defined
(
jsion_ion_h__
)
&
&
defined
(
JS_ION
)
#
define
jsion_ion_h__
#
include
"
jscntxt
.
h
"
#
include
"
IonCode
.
h
"
namespace
js
{
namespace
ion
{
class
TempAllocator
;
struct
IonOptions
{
/
/
If
Ion
is
supported
this
toggles
whether
Ion
is
used
.
/
/
/
/
Default
:
false
bool
enabled
;
/
/
Toggles
whether
global
value
numbering
is
used
.
/
/
/
/
Default
:
true
bool
gvn
;
/
/
Toggles
whether
global
value
numbering
is
optimistic
(
true
)
or
/
/
pessimistic
(
false
)
.
/
/
/
/
Default
:
true
bool
gvnIsOptimistic
;
/
/
Toggles
whether
loop
invariant
code
motion
is
performed
.
/
/
/
/
Default
:
true
bool
licm
;
/
/
Toggles
whether
Linear
Scan
Register
Allocation
is
used
.
If
LSRA
is
not
/
/
used
then
Greedy
Register
Allocation
is
used
instead
.
/
/
/
/
Default
:
true
bool
lsra
;
/
/
How
many
invocations
of
a
function
are
needed
before
the
Ion
compiler
/
/
kicks
in
.
/
/
/
/
Default
:
40
.
uint32
invokesBeforeCompile
;
void
setEagerCompilation
(
)
{
invokesBeforeCompile
=
0
;
}
IonOptions
(
)
:
enabled
(
false
)
gvn
(
true
)
gvnIsOptimistic
(
true
)
licm
(
true
)
lsra
(
true
)
invokesBeforeCompile
(
40
)
{
}
}
;
enum
MethodStatus
{
Method_CantCompile
Method_Skipped
Method_Compiled
}
;
/
/
An
Ion
context
is
needed
to
enter
into
either
an
Ion
method
or
an
instance
/
/
of
the
Ion
compiler
.
It
points
to
a
temporary
allocator
and
the
active
/
/
JSContext
.
class
IonContext
{
public
:
IonContext
(
JSContext
*
cx
TempAllocator
*
temp
)
;
~
IonContext
(
)
;
JSContext
*
cx
;
TempAllocator
*
temp
;
}
;
extern
IonOptions
js_IonOptions
;
/
/
Initialize
Ion
statically
for
all
JSRuntimes
.
bool
InitializeIon
(
)
;
/
/
Get
and
set
the
current
Ion
context
.
IonContext
*
GetIonContext
(
)
;
bool
SetIonContext
(
IonContext
*
ctx
)
;
MethodStatus
Compile
(
JSContext
*
cx
JSScript
*
script
js
:
:
StackFrame
*
fp
)
;
bool
Cannon
(
JSContext
*
cx
StackFrame
*
fp
)
;
static
inline
bool
IsEnabled
(
)
{
return
js_IonOptions
.
enabled
;
}
}
}
#
endif
/
/
jsion_ion_h__
