/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
include
"
IonBuilder
.
h
"
#
include
"
MIRGraph
.
h
"
#
include
"
Ion
.
h
"
#
include
"
IonAnalysis
.
h
"
using
namespace
js
;
using
namespace
js
:
:
ion
;
/
/
A
critical
edge
is
an
edge
which
is
neither
its
successor
'
s
only
predecessor
/
/
nor
its
predecessor
'
s
only
successor
.
Critical
edges
must
be
split
to
/
/
prevent
copy
-
insertion
and
code
motion
from
affecting
other
edges
.
bool
ion
:
:
SplitCriticalEdges
(
MIRGenerator
*
gen
MIRGraph
&
graph
)
{
size_t
preSplitEdges
=
graph
.
numBlocks
(
)
;
for
(
size_t
i
=
0
;
i
<
preSplitEdges
;
i
+
+
)
{
MBasicBlock
*
block
=
graph
.
getBlock
(
i
)
;
if
(
block
-
>
numSuccessors
(
)
<
2
)
continue
;
for
(
size_t
i
=
0
;
i
<
block
-
>
numSuccessors
(
)
;
i
+
+
)
{
MBasicBlock
*
target
=
block
-
>
getSuccessor
(
i
)
;
if
(
target
-
>
numPredecessors
(
)
<
2
)
continue
;
/
/
Create
a
new
block
inheriting
from
the
predecessor
.
MBasicBlock
*
split
=
MBasicBlock
:
:
NewSplitEdge
(
gen
block
)
;
if
(
!
graph
.
addBlock
(
split
)
)
return
false
;
split
-
>
end
(
MGoto
:
:
New
(
target
)
)
;
block
-
>
replaceSuccessor
(
i
split
)
;
target
-
>
replacePredecessor
(
block
split
)
;
}
}
return
true
;
}
bool
ion
:
:
ApplyTypeInformation
(
MIRGraph
&
graph
)
{
return
true
;
}
bool
ion
:
:
ReorderBlocks
(
MIRGraph
&
graph
)
{
Vector
<
MBasicBlock
*
0
IonAllocPolicy
>
pending
;
Vector
<
unsigned
int
0
IonAllocPolicy
>
successors
;
Vector
<
MBasicBlock
*
0
IonAllocPolicy
>
done
;
MBasicBlock
*
current
=
graph
.
getBlock
(
0
)
;
unsigned
int
nextSuccessor
=
0
;
graph
.
clearBlockList
(
)
;
/
/
Build
up
a
postorder
traversal
non
-
recursively
.
while
(
true
)
{
if
(
!
current
-
>
isMarked
(
)
)
{
current
-
>
mark
(
)
;
if
(
nextSuccessor
<
current
-
>
lastIns
(
)
-
>
numSuccessors
(
)
)
{
if
(
!
pending
.
append
(
current
)
)
return
false
;
if
(
!
successors
.
append
(
nextSuccessor
)
)
return
false
;
current
=
current
-
>
lastIns
(
)
-
>
getSuccessor
(
nextSuccessor
)
;
nextSuccessor
=
0
;
continue
;
}
if
(
!
done
.
append
(
current
)
)
return
false
;
}
if
(
pending
.
empty
(
)
)
break
;
current
=
pending
.
popCopy
(
)
;
current
-
>
unmark
(
)
;
nextSuccessor
=
successors
.
popCopy
(
)
+
1
;
}
JS_ASSERT
(
pending
.
empty
(
)
)
;
JS_ASSERT
(
successors
.
empty
(
)
)
;
while
(
!
done
.
empty
(
)
)
{
current
=
done
.
popCopy
(
)
;
current
-
>
unmark
(
)
;
if
(
!
graph
.
addBlock
(
current
)
)
return
false
;
}
return
true
;
}
/
/
A
Simple
Fast
Dominance
Algorithm
by
Cooper
et
al
.
static
MBasicBlock
*
IntersectDominators
(
MBasicBlock
*
block1
MBasicBlock
*
block2
)
{
MBasicBlock
*
finger1
=
block1
;
MBasicBlock
*
finger2
=
block2
;
while
(
finger1
-
>
id
(
)
!
=
finger2
-
>
id
(
)
)
{
/
/
In
the
original
paper
the
comparisons
are
on
the
postorder
index
.
/
/
In
this
implementation
the
id
of
the
block
is
in
reverse
postorder
/
/
so
we
reverse
the
comparison
.
while
(
finger1
-
>
id
(
)
>
finger2
-
>
id
(
)
)
finger1
=
finger1
-
>
immediateDominator
(
)
;
while
(
finger2
-
>
id
(
)
>
finger1
-
>
id
(
)
)
finger2
=
finger2
-
>
immediateDominator
(
)
;
}
return
finger1
;
}
static
void
ComputeImmediateDominators
(
MIRGraph
&
graph
)
{
if
(
graph
.
numBlocks
(
)
=
=
0
)
return
;
MBasicBlock
*
startBlock
=
graph
.
getBlock
(
0
)
;
startBlock
-
>
setImmediateDominator
(
startBlock
)
;
bool
changed
=
true
;
while
(
changed
)
{
changed
=
false
;
/
/
We
start
at
1
not
0
intentionally
excluding
the
start
node
.
for
(
size_t
i
=
1
;
i
<
graph
.
numBlocks
(
)
;
i
+
+
)
{
MBasicBlock
*
block
=
graph
.
getBlock
(
i
)
;
if
(
block
-
>
numPredecessors
(
)
=
=
0
)
continue
;
MBasicBlock
*
newIdom
=
block
-
>
getPredecessor
(
0
)
;
for
(
size_t
i
=
1
;
i
<
block
-
>
numPredecessors
(
)
;
i
+
+
)
{
MBasicBlock
*
pred
=
graph
.
getBlock
(
i
)
;
if
(
pred
-
>
immediateDominator
(
)
!
=
NULL
)
newIdom
=
IntersectDominators
(
pred
newIdom
)
;
}
if
(
block
-
>
immediateDominator
(
)
!
=
newIdom
)
{
block
-
>
setImmediateDominator
(
newIdom
)
;
changed
=
true
;
}
}
}
}
bool
ion
:
:
BuildDominatorTree
(
MIRGraph
&
graph
)
{
if
(
graph
.
numBlocks
(
)
=
=
0
)
return
true
;
ComputeImmediateDominators
(
graph
)
;
/
/
Since
traversing
through
the
graph
in
post
-
order
means
that
every
use
/
/
of
a
definition
is
visited
before
the
def
itself
.
Since
a
def
must
/
/
dominate
all
its
uses
this
means
that
by
the
time
we
reach
a
particular
/
/
block
we
have
processed
all
of
its
dominated
children
so
/
/
block
-
>
numDominated
(
)
is
accurate
.
for
(
size_t
i
=
graph
.
numBlocks
(
)
-
1
;
i
>
0
;
i
-
-
)
{
/
/
Exclude
start
block
.
MBasicBlock
*
child
=
graph
.
getBlock
(
i
)
;
MBasicBlock
*
parent
=
child
-
>
immediateDominator
(
)
;
if
(
!
parent
-
>
addImmediatelyDominatedBlock
(
child
)
)
return
false
;
/
/
an
additional
+
1
because
of
this
child
block
.
parent
-
>
addNumDominated
(
child
-
>
numDominated
(
)
+
1
)
;
}
JS_ASSERT
(
graph
.
getBlock
(
0
)
-
>
numDominated
(
)
=
=
graph
.
numBlocks
(
)
-
1
)
;
return
true
;
}
bool
ion
:
:
BuildPhiReverseMapping
(
MIRGraph
&
graph
)
{
/
/
Build
a
mapping
such
that
given
a
basic
block
whose
successor
has
one
or
/
/
more
phis
we
can
find
our
specific
input
to
that
phi
.
To
make
this
fast
/
/
mapping
work
we
rely
on
a
specific
property
of
our
structured
control
/
/
flow
graph
:
For
a
block
with
phis
its
predecessors
each
have
only
one
/
/
successor
with
phis
.
Consider
each
case
:
/
/
*
Blocks
with
less
than
two
predecessors
cannot
have
phis
.
/
/
*
Breaks
.
A
break
always
has
exactly
one
successor
and
the
break
/
/
catch
block
has
exactly
one
predecessor
for
each
break
as
/
/
well
as
a
final
predecessor
for
the
actual
loop
exit
.
/
/
*
Continues
.
A
continue
always
has
exactly
one
successor
and
the
/
/
continue
catch
block
has
exactly
one
predecessor
for
each
/
/
continue
as
well
as
a
final
predecessor
for
the
actual
/
/
loop
continuation
.
The
continue
itself
has
exactly
one
/
/
successor
.
/
/
*
An
if
.
Each
branch
as
exactly
one
predecessor
.
/
/
*
A
switch
.
Each
branch
has
exactly
one
predecessor
.
/
/
*
Loop
tail
.
A
new
block
is
always
created
for
the
exit
and
if
a
/
/
break
statement
is
present
the
exit
block
will
forward
/
/
directly
to
the
break
block
.
for
(
size_t
i
=
0
;
i
<
graph
.
numBlocks
(
)
;
i
+
+
)
{
MBasicBlock
*
block
=
graph
.
getBlock
(
i
)
;
if
(
block
-
>
numPredecessors
(
)
<
2
)
{
JS_ASSERT
(
block
-
>
numPhis
(
)
=
=
0
)
;
continue
;
}
/
/
Assert
on
the
above
.
for
(
size_t
j
=
0
;
j
<
block
-
>
numPredecessors
(
)
;
j
+
+
)
{
MBasicBlock
*
pred
=
block
-
>
getPredecessor
(
j
)
;
#
ifdef
DEBUG
size_t
numSuccessorsWithPhis
=
0
;
for
(
size_t
k
=
0
;
k
<
pred
-
>
numSuccessors
(
)
;
k
+
+
)
{
MBasicBlock
*
successor
=
pred
-
>
getSuccessor
(
k
)
;
if
(
successor
-
>
numPhis
(
)
>
0
)
numSuccessorsWithPhis
+
+
;
}
JS_ASSERT
(
numSuccessorsWithPhis
<
=
1
)
;
#
endif
pred
-
>
setSuccessorWithPhis
(
block
j
)
;
}
}
return
true
;
}
