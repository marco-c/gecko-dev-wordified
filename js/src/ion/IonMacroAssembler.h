/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
dvander
alliedmods
.
net
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
ifndef
jsion_macro_assembler_h__
#
define
jsion_macro_assembler_h__
#
if
defined
(
JS_CPU_X86
)
#
include
"
ion
/
x86
/
MacroAssembler
-
x86
.
h
"
#
elif
defined
(
JS_CPU_X64
)
#
include
"
ion
/
x64
/
MacroAssembler
-
x64
.
h
"
#
elif
defined
(
JS_CPU_ARM
)
#
include
"
ion
/
arm
/
MacroAssembler
-
arm
.
h
"
#
endif
#
include
"
jsscope
.
h
"
namespace
js
{
namespace
ion
{
class
MacroAssembler
:
public
MacroAssemblerSpecific
{
MacroAssembler
*
thisFromCtor
(
)
{
return
this
;
}
public
:
class
AutoRooter
:
public
AutoGCRooter
{
MacroAssembler
*
masm_
;
public
:
AutoRooter
(
JSContext
*
cx
MacroAssembler
*
masm
)
:
AutoGCRooter
(
cx
IONMASM
)
masm_
(
masm
)
{
}
MacroAssembler
*
masm
(
)
const
{
return
masm_
;
}
}
;
AutoRooter
autoRooter_
;
public
:
MacroAssembler
(
)
:
autoRooter_
(
GetIonContext
(
)
-
>
cx
thisFromCtor
(
)
)
{
}
MacroAssembler
(
JSContext
*
cx
)
:
autoRooter_
(
cx
thisFromCtor
(
)
)
{
}
MoveResolver
&
moveResolver
(
)
{
return
moveResolver_
;
}
size_t
instructionsSize
(
)
const
{
return
size
(
)
;
}
/
/
Emits
a
test
of
a
value
against
all
types
in
a
TypeSet
.
A
scratch
/
/
register
is
required
.
template
<
typename
T
>
void
guardTypeSet
(
const
T
&
address
types
:
:
TypeSet
*
types
Register
scratch
Label
*
mismatched
)
;
void
loadBaseShape
(
Register
objReg
Register
dest
)
{
loadPtr
(
Address
(
objReg
JSObject
:
:
offsetOfShape
(
)
)
dest
)
;
loadPtr
(
Address
(
dest
Shape
:
:
offsetOfBase
(
)
)
dest
)
;
}
void
loadBaseShapeClass
(
Register
baseShapeReg
Register
dest
)
{
loadPtr
(
Address
(
baseShapeReg
BaseShape
:
:
offsetOfClass
(
)
)
dest
)
;
}
void
loadObjClass
(
Register
objReg
Register
dest
)
{
loadBaseShape
(
objReg
dest
)
;
loadBaseShapeClass
(
dest
dest
)
;
}
void
loadTypedOrValue
(
Address
address
TypedOrValueRegister
dest
)
{
if
(
dest
.
hasValue
(
)
)
loadValue
(
address
dest
.
valueReg
(
)
)
;
else
loadUnboxedValue
(
address
dest
.
typedReg
(
)
)
;
}
void
storeTypedOrValue
(
TypedOrValueRegister
src
Address
address
)
{
if
(
src
.
hasValue
(
)
)
storeValue
(
src
.
valueReg
(
)
address
)
;
else
if
(
src
.
type
(
)
=
=
MIRType_Double
)
storeDouble
(
src
.
typedReg
(
)
.
fpu
(
)
address
)
;
else
storeValue
(
ValueTypeFromMIRType
(
src
.
type
(
)
)
src
.
typedReg
(
)
.
gpr
(
)
address
)
;
}
void
storeConstantOrRegister
(
ConstantOrRegister
src
Address
address
)
{
if
(
src
.
constant
(
)
)
storeValue
(
src
.
value
(
)
address
)
;
else
storeTypedOrValue
(
src
.
reg
(
)
address
)
;
}
void
storeCallResult
(
AnyRegister
dest
)
{
#
if
defined
(
JS_NUNBOX32
)
unboxValue
(
ValueOperand
(
JSReturnReg_Type
JSReturnReg_Data
)
dest
)
;
#
elif
defined
(
JS_PUNBOX64
)
unboxValue
(
ValueOperand
(
JSReturnReg
)
dest
)
;
#
else
#
error
"
Bad
architecture
"
#
endif
}
void
storeCallResult
(
ValueOperand
dest
)
{
#
if
defined
(
JS_NUNBOX32
)
/
/
reshuffle
the
return
registers
used
for
a
call
result
to
store
into
/
/
dest
using
ReturnReg
as
a
scratch
register
if
necessary
.
This
must
/
/
only
be
called
after
returning
from
a
call
at
a
point
when
the
/
/
return
register
is
not
live
.
XXX
would
be
better
to
allow
wrappers
/
/
to
store
the
return
value
to
different
places
.
if
(
dest
.
typeReg
(
)
=
=
JSReturnReg_Data
)
{
if
(
dest
.
payloadReg
(
)
=
=
JSReturnReg_Type
)
{
/
/
swap
the
two
registers
.
mov
(
JSReturnReg_Type
ReturnReg
)
;
mov
(
JSReturnReg_Data
JSReturnReg_Type
)
;
mov
(
ReturnReg
JSReturnReg_Data
)
;
}
else
{
mov
(
JSReturnReg_Data
dest
.
payloadReg
(
)
)
;
mov
(
JSReturnReg_Type
dest
.
typeReg
(
)
)
;
}
}
else
{
mov
(
JSReturnReg_Type
dest
.
typeReg
(
)
)
;
mov
(
JSReturnReg_Data
dest
.
payloadReg
(
)
)
;
}
#
elif
defined
(
JS_PUNBOX64
)
if
(
dest
.
valueReg
(
)
!
=
JSReturnReg
)
movq
(
JSReturnReg
dest
.
valueReg
(
)
)
;
#
else
#
error
"
Bad
architecture
"
#
endif
}
void
storeCallResult
(
TypedOrValueRegister
dest
)
{
if
(
dest
.
hasValue
(
)
)
storeCallResult
(
dest
.
valueReg
(
)
)
;
else
storeCallResult
(
dest
.
typedReg
(
)
)
;
}
CodeOffsetLabel
labelForPatch
(
)
{
return
CodeOffsetLabel
(
size
(
)
)
;
}
void
PushRegsInMask
(
RegisterSet
set
)
;
void
PopRegsInMask
(
RegisterSet
set
)
;
using
MacroAssemblerSpecific
:
:
Push
;
void
Push
(
TypedOrValueRegister
v
)
{
if
(
v
.
hasValue
(
)
)
Push
(
v
.
valueReg
(
)
)
;
else
if
(
v
.
type
(
)
=
=
MIRType_Double
)
Push
(
v
.
typedReg
(
)
.
fpu
(
)
)
;
else
Push
(
ValueTypeFromMIRType
(
v
.
type
(
)
)
v
.
typedReg
(
)
.
gpr
(
)
)
;
}
void
Push
(
ConstantOrRegister
v
)
{
if
(
v
.
constant
(
)
)
Push
(
v
.
value
(
)
)
;
else
Push
(
v
.
reg
(
)
)
;
}
void
Push
(
const
ValueOperand
&
val
)
{
pushValue
(
val
)
;
framePushed_
+
=
sizeof
(
Value
)
;
}
void
Push
(
const
Value
&
val
)
{
pushValue
(
val
)
;
framePushed_
+
=
sizeof
(
Value
)
;
}
void
Push
(
JSValueType
type
Register
reg
)
{
pushValue
(
type
reg
)
;
framePushed_
+
=
sizeof
(
Value
)
;
}
}
;
}
/
/
namespace
ion
}
/
/
namespace
js
#
endif
/
/
jsion_macro_assembler_h__
