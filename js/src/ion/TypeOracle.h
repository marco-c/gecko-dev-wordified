/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
ifndef
js_ion_type_oracle_h__
#
define
js_ion_type_oracle_h__
#
include
"
jsscript
.
h
"
namespace
js
{
namespace
ion
{
/
/
The
ordering
of
this
enumeration
is
important
:
Anything
<
Value
is
a
/
/
specialized
type
.
Furthermore
anything
<
String
has
trivial
conversion
to
/
/
a
number
.
enum
MIRType
{
MIRType_Undefined
MIRType_Null
MIRType_Boolean
MIRType_Int32
MIRType_Double
MIRType_String
MIRType_Object
MIRType_Value
MIRType_Any
/
/
Any
type
.
MIRType_None
/
/
Invalid
used
as
a
placeholder
.
}
;
class
TypeOracle
{
public
:
struct
Binary
{
MIRType
lhs
;
MIRType
rhs
;
MIRType
rval
;
}
;
public
:
virtual
Binary
binaryOp
(
JSScript
*
script
jsbytecode
*
pc
)
=
0
;
}
;
class
DummyOracle
:
public
TypeOracle
{
public
:
Binary
binaryOp
(
JSScript
*
script
jsbytecode
*
pc
)
{
Binary
b
;
b
.
lhs
=
MIRType_Int32
;
b
.
rhs
=
MIRType_Int32
;
b
.
rval
=
MIRType_Int32
;
return
b
;
}
}
;
static
inline
JSValueType
ValueTypeFromMIRType
(
MIRType
type
)
{
switch
(
type
)
{
case
MIRType_Undefined
:
return
JSVAL_TYPE_UNDEFINED
;
case
MIRType_Null
:
return
JSVAL_TYPE_NULL
;
case
MIRType_Boolean
:
return
JSVAL_TYPE_BOOLEAN
;
case
MIRType_Int32
:
return
JSVAL_TYPE_INT32
;
case
MIRType_Double
:
return
JSVAL_TYPE_DOUBLE
;
case
MIRType_String
:
return
JSVAL_TYPE_STRING
;
default
:
JS_ASSERT
(
type
=
=
MIRType_Object
)
;
return
JSVAL_TYPE_OBJECT
;
}
}
static
inline
const
char
*
StringFromMIRType
(
MIRType
type
)
{
switch
(
type
)
{
case
MIRType_Undefined
:
return
"
Undefined
"
;
case
MIRType_Null
:
return
"
Null
"
;
case
MIRType_Boolean
:
return
"
Bool
"
;
case
MIRType_Int32
:
return
"
Int32
"
;
case
MIRType_Double
:
return
"
Double
"
;
case
MIRType_String
:
return
"
String
"
;
case
MIRType_Object
:
return
"
Object
"
;
case
MIRType_Value
:
return
"
Value
"
;
case
MIRType_Any
:
return
"
Any
"
;
case
MIRType_None
:
return
"
None
"
;
default
:
JS_NOT_REACHED
(
"
Unknown
MIRType
.
"
)
;
return
"
"
;
}
}
}
/
*
ion
*
/
}
/
*
js
*
/
#
endif
/
/
js_ion_type_oracle_h__
