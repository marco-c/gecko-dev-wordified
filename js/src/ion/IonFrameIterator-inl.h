/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
SpiderMonkey
JavaScript
(
IonMonkey
)
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Nicolas
Pierron
<
nicolas
.
b
.
pierron
mozilla
.
com
>
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
2012
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
Nicolas
B
.
Pierron
<
nicolas
.
b
.
pierron
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
or
*
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
ifndef
jsion_frame_iterator_inl_h__
#
define
jsion_frame_iterator_inl_h__
#
include
"
ion
/
IonFrameIterator
.
h
"
namespace
js
{
namespace
ion
{
template
<
class
Op
>
inline
bool
SnapshotIterator
:
:
readFrameArgs
(
Op
op
const
Value
*
argv
Value
*
scopeChain
Value
*
thisv
unsigned
start
unsigned
formalEnd
unsigned
iterEnd
)
{
if
(
scopeChain
)
*
scopeChain
=
read
(
)
;
else
skip
(
)
;
if
(
thisv
)
*
thisv
=
read
(
)
;
else
skip
(
)
;
unsigned
i
=
0
;
for
(
;
i
<
start
;
i
+
+
)
skip
(
)
;
for
(
;
i
<
formalEnd
;
i
+
+
)
{
/
/
We
are
not
always
able
to
read
values
from
the
snapshots
some
values
/
/
such
as
non
-
gc
things
may
still
be
live
in
registers
and
cause
an
/
/
error
while
reading
the
machine
state
.
Value
v
=
maybeRead
(
)
;
if
(
!
op
(
i
&
v
)
)
return
false
;
}
if
(
iterEnd
>
=
formalEnd
)
{
for
(
;
i
<
iterEnd
;
i
+
+
)
{
Value
v
=
argv
[
i
]
;
if
(
!
op
(
i
&
v
)
)
return
false
;
}
}
return
true
;
}
template
<
class
Op
>
inline
bool
InlineFrameIterator
:
:
forEachCanonicalActualArg
(
Op
op
unsigned
start
unsigned
count
)
{
unsigned
nactual
=
numActualArgs
(
)
;
if
(
count
=
=
unsigned
(
-
1
)
)
count
=
nactual
-
start
;
unsigned
end
=
start
+
count
;
JS_ASSERT
(
start
<
=
end
&
&
end
<
=
nactual
)
;
unsigned
nformal
=
callee
(
)
-
>
nargs
;
unsigned
formalEnd
=
end
;
if
(
!
more
(
)
&
&
end
>
nformal
)
{
formalEnd
=
nformal
;
}
else
{
/
/
Currently
inlining
does
not
support
overflow
of
arguments
we
have
to
/
/
add
this
feature
in
IonBuilder
.
cpp
and
in
Bailouts
.
cpp
before
/
/
continuing
.
We
need
to
add
it
to
Bailouts
.
cpp
because
we
need
to
know
/
/
how
to
walk
over
the
oveflow
of
arguments
.
JS_ASSERT
(
end
<
=
nformal
)
;
}
SnapshotIterator
s
(
si_
)
;
Value
*
argv
=
frame_
-
>
actualArgs
(
)
;
return
s
.
readFrameArgs
(
op
argv
NULL
NULL
start
formalEnd
end
)
;
}
}
/
/
namespace
ion
}
/
/
namespace
js
#
endif
/
/
jsion_frame_iterator_inl_h__
