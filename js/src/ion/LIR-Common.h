/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
4
sw
=
4
et
tw
=
79
:
*
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Mozilla
Communicator
client
code
released
*
March
31
1998
.
*
*
The
Initial
Developer
of
the
Original
Code
is
*
Netscape
Communications
Corporation
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
1998
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
David
Anderson
<
danderson
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
of
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
*
or
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
#
ifndef
jsion_lir_common_h__
#
define
jsion_lir_common_h__
#
include
"
ion
/
shared
/
Assembler
-
shared
.
h
"
/
/
This
file
declares
LIR
instructions
that
are
common
to
every
platform
.
namespace
js
{
namespace
ion
{
/
/
Used
for
jumps
from
other
blocks
.
Also
simplifies
register
allocation
since
/
/
the
first
instruction
of
a
block
is
guaranteed
to
have
no
uses
.
class
LLabel
:
public
LInstructionHelper
<
0
0
0
>
{
Label
label_
;
public
:
LIR_HEADER
(
Label
)
;
Label
*
label
(
)
{
return
&
label_
;
}
}
;
class
LNop
:
public
LInstructionHelper
<
0
0
0
>
{
public
:
LIR_HEADER
(
Nop
)
;
}
;
/
/
An
LOsiPoint
captures
a
snapshot
after
a
call
and
ensures
enough
space
to
/
/
patch
in
a
call
to
the
invalidation
mechanism
.
/
/
/
/
Note
:
LSafepoints
are
1
:
1
with
LOsiPoints
so
it
holds
a
reference
to
the
/
/
corresponding
LSafepoint
to
inform
it
of
the
LOsiPoint
'
s
masm
offset
when
it
/
/
gets
CG
'
d
.
class
LOsiPoint
:
public
LInstructionHelper
<
0
0
0
>
{
LSafepoint
*
safepoint_
;
public
:
LOsiPoint
(
LSafepoint
*
safepoint
LSnapshot
*
snapshot
)
:
safepoint_
(
safepoint
)
{
JS_ASSERT
(
safepoint
&
&
snapshot
)
;
assignSnapshot
(
snapshot
)
;
}
LSafepoint
*
associatedSafepoint
(
)
{
return
safepoint_
;
}
LIR_HEADER
(
OsiPoint
)
;
}
;
class
LMove
{
LAllocation
*
from_
;
LAllocation
*
to_
;
public
:
LMove
(
LAllocation
*
from
LAllocation
*
to
)
:
from_
(
from
)
to_
(
to
)
{
}
LAllocation
*
from
(
)
{
return
from_
;
}
const
LAllocation
*
from
(
)
const
{
return
from_
;
}
LAllocation
*
to
(
)
{
return
to_
;
}
const
LAllocation
*
to
(
)
const
{
return
to_
;
}
}
;
class
LMoveGroup
:
public
LInstructionHelper
<
0
0
0
>
{
js
:
:
Vector
<
LMove
2
IonAllocPolicy
>
moves_
;
public
:
LIR_HEADER
(
MoveGroup
)
;
void
printOperands
(
FILE
*
fp
)
;
bool
add
(
LAllocation
*
from
LAllocation
*
to
)
{
JS_ASSERT
(
*
from
!
=
*
to
)
;
return
moves_
.
append
(
LMove
(
from
to
)
)
;
}
size_t
numMoves
(
)
const
{
return
moves_
.
length
(
)
;
}
const
LMove
&
getMove
(
size_t
i
)
const
{
return
moves_
[
i
]
;
}
}
;
/
/
Constant
32
-
bit
integer
.
class
LInteger
:
public
LInstructionHelper
<
1
0
0
>
{
int32
i32_
;
public
:
LIR_HEADER
(
Integer
)
;
LInteger
(
int32
i32
)
:
i32_
(
i32
)
{
}
int32
getValue
(
)
const
{
return
i32_
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Constant
64
-
bit
gc
-
pointer
.
class
LPointer
:
public
LInstructionHelper
<
1
0
0
>
{
gc
:
:
Cell
*
ptr_
;
public
:
LIR_HEADER
(
Pointer
)
;
LPointer
(
gc
:
:
Cell
*
ptr
)
:
ptr_
(
ptr
)
{
}
gc
:
:
Cell
*
ptr
(
)
const
{
return
ptr_
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
A
constant
Value
.
class
LValue
:
public
LInstructionHelper
<
BOX_PIECES
0
0
>
{
Value
v_
;
public
:
LIR_HEADER
(
Value
)
;
LValue
(
const
Value
&
v
)
:
v_
(
v
)
{
}
Value
value
(
)
const
{
return
v_
;
}
}
;
/
/
Formal
argument
for
a
function
returning
a
box
.
Formal
arguments
are
/
/
initially
read
from
the
stack
.
class
LParameter
:
public
LInstructionHelper
<
BOX_PIECES
0
0
>
{
public
:
LIR_HEADER
(
Parameter
)
;
}
;
/
/
Stack
offset
for
a
word
-
sized
immutable
input
value
to
a
frame
.
class
LCallee
:
public
LInstructionHelper
<
1
0
0
>
{
public
:
LIR_HEADER
(
Callee
)
;
}
;
/
/
Jumps
to
the
start
of
a
basic
block
.
class
LGoto
:
public
LInstructionHelper
<
0
0
0
>
{
MBasicBlock
*
block_
;
public
:
LIR_HEADER
(
Goto
)
;
LGoto
(
MBasicBlock
*
block
)
:
block_
(
block
)
{
}
MBasicBlock
*
target
(
)
const
{
return
block_
;
}
}
;
class
LNewArray
:
public
LCallInstructionHelper
<
1
0
0
>
{
public
:
LIR_HEADER
(
NewArray
)
;
MNewArray
*
mir
(
)
const
{
return
mir_
-
>
toNewArray
(
)
;
}
}
;
class
LCheckOverRecursed
:
public
LInstructionHelper
<
0
0
1
>
{
public
:
LIR_HEADER
(
CheckOverRecursed
)
;
LCheckOverRecursed
(
const
LDefinition
&
limitreg
)
{
setTemp
(
0
limitreg
)
;
}
const
LAllocation
*
limitTemp
(
)
{
return
getTemp
(
0
)
-
>
output
(
)
;
}
}
;
/
/
Writes
an
argument
for
a
function
call
to
the
frame
'
s
argument
vector
.
class
LStackArg
:
public
LInstructionHelper
<
0
BOX_PIECES
0
>
{
uint32
argslot_
;
/
/
Index
into
frame
-
scope
argument
vector
.
public
:
LIR_HEADER
(
StackArg
)
;
LStackArg
(
uint32
argslot
)
:
argslot_
(
argslot
)
{
}
uint32
argslot
(
)
const
{
return
argslot_
;
}
}
;
/
/
Generates
a
polymorphic
callsite
wherein
the
function
being
called
is
/
/
unknown
and
anticipated
to
vary
.
class
LCallGeneric
:
public
LCallInstructionHelper
<
BOX_PIECES
1
2
>
{
/
/
Slot
below
which
%
esp
should
be
adjusted
to
make
the
call
.
/
/
Zero
for
a
function
without
arguments
.
uint32
argslot_
;
/
/
Known
single
target
.
If
unknown
or
polymorphic
then
NULL
.
JSFunction
*
target_
;
public
:
LIR_HEADER
(
CallGeneric
)
;
LCallGeneric
(
JSFunction
*
target
const
LAllocation
&
func
uint32
argslot
const
LDefinition
&
nargsreg
const
LDefinition
&
tmpobjreg
)
:
argslot_
(
argslot
)
target_
(
target
)
{
setOperand
(
0
func
)
;
setTemp
(
0
nargsreg
)
;
setTemp
(
1
tmpobjreg
)
;
}
uint32
argslot
(
)
const
{
return
argslot_
;
}
MCall
*
mir
(
)
const
{
return
mir_
-
>
toCall
(
)
;
}
uint32
nargs
(
)
const
{
JS_ASSERT
(
mir
(
)
-
>
argc
(
)
>
=
1
)
;
return
mir
(
)
-
>
argc
(
)
-
1
;
/
/
|
this
|
is
not
a
formal
argument
.
}
bool
hasSingleTarget
(
)
const
{
return
target_
!
=
NULL
;
}
JSFunction
*
getSingleTarget
(
)
const
{
JS_ASSERT
(
hasSingleTarget
(
)
)
;
return
target_
;
}
const
LAllocation
*
getFunction
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
getNargsReg
(
)
{
return
getTemp
(
0
)
-
>
output
(
)
;
}
const
LAllocation
*
getTempObject
(
)
{
return
getTemp
(
1
)
-
>
output
(
)
;
}
}
;
/
/
Generates
a
monomorphic
callsite
for
a
known
native
target
.
class
LCallNative
:
public
LCallInstructionHelper
<
BOX_PIECES
0
4
>
/
/
FIXME
:
How
many
really
?
{
JSFunction
*
function_
;
uint32
argslot_
;
public
:
LIR_HEADER
(
CallNative
)
;
LCallNative
(
JSFunction
*
function
uint32
argslot
const
LDefinition
&
argJSContext
const
LDefinition
&
argUintN
const
LDefinition
&
argVp
const
LDefinition
&
tmpreg
)
:
function_
(
function
)
argslot_
(
argslot
)
{
/
/
Registers
used
for
callWithABI
(
)
.
setTemp
(
0
argJSContext
)
;
setTemp
(
1
argUintN
)
;
setTemp
(
2
argVp
)
;
/
/
Temporary
registers
.
setTemp
(
3
tmpreg
)
;
}
JSFunction
*
function
(
)
const
{
return
function_
;
}
uint32
argslot
(
)
const
{
return
argslot_
;
}
MCall
*
mir
(
)
const
{
return
mir_
-
>
toCall
(
)
;
}
/
/
TODO
:
Common
this
out
with
LCallGeneric
.
uint32
nargs
(
)
const
{
JS_ASSERT
(
mir
(
)
-
>
argc
(
)
>
=
1
)
;
return
mir
(
)
-
>
argc
(
)
-
1
;
/
/
|
this
|
is
not
a
formal
argument
.
}
const
LAllocation
*
getArgJSContextReg
(
)
{
return
getTemp
(
0
)
-
>
output
(
)
;
}
const
LAllocation
*
getArgUintNReg
(
)
{
return
getTemp
(
1
)
-
>
output
(
)
;
}
const
LAllocation
*
getArgVpReg
(
)
{
return
getTemp
(
2
)
-
>
output
(
)
;
}
const
LAllocation
*
getTempReg
(
)
{
return
getTemp
(
3
)
-
>
output
(
)
;
}
}
;
/
/
Takes
in
either
an
integer
or
boolean
input
and
tests
it
for
truthiness
.
class
LTestIAndBranch
:
public
LInstructionHelper
<
0
1
0
>
{
MBasicBlock
*
ifTrue_
;
MBasicBlock
*
ifFalse_
;
public
:
LIR_HEADER
(
TestIAndBranch
)
;
LTestIAndBranch
(
const
LAllocation
&
in
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
:
ifTrue_
(
ifTrue
)
ifFalse_
(
ifFalse
)
{
setOperand
(
0
in
)
;
}
MBasicBlock
*
ifTrue
(
)
const
{
return
ifTrue_
;
}
MBasicBlock
*
ifFalse
(
)
const
{
return
ifFalse_
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Takes
in
either
an
integer
or
boolean
input
and
tests
it
for
truthiness
.
class
LTestDAndBranch
:
public
LInstructionHelper
<
0
1
1
>
{
MBasicBlock
*
ifTrue_
;
MBasicBlock
*
ifFalse_
;
public
:
LIR_HEADER
(
TestDAndBranch
)
;
LTestDAndBranch
(
const
LAllocation
&
in
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
:
ifTrue_
(
ifTrue
)
ifFalse_
(
ifFalse
)
{
setOperand
(
0
in
)
;
}
MBasicBlock
*
ifTrue
(
)
const
{
return
ifTrue_
;
}
MBasicBlock
*
ifFalse
(
)
const
{
return
ifFalse_
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Takes
in
a
boxed
value
and
tests
it
for
truthiness
.
class
LTestVAndBranch
:
public
LInstructionHelper
<
0
BOX_PIECES
1
>
{
MBasicBlock
*
ifTrue_
;
MBasicBlock
*
ifFalse_
;
public
:
LIR_HEADER
(
TestVAndBranch
)
;
LTestVAndBranch
(
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
const
LDefinition
&
temp
)
:
ifTrue_
(
ifTrue
)
ifFalse_
(
ifFalse
)
{
setTemp
(
0
temp
)
;
}
static
const
size_t
Input
=
0
;
const
LAllocation
*
tempFloat
(
)
{
return
getTemp
(
0
)
-
>
output
(
)
;
}
Label
*
ifTrue
(
)
;
Label
*
ifFalse
(
)
;
}
;
/
/
Compares
two
integral
values
of
the
same
JS
type
either
integer
or
object
.
/
/
For
objects
both
operands
are
in
registers
.
class
LCompare
:
public
LInstructionHelper
<
1
2
0
>
{
JSOp
jsop_
;
public
:
LIR_HEADER
(
Compare
)
;
LCompare
(
JSOp
jsop
const
LAllocation
&
left
const
LAllocation
&
right
)
:
jsop_
(
jsop
)
{
setOperand
(
0
left
)
;
setOperand
(
1
right
)
;
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
const
LAllocation
*
left
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
right
(
)
{
return
getOperand
(
1
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
MCompare
*
mir
(
)
{
return
mir_
-
>
toCompare
(
)
;
}
}
;
class
LCompareD
:
public
LInstructionHelper
<
1
2
0
>
{
JSOp
jsop_
;
public
:
LIR_HEADER
(
CompareD
)
;
LCompareD
(
JSOp
jsop
const
LAllocation
&
left
const
LAllocation
&
right
)
:
jsop_
(
jsop
)
{
setOperand
(
0
left
)
;
setOperand
(
1
right
)
;
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
const
LAllocation
*
left
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
right
(
)
{
return
getOperand
(
1
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
class
LCompareV
:
public
LCallInstructionHelper
<
1
2
*
BOX_PIECES
0
>
{
JSOp
jsop_
;
public
:
LIR_HEADER
(
CompareV
)
;
LCompareV
(
JSOp
jsop
)
:
jsop_
(
jsop
)
{
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
static
const
size_t
LhsInput
=
0
;
static
const
size_t
RhsInput
=
BOX_PIECES
;
}
;
/
/
Compares
two
integral
values
of
the
same
JS
type
either
integer
or
object
.
/
/
For
objects
both
operands
are
in
registers
.
class
LCompareAndBranch
:
public
LInstructionHelper
<
0
2
0
>
{
JSOp
jsop_
;
MBasicBlock
*
ifTrue_
;
MBasicBlock
*
ifFalse_
;
public
:
LIR_HEADER
(
CompareAndBranch
)
;
LCompareAndBranch
(
MCompare
*
mir
JSOp
jsop
const
LAllocation
&
left
const
LAllocation
&
right
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
:
jsop_
(
jsop
)
ifTrue_
(
ifTrue
)
ifFalse_
(
ifFalse
)
{
mir_
=
mir
;
setOperand
(
0
left
)
;
setOperand
(
1
right
)
;
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
MBasicBlock
*
ifTrue
(
)
const
{
return
ifTrue_
;
}
MBasicBlock
*
ifFalse
(
)
const
{
return
ifFalse_
;
}
const
LAllocation
*
left
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
right
(
)
{
return
getOperand
(
1
)
;
}
MCompare
*
mir
(
)
{
return
mir_
-
>
toCompare
(
)
;
}
}
;
class
LCompareDAndBranch
:
public
LInstructionHelper
<
0
2
0
>
{
JSOp
jsop_
;
MBasicBlock
*
ifTrue_
;
MBasicBlock
*
ifFalse_
;
public
:
LIR_HEADER
(
CompareDAndBranch
)
;
LCompareDAndBranch
(
JSOp
jsop
const
LAllocation
&
left
const
LAllocation
&
right
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
:
jsop_
(
jsop
)
ifTrue_
(
ifTrue
)
ifFalse_
(
ifFalse
)
{
setOperand
(
0
left
)
;
setOperand
(
1
right
)
;
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
MBasicBlock
*
ifTrue
(
)
const
{
return
ifTrue_
;
}
MBasicBlock
*
ifFalse
(
)
const
{
return
ifFalse_
;
}
const
LAllocation
*
left
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
right
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Bitwise
not
operation
takes
a
32
-
bit
integer
as
input
and
returning
/
/
a
32
-
bit
integer
result
as
an
output
.
class
LBitNotI
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
BitNotI
)
;
}
;
/
/
Call
a
stub
to
perform
a
binary
operation
.
class
LBitNotV
:
public
LCallInstructionHelper
<
1
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
BitNotV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
static
const
size_t
Input
=
0
;
}
;
/
/
Binary
bitwise
operation
taking
two
32
-
bit
integers
as
inputs
and
returning
/
/
a
32
-
bit
integer
result
as
an
output
.
class
LBitOp
:
public
LInstructionHelper
<
1
2
0
>
{
JSOp
op_
;
public
:
LIR_HEADER
(
BitOp
)
;
LBitOp
(
JSOp
op
)
:
op_
(
op
)
{
}
JSOp
bitop
(
)
{
return
op_
;
}
}
;
/
/
Shift
operation
taking
two
32
-
bit
integers
as
inputs
and
returning
/
/
a
32
-
bit
integer
result
as
an
output
.
class
LShiftOp
:
public
LInstructionHelper
<
1
2
0
>
{
JSOp
op_
;
public
:
LIR_HEADER
(
ShiftOp
)
;
LShiftOp
(
JSOp
op
)
:
op_
(
op
)
{
}
JSOp
bitop
(
)
{
return
op_
;
}
MInstruction
*
mir
(
)
{
return
mir_
-
>
toInstruction
(
)
;
}
}
;
/
/
Returns
from
the
function
being
compiled
(
not
used
in
inlined
frames
)
.
The
/
/
input
must
be
a
box
.
class
LReturn
:
public
LInstructionHelper
<
0
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
Return
)
;
}
;
class
LThrow
:
public
LCallInstructionHelper
<
0
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
Throw
)
;
static
const
size_t
Value
=
0
;
}
;
template
<
size_t
Temps
size_t
ExtraUses
=
0
>
class
LBinaryMath
:
public
LInstructionHelper
<
1
2
+
ExtraUses
Temps
>
{
public
:
const
LAllocation
*
lhs
(
)
{
return
this
-
>
getOperand
(
0
)
;
}
const
LAllocation
*
rhs
(
)
{
return
this
-
>
getOperand
(
1
)
;
}
const
LDefinition
*
output
(
)
{
return
this
-
>
getDef
(
0
)
;
}
}
;
/
/
Absolute
value
of
an
integer
.
class
LAbsI
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
AbsI
)
;
LAbsI
(
const
LAllocation
&
num
)
{
setOperand
(
0
num
)
;
}
const
LAllocation
*
input
(
)
{
return
this
-
>
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
this
-
>
getDef
(
0
)
;
}
}
;
/
/
Absolute
value
of
an
integer
.
class
LAbsD
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
AbsD
)
;
LAbsD
(
const
LAllocation
&
num
)
{
setOperand
(
0
num
)
;
}
const
LAllocation
*
input
(
)
{
return
this
-
>
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
this
-
>
getDef
(
0
)
;
}
}
;
/
/
Adds
two
integers
returning
an
integer
value
.
class
LAddI
:
public
LBinaryMath
<
0
>
{
public
:
LIR_HEADER
(
AddI
)
;
}
;
/
/
Subtracts
two
integers
returning
an
integer
value
.
class
LSubI
:
public
LBinaryMath
<
0
>
{
public
:
LIR_HEADER
(
SubI
)
;
}
;
/
/
Performs
an
add
sub
mul
or
div
on
two
double
values
.
class
LMathD
:
public
LBinaryMath
<
0
>
{
JSOp
jsop_
;
public
:
LIR_HEADER
(
MathD
)
;
LMathD
(
JSOp
jsop
)
:
jsop_
(
jsop
)
{
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
}
;
/
/
Call
a
stub
to
perform
a
binary
operation
.
class
LBinaryV
:
public
LCallInstructionHelper
<
BOX_PIECES
2
*
BOX_PIECES
0
>
{
JSOp
jsop_
;
public
:
LIR_HEADER
(
BinaryV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LBinaryV
(
JSOp
jsop
)
:
jsop_
(
jsop
)
{
}
JSOp
jsop
(
)
const
{
return
jsop_
;
}
static
const
size_t
LhsInput
=
0
;
static
const
size_t
RhsInput
=
BOX_PIECES
;
}
;
/
/
Adds
two
string
returning
a
string
.
class
LConcat
:
public
LCallInstructionHelper
<
1
2
0
>
{
public
:
LIR_HEADER
(
Concat
)
;
LConcat
(
const
LAllocation
&
lhs
const
LAllocation
&
rhs
)
{
setOperand
(
0
lhs
)
;
setOperand
(
1
rhs
)
;
}
const
LAllocation
*
lhs
(
)
{
return
this
-
>
getOperand
(
0
)
;
}
const
LAllocation
*
rhs
(
)
{
return
this
-
>
getOperand
(
1
)
;
}
const
LDefinition
*
output
(
)
{
return
this
-
>
getDef
(
0
)
;
}
}
;
/
/
Convert
a
32
-
bit
integer
to
a
double
.
class
LInt32ToDouble
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
Int32ToDouble
)
;
LInt32ToDouble
(
const
LAllocation
&
input
)
{
setOperand
(
0
input
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Convert
a
value
to
a
double
.
class
LValueToDouble
:
public
LInstructionHelper
<
1
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
ValueToDouble
)
;
static
const
size_t
Input
=
0
;
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Convert
a
value
to
an
int32
.
/
/
Input
:
components
of
a
Value
/
/
Output
:
32
-
bit
integer
/
/
Bailout
:
undefined
string
object
or
non
-
int32
double
/
/
Temps
:
one
float
register
/
/
/
/
This
instruction
requires
a
temporary
float
register
.
class
LValueToInt32
:
public
LInstructionHelper
<
1
BOX_PIECES
1
>
{
public
:
enum
Mode
{
NORMAL
TRUNCATE
}
;
private
:
Mode
mode_
;
public
:
LIR_HEADER
(
ValueToInt32
)
;
LValueToInt32
(
const
LDefinition
&
temp
Mode
mode
)
:
mode_
(
mode
)
{
setTemp
(
0
temp
)
;
}
static
const
size_t
Input
=
0
;
Mode
mode
(
)
const
{
return
mode_
;
}
const
LDefinition
*
tempFloat
(
)
{
return
getTemp
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Convert
a
double
to
an
int32
.
/
/
Input
:
floating
-
point
register
/
/
Output
:
32
-
bit
integer
/
/
Bailout
:
if
the
double
cannot
be
converted
to
an
integer
.
class
LDoubleToInt32
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
DoubleToInt32
)
;
LDoubleToInt32
(
const
LAllocation
&
in
)
{
setOperand
(
0
in
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Convert
a
double
to
a
truncated
int32
.
/
/
Input
:
floating
-
point
register
/
/
Output
:
32
-
bit
integer
/
/
Bailout
:
edge
cases
of
js_DoubleToECMAInt32
class
LTruncateDToInt32
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
TruncateDToInt32
)
;
LTruncateDToInt32
(
const
LAllocation
&
in
)
{
setOperand
(
0
in
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Convert
a
any
input
type
hosted
on
one
definition
to
a
string
with
a
function
/
/
call
.
class
LIntToString
:
public
LCallInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
IntToString
)
;
LIntToString
(
const
LAllocation
&
input
)
{
setOperand
(
0
input
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
const
MToString
*
mir
(
)
{
return
mir_
-
>
toToString
(
)
;
}
}
;
/
/
No
-
op
instruction
that
is
used
to
hold
the
entry
snapshot
.
This
simplifies
/
/
register
allocation
as
it
doesn
'
t
need
to
sniff
the
snapshot
out
of
the
/
/
LIRGraph
.
class
LStart
:
public
LInstructionHelper
<
0
0
0
>
{
public
:
LIR_HEADER
(
Start
)
;
}
;
/
/
Passed
the
StackFrame
address
in
the
OsrFrameReg
by
SideCannon
(
)
.
/
/
Forwards
this
object
to
the
LOsrValues
for
Value
materialization
.
class
LOsrEntry
:
public
LInstructionHelper
<
1
0
0
>
{
protected
:
Label
label_
;
uint32
frameDepth_
;
public
:
LIR_HEADER
(
OsrEntry
)
;
LOsrEntry
(
)
:
frameDepth_
(
0
)
{
}
void
setFrameDepth
(
uint32
depth
)
{
frameDepth_
=
depth
;
}
uint32
getFrameDepth
(
)
{
return
frameDepth_
;
}
Label
*
label
(
)
{
return
&
label_
;
}
}
;
/
/
Materialize
a
Value
stored
in
an
interpreter
frame
for
OSR
.
class
LOsrValue
:
public
LInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
OsrValue
)
;
LOsrValue
(
const
LAllocation
&
entry
)
{
setOperand
(
0
entry
)
;
}
const
MOsrValue
*
mir
(
)
{
return
mir_
-
>
toOsrValue
(
)
;
}
}
;
/
/
Materialize
a
JSObject
scope
chain
stored
in
an
interpreter
frame
for
OSR
.
class
LOsrScopeChain
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
OsrScopeChain
)
;
LOsrScopeChain
(
const
LAllocation
&
entry
)
{
setOperand
(
0
entry
)
;
}
const
MOsrScopeChain
*
mir
(
)
{
return
mir_
-
>
toOsrScopeChain
(
)
;
}
}
;
class
LRegExp
:
public
LCallInstructionHelper
<
1
0
0
>
{
public
:
LIR_HEADER
(
RegExp
)
;
const
MRegExp
*
mir
(
)
const
{
return
mir_
-
>
toRegExp
(
)
;
}
}
;
/
/
Determines
the
implicit
|
this
|
value
for
function
calls
.
class
LImplicitThis
:
public
LInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
ImplicitThis
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LImplicitThis
(
const
LAllocation
&
callee
)
{
setOperand
(
0
callee
)
;
}
const
MImplicitThis
*
mir
(
)
const
{
return
mir_
-
>
toImplicitThis
(
)
;
}
const
LAllocation
*
callee
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Load
the
"
slots
"
member
out
of
a
JSObject
.
/
/
Input
:
JSObject
pointer
/
/
Output
:
slots
pointer
class
LSlots
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
Slots
)
;
LSlots
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
LAllocation
*
object
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Load
the
"
elements
"
member
out
of
a
JSObject
.
/
/
Input
:
JSObject
pointer
/
/
Output
:
elements
pointer
class
LElements
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
Elements
)
;
LElements
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
LAllocation
*
object
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Load
a
dense
array
'
s
initialized
length
from
an
elements
vector
.
class
LInitializedLength
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
InitializedLength
)
;
LInitializedLength
(
const
LAllocation
&
elements
)
{
setOperand
(
0
elements
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Read
length
field
of
an
object
element
.
class
LArrayLength
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
ArrayLength
)
;
LArrayLength
(
const
LAllocation
&
elements
)
{
setOperand
(
0
elements
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Bailout
if
index
>
=
length
.
class
LBoundsCheck
:
public
LInstructionHelper
<
0
2
0
>
{
public
:
LIR_HEADER
(
BoundsCheck
)
;
LBoundsCheck
(
const
LAllocation
&
index
const
LAllocation
&
length
)
{
setOperand
(
0
index
)
;
setOperand
(
1
length
)
;
}
const
MBoundsCheck
*
mir
(
)
const
{
return
mir_
-
>
toBoundsCheck
(
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
length
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Bailout
if
index
+
minimum
<
0
or
index
+
maximum
>
=
length
.
class
LBoundsCheckRange
:
public
LInstructionHelper
<
0
2
1
>
{
public
:
LIR_HEADER
(
BoundsCheckRange
)
;
LBoundsCheckRange
(
const
LAllocation
&
index
const
LAllocation
&
length
const
LDefinition
&
temp
)
{
setOperand
(
0
index
)
;
setOperand
(
1
length
)
;
setTemp
(
0
temp
)
;
}
const
MBoundsCheck
*
mir
(
)
const
{
return
mir_
-
>
toBoundsCheck
(
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
length
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Bailout
if
index
<
minimum
.
class
LBoundsCheckLower
:
public
LInstructionHelper
<
0
1
0
>
{
public
:
LIR_HEADER
(
BoundsCheckLower
)
;
LBoundsCheckLower
(
const
LAllocation
&
index
)
{
setOperand
(
0
index
)
;
}
MBoundsCheckLower
*
mir
(
)
const
{
return
mir_
-
>
toBoundsCheckLower
(
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Load
a
value
from
a
dense
array
'
s
elements
vector
.
Bail
out
if
it
'
s
the
hole
value
.
class
LLoadElementV
:
public
LInstructionHelper
<
BOX_PIECES
2
0
>
{
public
:
LIR_HEADER
(
LoadElementV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LLoadElementV
(
const
LAllocation
&
elements
const
LAllocation
&
index
)
{
setOperand
(
0
elements
)
;
setOperand
(
1
index
)
;
}
const
MLoadElement
*
mir
(
)
const
{
return
mir_
-
>
toLoadElement
(
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Load
a
value
from
a
dense
array
'
s
elements
vector
.
Bail
out
if
it
'
s
the
hole
value
.
class
LLoadElementHole
:
public
LInstructionHelper
<
BOX_PIECES
3
0
>
{
public
:
LIR_HEADER
(
LoadElementHole
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LLoadElementHole
(
const
LAllocation
&
elements
const
LAllocation
&
index
const
LAllocation
&
initLength
)
{
setOperand
(
0
elements
)
;
setOperand
(
1
index
)
;
setOperand
(
2
initLength
)
;
}
const
MLoadElementHole
*
mir
(
)
const
{
return
mir_
-
>
toLoadElementHole
(
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
1
)
;
}
const
LAllocation
*
initLength
(
)
{
return
getOperand
(
2
)
;
}
}
;
/
/
Load
a
typed
value
from
a
dense
array
'
s
elements
vector
.
The
array
must
be
/
/
known
to
be
packed
so
that
we
don
'
t
have
to
check
for
the
hole
value
.
/
/
This
instruction
does
not
load
the
type
tag
and
can
directly
load
into
a
/
/
FP
register
.
class
LLoadElementT
:
public
LInstructionHelper
<
1
2
0
>
{
public
:
LIR_HEADER
(
LoadElementT
)
;
LLoadElementT
(
const
LAllocation
&
elements
const
LAllocation
&
index
)
{
setOperand
(
0
elements
)
;
setOperand
(
1
index
)
;
}
const
MLoadElement
*
mir
(
)
const
{
return
mir_
-
>
toLoadElement
(
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
1
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Store
a
boxed
value
to
a
dense
array
'
s
element
vector
.
class
LStoreElementV
:
public
LInstructionHelper
<
0
2
+
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
StoreElementV
)
;
LStoreElementV
(
const
LAllocation
&
elements
const
LAllocation
&
index
)
{
setOperand
(
0
elements
)
;
setOperand
(
1
index
)
;
}
static
const
size_t
Value
=
2
;
const
MStoreElement
*
mir
(
)
const
{
return
mir_
-
>
toStoreElement
(
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Store
a
typed
value
to
a
dense
array
'
s
elements
vector
.
Compared
to
/
/
LStoreElementV
this
instruction
can
store
doubles
and
constants
directly
/
/
and
does
not
store
the
type
tag
if
the
array
is
monomorphic
and
known
to
/
/
be
packed
.
class
LStoreElementT
:
public
LInstructionHelper
<
0
3
0
>
{
public
:
LIR_HEADER
(
StoreElementT
)
;
LStoreElementT
(
const
LAllocation
&
elements
const
LAllocation
&
index
const
LAllocation
&
value
)
{
setOperand
(
0
elements
)
;
setOperand
(
1
index
)
;
setOperand
(
2
value
)
;
}
const
MStoreElement
*
mir
(
)
const
{
return
mir_
-
>
toStoreElement
(
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
1
)
;
}
const
LAllocation
*
value
(
)
{
return
getOperand
(
2
)
;
}
}
;
/
/
Like
LStoreElementV
but
supports
indexes
>
=
initialized
length
.
class
LStoreElementHoleV
:
public
LInstructionHelper
<
0
3
+
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
StoreElementHoleV
)
;
LStoreElementHoleV
(
const
LAllocation
&
object
const
LAllocation
&
elements
const
LAllocation
&
index
)
{
setOperand
(
0
object
)
;
setOperand
(
1
elements
)
;
setOperand
(
2
index
)
;
}
static
const
size_t
Value
=
3
;
const
MStoreElementHole
*
mir
(
)
const
{
return
mir_
-
>
toStoreElementHole
(
)
;
}
const
LAllocation
*
object
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
1
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
2
)
;
}
}
;
/
/
Like
LStoreElementT
but
supports
indexes
>
=
initialized
length
.
class
LStoreElementHoleT
:
public
LInstructionHelper
<
0
4
0
>
{
public
:
LIR_HEADER
(
StoreElementHoleT
)
;
LStoreElementHoleT
(
const
LAllocation
&
object
const
LAllocation
&
elements
const
LAllocation
&
index
const
LAllocation
&
value
)
{
setOperand
(
0
object
)
;
setOperand
(
1
elements
)
;
setOperand
(
2
index
)
;
setOperand
(
3
value
)
;
}
const
MStoreElementHole
*
mir
(
)
const
{
return
mir_
-
>
toStoreElementHole
(
)
;
}
const
LAllocation
*
object
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
elements
(
)
{
return
getOperand
(
1
)
;
}
const
LAllocation
*
index
(
)
{
return
getOperand
(
2
)
;
}
const
LAllocation
*
value
(
)
{
return
getOperand
(
3
)
;
}
}
;
/
/
Load
a
boxed
value
from
an
object
'
s
fixed
slot
.
class
LLoadFixedSlotV
:
public
LInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
LoadFixedSlotV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LLoadFixedSlotV
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
MLoadFixedSlot
*
mir
(
)
const
{
return
mir_
-
>
toLoadFixedSlot
(
)
;
}
}
;
/
/
Load
a
typed
value
from
an
object
'
s
fixed
slot
.
class
LLoadFixedSlotT
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
LoadFixedSlotT
)
;
LLoadFixedSlotT
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
MLoadFixedSlot
*
mir
(
)
const
{
return
mir_
-
>
toLoadFixedSlot
(
)
;
}
}
;
/
/
Store
a
boxed
value
to
an
object
'
s
fixed
slot
.
class
LStoreFixedSlotV
:
public
LInstructionHelper
<
0
1
+
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
StoreFixedSlotV
)
;
LStoreFixedSlotV
(
const
LAllocation
&
obj
)
{
setOperand
(
0
obj
)
;
}
static
const
size_t
Value
=
1
;
const
MStoreFixedSlot
*
mir
(
)
const
{
return
mir_
-
>
toStoreFixedSlot
(
)
;
}
const
LAllocation
*
obj
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Store
a
typed
value
to
an
object
'
s
fixed
slot
.
class
LStoreFixedSlotT
:
public
LInstructionHelper
<
0
2
0
>
{
public
:
LIR_HEADER
(
StoreFixedSlotT
)
;
LStoreFixedSlotT
(
const
LAllocation
&
obj
const
LAllocation
&
value
)
{
setOperand
(
0
obj
)
;
setOperand
(
1
value
)
;
}
const
MStoreFixedSlot
*
mir
(
)
const
{
return
mir_
-
>
toStoreFixedSlot
(
)
;
}
const
LAllocation
*
obj
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
value
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Patchable
jump
to
stubs
generated
for
a
GetProperty
cache
which
loads
a
/
/
boxed
value
.
class
LGetPropertyCacheV
:
public
LInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
GetPropertyCacheV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LGetPropertyCacheV
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
MGetPropertyCache
*
mir
(
)
const
{
return
mir_
-
>
toGetPropertyCache
(
)
;
}
}
;
/
/
Patchable
jump
to
stubs
generated
for
a
GetProperty
cache
which
loads
a
/
/
value
of
a
known
type
possibly
into
an
FP
register
.
class
LGetPropertyCacheT
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
GetPropertyCacheT
)
;
LGetPropertyCacheT
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
const
MGetPropertyCache
*
mir
(
)
const
{
return
mir_
-
>
toGetPropertyCache
(
)
;
}
}
;
/
/
Load
a
value
from
an
object
'
s
dslots
or
a
slots
vector
.
class
LLoadSlotV
:
public
LInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
LoadSlotV
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LLoadSlotV
(
const
LAllocation
&
in
)
{
setOperand
(
0
in
)
;
}
const
MLoadSlot
*
mir
(
)
const
{
return
mir_
-
>
toLoadSlot
(
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Load
a
typed
value
from
an
object
'
s
dslots
or
a
slots
vector
.
Unlike
/
/
LLoadSlotV
this
can
bypass
extracting
a
type
tag
directly
retrieving
a
/
/
pointer
integer
or
double
.
class
LLoadSlotT
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
LoadSlotT
)
;
LLoadSlotT
(
const
LAllocation
&
in
)
{
setOperand
(
0
in
)
;
}
const
MLoadSlot
*
mir
(
)
const
{
return
mir_
-
>
toLoadSlot
(
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Store
a
value
to
an
object
'
s
dslots
or
a
slots
vector
.
class
LStoreSlotV
:
public
LInstructionHelper
<
0
1
+
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
StoreSlotV
)
;
LStoreSlotV
(
const
LAllocation
&
slots
)
{
setOperand
(
0
slots
)
;
}
static
const
size_t
Value
=
1
;
const
MStoreSlot
*
mir
(
)
const
{
return
mir_
-
>
toStoreSlot
(
)
;
}
const
LAllocation
*
slots
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Store
a
typed
value
to
an
object
'
s
dslots
or
a
slots
vector
.
This
has
a
/
/
few
advantages
over
LStoreSlotV
:
/
/
1
)
We
can
bypass
storing
the
type
tag
if
the
slot
has
the
same
type
as
/
/
the
value
.
/
/
2
)
Better
register
allocation
:
we
can
store
constants
and
FP
regs
directly
/
/
without
requiring
a
second
register
for
the
value
.
class
LStoreSlotT
:
public
LInstructionHelper
<
0
2
0
>
{
public
:
LIR_HEADER
(
StoreSlotT
)
;
LStoreSlotT
(
const
LAllocation
&
slots
const
LAllocation
&
value
)
{
setOperand
(
0
slots
)
;
setOperand
(
1
value
)
;
}
const
MStoreSlot
*
mir
(
)
const
{
return
mir_
-
>
toStoreSlot
(
)
;
}
const
LAllocation
*
slots
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
value
(
)
{
return
getOperand
(
1
)
;
}
}
;
/
/
Read
length
field
of
a
JSString
*
.
class
LStringLength
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
StringLength
)
;
LStringLength
(
const
LAllocation
&
string
)
{
setOperand
(
0
string
)
;
}
const
LAllocation
*
string
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
/
/
Round
/
Floor
a
number
.
class
LRound
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
Round
)
;
LRound
(
const
LAllocation
&
num
)
{
setOperand
(
0
num
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
MRound
*
mir
(
)
const
{
return
mir_
-
>
toRound
(
)
;
}
}
;
/
/
Load
a
function
'
s
call
environment
.
class
LFunctionEnvironment
:
public
LInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
FunctionEnvironment
)
;
LFunctionEnvironment
(
const
LAllocation
&
function
)
{
setOperand
(
0
function
)
;
}
const
LAllocation
*
function
(
)
{
return
getOperand
(
0
)
;
}
const
LDefinition
*
output
(
)
{
return
getDef
(
0
)
;
}
}
;
class
LCallGetPropertyOrName
:
public
LCallInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
MCallGetPropertyOrName
*
mir
(
)
const
{
return
static_cast
<
MCallGetPropertyOrName
*
>
(
mir_
)
;
}
}
;
class
LCallGetProperty
:
public
LCallGetPropertyOrName
{
public
:
LIR_HEADER
(
CallGetProperty
)
;
}
;
class
LCallGetName
:
public
LCallGetPropertyOrName
{
public
:
LIR_HEADER
(
CallGetName
)
;
}
;
class
LCallGetNameTypeOf
:
public
LCallGetPropertyOrName
{
public
:
LIR_HEADER
(
CallGetNameTypeOf
)
;
}
;
/
/
Call
a
js
:
:
GetElement
stub
.
class
LCallGetElement
:
public
LCallInstructionHelper
<
BOX_PIECES
2
*
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
CallGetElement
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
static
const
size_t
LhsInput
=
0
;
static
const
size_t
RhsInput
=
BOX_PIECES
;
}
;
/
/
Call
a
js
:
:
SetElement
stub
.
class
LCallSetElement
:
public
LCallInstructionHelper
<
0
1
+
2
*
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
CallSetElement
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
static
const
size_t
Index
=
1
;
static
const
size_t
Value
=
1
+
BOX_PIECES
;
}
;
/
/
Call
a
stub
to
perform
a
property
or
name
assignment
of
a
generic
value
.
class
LCallSetProperty
:
public
LCallInstructionHelper
<
0
1
+
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
CallSetProperty
)
;
LCallSetProperty
(
const
LAllocation
&
obj
)
{
setOperand
(
0
obj
)
;
}
static
const
size_t
Value
=
1
;
const
MCallSetProperty
*
mir
(
)
const
{
return
mir_
-
>
toCallSetProperty
(
)
;
}
}
;
/
/
Patchable
jump
to
stubs
generated
for
a
SetProperty
cache
which
stores
a
/
/
boxed
value
.
class
LSetPropertyCacheV
:
public
LInstructionHelper
<
0
1
+
BOX_PIECES
1
>
{
public
:
LIR_HEADER
(
SetPropertyCacheV
)
;
LSetPropertyCacheV
(
const
LAllocation
&
object
const
LDefinition
&
slots
)
{
setOperand
(
0
object
)
;
setTemp
(
0
slots
)
;
}
static
const
size_t
Value
=
1
;
const
MSetPropertyCache
*
mir
(
)
const
{
return
mir_
-
>
toSetPropertyCache
(
)
;
}
}
;
/
/
Patchable
jump
to
stubs
generated
for
a
SetProperty
cache
which
stores
a
/
/
value
of
a
known
type
.
class
LSetPropertyCacheT
:
public
LInstructionHelper
<
0
2
1
>
{
MIRType
valueType_
;
public
:
LIR_HEADER
(
SetPropertyCacheT
)
;
LSetPropertyCacheT
(
const
LAllocation
&
object
const
LDefinition
&
slots
const
LAllocation
&
value
MIRType
valueType
)
:
valueType_
(
valueType
)
{
setOperand
(
0
object
)
;
setOperand
(
1
value
)
;
setTemp
(
0
slots
)
;
}
const
MSetPropertyCache
*
mir
(
)
const
{
return
mir_
-
>
toSetPropertyCache
(
)
;
}
MIRType
valueType
(
)
{
return
valueType_
;
}
}
;
class
LCallIteratorStart
:
public
LCallInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
CallIteratorStart
)
;
LCallIteratorStart
(
const
LAllocation
&
object
)
{
setOperand
(
0
object
)
;
}
MIteratorStart
*
mir
(
)
const
{
return
mir_
-
>
toIteratorStart
(
)
;
}
}
;
class
LCallIteratorNext
:
public
LCallInstructionHelper
<
BOX_PIECES
1
0
>
{
public
:
LIR_HEADER
(
CallIteratorNext
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LCallIteratorNext
(
const
LAllocation
&
iterator
)
{
setOperand
(
0
iterator
)
;
}
MIteratorNext
*
mir
(
)
const
{
return
mir_
-
>
toIteratorNext
(
)
;
}
}
;
class
LCallIteratorMore
:
public
LCallInstructionHelper
<
1
1
0
>
{
public
:
LIR_HEADER
(
CallIteratorMore
)
;
LCallIteratorMore
(
const
LAllocation
&
iterator
)
{
setOperand
(
0
iterator
)
;
}
MIteratorMore
*
mir
(
)
const
{
return
mir_
-
>
toIteratorMore
(
)
;
}
}
;
class
LCallIteratorEnd
:
public
LCallInstructionHelper
<
0
1
0
>
{
public
:
LIR_HEADER
(
CallIteratorEnd
)
;
LCallIteratorEnd
(
const
LAllocation
&
iterator
)
{
setOperand
(
0
iterator
)
;
}
MIteratorEnd
*
mir
(
)
const
{
return
mir_
-
>
toIteratorEnd
(
)
;
}
}
;
/
/
Mark
a
Value
if
it
is
a
GCThing
.
class
LWriteBarrierV
:
public
LInstructionHelper
<
0
BOX_PIECES
0
>
{
public
:
LIR_HEADER
(
WriteBarrierV
)
;
LWriteBarrierV
(
)
{
}
static
const
size_t
Input
=
0
;
}
;
/
/
Mark
a
GCThing
.
class
LWriteBarrierT
:
public
LInstructionHelper
<
0
1
0
>
{
public
:
LIR_HEADER
(
WriteBarrierT
)
;
LWriteBarrierT
(
const
LAllocation
&
value
)
{
setOperand
(
0
value
)
;
}
const
LAllocation
*
value
(
)
{
return
getOperand
(
0
)
;
}
}
;
/
/
Guard
that
a
value
is
in
a
TypeSet
.
class
LTypeBarrier
:
public
LInstructionHelper
<
BOX_PIECES
BOX_PIECES
1
>
{
public
:
LIR_HEADER
(
TypeBarrier
)
;
BOX_OUTPUT_ACCESSORS
(
)
;
LTypeBarrier
(
const
LDefinition
&
temp
)
{
setTemp
(
0
temp
)
;
}
static
const
size_t
Input
=
0
;
const
MTypeBarrier
*
mir
(
)
const
{
return
mir_
-
>
toTypeBarrier
(
)
;
}
const
LDefinition
*
temp
(
)
{
return
getTemp
(
0
)
;
}
}
;
/
/
Guard
against
an
object
'
s
class
.
class
LGuardClass
:
public
LInstructionHelper
<
0
1
1
>
{
public
:
LIR_HEADER
(
GuardClass
)
;
LGuardClass
(
const
LAllocation
&
in
const
LDefinition
&
temp
)
{
setOperand
(
0
in
)
;
setTemp
(
0
temp
)
;
}
const
MGuardClass
*
mir
(
)
const
{
return
mir_
-
>
toGuardClass
(
)
;
}
const
LAllocation
*
input
(
)
{
return
getOperand
(
0
)
;
}
const
LAllocation
*
tempInt
(
)
{
return
getTemp
(
0
)
-
>
output
(
)
;
}
}
;
class
MPhi
;
/
/
Phi
is
a
pseudo
-
instruction
that
emits
no
code
and
is
an
annotation
for
the
/
/
register
allocator
.
Like
its
equivalent
in
MIR
phis
are
collected
at
the
/
/
top
of
blocks
and
are
meant
to
be
executed
in
parallel
choosing
the
input
/
/
corresponding
to
the
predecessor
taken
in
the
control
flow
graph
.
class
LPhi
:
public
LInstruction
{
uint32
numInputs_
;
LAllocation
*
inputs_
;
LDefinition
def_
;
bool
init
(
MIRGenerator
*
gen
)
;
LPhi
(
MPhi
*
mir
)
;
public
:
LIR_HEADER
(
Phi
)
;
static
LPhi
*
New
(
MIRGenerator
*
gen
MPhi
*
phi
)
;
size_t
numDefs
(
)
const
{
return
1
;
}
LDefinition
*
getDef
(
size_t
index
)
{
JS_ASSERT
(
index
=
=
0
)
;
return
&
def_
;
}
void
setDef
(
size_t
index
const
LDefinition
&
def
)
{
JS_ASSERT
(
index
=
=
0
)
;
def_
=
def
;
}
size_t
numOperands
(
)
const
{
return
numInputs_
;
}
LAllocation
*
getOperand
(
size_t
index
)
{
JS_ASSERT
(
index
<
numOperands
(
)
)
;
return
&
inputs_
[
index
]
;
}
void
setOperand
(
size_t
index
const
LAllocation
&
a
)
{
JS_ASSERT
(
index
<
numOperands
(
)
)
;
inputs_
[
index
]
=
a
;
}
size_t
numTemps
(
)
const
{
return
0
;
}
LDefinition
*
getTemp
(
size_t
index
)
{
JS_NOT_REACHED
(
"
no
temps
"
)
;
return
NULL
;
}
void
setTemp
(
size_t
index
const
LDefinition
&
temp
)
{
JS_NOT_REACHED
(
"
no
temps
"
)
;
}
virtual
void
printInfo
(
FILE
*
fp
)
{
printOperands
(
fp
)
;
}
}
;
}
/
/
namespace
ion
}
/
/
namespace
js
#
endif
/
/
jsion_lir_common_h__
