/
/
|
reftest
|
skip
-
-
Intl
.
Segmenter
is
not
supported
/
/
Copyright
2018
the
V8
project
authors
.
All
rights
reserved
.
/
/
This
code
is
governed
by
the
BSD
license
found
in
the
LICENSE
file
.
/
*
-
-
-
esid
:
sec
-
Intl
.
Segmenter
.
prototype
.
segment
description
:
Verifies
the
behavior
for
the
"
segment
"
function
of
the
Segmenter
prototype
object
.
info
:
|
Intl
.
Segmenter
.
prototype
.
segment
(
string
)
features
:
[
Intl
.
Segmenter
]
-
-
-
*
/
const
seg
=
new
Intl
.
Segmenter
(
[
]
{
granularity
:
"
word
"
}
)
for
(
const
text
of
[
"
Hello
world
!
"
/
/
English
"
Hello
world
!
"
/
/
English
with
space
before
/
after
"
Hello
world
?
Foo
bar
!
"
/
/
English
"
Jedovatou
mambu
objevila
ena
v
zahr
dk
sk
kolonii
.
"
/
/
Czech
"
Vi
t
Nam
:
Nh
t
th
h
a
s
kh
c
Trung
Qu
c
?
"
/
/
Vietnamese
"
"
/
/
Greek
"
-
400
"
/
/
Russian
"
"
/
/
Hebrew
"
:
.
.
"
/
/
Arabic
"
400
"
/
/
Hindi
"
;
!
"
/
/
Tamil
"
'
'
"
/
/
Telugu
"
P
pupu
"
/
/
Chinese
"
"
/
/
Thai
"
(
2018
10
06
)
-
tenki
.
jp
"
/
/
Japanese
"
MB
"
/
/
Korean
]
)
{
const
iter
=
seg
.
segment
(
text
)
;
let
prev
=
text
.
length
;
let
segments
=
[
]
;
iter
.
preceding
(
prev
)
;
assert
(
[
"
word
"
"
none
"
]
.
includes
(
iter
.
breakType
)
iter
.
breakType
)
;
assert
(
iter
.
index
>
=
0
)
;
assert
(
iter
.
index
<
prev
)
;
segments
.
push
(
text
.
substring
(
iter
.
index
prev
)
)
;
prev
=
iter
.
index
;
while
(
!
iter
.
preceding
(
)
)
{
assert
(
[
"
word
"
"
none
"
]
.
includes
(
iter
.
breakType
)
iter
.
breakType
)
;
assert
(
iter
.
index
>
=
0
)
;
assert
(
iter
.
index
<
=
text
.
length
)
;
assert
(
iter
.
index
<
prev
)
;
segments
.
push
(
text
.
substring
(
iter
.
index
prev
)
)
;
prev
=
iter
.
index
;
}
assert
.
sameValue
(
text
segments
.
reverse
(
)
.
join
(
"
"
)
)
;
}
reportCompare
(
0
0
)
;
