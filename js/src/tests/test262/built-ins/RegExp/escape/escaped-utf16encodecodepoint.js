/
/
|
reftest
|
shell
-
option
(
-
-
enable
-
regexp
-
escape
)
skip
-
if
(
!
RegExp
.
escape
|
|
!
xulRuntime
.
shell
)
-
-
RegExp
.
escape
is
not
enabled
unconditionally
requires
shell
-
options
/
/
Copyright
(
C
)
2024
Leo
Balter
Jordan
Harband
.
All
rights
reserved
.
/
/
This
code
is
governed
by
the
BSD
license
found
in
the
LICENSE
file
.
/
*
-
-
-
esid
:
sec
-
encodeforregexescape
description
:
UTF16EncodeCodePoint
is
called
for
remaining
codepoints
info
:
|
EncodeForRegExpEscape
(
c
)
3
.
Let
otherPunctuators
be
the
string
-
concatenation
of
"
-
=
<
>
#
&
!
%
:
;
~
'
"
and
the
code
unit
0x0022
(
QUOTATION
MARK
)
.
4
.
Let
toEscape
be
StringToCodePoints
(
otherPunctuators
)
.
5
.
If
toEscape
contains
c
c
is
matched
by
WhiteSpace
or
LineTerminator
or
c
has
the
same
numeric
value
as
a
leading
surrogate
or
trailing
surrogate
then
.
.
.
6
.
Return
UTF16EncodeCodePoint
(
c
)
.
features
:
[
RegExp
.
escape
]
-
-
-
*
/
const
codePoints
=
String
.
fromCharCode
(
0x100
0x200
0x300
)
;
assert
.
sameValue
(
RegExp
.
escape
(
codePoints
)
codePoints
'
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Chinese
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Japanese
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Korean
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Cyrillic
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Arabic
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Devanagari
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
\
\
x20
'
'
Greek
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Hebrew
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Thai
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Hindi
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Amharic
characters
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
'
)
'
'
'
Hindi
characters
with
diacritics
are
correctly
not
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
!
'
)
'
\
\
x21
'
'
Korean
character
with
special
character
is
correctly
escaped
'
)
;
assert
.
sameValue
(
RegExp
.
escape
(
'
.
hello
\
uD7FFworld
'
)
'
\
\
.
hello
\
uD7FFworld
'
'
Mixed
ASCII
and
Unicode
characters
are
correctly
escaped
'
)
;
reportCompare
(
0
0
)
;
