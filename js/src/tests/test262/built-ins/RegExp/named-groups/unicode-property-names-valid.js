/
/
Copyright
(
C
)
2020
Apple
Inc
.
All
rights
reserved
.
/
/
This
code
is
governed
by
the
BSD
license
found
in
the
LICENSE
file
.
/
*
-
-
-
author
:
Michael
Saboff
description
:
Exotic
named
group
names
in
Unicode
RegExps
esid
:
prod
-
GroupSpecifier
features
:
[
regexp
-
named
-
groups
]
-
-
-
*
/
/
*
Valid
ID_Start
/
ID_Continue
Unicode
characters
\
u
{
1d453
}
\
ud835
\
udc53
\
u
{
1d45c
}
\
ud835
\
udc5c
\
u
{
id465
}
\
ud835
\
udc65
\
u
{
1d4d3
}
\
ud835
\
udcd3
\
u
{
1d4f8
}
\
ud835
\
udcf8
\
u
{
1d4f0
}
\
ud835
\
udcf0
\
u
{
1d4d1
}
\
ud835
\
udcd1
\
u
{
1d4fb
}
\
ud835
\
udcfb
\
u
{
1d4f8
}
\
ud835
\
udcf8
\
u
{
1d500
}
\
ud835
\
udd00
\
u
{
1d4f7
}
\
ud835
\
udcf7
\
u
{
1d5b0
}
\
ud835
\
uddb0
\
u
{
1d5a1
}
\
ud835
\
udda1
\
u
{
1d5a5
}
\
ud835
\
udda5
(
fox
)
\
u
{
72f8
}
\
u72f8
(
dog
)
\
u
{
72d7
}
\
u72d7
Valid
ID_Continue
Unicode
characters
(
Can
'
t
be
first
identifier
character
.
)
\
u
{
1d7da
}
\
ud835
\
udfda
Invalid
ID_Start
/
ID_Continue
(
fox
face
emoji
)
\
u
{
1f98a
}
\
ud83e
\
udd8a
(
dog
emoji
)
\
u
{
1f415
}
\
ud83d
\
udc15
*
/
var
string
=
"
The
quick
brown
fox
jumped
over
the
lazy
dog
'
s
back
"
;
var
string2
=
"
It
is
a
dog
eat
dog
world
.
"
;
let
match
=
null
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
animal
>
fox
|
dog
)
/
u
)
.
groups
.
animal
"
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
the2
>
the
)
/
u
)
.
groups
.
the2
"
the
"
)
;
match
=
string
.
match
(
/
(
?
<
>
fox
)
.
*
(
?
<
>
dog
)
/
u
)
;
assert
.
sameValue
(
match
.
groups
.
"
fox
"
)
;
assert
.
sameValue
(
match
.
groups
.
"
dog
"
)
;
assert
.
sameValue
(
match
[
1
]
"
fox
"
)
;
assert
.
sameValue
(
match
[
2
]
"
dog
"
)
;
match
=
string
.
match
(
/
(
?
<
>
fox
)
.
*
(
?
<
>
dog
)
/
u
)
;
assert
.
sameValue
(
match
.
groups
.
"
fox
"
)
;
assert
.
sameValue
(
match
.
groups
.
"
dog
"
)
;
assert
.
sameValue
(
match
[
1
]
"
fox
"
)
;
assert
.
sameValue
(
match
[
2
]
"
dog
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
>
brown
)
/
u
)
.
groups
.
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
>
brown
)
/
u
)
.
groups
.
\
u
{
1d4d1
}
\
u
{
1d4fb
}
\
u
{
1d4f8
}
\
u
{
1d500
}
\
u
{
1d4f7
}
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d4d1
}
\
u
{
1d4fb
}
\
u
{
1d4f8
}
\
u
{
1d500
}
\
u
{
1d4f7
}
>
brown
)
/
u
)
.
groups
.
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d4d1
}
\
u
{
1d4fb
}
\
u
{
1d4f8
}
\
u
{
1d500
}
\
u
{
1d4f7
}
>
brown
)
/
u
)
.
groups
.
\
u
{
1d4d1
}
\
u
{
1d4fb
}
\
u
{
1d4f8
}
\
u
{
1d500
}
\
u
{
1d4f7
}
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
ud835
\
udcd1
\
ud835
\
udcfb
\
ud835
\
udcf8
\
ud835
\
udd00
\
ud835
\
udcf7
>
brown
)
/
u
)
.
groups
.
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
ud835
\
udcd1
\
ud835
\
udcfb
\
ud835
\
udcf8
\
ud835
\
udd00
\
ud835
\
udcf7
>
brown
)
/
u
)
.
groups
.
\
u
{
1d4d1
}
\
u
{
1d4fb
}
\
u
{
1d4f8
}
\
u
{
1d500
}
\
u
{
1d4f7
}
"
brown
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5a5
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5a1
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5a1
}
\
u
{
1d5a5
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5b0
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5b0
}
\
u
{
1d5a5
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5b0
}
\
u
{
1d5a1
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
\
u
{
1d5b0
}
\
u
{
1d5a1
}
\
u
{
1d5a5
}
>
q
\
w
*
\
W
\
w
*
\
W
\
w
*
)
/
u
)
.
groups
.
"
quick
brown
fox
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
the
>
the
)
/
u
)
.
groups
.
the
"
the
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
the
\
u
{
1d7da
}
>
the
)
/
u
)
.
groups
.
the
"
the
"
)
;
assert
.
sameValue
(
string
.
match
(
/
(
?
<
the
\
ud835
\
udfda
>
the
)
/
u
)
.
groups
.
the
"
the
"
)
;
match
=
string2
.
match
(
/
(
?
<
dog
>
dog
)
(
.
*
?
)
(
\
k
<
dog
>
)
/
u
)
;
assert
.
sameValue
(
match
.
groups
.
dog
"
dog
"
)
;
assert
.
sameValue
(
match
[
1
]
"
dog
"
)
;
assert
.
sameValue
(
match
[
2
]
"
eat
"
)
;
assert
.
sameValue
(
match
[
3
]
"
dog
"
)
;
match
=
string2
.
match
(
/
(
?
<
>
dog
)
(
.
*
?
)
(
\
k
<
>
)
/
u
)
;
assert
.
sameValue
(
match
.
groups
.
"
dog
"
)
;
assert
.
sameValue
(
match
[
1
]
"
dog
"
)
;
assert
.
sameValue
(
match
[
2
]
"
eat
"
)
;
assert
.
sameValue
(
match
[
3
]
"
dog
"
)
;
match
=
string2
.
match
(
/
(
?
<
>
dog
)
(
.
*
?
)
(
\
k
<
>
)
/
u
)
;
assert
.
sameValue
(
match
.
groups
.
"
dog
"
)
;
assert
.
sameValue
(
match
[
1
]
"
dog
"
)
;
assert
.
sameValue
(
match
[
2
]
"
eat
"
)
;
assert
.
sameValue
(
match
[
3
]
"
dog
"
)
;
reportCompare
(
0
0
)
;
