/
/
|
reftest
|
skip
-
if
(
!
this
.
hasOwnProperty
(
'
Intl
'
)
)
const
tests
=
{
"
en
"
:
{
long
:
{
"
de
"
:
"
German
"
"
de
-
AT
"
:
"
Austrian
German
"
"
de
-
1996
"
:
"
German
(
German
orthography
of
1996
)
"
"
en
"
:
"
English
"
"
en
-
Hant
-
GB
"
:
"
British
English
(
Traditional
)
"
"
en
-
Hans
-
US
"
:
"
American
English
(
Simplified
)
"
"
fr
"
:
"
French
"
"
nl
-
BE
"
:
"
Flemish
"
"
cr
-
Cans
"
:
"
Cree
(
Unified
Canadian
Aboriginal
Syllabics
)
"
}
short
:
{
"
en
-
Hant
-
GB
"
:
"
UK
English
(
Traditional
)
"
"
en
-
Hans
-
US
"
:
"
US
English
(
Simplified
)
"
"
cr
-
Cans
"
:
"
Cree
(
UCAS
)
"
}
narrow
:
{
}
}
"
de
"
:
{
long
:
{
"
de
"
:
"
Deutsch
"
"
de
-
AT
"
:
"
sterreichisches
Deutsch
"
"
de
-
1996
"
:
"
Deutsch
(
Neue
deutsche
Rechtschreibung
)
"
"
en
"
:
"
Englisch
"
"
en
-
Hant
-
GB
"
:
"
Englisch
(
Traditionell
Vereinigtes
K
nigreich
)
"
"
en
-
Hans
-
US
"
:
"
Englisch
(
Vereinfacht
Vereinigte
Staaten
)
"
"
fr
"
:
"
Franz
sisch
"
"
nl
-
BE
"
:
"
Fl
misch
"
}
short
:
{
"
en
-
Hant
-
GB
"
:
"
Englisch
(
GB
)
(
Traditionell
)
"
"
en
-
Hans
-
US
"
:
"
Englisch
(
USA
)
(
Vereinfacht
)
"
}
narrow
:
{
}
}
"
fr
"
:
{
long
:
{
"
de
"
:
"
allemand
"
"
de
-
AT
"
:
"
allemand
autrichien
"
"
de
-
1996
"
:
"
allemand
(
orthographe
allemande
de
1996
)
"
"
en
"
:
"
anglais
"
"
en
-
Hant
-
GB
"
:
"
anglais
britannique
(
traditionnel
)
"
"
en
-
Hans
-
US
"
:
"
anglais
am
ricain
(
simplifi
)
"
"
fr
"
:
"
fran
ais
"
"
nl
-
BE
"
:
"
flamand
"
}
short
:
{
"
en
-
Hant
-
GB
"
:
"
anglais
britannique
(
traditionnel
)
"
"
en
-
Hans
-
US
"
:
"
anglais
am
ricain
(
simplifi
)
"
}
narrow
:
{
}
}
"
zh
"
:
{
long
:
{
"
zh
"
:
"
"
"
zh
-
Hant
"
:
"
"
"
zh
-
Hant
-
CN
"
:
"
"
"
zh
-
Hans
-
HK
"
:
"
"
}
short
:
{
"
zh
-
Hans
-
HK
"
:
"
"
}
narrow
:
{
}
}
"
ar
"
:
{
long
:
{
"
ar
"
:
"
"
"
ar
-
SA
"
:
"
(
)
"
"
zh
-
MO
"
:
"
(
)
"
}
short
:
{
"
zh
-
MO
"
:
"
(
)
"
}
narrow
:
{
}
}
}
;
for
(
let
[
locale
localeTests
]
of
Object
.
entries
(
tests
)
)
{
for
(
let
[
style
styleTests
]
of
Object
.
entries
(
localeTests
)
)
{
let
dn
=
new
Intl
.
DisplayNames
(
locale
{
type
:
"
language
"
languageDisplay
:
"
dialect
"
style
}
)
;
let
resolved
=
dn
.
resolvedOptions
(
)
;
assertEq
(
resolved
.
locale
locale
)
;
assertEq
(
resolved
.
style
style
)
;
assertEq
(
resolved
.
type
"
language
"
)
;
assertEq
(
resolved
.
languageDisplay
"
dialect
"
)
;
assertEq
(
resolved
.
fallback
"
code
"
)
;
let
inheritedTests
=
{
.
.
.
localeTests
.
long
.
.
.
localeTests
.
short
.
.
.
localeTests
.
narrow
}
;
for
(
let
[
language
expected
]
of
Object
.
entries
(
{
.
.
.
inheritedTests
.
.
.
styleTests
}
)
)
{
assertEq
(
dn
.
of
(
language
)
expected
)
;
/
/
Also
works
with
objects
.
assertEq
(
dn
.
of
(
Object
(
language
)
)
expected
)
;
}
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
