/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
8
sts
=
4
et
sw
=
4
tw
=
99
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
jit_IonFrames_h
#
define
jit_IonFrames_h
#
ifdef
JS_ION
#
include
"
jscntxt
.
h
"
#
include
"
jsfun
.
h
"
#
include
"
jit
/
IonFrameIterator
.
h
"
namespace
js
{
namespace
jit
{
/
/
The
size
of
a
stack
"
slot
"
.
Multiple
adjacent
slots
are
allocated
together
/
/
when
larger
stack
allocations
are
needed
.
static
const
uint32_t
STACK_SLOT_SIZE
=
4
;
/
/
The
number
of
stack
slots
needed
for
a
double
value
.
static
const
uint32_t
DOUBLE_STACK_ALIGNMENT
=
2
;
typedef
void
*
CalleeToken
;
enum
CalleeTokenTag
{
CalleeToken_Function
=
0x0
/
/
untagged
CalleeToken_Script
=
0x1
}
;
static
inline
CalleeTokenTag
GetCalleeTokenTag
(
CalleeToken
token
)
{
CalleeTokenTag
tag
=
CalleeTokenTag
(
uintptr_t
(
token
)
&
0x3
)
;
JS_ASSERT
(
tag
<
=
CalleeToken_Script
)
;
return
tag
;
}
static
inline
CalleeToken
CalleeToToken
(
JSFunction
*
fun
)
{
return
CalleeToken
(
uintptr_t
(
fun
)
|
uintptr_t
(
CalleeToken_Function
)
)
;
}
static
inline
CalleeToken
CalleeToToken
(
JSScript
*
script
)
{
return
CalleeToken
(
uintptr_t
(
script
)
|
uintptr_t
(
CalleeToken_Script
)
)
;
}
static
inline
bool
CalleeTokenIsFunction
(
CalleeToken
token
)
{
return
GetCalleeTokenTag
(
token
)
=
=
CalleeToken_Function
;
}
static
inline
JSFunction
*
CalleeTokenToFunction
(
CalleeToken
token
)
{
JS_ASSERT
(
CalleeTokenIsFunction
(
token
)
)
;
return
(
JSFunction
*
)
token
;
}
static
inline
JSScript
*
CalleeTokenToScript
(
CalleeToken
token
)
{
JS_ASSERT
(
GetCalleeTokenTag
(
token
)
=
=
CalleeToken_Script
)
;
return
(
JSScript
*
)
(
uintptr_t
(
token
)
&
~
uintptr_t
(
0x3
)
)
;
}
static
inline
JSScript
*
ScriptFromCalleeToken
(
CalleeToken
token
)
{
switch
(
GetCalleeTokenTag
(
token
)
)
{
case
CalleeToken_Script
:
return
CalleeTokenToScript
(
token
)
;
case
CalleeToken_Function
:
return
CalleeTokenToFunction
(
token
)
-
>
nonLazyScript
(
)
;
}
MOZ_ASSUME_UNREACHABLE
(
"
invalid
callee
token
tag
"
)
;
}
/
/
In
between
every
two
frames
lies
a
small
header
describing
both
frames
.
This
/
/
header
minimally
contains
a
returnAddress
word
and
a
descriptor
word
.
The
/
/
descriptor
describes
the
size
and
type
of
the
previous
frame
whereas
the
/
/
returnAddress
describes
the
address
the
newer
frame
(
the
callee
)
will
return
/
/
to
.
The
exact
mechanism
in
which
frames
are
laid
out
is
architecture
/
/
dependent
.
/
/
/
/
Two
special
frame
types
exist
.
Entry
frames
begin
an
ion
activation
and
/
/
therefore
there
is
exactly
one
per
activation
of
jit
:
:
Cannon
.
Exit
frames
/
/
are
necessary
to
leave
JIT
code
and
enter
C
+
+
and
thus
C
+
+
code
will
/
/
always
begin
iterating
from
the
topmost
exit
frame
.
class
LSafepoint
;
/
/
Two
-
tuple
that
lets
you
look
up
the
safepoint
entry
given
the
/
/
displacement
of
a
call
instruction
within
the
JIT
code
.
class
SafepointIndex
{
/
/
The
displacement
is
the
distance
from
the
first
byte
of
the
JIT
'
d
code
/
/
to
the
return
address
(
of
the
call
that
the
safepoint
was
generated
for
)
.
uint32_t
displacement_
;
union
{
LSafepoint
*
safepoint_
;
/
/
Offset
to
the
start
of
the
encoded
safepoint
in
the
safepoint
stream
.
uint32_t
safepointOffset_
;
}
;
#
ifdef
DEBUG
bool
resolved
;
#
endif
public
:
SafepointIndex
(
uint32_t
displacement
LSafepoint
*
safepoint
)
:
displacement_
(
displacement
)
safepoint_
(
safepoint
)
#
ifdef
DEBUG
resolved
(
false
)
#
endif
{
}
void
resolve
(
)
;
LSafepoint
*
safepoint
(
)
{
JS_ASSERT
(
!
resolved
)
;
return
safepoint_
;
}
uint32_t
displacement
(
)
const
{
return
displacement_
;
}
uint32_t
safepointOffset
(
)
const
{
return
safepointOffset_
;
}
void
adjustDisplacement
(
uint32_t
offset
)
{
JS_ASSERT
(
offset
>
=
displacement_
)
;
displacement_
=
offset
;
}
inline
SnapshotOffset
snapshotOffset
(
)
const
;
inline
bool
hasSnapshotOffset
(
)
const
;
}
;
class
MacroAssembler
;
/
/
The
OSI
point
is
patched
to
a
call
instruction
.
Therefore
the
/
/
returnPoint
for
an
OSI
call
is
the
address
immediately
following
that
/
/
call
instruction
.
The
displacement
of
that
point
within
the
assembly
/
/
buffer
is
the
|
returnPointDisplacement
|
.
class
OsiIndex
{
uint32_t
callPointDisplacement_
;
uint32_t
snapshotOffset_
;
public
:
OsiIndex
(
uint32_t
callPointDisplacement
uint32_t
snapshotOffset
)
:
callPointDisplacement_
(
callPointDisplacement
)
snapshotOffset_
(
snapshotOffset
)
{
}
uint32_t
returnPointDisplacement
(
)
const
;
uint32_t
callPointDisplacement
(
)
const
{
return
callPointDisplacement_
;
}
uint32_t
snapshotOffset
(
)
const
{
return
snapshotOffset_
;
}
void
fixUpOffset
(
MacroAssembler
&
masm
)
;
}
;
/
/
The
layout
of
an
Ion
frame
on
the
C
stack
is
roughly
:
/
/
argN
_
/
/
.
.
.
\
-
These
are
jsvals
/
/
arg0
/
/
/
-
3
this
_
/
/
/
-
2
callee
/
/
-
1
descriptor
/
/
0
returnAddress
/
/
.
.
locals
.
.
/
/
The
descriptor
is
organized
into
three
sections
:
/
/
[
frame
size
|
constructing
bit
|
frame
type
]
/
/
<
highest
-
-
-
-
-
-
-
-
-
-
-
-
-
-
lowest
>
static
const
uintptr_t
FRAMESIZE_SHIFT
=
4
;
static
const
uintptr_t
FRAMETYPE_BITS
=
4
;
static
const
uintptr_t
FRAMETYPE_MASK
=
(
1
<
<
FRAMETYPE_BITS
)
-
1
;
/
/
Ion
frames
have
a
few
important
numbers
associated
with
them
:
/
/
Local
depth
:
The
number
of
bytes
required
to
spill
local
variables
.
/
/
Argument
depth
:
The
number
of
bytes
required
to
push
arguments
and
make
/
/
a
function
call
.
/
/
Slack
:
A
frame
may
temporarily
use
extra
stack
to
resolve
cycles
.
/
/
/
/
The
(
local
+
argument
)
depth
determines
the
"
fixed
frame
size
"
.
The
fixed
/
/
frame
size
is
the
distance
between
the
stack
pointer
and
the
frame
header
.
/
/
Thus
fixed
>
=
(
local
+
argument
)
.
/
/
/
/
In
order
to
compress
guards
we
create
shared
jump
tables
that
recover
the
/
/
script
from
the
stack
and
recover
a
snapshot
pointer
based
on
which
jump
was
/
/
taken
.
Thus
we
create
a
jump
table
for
each
fixed
frame
size
.
/
/
/
/
Jump
tables
are
big
.
To
control
the
amount
of
jump
tables
we
generate
each
/
/
platform
chooses
how
to
segregate
stack
size
classes
based
on
its
/
/
architecture
.
/
/
/
/
On
some
architectures
these
jump
tables
are
not
used
at
all
or
frame
/
/
size
segregation
is
not
needed
.
Thus
there
is
an
option
for
a
frame
to
not
/
/
have
any
frame
size
class
and
to
be
totally
dynamic
.
static
const
uint32_t
NO_FRAME_SIZE_CLASS_ID
=
uint32_t
(
-
1
)
;
class
FrameSizeClass
{
uint32_t
class_
;
explicit
FrameSizeClass
(
uint32_t
class_
)
:
class_
(
class_
)
{
}
public
:
FrameSizeClass
(
)
{
}
static
FrameSizeClass
None
(
)
{
return
FrameSizeClass
(
NO_FRAME_SIZE_CLASS_ID
)
;
}
static
FrameSizeClass
FromClass
(
uint32_t
class_
)
{
return
FrameSizeClass
(
class_
)
;
}
/
/
These
functions
are
implemented
in
specific
CodeGenerator
-
*
files
.
static
FrameSizeClass
FromDepth
(
uint32_t
frameDepth
)
;
static
FrameSizeClass
ClassLimit
(
)
;
uint32_t
frameSize
(
)
const
;
uint32_t
classId
(
)
const
{
JS_ASSERT
(
class_
!
=
NO_FRAME_SIZE_CLASS_ID
)
;
return
class_
;
}
bool
operator
=
=
(
const
FrameSizeClass
&
other
)
const
{
return
class_
=
=
other
.
class_
;
}
bool
operator
!
=
(
const
FrameSizeClass
&
other
)
const
{
return
class_
!
=
other
.
class_
;
}
}
;
struct
BaselineBailoutInfo
;
/
/
Data
needed
to
recover
from
an
exception
.
struct
ResumeFromException
{
static
const
uint32_t
RESUME_ENTRY_FRAME
=
0
;
static
const
uint32_t
RESUME_CATCH
=
1
;
static
const
uint32_t
RESUME_FINALLY
=
2
;
static
const
uint32_t
RESUME_FORCED_RETURN
=
3
;
static
const
uint32_t
RESUME_BAILOUT
=
4
;
uint8_t
*
framePointer
;
uint8_t
*
stackPointer
;
uint8_t
*
target
;
uint32_t
kind
;
/
/
Value
to
push
when
resuming
into
a
|
finally
|
block
.
Value
exception
;
BaselineBailoutInfo
*
bailoutInfo
;
}
;
void
HandleException
(
ResumeFromException
*
rfe
)
;
void
HandleParallelFailure
(
ResumeFromException
*
rfe
)
;
void
EnsureExitFrame
(
IonCommonFrameLayout
*
frame
)
;
void
MarkJitActivations
(
JSRuntime
*
rt
JSTracer
*
trc
)
;
void
MarkIonCompilerRoots
(
JSTracer
*
trc
)
;
static
inline
uint32_t
MakeFrameDescriptor
(
uint32_t
frameSize
FrameType
type
)
{
return
(
frameSize
<
<
FRAMESIZE_SHIFT
)
|
type
;
}
/
/
Returns
the
JSScript
associated
with
the
topmost
Ion
frame
.
inline
JSScript
*
GetTopIonJSScript
(
uint8_t
*
ionTop
void
*
*
returnAddrOut
ExecutionMode
mode
)
{
IonFrameIterator
iter
(
ionTop
mode
)
;
JS_ASSERT
(
iter
.
type
(
)
=
=
IonFrame_Exit
)
;
+
+
iter
;
JS_ASSERT
(
iter
.
returnAddressToFp
(
)
!
=
nullptr
)
;
if
(
returnAddrOut
)
*
returnAddrOut
=
(
void
*
)
iter
.
returnAddressToFp
(
)
;
if
(
iter
.
isBaselineStub
(
)
)
{
+
+
iter
;
JS_ASSERT
(
iter
.
isBaselineJS
(
)
)
;
}
JS_ASSERT
(
iter
.
isScripted
(
)
)
;
return
iter
.
script
(
)
;
}
}
/
/
namespace
jit
}
/
/
namespace
js
#
if
defined
(
JS_CPU_X86
)
|
|
defined
(
JS_CPU_X64
)
#
include
"
jit
/
shared
/
IonFrames
-
x86
-
shared
.
h
"
#
elif
defined
(
JS_CPU_ARM
)
#
include
"
jit
/
arm
/
IonFrames
-
arm
.
h
"
#
else
#
error
"
unsupported
architecture
"
#
endif
namespace
js
{
namespace
jit
{
void
GetPcScript
(
JSContext
*
cx
JSScript
*
*
scriptRes
jsbytecode
*
*
pcRes
)
;
CalleeToken
MarkCalleeToken
(
JSTracer
*
trc
CalleeToken
token
)
;
}
/
*
namespace
jit
*
/
}
/
*
namespace
js
*
/
#
endif
/
/
JS_ION
#
endif
/
*
jit_IonFrames_h
*
/
