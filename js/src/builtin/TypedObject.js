#
include
"
TypedObjectConstants
.
h
"
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
Getters
and
setters
for
various
slots
.
/
/
Type
object
slots
#
define
TYPE_TYPE_REPR
(
obj
)
\
UnsafeGetReservedSlot
(
obj
JS_TYPEOBJ_SLOT_TYPE_REPR
)
/
/
Typed
object
slots
#
define
TYPED_TYPE_OBJ
(
obj
)
\
UnsafeGetReservedSlot
(
obj
JS_TYPEDOBJ_SLOT_TYPE_OBJ
)
/
/
Type
repr
slots
#
define
REPR_KIND
(
obj
)
\
TO_INT32
(
UnsafeGetReservedSlot
(
obj
JS_TYPEREPR_SLOT_KIND
)
)
#
define
REPR_SIZE
(
obj
)
\
TO_INT32
(
UnsafeGetReservedSlot
(
obj
JS_TYPEREPR_SLOT_SIZE
)
)
#
define
REPR_ALIGNMENT
(
obj
)
\
TO_INT32
(
UnsafeGetReservedSlot
(
obj
JS_TYPEREPR_SLOT_ALIGNMENT
)
)
#
define
REPR_LENGTH
(
obj
)
\
TO_INT32
(
UnsafeGetReservedSlot
(
obj
JS_TYPEREPR_SLOT_LENGTH
)
)
#
define
REPR_TYPE
(
obj
)
\
TO_INT32
(
UnsafeGetReservedSlot
(
obj
JS_TYPEREPR_SLOT_TYPE
)
)
#
define
HAS_PROPERTY
(
obj
prop
)
\
callFunction
(
std_Object_hasOwnProperty
obj
prop
)
function
TYPED_TYPE_REPR
(
obj
)
{
/
/
Eventually
this
will
be
a
slot
on
typed
objects
return
TYPE_TYPE_REPR
(
TYPED_TYPE_OBJ
(
obj
)
)
;
}
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
TypedObjectPointer
/
/
/
/
TypedObjectPointers
are
internal
structs
used
to
represent
a
/
/
pointer
into
typed
object
memory
.
They
pull
together
:
/
/
-
typeRepr
:
the
internal
type
representation
/
/
-
typeObj
:
the
user
-
visible
type
object
/
/
-
owner
:
the
owner
object
that
contains
the
allocated
block
of
memory
/
/
-
offset
:
an
offset
into
that
owner
object
/
/
/
/
They
are
basically
equivalent
to
a
typed
object
except
that
they
/
/
offer
lots
of
internal
unsafe
methods
and
are
not
native
objects
.
/
/
These
should
never
escape
into
user
code
;
ideally
ion
would
stack
/
/
allocate
them
.
/
/
/
/
Most
TypedObjectPointers
methods
are
written
in
a
"
chaining
"
/
/
style
meaning
that
they
return
this
.
This
is
true
even
though
/
/
they
mutate
the
receiver
in
place
because
it
makes
for
prettier
/
/
code
.
function
TypedObjectPointer
(
typeRepr
typeObj
owner
offset
)
{
this
.
typeRepr
=
typeRepr
;
this
.
typeObj
=
typeObj
;
this
.
owner
=
owner
;
this
.
offset
=
offset
;
}
MakeConstructible
(
TypedObjectPointer
{
}
)
;
#
ifdef
DEBUG
TypedObjectPointer
.
prototype
.
toString
=
function
(
)
{
return
"
Ptr
(
"
+
this
.
typeObj
.
toSource
(
)
+
"
"
+
this
.
offset
+
"
)
"
;
}
;
#
endif
TypedObjectPointer
.
prototype
.
copy
=
function
(
)
{
return
new
TypedObjectPointer
(
this
.
typeRepr
this
.
typeObj
this
.
owner
this
.
offset
)
;
}
;
TypedObjectPointer
.
prototype
.
reset
=
function
(
inPtr
)
{
this
.
typeRepr
=
inPtr
.
typeRepr
;
this
.
typeObj
=
inPtr
.
typeObj
;
this
.
owner
=
inPtr
.
owner
;
this
.
offset
=
inPtr
.
offset
;
return
this
;
}
;
TypedObjectPointer
.
prototype
.
kind
=
function
(
)
{
return
REPR_KIND
(
this
.
typeRepr
)
;
}
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
Moving
the
pointer
/
/
/
/
The
methods
in
this
section
adjust
this
in
place
to
point
at
/
/
subelements
or
subproperties
.
/
/
Adjusts
this
in
place
so
that
it
points
at
the
property
/
/
propName
.
Throws
if
there
is
no
such
property
.
Returns
this
.
TypedObjectPointer
.
prototype
.
moveTo
=
function
(
propName
)
{
switch
(
this
.
kind
(
)
)
{
case
JS_TYPEREPR_SCALAR_KIND
:
break
;
case
JS_TYPEREPR_ARRAY_KIND
:
/
/
For
an
array
property
must
be
an
element
.
Note
that
we
use
the
/
/
length
as
loaded
from
the
type
*
representation
*
as
opposed
to
/
/
the
type
*
object
*
;
this
is
because
some
type
objects
represent
/
/
unsized
arrays
and
hence
do
not
have
a
length
.
var
index
=
TO_INT32
(
propName
)
;
if
(
index
=
=
=
propName
&
&
index
<
REPR_LENGTH
(
this
.
typeRepr
)
)
return
this
.
moveToElem
(
index
)
;
break
;
case
JS_TYPEREPR_STRUCT_KIND
:
if
(
HAS_PROPERTY
(
this
.
typeObj
.
fieldTypes
propName
)
)
return
this
.
moveToField
(
propName
)
;
break
;
}
ThrowError
(
JSMSG_TYPEDOBJECT_NO_SUCH_PROP
propName
)
;
}
;
/
/
Adjust
this
in
place
to
point
at
the
element
index
.
this
/
/
must
be
a
array
type
and
index
must
be
within
bounds
.
Returns
/
/
this
.
TypedObjectPointer
.
prototype
.
moveToElem
=
function
(
index
)
{
assert
(
this
.
kind
(
)
=
=
JS_TYPEREPR_ARRAY_KIND
"
moveToElem
invoked
on
non
-
array
"
)
;
assert
(
index
<
REPR_LENGTH
(
this
.
typeRepr
)
"
moveToElem
invoked
with
out
-
of
-
bounds
index
"
)
;
var
elementTypeObj
=
this
.
typeObj
.
elementType
;
var
elementTypeRepr
=
TYPE_TYPE_REPR
(
elementTypeObj
)
;
this
.
typeRepr
=
elementTypeRepr
;
this
.
typeObj
=
elementTypeObj
;
var
elementSize
=
REPR_SIZE
(
elementTypeRepr
)
;
/
/
Note
:
we
do
not
allow
construction
of
arrays
where
the
offset
/
/
of
an
element
cannot
be
represented
by
an
int32
.
this
.
offset
+
=
std_Math_imul
(
index
elementSize
)
;
return
this
;
}
;
/
/
Adjust
this
to
point
at
the
field
propName
.
this
must
be
a
/
/
struct
type
and
propName
must
be
a
valid
field
name
.
Returns
/
/
this
.
TypedObjectPointer
.
prototype
.
moveToField
=
function
(
propName
)
{
assert
(
this
.
kind
(
)
=
=
JS_TYPEREPR_STRUCT_KIND
"
moveToField
invoked
on
non
-
struct
"
)
;
assert
(
HAS_PROPERTY
(
this
.
typeObj
.
fieldTypes
propName
)
"
moveToField
invoked
with
undefined
field
"
)
;
var
fieldTypeObj
=
this
.
typeObj
.
fieldTypes
[
propName
]
;
var
fieldOffset
=
TO_INT32
(
this
.
typeObj
.
fieldOffsets
[
propName
]
)
;
this
.
typeObj
=
fieldTypeObj
;
this
.
typeRepr
=
TYPE_TYPE_REPR
(
fieldTypeObj
)
;
/
/
Note
:
we
do
not
allow
construction
of
structs
where
the
/
/
offset
of
a
field
cannot
be
represented
by
an
int32
.
this
.
offset
+
=
fieldOffset
;
return
this
;
}
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
Setting
values
/
/
/
/
The
methods
in
this
section
modify
the
data
pointed
at
by
this
.
/
/
Assigns
fromValue
to
the
memory
pointed
at
by
this
adapting
it
/
/
to
typeRepr
as
needed
.
This
is
the
most
general
entry
point
and
/
/
works
for
any
type
.
TypedObjectPointer
.
prototype
.
set
=
function
(
fromValue
)
{
var
typeRepr
=
this
.
typeRepr
;
/
/
Fast
path
:
fromValue
is
a
typed
object
with
same
type
/
/
representation
as
the
destination
.
In
that
case
we
can
just
do
a
/
/
memcpy
.
if
(
IsObject
(
fromValue
)
&
&
HaveSameClass
(
fromValue
this
.
owner
)
)
{
if
(
TYPED_TYPE_REPR
(
fromValue
)
=
=
=
typeRepr
)
{
var
size
=
REPR_SIZE
(
typeRepr
)
;
Memcpy
(
this
.
owner
this
.
offset
fromValue
0
size
)
;
return
;
}
}
switch
(
REPR_KIND
(
typeRepr
)
)
{
case
JS_TYPEREPR_SCALAR_KIND
:
this
.
setScalar
(
fromValue
)
;
return
;
case
JS_TYPEREPR_ARRAY_KIND
:
if
(
!
IsObject
(
fromValue
)
)
break
;
/
/
Check
that
"
array
-
like
"
fromValue
has
an
appropriate
length
.
var
length
=
REPR_LENGTH
(
typeRepr
)
;
if
(
fromValue
.
length
!
=
=
length
)
break
;
/
/
Adapt
each
element
.
var
tempPtr
=
this
.
copy
(
)
.
moveToElem
(
0
)
;
var
size
=
REPR_SIZE
(
tempPtr
.
typeRepr
)
;
for
(
var
i
=
0
;
i
<
length
;
i
+
+
)
{
tempPtr
.
set
(
fromValue
[
i
]
)
;
tempPtr
.
offset
+
=
size
;
}
return
;
case
JS_TYPEREPR_STRUCT_KIND
:
if
(
!
IsObject
(
fromValue
)
)
break
;
/
/
Adapt
each
field
.
var
tempPtr
=
this
.
copy
(
)
;
var
fieldNames
=
this
.
typeObj
.
fieldNames
;
for
(
var
i
=
0
;
i
<
fieldNames
.
length
;
i
+
+
)
{
var
fieldName
=
fieldNames
[
i
]
;
tempPtr
.
reset
(
this
)
.
moveToField
(
fieldName
)
.
set
(
fromValue
[
fieldName
]
)
;
}
return
;
}
ThrowError
(
JSMSG_CANT_CONVERT_TO
typeof
(
fromValue
)
this
.
typeRepr
.
toSource
(
)
)
}
/
/
Sets
fromValue
to
this
assuming
that
this
is
a
scalar
type
.
TypedObjectPointer
.
prototype
.
setScalar
=
function
(
fromValue
)
{
assert
(
REPR_KIND
(
this
.
typeRepr
)
=
=
JS_TYPEREPR_SCALAR_KIND
"
setScalar
called
with
non
-
scalar
"
)
;
var
type
=
REPR_TYPE
(
this
.
typeRepr
)
;
switch
(
type
)
{
case
JS_SCALARTYPEREPR_INT8
:
return
Store_int8
(
this
.
owner
this
.
offset
TO_INT32
(
fromValue
)
&
0xFF
)
;
case
JS_SCALARTYPEREPR_UINT8
:
return
Store_uint8
(
this
.
owner
this
.
offset
TO_UINT32
(
fromValue
)
&
0xFF
)
;
case
JS_SCALARTYPEREPR_UINT8_CLAMPED
:
var
v
=
ClampToUint8
(
+
fromValue
)
;
return
Store_int8
(
this
.
owner
this
.
offset
v
)
;
case
JS_SCALARTYPEREPR_INT16
:
return
Store_int16
(
this
.
owner
this
.
offset
TO_INT32
(
fromValue
)
&
0xFFFF
)
;
case
JS_SCALARTYPEREPR_UINT16
:
return
Store_uint16
(
this
.
owner
this
.
offset
TO_UINT32
(
fromValue
)
&
0xFFFF
)
;
case
JS_SCALARTYPEREPR_INT32
:
return
Store_int32
(
this
.
owner
this
.
offset
TO_INT32
(
fromValue
)
)
;
case
JS_SCALARTYPEREPR_UINT32
:
return
Store_uint32
(
this
.
owner
this
.
offset
TO_UINT32
(
fromValue
)
)
;
case
JS_SCALARTYPEREPR_FLOAT32
:
return
Store_float32
(
this
.
owner
this
.
offset
+
fromValue
)
;
case
JS_SCALARTYPEREPR_FLOAT64
:
return
Store_float64
(
this
.
owner
this
.
offset
+
fromValue
)
;
}
assert
(
false
"
Unhandled
scalar
type
:
"
+
type
)
;
}
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
C
+
+
Wrappers
/
/
/
/
These
helpers
are
invoked
by
C
+
+
code
or
used
as
method
bodies
.
/
/
Wrapper
for
use
from
C
+
+
code
.
function
ConvertAndCopyTo
(
destTypeRepr
destTypeObj
destTypedObj
destOffset
fromValue
)
{
var
ptr
=
new
TypedObjectPointer
(
destTypeRepr
destTypeObj
destTypedObj
destOffset
)
;
ptr
.
set
(
fromValue
)
;
}
function
FillTypedArrayWithValue
(
destArray
fromValue
)
{
var
typeRepr
=
TYPED_TYPE_REPR
(
destArray
)
;
var
length
=
REPR_LENGTH
(
typeRepr
)
;
if
(
length
=
=
=
0
)
return
;
/
/
Use
convert
and
copy
to
to
produce
the
first
element
:
var
ptr
=
new
TypedObjectPointer
(
typeRepr
TYPED_TYPE_OBJ
(
destArray
)
destArray
0
)
;
ptr
.
moveToElem
(
0
)
;
ptr
.
set
(
fromValue
)
;
/
/
Stamp
out
the
remaining
copies
:
var
elementSize
=
REPR_SIZE
(
ptr
.
typeRepr
)
;
var
totalSize
=
length
*
elementSize
;
for
(
var
offset
=
elementSize
;
offset
<
totalSize
;
offset
+
=
elementSize
)
Memcpy
(
destArray
offset
destArray
0
elementSize
)
;
}
