/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
vim
:
set
ts
=
8
sts
=
4
et
sw
=
4
tw
=
99
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
builtin
/
TypedObjectSimple
.
h
"
using
mozilla
:
:
DebugOnly
;
using
namespace
js
;
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Type
descriptors
*
/
TypeRepresentation
*
TypeDescr
:
:
typeRepresentation
(
)
const
{
return
TypeRepresentation
:
:
fromOwnerObject
(
typeRepresentationOwnerObj
(
)
)
;
}
TypeDescr
:
:
Kind
TypeDescr
:
:
kind
(
)
const
{
return
typeRepresentation
(
)
-
>
kind
(
)
;
}
bool
TypeDescr
:
:
opaque
(
)
const
{
return
typeRepresentation
(
)
-
>
opaque
(
)
;
}
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Scalar
type
objects
*
*
Scalar
type
objects
like
uint8
uint16
are
all
instances
of
*
the
ScalarTypeDescr
class
.
Like
all
type
objects
they
have
a
reserved
*
slot
pointing
to
a
TypeRepresentation
object
which
is
used
to
*
distinguish
which
scalar
type
object
this
actually
is
.
*
/
const
Class
js
:
:
ScalarTypeDescr
:
:
class_
=
{
"
Scalar
"
JSCLASS_HAS_RESERVED_SLOTS
(
JS_DESCR_SLOTS
)
JS_PropertyStub
/
*
addProperty
*
/
JS_DeletePropertyStub
/
*
delProperty
*
/
JS_PropertyStub
/
*
getProperty
*
/
JS_StrictPropertyStub
/
*
setProperty
*
/
JS_EnumerateStub
JS_ResolveStub
JS_ConvertStub
nullptr
ScalarTypeDescr
:
:
call
nullptr
nullptr
nullptr
}
;
const
JSFunctionSpec
js
:
:
ScalarTypeDescr
:
:
typeObjectMethods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
toSource
"
"
DescrToSourceMethod
"
0
0
)
{
"
array
"
{
nullptr
nullptr
}
1
0
"
ArrayShorthand
"
}
{
"
equivalent
"
{
nullptr
nullptr
}
1
0
"
TypeDescrEquivalent
"
}
JS_FS_END
}
;
static
size_t
ScalarSizes
[
]
=
{
#
define
SCALAR_SIZE
(
_kind
_type
_name
)
\
sizeof
(
_type
)
JS_FOR_EACH_SCALAR_TYPE_REPR
(
SCALAR_SIZE
)
0
#
undef
SCALAR_SIZE
}
;
size_t
ScalarTypeDescr
:
:
size
(
Type
t
)
{
return
ScalarSizes
[
t
]
;
}
size_t
ScalarTypeDescr
:
:
alignment
(
Type
t
)
{
return
ScalarSizes
[
t
]
;
}
/
*
static
*
/
const
char
*
ScalarTypeDescr
:
:
typeName
(
Type
type
)
{
switch
(
type
)
{
#
define
NUMERIC_TYPE_TO_STRING
(
constant_
type_
name_
)
\
case
constant_
:
return
#
name_
;
JS_FOR_EACH_SCALAR_TYPE_REPR
(
NUMERIC_TYPE_TO_STRING
)
}
MOZ_ASSUME_UNREACHABLE
(
"
Invalid
type
"
)
;
}
bool
ScalarTypeDescr
:
:
call
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
args
.
length
(
)
<
1
)
{
JS_ReportErrorNumber
(
cx
js_GetErrorMessage
nullptr
JSMSG_MORE_ARGS_NEEDED
args
.
callee
(
)
.
getClass
(
)
-
>
name
"
0
"
"
s
"
)
;
return
false
;
}
ScalarTypeRepresentation
*
typeRepr
=
args
.
callee
(
)
.
as
<
ScalarTypeDescr
>
(
)
.
typeRepresentation
(
)
-
>
asScalar
(
)
;
ScalarTypeDescr
:
:
Type
type
=
typeRepr
-
>
type
(
)
;
double
number
;
if
(
!
ToNumber
(
cx
args
[
0
]
&
number
)
)
return
false
;
if
(
type
=
=
ScalarTypeDescr
:
:
TYPE_UINT8_CLAMPED
)
number
=
ClampDoubleToUint8
(
number
)
;
switch
(
type
)
{
#
define
SCALARTYPE_CALL
(
constant_
type_
name_
)
\
case
constant_
:
{
\
type_
converted
=
ConvertScalar
<
type_
>
(
number
)
;
\
args
.
rval
(
)
.
setNumber
(
(
double
)
converted
)
;
\
return
true
;
\
}
JS_FOR_EACH_SCALAR_TYPE_REPR
(
SCALARTYPE_CALL
)
#
undef
SCALARTYPE_CALL
}
return
true
;
}
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Reference
type
objects
*
*
Reference
type
objects
like
Any
or
Object
basically
work
the
*
same
way
that
the
scalar
type
objects
do
.
There
is
one
class
with
*
many
instances
and
each
instance
has
a
reserved
slot
with
a
*
TypeRepresentation
object
which
is
used
to
distinguish
which
*
reference
type
object
this
actually
is
.
*
/
const
Class
js
:
:
ReferenceTypeDescr
:
:
class_
=
{
"
Reference
"
JSCLASS_HAS_RESERVED_SLOTS
(
JS_DESCR_SLOTS
)
JS_PropertyStub
/
*
addProperty
*
/
JS_DeletePropertyStub
/
*
delProperty
*
/
JS_PropertyStub
/
*
getProperty
*
/
JS_StrictPropertyStub
/
*
setProperty
*
/
JS_EnumerateStub
JS_ResolveStub
JS_ConvertStub
nullptr
ReferenceTypeDescr
:
:
call
nullptr
nullptr
nullptr
}
;
const
JSFunctionSpec
js
:
:
ReferenceTypeDescr
:
:
typeObjectMethods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
toSource
"
"
DescrToSourceMethod
"
0
0
)
{
"
array
"
{
nullptr
nullptr
}
1
0
"
ArrayShorthand
"
}
{
"
equivalent
"
{
nullptr
nullptr
}
1
0
"
TypeDescrEquivalent
"
}
JS_FS_END
}
;
/
*
static
*
/
const
char
*
ReferenceTypeDescr
:
:
typeName
(
Type
type
)
{
switch
(
type
)
{
#
define
NUMERIC_TYPE_TO_STRING
(
constant_
type_
name_
)
\
case
constant_
:
return
#
name_
;
JS_FOR_EACH_REFERENCE_TYPE_REPR
(
NUMERIC_TYPE_TO_STRING
)
}
MOZ_ASSUME_UNREACHABLE
(
"
Invalid
type
"
)
;
}
bool
js
:
:
ReferenceTypeDescr
:
:
call
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
JS_ASSERT
(
args
.
callee
(
)
.
is
<
ReferenceTypeDescr
>
(
)
)
;
ReferenceTypeRepresentation
*
typeRepr
=
args
.
callee
(
)
.
as
<
ReferenceTypeDescr
>
(
)
.
typeRepresentation
(
)
-
>
asReference
(
)
;
if
(
args
.
length
(
)
<
1
)
{
JS_ReportErrorNumber
(
cx
js_GetErrorMessage
nullptr
JSMSG_MORE_ARGS_NEEDED
typeRepr
-
>
typeName
(
)
"
0
"
"
s
"
)
;
return
false
;
}
switch
(
typeRepr
-
>
type
(
)
)
{
case
ReferenceTypeDescr
:
:
TYPE_ANY
:
args
.
rval
(
)
.
set
(
args
[
0
]
)
;
return
true
;
case
ReferenceTypeDescr
:
:
TYPE_OBJECT
:
{
RootedObject
obj
(
cx
ToObject
(
cx
args
[
0
]
)
)
;
if
(
!
obj
)
return
false
;
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
case
ReferenceTypeDescr
:
:
TYPE_STRING
:
{
RootedString
obj
(
cx
ToString
<
CanGC
>
(
cx
args
[
0
]
)
)
;
if
(
!
obj
)
return
false
;
args
.
rval
(
)
.
setString
(
&
*
obj
)
;
return
true
;
}
}
MOZ_ASSUME_UNREACHABLE
(
"
Unhandled
Reference
type
"
)
;
}
