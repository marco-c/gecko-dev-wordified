/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
RangedPtr
.
h
"
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
<
algorithm
>
#
include
<
array
>
#
include
<
cmath
>
#
include
<
cstring
>
#
include
<
iterator
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
jsfriendapi
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
String
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainMonthDay
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ComparisonOperators
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
util
/
Text
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
PropertyInfo
.
h
"
#
include
"
vm
/
PropertyKey
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
Stack
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSAtom
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsCalendar
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
CalendarObject
>
(
)
;
}
/
*
*
*
IsISOLeapYear
(
year
)
*
/
static
constexpr
bool
IsISOLeapYear
(
int32_t
year
)
{
/
/
Steps
1
-
5
.
return
(
year
%
4
=
=
0
)
&
&
(
(
year
%
100
!
=
0
)
|
|
(
year
%
400
=
=
0
)
)
;
}
/
*
*
*
IsISOLeapYear
(
year
)
*
/
static
bool
IsISOLeapYear
(
double
year
)
{
/
/
Step
1
.
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
/
/
Steps
2
-
5
.
return
std
:
:
fmod
(
year
4
)
=
=
0
&
&
(
std
:
:
fmod
(
year
100
)
!
=
0
|
|
std
:
:
fmod
(
year
400
)
=
=
0
)
;
}
/
*
*
*
ISODaysInYear
(
year
)
*
/
int32_t
js
:
:
temporal
:
:
ISODaysInYear
(
int32_t
year
)
{
/
/
Steps
1
-
3
.
return
IsISOLeapYear
(
year
)
?
366
:
365
;
}
/
*
*
*
ISODaysInMonth
(
year
month
)
*
/
static
constexpr
int32_t
ISODaysInMonth
(
int32_t
year
int32_t
month
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
constexpr
uint8_t
daysInMonth
[
2
]
[
13
]
=
{
{
0
31
28
31
30
31
30
31
31
30
31
30
31
}
{
0
31
29
31
30
31
30
31
31
30
31
30
31
}
}
;
/
/
Steps
1
-
4
.
return
daysInMonth
[
IsISOLeapYear
(
year
)
]
[
month
]
;
}
/
*
*
*
ISODaysInMonth
(
year
month
)
*
/
int32_t
js
:
:
temporal
:
:
ISODaysInMonth
(
int32_t
year
int32_t
month
)
{
return
:
:
ISODaysInMonth
(
year
month
)
;
}
/
*
*
*
ISODaysInMonth
(
year
month
)
*
/
int32_t
js
:
:
temporal
:
:
ISODaysInMonth
(
double
year
int32_t
month
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
static
constexpr
uint8_t
daysInMonth
[
2
]
[
13
]
=
{
{
0
31
28
31
30
31
30
31
31
30
31
30
31
}
{
0
31
29
31
30
31
30
31
31
30
31
30
31
}
}
;
/
/
Steps
1
-
4
.
return
daysInMonth
[
IsISOLeapYear
(
year
)
]
[
month
]
;
}
/
*
*
*
21
.
4
.
1
.
6
Week
Day
*
*
Compute
the
week
day
from
|
day
|
without
first
expanding
|
day
|
into
a
full
*
date
through
|
MakeDate
(
day
0
)
|
:
*
*
WeekDay
(
MakeDate
(
day
0
)
)
*
=
WeekDay
(
day
msPerDay
+
0
)
*
=
WeekDay
(
day
msPerDay
)
*
=
(
(
Day
(
day
msPerDay
)
+
4
)
modulo
7
)
*
=
(
(
(
floor
(
(
(
day
msPerDay
)
/
msPerDay
)
)
)
+
4
)
modulo
7
)
*
=
(
(
(
floor
(
(
day
)
)
)
+
4
)
modulo
7
)
*
=
(
(
(
day
)
+
4
)
modulo
7
)
*
/
static
int32_t
WeekDay
(
int32_t
day
)
{
int32_t
result
=
(
day
+
4
)
%
7
;
if
(
result
<
0
)
{
result
+
=
7
;
}
return
result
;
}
/
*
*
*
ToISODayOfWeek
(
year
month
day
)
*
/
static
int32_t
ToISODayOfWeek
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
/
/
Steps
1
-
3
.
(
Not
applicable
in
our
implementation
.
)
/
/
TODO
:
Check
if
ES
MakeDate
+
WeekDay
is
efficient
enough
.
/
/
/
/
https
:
/
/
en
.
wikipedia
.
org
/
wiki
/
Determination_of_the_day_of_the_week
#
Methods_in_computer_code
/
/
Step
4
.
int32_t
day
=
MakeDay
(
date
)
;
/
/
Step
5
.
int32_t
weekday
=
WeekDay
(
day
)
;
return
weekday
!
=
0
?
weekday
:
7
;
}
static
constexpr
auto
FirstDayOfMonth
(
int32_t
year
)
{
/
/
The
following
array
contains
the
day
of
year
for
the
first
day
of
each
/
/
month
where
index
0
is
January
and
day
0
is
January
1
.
std
:
:
array
<
int32_t
13
>
days
=
{
}
;
for
(
int32_t
month
=
1
;
month
<
=
12
;
+
+
month
)
{
days
[
month
]
=
days
[
month
-
1
]
+
:
:
ISODaysInMonth
(
year
month
)
;
}
return
days
;
}
/
*
*
*
ToISODayOfYear
(
year
month
day
)
*
/
static
int32_t
ToISODayOfYear
(
int32_t
year
int32_t
month
int32_t
day
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
/
/
First
day
of
month
arrays
for
non
-
leap
and
leap
years
.
constexpr
decltype
(
FirstDayOfMonth
(
0
)
)
firstDayOfMonth
[
2
]
=
{
FirstDayOfMonth
(
1
)
FirstDayOfMonth
(
0
)
}
;
/
/
Steps
1
-
3
.
(
Not
applicable
in
our
implementation
.
)
/
/
Steps
4
-
5
.
/
/
/
/
Instead
of
first
computing
the
date
and
then
using
DayWithinYear
to
map
the
/
/
date
to
the
day
within
the
year
directly
lookup
the
first
day
of
the
month
/
/
and
then
add
the
additional
days
.
return
firstDayOfMonth
[
IsISOLeapYear
(
year
)
]
[
month
-
1
]
+
day
;
}
/
*
*
*
ToISODayOfYear
(
year
month
day
)
*
/
int32_t
js
:
:
temporal
:
:
ToISODayOfYear
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
/
/
Steps
1
-
5
.
auto
&
[
year
month
day
]
=
date
;
return
:
:
ToISODayOfYear
(
year
month
day
)
;
}
static
int32_t
FloorDiv
(
int32_t
dividend
int32_t
divisor
)
{
MOZ_ASSERT
(
divisor
>
0
)
;
int32_t
quotient
=
dividend
/
divisor
;
int32_t
remainder
=
dividend
%
divisor
;
if
(
remainder
<
0
)
{
quotient
-
=
1
;
}
return
quotient
;
}
/
*
*
*
21
.
4
.
1
.
3
Year
Number
DayFromYear
*
/
static
int32_t
DayFromYear
(
int32_t
year
)
{
return
365
*
(
year
-
1970
)
+
FloorDiv
(
year
-
1969
4
)
-
FloorDiv
(
year
-
1901
100
)
+
FloorDiv
(
year
-
1601
400
)
;
}
/
*
*
*
21
.
4
.
1
.
11
MakeTime
(
hour
min
sec
ms
)
*
/
static
int64_t
MakeTime
(
const
PlainTime
&
time
)
{
MOZ_ASSERT
(
IsValidTime
(
time
)
)
;
/
/
Step
1
(
Not
applicable
)
.
/
/
Step
2
.
int64_t
h
=
time
.
hour
;
/
/
Step
3
.
int64_t
m
=
time
.
minute
;
/
/
Step
4
.
int64_t
s
=
time
.
second
;
/
/
Step
5
.
int64_t
milli
=
time
.
millisecond
;
/
/
Steps
6
-
7
.
return
h
*
ToMilliseconds
(
TemporalUnit
:
:
Hour
)
+
m
*
ToMilliseconds
(
TemporalUnit
:
:
Minute
)
+
s
*
ToMilliseconds
(
TemporalUnit
:
:
Second
)
+
milli
;
}
/
*
*
*
21
.
4
.
1
.
12
MakeDay
(
year
month
date
)
*
/
int32_t
js
:
:
temporal
:
:
MakeDay
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
return
DayFromYear
(
date
.
year
)
+
ToISODayOfYear
(
date
)
-
1
;
}
/
*
*
*
21
.
4
.
1
.
13
MakeDate
(
day
time
)
*
/
int64_t
js
:
:
temporal
:
:
MakeDate
(
const
PlainDateTime
&
dateTime
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
/
/
Step
1
(
Not
applicable
)
.
/
/
Steps
2
-
3
.
int64_t
tv
=
MakeDay
(
dateTime
.
date
)
*
ToMilliseconds
(
TemporalUnit
:
:
Day
)
+
MakeTime
(
dateTime
.
time
)
;
/
/
Step
4
.
return
tv
;
}
/
*
*
*
21
.
4
.
1
.
12
MakeDay
(
year
month
date
)
*
/
static
int32_t
MakeDay
(
int32_t
year
int32_t
month
int32_t
day
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
/
/
FIXME
:
spec
issue
-
what
should
happen
for
invalid
years
/
days
?
return
DayFromYear
(
year
)
+
:
:
ToISODayOfYear
(
year
month
day
)
-
1
;
}
/
*
*
*
21
.
4
.
1
.
13
MakeDate
(
day
time
)
*
/
int64_t
js
:
:
temporal
:
:
MakeDate
(
int32_t
year
int32_t
month
int32_t
day
)
{
/
/
NOTE
:
This
version
accepts
values
outside
the
valid
date
-
time
limits
.
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
/
/
Step
1
(
Not
applicable
)
.
/
/
Steps
2
-
3
.
int64_t
tv
=
:
:
MakeDay
(
year
month
day
)
*
ToMilliseconds
(
TemporalUnit
:
:
Day
)
;
/
/
Step
4
.
return
tv
;
}
struct
YearWeek
final
{
int32_t
year
=
0
;
int32_t
week
=
0
;
}
;
/
*
*
*
ToISOWeekOfYear
(
year
month
day
)
*
/
static
YearWeek
ToISOWeekOfYear
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
auto
&
[
year
month
day
]
=
date
;
/
/
TODO
:
https
:
/
/
en
.
wikipedia
.
org
/
wiki
/
Week
#
The_ISO_week_date_system
/
/
TODO
:
https
:
/
/
en
.
wikipedia
.
org
/
wiki
/
ISO_week_date
#
Algorithms
/
/
Steps
1
-
3
.
(
Not
applicable
in
our
implementation
.
)
/
/
Steps
4
-
5
.
int32_t
doy
=
ToISODayOfYear
(
date
)
;
int32_t
dow
=
ToISODayOfWeek
(
date
)
;
int32_t
woy
=
(
10
+
doy
-
dow
)
/
7
;
MOZ_ASSERT
(
0
<
=
woy
&
&
woy
<
=
53
)
;
/
/
An
ISO
year
has
53
weeks
if
the
year
starts
on
a
Thursday
or
if
it
'
s
a
/
/
leap
year
which
starts
on
a
Wednesday
.
auto
isLongYear
=
[
]
(
int32_t
year
)
{
int32_t
startOfYear
=
ToISODayOfWeek
(
{
year
1
1
}
)
;
return
startOfYear
=
=
4
|
|
(
startOfYear
=
=
3
&
&
IsISOLeapYear
(
year
)
)
;
}
;
/
/
Part
of
last
year
'
s
last
week
which
is
either
week
52
or
week
53
.
if
(
woy
=
=
0
)
{
return
{
year
-
1
52
+
int32_t
(
isLongYear
(
year
-
1
)
)
}
;
}
/
/
Part
of
next
year
'
s
first
week
if
the
current
year
isn
'
t
a
long
year
.
if
(
woy
=
=
53
&
&
!
isLongYear
(
year
)
)
{
return
{
year
+
1
1
}
;
}
return
{
year
woy
}
;
}
/
*
*
*
ISOMonthCode
(
month
)
*
/
static
JSString
*
ISOMonthCode
(
JSContext
*
cx
int32_t
month
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
/
/
Steps
1
-
2
.
char
monthCode
[
3
]
=
{
'
M
'
char
(
'
0
'
+
(
month
/
10
)
)
char
(
'
0
'
+
(
month
%
10
)
)
}
;
return
NewStringCopyN
<
CanGC
>
(
cx
monthCode
std
:
:
size
(
monthCode
)
)
;
}
template
<
typename
T
typename
.
.
.
Ts
>
static
bool
ToPlainDate
(
JSObject
*
temporalDateLike
PlainDate
*
result
)
{
if
(
auto
*
obj
=
temporalDateLike
-
>
maybeUnwrapIf
<
T
>
(
)
)
{
*
result
=
ToPlainDate
(
obj
)
;
return
true
;
}
if
constexpr
(
sizeof
.
.
.
(
Ts
)
>
0
)
{
return
ToPlainDate
<
Ts
.
.
.
>
(
temporalDateLike
result
)
;
}
return
false
;
}
template
<
typename
.
.
.
Ts
>
static
bool
ToPlainDate
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
PlainDate
*
result
)
{
if
(
temporalDateLike
.
isObject
(
)
)
{
if
(
ToPlainDate
<
Ts
.
.
.
>
(
&
temporalDateLike
.
toObject
(
)
result
)
)
{
return
true
;
}
}
return
ToTemporalDate
(
cx
temporalDateLike
result
)
;
}
#
ifdef
DEBUG
template
<
typename
CharT
>
static
bool
StringIsAsciiLowerCase
(
mozilla
:
:
Range
<
CharT
>
str
)
{
return
std
:
:
all_of
(
str
.
begin
(
)
.
get
(
)
str
.
end
(
)
.
get
(
)
[
]
(
CharT
ch
)
{
return
mozilla
:
:
IsAscii
(
ch
)
&
&
!
mozilla
:
:
IsAsciiUppercaseAlpha
(
ch
)
;
}
)
;
}
static
bool
StringIsAsciiLowerCase
(
JSLinearString
*
str
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
return
str
-
>
hasLatin1Chars
(
)
?
StringIsAsciiLowerCase
(
str
-
>
latin1Range
(
nogc
)
)
:
StringIsAsciiLowerCase
(
str
-
>
twoByteRange
(
nogc
)
)
;
}
#
endif
static
bool
IsISOCalendar
(
JSContext
*
cx
JSString
*
id
bool
*
result
)
{
JSLinearString
*
linear
=
id
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
*
result
=
StringEqualsLiteral
(
linear
"
iso8601
"
)
;
return
true
;
}
/
*
*
*
IsBuiltinCalendar
(
id
)
*
/
static
bool
IsBuiltinCalendar
(
JSLinearString
*
id
)
{
/
/
Callers
must
convert
to
lower
case
.
MOZ_ASSERT
(
StringIsAsciiLowerCase
(
id
)
)
;
/
/
Steps
1
-
3
.
return
StringEqualsLiteral
(
id
"
iso8601
"
)
;
}
static
JSLinearString
*
ThrowIfNotBuiltinCalendar
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
id
)
{
if
(
!
StringIsAscii
(
id
)
)
{
if
(
auto
chars
=
QuoteString
(
cx
id
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_ID
chars
.
get
(
)
)
;
}
return
nullptr
;
}
JSString
*
lower
=
StringToLowerCase
(
cx
id
)
;
if
(
!
lower
)
{
return
nullptr
;
}
JSLinearString
*
linear
=
lower
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
nullptr
;
}
if
(
!
IsBuiltinCalendar
(
linear
)
)
{
if
(
auto
chars
=
QuoteString
(
cx
id
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_ID
chars
.
get
(
)
)
;
}
return
nullptr
;
}
return
linear
;
}
/
*
*
*
CreateTemporalCalendar
(
identifier
[
newTarget
]
)
*
/
static
CalendarObject
*
CreateTemporalCalendar
(
JSContext
*
cx
const
CallArgs
&
args
Handle
<
JSLinearString
*
>
identifier
)
{
/
/
Step
1
.
MOZ_ASSERT
(
IsBuiltinCalendar
(
identifier
)
)
;
/
/
Steps
2
-
3
.
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Calendar
&
proto
)
)
{
return
nullptr
;
}
auto
*
obj
=
NewObjectWithClassProto
<
CalendarObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
nullptr
;
}
/
/
Step
4
.
obj
-
>
setFixedSlot
(
CalendarObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
/
/
Step
5
.
return
obj
;
}
/
*
*
*
CreateTemporalCalendar
(
identifier
[
newTarget
]
)
*
/
static
CalendarObject
*
CreateTemporalCalendar
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
identifier
)
{
/
/
Step
1
.
MOZ_ASSERT
(
IsBuiltinCalendar
(
identifier
)
)
;
/
/
Steps
2
-
3
.
auto
*
obj
=
NewBuiltinClassInstance
<
CalendarObject
>
(
cx
)
;
if
(
!
obj
)
{
return
nullptr
;
}
/
/
Step
4
.
obj
-
>
setFixedSlot
(
CalendarObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
/
/
Step
5
.
return
obj
;
}
/
*
*
*
GetISO8601Calendar
(
)
*
/
CalendarObject
*
js
:
:
temporal
:
:
GetISO8601Calendar
(
JSContext
*
cx
)
{
/
/
Step
1
.
(
Inlined
call
to
GetBuiltinCalendar
.
)
Handle
<
JSLinearString
*
>
id
=
cx
-
>
names
(
)
.
iso8601
.
toHandle
(
)
;
return
CreateTemporalCalendar
(
cx
id
)
;
}
template
<
typename
T
typename
.
.
.
Ts
>
static
bool
ToTemporalCalendar
(
JSContext
*
cx
Handle
<
JSObject
*
>
object
MutableHandle
<
JSObject
*
>
result
)
{
if
(
auto
*
unwrapped
=
object
-
>
maybeUnwrapIf
<
T
>
(
)
)
{
if
constexpr
(
std
:
:
is_same_v
<
T
PlainTimeObject
>
)
{
AutoRealm
ar
(
cx
unwrapped
)
;
Rooted
<
PlainTimeObject
*
>
plainTime
(
cx
unwrapped
)
;
auto
*
calendar
=
PlainTimeObject
:
:
getOrCreateCalendar
(
cx
plainTime
)
;
if
(
!
calendar
)
{
return
false
;
}
result
.
set
(
calendar
)
;
}
else
{
result
.
set
(
unwrapped
-
>
calendar
(
)
)
;
}
return
cx
-
>
compartment
(
)
-
>
wrap
(
cx
result
)
;
}
if
constexpr
(
sizeof
.
.
.
(
Ts
)
>
0
)
{
return
ToTemporalCalendar
<
Ts
.
.
.
>
(
cx
object
result
)
;
}
result
.
set
(
nullptr
)
;
return
true
;
}
/
*
*
*
ToTemporalCalendar
(
temporalCalendarLike
)
*
/
JSObject
*
js
:
:
temporal
:
:
ToTemporalCalendar
(
JSContext
*
cx
Handle
<
Value
>
temporalCalendarLike
)
{
/
/
Step
1
.
Rooted
<
Value
>
calendarLike
(
cx
temporalCalendarLike
)
;
if
(
calendarLike
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
obj
(
cx
&
calendarLike
.
toObject
(
)
)
;
/
/
Step
1
.
a
.
if
(
obj
-
>
canUnwrapAs
<
CalendarObject
>
(
)
)
{
return
obj
;
}
/
/
Step
1
.
b
.
Rooted
<
JSObject
*
>
calendar
(
cx
)
;
if
(
!
:
:
ToTemporalCalendar
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
PlainTimeObject
PlainYearMonthObject
ZonedDateTimeObject
>
(
cx
obj
&
calendar
)
)
{
return
nullptr
;
}
if
(
calendar
)
{
return
calendar
;
}
/
/
Step
1
.
c
.
if
(
obj
-
>
canUnwrapAs
<
TimeZoneObject
>
(
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_OBJECT
"
Temporal
.
Calendar
"
"
Temporal
.
TimeZone
"
)
;
return
nullptr
;
}
/
/
Step
1
.
d
.
bool
hasCalendar
;
if
(
!
HasProperty
(
cx
obj
cx
-
>
names
(
)
.
calendar
&
hasCalendar
)
)
{
return
nullptr
;
}
if
(
!
hasCalendar
)
{
return
obj
;
}
/
/
Step
1
.
e
.
if
(
!
GetProperty
(
cx
obj
obj
cx
-
>
names
(
)
.
calendar
&
calendarLike
)
)
{
return
nullptr
;
}
/
/
Step
1
.
f
.
if
(
calendarLike
.
isObject
(
)
)
{
obj
=
&
calendarLike
.
toObject
(
)
;
/
/
FIXME
:
spec
issue
-
does
this
check
is
actually
useful
?
In
which
case
/
/
will
have
a
"
calendar
"
property
be
a
TimeZoneObject
?
/
/
Step
1
.
f
.
i
.
if
(
obj
-
>
canUnwrapAs
<
TimeZoneObject
>
(
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_OBJECT
"
Temporal
.
Calendar
"
"
Temporal
.
TimeZone
"
)
;
return
nullptr
;
}
/
/
FIXME
:
spec
issue
-
does
this
check
is
actually
useful
?
In
which
case
/
/
will
have
a
"
calendar
"
property
have
another
"
calendar
"
property
?
/
/
Step
1
.
f
.
ii
.
if
(
!
HasProperty
(
cx
obj
cx
-
>
names
(
)
.
calendar
&
hasCalendar
)
)
{
return
nullptr
;
}
if
(
!
hasCalendar
)
{
return
obj
;
}
}
}
/
/
Step
2
.
Rooted
<
JSString
*
>
str
(
cx
JS
:
:
ToString
(
cx
calendarLike
)
)
;
if
(
!
str
)
{
return
nullptr
;
}
/
/
Step
3
.
Rooted
<
JSLinearString
*
>
identifier
(
cx
ParseTemporalCalendarString
(
cx
str
)
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
/
/
Step
4
.
identifier
=
ThrowIfNotBuiltinCalendar
(
cx
identifier
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
/
/
Step
5
.
return
CreateTemporalCalendar
(
cx
identifier
)
;
}
/
*
*
*
ToTemporalCalendarWithISODefault
(
temporalCalendarLike
)
*
/
JSObject
*
js
:
:
temporal
:
:
ToTemporalCalendarWithISODefault
(
JSContext
*
cx
Handle
<
Value
>
temporalCalendarLike
)
{
/
/
Step
1
.
if
(
temporalCalendarLike
.
isUndefined
(
)
)
{
return
GetISO8601Calendar
(
cx
)
;
}
/
/
Step
2
.
return
ToTemporalCalendar
(
cx
temporalCalendarLike
)
;
}
/
*
*
*
GetTemporalCalendarWithISODefault
(
item
)
*
/
JSObject
*
js
:
:
temporal
:
:
GetTemporalCalendarWithISODefault
(
JSContext
*
cx
Handle
<
JSObject
*
>
item
)
{
/
/
Step
1
.
Rooted
<
JSObject
*
>
calendar
(
cx
)
;
if
(
!
:
:
ToTemporalCalendar
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
PlainTimeObject
PlainYearMonthObject
ZonedDateTimeObject
>
(
cx
item
&
calendar
)
)
{
return
nullptr
;
}
if
(
calendar
)
{
return
calendar
;
}
/
/
Step
2
.
Rooted
<
Value
>
calendarValue
(
cx
)
;
if
(
!
GetProperty
(
cx
item
item
cx
-
>
names
(
)
.
calendar
&
calendarValue
)
)
{
return
nullptr
;
}
/
/
Step
3
.
return
ToTemporalCalendarWithISODefault
(
cx
calendarValue
)
;
}
#
ifdef
DEBUG
static
bool
IsDateLike
(
const
Value
&
value
)
{
if
(
!
value
.
isObject
(
)
)
{
return
false
;
}
JSObject
*
obj
=
&
value
.
toObject
(
)
;
return
obj
-
>
canUnwrapAs
<
PlainDateTimeObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
;
}
static
bool
IsDateLikeWithYear
(
const
Value
&
value
)
{
if
(
!
value
.
isObject
(
)
)
{
return
false
;
}
JSObject
*
obj
=
&
value
.
toObject
(
)
;
return
obj
-
>
canUnwrapAs
<
PlainDateTimeObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainYearMonthObject
>
(
)
;
}
static
bool
IsDateLikeWithMonth
(
const
Value
&
value
)
{
if
(
!
value
.
isObject
(
)
)
{
return
false
;
}
JSObject
*
obj
=
&
value
.
toObject
(
)
;
return
obj
-
>
canUnwrapAs
<
PlainDateTimeObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainYearMonthObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainMonthDayObject
>
(
)
;
}
static
bool
IsDateLikeWithDay
(
const
Value
&
value
)
{
if
(
!
value
.
isObject
(
)
)
{
return
false
;
}
JSObject
*
obj
=
&
value
.
toObject
(
)
;
return
obj
-
>
canUnwrapAs
<
PlainDateTimeObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
|
|
obj
-
>
canUnwrapAs
<
PlainMonthDayObject
>
(
)
;
}
#
endif
static
bool
ToIntegerIfIntegralNumber
(
JSContext
*
cx
Handle
<
Value
>
value
const
char
*
name
MutableHandle
<
Value
>
result
)
{
if
(
MOZ_LIKELY
(
value
.
isInt32
(
)
)
)
{
result
.
set
(
value
)
;
return
true
;
}
if
(
value
.
isDouble
(
)
)
{
double
d
=
value
.
toDouble
(
)
;
if
(
js
:
:
IsInteger
(
d
)
)
{
result
.
setNumber
(
d
)
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_INTEGER
name
)
;
return
false
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_UNEXPECTED_TYPE
name
"
not
a
number
"
)
;
return
false
;
}
static
bool
ToPositiveIntegerIfIntegralNumber
(
JSContext
*
cx
Handle
<
Value
>
value
const
char
*
name
MutableHandle
<
Value
>
result
)
{
if
(
!
ToIntegerIfIntegralNumber
(
cx
value
name
result
)
)
{
return
false
;
}
if
(
result
.
toNumber
(
)
<
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_NUMBER
name
)
;
return
false
;
}
return
true
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
year
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
result
.
setInt32
(
date
.
year
)
;
return
true
;
}
static
bool
Calendar_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
year
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_year
)
)
{
return
BuiltinCalendarYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
4
.
return
ToIntegerIfIntegralNumber
(
cx
result
"
year
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
month
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarMonth
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
if
(
temporalDateLike
.
isObject
(
)
&
&
temporalDateLike
.
toObject
(
)
.
canUnwrapAs
<
PlainMonthDayObject
>
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
temporalDateLike
nullptr
"
a
PlainMonthDay
object
"
)
;
return
false
;
}
/
/
Step
5
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
6
-
7
.
result
.
setInt32
(
date
.
month
)
;
return
true
;
}
static
bool
Calendar_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarMonth
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarMonth
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
month
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_month
)
)
{
return
BuiltinCalendarMonth
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
month
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthCode
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarMonthCode
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
JSString
*
str
=
ISOMonthCode
(
cx
date
.
month
)
;
if
(
!
str
)
{
return
false
;
}
result
.
setString
(
str
)
;
return
true
;
}
static
bool
Calendar_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarMonthCode
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarMonthCode
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithMonth
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
monthCode
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_monthCode
)
)
{
return
BuiltinCalendarMonthCode
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
result
.
isString
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_UNEXPECTED_TYPE
"
monthCode
"
"
not
a
string
"
)
;
return
false
;
}
/
/
Step
3
.
return
true
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
day
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDay
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
result
.
setInt32
(
date
.
day
)
;
return
true
;
}
static
bool
Calendar_day
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDay
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDay
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithDay
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
day
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_day
)
)
{
return
BuiltinCalendarDay
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
day
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfWeek
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDayOfWeek
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToTemporalDate
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
9
.
result
.
setInt32
(
ToISODayOfWeek
(
date
)
)
;
return
true
;
}
static
bool
Calendar_dayOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDayOfWeek
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDayOfWeek
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLike
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
dayOfWeek
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_dayOfWeek
)
)
{
return
BuiltinCalendarDayOfWeek
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
dayOfWeek
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfYear
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDayOfYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToTemporalDate
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
7
.
result
.
setInt32
(
ToISODayOfYear
(
date
)
)
;
return
true
;
}
static
bool
Calendar_dayOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDayOfYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDayOfYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLike
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
dayOfYear
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_dayOfYear
)
)
{
return
BuiltinCalendarDayOfYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
dayOfYear
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
weekOfYear
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarWeekOfYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToTemporalDate
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
result
.
setInt32
(
ToISOWeekOfYear
(
date
)
.
week
)
;
return
true
;
}
static
bool
Calendar_weekOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarWeekOfYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarWeekOfYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLike
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
weekOfYear
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_weekOfYear
)
)
{
return
BuiltinCalendarWeekOfYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
weekOfYear
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
yearOfWeek
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarYearOfWeek
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToTemporalDate
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
result
.
setInt32
(
ToISOWeekOfYear
(
date
)
.
year
)
;
return
true
;
}
static
bool
Calendar_yearOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarYearOfWeek
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarYearOfWeek
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLike
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
yearOfWeek
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_yearOfWeek
)
)
{
return
BuiltinCalendarYearOfWeek
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
4
.
return
ToIntegerIfIntegralNumber
(
cx
result
"
yearOfWeek
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInWeek
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDaysInWeek
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToTemporalDate
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Step
5
.
result
.
setInt32
(
7
)
;
return
true
;
}
static
bool
Calendar_daysInWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDaysInWeek
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDaysInWeek
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLike
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
daysInWeek
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_daysInWeek
)
)
{
return
BuiltinCalendarDaysInWeek
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
daysInWeek
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInMonth
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDaysInMonth
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Step
5
.
result
.
setInt32
(
:
:
ISODaysInMonth
(
date
.
year
date
.
month
)
)
;
return
true
;
}
static
bool
Calendar_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDaysInMonth
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDaysInMonth
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
daysInMonth
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_daysInMonth
)
)
{
return
BuiltinCalendarDaysInMonth
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
daysInMonth
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInYear
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarDaysInYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Step
5
.
result
.
setInt32
(
ISODaysInYear
(
date
.
year
)
)
;
return
true
;
}
static
bool
Calendar_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarDaysInYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarDaysInYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
daysInYear
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_daysInYear
)
)
{
return
BuiltinCalendarDaysInYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
daysInYear
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthsInYear
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarMonthsInYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Step
5
.
result
.
setInt32
(
12
)
;
return
true
;
}
static
bool
Calendar_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarMonthsInYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarMonthsInYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
monthsInYear
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_monthsInYear
)
)
{
return
BuiltinCalendarMonthsInYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Steps
2
-
5
.
return
ToPositiveIntegerIfIntegralNumber
(
cx
result
"
monthsInYear
"
result
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
inLeapYear
(
temporalDateLike
)
*
/
static
bool
BuiltinCalendarInLeapYear
(
JSContext
*
cx
Handle
<
Value
>
temporalDateLike
MutableHandle
<
Value
>
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
.
)
/
/
Step
4
.
PlainDate
date
;
if
(
!
ToPlainDate
<
PlainDateObject
PlainDateTimeObject
PlainYearMonthObject
>
(
cx
temporalDateLike
&
date
)
)
{
return
false
;
}
/
/
Steps
5
-
6
.
result
.
setBoolean
(
IsISOLeapYear
(
date
.
year
)
)
;
return
true
;
}
static
bool
Calendar_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
/
*
*
*
CalendarInLeapYear
(
calendar
dateLike
)
*
/
bool
js
:
:
temporal
:
:
CalendarInLeapYear
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
Value
>
dateLike
MutableHandle
<
Value
>
result
)
{
MOZ_ASSERT
(
IsDateLikeWithYear
(
dateLike
)
)
;
/
/
Step
1
.
Rooted
<
Value
>
fn
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
calendar
cx
-
>
names
(
)
.
inLeapYear
&
fn
)
)
{
return
false
;
}
/
/
Fast
-
path
for
the
default
implementation
.
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
IsNativeFunction
(
fn
Calendar_inLeapYear
)
)
{
return
BuiltinCalendarInLeapYear
(
cx
dateLike
result
)
;
}
if
(
!
Call
(
cx
fn
calendar
dateLike
result
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
result
.
isBoolean
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_UNEXPECTED_TYPE
"
inLeapYear
"
"
not
a
boolean
"
)
;
return
false
;
}
/
/
Step
3
.
return
true
;
}
/
*
*
*
MaybeFormatCalendarAnnotation
(
calendarObject
showCalendar
)
*
/
bool
js
:
:
temporal
:
:
MaybeFormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
Handle
<
JSObject
*
>
calendarObject
CalendarOption
showCalendar
)
{
/
/
Step
1
.
if
(
showCalendar
=
=
CalendarOption
:
:
Never
)
{
return
true
;
}
/
/
Step
2
.
(
Not
applicable
in
our
implementation
.
)
/
/
Step
3
.
Rooted
<
JSString
*
>
calendarID
(
cx
CalendarToString
(
cx
calendarObject
)
)
;
if
(
!
calendarID
)
{
return
false
;
}
/
/
Step
4
.
return
FormatCalendarAnnotation
(
cx
result
calendarID
showCalendar
)
;
}
/
*
*
*
FormatCalendarAnnotation
(
id
showCalendar
)
*
/
bool
js
:
:
temporal
:
:
FormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
Handle
<
JSString
*
>
id
CalendarOption
showCalendar
)
{
switch
(
showCalendar
)
{
case
CalendarOption
:
:
Never
:
return
true
;
case
CalendarOption
:
:
Auto
:
{
JSLinearString
*
linear
=
id
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
if
(
StringEqualsLiteral
(
linear
"
iso8601
"
)
)
{
return
true
;
}
[
[
fallthrough
]
]
;
}
case
CalendarOption
:
:
Always
:
{
if
(
!
result
.
append
(
"
[
u
-
ca
=
"
)
)
{
return
false
;
}
break
;
}
case
CalendarOption
:
:
Critical
:
{
if
(
!
result
.
append
(
"
[
!
u
-
ca
=
"
)
)
{
return
false
;
}
break
;
}
}
if
(
!
result
.
append
(
id
)
)
{
return
false
;
}
if
(
!
result
.
append
(
'
]
'
)
)
{
return
false
;
}
return
true
;
}
static
bool
Calendar_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
JSString
*
js
:
:
temporal
:
:
CalendarToString
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
)
{
if
(
calendar
-
>
is
<
CalendarObject
>
(
)
&
&
HasNoToPrimitiveMethodPure
(
calendar
cx
)
&
&
HasNativeMethodPure
(
calendar
cx
-
>
names
(
)
.
toString
Calendar_toString
cx
)
)
{
JSString
*
id
=
calendar
-
>
as
<
CalendarObject
>
(
)
.
identifier
(
)
;
MOZ_ASSERT
(
id
)
;
return
id
;
}
Rooted
<
Value
>
calendarValue
(
cx
ObjectValue
(
*
calendar
)
)
;
return
JS
:
:
ToString
(
cx
calendarValue
)
;
}
/
*
*
*
Temporal
.
Calendar
(
id
)
*
/
static
bool
CalendarConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
/
/
Step
1
.
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
Calendar
"
)
)
{
return
false
;
}
/
/
Step
2
.
JSString
*
id
=
JS
:
:
ToString
(
cx
args
.
get
(
0
)
)
;
if
(
!
id
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
linear
(
cx
id
-
>
ensureLinear
(
cx
)
)
;
if
(
!
linear
)
{
return
false
;
}
/
/
Step
3
.
linear
=
ThrowIfNotBuiltinCalendar
(
cx
linear
)
;
if
(
!
linear
)
{
return
false
;
}
/
/
Step
4
.
auto
*
calendar
=
CreateTemporalCalendar
(
cx
args
linear
)
;
if
(
!
calendar
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
calendar
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Calendar
.
prototype
.
id
*
/
static
bool
Calendar_id
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
/
/
Step
3
.
args
.
rval
(
)
.
setString
(
calendar
-
>
identifier
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Calendar
.
prototype
.
id
*
/
static
bool
Calendar_id
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_id
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
year
(
temporalDateLike
)
*
/
static
bool
Calendar_year
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
year
(
temporalDateLike
)
*
/
static
bool
Calendar_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_year
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
month
(
temporalDateLike
)
*
/
static
bool
Calendar_month
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarMonth
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
month
(
temporalDateLike
)
*
/
static
bool
Calendar_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_month
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthCode
(
temporalDateLike
)
*
/
static
bool
Calendar_monthCode
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarMonthCode
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthCode
(
temporalDateLike
)
*
/
static
bool
Calendar_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_monthCode
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
day
(
temporalDateLike
)
*
/
static
bool
Calendar_day
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarDay
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
day
(
temporalDateLike
)
*
/
static
bool
Calendar_day
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_day
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_dayOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
9
.
return
BuiltinCalendarDayOfWeek
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_dayOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_dayOfWeek
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfYear
(
temporalDateLike
)
*
/
static
bool
Calendar_dayOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
7
.
return
BuiltinCalendarDayOfYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
dayOfYear
(
temporalDateLike
)
*
/
static
bool
Calendar_dayOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_dayOfYear
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
weekOfYear
(
temporalDateLike
)
*
/
static
bool
Calendar_weekOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarWeekOfYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
weekOfYear
(
temporalDateLike
)
*
/
static
bool
Calendar_weekOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_weekOfYear
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
yearOfWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_yearOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarYearOfWeek
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
yearOfWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_yearOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_yearOfWeek
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
5
.
return
BuiltinCalendarDaysInWeek
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInWeek
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_daysInWeek
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInMonth
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
5
.
return
BuiltinCalendarDaysInMonth
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInMonth
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_daysInMonth
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInYear
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
5
.
return
BuiltinCalendarDaysInYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
daysInYear
(
temporalDateLike
)
*
/
static
bool
Calendar_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_daysInYear
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthsInYear
(
temporalDateLike
)
*
/
static
bool
Calendar_monthsInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
5
.
return
BuiltinCalendarMonthsInYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
monthsInYear
(
temporalDateLike
)
*
/
static
bool
Calendar_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_monthsInYear
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
inLeapYear
(
temporalDateLike
)
*
/
static
bool
Calendar_inLeapYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
#
ifdef
DEBUG
/
/
Step
3
.
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
bool
isoCalendar
;
if
(
!
IsISOCalendar
(
cx
calendar
-
>
identifier
(
)
&
isoCalendar
)
)
{
return
false
;
}
MOZ_ASSERT
(
isoCalendar
)
;
#
endif
/
/
Steps
4
-
6
.
return
BuiltinCalendarInLeapYear
(
cx
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
inLeapYear
(
temporalDateLike
)
*
/
static
bool
Calendar_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_inLeapYear
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
toString
(
)
*
/
static
bool
Calendar_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
calendar
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
CalendarObject
>
(
)
;
/
/
Step
3
.
args
.
rval
(
)
.
setString
(
calendar
-
>
identifier
(
)
)
;
return
true
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
toString
(
)
*
/
static
bool
Calendar_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_toString
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
toJSON
(
)
*
/
static
bool
Calendar_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
JSObject
*
>
calendar
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
)
;
/
/
Step
3
.
JSString
*
str
=
CalendarToString
(
cx
calendar
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
/
*
*
*
Temporal
.
Calendar
.
prototype
.
toJSON
(
)
*
/
static
bool
Calendar_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsCalendar
Calendar_toJSON
>
(
cx
args
)
;
}
const
JSClass
CalendarObject
:
:
class_
=
{
"
Temporal
.
Calendar
"
JSCLASS_HAS_RESERVED_SLOTS
(
CalendarObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Calendar
)
JS_NULL_CLASS_OPS
&
CalendarObject
:
:
classSpec_
}
;
const
JSClass
&
CalendarObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
Calendar_methods
[
]
=
{
JS_FS_END
}
;
static
const
JSFunctionSpec
Calendar_prototype_methods
[
]
=
{
JS_FN
(
"
year
"
Calendar_year
1
0
)
JS_FN
(
"
month
"
Calendar_month
1
0
)
JS_FN
(
"
monthCode
"
Calendar_monthCode
1
0
)
JS_FN
(
"
day
"
Calendar_day
1
0
)
JS_FN
(
"
dayOfWeek
"
Calendar_dayOfWeek
1
0
)
JS_FN
(
"
dayOfYear
"
Calendar_dayOfYear
1
0
)
JS_FN
(
"
weekOfYear
"
Calendar_weekOfYear
1
0
)
JS_FN
(
"
yearOfWeek
"
Calendar_yearOfWeek
1
0
)
JS_FN
(
"
daysInWeek
"
Calendar_daysInWeek
1
0
)
JS_FN
(
"
daysInMonth
"
Calendar_daysInMonth
1
0
)
JS_FN
(
"
daysInYear
"
Calendar_daysInYear
1
0
)
JS_FN
(
"
monthsInYear
"
Calendar_monthsInYear
1
0
)
JS_FN
(
"
inLeapYear
"
Calendar_inLeapYear
1
0
)
JS_FN
(
"
toString
"
Calendar_toString
0
0
)
JS_FN
(
"
toJSON
"
Calendar_toJSON
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
Calendar_prototype_properties
[
]
=
{
JS_PSG
(
"
id
"
Calendar_id
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Calendar
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
CalendarObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
CalendarConstructor
1
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
CalendarObject
>
Calendar_methods
nullptr
Calendar_prototype_methods
Calendar_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
