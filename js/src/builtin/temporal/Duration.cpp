/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsDuration
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
DurationObject
>
(
)
;
}
#
ifdef
DEBUG
static
bool
IsIntegerOrInfinity
(
double
d
)
{
return
IsInteger
(
d
)
|
|
std
:
:
isinf
(
d
)
;
}
static
bool
IsIntegerOrInfinityDuration
(
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Integers
exceeding
the
Number
range
are
represented
as
infinity
.
return
IsIntegerOrInfinity
(
years
)
&
&
IsIntegerOrInfinity
(
months
)
&
&
IsIntegerOrInfinity
(
weeks
)
&
&
IsIntegerOrInfinity
(
days
)
&
&
IsIntegerOrInfinity
(
hours
)
&
&
IsIntegerOrInfinity
(
minutes
)
&
&
IsIntegerOrInfinity
(
seconds
)
&
&
IsIntegerOrInfinity
(
milliseconds
)
&
&
IsIntegerOrInfinity
(
microseconds
)
&
&
IsIntegerOrInfinity
(
nanoseconds
)
;
}
#
endif
/
*
*
*
DurationSign
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
int32_t
js
:
:
temporal
:
:
DurationSign
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
/
/
Step
1
.
a
.
if
(
v
<
0
)
{
return
-
1
;
}
/
/
Step
1
.
b
.
if
(
v
>
0
)
{
return
1
;
}
}
/
/
Step
2
.
return
0
;
}
/
*
*
*
IsValidDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
int32_t
sign
=
DurationSign
(
duration
)
;
/
/
Step
2
.
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
/
/
Step
2
.
a
.
if
(
!
std
:
:
isfinite
(
v
)
)
{
return
false
;
}
/
/
Step
2
.
b
.
if
(
v
<
0
&
&
sign
>
0
)
{
return
false
;
}
/
/
Step
2
.
c
.
if
(
v
>
0
&
&
sign
<
0
)
{
return
false
;
}
}
/
/
Step
3
.
return
true
;
}
/
*
*
*
IsValidDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
bool
js
:
:
temporal
:
:
ThrowIfInvalidDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
int32_t
sign
=
DurationSign
(
duration
)
;
auto
report
=
[
&
]
(
double
v
const
char
*
name
unsigned
errorNumber
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
v
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
errorNumber
name
numStr
)
;
}
;
auto
throwIfInvalid
=
[
&
]
(
double
v
const
char
*
name
)
{
/
/
Step
2
.
a
.
if
(
!
std
:
:
isfinite
(
v
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
return
false
;
}
/
/
Steps
2
.
b
-
c
.
if
(
(
v
<
0
&
&
sign
>
0
)
|
|
(
v
>
0
&
&
sign
<
0
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_SIGN
)
;
return
false
;
}
return
true
;
}
;
/
/
Step
2
.
if
(
!
throwIfInvalid
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
days
"
days
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
hours
"
hours
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
minutes
"
minutes
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
seconds
"
seconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
milliseconds
"
milliseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
microseconds
"
microseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
nanoseconds
"
nanoseconds
"
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
/
/
Step
3
.
return
true
;
}
/
*
*
*
CreateTemporalDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
[
newTarget
]
)
*
/
static
DurationObject
*
CreateTemporalDuration
(
JSContext
*
cx
const
CallArgs
&
args
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
/
/
Steps
2
-
3
.
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Duration
&
proto
)
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithClassProto
<
DurationObject
>
(
cx
proto
)
;
if
(
!
object
)
{
return
nullptr
;
}
/
/
Steps
4
-
13
.
/
/
Add
zero
to
convert
-
0
to
+
0
.
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
/
/
Step
14
.
return
object
;
}
/
*
*
*
CreateTemporalDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
[
newTarget
]
)
*
/
DurationObject
*
js
:
:
temporal
:
:
CreateTemporalDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
MOZ_ASSERT
(
IsInteger
(
years
)
)
;
MOZ_ASSERT
(
IsInteger
(
months
)
)
;
MOZ_ASSERT
(
IsInteger
(
weeks
)
)
;
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
IsInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
/
/
Step
1
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
/
/
Steps
2
-
3
.
auto
*
object
=
NewBuiltinClassInstance
<
DurationObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
/
/
Steps
4
-
13
.
/
/
Add
zero
to
convert
-
0
to
+
0
.
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
/
/
Step
14
.
return
object
;
}
/
*
*
*
ToIntegerIfIntegral
(
argument
)
*
/
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
const
char
*
name
Handle
<
Value
>
argument
double
*
num
)
{
/
/
Step
1
.
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
js
:
:
IsInteger
(
d
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
name
)
;
return
false
;
}
/
/
Step
3
.
*
num
=
d
;
return
true
;
}
/
*
*
*
ToIntegerIfIntegral
(
argument
)
*
/
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
Handle
<
PropertyName
*
>
name
Handle
<
Value
>
argument
double
*
result
)
{
/
/
Step
1
.
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
js
:
:
IsInteger
(
d
)
)
{
if
(
auto
nameStr
=
js
:
:
QuoteString
(
cx
name
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
nameStr
.
get
(
)
)
;
}
return
false
;
}
/
/
Step
3
.
*
result
=
d
;
return
true
;
}
/
*
*
*
ToTemporalPartialDurationRecord
(
temporalDurationLike
)
*
/
static
bool
ToTemporalPartialDurationRecord
(
JSContext
*
cx
Handle
<
JSObject
*
>
temporalDurationLike
Duration
*
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
in
our
implementation
.
)
Rooted
<
Value
>
value
(
cx
)
;
bool
any
=
false
;
auto
getDurationProperty
=
[
&
]
(
Handle
<
PropertyName
*
>
name
double
*
num
)
{
if
(
!
GetProperty
(
cx
temporalDurationLike
temporalDurationLike
name
&
value
)
)
{
return
false
;
}
if
(
!
value
.
isUndefined
(
)
)
{
any
=
true
;
if
(
!
ToIntegerIfIntegral
(
cx
name
value
num
)
)
{
return
false
;
}
}
return
true
;
}
;
/
/
Steps
4
-
23
.
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
days
&
result
-
>
days
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
hours
&
result
-
>
hours
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
microseconds
&
result
-
>
microseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
milliseconds
&
result
-
>
milliseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
minutes
&
result
-
>
minutes
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
months
&
result
-
>
months
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
nanoseconds
&
result
-
>
nanoseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
seconds
&
result
-
>
seconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
weeks
&
result
-
>
weeks
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
years
&
result
-
>
years
)
)
{
return
false
;
}
/
/
Step
24
.
if
(
!
any
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT
)
;
return
false
;
}
/
/
Step
25
.
return
true
;
}
/
*
*
*
ToTemporalDurationRecord
(
temporalDurationLike
)
*
/
bool
js
:
:
temporal
:
:
ToTemporalDurationRecord
(
JSContext
*
cx
Handle
<
Value
>
temporalDurationLike
Duration
*
result
)
{
/
/
Step
1
.
if
(
!
temporalDurationLike
.
isObject
(
)
)
{
/
/
Step
1
.
a
.
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
temporalDurationLike
)
)
;
if
(
!
string
)
{
return
false
;
}
/
/
Step
1
.
b
.
return
ParseTemporalDurationString
(
cx
string
result
)
;
}
Rooted
<
JSObject
*
>
durationLike
(
cx
&
temporalDurationLike
.
toObject
(
)
)
;
/
/
Step
2
.
if
(
auto
*
duration
=
durationLike
-
>
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
*
result
=
ToDuration
(
duration
)
;
return
true
;
}
/
/
Step
3
.
Duration
duration
=
{
}
;
/
/
Steps
4
-
14
.
if
(
!
ToTemporalPartialDurationRecord
(
cx
durationLike
&
duration
)
)
{
return
false
;
}
/
/
Step
15
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
false
;
}
/
/
Step
16
.
*
result
=
duration
;
return
true
;
}
/
*
*
*
ToTemporalDuration
(
item
)
*
/
Wrapped
<
DurationObject
*
>
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
/
/
Step
1
.
if
(
item
.
isObject
(
)
)
{
JSObject
*
itemObj
=
&
item
.
toObject
(
)
;
if
(
itemObj
-
>
canUnwrapAs
<
DurationObject
>
(
)
)
{
return
itemObj
;
}
}
/
/
Step
2
.
Duration
result
;
if
(
!
ToTemporalDurationRecord
(
cx
item
&
result
)
)
{
return
nullptr
;
}
/
/
Step
3
.
return
CreateTemporalDuration
(
cx
result
)
;
}
/
*
*
*
ToTemporalDuration
(
item
)
*
/
bool
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
Duration
*
result
)
{
auto
obj
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToDuration
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
/
*
*
*
TotalDurationNanoseconds
(
days
hours
minutes
seconds
milliseconds
*
microseconds
nanoseconds
offsetShift
)
*
/
static
mozilla
:
:
Maybe
<
int64_t
>
TotalDurationNanoseconds
(
const
Duration
&
duration
int64_t
offsetShift
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetShift
)
<
=
2
*
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
/
/
Step
2
.
int64_t
days
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
days
&
days
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
int64_t
hours
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
hours
&
hours
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
mozilla
:
:
CheckedInt64
result
=
days
;
result
*
=
24
;
result
+
=
hours
;
/
/
Step
3
.
int64_t
minutes
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
minutes
&
minutes
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
60
;
result
+
=
minutes
;
/
/
Step
4
.
int64_t
seconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
seconds
&
seconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
60
;
result
+
=
seconds
;
/
/
Step
5
.
int64_t
milliseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
milliseconds
&
milliseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
milliseconds
;
/
/
Step
6
.
int64_t
microseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
microseconds
&
microseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
microseconds
;
/
/
Step
7
.
int64_t
nanoseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
nanoseconds
&
nanoseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
nanoseconds
;
/
/
Step
1
.
if
(
days
!
=
0
)
{
result
-
=
offsetShift
;
}
/
/
Step
7
(
Return
)
.
if
(
!
result
.
isValid
(
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
return
mozilla
:
:
Some
(
result
.
value
(
)
)
;
}
/
*
*
*
TotalDurationNanoseconds
(
days
hours
minutes
seconds
milliseconds
*
microseconds
nanoseconds
offsetShift
)
*
/
static
BigInt
*
TotalDurationNanosecondsSlow
(
JSContext
*
cx
const
Duration
&
duration
int64_t
offsetShift
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetShift
)
<
=
2
*
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Rooted
<
BigInt
*
>
result
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
result
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
temp
(
cx
)
;
auto
multiplyAdd
=
[
&
]
(
int32_t
factor
double
number
)
{
temp
=
BigInt
:
:
createFromInt64
(
cx
factor
)
;
if
(
!
temp
)
{
return
false
;
}
result
=
BigInt
:
:
mul
(
cx
result
temp
)
;
if
(
!
result
)
{
return
false
;
}
temp
=
BigInt
:
:
createFromDouble
(
cx
number
)
;
if
(
!
temp
)
{
return
false
;
}
result
=
BigInt
:
:
add
(
cx
result
temp
)
;
return
!
!
result
;
}
;
/
/
Step
2
.
if
(
!
multiplyAdd
(
24
duration
.
hours
)
)
{
return
nullptr
;
}
/
/
Step
3
.
if
(
!
multiplyAdd
(
60
duration
.
minutes
)
)
{
return
nullptr
;
}
/
/
Step
4
.
if
(
!
multiplyAdd
(
60
duration
.
seconds
)
)
{
return
nullptr
;
}
/
/
Step
5
.
if
(
!
multiplyAdd
(
1000
duration
.
milliseconds
)
)
{
return
nullptr
;
}
/
/
Step
6
.
if
(
!
multiplyAdd
(
1000
duration
.
microseconds
)
)
{
return
nullptr
;
}
/
/
Step
7
.
if
(
!
multiplyAdd
(
1000
duration
.
nanoseconds
)
)
{
return
nullptr
;
}
/
/
Step
1
.
if
(
duration
.
days
!
=
0
&
&
offsetShift
!
=
0
)
{
temp
=
BigInt
:
:
createFromInt64
(
cx
offsetShift
)
;
if
(
!
temp
)
{
return
nullptr
;
}
result
=
BigInt
:
:
sub
(
cx
result
temp
)
;
if
(
!
result
)
{
return
nullptr
;
}
}
/
/
Step
7
(
Return
)
.
return
result
;
}
struct
NanosecondsAndDays
final
{
int32_t
days
=
0
;
int64_t
nanoseconds
=
0
;
}
;
/
*
*
*
NanosecondsToDays
(
nanoseconds
relativeTo
)
*
/
static
:
:
NanosecondsAndDays
NanosecondsToDays
(
int64_t
nanoseconds
)
{
/
/
Step
1
.
constexpr
int64_t
dayLengthNs
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
static_assert
(
INT64_MAX
/
dayLengthNs
<
=
INT32_MAX
"
days
doesn
'
t
exceed
INT32_MAX
"
)
;
/
/
Steps
2
-
4
.
return
{
int32_t
(
nanoseconds
/
dayLengthNs
)
nanoseconds
%
dayLengthNs
}
;
}
/
*
*
*
NanosecondsToDays
(
nanoseconds
relativeTo
)
*
/
static
bool
NanosecondsToDaysSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanoseconds
MutableHandle
<
temporal
:
:
NanosecondsAndDays
>
result
)
{
/
/
Step
1
.
constexpr
int64_t
dayLengthNs
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
Rooted
<
BigInt
*
>
dayLength
(
cx
BigInt
:
:
createFromInt64
(
cx
dayLengthNs
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
/
/
Step
2
is
a
fast
path
in
the
spec
when
|
nanoseconds
|
is
zero
but
since
/
/
we
'
re
already
in
the
slow
path
don
'
t
worry
about
special
casing
it
here
.
/
/
Steps
2
-
4
.
Rooted
<
BigInt
*
>
days
(
cx
)
;
Rooted
<
BigInt
*
>
nanos
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
dayLength
&
days
&
nanos
)
)
{
return
false
;
}
result
.
initialize
(
days
ToInstantDifference
(
nanos
)
Instant
:
:
fromNanoseconds
(
dayLengthNs
)
)
;
return
true
;
}
/
*
*
*
CreateTimeDurationRecord
(
days
hours
minutes
seconds
milliseconds
*
microseconds
nanoseconds
)
*
/
static
TimeDuration
CreateTimeDurationRecord
(
double
days
int64_t
hours
int64_t
minutes
int64_t
seconds
int64_t
milliseconds
int64_t
microseconds
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
!
mozilla
:
:
IsNegativeZero
(
days
)
)
;
/
/
Step
1
.
MOZ_ASSERT
(
IsValidDuration
(
{
0
0
0
days
double
(
hours
)
double
(
minutes
)
double
(
seconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
)
)
;
/
/
Step
2
.
return
{
days
double
(
hours
)
double
(
minutes
)
double
(
seconds
)
double
(
milliseconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
;
}
/
*
*
*
CreateTimeDurationRecord
(
days
hours
minutes
seconds
milliseconds
*
microseconds
nanoseconds
)
*
/
static
bool
CreateTimeDurationRecordPossiblyInfinite
(
JSContext
*
cx
double
days
double
hours
double
minutes
double
seconds
double
milliseconds
double
microseconds
double
nanoseconds
TimeDuration
*
result
)
{
MOZ_ASSERT
(
!
std
:
:
isnan
(
days
)
&
&
!
std
:
:
isnan
(
hours
)
&
&
!
std
:
:
isnan
(
minutes
)
&
&
!
std
:
:
isnan
(
seconds
)
&
&
!
std
:
:
isnan
(
milliseconds
)
&
&
!
std
:
:
isnan
(
microseconds
)
&
&
!
std
:
:
isnan
(
nanoseconds
)
)
;
for
(
double
v
:
{
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
std
:
:
isinf
(
v
)
)
{
*
result
=
{
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
return
true
;
}
}
/
/
Step
1
.
if
(
!
ThrowIfInvalidDuration
(
cx
{
0
0
0
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
)
{
return
false
;
}
/
/
Step
2
.
/
/
NB
:
Adds
+
0
.
0
to
correctly
handle
negative
zero
.
*
result
=
{
days
+
(
+
0
.
0
)
hours
+
(
+
0
.
0
)
minutes
+
(
+
0
.
0
)
seconds
+
(
+
0
.
0
)
milliseconds
+
(
+
0
.
0
)
microseconds
+
(
+
0
.
0
)
nanoseconds
+
(
+
0
.
0
)
}
;
return
true
;
}
/
*
*
*
BalanceDuration
(
days
hours
minutes
seconds
milliseconds
microseconds
*
nanoseconds
largestUnit
[
relativeTo
]
)
*
*
BalancePossiblyInfiniteDuration
(
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
TimeDuration
BalanceDuration
(
double
days
int64_t
nanoseconds
TemporalUnit
largestUnit
)
{
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT_IF
(
days
<
0
nanoseconds
<
=
0
)
;
MOZ_ASSERT_IF
(
days
>
0
nanoseconds
>
=
0
)
;
/
/
Steps
1
-
5
.
(
Handled
in
caller
.
)
/
/
Step
6
.
int64_t
hours
=
0
;
int64_t
minutes
=
0
;
int64_t
seconds
=
0
;
int64_t
milliseconds
=
0
;
int64_t
microseconds
=
0
;
/
/
Steps
7
-
8
.
(
Not
applicable
in
our
implementation
.
)
/
/
/
/
We
don
'
t
need
to
convert
to
positive
numbers
because
integer
division
/
/
truncates
and
the
%
-
operator
has
modulo
semantics
.
/
/
Steps
9
-
13
.
switch
(
largestUnit
)
{
/
/
Step
9
.
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
case
TemporalUnit
:
:
Hour
:
{
/
/
Step
9
.
a
.
microseconds
=
nanoseconds
/
1000
;
/
/
Step
9
.
b
.
nanoseconds
=
nanoseconds
%
1000
;
/
/
Step
9
.
c
.
milliseconds
=
microseconds
/
1000
;
/
/
Step
9
.
d
.
microseconds
=
microseconds
%
1000
;
/
/
Step
9
.
e
.
seconds
=
milliseconds
/
1000
;
/
/
Step
9
.
f
.
milliseconds
=
milliseconds
%
1000
;
/
/
Step
9
.
g
.
minutes
=
seconds
/
60
;
/
/
Step
9
.
h
.
seconds
=
seconds
%
60
;
/
/
Step
9
.
i
.
hours
=
minutes
/
60
;
/
/
Step
9
.
j
.
minutes
=
minutes
%
60
;
break
;
}
/
/
Step
10
.
case
TemporalUnit
:
:
Minute
:
{
/
/
Step
10
.
a
.
microseconds
=
nanoseconds
/
1000
;
/
/
Step
10
.
b
.
nanoseconds
=
nanoseconds
%
1000
;
/
/
Step
10
.
c
.
milliseconds
=
microseconds
/
1000
;
/
/
Step
10
.
d
.
microseconds
=
microseconds
%
1000
;
/
/
Step
10
.
e
.
seconds
=
milliseconds
/
1000
;
/
/
Step
10
.
f
.
milliseconds
=
milliseconds
%
1000
;
/
/
Step
10
.
g
.
minutes
=
seconds
/
60
;
/
/
Step
10
.
h
.
seconds
=
seconds
%
60
;
break
;
}
/
/
Step
11
.
case
TemporalUnit
:
:
Second
:
{
/
/
Step
11
.
a
.
microseconds
=
nanoseconds
/
1000
;
/
/
Step
11
.
b
.
nanoseconds
=
nanoseconds
%
1000
;
/
/
Step
11
.
c
.
milliseconds
=
microseconds
/
1000
;
/
/
Step
11
.
d
.
microseconds
=
microseconds
%
1000
;
/
/
Step
11
.
e
.
seconds
=
milliseconds
/
1000
;
/
/
Step
11
.
f
.
milliseconds
=
milliseconds
%
1000
;
break
;
}
/
/
Step
12
.
case
TemporalUnit
:
:
Millisecond
:
{
/
/
Step
12
.
a
.
microseconds
=
nanoseconds
/
1000
;
/
/
Step
12
.
b
.
nanoseconds
=
nanoseconds
%
1000
;
/
/
Step
12
.
c
.
milliseconds
=
microseconds
/
1000
;
/
/
Step
12
.
d
.
microseconds
=
microseconds
%
1000
;
break
;
}
/
/
Step
13
.
case
TemporalUnit
:
:
Microsecond
:
{
/
/
Step
13
.
a
.
microseconds
=
nanoseconds
/
1000
;
/
/
Step
13
.
b
.
nanoseconds
=
nanoseconds
%
1000
;
break
;
}
/
/
Step
14
.
case
TemporalUnit
:
:
Nanosecond
:
{
/
/
Nothing
to
do
.
break
;
}
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
/
/
Step
15
.
(
Not
applicable
all
values
are
finite
)
/
/
Step
16
.
return
CreateTimeDurationRecord
(
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
)
;
}
/
*
*
*
BalancePossiblyInfiniteDuration
(
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
bool
BalancePossiblyInfiniteDurationSlow
(
JSContext
*
cx
double
days
Handle
<
BigInt
*
>
nanos
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
/
/
Steps
1
-
5
.
(
Handled
in
caller
.
)
BigInt
*
zero
=
BigInt
:
:
zero
(
cx
)
;
if
(
!
zero
)
{
return
false
;
}
/
/
Step
6
.
Rooted
<
BigInt
*
>
hours
(
cx
zero
)
;
Rooted
<
BigInt
*
>
minutes
(
cx
zero
)
;
Rooted
<
BigInt
*
>
seconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
milliseconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
microseconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
nanos
)
;
/
/
Steps
7
-
8
.
/
/
/
/
We
don
'
t
need
to
convert
to
positive
numbers
because
BigInt
division
/
/
truncates
and
BigInt
modulo
has
modulo
semantics
.
/
/
Steps
9
-
14
.
Rooted
<
BigInt
*
>
thousand
(
cx
BigInt
:
:
createFromInt64
(
cx
1000
)
)
;
if
(
!
thousand
)
{
return
false
;
}
Rooted
<
BigInt
*
>
sixty
(
cx
BigInt
:
:
createFromInt64
(
cx
60
)
)
;
if
(
!
sixty
)
{
return
false
;
}
switch
(
largestUnit
)
{
/
/
Step
9
.
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
case
TemporalUnit
:
:
Hour
:
{
/
/
Steps
9
.
a
-
b
.
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
/
/
Steps
9
.
c
-
d
.
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
/
/
Steps
9
.
e
-
f
.
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
/
/
Steps
9
.
g
-
h
.
if
(
!
BigInt
:
:
divmod
(
cx
seconds
sixty
&
minutes
&
seconds
)
)
{
return
false
;
}
/
/
Steps
9
.
i
-
j
.
if
(
!
BigInt
:
:
divmod
(
cx
minutes
sixty
&
hours
&
minutes
)
)
{
return
false
;
}
break
;
}
/
/
Step
10
.
case
TemporalUnit
:
:
Minute
:
{
/
/
Steps
10
.
a
-
b
.
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
/
/
Steps
10
.
c
-
d
.
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
/
/
Steps
10
.
e
-
f
.
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
/
/
Steps
10
.
g
-
h
.
if
(
!
BigInt
:
:
divmod
(
cx
seconds
sixty
&
minutes
&
seconds
)
)
{
return
false
;
}
break
;
}
/
/
Step
11
.
case
TemporalUnit
:
:
Second
:
{
/
/
Steps
11
.
a
-
b
.
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
/
/
Steps
11
.
c
-
d
.
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
/
/
Steps
11
.
e
-
f
.
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
break
;
}
/
/
Step
12
.
case
TemporalUnit
:
:
Millisecond
:
{
/
/
Steps
21
.
a
-
b
.
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
/
/
Steps
12
.
c
-
d
.
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
break
;
}
/
/
Step
13
.
case
TemporalUnit
:
:
Microsecond
:
{
/
/
Steps
13
.
a
-
b
.
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
break
;
}
/
/
Step
14
.
case
TemporalUnit
:
:
Nanosecond
:
{
/
/
Nothing
to
do
.
break
;
}
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
/
/
Steps
15
-
16
.
return
CreateTimeDurationRecordPossiblyInfinite
(
cx
days
BigInt
:
:
numberValue
(
hours
)
BigInt
:
:
numberValue
(
minutes
)
BigInt
:
:
numberValue
(
seconds
)
BigInt
:
:
numberValue
(
milliseconds
)
BigInt
:
:
numberValue
(
microseconds
)
BigInt
:
:
numberValue
(
nanoseconds
)
result
)
;
}
/
*
*
*
BalanceDuration
(
days
hours
minutes
seconds
milliseconds
microseconds
*
nanoseconds
largestUnit
[
relativeTo
]
)
*
*
BalancePossiblyInfiniteDuration
(
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
TimeDuration
BalanceDuration
(
int64_t
nanoseconds
TemporalUnit
largestUnit
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
)
/
/
Steps
4
-
5
.
double
days
=
0
;
if
(
TemporalUnit
:
:
Year
<
=
largestUnit
&
&
largestUnit
<
=
TemporalUnit
:
:
Day
)
{
/
/
Step
4
.
a
.
auto
nanosAndDays
=
:
:
NanosecondsToDays
(
nanoseconds
)
;
/
/
Step
4
.
b
.
days
=
nanosAndDays
.
days
;
/
/
Step
4
.
c
.
nanoseconds
=
nanosAndDays
.
nanoseconds
;
}
/
/
Steps
6
-
16
.
return
:
:
BalanceDuration
(
days
nanoseconds
largestUnit
)
;
}
/
*
*
*
BalancePossiblyInfiniteDuration
(
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
bool
BalancePossiblyInfiniteDurationSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanoseconds
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
)
/
/
Step
4
.
if
(
TemporalUnit
:
:
Year
<
=
largestUnit
&
&
largestUnit
<
=
TemporalUnit
:
:
Day
)
{
/
/
Step
4
.
a
.
Rooted
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
(
cx
)
;
if
(
!
:
:
NanosecondsToDaysSlow
(
cx
nanoseconds
&
nanosAndDays
)
)
{
return
false
;
}
/
/
NB
:
|
days
|
is
passed
to
CreateTimeDurationRecord
which
performs
/
/
|
(
(
days
)
)
|
so
it
'
s
safe
to
convert
from
BigInt
to
double
here
.
/
/
Step
4
.
b
.
double
days
=
nanosAndDays
.
daysNumber
(
)
;
/
/
Step
4
.
c
.
int64_t
nanos
=
nanosAndDays
.
nanoseconds
(
)
.
toNanoseconds
(
)
.
value
(
)
;
/
/
Step
15
.
(
Reordered
)
if
(
!
std
:
:
isfinite
(
days
)
)
{
*
result
=
{
days
}
;
return
true
;
}
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
/
/
Steps
6
-
15
.
*
result
=
:
:
BalanceDuration
(
days
nanos
largestUnit
)
;
return
true
;
}
/
/
Step
5
.
a
.
double
days
=
0
;
/
/
Steps
6
-
15
.
return
:
:
BalancePossiblyInfiniteDurationSlow
(
cx
days
nanoseconds
largestUnit
result
)
;
}
/
*
*
*
BalanceDuration
(
days
hours
minutes
seconds
milliseconds
microseconds
*
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
bool
BalanceDurationSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanoseconds
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
/
/
Step
1
.
if
(
!
BalancePossiblyInfiniteDurationSlow
(
cx
nanoseconds
largestUnit
result
)
)
{
return
false
;
}
/
/
Steps
2
-
3
.
return
ThrowIfInvalidDuration
(
cx
result
-
>
toDuration
(
)
)
;
}
/
*
*
*
BalancePossiblyInfiniteDuration
(
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
static
bool
BalancePossiblyInfiniteDuration
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
/
/
NB
:
|
duration
.
days
|
can
have
a
different
sign
than
the
time
components
.
MOZ_ASSERT
(
IsValidDuration
(
duration
.
time
(
)
)
)
;
/
/
Steps
1
-
2
.
(
Not
applicable
)
/
/
Fast
-
path
when
we
can
perform
the
whole
computation
with
int64
values
.
if
(
auto
nanoseconds
=
TotalDurationNanoseconds
(
duration
0
)
)
{
*
result
=
:
:
BalanceDuration
(
*
nanoseconds
largestUnit
)
;
return
true
;
}
/
/
Step
3
.
Rooted
<
BigInt
*
>
nanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
duration
0
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
/
/
Steps
4
-
16
.
return
:
:
BalancePossiblyInfiniteDurationSlow
(
cx
nanoseconds
largestUnit
result
)
;
}
/
*
*
*
BalanceDuration
(
days
hours
minutes
seconds
milliseconds
microseconds
*
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
bool
js
:
:
temporal
:
:
BalanceDuration
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
if
(
!
:
:
BalancePossiblyInfiniteDuration
(
cx
duration
largestUnit
result
)
)
{
return
false
;
}
return
ThrowIfInvalidDuration
(
cx
result
-
>
toDuration
(
)
)
;
}
/
*
*
*
BalanceDuration
(
days
hours
minutes
seconds
milliseconds
microseconds
*
nanoseconds
largestUnit
[
relativeTo
]
)
*
/
bool
js
:
:
temporal
:
:
BalanceDuration
(
JSContext
*
cx
const
Instant
&
nanoseconds
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidInstantDifference
(
nanoseconds
)
)
;
/
/
Steps
1
-
3
.
(
Not
applicable
)
/
/
Fast
-
path
when
we
can
perform
the
whole
computation
with
int64
values
.
if
(
auto
nanos
=
nanoseconds
.
toNanoseconds
(
)
;
nanos
.
isValid
(
)
)
{
*
result
=
:
:
BalanceDuration
(
nanos
.
value
(
)
largestUnit
)
;
return
true
;
}
Rooted
<
BigInt
*
>
nanos
(
cx
ToEpochDifferenceNanoseconds
(
cx
nanoseconds
)
)
;
if
(
!
nanos
)
{
return
false
;
}
/
/
Steps
4
-
16
.
return
:
:
BalanceDurationSlow
(
cx
nanos
largestUnit
result
)
;
}
static
Duration
AbsoluteDuration
(
const
Duration
&
duration
)
{
return
{
std
:
:
abs
(
duration
.
years
)
std
:
:
abs
(
duration
.
months
)
std
:
:
abs
(
duration
.
weeks
)
std
:
:
abs
(
duration
.
days
)
std
:
:
abs
(
duration
.
hours
)
std
:
:
abs
(
duration
.
minutes
)
std
:
:
abs
(
duration
.
seconds
)
std
:
:
abs
(
duration
.
milliseconds
)
std
:
:
abs
(
duration
.
microseconds
)
std
:
:
abs
(
duration
.
nanoseconds
)
}
;
}
static
constexpr
bool
IsSafeInteger
(
int64_t
x
)
{
constexpr
int64_t
MaxSafeInteger
=
int64_t
(
1
)
<
<
53
;
constexpr
int64_t
MinSafeInteger
=
-
MaxSafeInteger
;
return
MinSafeInteger
<
x
&
&
x
<
MaxSafeInteger
;
}
/
*
*
*
RoundNumberToIncrement
(
x
increment
roundingMode
)
*
/
static
void
TruncateNumber
(
int64_t
numerator
int64_t
denominator
double
*
quotient
double
*
rounded
)
{
/
/
Computes
the
quotient
and
rounded
value
of
the
rational
number
/
/
|
numerator
/
denominator
|
.
/
/
/
/
The
numerator
can
be
represented
as
|
numerator
=
a
*
denominator
+
b
|
.
/
/
/
/
So
we
have
:
/
/
/
/
numerator
/
denominator
/
/
=
(
a
*
denominator
+
b
)
/
denominator
/
/
=
(
(
a
*
denominator
)
/
denominator
)
+
(
b
/
denominator
)
/
/
=
a
+
(
b
/
denominator
)
/
/
/
/
where
|
quotient
=
a
|
and
|
remainder
=
b
/
denominator
|
.
|
a
|
and
|
b
|
can
be
/
/
computed
through
normal
int64
division
.
/
/
Int64
division
truncates
.
int64_t
q
=
numerator
/
denominator
;
int64_t
r
=
numerator
%
denominator
;
/
/
The
remainder
is
stored
as
a
mathematical
number
in
the
draft
proposal
so
/
/
we
can
'
t
convert
it
to
a
double
without
loss
of
precision
.
The
remainder
is
/
/
eventually
added
to
the
quotient
and
if
we
directly
perform
this
addition
/
/
we
can
reduce
the
possible
loss
of
precision
.
We
still
need
to
choose
which
/
/
approach
to
take
based
on
the
input
range
.
/
/
/
/
For
example
:
/
/
/
/
When
|
numerator
=
1000001
|
and
|
denominator
=
60
*
1000
|
then
/
/
|
quotient
=
16
|
and
|
remainder
=
40001
/
(
60
*
1000
)
|
.
The
exact
result
is
/
/
|
16
.
66668333
.
.
.
|
.
/
/
/
/
When
storing
the
remainder
as
a
double
and
later
adding
it
to
the
quotient
/
/
we
get
|
(
16
)
+
(
40001
/
(
60
*
1000
)
)
=
16
.
666683333333331518
.
.
.
|
.
This
/
/
is
wrong
by
1
ULP
a
better
approximation
is
|
16
.
666683333333335070
.
.
.
|
.
/
/
/
/
We
can
get
the
better
approximation
when
casting
the
numerator
and
/
/
denominator
to
doubles
and
then
performing
a
double
division
.
/
/
/
/
When
|
numerator
=
14400000000000001
|
and
|
denominator
=
3600000000000
|
we
/
/
can
'
t
use
double
division
because
|
14400000000000001
|
can
'
t
be
represented
/
/
as
an
exact
double
value
.
The
exact
result
is
|
4000
.
0000000000002777
.
.
.
|
.
/
/
/
/
The
best
possible
approximation
is
|
4000
.
0000000000004547
.
.
.
|
which
can
/
/
be
computed
through
|
q
+
r
/
denominator
|
.
if
(
:
:
IsSafeInteger
(
numerator
)
&
&
:
:
IsSafeInteger
(
denominator
)
)
{
*
quotient
=
double
(
q
)
;
*
rounded
=
double
(
numerator
)
/
double
(
denominator
)
;
}
else
{
*
quotient
=
double
(
q
)
;
*
rounded
=
double
(
q
)
+
double
(
r
)
/
double
(
denominator
)
;
}
}
/
*
*
*
RoundNumberToIncrement
(
x
increment
roundingMode
)
*
/
static
bool
TruncateNumber
(
JSContext
*
cx
const
Duration
&
toRound
TemporalUnit
unit
double
*
quotient
double
*
rounded
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Day
)
;
int64_t
denominator
=
ToNanoseconds
(
unit
)
;
MOZ_ASSERT
(
denominator
>
0
)
;
MOZ_ASSERT
(
denominator
<
=
86
'
400
'
000
'
000
'
000
)
;
/
/
Fast
-
path
when
we
can
perform
the
whole
computation
with
int64
values
.
if
(
auto
numerator
=
TotalDurationNanoseconds
(
toRound
0
)
)
{
TruncateNumber
(
*
numerator
denominator
quotient
rounded
)
;
return
true
;
}
Rooted
<
BigInt
*
>
numerator
(
cx
TotalDurationNanosecondsSlow
(
cx
toRound
0
)
)
;
if
(
!
numerator
)
{
return
false
;
}
/
/
Division
by
one
has
no
remainder
.
if
(
denominator
=
=
1
)
{
double
q
=
BigInt
:
:
numberValue
(
numerator
)
;
*
quotient
=
q
;
*
rounded
=
q
;
return
true
;
}
Rooted
<
BigInt
*
>
denom
(
cx
BigInt
:
:
createFromInt64
(
cx
denominator
)
)
;
if
(
!
denom
)
{
return
false
;
}
/
/
BigInt
division
truncates
.
Rooted
<
BigInt
*
>
quot
(
cx
)
;
Rooted
<
BigInt
*
>
rem
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
numerator
denom
&
quot
&
rem
)
)
{
return
false
;
}
double
q
=
BigInt
:
:
numberValue
(
quot
)
;
*
quotient
=
q
;
*
rounded
=
q
+
BigInt
:
:
numberValue
(
rem
)
/
double
(
denominator
)
;
return
true
;
}
/
*
*
*
RoundNumberToIncrement
(
x
increment
roundingMode
)
*
/
static
bool
RoundNumberToIncrement
(
JSContext
*
cx
const
Duration
&
toRound
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
double
*
result
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Day
)
;
/
/
Fast
-
path
when
we
can
perform
the
whole
computation
with
int64
values
.
if
(
auto
total
=
TotalDurationNanoseconds
(
toRound
0
)
)
{
return
RoundNumberToIncrement
(
cx
*
total
unit
increment
roundingMode
result
)
;
}
Rooted
<
BigInt
*
>
totalNs
(
cx
TotalDurationNanosecondsSlow
(
cx
toRound
0
)
)
;
if
(
!
totalNs
)
{
return
false
;
}
return
RoundNumberToIncrement
(
cx
totalNs
unit
increment
roundingMode
result
)
;
}
struct
RoundedDuration
final
{
Duration
duration
;
double
rounded
=
0
;
}
;
enum
class
ComputeRemainder
:
bool
{
No
Yes
}
;
/
*
*
*
RoundDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
increment
unit
roundingMode
[
*
relativeTo
]
)
*
/
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
/
/
The
remainder
is
only
needed
when
called
from
|
Duration_total
|
.
And
total
/
/
always
passes
|
increment
=
1
|
and
|
roundingMode
=
trunc
|
.
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
auto
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
(
Not
applicable
.
)
/
/
Step
2
.
if
(
unit
<
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
/
/
TODO
:
We
could
directly
return
here
if
unit
=
nanoseconds
and
increment
=
1
/
/
because
in
that
case
this
operation
is
a
no
-
op
.
This
case
happens
for
/
/
example
when
calling
Temporal
.
PlainTime
.
prototype
.
{
since
until
}
without
an
/
/
options
object
.
/
/
/
/
But
maybe
this
can
be
even
more
efficiently
handled
in
the
callers
.
For
/
/
example
when
Temporal
.
PlainTime
.
prototype
.
{
since
until
}
is
called
without
/
/
an
options
object
we
can
not
only
skip
the
RoundDuration
call
but
also
/
/
the
following
BalanceDuration
call
.
/
/
Steps
3
-
5
.
(
Not
applicable
.
)
/
/
Steps
6
-
7
(
Moved
below
)
.
/
/
Step
8
.
(
Not
applicable
.
)
/
/
Steps
9
-
18
.
Duration
toRound
;
double
*
roundedTime
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Month
:
/
/
Steps
9
-
11
.
(
Not
applicable
.
)
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
case
TemporalUnit
:
:
Day
:
{
/
/
clang
-
format
off
/
/
/
/
Relevant
steps
from
the
spec
algorithm
:
/
/
/
/
6
.
a
Let
nanoseconds
be
!
TotalDurationNanoseconds
(
0
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
0
)
.
/
/
6
.
d
Let
result
be
?
NanosecondsToDays
(
nanoseconds
intermediate
)
.
/
/
6
.
e
Set
days
to
days
+
result
.
[
[
Days
]
]
+
result
.
[
[
Nanoseconds
]
]
/
abs
(
result
.
[
[
DayLength
]
]
)
.
/
/
.
.
.
/
/
12
.
a
Let
fractionalDays
be
days
.
/
/
12
.
b
Set
days
to
?
RoundNumberToIncrement
(
days
increment
roundingMode
)
.
/
/
12
.
c
Set
remainder
to
fractionalDays
-
days
.
/
/
/
/
Where
result
.
[
[
Days
]
]
is
the
integral
part
of
nanoseconds
/
dayLengthNs
/
/
and
result
.
[
[
Nanoseconds
]
]
is
nanoseconds
modulo
dayLengthNs
.
/
/
With
dayLengthNs
=
8
.
64
10
^
13
.
/
/
/
/
So
we
have
:
/
/
d
+
r
.
days
+
(
r
.
nanoseconds
/
len
)
/
/
=
d
+
[
ns
/
len
]
+
(
(
ns
%
len
)
/
len
)
/
/
=
d
+
[
ns
/
len
]
+
(
(
ns
-
(
[
ns
/
len
]
len
)
)
/
len
)
/
/
=
d
+
[
ns
/
len
]
+
(
ns
/
len
)
-
(
(
[
ns
/
len
]
len
)
/
len
)
/
/
=
d
+
[
ns
/
len
]
+
(
ns
/
len
)
-
[
ns
/
len
]
/
/
=
d
+
(
ns
/
len
)
/
/
=
(
(
d
len
)
/
len
)
+
(
ns
/
len
)
/
/
=
(
(
d
len
)
+
ns
)
/
len
/
/
/
/
(
(
d
len
)
+
ns
)
is
the
result
of
calling
TotalDurationNanoseconds
(
)
/
/
which
means
we
can
use
the
same
code
for
all
time
computations
in
this
/
/
function
.
/
/
/
/
clang
-
format
on
MOZ_ASSERT
(
increment
<
=
Increment
{
1
'
000
'
000
'
000
}
"
limited
by
ToTemporalRoundingIncrement
"
)
;
/
/
Steps
6
.
a
6
.
d
-
e
and
12
.
a
-
c
.
toRound
=
duration
;
roundedTime
=
&
days
;
/
/
Steps
6
.
b
-
c
.
(
Not
applicable
)
/
/
Step
6
.
f
.
hours
=
0
;
minutes
=
0
;
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Hour
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
24
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Steps
7
and
13
.
a
-
c
.
toRound
=
{
0
0
0
0
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
hours
;
/
/
Step
13
.
d
.
minutes
=
0
;
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Minute
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
60
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Steps
7
and
14
.
a
-
c
.
toRound
=
{
0
0
0
0
0
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
minutes
;
/
/
Step
14
.
d
.
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Second
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
60
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Steps
7
and
15
.
a
-
b
.
toRound
=
{
0
0
0
0
0
0
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
seconds
;
/
/
Step
15
.
c
.
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Millisecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Steps
16
.
a
-
c
.
toRound
=
{
0
0
0
0
0
0
0
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
milliseconds
;
/
/
Step
16
.
d
.
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Microsecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Steps
17
.
a
-
c
.
toRound
=
{
0
0
0
0
0
0
0
0
microseconds
nanoseconds
}
;
roundedTime
=
&
microseconds
;
/
/
Step
17
.
d
.
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Nanosecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
/
/
Step
18
.
a
.
(
Implicit
)
/
/
Steps
18
.
b
-
d
.
toRound
=
{
0
0
0
0
0
0
0
0
0
nanoseconds
}
;
roundedTime
=
&
nanoseconds
;
break
;
}
}
/
/
clang
-
format
off
/
/
/
/
The
specification
uses
mathematical
values
in
its
computations
which
/
/
requires
to
be
able
to
represent
decimals
with
arbitrary
precision
.
To
/
/
avoid
having
to
struggle
with
decimals
we
can
transform
the
steps
to
work
/
/
on
integer
values
which
we
can
conveniently
represent
with
BigInts
.
/
/
/
/
As
an
example
here
are
the
transformation
steps
for
"
hours
"
but
all
other
/
/
units
can
be
handled
similarly
.
/
/
/
/
Relevant
spec
steps
:
/
/
/
/
7
.
a
Let
fractionalSeconds
be
nanoseconds
10
^
9
+
microseconds
10
^
6
+
milliseconds
10
^
3
+
seconds
.
/
/
.
.
.
/
/
13
.
a
Let
fractionalHours
be
(
fractionalSeconds
/
60
+
minutes
)
/
60
+
hours
.
/
/
13
.
b
Set
hours
to
?
RoundNumberToIncrement
(
fractionalHours
increment
roundingMode
)
.
/
/
/
/
And
from
RoundNumberToIncrement
:
/
/
/
/
1
.
Let
quotient
be
x
/
increment
.
/
/
2
-
7
.
Let
rounded
be
op
(
quotient
)
.
/
/
8
.
Return
rounded
increment
.
/
/
/
/
With
fractionalHours
=
(
totalNs
/
nsPerHour
)
the
rounding
operation
/
/
computes
:
/
/
/
/
op
(
fractionalHours
/
increment
)
increment
/
/
=
op
(
(
totalNs
/
nsPerHour
)
/
increment
)
increment
/
/
=
op
(
totalNs
/
(
nsPerHour
increment
)
)
increment
/
/
/
/
So
when
we
pass
totalNs
and
nsPerHour
as
separate
arguments
to
/
/
RoundNumberToIncrement
we
can
avoid
any
precision
losses
and
instead
/
/
compute
with
exact
values
.
/
/
/
/
clang
-
format
on
double
rounded
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
RoundNumberToIncrement
(
cx
toRound
unit
increment
roundingMode
roundedTime
)
)
{
return
false
;
}
}
else
{
/
/
clang
-
format
off
/
/
/
/
The
remainder
is
only
used
for
Duration
.
prototype
.
total
(
)
which
calls
/
/
this
operation
with
increment
=
1
and
roundingMode
=
trunc
.
/
/
/
/
That
means
the
remainder
computation
is
actually
just
/
/
(
totalNs
%
toNanos
)
/
toNanos
where
totalNs
%
toNanos
is
already
/
/
computed
in
RoundNumberToIncrement
(
)
:
/
/
/
/
rounded
=
trunc
(
totalNs
/
toNanos
)
/
/
=
[
totalNs
/
toNanos
]
/
/
/
/
roundedTime
=
(
(
rounded
)
)
/
/
/
/
remainder
=
(
totalNs
-
(
rounded
*
toNanos
)
)
/
toNanos
/
/
=
(
totalNs
-
(
[
totalNs
/
toNanos
]
*
toNanos
)
)
/
toNanos
/
/
=
(
totalNs
%
toNanos
)
/
toNanos
/
/
/
/
When
used
in
Duration
.
prototype
.
total
(
)
the
overall
computed
value
is
/
/
[
totalNs
/
toNanos
]
+
(
totalNs
%
toNanos
)
/
toNanos
.
/
/
/
/
Applying
normal
math
rules
would
allow
to
simplify
this
to
:
/
/
/
/
[
totalNs
/
toNanos
]
+
(
totalNs
%
toNanos
)
/
toNanos
/
/
=
[
totalNs
/
toNanos
]
+
(
totalNs
-
[
totalNs
/
toNanos
]
*
toNanos
)
/
toNanos
/
/
=
total
/
toNanos
/
/
/
/
We
can
'
t
apply
this
simplification
because
it
'
d
introduce
double
/
/
precision
issues
.
Instead
of
that
we
use
a
specialized
version
of
/
/
RoundNumberToIncrement
which
directly
returns
the
remainder
.
The
/
/
remainder
(
totalNs
%
toNanos
)
/
toNanos
is
a
value
near
zero
so
this
/
/
approach
is
as
exact
as
possible
.
(
Double
numbers
near
zero
can
be
/
/
computed
more
precisely
than
large
numbers
with
fractional
parts
.
)
/
/
/
/
clang
-
format
on
MOZ_ASSERT
(
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT
(
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
if
(
!
TruncateNumber
(
cx
toRound
unit
roundedTime
&
rounded
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
years
=
=
duration
.
years
)
;
MOZ_ASSERT
(
months
=
=
duration
.
months
)
;
MOZ_ASSERT
(
weeks
=
=
duration
.
weeks
)
;
/
/
Step
19
.
MOZ_ASSERT
(
IsIntegerOrInfinity
(
days
)
)
;
/
/
Step
20
.
Duration
resultDuration
=
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
/
/
Step
21
.
*
result
=
{
resultDuration
rounded
}
;
return
true
;
}
/
*
*
*
RoundDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
increment
unit
roundingMode
[
*
relativeTo
]
)
*
/
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
duration
;
return
true
;
}
/
*
*
*
RoundDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
increment
unit
roundingMode
[
*
relativeTo
]
)
*
/
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
result
)
;
}
/
*
*
*
Temporal
.
Duration
(
[
years
[
months
[
weeks
[
days
[
hours
[
*
minutes
[
seconds
[
milliseconds
[
microseconds
[
nanoseconds
]
]
]
]
*
]
]
]
]
]
]
)
*
/
static
bool
DurationConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
/
/
Step
1
.
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
Duration
"
)
)
{
return
false
;
}
/
/
Step
2
.
double
years
=
0
;
if
(
args
.
hasDefined
(
0
)
&
&
!
ToIntegerIfIntegral
(
cx
"
years
"
args
[
0
]
&
years
)
)
{
return
false
;
}
/
/
Step
3
.
double
months
=
0
;
if
(
args
.
hasDefined
(
1
)
&
&
!
ToIntegerIfIntegral
(
cx
"
months
"
args
[
1
]
&
months
)
)
{
return
false
;
}
/
/
Step
4
.
double
weeks
=
0
;
if
(
args
.
hasDefined
(
2
)
&
&
!
ToIntegerIfIntegral
(
cx
"
weeks
"
args
[
2
]
&
weeks
)
)
{
return
false
;
}
/
/
Step
5
.
double
days
=
0
;
if
(
args
.
hasDefined
(
3
)
&
&
!
ToIntegerIfIntegral
(
cx
"
days
"
args
[
3
]
&
days
)
)
{
return
false
;
}
/
/
Step
6
.
double
hours
=
0
;
if
(
args
.
hasDefined
(
4
)
&
&
!
ToIntegerIfIntegral
(
cx
"
hours
"
args
[
4
]
&
hours
)
)
{
return
false
;
}
/
/
Step
7
.
double
minutes
=
0
;
if
(
args
.
hasDefined
(
5
)
&
&
!
ToIntegerIfIntegral
(
cx
"
minutes
"
args
[
5
]
&
minutes
)
)
{
return
false
;
}
/
/
Step
8
.
double
seconds
=
0
;
if
(
args
.
hasDefined
(
6
)
&
&
!
ToIntegerIfIntegral
(
cx
"
seconds
"
args
[
6
]
&
seconds
)
)
{
return
false
;
}
/
/
Step
9
.
double
milliseconds
=
0
;
if
(
args
.
hasDefined
(
7
)
&
&
!
ToIntegerIfIntegral
(
cx
"
milliseconds
"
args
[
7
]
&
milliseconds
)
)
{
return
false
;
}
/
/
Step
10
.
double
microseconds
=
0
;
if
(
args
.
hasDefined
(
8
)
&
&
!
ToIntegerIfIntegral
(
cx
"
microseconds
"
args
[
8
]
&
microseconds
)
)
{
return
false
;
}
/
/
Step
11
.
double
nanoseconds
=
0
;
if
(
args
.
hasDefined
(
9
)
&
&
!
ToIntegerIfIntegral
(
cx
"
nanoseconds
"
args
[
9
]
&
nanoseconds
)
)
{
return
false
;
}
/
/
Step
12
.
auto
*
duration
=
CreateTemporalDuration
(
cx
args
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
;
if
(
!
duration
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
duration
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
from
(
item
)
*
/
static
bool
Duration_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Handle
<
Value
>
item
=
args
.
get
(
0
)
;
/
/
Step
1
.
if
(
item
.
isObject
(
)
)
{
if
(
auto
*
duration
=
item
.
toObject
(
)
.
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
auto
*
result
=
CreateTemporalDuration
(
cx
ToDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
/
/
Step
2
.
auto
result
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
years
*
/
static
bool
Duration_years
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
years
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
years
*
/
static
bool
Duration_years
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_years
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
months
*
/
static
bool
Duration_months
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
months
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
months
*
/
static
bool
Duration_months
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_months
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
weeks
*
/
static
bool
Duration_weeks
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
weeks
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
weeks
*
/
static
bool
Duration_weeks
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_weeks
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
days
*
/
static
bool
Duration_days
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
days
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
days
*
/
static
bool
Duration_days
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_days
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
hours
*
/
static
bool
Duration_hours
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
hours
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
hours
*
/
static
bool
Duration_hours
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_hours
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
minutes
*
/
static
bool
Duration_minutes
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
minutes
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
minutes
*
/
static
bool
Duration_minutes
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_minutes
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
seconds
*
/
static
bool
Duration_seconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
seconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
seconds
*
/
static
bool
Duration_seconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_seconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
milliseconds
*
/
static
bool
Duration_milliseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
milliseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
milliseconds
*
/
static
bool
Duration_milliseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_milliseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
microseconds
*
/
static
bool
Duration_microseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
microseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
microseconds
*
/
static
bool
Duration_microseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_microseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
nanoseconds
*
/
static
bool
Duration_nanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
nanoseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
nanoseconds
*
/
static
bool
Duration_nanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_nanoseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
sign
*
/
static
bool
Duration_sign
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
args
.
rval
(
)
.
setInt32
(
sign
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
sign
*
/
static
bool
Duration_sign
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_sign
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
blank
*
/
static
bool
Duration_blank
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
/
/
Steps
4
-
5
.
args
.
rval
(
)
.
setBoolean
(
sign
=
=
0
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
blank
*
/
static
bool
Duration_blank
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_blank
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
with
(
temporalDurationLike
)
*
*
ToPartialDuration
(
temporalDurationLike
)
*
/
static
bool
Duration_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
/
/
Absent
values
default
to
the
corresponding
values
of
|
this
|
object
.
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Steps
3
-
23
.
Rooted
<
JSObject
*
>
temporalDurationLike
(
cx
RequireObjectArg
(
cx
"
temporalDurationLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDurationLike
)
{
return
false
;
}
if
(
!
ToTemporalPartialDurationRecord
(
cx
temporalDurationLike
&
duration
)
)
{
return
false
;
}
/
/
Step
24
.
auto
*
result
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
with
(
temporalDurationLike
)
*
/
static
bool
Duration_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_with
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
negated
(
)
*
/
static
bool
Duration_negated
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Step
3
.
auto
*
result
=
CreateTemporalDuration
(
cx
duration
.
negate
(
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
negated
(
)
*
/
static
bool
Duration_negated
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_negated
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
abs
(
)
*
/
static
bool
Duration_abs
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Step
3
.
auto
*
result
=
CreateTemporalDuration
(
cx
AbsoluteDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
abs
(
)
*
/
static
bool
Duration_abs
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_abs
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
valueOf
(
)
*
/
static
bool
Duration_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
Duration
"
"
primitive
type
"
)
;
return
false
;
}
const
JSClass
DurationObject
:
:
class_
=
{
"
Temporal
.
Duration
"
JSCLASS_HAS_RESERVED_SLOTS
(
DurationObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Duration
)
JS_NULL_CLASS_OPS
&
DurationObject
:
:
classSpec_
}
;
const
JSClass
&
DurationObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
Duration_methods
[
]
=
{
JS_FN
(
"
from
"
Duration_from
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
Duration_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
Duration_with
1
0
)
JS_FN
(
"
negated
"
Duration_negated
0
0
)
JS_FN
(
"
abs
"
Duration_abs
0
0
)
JS_FN
(
"
valueOf
"
Duration_valueOf
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
Duration_prototype_properties
[
]
=
{
JS_PSG
(
"
years
"
Duration_years
0
)
JS_PSG
(
"
months
"
Duration_months
0
)
JS_PSG
(
"
weeks
"
Duration_weeks
0
)
JS_PSG
(
"
days
"
Duration_days
0
)
JS_PSG
(
"
hours
"
Duration_hours
0
)
JS_PSG
(
"
minutes
"
Duration_minutes
0
)
JS_PSG
(
"
seconds
"
Duration_seconds
0
)
JS_PSG
(
"
milliseconds
"
Duration_milliseconds
0
)
JS_PSG
(
"
microseconds
"
Duration_microseconds
0
)
JS_PSG
(
"
nanoseconds
"
Duration_nanoseconds
0
)
JS_PSG
(
"
sign
"
Duration_sign
0
)
JS_PSG
(
"
blank
"
Duration_blank
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Duration
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
DurationObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
DurationConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
DurationObject
>
Duration_methods
nullptr
Duration_prototype_methods
Duration_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
