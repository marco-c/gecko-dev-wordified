/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsDuration
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
DurationObject
>
(
)
;
}
#
ifdef
DEBUG
static
bool
IsIntegerOrInfinity
(
double
d
)
{
return
IsInteger
(
d
)
|
|
std
:
:
isinf
(
d
)
;
}
static
bool
IsIntegerOrInfinityDuration
(
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Integers
exceeding
the
Number
range
are
represented
as
infinity
.
return
IsIntegerOrInfinity
(
years
)
&
&
IsIntegerOrInfinity
(
months
)
&
&
IsIntegerOrInfinity
(
weeks
)
&
&
IsIntegerOrInfinity
(
days
)
&
&
IsIntegerOrInfinity
(
hours
)
&
&
IsIntegerOrInfinity
(
minutes
)
&
&
IsIntegerOrInfinity
(
seconds
)
&
&
IsIntegerOrInfinity
(
milliseconds
)
&
&
IsIntegerOrInfinity
(
microseconds
)
&
&
IsIntegerOrInfinity
(
nanoseconds
)
;
}
#
endif
/
*
*
*
DurationSign
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
int32_t
js
:
:
temporal
:
:
DurationSign
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
/
/
Step
1
.
a
.
if
(
v
<
0
)
{
return
-
1
;
}
/
/
Step
1
.
b
.
if
(
v
>
0
)
{
return
1
;
}
}
/
/
Step
2
.
return
0
;
}
/
*
*
*
IsValidDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
int32_t
sign
=
DurationSign
(
duration
)
;
/
/
Step
2
.
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
/
/
Step
2
.
a
.
if
(
!
std
:
:
isfinite
(
v
)
)
{
return
false
;
}
/
/
Step
2
.
b
.
if
(
v
<
0
&
&
sign
>
0
)
{
return
false
;
}
/
/
Step
2
.
c
.
if
(
v
>
0
&
&
sign
<
0
)
{
return
false
;
}
}
/
/
Step
3
.
return
true
;
}
/
*
*
*
IsValidDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
)
*
/
bool
js
:
:
temporal
:
:
ThrowIfInvalidDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
int32_t
sign
=
DurationSign
(
duration
)
;
auto
report
=
[
&
]
(
double
v
const
char
*
name
unsigned
errorNumber
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
v
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
errorNumber
name
numStr
)
;
}
;
auto
throwIfInvalid
=
[
&
]
(
double
v
const
char
*
name
)
{
/
/
Step
2
.
a
.
if
(
!
std
:
:
isfinite
(
v
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
return
false
;
}
/
/
Steps
2
.
b
-
c
.
if
(
(
v
<
0
&
&
sign
>
0
)
|
|
(
v
>
0
&
&
sign
<
0
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_SIGN
)
;
return
false
;
}
return
true
;
}
;
/
/
Step
2
.
if
(
!
throwIfInvalid
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
days
"
days
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
hours
"
hours
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
minutes
"
minutes
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
seconds
"
seconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
milliseconds
"
milliseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
microseconds
"
microseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
nanoseconds
"
nanoseconds
"
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
/
/
Step
3
.
return
true
;
}
/
*
*
*
CreateTemporalDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
[
newTarget
]
)
*
/
static
DurationObject
*
CreateTemporalDuration
(
JSContext
*
cx
const
CallArgs
&
args
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
/
/
Step
1
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
/
/
Steps
2
-
3
.
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Duration
&
proto
)
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithClassProto
<
DurationObject
>
(
cx
proto
)
;
if
(
!
object
)
{
return
nullptr
;
}
/
/
Steps
4
-
13
.
/
/
Add
zero
to
convert
-
0
to
+
0
.
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
/
/
Step
14
.
return
object
;
}
/
*
*
*
CreateTemporalDuration
(
years
months
weeks
days
hours
minutes
seconds
*
milliseconds
microseconds
nanoseconds
[
newTarget
]
)
*
/
DurationObject
*
js
:
:
temporal
:
:
CreateTemporalDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
MOZ_ASSERT
(
IsInteger
(
years
)
)
;
MOZ_ASSERT
(
IsInteger
(
months
)
)
;
MOZ_ASSERT
(
IsInteger
(
weeks
)
)
;
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
IsInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
/
/
Step
1
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
/
/
Steps
2
-
3
.
auto
*
object
=
NewBuiltinClassInstance
<
DurationObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
/
/
Steps
4
-
13
.
/
/
Add
zero
to
convert
-
0
to
+
0
.
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
/
/
Step
14
.
return
object
;
}
/
*
*
*
ToIntegerIfIntegral
(
argument
)
*
/
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
const
char
*
name
Handle
<
Value
>
argument
double
*
num
)
{
/
/
Step
1
.
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
js
:
:
IsInteger
(
d
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
name
)
;
return
false
;
}
/
/
Step
3
.
*
num
=
d
;
return
true
;
}
/
*
*
*
ToIntegerIfIntegral
(
argument
)
*
/
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
Handle
<
PropertyName
*
>
name
Handle
<
Value
>
argument
double
*
result
)
{
/
/
Step
1
.
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
/
/
Step
2
.
if
(
!
js
:
:
IsInteger
(
d
)
)
{
if
(
auto
nameStr
=
js
:
:
QuoteString
(
cx
name
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
nameStr
.
get
(
)
)
;
}
return
false
;
}
/
/
Step
3
.
*
result
=
d
;
return
true
;
}
/
*
*
*
ToTemporalPartialDurationRecord
(
temporalDurationLike
)
*
/
static
bool
ToTemporalPartialDurationRecord
(
JSContext
*
cx
Handle
<
JSObject
*
>
temporalDurationLike
Duration
*
result
)
{
/
/
Steps
1
-
3
.
(
Not
applicable
in
our
implementation
.
)
Rooted
<
Value
>
value
(
cx
)
;
bool
any
=
false
;
auto
getDurationProperty
=
[
&
]
(
Handle
<
PropertyName
*
>
name
double
*
num
)
{
if
(
!
GetProperty
(
cx
temporalDurationLike
temporalDurationLike
name
&
value
)
)
{
return
false
;
}
if
(
!
value
.
isUndefined
(
)
)
{
any
=
true
;
if
(
!
ToIntegerIfIntegral
(
cx
name
value
num
)
)
{
return
false
;
}
}
return
true
;
}
;
/
/
Steps
4
-
23
.
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
days
&
result
-
>
days
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
hours
&
result
-
>
hours
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
microseconds
&
result
-
>
microseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
milliseconds
&
result
-
>
milliseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
minutes
&
result
-
>
minutes
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
months
&
result
-
>
months
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
nanoseconds
&
result
-
>
nanoseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
seconds
&
result
-
>
seconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
weeks
&
result
-
>
weeks
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
years
&
result
-
>
years
)
)
{
return
false
;
}
/
/
Step
24
.
if
(
!
any
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT
)
;
return
false
;
}
/
/
Step
25
.
return
true
;
}
/
*
*
*
ToTemporalDurationRecord
(
temporalDurationLike
)
*
/
bool
js
:
:
temporal
:
:
ToTemporalDurationRecord
(
JSContext
*
cx
Handle
<
Value
>
temporalDurationLike
Duration
*
result
)
{
/
/
Step
1
.
if
(
!
temporalDurationLike
.
isObject
(
)
)
{
/
/
Step
1
.
a
.
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
temporalDurationLike
)
)
;
if
(
!
string
)
{
return
false
;
}
/
/
Step
1
.
b
.
return
ParseTemporalDurationString
(
cx
string
result
)
;
}
Rooted
<
JSObject
*
>
durationLike
(
cx
&
temporalDurationLike
.
toObject
(
)
)
;
/
/
Step
2
.
if
(
auto
*
duration
=
durationLike
-
>
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
*
result
=
ToDuration
(
duration
)
;
return
true
;
}
/
/
Step
3
.
Duration
duration
=
{
}
;
/
/
Steps
4
-
14
.
if
(
!
ToTemporalPartialDurationRecord
(
cx
durationLike
&
duration
)
)
{
return
false
;
}
/
/
Step
15
.
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
false
;
}
/
/
Step
16
.
*
result
=
duration
;
return
true
;
}
/
*
*
*
ToTemporalDuration
(
item
)
*
/
Wrapped
<
DurationObject
*
>
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
/
/
Step
1
.
if
(
item
.
isObject
(
)
)
{
JSObject
*
itemObj
=
&
item
.
toObject
(
)
;
if
(
itemObj
-
>
canUnwrapAs
<
DurationObject
>
(
)
)
{
return
itemObj
;
}
}
/
/
Step
2
.
Duration
result
;
if
(
!
ToTemporalDurationRecord
(
cx
item
&
result
)
)
{
return
nullptr
;
}
/
/
Step
3
.
return
CreateTemporalDuration
(
cx
result
)
;
}
/
*
*
*
ToTemporalDuration
(
item
)
*
/
bool
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
Duration
*
result
)
{
auto
obj
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToDuration
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
static
Duration
AbsoluteDuration
(
const
Duration
&
duration
)
{
return
{
std
:
:
abs
(
duration
.
years
)
std
:
:
abs
(
duration
.
months
)
std
:
:
abs
(
duration
.
weeks
)
std
:
:
abs
(
duration
.
days
)
std
:
:
abs
(
duration
.
hours
)
std
:
:
abs
(
duration
.
minutes
)
std
:
:
abs
(
duration
.
seconds
)
std
:
:
abs
(
duration
.
milliseconds
)
std
:
:
abs
(
duration
.
microseconds
)
std
:
:
abs
(
duration
.
nanoseconds
)
}
;
}
/
*
*
*
Temporal
.
Duration
(
[
years
[
months
[
weeks
[
days
[
hours
[
*
minutes
[
seconds
[
milliseconds
[
microseconds
[
nanoseconds
]
]
]
]
*
]
]
]
]
]
]
)
*
/
static
bool
DurationConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
/
/
Step
1
.
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
Duration
"
)
)
{
return
false
;
}
/
/
Step
2
.
double
years
=
0
;
if
(
args
.
hasDefined
(
0
)
&
&
!
ToIntegerIfIntegral
(
cx
"
years
"
args
[
0
]
&
years
)
)
{
return
false
;
}
/
/
Step
3
.
double
months
=
0
;
if
(
args
.
hasDefined
(
1
)
&
&
!
ToIntegerIfIntegral
(
cx
"
months
"
args
[
1
]
&
months
)
)
{
return
false
;
}
/
/
Step
4
.
double
weeks
=
0
;
if
(
args
.
hasDefined
(
2
)
&
&
!
ToIntegerIfIntegral
(
cx
"
weeks
"
args
[
2
]
&
weeks
)
)
{
return
false
;
}
/
/
Step
5
.
double
days
=
0
;
if
(
args
.
hasDefined
(
3
)
&
&
!
ToIntegerIfIntegral
(
cx
"
days
"
args
[
3
]
&
days
)
)
{
return
false
;
}
/
/
Step
6
.
double
hours
=
0
;
if
(
args
.
hasDefined
(
4
)
&
&
!
ToIntegerIfIntegral
(
cx
"
hours
"
args
[
4
]
&
hours
)
)
{
return
false
;
}
/
/
Step
7
.
double
minutes
=
0
;
if
(
args
.
hasDefined
(
5
)
&
&
!
ToIntegerIfIntegral
(
cx
"
minutes
"
args
[
5
]
&
minutes
)
)
{
return
false
;
}
/
/
Step
8
.
double
seconds
=
0
;
if
(
args
.
hasDefined
(
6
)
&
&
!
ToIntegerIfIntegral
(
cx
"
seconds
"
args
[
6
]
&
seconds
)
)
{
return
false
;
}
/
/
Step
9
.
double
milliseconds
=
0
;
if
(
args
.
hasDefined
(
7
)
&
&
!
ToIntegerIfIntegral
(
cx
"
milliseconds
"
args
[
7
]
&
milliseconds
)
)
{
return
false
;
}
/
/
Step
10
.
double
microseconds
=
0
;
if
(
args
.
hasDefined
(
8
)
&
&
!
ToIntegerIfIntegral
(
cx
"
microseconds
"
args
[
8
]
&
microseconds
)
)
{
return
false
;
}
/
/
Step
11
.
double
nanoseconds
=
0
;
if
(
args
.
hasDefined
(
9
)
&
&
!
ToIntegerIfIntegral
(
cx
"
nanoseconds
"
args
[
9
]
&
nanoseconds
)
)
{
return
false
;
}
/
/
Step
12
.
auto
*
duration
=
CreateTemporalDuration
(
cx
args
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
;
if
(
!
duration
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
duration
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
from
(
item
)
*
/
static
bool
Duration_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Handle
<
Value
>
item
=
args
.
get
(
0
)
;
/
/
Step
1
.
if
(
item
.
isObject
(
)
)
{
if
(
auto
*
duration
=
item
.
toObject
(
)
.
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
auto
*
result
=
CreateTemporalDuration
(
cx
ToDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
/
/
Step
2
.
auto
result
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
years
*
/
static
bool
Duration_years
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
years
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
years
*
/
static
bool
Duration_years
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_years
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
months
*
/
static
bool
Duration_months
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
months
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
months
*
/
static
bool
Duration_months
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_months
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
weeks
*
/
static
bool
Duration_weeks
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
weeks
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
weeks
*
/
static
bool
Duration_weeks
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_weeks
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
days
*
/
static
bool
Duration_days
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
days
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
days
*
/
static
bool
Duration_days
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_days
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
hours
*
/
static
bool
Duration_hours
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
hours
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
hours
*
/
static
bool
Duration_hours
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_hours
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
minutes
*
/
static
bool
Duration_minutes
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
minutes
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
minutes
*
/
static
bool
Duration_minutes
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_minutes
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
seconds
*
/
static
bool
Duration_seconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
seconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
seconds
*
/
static
bool
Duration_seconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_seconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
milliseconds
*
/
static
bool
Duration_milliseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
milliseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
milliseconds
*
/
static
bool
Duration_milliseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_milliseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
microseconds
*
/
static
bool
Duration_microseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
microseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
microseconds
*
/
static
bool
Duration_microseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_microseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
nanoseconds
*
/
static
bool
Duration_nanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
nanoseconds
(
)
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
nanoseconds
*
/
static
bool
Duration_nanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_nanoseconds
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
sign
*
/
static
bool
Duration_sign
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
args
.
rval
(
)
.
setInt32
(
sign
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
sign
*
/
static
bool
Duration_sign
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_sign
>
(
cx
args
)
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
blank
*
/
static
bool
Duration_blank
(
JSContext
*
cx
const
CallArgs
&
args
)
{
/
/
Step
3
.
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
/
/
Steps
4
-
5
.
args
.
rval
(
)
.
setBoolean
(
sign
=
=
0
)
;
return
true
;
}
/
*
*
*
get
Temporal
.
Duration
.
prototype
.
blank
*
/
static
bool
Duration_blank
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_blank
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
with
(
temporalDurationLike
)
*
*
ToPartialDuration
(
temporalDurationLike
)
*
/
static
bool
Duration_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
/
/
Absent
values
default
to
the
corresponding
values
of
|
this
|
object
.
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Steps
3
-
23
.
Rooted
<
JSObject
*
>
temporalDurationLike
(
cx
RequireObjectArg
(
cx
"
temporalDurationLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDurationLike
)
{
return
false
;
}
if
(
!
ToTemporalPartialDurationRecord
(
cx
temporalDurationLike
&
duration
)
)
{
return
false
;
}
/
/
Step
24
.
auto
*
result
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
with
(
temporalDurationLike
)
*
/
static
bool
Duration_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_with
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
negated
(
)
*
/
static
bool
Duration_negated
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Step
3
.
auto
*
result
=
CreateTemporalDuration
(
cx
duration
.
negate
(
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
negated
(
)
*
/
static
bool
Duration_negated
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_negated
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
abs
(
)
*
/
static
bool
Duration_abs
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
/
/
Step
3
.
auto
*
result
=
CreateTemporalDuration
(
cx
AbsoluteDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
abs
(
)
*
/
static
bool
Duration_abs
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
/
/
Steps
1
-
2
.
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_abs
>
(
cx
args
)
;
}
/
*
*
*
Temporal
.
Duration
.
prototype
.
valueOf
(
)
*
/
static
bool
Duration_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
Duration
"
"
primitive
type
"
)
;
return
false
;
}
const
JSClass
DurationObject
:
:
class_
=
{
"
Temporal
.
Duration
"
JSCLASS_HAS_RESERVED_SLOTS
(
DurationObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Duration
)
JS_NULL_CLASS_OPS
&
DurationObject
:
:
classSpec_
}
;
const
JSClass
&
DurationObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
Duration_methods
[
]
=
{
JS_FN
(
"
from
"
Duration_from
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
Duration_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
Duration_with
1
0
)
JS_FN
(
"
negated
"
Duration_negated
0
0
)
JS_FN
(
"
abs
"
Duration_abs
0
0
)
JS_FN
(
"
valueOf
"
Duration_valueOf
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
Duration_prototype_properties
[
]
=
{
JS_PSG
(
"
years
"
Duration_years
0
)
JS_PSG
(
"
months
"
Duration_months
0
)
JS_PSG
(
"
weeks
"
Duration_weeks
0
)
JS_PSG
(
"
days
"
Duration_days
0
)
JS_PSG
(
"
hours
"
Duration_hours
0
)
JS_PSG
(
"
minutes
"
Duration_minutes
0
)
JS_PSG
(
"
seconds
"
Duration_seconds
0
)
JS_PSG
(
"
milliseconds
"
Duration_milliseconds
0
)
JS_PSG
(
"
microseconds
"
Duration_microseconds
0
)
JS_PSG
(
"
nanoseconds
"
Duration_nanoseconds
0
)
JS_PSG
(
"
sign
"
Duration_sign
0
)
JS_PSG
(
"
blank
"
Duration_blank
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Duration
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
DurationObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
DurationConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
DurationObject
>
Duration_methods
nullptr
Duration_prototype_methods
Duration_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
