/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
builtin_temporal_TimeZone_h
#
define
builtin_temporal_TimeZone_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
class
JSLinearString
;
class
JS_PUBLIC_API
JSTracer
;
struct
JSClassOps
;
namespace
js
{
struct
ClassSpec
;
}
namespace
mozilla
:
:
intl
{
class
TimeZone
;
}
namespace
js
:
:
temporal
{
class
BuiltinTimeZoneObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
OFFSET_MINUTES_SLOT
=
1
;
static
constexpr
uint32_t
INTL_TIMEZONE_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
/
/
Estimated
memory
use
for
intl
:
:
TimeZone
(
see
IcuMemoryUsage
)
.
static
constexpr
size_t
EstimatedMemoryUse
=
6840
;
JSString
*
identifier
(
)
const
{
return
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
;
}
const
auto
&
offsetMinutes
(
)
const
{
return
getFixedSlot
(
OFFSET_MINUTES_SLOT
)
;
}
mozilla
:
:
intl
:
:
TimeZone
*
getTimeZone
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
INTL_TIMEZONE_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
TimeZone
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setTimeZone
(
mozilla
:
:
intl
:
:
TimeZone
*
timeZone
)
{
setFixedSlot
(
INTL_TIMEZONE_SLOT
JS
:
:
PrivateValue
(
timeZone
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
}
/
*
namespace
js
:
:
temporal
*
/
namespace
js
:
:
temporal
{
/
*
*
*
Temporal
time
zones
can
be
either
canonical
time
zone
identifiers
or
time
*
zone
offset
strings
.
*
*
Examples
of
valid
Temporal
time
zones
:
*
-
"
UTC
"
*
-
"
America
/
New_York
"
*
-
"
+
00
:
00
"
*
*
Examples
of
invalid
Temporal
time
zones
:
*
-
"
utc
"
(
wrong
case
)
*
-
"
Etc
/
UTC
"
(
canonical
name
is
"
UTC
"
)
*
-
"
+
00
"
(
missing
minutes
part
)
*
-
"
+
00
:
00
:
00
"
(
sub
-
minute
precision
)
*
-
"
+
00
:
00
:
01
"
(
sub
-
minute
precision
)
*
-
"
-
00
:
00
"
(
wrong
sign
for
zero
offset
)
*
*
The
following
two
implementation
approaches
are
possible
:
*
*
1
.
Represent
time
zones
as
JSStrings
.
Additionally
keep
a
mapping
from
*
JSString
to
mozilla
:
:
intl
:
:
TimeZone
to
avoid
repeatedly
creating
new
*
mozilla
:
:
intl
:
:
TimeZone
for
time
zone
operations
.
Offset
string
time
*
zones
have
to
be
special
cased
because
they
don
'
t
use
*
mozilla
:
:
intl
:
:
TimeZone
.
Either
detect
offset
strings
by
checking
the
*
time
zone
identifier
or
store
offset
strings
as
the
offset
in
minutes
*
value
to
avoid
reparsing
the
offset
string
again
and
again
.
*
2
.
Represent
time
zones
as
objects
which
hold
mozilla
:
:
intl
:
:
TimeZone
in
*
an
internal
slot
.
*
*
Option
2
is
a
bit
easier
to
implement
so
we
use
this
approach
for
now
.
*
/
class
MOZ_STACK_CLASS
TimeZoneValue
final
{
BuiltinTimeZoneObject
*
object_
=
nullptr
;
public
:
/
*
*
*
Default
initialize
this
TimeZoneValue
.
*
/
TimeZoneValue
(
)
=
default
;
/
*
*
*
Initialize
this
TimeZoneValue
with
a
built
-
in
time
zone
object
.
*
/
explicit
TimeZoneValue
(
BuiltinTimeZoneObject
*
timeZone
)
:
object_
(
timeZone
)
{
MOZ_ASSERT
(
object_
)
;
}
/
*
*
*
Initialize
this
TimeZoneValue
from
a
slot
Value
.
*
/
explicit
TimeZoneValue
(
const
JS
:
:
Value
&
value
)
:
object_
(
&
value
.
toObject
(
)
.
as
<
BuiltinTimeZoneObject
>
(
)
)
{
}
/
*
*
*
Return
true
if
this
TimeZoneValue
is
not
null
.
*
/
explicit
operator
bool
(
)
const
{
return
!
!
object_
;
}
/
*
*
*
Return
true
if
this
TimeZoneValue
is
an
offset
time
zone
.
*
/
bool
isOffset
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
offsetMinutes
(
)
.
isInt32
(
)
;
}
/
*
*
*
Return
the
offset
of
an
offset
time
zone
.
*
/
auto
offsetMinutes
(
)
const
{
MOZ_ASSERT
(
isOffset
(
)
)
;
return
object_
-
>
offsetMinutes
(
)
.
toInt32
(
)
;
}
/
*
*
*
Return
the
time
zone
identifier
.
*
/
auto
*
identifier
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
identifier
(
)
;
}
/
*
*
*
Return
the
time
zone
implementation
.
*
/
auto
*
getTimeZone
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
getTimeZone
(
)
;
}
/
*
*
*
Return
the
underlying
BuiltinTimeZoneObject
.
*
/
auto
*
toBuiltinTimeZoneObject
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
;
}
/
*
*
*
Return
the
slot
Value
representation
of
this
TimeZoneValue
.
*
/
JS
:
:
Value
toSlotValue
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
JS
:
:
ObjectValue
(
*
object_
)
;
}
/
/
Helper
methods
for
(
Mutable
)
WrappedPtrOperations
.
auto
address
(
)
{
return
&
object_
;
}
auto
address
(
)
const
{
return
&
object_
;
}
/
/
Trace
implementation
.
void
trace
(
JSTracer
*
trc
)
;
}
;
class
MOZ_STACK_CLASS
TimeZoneRecord
final
{
TimeZoneValue
receiver_
;
public
:
/
*
*
*
Default
initialize
this
TimeZoneRecord
.
*
/
TimeZoneRecord
(
)
=
default
;
explicit
TimeZoneRecord
(
const
TimeZoneValue
&
receiver
)
:
receiver_
(
receiver
)
{
}
const
auto
&
receiver
(
)
const
{
return
receiver_
;
}
/
/
Helper
methods
for
(
Mutable
)
WrappedPtrOperations
.
auto
*
receiverDoNotUse
(
)
const
{
return
&
receiver_
;
}
/
/
Trace
implementation
.
void
trace
(
JSTracer
*
trc
)
;
}
;
struct
Instant
;
struct
ParsedTimeZone
;
struct
PlainDateTime
;
class
CalendarValue
;
class
InstantObject
;
class
PlainDateTimeObject
;
class
PlainDateTimeWithCalendar
;
enum
class
TemporalDisambiguation
;
/
*
*
*
IsValidTimeZoneName
(
timeZone
)
*
IsAvailableTimeZoneName
(
timeZone
)
*
/
bool
IsValidTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
;
/
*
*
*
CanonicalizeTimeZoneName
(
timeZone
)
*
/
JSString
*
CanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
timeZone
)
;
/
*
*
*
IsValidTimeZoneName
(
timeZone
)
*
IsAvailableTimeZoneName
(
timeZone
)
*
CanonicalizeTimeZoneName
(
timeZone
)
*
/
JSString
*
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
)
;
/
*
*
*
CreateTemporalTimeZone
(
identifier
[
newTarget
]
)
*
/
BuiltinTimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
identifier
)
;
/
*
*
*
ToTemporalTimeZoneSlotValue
(
temporalTimeZoneLike
)
*
/
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalTimeZoneLike
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
/
*
*
*
ToTemporalTimeZoneSlotValue
(
temporalTimeZoneLike
)
*
/
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
ParsedTimeZone
>
string
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
/
*
*
*
ToTemporalTimeZoneIdentifier
(
timeZoneSlotValue
)
*
/
JSString
*
ToTemporalTimeZoneIdentifier
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
)
;
/
*
*
*
TimeZoneEquals
(
one
two
)
*
/
bool
TimeZoneEquals
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
one
JS
:
:
Handle
<
JSString
*
>
two
bool
*
equals
)
;
/
*
*
*
TimeZoneEquals
(
one
two
)
*
/
bool
TimeZoneEquals
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
one
JS
:
:
Handle
<
TimeZoneValue
>
two
bool
*
equals
)
;
/
*
*
*
GetPlainDateTimeFor
(
timeZoneRec
instant
calendar
[
*
precalculatedOffsetNanoseconds
]
)
*
/
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
/
*
*
*
GetPlainDateTimeFor
(
timeZoneRec
instant
calendar
[
*
precalculatedOffsetNanoseconds
]
)
*
/
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
const
Instant
&
instant
JS
:
:
Handle
<
CalendarValue
>
calendar
int64_t
offsetNanoseconds
)
;
/
*
*
*
GetPlainDateTimeFor
(
timeZoneRec
instant
calendar
[
*
precalculatedOffsetNanoseconds
]
)
*
/
PlainDateTime
GetPlainDateTimeFor
(
const
Instant
&
instant
int64_t
offsetNanoseconds
)
;
/
*
*
*
GetPlainDateTimeFor
(
timeZoneRec
instant
calendar
[
*
precalculatedOffsetNanoseconds
]
)
*
/
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
/
*
*
*
GetPlainDateTimeFor
(
timeZoneRec
instant
calendar
[
*
precalculatedOffsetNanoseconds
]
)
*
/
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
/
*
*
*
GetInstantFor
(
timeZoneRec
dateTime
disambiguation
)
*
/
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
PlainDateTimeObject
*
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
/
*
*
*
GetInstantFor
(
timeZoneRec
dateTime
disambiguation
)
*
/
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
/
*
*
*
GetInstantFor
(
timeZoneRec
dateTime
disambiguation
)
*
/
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
/
*
*
*
FormatUTCOffsetNanoseconds
(
offsetNanoseconds
)
*
/
JSString
*
FormatUTCOffsetNanoseconds
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
;
/
*
*
*
GetOffsetStringFor
(
timeZoneRec
instant
)
*
/
JSString
*
GetOffsetStringFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
)
;
/
*
*
*
GetOffsetStringFor
(
timeZoneRec
instant
)
*
/
JSString
*
GetOffsetStringFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
)
;
/
*
*
*
GetOffsetNanosecondsFor
(
timeZoneRec
instant
)
*
/
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
;
/
*
*
*
GetOffsetNanosecondsFor
(
timeZoneRec
instant
)
*
/
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
;
/
*
*
*
GetOffsetNanosecondsFor
(
timeZoneRec
instant
)
*
/
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
/
*
*
*
GetOffsetNanosecondsFor
(
timeZoneRec
instant
)
*
/
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
using
InstantVector
=
JS
:
:
StackGCVector
<
Wrapped
<
InstantObject
*
>
>
;
/
*
*
*
GetPossibleInstantsFor
(
timeZoneRec
dateTime
)
*
/
bool
GetPossibleInstantsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
JS
:
:
MutableHandle
<
InstantVector
>
list
)
;
/
*
*
*
DisambiguatePossibleInstants
(
possibleInstants
timeZoneRec
dateTime
*
disambiguation
)
*
/
bool
DisambiguatePossibleInstants
(
JSContext
*
cx
JS
:
:
Handle
<
InstantVector
>
possibleInstants
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
JS
:
:
MutableHandle
<
Wrapped
<
InstantObject
*
>
>
result
)
;
/
*
*
*
GetNamedTimeZoneNextTransition
(
timeZoneIdentifier
epochNanoseconds
)
*
/
bool
GetNamedTimeZoneNextTransition
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
/
*
*
*
GetNamedTimeZonePreviousTransition
(
timeZoneIdentifier
epochNanoseconds
)
*
/
bool
GetNamedTimeZonePreviousTransition
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
/
*
*
*
CreateTimeZoneMethodsRecord
(
timeZone
methods
)
*
/
bool
CreateTimeZoneMethodsRecord
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
MutableHandle
<
TimeZoneRecord
>
result
)
;
/
/
Helper
for
MutableWrappedPtrOperations
.
bool
WrapTimeZoneValueObject
(
JSContext
*
cx
JS
:
:
MutableHandle
<
BuiltinTimeZoneObject
*
>
timeZone
)
;
}
/
*
namespace
js
:
:
temporal
*
/
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
explicit
operator
bool
(
)
const
{
return
!
!
container
(
)
;
}
bool
isOffset
(
)
const
{
return
container
(
)
.
isOffset
(
)
;
}
auto
offsetMinutes
(
)
const
{
return
container
(
)
.
offsetMinutes
(
)
;
}
auto
*
identifier
(
)
const
{
return
container
(
)
.
identifier
(
)
;
}
auto
*
getTimeZone
(
)
const
{
return
container
(
)
.
getTimeZone
(
)
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
return
container
(
)
.
toSlotValue
(
)
;
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
:
public
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
auto
&
container
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
/
*
*
*
Wrap
the
time
zone
value
into
the
current
compartment
.
*
/
bool
wrap
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
container
(
)
)
;
auto
mh
=
JS
:
:
MutableHandle
<
temporal
:
:
BuiltinTimeZoneObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
return
temporal
:
:
WrapTimeZoneValueObject
(
cx
mh
)
;
}
}
;
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
TimeZoneRecord
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
JS
:
:
Handle
<
temporal
:
:
TimeZoneValue
>
receiver
(
)
const
{
return
JS
:
:
Handle
<
temporal
:
:
TimeZoneValue
>
:
:
fromMarkedLocation
(
container
(
)
.
receiverDoNotUse
(
)
)
;
}
}
;
}
/
*
namespace
js
*
/
#
endif
/
*
builtin_temporal_TimeZone_h
*
/
