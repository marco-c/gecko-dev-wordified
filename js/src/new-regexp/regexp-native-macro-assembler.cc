/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Copyright
2020
the
V8
project
authors
.
All
rights
reserved
.
/
/
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
/
/
found
in
the
LICENSE
file
.
#
include
"
new
-
regexp
/
regexp
-
macro
-
assembler
-
arch
.
h
"
#
include
"
new
-
regexp
/
regexp
-
stack
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
namespace
v8
{
namespace
internal
{
using
js
:
:
jit
:
:
StackMacroAssembler
;
SMRegExpMacroAssembler
:
:
SMRegExpMacroAssembler
(
JSContext
*
cx
Isolate
*
isolate
StackMacroAssembler
&
masm
Zone
*
zone
Mode
mode
uint32_t
num_capture_registers
)
:
NativeRegExpMacroAssembler
(
isolate
zone
)
cx_
(
cx
)
masm_
(
masm
)
mode_
(
mode
)
num_registers_
(
num_capture_registers
)
num_capture_registers_
(
num_capture_registers
)
{
/
/
Each
capture
has
a
start
and
an
end
register
MOZ_ASSERT
(
num_capture_registers_
%
2
=
=
0
)
;
}
int
SMRegExpMacroAssembler
:
:
stack_limit_slack
(
)
{
return
RegExpStack
:
:
kStackLimitSlack
;
}
/
/
This
is
only
used
by
tracing
code
.
/
/
The
return
value
doesn
'
t
matter
.
RegExpMacroAssembler
:
:
IrregexpImplementation
SMRegExpMacroAssembler
:
:
Implementation
(
)
{
return
kBytecodeImplementation
;
}
}
/
/
namespace
internal
}
/
/
namespace
v8
