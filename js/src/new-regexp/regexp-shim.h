/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Copyright
2019
the
V8
project
authors
.
All
rights
reserved
.
/
/
Use
of
this
source
code
is
governed
by
a
BSD
-
style
license
that
can
be
/
/
found
in
the
LICENSE
file
.
#
ifndef
RegexpShim_h
#
define
RegexpShim_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
<
algorithm
>
#
define
V8_WARN_UNUSED_RESULT
MOZ_MUST_USE
#
define
V8_EXPORT_PRIVATE
MOZ_EXPORT
#
define
V8_FALLTHROUGH
MOZ_FALLTHROUGH
#
define
FATAL
(
x
)
MOZ_CRASH
(
x
)
#
define
UNREACHABLE
(
)
MOZ_CRASH
(
"
unreachable
code
"
)
#
define
UNIMPLEMENTED
(
)
MOZ_CRASH
(
"
unimplemented
code
"
)
#
define
STATIC_ASSERT
(
exp
)
static_assert
(
exp
#
exp
)
#
define
DCHECK
MOZ_ASSERT
#
define
DCHECK_EQ
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
=
=
(
rhs
)
)
#
define
DCHECK_NE
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
!
=
(
rhs
)
)
#
define
DCHECK_GT
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
>
(
rhs
)
)
#
define
DCHECK_GE
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
>
=
(
rhs
)
)
#
define
DCHECK_LT
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
<
(
rhs
)
)
#
define
DCHECK_LE
(
lhs
rhs
)
MOZ_ASSERT
(
(
lhs
)
<
=
(
rhs
)
)
#
define
DCHECK_NULL
(
val
)
MOZ_ASSERT
(
(
val
)
=
=
nullptr
)
#
define
DCHECK_NOT_NULL
(
val
)
MOZ_ASSERT
(
(
val
)
!
=
nullptr
)
#
define
DCHECK_IMPLIES
(
lhs
rhs
)
MOZ_ASSERT_IF
(
lhs
rhs
)
#
define
CHECK
MOZ_RELEASE_ASSERT
template
<
class
T
>
static
constexpr
inline
T
Min
(
T
t1
T
t2
)
{
return
t1
<
t2
?
t1
:
t2
;
}
template
<
class
T
>
static
constexpr
inline
T
Max
(
T
t1
T
t2
)
{
return
t1
>
t2
?
t1
:
t2
;
}
#
define
MemCopy
memcpy
/
/
Origin
:
/
/
https
:
/
/
github
.
com
/
v8
/
v8
/
blob
/
855591a54d160303349a5f0a32fab15825c708d1
/
src
/
base
/
macros
.
h
#
L310
-
L319
/
/
ptrdiff_t
is
'
t
'
according
to
the
standard
but
MSVC
uses
'
I
'
.
#
ifdef
_MSC_VER
#
define
V8PRIxPTRDIFF
"
Ix
"
#
define
V8PRIdPTRDIFF
"
Id
"
#
define
V8PRIuPTRDIFF
"
Iu
"
#
else
#
define
V8PRIxPTRDIFF
"
tx
"
#
define
V8PRIdPTRDIFF
"
td
"
#
define
V8PRIuPTRDIFF
"
tu
"
#
endif
/
/
Origin
:
/
/
https
:
/
/
github
.
com
/
v8
/
v8
/
blob
/
855591a54d160303349a5f0a32fab15825c708d1
/
src
/
base
/
macros
.
h
#
L27
-
L38
/
/
The
arraysize
(
arr
)
macro
returns
the
#
of
elements
in
an
array
arr
.
/
/
The
expression
is
a
compile
-
time
constant
and
therefore
can
be
/
/
used
in
defining
new
arrays
for
example
.
If
you
use
arraysize
on
/
/
a
pointer
by
mistake
you
will
get
a
compile
-
time
error
.
#
define
arraysize
(
array
)
(
sizeof
(
ArraySizeHelper
(
array
)
)
)
/
/
This
template
function
declaration
is
used
in
defining
arraysize
.
/
/
Note
that
the
function
doesn
'
t
need
an
implementation
as
we
only
/
/
use
its
type
.
template
<
typename
T
size_t
N
>
char
(
&
ArraySizeHelper
(
T
(
&
array
)
[
N
]
)
)
[
N
]
;
/
/
Explicitly
declare
the
assignment
operator
as
deleted
.
#
define
DISALLOW_ASSIGN
(
TypeName
)
TypeName
&
operator
=
(
const
TypeName
&
)
=
delete
/
/
Explicitly
declare
the
copy
constructor
and
assignment
operator
as
deleted
.
/
/
This
also
deletes
the
implicit
move
constructor
and
implicit
move
assignment
/
/
operator
but
still
allows
to
manually
define
them
.
#
define
DISALLOW_COPY_AND_ASSIGN
(
TypeName
)
\
TypeName
(
const
TypeName
&
)
=
delete
;
\
DISALLOW_ASSIGN
(
TypeName
)
/
/
Explicitly
declare
all
implicit
constructors
as
deleted
namely
the
/
/
default
constructor
copy
constructor
and
operator
=
functions
.
/
/
This
is
especially
useful
for
classes
containing
only
static
methods
.
#
define
DISALLOW_IMPLICIT_CONSTRUCTORS
(
TypeName
)
\
TypeName
(
)
=
delete
;
\
DISALLOW_COPY_AND_ASSIGN
(
TypeName
)
namespace
v8
{
/
/
Origin
:
/
/
https
:
/
/
github
.
com
/
v8
/
v8
/
blob
/
855591a54d160303349a5f0a32fab15825c708d1
/
src
/
base
/
macros
.
h
#
L364
-
L367
template
<
typename
T
typename
U
>
constexpr
inline
bool
IsAligned
(
T
value
U
alignment
)
{
return
(
value
&
(
alignment
-
1
)
)
=
=
0
;
}
namespace
base
{
/
/
Origin
:
/
/
https
:
/
/
github
.
com
/
v8
/
v8
/
blob
/
855591a54d160303349a5f0a32fab15825c708d1
/
src
/
base
/
macros
.
h
#
L247
-
L258
/
/
The
USE
(
x
.
.
.
)
template
is
used
to
silence
C
+
+
compiler
warnings
/
/
issued
for
(
yet
)
unused
variables
(
typically
parameters
)
.
/
/
The
arguments
are
guaranteed
to
be
evaluated
from
left
to
right
.
struct
Use
{
template
<
typename
T
>
Use
(
T
&
&
)
{
}
/
/
NOLINT
(
runtime
/
explicit
)
}
;
#
define
USE
(
.
.
.
)
\
do
{
\
:
:
v8
:
:
base
:
:
Use
unused_tmp_array_for_use_macro
[
]
{
__VA_ARGS__
}
;
\
(
void
)
unused_tmp_array_for_use_macro
;
\
}
while
(
false
)
/
/
Origin
:
/
/
https
:
/
/
github
.
com
/
v8
/
v8
/
blob
/
855591a54d160303349a5f0a32fab15825c708d1
/
src
/
base
/
safe_conversions
.
h
#
L35
-
L39
/
/
saturated_cast
<
>
is
analogous
to
static_cast
<
>
for
numeric
types
except
/
/
that
the
specified
numeric
conversion
will
saturate
rather
than
overflow
or
/
/
underflow
.
template
<
typename
Dst
typename
Src
>
inline
Dst
saturated_cast
(
Src
value
)
;
/
/
This
is
the
only
specialization
that
is
needed
for
regexp
code
.
/
/
Instead
of
pulling
in
dozens
of
lines
of
template
goo
/
/
to
derive
it
I
used
the
implementation
from
uint8_clamped
in
/
/
ArrayBufferObject
.
h
.
template
<
>
inline
uint8_t
saturated_cast
<
uint8_t
int
>
(
int
x
)
{
return
(
x
>
=
0
)
?
(
(
x
<
255
)
?
uint8_t
(
x
)
:
255
)
:
0
;
}
}
/
/
namespace
base
}
/
/
namespace
v8
#
endif
/
/
RegexpShim_h
