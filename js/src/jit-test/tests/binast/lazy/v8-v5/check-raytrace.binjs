BINJS
[
GRAMMAR
]
identity
;
)
^
StaticMemberExpression
(
IdentifierExpression
BinaryExpression0LiteralNumericExpression
"
BindingIdentifier
&
ExpressionStatement
ThisExpression
(
AssignmentExpression8StaticMemberAssignmentTarget
DataProperty
&
LiteralPropertyName
CallExpression
VariableDeclarator
&
VariableDeclaration
>
AssertedPositionalParameterName
(
AssertedDeclaredName
.
LiteralStringExpression
AssertedParameterScope
AssertedVarScope
FormalParameters4FunctionExpressionContents
LazyFunctionExpression
NewExpression
IfStatement
UnaryExpression
ObjectExpression
ReturnStatement
AssertedBlockScope
Block
*
LiteralNullExpression4AssignmentTargetIdentifier0LiteralBooleanExpression
*
ConditionalExpression8CompoundAssignmentExpression0ComputedMemberExpression
UpdateExpression
ForStatement
ArrayExpression2AssertedScriptGlobalScope
<
ComputedMemberAssignmentTarget
ForInOfBinding
ForInStatement0FunctionOrMethodContents
.
LazyFunctionDeclaration
Script
ThrowStatement
[
STRINGS
]
identity
;
Flog
var
RayTracer
+
color
info
*
position
prototype
result
Vector
w
y
x
c1
v
=
=
undefined
typeof
scene
-
Color
ray
z
blue
green
red
pos
material
c2
shape
Class
options
t
Math
create
initialize
Shape
gloss
Material
distance
transparency
multiplyScalar
toString
]
b
g
r
reflection
subtract
>
canvas
d
dot
f
i
u
/
add
isHit
light
normalize
canvasHeight
canvasWidth
direction
hasTexture
intensity
refl
best
density
lookAt
radius
shadowInfo
shapes
up
&
&
<
IntersectionInfo
ambience
background
colorEven
colorOdd
dir
floor
getColor
lights
normal
rayDepth
renderDiffuse
renderHighlights
"
renderReflections
renderShadows
!
B
Ray
camera
checkNumber
dst
m
push
pxH
pxW
renderScene
s
vector
+
+
hasTexture
=
transparency
=
Background
BaseMaterial
Camera
D
L
Light
N
Object
Solid
Sphere
V
Vd
depth
destination
extend
hits
pixelHeight
pixelSize
pixelWidth
pow
property
reflectionRay
source
testIntersection
vU
C
Chessboard
E
Engine
H
Lv
P
Plane
R1
Scene
abs
cross
dB
equator
exclude
glossWeight
imageHeight
imageWidth
intersect
light1
limit
plane
rayTrace
raytracer
refraction
screen
shadowRay
shininess
sphere
sphere1
vA
vV
vx
vy
wrapUp
xp
yp
>
=
Array
BaseShape
Material
[
gloss
=
addScalar
blend
brightness
getPixelColor
getRay
getReflectionRay
hitCount
length
magnitude
multiply
oldColor
setPixel
sqrt
!
=
+
=
/
=
<
=
|
|
)
d
=
radius
=
2d
5
5
*
ChessMaterial
[
gloss
=
Intersection
[
Light
[
Plane
[
Ray
[
Ray
[
]
SolidMaterial
*
SolidMaterial
[
gloss
=
"
Sphere
[
position
=
Vector
[
2Vectors
must
be
defined
[
apply
arguments
assertEq
copy
divideFactor
fillRect
fillStyle
getContext
getIntensity
max
multiplyVector
rgb
(
split
strength
%
-
=
=
=
=
>
>
[
TREE
]
identity
;
[
ZN
>
>
4
F
b
*
(
&
6
6
*
(
&
H
*
(
&
TR
:
8
P
F
6
0
2
"
"
4
0
2
"
"
4
*
>
F
*
4
4
2
0
H
*
^
\
Z
(
^
\
Z
&
02
^
>
^
02
\
>
\
02
Z
>
Z
4
^
2
\
0
Z
v
*
:
(
:
&
.
*
4
4
:
4
2
2
:
2
0
0
:
06
_
*
(
&
.
*
4
4
2
2
0
0
5
6
b
*
:
(
:
&
.
*
4
(
4
:
4
2
(
2
:
2
0
(
0
:
06
q
*
:
(
:
&
.
*
4
4
:
4
2
2
:
2
0
0
:
06
T
*
l
(
l
&
.
*
4
4
l
2
2
l
0
0
l6
*
l
(
l
&
.
*
4
r
4
l
2
r
2
l
0
r
0
l6
5
m
*
(
&
4B
d
4
B
d
4
?
?
4
2B
d
2
B
d
2
?
?
2
0B
d
0
B
d
0
?
?
0
P
*
(
&
h
h
D
!
(
4
4
D
!
(
2
2
D
!
(
0
06
h
a
*
:
(
:
&
.
*
>
*
v
*
T
(
?
*
T
:
6
c
A
*
(
&
Z
\
^
^
D
4
o
\
D
2
o
Z
D
0
o
6
^
S
\
b
Z
=
V
*
(
&
Z
\
^
^
D
4
o
\
D
2
o
Z
D
0
o
6
"
^
"
t
\
"
t
Z
"
0
2
"
"
4
0
2
"
"
4
>
F
4
<
<
H
*
6
(
6
&
6
B
*
P
(
P
&
0
W
P
6
6
D
r
(
P
?
V
f
*
(
&
6
"
"
t
"
t
.
"
X0
2
"
"
4
0
2
"
"
4
>
F
4
.
H
*
.
(
.
&
B
B
.
B
.
.
^
*
(
&
.
.
|
x
*
(
&
o
6
.
r
r
r
.
o
d
*
(
&
6
Dw
.
.
#
*
(
&
6
.
2
(
.
.
(
.
.
2
(
j
h
*
(
&
6
.
.
v
*
(
&
6
.
.
.
b
*
(
&
0
2
2
\
"
"
t
"
X
6
.
(
(
(
.
.
*
(
&
6
.
.
.
T
v
*
(
&
6
.
.
V
Z
*
(
&
6
"
"
t
"
t
.
"
X0
2
"
"
4
0
2
"
"
4
>
F
4
<
<
H
P
*
6
(
6
&
6
V
H
*
(
&
6
"
"
t
"
X0
2
"
"
4
0
2
"
"
4
>
F
4
<
L
L
<
H
*
(
&
.
.
2
(
.
?
.
?
.
Y
.
Y
.
.
*
?
?
0
2
"
"
4
0
2
"
"
4
0
2
N
"
"
N4
N
>
F
N
4
L
R
=
?
H
*
(
&
4
*
p
(
p
&
Q
*
B
(
B
&
>
B
B
0
B2
(
?
D
{
>
B
0
W
B
?
D
>
B
6
B
V
Z
*
(
&
6
"
]
L
"
R
"
"
X0
2
"
"
4
0
2
"
"
4
N
>
F
N
.
N
4
H
*
=
R
L
(
=
R
L
&
R
R
L
L
<
*
p
(
p
&
6
V
Z
*
(
&
6
"
L
"
R
"
"
X0
2
"
"
4
0
2
"
"
4
N
>
F
N
.
N
4
<
<
?
H
*
R
L
(
R
L
&
R
R
L
L
*
p
(
p
&
B
B
Q
p
Q
0
B
6
6
V
Z
*
(
&
6
"
L
"
R
"
"
X0
2
"
"
4
0
2
"
"
4
0
2
J
"
"
J4
J
[
>
F
J
[
4
<
8
<
H
*
(
&
.
8
.
N
.
*
?
?
V
Z
*
(
&
6
"
]
L
"
R
"
"
X0
2
"
"
4
0
2
"
"
4
0
2
J
"
"
J4
J
>
F
J
4
H
j
*
6
8
(
6
8
&
6
8
8
1
o
*
(
&
.
<
b
j
(
j
(
0
d
:
8
x
P
(
2
(
Dw
v
T
P
b
|
8
:
8
x
6
V
J
*
(
&
6
"
"
"
X0
2
"
"
4
0
2
"
"
4
0
2
J
"
"
J4
J
>
F
J
4
h
H
j
*
6
h
8
(
6
h
8
&
6
h
h
8
8
1
*
(
&
B
p
K
.
j
0
6
B
r2
(
j
h
0
B
6
<
x
v
T
B
P
B0
8
:
8
.
.
2
(
K
#
p
j
j
K
8
p
:
8
8
6
V
J
*
(
&
6
"
"
h
"
X0
2
"
"
4
0
2
"
"
4
>
F
4
x
k
<
<
<
<
<
P
<
H
l
*
(
&
.
*
V
6
*
(
&
6
"
"
X0
2
"
"
4
0
2
"
"
4
>
F
4
<
<
'
<
<
?
<
H
*
6
(
6
&
6
'
|
#
?
v
g
q
*
M
O
(
M
O
&
6
6
b
?
b
T
'
M
T
O
6
6
2
(
?
b
6
.
6
|
6
V
*
(
&
6
"
0
2
"
"
4
0
2
"
"
4
>
F
4
<
H
P
*
(
&
0
2
"
"
4
0
2
"
"
4
>
F
4
f
<
H
)
*
(
&
4
~
Y
Y
4
D
}
~
D
}
u
+
*
(
&
>
>
0
f
:
8
f
V
f
:
8
0
:
8
D
{
>
c
*
&
f
(
&
f
&
~
S
U
>
0
f
:
8
f
f
"
:
8
f
<
~
~
J
~
H
>
:
8
J
H
>
:
8
U
(
r
?
~
?
S
(
r
?
?
&
g
S
U
e
&
u
"
e
*
&
(
&
&
&
<
0
x
:
8
9
&
6
6
&
*
&
)
(
&
)
&
n
<
.
P
J
n
n
&
m
H
>
n
:
8
<
F
&
n0
y
<
)
:
8
<
1
0
x
W
P
P
P
:
8
>
H
>
k
6
i
*
(
&
2
(
j
v
T
6
.
9
*
&
(
&
&
"
%
+
n
z
s
A
C
I
*
T
&
s
C
D
<
8L
?
J
n
n
&
m
H
>
n
:
8
zF
&
n
b
z
|
0
:
8
j
0
d
:
8
>
*
v
*
q
*
T
z
0
:
8
0
d
<
8
:
8
i
&
<
0
x
d
P
:
8
9
&
?
:
8
&
>
*
a
<
8
.
0
:
8
A
.
>
A
&
<
0
x
y
<
<
:
8
I
*
T
?
%
?
D
<
8R
?
>
*
_
I
%
0
2
x
d
<
8L
:
8
b
<
z
|
b
&
<
|
b
|
+
D
D
j
C
>
*
v
*
T
z
+
5
6
X
M
V
(
&
-
/
z
3
7
;
&
E
G
.
&
.
&
.
.
2
(
.
.
2
(
?
.
?
&
.
.
*
?
?
?
?
E
.
J
.
2
(
?
?
?
.
N
.
*
?
?
333333
?
G
.
J
.
?
?
?
?
.
N
.
*
?
?
?
?
?
7
.
J
.
?
?
2
(
?
|
333333
?
.
N
.
*
?
?
?
.
*
?
?
ffffff
?
&
7
&
E
&
G
z
.
.
2
(
?
.
*
?
?
?
3
.
.
2
(
2
(
.
.
*
?
?
?
Y
&
z
&
3
/
Y
-
Y
"
"
t
;
.
4
/
~
-
F
F
?
;
&
<
