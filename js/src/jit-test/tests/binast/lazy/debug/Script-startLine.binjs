BINJS
[
GRAMMAR
]
identity
;
>
(
IdentifierExpression
.
LiteralStringExpression
BinaryExpression
&
ExpressionStatement
CallExpression
StaticMemberExpression
(
AssignmentExpression
"
BindingIdentifier
(
AssertedDeclaredName
AssertedParameterScope
AssertedVarScope
FormalParameters4AssignmentTargetIdentifier4FunctionExpressionContents
LazyFunctionExpression0LiteralNumericExpression8StaticMemberAssignmentTarget
VariableDeclarator
>
AssertedPositionalParameterName
&
VariableDeclaration2AssertedScriptGlobalScope
DataProperty0FunctionOrMethodContents
IfStatement
.
LazyFunctionDeclaration0LiteralBooleanExpression
&
LiteralPropertyName
ObjectExpression
Script
UnaryExpression
[
STRINGS
]
identity
;
h
+
g
test
var
start
count
frame
assertEq
eval
first
manualCount
dbg
f
last
script
debugger
;
debugger
;
f28first
=
Error
(
)
.
lineNumber
;
4last
=
Error
(
)
.
lineNumber
;
undefined
-
foo
(
)
;
/
/
Comment
"
eval
(
"
42
;
"
)
;
eval
(
'
first
=
Error
(
)
.
lineNumber
\
n
\
ndebugger
;
\
n
\
nlast
=
Error
(
)
.
lineNumber
;
'
)
;
function
foo
(
)
{
}
if
(
true
)
{
B
last
=
Error
(
)
.
lineNumber
;
}
}
}
l
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
h
/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
Array
Debugger
evaluate
f1
(
)
;
Vfunction
f1
(
)
{
first
=
Error
(
)
.
lineNumber
function
f2
(
)
{
hfunction
secondCall
(
)
{
first
=
Error
(
)
.
lineNumber
;
join
lineCount
newCompartment
newGlobal
&
onDebuggerStatement
print
secondCall
startLine
string
url
}
typeof
[
TREE
]
identity
;
+
:
*
(
V
8
6T4
(
D
(
"
X
&
*
^
R
<
f
b
2
.
&
&
"
"
*
0
"
?
?
Z
>
&
"
(
h
F
&
"
B
P
(
F
J
:
H
L
4
d
>
N
0
2
6
8
.
<
\
