BINJS
[
GRAMMAR
]
identity
;
<
.
LiteralStringExpression
(
IdentifierExpression
BinaryExpression
StaticMemberExpression
CallExpression
&
ExpressionStatement
"
BindingIdentifier0LiteralNumericExpression
&
VariableDeclaration
VariableDeclarator
(
AssertedDeclaredName
(
AssignmentExpression4AssignmentTargetIdentifier0LiteralBooleanExpression
AssertedParameterScope
>
AssertedPositionalParameterName
AssertedVarScope
FormalParameters4FunctionExpressionContents
LazyFunctionExpression8StaticMemberAssignmentTarget
UpdateExpression2AssertedScriptGlobalScope
DataProperty
&
LiteralPropertyName
NewExpression
ObjectExpression
Script
UnaryExpression
[
STRINGS
]
identity
;
e
+
var
frame
hits
assertEq
dbg
e
g
parent
environment
getVariable
}
eval
&
onDebuggerStatement
var
g
;
y
}
+
+
{
let
y
=
x
;
gw
zT
g
=
function
(
)
{
print
(
z
)
;
h
(
)
}
;
g
(
)
;
elseT
g
=
function
(
)
{
eval
(
'
debugger
'
)
}
;
g
(
)
;
if
(
x
)
else
g
(
)
;
if
(
x
)
"
{
let
z
=
x
;
}
T
g
=
function
(
)
{
eval
(
'
'
)
;
debugger
;
}
;
{
let
z
=
2
;
Debugger
addDebuggee
f
(
false
)
;
f
(
true
)
;
<
for
(
var
x
of
[
true
false
]
)
{
function
f
(
x
)
{
Jfunction
h
(
)
{
eval
(
'
'
)
;
debugger
;
}
;
indexOf
names
newCompartment
newGlobal
older
{
let
y
=
1
;
-
[
TREE
]
identity
;
;
8
.
&
X
6
02V
4
D
&
F
*
(
Z
&
"
"
N
:
0
6
2
J
H
?
*
(
&
"
"
?
T
R
(
:
^
?
\
B
8
?
*
(
&
"
"
Z
(
P
L
<
4
*
.
>
?
