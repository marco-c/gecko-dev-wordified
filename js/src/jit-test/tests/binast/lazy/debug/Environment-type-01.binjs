BINJS
[
GRAMMAR
]
identity
;
:
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement
"
BindingIdentifier
StaticMemberExpression
(
AssertedDeclaredName
AssertedParameterScope
>
AssertedPositionalParameterName
AssertedVarScope
FormalParameters
&
VariableDeclaration
VariableDeclarator
(
AssignmentExpression4FunctionExpressionContents
LazyFunctionExpression8StaticMemberAssignmentTarget2AssertedScriptGlobalScope4AssignmentTargetIdentifier8CompoundAssignmentExpression
DataProperty0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression0LiteralNumericExpression
&
LiteralPropertyName
ObjectExpression
Script
[
STRINGS
]
identity
;
L
test
declarative
var
g
actual
dbg
code
expected
frame
assertEq
eval
with
L
'
use
strict
'
;
eval
(
'
var
z
=
1
;
h
(
)
;
'
)
;
V
(
function
(
s
)
{
eval
(
s
)
;
}
)
(
'
var
v
=
h
(
)
;
'
)
4
(
function
(
s
)
{
h
(
)
;
}
)
(
)
;
\
(
function
(
s
)
{
with
(
{
x
:
1
y
:
2
}
)
h
(
)
;
}
)
(
)
;
>
(
function
f
(
)
{
debugger
;
}
)
(
)
;
Debugger
debugger
;
environment
for
(
let
x
=
0
;
x
<
1
;
x
+
+
)
h
(
)
;
(
for
(
let
x
in
h
(
)
)
;
2for
(
let
x
in
{
a
:
1
}
)
h
(
)
;
getNewestFrame
h
h
(
)
2
+
2
;
h
(
)
;
newCompartment
newGlobal
&
onDebuggerStatement
returnVtry
{
throw
new
Error
;
}
catch
(
x
)
{
h
(
x
)
}
type
.
with
(
{
x
:
1
y
:
2
}
)
h
(
)
;
&
{
let
x
=
1
;
h
(
)
;
}
0
{
let
x
=
1
y
=
2
;
h
(
)
;
}
+
=
[
TREE
]
identity
;
8
:
6
*
480
.
"
2
:
(
J
&
0
(
B
6
H
D
F
*
.
"
<
X
4
>
2
&
"
