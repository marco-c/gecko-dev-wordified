BINJS
[
GRAMMAR
]
identity
;
J
(
IdentifierExpression
.
LiteralStringExpression
&
ExpressionStatement
CallExpression
"
BindingIdentifier
(
AssertedDeclaredName
StaticMemberExpression4AssignmentTargetIdentifier
&
VariableDeclaration
VariableDeclarator
>
AssertedPositionalParameterName
AssertedParameterScope
AssertedVarScope
BinaryExpression8CompoundAssignmentExpression
FormalParameters
(
AssignmentExpression0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression0LiteralNumericExpression
AssertedBlockScope2AssertedScriptGlobalScope
Block0ComputedMemberExpression
DataProperty
ForStatement4FunctionExpressionContents
IfStatement
LazyFunctionExpression
&
LiteralPropertyName
NewExpression
ObjectExpression
Script8StaticMemberAssignmentTarget
UpdateExpression
[
STRINGS
]
identity
;
T
var
test
log
c
i
g
note
s
S
S
[
S
]
code
dbg
expected
frame
+
=
Debugger
S
[
SS
]
assertEq
length
HFunction
(
'
return
2
+
2
;
'
)
(
)
;
debugger
;
S
[
S
[
S
[
S
]
]
]
Script
[
[
0
]
.
map
(
function
id
(
a
)
{
return
a
;
}
)
;
debugger
;
]
debugger
;
eval2function
f
(
)
{
}
debugger
;
function
g
(
)
{
function
h
(
)
{
function
k
(
)
{
}
return
k
;
}
return
h
;
}
debugger
;
Tfunction
q
(
)
{
}
function
qq
(
)
{
}
debugger
;
function
*
qux
(
n
)
{
for
(
var
i
=
0
;
i
<
n
;
i
+
+
)
yield
i
;
}
debugger
;
getChildScripts
newCompartment
newGlobal
&
onDebuggerStatement
scriptrvar
obj
=
{
get
x
(
)
{
return
0
;
}
set
x
(
v
)
{
}
}
;
debugger
;
+
+
<
>
instanceof
[
TREE
]
identity
;
D
.
D
B
4
>
B
(
&
"
R
(
:
P
*
0
.
6
*
N
H
L
2
2
"
F
F
<
:
8
H
&
b
"
&
6
"
4
8
:
*
<
0
(
J
>
