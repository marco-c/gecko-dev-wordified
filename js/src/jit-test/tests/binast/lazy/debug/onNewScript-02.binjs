BINJS
[
GRAMMAR
]
identity
;
+
B
(
IdentifierExpression
CallExpression
&
ExpressionStatement
.
LiteralStringExpression
StaticMemberExpression
AssertedParameterScope
AssertedVarScope
FormalParameters4FunctionExpressionContents
LazyFunctionExpression
"
BindingIdentifier
(
AssertedDeclaredName
(
AssignmentExpression0LiteralBooleanExpression
&
VariableDeclaration
VariableDeclarator4AssignmentTargetIdentifier
BinaryExpression0LiteralNumericExpression
>
AssertedPositionalParameterName8StaticMemberAssignmentTarget
UnaryExpression2AssertedScriptGlobalScope
DataProperty0FunctionOrMethodContents
.
LazyFunctionDeclaration
&
LiteralPropertyName
NewExpression
ObjectExpression
ReturnStatement
Script
UpdateExpression
[
STRINGS
]
identity
;
^
g
test
eval
var
hits
s
dbg
seen
assertEq
f
Debugger
+
N
obj
=
function
(
)
{
return
obj
;
}
;
>
(
function
(
x
)
{
return
x
+
1
;
}
)
E
Function
Script
WeakMapJ
[
3
]
.
map
(
function
(
i
)
{
return
-
i
;
}
)
;
a
b
clone
e
evaluate8for
(
var
i
=
0
;
i
<
7
;
i
+
+
)
function
A
(
m
n
)
{
return
m
=
=
=
0
?
n
+
1
:
n
=
=
=
0
?
A
(
m
-
1
1
)
:
A
(
m
-
1
A
(
m
n
-
1
)
)
;
}
Pfunction
E
(
s
)
{
'
use
strict
'
;
eval
(
s
)
;
}
Pfunction
e
(
i
)
{
return
i
=
=
=
0
|
|
o
(
i
-
1
)
;
}
4function
e
(
s
)
{
eval
(
s
)
;
}
8function
f
(
x
)
{
return
-
x
;
}
Zfunction
g
(
a
b
)
{
return
b
=
=
=
0
?
a
:
g
(
b
a
%
b
)
;
}
8function
g
(
x
)
{
return
-
x
;
}
Pfunction
o
(
i
)
{
return
i
!
=
=
0
&
&
e
(
i
-
1
)
;
}
function
plus
(
x
)
{
return
function
plusx
(
y
)
{
return
x
+
y
;
}
;
}
dfunction
*
sg
(
n
)
{
for
(
var
i
=
0
;
i
<
n
;
i
+
+
)
yield
i
;
}
has
newCompartment
newGlobal
onNewScript
return
b
-
a
;
set
*
uncaughtExceptionHooktvar
obj
=
{
get
x
(
)
{
return
1
;
}
set
x
(
v
)
{
print
(
v
)
;
}
}
;
!
+
+
-
instanceof
[
TREE
]
identity
;
>
.
*
J
:
06H
8
"
*
L
(
\
V
F
P
X
"
*
R
:
"
Z
&
8
4
j2
(
"
&
&
?
.
2
.
<
6
6
.
B
.
.
T
6
<
&
(
N
6
*
.
.
D
6
0
8
.
:
4
.
>
