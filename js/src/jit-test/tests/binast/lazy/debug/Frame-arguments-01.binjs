BINJS
[
GRAMMAR
]
identity
;
(
IdentifierExpression
&
ExpressionStatement
CallExpression
StaticMemberExpression
.
LiteralStringExpression
"
BindingIdentifier
(
AssertedDeclaredName
&
VariableDeclaration
VariableDeclarator0LiteralNumericExpression
(
AssignmentExpression4AssignmentTargetIdentifier
BinaryExpression0LiteralBooleanExpression0ComputedMemberExpression8StaticMemberAssignmentTarget
UpdateExpression
AssertedParameterScope
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
AssertedVarScope
DataProperty
ForStatement
FormalParameters4FunctionExpressionContents
LazyFunctionExpression
*
LiteralNullExpression
&
LiteralPropertyName
NewExpression
ObjectExpression
Script
[
STRINGS
]
identity
;
D
g
eval
var
args
assertEq
hits
i
frame
dbg
length
Array
args
=
[
]
;
f
(
)
;
arguments
this
.
f
(
)
;
v
+
+
+
Debugger
>
args
=
[
'
a
'
'
b
'
]
;
f
(
'
a
'
'
b
'
)
;
zargs
=
[
'
hello
'
world
3
.
14
true
false
null
undefined
]
;
\
args
=
[
-
0
NaN
-
1
/
0
]
;
this
.
f
(
-
0
NaN
-
1
/
0
)
;
lf
(
'
hello
'
world
3
.
14
true
false
null
undefined
)
;
2f
.
apply
(
undefined
args
)
;
.
f
.
bind
(
null
'
a
'
)
(
'
b
'
)
;
4function
f
(
)
{
debugger
;
}
<
function
f
(
a
b
)
{
debugger
;
}
isArray
newCompartment
newGlobal
&
onDebuggerStatement
"
this
.
f
(
'
a
'
'
b
'
)
;
:
var
world
=
Symbol
(
'
world
'
)
;
<
instanceof
[
TREE
]
identity
;
)
>
(
8
<
86
6
:
"
:
4
!
2
&
0
*
"
B
4
.
"
0
>
&
*
(
2
<
.
