BINJS
[
GRAMMAR
]
identity
;
J
(
IdentifierExpression
.
LiteralStringExpression
BinaryExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
"
BindingIdentifier
(
AssertedDeclaredName
&
VariableDeclaration
VariableDeclarator
0LiteralNumericExpression8StaticMemberAssignmentTarget
(
AssignmentExpression
AssertedParameterScope
AssertedVarScope
FormalParameters
>
AssertedPositionalParameterName4AssignmentTargetIdentifier8CompoundAssignmentExpression0ComputedMemberExpression
DataProperty4FunctionExpressionContents
LazyFunctionExpression
&
LiteralPropertyName
ObjectExpression
AssertedBlockScope2AssertedScriptGlobalScope
Block
ForStatement0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression
*
LiteralNullExpression
.
LiteralRegExpExpression
Script
UpdateExpression
[
STRINGS
]
identity
;
x
+
var
g
s
i
test
offs
lineno
log
where
count
dbg
frame
}
4
if
(
+
+
i
=
=
=
2
)
break
;
assertEq
eval
f
length
line0
+
=
break
;
i
>
>
=
2
;
if
(
x
<
0
)
log
+
=
'
!
'
;
log
+
=
'
?
'
;
*
var
x
=
i
-
10
;
;
"
case
0
:
break
;
(
case
1
:
return
8
;
(
case
2
:
return
7
;
default
:
return
-
i
;
A
A
?
B
!
B
Debugger
\
n
debugger
;
do
{
for
(
;
;
)
{
function
f
(
i
)
{
getLineOffsets
"
getOffsetLocation
hit
i
=
128
;
8line0
=
Error
(
)
.
lineNumber
;
lineNumber
newCompartment
newGlobal
&
onDebuggerStatement
return
script
setBreakpoint
split
switch
(
i
)
{
while
(
true
)
}
while
(
true
)
;
+
+
-
<
[
TREE
]
identity
;
F6
2
*
0
^
(
B
F
b
.
"
"
df
(
R
:
v
&
H
r
84
T
(
\
h
(
2
*
0V
.
.
&
*
D
&
*
>
'
<
"
t
j
DH
&
?
?
"
Z
J
P
4
2
B
X
N
6
0
.
n
L
p
l
<
:
8
>
