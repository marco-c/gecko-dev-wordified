BINJS
[
GRAMMAR
]
identity
;
!
D
(
IdentifierExpression
CallExpression
.
LiteralStringExpression
StaticMemberExpression
BinaryExpression
&
ExpressionStatement
"
BindingIdentifier
(
AssertedDeclaredName
&
VariableDeclaration
VariableDeclarator
(
AssignmentExpression0LiteralNumericExpression0LiteralBooleanExpression4AssignmentTargetIdentifier
AssertedParameterScope
AssertedVarScope
FormalParameters4FunctionExpressionContents
LazyFunctionExpression8StaticMemberAssignmentTarget
AssertedBlockScope
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
Block0ComputedMemberExpression
DataProperty
IfStatement
&
LiteralPropertyName
NewExpression
ObjectExpression
Script
ThisExpression
UnaryExpression
[
STRINGS
]
identity
;
+
offsets
var
g
Object
keys
script
assertEq
doSingleStep
eval
frame
length
print
dbg
line
unevalD
x
-
=
c
;
Ddebugger
;
final
lines
:
"
getOffsetLocationDif
(
x
<
10
)
lineNumber
offsetDvar
a
=
1
b
=
2
c
=
3
;
Dvar
x
=
a
;
Dx
+
=
b
;
L
x
-
=
c
;
L
debugger
;
L
if
(
x
<
10
)
L
return
x
;
L
var
x
=
a
;
L
x
+
=
b
;
Debugger
debugger
line
:
evaluateLfunction
t
(
a
b
c
)
{
getAllOffsets
newCompartment
newGlobal
&
onDebuggerStatement
onStep
onStepHandler
original
lines
:
t
(
0
0
0
)
t
(
1
2
3
)
t
(
10
20
30
)
L
}
delete
[
TREE
]
identity
;
!
>
.
(
L
<
48J
:
(
N
&
1
"
H
B
&
*
T
6
0
*
(
P
&
R
V
"
&
*
B
^
2
F
6
<
>
8
4
:
\
X
?
Z
V
"
.
0
2
(
?
D
"
.
0
2
(
?
