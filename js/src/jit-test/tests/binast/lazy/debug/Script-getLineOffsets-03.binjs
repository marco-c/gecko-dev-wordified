BINJS
[
GRAMMAR
]
identity
;
H
(
IdentifierExpression
&
ExpressionStatement
CallExpression
.
LiteralStringExpression
"
BindingIdentifier
(
AssertedDeclaredName
StaticMemberExpression
&
VariableDeclaration
VariableDeclarator
(
AssignmentExpression4AssignmentTargetIdentifier
BinaryExpression0LiteralNumericExpression8StaticMemberAssignmentTarget
AssertedParameterScope
AssertedVarScope
FormalParameters
>
AssertedPositionalParameterName8CompoundAssignmentExpression0ComputedMemberExpression
DataProperty4FunctionExpressionContents
LazyFunctionExpression
&
LiteralPropertyName
ObjectExpression
AssertedBlockScope2AssertedScriptGlobalScope
Block
ForStatement0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression
*
LiteralNullExpression
Script
UpdateExpression
[
STRINGS
]
identity
;
e
V
var
test
g
s
i
log
offs
lineno
dbg
frame
+
assertEq
line0
+
=
A
AB
B
Debugger
debugger
;
do
-
-
i
;
while
(
i
>
0
)
;
eval8for
(
i
=
0
;
i
<
5
;
i
+
+
)
j
+
+
;
:
for
(
var
x
in
[
0
1
2
]
)
j
+
+
;
getLineOffsets
"
getOffsetLocation
hit6if
(
i
=
=
=
0
)
i
+
+
;
else
i
-
-
;
j
length8line0
=
Error
(
)
.
lineNumber
;
lineNumber
newCompartment
newGlobal
&
onDebuggerStatement
script
setBreakpoint
switch
(
i
)
{
case
'
A
'
:
j
=
0
;
case
'
B
'
:
j
=
1
;
case
'
C
'
:
j
=
2
;
default
:
j
=
i
;
}
switch
(
i
)
{
case
0
:
j
=
0
;
case
1
:
j
=
1
;
case
2
:
j
=
2
;
default
:
j
=
i
;
}
while
(
i
<
5
)
i
+
+
;
{
i
+
+
;
i
-
-
;
i
+
+
;
i
-
-
;
}
+
+
<
[
TREE
]
identity
;
7
D6
B
2
*
0
B
D
.
w
"
F
0
:
T
:
F
R
84
2
(
>
H
(
2
*
04
.
*
"
&
"
&
>
f
<
"
*
<
&
8
P
6
N
(
.
L
J
