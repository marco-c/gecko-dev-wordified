BINJS
[
GRAMMAR
]
identity
;
>
(
IdentifierExpression
CallExpression
&
ExpressionStatement
"
BindingIdentifier
.
LiteralStringExpression
StaticMemberExpression
(
AssertedDeclaredName0LiteralNumericExpression
&
VariableDeclaration
VariableDeclarator
AssertedParameterScope
AssertedVarScope
FormalParameters
>
AssertedPositionalParameterName4FunctionExpressionContents
LazyFunctionExpression2AssertedScriptGlobalScope
(
AssignmentExpression4AssignmentTargetIdentifier
BinaryExpression
DataProperty0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression
&
LiteralPropertyName
NewExpression
ObjectExpression
Script8StaticMemberAssignmentTarget
UpdateExpression
[
STRINGS
]
identity
;
:
var
g
test
hits
assertEq
code
dbg
env
frame
eval
y
<
'
use
strict
'
;
eval
(
'
d
(
)
;
y
;
'
)
;
Debugger
Error
assertThrowsInstanceOf
asserts
.
js
environment
function
f
(
)
{
var
x
=
1
;
d
(
)
;
return
y
;
}
f
(
)
;
zfunction
h
(
x
)
{
if
(
x
)
{
let
x
=
1
;
d
(
)
;
return
y
;
}
}
h
(
3
)
;
libdir
load
newCompartment
newGlobal
older
&
onDebuggerStatement
setVariableJvar
y
=
0
;
function
d
(
)
{
debugger
;
}
+
+
+
[
TREE
]
identity
;
I
8
"
(
(
6
&
.
6
*
2
*
0
4
:
0
.
2
<
8
&
4
?
"
