BINJS
[
GRAMMAR
]
identity
;
4
(
IdentifierExpression
StaticMemberExpression
CallExpression
.
LiteralStringExpression
&
ExpressionStatement
BinaryExpression
"
BindingIdentifier
(
AssertedDeclaredName0LiteralBooleanExpression
&
VariableDeclaration
VariableDeclarator
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
(
AssignmentExpression
DataProperty
&
LiteralPropertyName
NewExpression
ObjectExpression
Script8StaticMemberAssignmentTarget
[
STRINGS
]
identity
;
r
g
+
code
var
Object
test
xw
x
assertEq
check
dbg
eval
gw
isExtensible
isFrozen
isSealed
y
)
;
freeze
"
preventExtensions
seal
assertEq
(
xd
.
configurable
yd
.
configurable
code
+
'
.
'
+
name
+
'
.
configurable
'
)
;
assertEq
(
xd
.
enumerable
yd
.
enumerable
code
+
'
.
'
+
name
+
'
.
enumerable
'
)
;
assertEq
(
xd
.
writable
yd
.
writable
code
+
'
.
'
+
name
+
'
.
writable
'
)
;
P
assertEq
(
xnames
[
i
]
ynames
[
i
]
)
;
<
var
name
=
xnames
[
i
]
;
v
var
xd
=
Object
.
getOwnPropertyDescriptor
(
x
name
)
;
v
var
yd
=
Object
.
getOwnPropertyDescriptor
(
y
name
)
;
|
assertEq
(
Object
.
isExtensible
(
x
)
Object
.
isExtensible
(
y
)
)
;
X
assertEq
(
xnames
.
length
ynames
.
length
)
;
\
for
(
var
i
=
0
;
i
<
xnames
.
length
;
i
+
+
)
{
n
var
xnames
=
Object
.
getOwnPropertyNames
(
x
)
.
sort
(
)
;
n
var
ynames
=
Object
.
getOwnPropertyNames
(
y
)
.
sort
(
)
;
}
freeze
isExtensible
isFrozen
isSealed
preventExtensions
seal
DebuggerpObject
.
create
(
null
{
x
:
{
value
:
3
}
y
:
{
get
:
Math
.
min
}
}
)
[
]
[
0
1
2
]
[
]
addDebuggee
compareObjects8function
compareObjects
(
)
{
0getOwnPropertyDescriptor
newCompartment
newGlobal
value
x
=
(
y
=
(
{
a
:
[
1
]
get
b
(
)
{
return
-
1
;
}
}
{
}
}
[
TREE
]
identity
;
-
0
d
.
(
*
b
P
Z
^
8
>
:
<
0
2
4
6
*
.
B
p
"
&
2
h
"
j
"
f
\
F
J
H
&
L
&
(
N
(
D
n
l
R
X
T
V
