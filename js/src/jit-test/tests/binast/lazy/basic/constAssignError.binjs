BINJS
[
GRAMMAR
]
identity
;
(
IdentifierExpression
CallExpression
&
ExpressionStatement
.
LiteralStringExpression
AssertedParameterScope
AssertedVarScope
"
BindingIdentifier
FormalParameters
(
AssertedDeclaredName
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
BinaryExpression4FunctionExpressionContents0FunctionOrMethodContents
.
LazyFunctionDeclaration
LazyFunctionExpression
Script
[
STRINGS
]
identity
;
assertTypeError
str
(
function
(
)
{
const
x
=
3
;
x
=
1
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
r
(
function
(
)
{
const
x
=
2
;
(
(
)
=
>
x
+
+
)
(
)
;
return
+
+
x
}
)
(
)
x
(
function
(
)
{
const
x
=
2
;
(
(
)
=
>
x
+
+
)
(
)
;
return
x
+
=
1
}
)
(
)
n
(
function
(
)
{
const
x
=
3
;
(
(
)
=
>
x
+
+
)
(
)
;
return
x
}
)
(
)
r
(
function
(
)
{
const
x
=
3
;
(
(
)
=
>
x
+
+
)
(
)
;
return
x
+
+
}
)
(
)
(
function
(
)
{
const
x
=
3
;
+
+
x
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
(
function
(
)
{
const
x
=
3
;
-
-
x
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
T
(
function
(
)
{
const
x
=
3
;
[
x
]
=
[
1
]
;
}
)
(
)
(
function
(
)
{
const
x
=
3
;
x
+
=
1
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
(
function
(
)
{
const
x
=
3
;
x
-
=
1
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
(
function
(
)
{
const
x
=
3
;
x
+
+
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
(
function
(
)
{
const
x
=
3
;
x
-
-
;
return
(
function
(
)
{
return
x
}
)
(
)
}
)
(
)
TypeError
assertThrowsInstanceOf
asserts
.
js
eval
libdir
load
+
var
[
TREE
]
identity
;
]
"
*
&
(
l
*
"
