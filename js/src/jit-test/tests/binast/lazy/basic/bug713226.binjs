BINJS
[
GRAMMAR
]
identity
;
"
(
IdentifierExpression
CallExpression
(
AssertedDeclaredName
"
BindingIdentifier
&
VariableDeclaration
VariableDeclarator
&
ExpressionStatement0LiteralNumericExpression
.
LiteralStringExpression
StaticMemberExpression2AssertedScriptGlobalScope4AssignmentTargetIdentifier
BinaryExpression0ComputedMemberExpression
ForStatement
Script
UpdateExpression
[
STRINGS
]
identity
;
g
var
i
optionNames
optionName
evaluate
function
addDebug
(
g
id
)
{
var
debuggerGlobal
=
newGlobal
(
{
newCompartment
:
true
}
)
;
debuggerGlobal
.
debuggee
=
g
;
debuggerGlobal
.
id
=
id
;
debuggerGlobal
.
print
=
function
(
s
)
{
print
(
s
)
;
}
;
debuggerGlobal
.
eval
(
'
var
dbg
=
new
Debugger
(
debuggee
)
;
dbg
.
onDebuggerStatement
=
function
(
)
{
print
(
id
)
;
debugger
;
}
;
'
)
;
return
debuggerGlobal
;
}
var
base
=
newGlobal
(
{
newCompartment
:
true
}
)
;
var
top
=
base
;
for
(
var
i
=
0
;
i
<
8
;
i
+
+
)
top
=
addDebug
(
top
i
)
;
base
.
eval
(
'
debugger
;
'
)
;
gczeal
length
options
split
+
+
<
[
TREE
]
identity
;
