BINJS
[
GRAMMAR
]
identity
;
L
CallExpression
.
LiteralStringExpression
(
IdentifierExpression
StaticMemberExpression
&
ExpressionStatement0LiteralBooleanExpression0LiteralNumericExpression
UnaryExpression
AssertedParameterScope
AssertedVarScope
FormalParameters4FunctionExpressionContents
LazyFunctionExpression
*
LiteralNullExpression
ArrayExpression
DataProperty
&
LiteralPropertyName
ObjectExpression
ReturnStatement
.
LiteralRegExpExpression
"
BindingIdentifier
(
AssertedDeclaredName
AssertedBlockScope
>
AssertedPositionalParameterName
Block
ThrowStatement
&
VariableDeclaration
VariableDeclarator
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
BinaryExpression
CatchClause0FunctionOrMethodContents
.
LazyFunctionDeclaration
Script
"
TryCatchStatement
[
STRINGS
]
identity
;
{
p
endsWith
assertEq
abc
String
prototype
-
b
Infinity
assertThrows
undefined
+
TypeError
apply
call
ab
abcd
bc
bcd
bcde
c
string
NaN
a
x
toString
2
var
(
bar
)
?
.
RangeError
[
a
-
z
]
+
(
bar
)
?
global
e
errorType
fun
null
4
[
a
-
z
]
+
/
(
bar
)
?
/
liz
t
r
n
FExpected
error
but
none
was
thrownDI
t
rn
ti
n
liz
ti
n
.
Wrong
error
type
thrown
[
a
-
z
]
+
eval
length
newGlobal
(
propertyIsEnumerable
re
this
.
re
=
/
(
bar
)
?
/
instanceof
[
TREE
]
identity
;
PH
>
8
B8
8
F
*
D
0
H
0
F
*
H
*
F
J2
.
H
ZB
<
:
D
*
D2
.
n
D
F
^
d
?
h
J
J
J
*
0
&
"
(
.
.
*
.
.
0
.
.
.
.
&
.
"
.
(
.
*
0
&
"
(
*
0
&
"
(
*
0
&
"
(
*
0
&
"
(
?
?
*
?
?
0
?
?
?
?
&
?
"
?
(
?
*
0
&
"
(
*
0
&
"
(
?
?
*
?
?
?
?
?
&
?
"
?
(
?
*
&
"
(
*
0
&
"
(
*
&
"
(
2
2
*
2
2
0
2
2
2
2
&
2
"
2
(
2
:
0
(
:
0
(
:
0
N
(
:
68
8
*
B
f
Bb
l
2
N
Bj
68
8
*
\
R
R
P
P
0
T
T
7
V
V
5
X
X
7
6
:
L
4
8
J
E
6
E
L
E
E
6
?
E
6
"
4
"
&
"
4
"
&
?
"
4
"
&
v
"
4
&
4
>
(
<
>
r
"
4
"
&
(
<
6
>
P
4
<
N
E
6
E
L
E
E
6
?
E
6
"
4
"
&
"
4
"
&
?
"
4
"
&
z
"
4
&
4
>
(
<
>
v
"
4
"
&
(
<
