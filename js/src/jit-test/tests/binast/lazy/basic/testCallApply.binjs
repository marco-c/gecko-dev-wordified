BINJS
[
GRAMMAR
]
identity
;
Z
(
IdentifierExpression
CallExpression
&
ExpressionStatement0LiteralNumericExpression
"
BindingIdentifier
.
LiteralStringExpression
StaticMemberExpression
(
AssertedDeclaredName
ArrayExpression
AssertedParameterScope
AssertedVarScope
FormalParameters
&
VariableDeclaration
VariableDeclarator0ComputedMemberExpression
*
LiteralNullExpression0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression
>
AssertedPositionalParameterName
AssertedBlockScope
Block4FunctionExpressionContents4AssignmentTargetIdentifier
ReturnStatement
(
AssignmentExpression
DataProperty
&
LiteralPropertyName
ObjectExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
CatchClause
LazyFunctionExpression
"
TryCatchStatement
BinaryExpression
.
EagerFunctionExpression
ForStatement
.
LiteralRegExpExpression
ThrowStatement
UpdateExpression2AssertedScriptGlobalScope
EmptyStatement
NewExpression
Script
[
STRINGS
]
identity
;
r
var
script2
apply
f
native1
arr
script1
assertEq
j
closed1
closed2
threw
a
call
x
genFreshFunction
native2
y
g
e
script3
applyIt
applyIt1
applyIt2
arg0
callIt
arguments
o
tryAndFail
genClosure
closed3
i
s
test0
tricky1
z
test1
test2
test3
String
aabc
abc
b
length
prototype
+
+
+
<
Function
eval
match
not
js_fun_apply
not
js_fun_call
return
search
x
=
4
[
TREE
]
identity
;
W0XR
<
:
(
B
H
J
L
D
(
"
2
4X
"
(
2
(
X
"
(
6
6
42
6
:
"
d
p2B
6
.
(
"
"
2F
\
"
T
:
:
<
:
PZn
PZf
D
:
68
B
:
.
(
(
"
"
2
"
68
B
:
.
(
(
"
"
2
"
B
H
J
L
B
"
?
?
?
RLVN
T
D
"
"
?
?
?
R
LVN
T
D
?
?
B
H
"
i
"
(
0
>
J
>
F
>
P
^
0
>
*
J
F
XP
^
0
*
(
0
0
H
.
4
?
?
0
?
0
H
.
4
?
?
?
0
?
0
H
.
4
?
?
"
?
"
0
?
"
0
H
.
4
?
"
(
(
(
(
(
(
(
(
<
<
J
-
"
8
&
D
*
?
>
<
&
&
*
40
&
&
&
D
*
?
>
<
&
&
*
40
&
&
&
D
*
?
>
<
&
&
*
40
&
&
8
C
"
(
6
6
&
D
*
6
?
>
<
&
&
*
40
&
&
40
&
D
*
6
?
>
<
&
&
*
40
&
&
8
?
8
:
8
:
68
:
68
:
8
:
68
B
"
.
N
j68
B
"
.
N
h
L
"
*
.
2
B
"
(
2V
b
F
\
l
2
t
"
(
?
?
2
2
2
2
2
2
"
2
F
*
"
(
?
?
*
*
*
*
*
*
"
*
F
"
(
H
"
4
?
?
"
F
.
x
"
(
?
?
.
.
.
.
.
.
"
.
F
