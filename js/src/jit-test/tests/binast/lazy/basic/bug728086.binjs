BINJS
[
GRAMMAR
]
identity
;
m
J
(
IdentifierExpression
"
BindingIdentifier
(
AssertedDeclaredName
CallExpression
>
AssertedPositionalParameterName
.
LiteralStringExpression
AssertedBlockScope
Block
&
ExpressionStatement
StaticMemberExpression
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
&
VariableDeclaration
VariableDeclarator
BinaryExpression
IfStatement
UnaryExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
CatchClause
.
LiteralRegExpExpression
NewExpression
"
TryCatchStatement2AssertedScriptGlobalScope
(
AssignmentExpression4AssignmentTargetIdentifier
BreakStatement0LiteralBooleanExpression0LiteralNumericExpression
ReturnStatement
Script
SwitchStatement
WhileStatement
[
STRINGS
]
identity
;
k
v
var
lfcode
expected
file
push
actual
description
lfVarx
value
TestCase
escapeString
funcName
loadFile
output
reportCompare
reportFailure
+
=
=
a
actual_t
d
e
enterFunc
ex
expected_t
g
lfVare
msg
n
replace
str
testcase
toPrinted
typeof
:
.
js
:
compile
actual
Array
NL
[
^
\
x20
-
\
x7E
]
+
\
\
\
n
actualCompile
callStack
eval
evaluate
expectCompile
:
gczeal
(
2
)
;
enterFunc
(
'
test
'
)
;
lfRunTypeId
noexist
.
js
shift
substr
summary
undefined
"
unknown
-
test
-
name
var
BUGNUMBER
=
305064
;
var
summary
=
'
Tests
the
trim
trimRight
and
trimLeft
methods
'
;
var
trimMethods
=
[
'
trim
'
'
trimLeft
'
'
trimRight
'
]
;
var
whitespace
=
[
{
s
:
'
\
u0009
'
t
:
'
HORIZONTAL
TAB
'
}
{
s
:
'
\
u200A
'
t
:
'
HAIR
SPACE
'
}
]
;
for
(
var
j
=
0
;
j
<
trimMethods
.
length
;
+
+
j
)
var
method
=
trimMethods
[
j
]
;
reportCompare
(
true
true
'
Test
skipped
.
String
.
prototype
.
'
+
method
+
'
is
not
supported
'
)
;
str
=
'
'
;
for
(
var
i
=
0
;
i
<
whitespace
.
length
;
+
+
i
)
{
var
v
=
whitespace
[
i
]
.
s
;
var
t
=
(
summary
)
[
i
]
.
t
;
v
=
v
+
v
+
v
;
print
(
'
Test
'
+
method
+
'
with
with
leading
whitespace
.
:
'
+
t
)
;
actual
=
str
[
method
]
(
)
;
reportCompare
(
expected
actual
t
+
'
:
'
+
'
"
'
+
toPrinted
(
str
)
+
'
"
.
'
+
method
+
'
(
)
'
)
;
str
=
v
+
'
a
'
+
v
;
}
{
}
-
[
TREE
]
identity
;
D6
.
B
"
J
:
*
&
:
*
&
&
8
8
B
V
8
:
<
0T4
P
<
0R4
&
>
>
(
2
"
2
(
D
"
(
(
D
"
"
2
n
H
.
8
B
X
4
^
V
j
L
.
*
0
0
"
2
N
r
d
pH
>
"
f
&
"
l
<
F
&
"
\
4
&
"
h
(
t
J
F
b
Z
.
*
6
6
