BINJS
[
GRAMMAR
]
identity
;
%
R
(
IdentifierExpression
"
BindingIdentifier
(
AssertedDeclaredName
CallExpression
&
VariableDeclaration
VariableDeclarator
&
ExpressionStatement4AssignmentTargetIdentifier
.
LiteralStringExpression
StaticMemberExpression
AssertedBlockScope
AssertedParameterScope
>
AssertedPositionalParameterName
AssertedVarScope
(
AssignmentExpression
Block
FormalParameters
ArrayExpression
BinaryExpression
DataProperty4FunctionExpressionContents0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralNumericExpression
&
LiteralPropertyName
.
LiteralRegExpExpression
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
CatchClause0ComputedMemberExpression
.
EagerFunctionExpression
ForStatement
IfStatement
LazyFunctionExpression
NewExpression
ObjectExpression
Script
"
TryCatchStatement
UpdateExpression
[
STRINGS
]
identity
;
:
var
f
a
i
text
code
r
c
e
f1
f2
g1
o
replace
t
test
(
function
sum_slicing
(
array
)
{
return
array
=
=
0
?
0
:
a
+
sum_slicing
(
array
.
slice
(
1
)
)
}
)
Function
evalxfor
(
let
a
=
0
;
a
<
6
;
a
+
+
)
{
print
(
[
"
"
]
.
some
(
function
(
)
{
false
>
"
"
}
)
)
}
g
length
s
v
+
+
<
=
=
[
TREE
]
identity
;
L
:
.
"
40
H
&
2
.
"
N
<
8
6
J
(
2
"
(
2
F
R
*
"
&
8
0
*
"
B
0
&
6
.
P
4
>
(
4
D
*
