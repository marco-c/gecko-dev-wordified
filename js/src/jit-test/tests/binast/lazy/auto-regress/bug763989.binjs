BINJS
[
GRAMMAR
]
identity
;
g
H
(
IdentifierExpression
"
BindingIdentifier
CallExpression
.
LiteralStringExpression
&
ExpressionStatement
BinaryExpression
(
AssertedDeclaredName
StaticMemberExpression
AssertedBlockScope
Block
>
AssertedPositionalParameterName
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
&
VariableDeclaration
VariableDeclarator
IfStatement4AssignmentTargetIdentifier
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
(
AssignmentExpression
BreakStatement
CatchClause8CompoundAssignmentExpression0LiteralBooleanExpression0LiteralNumericExpression
.
LiteralRegExpExpression
NewExpression
Script
"
TryCatchStatement
UnaryExpression
WhileStatement
[
STRINGS
]
identity
;
X
var
lfcode
+
file
push
lfVarx
output
toPrinted
value
actual
description
expected
loadFile
reportFailure
evaluate
lfVare
msg
reportCompare
summary
=
=
expect
=
actual
=
'
No
Exception
'
;
reportCompare
(
expect
actual
summary
)
;
:
'
"
'
Actual
value
'
.
js
Array
Expected
value
'
NL
\
nhevaluate
(
"
reportCompare
(
expect
actual
summary
)
;
"
)
;
function
reportFailure
(
section
msg
)
msg
=
inSection
(
section
)
+
"
"
+
msg
;
g
gcPreserveCode
gczeal
(
2
(
9
)
)
;
replace
shift
substr
try
{
for
(
var
i
in
expect
)
reportCompare
(
expect
[
i
]
actual
[
i
]
getStatus
(
i
)
)
;
}
catch
(
exc1
)
{
}
function
getStatus
(
i
)
{
}
undefined
!
=
+
=
-
[
TREE
]
identity
;
3
.
&
"
&
&
"
"
D
0
(
H
<
<
B
:
"
6T
(
8
2
0
.
"
>
6
N
F
>
D
F8
"
J
&
(
P
2
*
&
(
B
&
R
L
DV
:
4
4
*
