BINJS
[
GRAMMAR
]
identity
;
<
(
IdentifierExpression
&
ExpressionStatement
CallExpression
"
BindingIdentifier
.
LiteralStringExpression
AssertedParameterScope
AssertedVarScope
FormalParameters
(
AssertedDeclaredName
>
AssertedPositionalParameterName
(
AssignmentExpression4AssignmentTargetIdentifier0FunctionOrMethodContents
.
LazyFunctionDeclaration
AssertedBlockScope
Block
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
CatchClause4FunctionExpressionContents
LazyFunctionExpression0LiteralBooleanExpression
NewExpression
ReturnStatement
Script
SwitchDefault4SwitchStatementWithDefault
"
TryCatchStatement
[
STRINGS
]
identity
;
g
code
f
m
var
b
e
h
k
x
a
=
'
'
;
Object
.
defineProperty
(
this
"
b
"
{
get
:
function
(
)
{
a
=
this
.
d
(
)
}
}
)
;
Object
.
defineProperty
(
this
"
c
"
{
get
:
function
(
)
{
b
}
}
)
;
d
=
2
;
b
Function4a
=
eval
(
"
function
f
(
)
{
}
"
)
;
b
evalcx
for
(
v
of
c
)
;
k
=
h
(
)
newGlobal
[
TREE
]
identity
;
4
&
8
.
6
"
2
n
*
:
(
"
L
0
