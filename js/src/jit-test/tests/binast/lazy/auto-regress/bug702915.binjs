BINJS
[
GRAMMAR
]
identity
;
R
(
IdentifierExpression
"
BindingIdentifier
&
ExpressionStatement
CallExpression
.
LiteralStringExpression
(
AssertedDeclaredName
(
AssignmentExpression
StaticMemberExpression
ThisExpression
>
AssertedPositionalParameterName8StaticMemberAssignmentTarget
AssertedBlockScope
Block
&
VariableDeclaration
VariableDeclarator
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
NewExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
BinaryExpression
CatchClause
"
TryCatchStatement2AssertedScriptGlobalScope4AssignmentTargetIdentifier
BreakStatement
<
ComputedMemberAssignmentTarget
*
ConditionalExpression
EmptyStatement
IfStatement0LiteralBooleanExpression0LiteralNumericExpression
Script
ThrowStatement
UnaryExpression
UpdateExpression
WhileStatement
[
STRINGS
]
identity
;
G
*
b
var
lfcode
push
a
e
file
gTestcases
Array
actual
d
exc1
gTc
"
getTestCaseResult
n
TestCase
callStack
enterFunc
ex
expected
funcName
string
undefined
writeHeaderToLog
=
=
enterFunc
(
'
test
'
)
;
Array
.
prototype
[
1
]
=
'
bar
'
;
var
a
=
[
]
;
exitFunc
(
'
test
'
)
;
var
code
=
'
'
;
code
+
=
createCode
(
(
gczeal
(
2
)
)
)
;
function
createCode
(
i
)
{
jstop
+
=
+
delete
+
i
+
"
string
.
'
;
"
;
}
var
VERSION
=
'
ECMA_1
'
;
var
TITLE
=
'
Value
Properties
of
the
Math
Object
'
;
writeHeaderToLog
(
SECTION
+
'
'
+
TITLE
)
;
new
TestCase
(
'
15
.
8
.
1
.
1
'
'
Math
.
E
'
this
.
TITLE
)
;
'
typeof
Math
.
E
'
new
TestCase
(
'
15
.
8
.
1
.
2
'
'
Math
.
LN10
'
'
typeof
Math
.
LN10
'
typeof
Math
.
LN10
)
;
new
TestCase
(
'
15
.
8
.
1
.
3
'
'
Math
.
LN2
'
Math
.
LN2
)
;
new
TestCase
(
'
15
.
8
.
1
.
3
'
Math
.
LOG2E
)
;
new
TestCase
(
'
15
.
8
.
1
.
4
'
Math
.
SQRT1_2
)
;
new
TestCase
(
'
15
.
8
.
1
.
7
'
typeof
Math
.
SQRT2
)
;
new
TestCase
(
SECTION
eval
(
'
var
MATHPROPS
=
"
"
;
for
(
p
in
Math
)
{
MATHPROPS
+
=
p
;
}
;
MATHPROPS
'
)
)
;
browser
bugnumber
description
eval
expect
foo
gczeal
jsTestDriverEnd
(
)
;
length
name
passed
print
reason
shell
shift
typeq
var
SECTION
=
'
9
.
9
-
1
'
;
new
TestCase
(
SECTION
'
(
Object
(
true
)
)
.
__proto__
'
Boolean
.
prototype
(
Object
(
true
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
1
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
1
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
-
1
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
-
1
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
Number
.
MAX_VALUE
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
Number
.
MAX_VALUE
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
Number
.
MIN_VALUE
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
Number
.
MIN_VALUE
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
Number
.
POSITIVE_INFINITY
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
Number
.
POSITIVE_INFINITY
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
Number
.
NEGATIVE_INFINITY
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
Number
.
NEGATIVE_INFINITY
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
Number
.
NaN
)
)
.
__proto__
'
Number
.
prototype
(
Object
(
Number
.
NaN
)
)
.
__proto__
)
;
new
TestCase
(
)
;
new
TestCase
(
SECTION
'
(
Object
(
"
"
)
)
.
__proto__
'
String
.
prototype
(
Object
(
'
'
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
"
(
Object
(
'
foo
'
)
)
.
__proto__
"
String
.
prototype
(
Object
(
'
foo
'
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
"
Object
(
'
'
)
.
__proto__
"
String
.
prototype
(
Object
(
"
"
)
)
.
__proto__
)
;
new
TestCase
(
SECTION
'
(
Object
(
new
MyObject
(
true
)
)
)
.
toString
(
)
'
'
[
object
Object
]
'
eval
(
'
(
Object
(
new
MyObject
(
true
)
)
)
.
toString
(
)
'
)
)
;
window
+
+
typeof
[
TREE
]
identity
;
H6
"
.
"
F
F
*
*
J
(
&
"
L
>
B
N
R
<
X
>
00L
\
T
:
<
N
^
8
(
"
T
&
(
(
"
4
J
D2
.
(
2
&
&
&
"
(
.
&
&
*
*
"
*
6
Z
H
4
8PD
V
B00
:
2
4
2
.
P
