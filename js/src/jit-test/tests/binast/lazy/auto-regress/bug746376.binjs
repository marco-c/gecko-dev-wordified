BINJS
[
GRAMMAR
]
identity
;
P
(
IdentifierExpression
"
BindingIdentifier
.
LiteralStringExpression
&
ExpressionStatement
(
AssertedDeclaredName
>
AssertedPositionalParameterName
BinaryExpression
CallExpression
AssertedBlockScope
Block
(
AssignmentExpression
&
VariableDeclaration
VariableDeclarator8StaticMemberAssignmentTarget
StaticMemberExpression
ThisExpression
IfStatement
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
UnaryExpression
NewExpression
*
ConditionalExpression
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope4AssignmentTargetIdentifier
BreakStatement
CatchClause
<
ComputedMemberAssignmentTarget0LiteralBooleanExpression0LiteralNumericExpression
ReturnStatement
Script
"
TryCatchStatement
UpdateExpression
WhileStatement
[
STRINGS
]
identity
;
z
var
actual
expected
file
testcase
=
=
a
description
e
gTestcases
lfVarx
lfcode
undefined
+
Array
TestCase
callStack
funcName
gTc
"
getTestCaseResult
lastFunc
loadFile
output
passed
reportCompare
typeof
d
enterFunc
evaluate
lfVare
n
reason
toPrinted
!
=
'
0
'
matched
actual
value
'
.
js
BUGNUMBER
BUGNUMER
Debugger
Expected
value
'
PTest
driver
failure
wrong
exit
function
browser
bugnumber
expect
length
pop
printStatus
push
shell
shift
substr
type
"
unknown
-
test
-
name
var
summary
=
'
decompilation
of
"
let
with
with
"
'
;
var
actual
=
'
'
;
var
expect
=
'
'
;
test
(
)
;
function
test
(
)
{
enterFunc
(
'
test
'
)
;
gczeal
(
2
)
;
for
(
let
q
=
0
;
q
<
50
;
+
+
q
)
{
new
Function
(
'
for
(
var
i
=
0
;
i
<
5
;
+
+
i
)
{
}
'
)
(
)
;
var
w
=
'
r
'
.
match
(
/
r
/
)
;
new
Function
(
'
for
(
var
j
=
0
;
j
<
1
;
+
+
j
)
{
}
'
)
(
)
;
}
reportCompare
(
expect
actual
summary
)
;
}
window
+
+
-
delete
[
TREE
]
identity
;
H8
"
8
&
(
2
"
0
0
&
^
*
>
6
(
>
6
&
\
0
(
Z2
D
.
4
P
N
l2
.
4
r
f
X
L
t
:
&
2
*
(
&
.
.
"
.
4
"
D
b
T
B
J
B
H
0
n
.
"
0
F
0
8
\
*
(
&
*
*
"
2
*
V
(
2
*
(
&
0
d
p
.
x
RNB
h
"
<
F
"
:
*
(
&
J
"
j
.
vD
L
:
>
6
4
<
<
