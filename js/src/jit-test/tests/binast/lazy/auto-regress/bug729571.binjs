BINJS
[
GRAMMAR
]
identity
;
g
H
"
BindingIdentifier
(
IdentifierExpression
AssertedBlockScope
Block
CallExpression
&
ExpressionStatement
(
AssertedDeclaredName
StaticMemberExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
>
AssertedPositionalParameterName
CatchClause
"
TryCatchStatement
&
VariableDeclaration
VariableDeclarator
AssertedParameterScope
AssertedVarScope
(
AssignmentExpression
FormalParameters8StaticMemberAssignmentTarget4FunctionExpressionContents
LazyFunctionExpression
.
LiteralStringExpression
ObjectExpression2AssertedScriptGlobalScope
BinaryExpression
BreakStatement0FunctionOrMethodContents
IfStatement
.
LazyFunctionDeclaration0LiteralBooleanExpression0LiteralNumericExpression
NewExpression
Script
WhileStatement
[
STRINGS
]
identity
;
G
>
var
TestCase
ex
file
lfcode
a
d
e
ex1
lfVare
n
optionNames
options
optionsframe
prototype
try
{
}
catch
(
exception
)
{
}
try
{
}
catch
(
exception
)
{
}
try
{
}
catch
(
exception
)
{
}
try
{
}
catch
(
actual
)
{
}
var
props
=
{
}
;
function
test
(
which
)
{
var
g
=
newGlobal
(
)
;
function
addDebugger
(
g
i
)
{
var
dbg
=
Debugger
(
g
)
;
dbg
.
onDebuggerStatement
=
function
(
frame
)
{
}
;
}
for
(
var
i
=
0
;
i
<
3
;
i
+
+
)
{
addDebugger
(
g
i
)
;
}
g
.
eval
(
"
debugger
;
"
)
;
}
for
(
var
j
=
0
;
j
<
3
;
j
+
+
)
test
(
j
)
;
Array
&
TestCase_testFailed
dump
evaluate
gczeal
initvalues
optionsClear
push
shift
split
testFailed
undefined
=
=
[
TREE
]
identity
;
D2
<
J8
&
"
(
(
*
&
"
(
8
&
*
&
"
(
.
0
6
.
"
0
0
B
2
.
F
>
4
:
4
<
:
6
*
