BINJS
[
GRAMMAR
]
identity
;
e
J
(
IdentifierExpression
CallExpression
&
ExpressionStatement
AssertedBlockScope
Block
StaticMemberExpression
"
BindingIdentifier
.
LiteralStringExpression
(
AssertedDeclaredName
BreakStatement
IfStatement0LiteralNumericExpression
UnaryExpression
&
VariableDeclaration
VariableDeclarator
BinaryExpression
NewExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
AssertedParameterScope
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
AssertedVarScope
(
AssignmentExpression4AssignmentTargetIdentifier
CatchClause
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration0LiteralBooleanExpression
Script
SwitchCase
SwitchDefault4SwitchStatementWithDefault
"
TryCatchStatement
WhileStatement
[
STRINGS
]
identity
;
4
lfcode
lfVarx
var
push
file
lfRunTypeId
loadFile
lfVare
-
=
=
.
js
2
Array
Function
const
baz
=
'
bar
'
;
evaluate
evaluate
(
'
var
INVALIDATE_MODES
=
INVALIDATE_MODE_STRINGS
.
map
(
s
=
>
(
{
mode
:
s
}
)
)
;
function
range
(
n
m
)
{
}
function
seq_scan
(
array
f
)
{
}
function
assertStructuralEq
(
e1
e2
)
{
}
for
(
var
i
=
0
l
=
a
.
length
;
i
<
l
;
i
+
+
)
{
}
'
)
;
vfor
(
var
x
of
new
Set
(
Object
.
getOwnPropertyNames
(
this
)
)
)
{
}
isNaN
parseInt
shift
substr
undefined
*
{
function
foo
(
)
{
}
}
!
[
TREE
]
identity
;
/
>
"
0
"
?
H
<
*
.
:
8
(
*
6
.
F
2
&
02
(
D
"
B
4
&
