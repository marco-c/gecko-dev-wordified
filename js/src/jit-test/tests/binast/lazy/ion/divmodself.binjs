BINJS
[
GRAMMAR
]
identity
;
c
H
(
IdentifierExpression
CallExpression0LiteralNumericExpression
&
ExpressionStatement
UnaryExpression
"
BindingIdentifier
BinaryExpression
(
AssertedDeclaredName
ReturnStatement
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
>
AssertedPositionalParameterName
*
LiteralNullExpression
&
VariableDeclaration
VariableDeclarator
IfStatement
AssertedBlockScope
Block4AssignmentTargetIdentifier
ForStatement
UpdateExpression
"
AssertedBoundName
.
AssertedBoundNamesScope
CatchClause
.
EagerFunctionExpression4FunctionExpressionContents
StaticMemberExpression
"
TryCatchStatement2AssertedScriptGlobalScope
*
ConditionalExpression
.
LiteralStringExpression
Script
[
STRINGS
]
identity
;
A
assertEq
-
y
yu
var
NaN
undefined
Infinity
>
>
>
/
x
i
%
|
shifted_udiv
(
shifted_udiv_nonzero
*
shifted_udiv_positive
*
shifted_udiv_truncate
:
shifted_udiv_truncate_nonzero
<
shifted_udiv_truncate_positive
shifted_umod
(
shifted_umod_nonzero
*
shifted_umod_positive
*
shifted_umod_truncate
:
shifted_umod_truncate_nonzero
<
shifted_umod_truncate_positive
sdiv
sdiv_nonzero
sdiv_positive
sdiv_truncate
*
sdiv_truncate_nonzero
sdiv_truncate_positive
smod
smod_nonzero
smod_positive
smod_truncate
*
smod_truncate_nonzero
smod_truncate_positive
udiv
udiv_nonzero
udiv_positive
udiv_truncate
*
udiv_truncate_nonzero
udiv_truncate_positive
umod
umod_nonzero
umod_positive
umod_truncate
*
umod_truncate_nonzero
umod_truncate_positive
<
=
=
=
a
+
+
<
bug900437
e
bug939893
bug944963
bug945860
bug_g
bug_h
f
g
+
Math
fround
max
xy
*
>
>
~
[
TREE
]
identity
;
%
F
\
h
n
r
t
v
x
z
|
~
4
6
8
:
<
>
"
&
(
*
.
0
2
B
D
F
H
J
L
N
P
R
T
V
X
Z
\
^
b
t
L
.
"
l
0
j
*
(
>
*
(
8
:
t
<
64
2p
p
*
(
n
"
.
"
l
0
j
D
n
n
|
Z
h
"
h
h
~
b
"
?
.
"
l
0
j
|
.
"
l
0
j
~
?
r
x
x
F
z
z
n
<
B
.
"
h
l
h
0
j
h
*
(
r
v
4
.
"
l
0
j
*
(
>
*
(
8
:
v
?
64
2p
p
*
(
:
J
:
?
:
?
?
:
?
?
:
:
:
?
?
:
?
?
:
:
:
:
4
4
4
?
4
?
?
4
?
?
4
4
4
?
?
4
?
?
4
4
4
4
R
x
"
R
?
R
?
?
R
?
?
R
R
R
?
?
R
?
?
R
R
R
R
"
x
"
?
"
?
"
?
"
?
"
?
?
"
"
"
?
"
?
?
"
"
"
"
L
b
"
L
?
L
?
?
L
?
?
L
L
L
?
?
L
?
?
L
L
L
L
b
"
?
?
?
?
?
?
?
?
?
F
J
F
F
?
F
?
F
F
F
?
F
?
F
F
F
F
4
?
?
?
?
^
x
"
^
^
?
^
?
^
^
^
?
^
?
^
^
^
^
.
x
"
?
.
.
.
?
.
?
.
.
.
?
.
?
.
.
.
.
X
b
"
X
X
?
X
?
X
X
X
?
X
?
X
X
X
X
(
b
"
?
(
(
(
?
(
?
(
(
(
?
(
?
(
(
(
(
<
&
f
i
<
?
<
?
?
<
?
?
<
i
<
i
<
?
?
<
?
?
<
<
<
<
6
j
&
f
i
6
?
6
?
?
6
?
?
6
i
6
i
6
?
?
6
?
?
6
6
6
6
T
"
&
f
i
T
?
T
?
?
T
?
?
T
i
T
i
T
?
?
T
?
?
T
i
T
i
T
i
T
i
"
?
&
f
i
?
?
?
i
?
?
i
i
?
i
?
?
i
i
i
i
N
"
&
f
i
N
?
N
?
?
N
?
?
N
i
N
i
N
?
?
N
?
?
N
i
N
i
N
i
N
i
"
?
&
f
i
?
?
?
i
?
?
i
i
?
i
?
?
i
i
i
i
H
&
f
i
H
H
?
H
?
H
i
H
i
H
?
H
?
H
H
H
H
B
j
&
f
i
B
B
?
B
?
B
i
B
i
B
?
B
?
B
B
B
B
"
&
f
i
?
?
i
i
?
?
i
i
i
i
0
"
?
&
f
i
0
0
0
?
i
0
?
0
i
0
i
0
?
i
0
?
0
i
0
i
0
i
0
i
Z
"
&
f
i
Z
Z
?
Z
?
Z
i
Z
i
Z
?
Z
?
Z
i
Z
i
Z
i
Z
i
*
"
?
&
f
i
*
*
*
?
i
*
?
*
i
*
i
*
?
i
*
?
*
i
*
i
*
i
*
i
>
&
d
i
>
?
>
?
?
>
?
i
>
i
>
i
>
?
?
>
?
i
>
>
>
>
i
8
j
&
d
i
8
?
8
?
?
8
?
i
8
i
8
i
8
?
?
8
?
i
8
8
8
8
i
V
"
&
d
i
V
?
V
?
?
V
?
?
V
i
V
i
V
?
?
V
?
?
V
i
V
i
V
i
V
i
&
"
?
&
d
i
&
?
&
?
&
?
i
&
?
?
&
i
&
i
&
?
i
&
?
?
&
i
&
i
&
i
&
i
P
"
&
d
i
P
?
P
?
?
P
?
?
P
i
P
i
P
?
?
P
?
?
P
i
P
i
P
i
P
i
"
?
&
d
i
?
?
?
i
?
?
i
i
?
i
?
?
i
i
i
i
J
&
d
i
J
J
?
J
?
i
J
i
J
i
J
?
J
?
i
J
J
J
J
i
D
j
&
d
i
D
D
?
D
?
i
D
i
D
i
D
?
D
?
i
D
D
D
D
i
b
"
&
d
i
b
b
?
b
?
b
i
b
i
b
?
b
?
b
i
b
i
b
i
b
i
2
"
?
&
d
i
2
2
2
?
i
2
?
2
i
2
i
2
?
i
2
?
2
i
2
i
2
i
2
i
\
"
&
d
i
\
\
?
\
?
\
i
\
i
\
?
\
?
\
i
\
i
\
i
\
i
"
?
&
d
i
?
i
?
i
i
?
i
?
i
i
i
i
