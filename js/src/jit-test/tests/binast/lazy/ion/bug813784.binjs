BINJS
[
GRAMMAR
]
identity
;
U
:
(
IdentifierExpression0LiteralNumericExpression
CallExpression
.
LiteralStringExpression
"
BindingIdentifier
&
ExpressionStatement
(
AssertedDeclaredName
AssertedParameterScope
AssertedVarScope
FormalParameters0FunctionOrMethodContents
.
LazyFunctionDeclaration
ReturnStatement
>
AssertedPositionalParameterName0ComputedMemberExpression
StaticMemberExpression
&
VariableDeclaration
VariableDeclarator
BinaryExpression
IfStatement
(
AssignmentExpression4AssignmentTargetIdentifier
UnaryExpression
ArrayExpression
AssertedBlockScope
Block2AssertedScriptGlobalScope
Script
[
STRINGS
]
identity
;
var
assertEq
i
a
b
c
args
arguments
d
undefined
e
arg
length
fun
=
=
89
apply
base2
test8
90
apply_fun1
-
apply_fun2
arg_len
base1
f13
funapply11
funapply12
funapply14
funapply5
test
test10
test11
test12
test13
test14
test2
test3
test4
test5
test7
test9
apply3
bailing_arg_len
dumpArgs
dumpArgs11
dumpArgs12
eval
funapply
funapply2
funapply3
funapply4
get_arg
get_arg_2
inline
inline2
inline3
inline4
inlined
noion12
noion14
notinlined
return0
2
arg_len2
bailout
[
TREE
]
identity
;
:
86
^
V
(
.
X
0
"
Z
\
^
2
b
4
6
8
d
f
h
:
j
l
n
p
r
t
v
x
z
|
~
<
>
B
D
F
H
J
L
N
P
R
l
4
<
Z
l
?
<
<
.
H
Z
.
?
H
H
j
J
Z
j
?
"
J
?
?
"
J
?
?
~
R
b
0
~
L
Z
b
?
L
L
V
?
d
0
V
N
Z
d
?
N
N
(
P
f
0
(
P
H
f
?
P
P
"
P
h
0
H
h
?
*
(
*
*
(
*
Z
\
(
&
V
:
0
:
0
Z
R
4
:
R
V
V
R
V
?
|
?
p
f
|
n
Z
p
?
0
f
n
.
*
?
.
*
.
*
0
&
(
0
&
(
v
(
&
&
42
*
t
X
v
r
X
t
"
r
.
*
.
*
"
"
&
(
"
"
&
&
(
?
"
"
&
(
"
"
&
&
(
?
>
X
(
&
V
42
.
>
j
X
"
>
?
?
?
"
>
V
V
?
\
>
4
T
4
4
\
4
4
V
V
V
V
^
X
(
&
V
6
0
x
B
^
T
6
4
x
B
4
6
B
B
&
&
2
J
(
&
&
2
0
D
D
2
D
?
D
&
?
z
p
(
&
42
8
0
T
8
h
(
&
V
42
*
z
F
4
8
F
F
&
