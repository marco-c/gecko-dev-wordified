BINJS
[
GRAMMAR
]
identity
;
s
:
(
IdentifierExpression
CallExpression
"
BindingIdentifier
&
ExpressionStatement
AssertedParameterScope
>
AssertedPositionalParameterName
AssertedVarScope
FormalParameters
.
LiteralStringExpression
AssertedBlockScope
(
AssertedDeclaredName
(
AssignmentExpression4AssignmentTargetIdentifier
Block0FunctionOrMethodContents
.
LazyFunctionDeclaration
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
CatchClause4FunctionExpressionContents
LazyFunctionExpression0LiteralNumericExpression
ReturnStatement
Script
SwitchDefault4SwitchStatementWithDefault
"
TryCatchStatement
[
STRINGS
]
identity
;
code
f
g
e
h
w
var
W
x
=
[
]
;
y
=
new
Set
;
z
=
[
]
;
Object
.
defineProperty
(
x
5
{
get
:
(
function
(
j
)
{
}
)
}
)
;
Object
.
defineProperty
(
z
3
{
}
)
;
z
[
9
]
=
1
;
x
.
shift
(
)
;
/
z
.
every
(
function
(
)
{
x
.
filter
(
function
(
j
)
{
if
(
j
)
{
}
else
{
y
.
add
(
)
}
}
)
;
return
2
}
)
Function
evalcx
newGlobal
[
TREE
]
identity
;
q
2
&
6
.
4
0
n
*
8
(
"
