BINJS
[
GRAMMAR
]
identity
;
<
(
IdentifierExpression
CallExpression
&
ExpressionStatement
.
LiteralStringExpression
StaticMemberExpression
"
BindingIdentifier
(
AssertedDeclaredName0LiteralBooleanExpression
&
VariableDeclaration
VariableDeclarator0LiteralNumericExpression
AssertedParameterScope
AssertedVarScope4AssignmentTargetIdentifier0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
AssertedBlockScope
(
AssignmentExpression
Block
"
AssertedBoundName
.
AssertedBoundNamesScope
BinaryExpression
CatchClause
"
TryCatchStatement2AssertedScriptGlobalScope8CompoundAssignmentExpression0ComputedMemberExpression
Script
[
STRINGS
]
identity
;
R
assertEq
var
s
arr
JSON
stringify
e
eval
parse
res
isLatin1
testBasic
testErrorPos
testEvalHack
&
testEvalHackNotJSON
testQuote
SyntaxError
[
1
2
3
"
abc
"
]
[
1
2
3
"
abc
"
]
includes
line
2
column
3
toString
instanceof2
"
abc
-
-
\
u0005
-
'
\
"
-
\
n
-
+
+
"
8
"
abc
-
-
\
u0005
-
'
\
"
-
\
n
-
+
+
"
[
1
2
[
1
"
"
2
^
[
1
2
"
foo
"
"
bar
\
r
\
n
"
{
"
xyz
"
:
3
}
[
1
2
3
]
]
d
[
1
2
"
foo
"
"
bar
\
r
\
n
"
{
"
xyz
"
:
3
}
[
1
2
3
]
]
[
1
2
3
"
abc
"
]
&
[
1
2
3
"
abc
"
]
&
[
1
2
3
"
abc
"
]
N
[
1
2
"
foo
"
"
bar
\
r
\
n
"
{
"
xyz
"
:
3
}
[
1
2
3
]
]
T
[
1
2
"
foo
"
"
bar
\
r
\
n
"
{
"
xyz
"
:
3
}
[
1
2
3
]
]
6
[
]
;
var
q
;
[
1
2
3
"
abc
"
]
<
[
]
;
var
z
;
[
1
2
3
"
abc
"
]
abc
-
-
-
'
"
-
-
+
+
abc
length
+
=
[
TREE
]
identity
;
1
:
4
"
6
&
8
B
"
22
(
?
0
*
(
.
*
&
(
&
42
(
?
0
*
(
.
*
&
(
"
:
"
&
<
"
D
"
&
F
>
L
8
J
"
H
.
6P
N
0
