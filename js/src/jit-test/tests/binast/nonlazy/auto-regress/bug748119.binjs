BINJS
[
GRAMMAR
]
identity
;
B
(
IdentifierExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
.
LiteralStringExpression
AssertedBlockScope
Block
"
BindingIdentifier
(
AssertedDeclaredName
BinaryExpression
IfStatement
&
VariableDeclaration
VariableDeclarator
"
AssertedBoundName
.
AssertedBoundNamesScope
AssertedParameterScope
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
AssertedVarScope
BreakStatement
CatchClause0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents0LiteralBooleanExpression0LiteralNumericExpression
NewExpression
Script
SwitchStatement
"
TryCatchStatement
UnaryExpression
WhileStatement
[
STRINGS
]
identity
;
7
.
lfcode
push
var
file
lfVarx
loadFile
lfVare
=
=
.
js
Array
evaluate
gczeal
(
4
)
;
lfRunTypeId
shift
substr
undefined
var
MSG_PATTERN
=
'
\
nregexp
=
'
;
var
MSG_STRING
=
'
\
nstring
=
'
;
var
MSG_EXPECT
=
'
\
nExpect
:
'
;
var
MSG_ACTUAL
=
'
\
nActual
:
'
;
var
TYPE_STRING
=
typeof
'
abc
'
;
function
testRegExp
(
statuses
patterns
strings
actualmatches
expectedmatches
)
lExpect
=
expectedmatch
.
length
;
lActual
=
actualmatch
.
length
;
var
expected
=
formatArray
(
expectedmatch
)
;
reportCompare
(
expected
actual
state
+
ERR_MATCH
+
CHAR_NL
)
;
function
getState
(
status
pattern
string
)
{
var
delim
=
CHAR_COMMA
+
CHAR_SPACE
;
c
var
UBound
=
0
;
var
TEST_PASSED
=
'
SyntaxError
'
;
var
TEST_FAILED
=
'
Generated
an
error
but
NOT
a
SyntaxError
!
'
;
var
statusitems
=
[
]
;
var
actualvalues
=
[
]
;
var
expectedvalues
=
[
]
;
testThis
(
'
/
a
*
*
/
'
)
;
testThis
(
'
/
a
*
*
*
/
'
)
;
testThis
(
'
/
a
+
+
/
'
)
;
testThis
(
'
/
a
+
+
+
/
'
)
;
testThis
(
'
/
a
?
?
?
/
'
)
;
testThis
(
'
/
a
?
?
?
?
/
'
)
;
testThis
(
'
/
+
a
/
'
)
;
testThis
(
'
/
+
+
a
/
'
)
;
testThis
(
'
/
?
a
/
'
)
;
testThis
(
'
/
?
?
a
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
2
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
2
}
{
1
}
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
2
}
/
'
)
;
testThis
(
'
/
x
{
1
}
{
1
2
}
/
'
)
;
function
testThis
(
sInvalidSyntax
)
{
try
{
eval
(
sInvalidSyntax
)
;
}
catch
(
e
)
{
actual
=
TEST_PASSED
;
}
}
function
checkThis
(
sAllowedSyntax
)
{
}
reportCompare
(
expectedvalues
[
i
]
actualvalues
[
i
]
statusitems
[
i
]
)
;
exitFunc
(
'
test
'
)
;
var
gTestcases
=
new
Array
(
)
;
var
gTc
=
gTestcases
.
length
;
function
TestCase
(
n
d
e
a
)
{
this
.
passed
=
getTestCaseResult
(
e
a
)
;
this
.
bugnumber
=
typeof
(
BUGNUMER
)
!
=
'
undefined
'
?
BUGNUMBER
:
'
'
;
gTestcases
[
gTc
+
+
]
=
this
;
}
for
(
var
i
=
0
;
i
<
len
;
i
+
+
)
{
}
function
reportCompare
(
expected
actual
description
)
{
var
testcase
=
new
TestCase
(
"
unknown
-
test
-
name
"
description
expected
actual
)
;
if
(
testcase
.
passed
)
printStatus
(
"
Expected
match
to
'
"
+
toPrinted
(
expectedRegExp
)
+
"
'
matched
actual
value
'
"
+
toPrinted
(
actual
)
+
"
'
"
)
;
}
function
getTestCaseResult
(
expected
actual
)
function
stopTest
(
)
{
}
?
var
gTestcases
=
new
Array
;
function
TestCase
(
n
d
e
a
)
{
}
function
toPrinted
(
value
)
value
=
value
.
replace
(
/
\
\
n
/
g
'
NL
'
)
.
replace
(
/
[
^
\
x20
-
\
x7E
]
+
/
g
escapeString
)
;
var
summary
=
'
Regression
test
for
bug
385393
'
;
var
expect
=
'
No
Crash
'
;
reportCompare
(
expect
actual
summary
)
;
-
[
TREE
]
identity
;
8
6
&
"
(
*
2
(
0
"
.
&
<
>
4
:
*
