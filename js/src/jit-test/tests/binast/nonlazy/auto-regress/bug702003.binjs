BINJS
[
GRAMMAR
]
identity
;
(
(
IdentifierExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
AssertedBlockScope
(
AssertedDeclaredName
"
BindingIdentifier
Block
.
LiteralStringExpression
&
VariableDeclaration
VariableDeclarator
2AssertedScriptGlobalScope
BinaryExpression
BreakStatement
IfStatement0LiteralBooleanExpression
NewExpression
Script
WhileStatement
[
STRINGS
]
identity
;
q
lfcode
code
var
push
Array
evaluate
shiftptry
{
gczeal
(
2
)
;
exitFunc
(
'
test
'
)
;
}
catch
(
exc1
)
{
}
undefined
var
summary
=
'
Foo
'
;
var
actual
=
'
No
Crash
'
;
var
expect
=
'
No
Crash
'
;
test
(
)
;
function
test
(
)
{
try
{
eval
(
'
(
function
(
)
{
<
x
/
>
.
(
yield
4
)
}
)
(
)
.
next
(
)
;
'
)
;
}
catch
(
ex
)
{
'
Bar
'
;
}
}
=
=
[
TREE
]
identity
;
"
&
