BINJS
[
GRAMMAR
]
identity
;
*
(
IdentifierExpression
"
BindingIdentifier
CallExpression
&
ExpressionStatement
AssertedBlockScope
Block
"
AssertedBoundName
.
AssertedBoundNamesScope
(
AssertedDeclaredName
AssertedParameterScope
>
AssertedPositionalParameterName2AssertedScriptGlobalScope
AssertedVarScope
CatchClause0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
.
LiteralStringExpression
Script
"
TryCatchStatement
[
STRINGS
]
identity
;
code
f
e
evalY
z
=
evalcx
(
'
'
)
;
gc
(
)
;
z
.
toString
=
(
function
(
)
{
v
=
evaluate
(
"
(
Math
.
atan2
(
\
"
\
"
this
)
)
"
{
global
:
z
catchTermination
:
this
}
)
;
}
)
;
String
(
z
)
var
[
TREE
]
identity
;
&
"
(
