BINJS
[
GRAMMAR
]
identity
;
B
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement0LiteralNumericExpression
StaticMemberExpression
UnaryExpression
BinaryExpression
"
BindingIdentifier
(
AssertedDeclaredName0LiteralBooleanExpression
ReturnStatement
VariableDeclarator
(
AssignmentExpression4AssignmentTargetIdentifier
&
VariableDeclaration
IfStatement
>
AssertedPositionalParameterName
ArrayExpression
AssertedParameterScope
AssertedVarScope
<
ComputedMemberAssignmentTarget0EagerFunctionDeclaration
ForStatement
FormalParameters0FunctionOrMethodContents
UpdateExpression
AssertedBlockScope2AssertedScriptGlobalScope
Block0ComputedMemberExpression
Script
[
STRINGS
]
identity
;
Bu
testmath
Number
-
NaN
Math
Math
.
pow
/
PI
Math
.
cos
Math
.
atan2
Infinity
Math
.
abs
Math
.
sqrt
Math
.
ceil
Math
.
max
"
POSITIVE_INFINITY
-
0
Math
.
round
Math
.
min
var
Math
.
acos
Math
.
asin
0
Math
.
atan
Math
.
floor
Math
.
log
expected
Math
.
sin
Math
.
tan0Number
.
NEGATIVE_INFINITY
Number
.
NaN0Number
.
POSITIVE_INFINITY
void
0
Math
.
exp
null
+
"
NEGATIVE_INFINITY
i
1
actual
SQRT2
false
floor
-
1
'
0
'
j
Infinity
/
Math
.
ceil
actuals
"
dummies_and_input
!
=
true
'
1
'
-
0
-
0
"
-
Number
.
MIN_VALUE
0
-
0
0
0
0
Number
.
NaN
arg_value_list
arity
dummy_list
void
0
void
0
*
-
0
1
-
0
.
5
-
0
.
9
3
.
14159265359
E
"
Infinity
/
Math
.
pow
&
Infinity
/
Math
.
round
MIN_VALUE
Math
.
PI
Number
.
NaN
0
args
close_enough
funcname
mapfunc
testfunc
+
+
<
=
=
typeof
"
-
99
"
"
99
"
"
Infinity
"
"
a
string
"
'
-
0
'
'
-
1
'
'
-
Infinity
'
'
Infinity
'
-
0
-
18
-
0
Number
.
POSITIVE_INFINITY
-
0
0
-
0
3
-
0
.
0000001
-
0
.
49
-
1
null
-
1
.
1
-
Math
.
PI
-
Math
.
SQRT1_2
0
-
1
0
.
0000001
0
.
5
0
.
7853981633974
0
.
961
Number
.
NEGATIVE_INFINITY61
Number
.
POSITIVE_INFINITY
1
0
1
Number
.
NaN
1
.
1
1
.
570796326795
2
.
356194490192
3
*
Math
.
PI
/
4
3
.
926990816987
4
.
712388980385
5
*
Math
.
PI
/
4
5
.
497787143782
7
*
Math
.
PI
/
4
&
Infinity
/
Math
.
atan2
"
Infinity
/
Math
.
min
MAX_VALUE
Math
.
PI
/
4
Math
.
SQRT1_28Number
.
NEGATIVE_INFINITY
-
16Number
.
NEGATIVE_INFINITY
1dNumber
.
NEGATIVE_INFINITY
Number
.
NEGATIVE_INFINITYdNumber
.
NEGATIVE_INFINITY
Number
.
POSITIVE_INFINITY
Number
.
NaN
16Number
.
POSITIVE_INFINITY
1
]
eval
null
1
pow
true
false
void
0
1
>
a
[
i
]
=
L
for
(
var
i
=
0
;
i
<
a
.
length
;
i
+
+
)
}
)
"
-
0
.
1
"
"
-
1
"
"
-
1
.
1
"
"
0
"
"
0
.
1
"
"
1
"
"
1
.
1
"
(
"
a
string
primitive
"
"
a
string
"
0H
"
a
string
"
Number
.
POSITIVE_INFINITY
"
string
"
'
-
1e
-
1
'
'
.
99999
'
'
077
'
'
0xff
'
'
12345e
-
2
'
'
2
'
'
32
'
'
2
.
356194490192
'
'
225
'
'
3
.
14159265359
'
(
(
function
(
a
)
{
)
;
-
Number
.
MAX_VALUEL
-
.
0000000009
Number
.
NEGATIVE_INFINITYL
-
.
0000000009
Number
.
POSITIVE_INFINITY
-
0
-
0
-
0
-
10001
-
0
-
2
-
0
0
.
5
-
0
1
-
0
2
-
0
.
000001
-
0
.
51
-
0
.
7853981633974
-
0777
-
0xfff
-
1
-
0
-
1
-
0
.
5
-
1
0
-
1
0
.
5
-
1
18
-
1
Number
.
NEGATIVE_INFINITY
-
1
Number
.
NaN8
-
1
Number
.
POSITIVE_INFINITY
&
-
1
-
.
99999999999999
-
1
0
-
1
Infinity6
-
1
Number
.
NEGATIVE_INFINITY
-
1
Number
.
NaN6
-
1
Number
.
POSITIVE_INFINITY
-
1
.
00000001H
-
1
.
00000001
Number
.
NEGATIVE_INFINITYH
-
1
.
00000001
Number
.
POSITIVE_INFINITY
-
1
.
000001
-
1
.
570796326795
-
1
/
100000000
-
3
-
3
*
Math
.
PI
/
2
-
3
*
Math
.
PI
/
4
-
3
.
0
-
5
*
Math
.
PI
/
4
-
7
*
Math
.
PI
/
4
-
Math
.
PI
*
2
-
Math
.
PI
/
2
-
Math
.
PI
/
4
-
Math
.
SQRT1_2
+
'
'
-
Math
.
pow
(
2
32
)
-
Number
.
NaNJ
.
0000000009
Number
.
POSITIVE_INFINITY
0
-
0
.
5
0
-
100060
Number
.
NEGATIVE_INFINITY60
Number
.
POSITIVE_INFINITY
0
0
.
001
0
0
.
5
0
1
0
1000
0
.
00000001
0
.
01
0
.
09
0
.
49
0
.
51
0
.
9999619230642
1
Number
.
NaN
1
-
0
"
1
.
99999999999999
1
1
.
0000000001
1
.
0000000001
1
1
.
00000001H1
.
00000001
Number
.
NEGATIVE_INFINITYH1
.
00000001
Number
.
POSITIVE_INFINITY
1
.
000001
10000
16
2
2
*
Math
.
PI
2
.
3561944901920
25
256
3
*
Math
.
PI
/
2
3
.
5
36
4
49
6
.
28318530718
64
65536
9
"
Infinity
/
Math
.
abs
Infinity
/
Math
.
asin
Infinity
/
Math
.
atan
&
Infinity
/
Math
.
floor
"
Infinity
/
Math
.
max
Infinity
/
Math
.
sqrt
"
Infinity
/
Math
.
tan
Math
.
PI
*
2
Math
.
PI
/
2
Math
.
SQRT1_2
+
'
'
6Math
.
floor
(
-
0
)
=
=
-
Math
.
ceilDMath
.
floor
(
-
0
.
0000001
)
=
=
-
Math
.
ceil6Math
.
floor
(
0
)
=
=
-
Math
.
ceilBMath
.
floor
(
0
.
0000001
)
=
=
-
Math
.
ceildMath
.
floor
(
Number
.
NEGATIVE_INFINITY
)
=
=
-
Math
.
ceilHMath
.
floor
(
Number
.
NaN
)
=
=
-
Math
.
ceildMath
.
floor
(
Number
.
POSITIVE_INFINITY
)
=
=
-
Math
.
ceil
Math
.
pow
(
2
32
)
Number
.
MAX_VALUE
Number
.
MIN_VALUE8Number
.
NEGATIVE_INFINITY
-
28Number
.
NEGATIVE_INFINITY
-
36Number
.
NEGATIVE_INFINITY
0
:
Number
.
NEGATIVE_INFINITY
0
.
5
:
Number
.
NEGATIVE_INFINITY
333
:
Number
.
NEGATIVE_INFINITY
6666Number
.
NEGATIVE_INFINITY
-
0
:
Number
.
NEGATIVE_INFINITY
-
0
.
56Number
.
NEGATIVE_INFINITY
-
1bNumber
.
NEGATIVE_INFINITY
Number
.
NEGATIVE_INFINITY
Number
.
NaN
.
5
Number
.
NaN
0
Number
.
NaN
1
Number
.
NaN
Number
.
NaN
Number
.
NaN
-
0
Number
.
NaN
-
1
*
Number
.
NaN
Number
.
NaNFNumber
.
NaN
Number
.
POSITIVE_INFINITYNNumber
.
POSITIVE_INFINITY
-
.
000000000018Number
.
POSITIVE_INFINITY
-
16Number
.
POSITIVE_INFINITY
06Number
.
POSITIVE_INFINITY
2TNumber
.
POSITIVE_INFINITY
Number
.
MAX_VALUEdNumber
.
POSITIVE_INFINITY
Number
.
NEGATIVE_INFINITYHNumber
.
POSITIVE_INFINITY
Number
.
NaNdNumber
.
POSITIVE_INFINITY
Number
.
POSITIVE_INFINITY6Number
.
POSITIVE_INFINITY
-
06Number
.
POSITIVE_INFINITY
-
1JNumber
.
POSITIVE_INFINITY
.
00000000001bNumber
.
POSITIVE_INFINITY
Number
.
POSITIVE_INFINITY
SQRT1_2
[
a
[
i
]
[
abs
assertEq
false
true
join
length
new
Number
(
-
1
)
>
new
String
(
'
a
String
object
'
)
null
null
null
null
number
push
true
false
%
<
=
[
TREE
]
identity
;
~
:
&
&
[
.
4
(
4
2
4
*
^
&
r
&
t
&
&
v
&
J
&
Z
&
&
&
&
J
Z
&
r
F
F
U
&
t
ra
&
^
&
0
J
J
t6
J
^
m
F
F
W
J
^
^
_
A
&
F
F
F
F
F
F
F
=
;
^
?
&
&
0
J
J
"
6
J
<
8
&
v
&
0
Z
Z
t6
Z
v
Z
z
?
q
F
J
Z
J
v
"
r
.
4
(
2
*
>
"
[
4
.
4
(
4
N
2
4
N
*
"
b
4
N
"
b
4
k
N
4
"
b
N
N
b
4
4
"
b
4
4
"
b
N
4
s
Y
N
4
|
=
"
N
?
N
?
4
D
d
?
R
!
e
<
:
>
C
j
V
?
c
?
L
?
?
A
]
[
)
?
/
o
-
S
(
(
D
(
<
(
(
X
(
f
(
(
(
{
(
L
(
V
(
(
(
(
z
(
v
(
*
*
D
*
<
*
'
*
*
*
*
*
*
*
*
*
*
L
*
V
*
*
.
.
D
.
<
.
.
X
.
f
.
.
.
.
.
.
>
.
:
.
L
.
V
g
x
p
n
l
|
Q
I
c
_
y
s
u
?
M
K
#
'
I
E
z
z
g
<
D
X
\
X
\
\
\
>
:
H
j
\
j
L
?
V
?
\
?
?
>
T
:
T
j
T
L
T
?
V
T
?
T
?
T
?
T
?
T
?
R
?
D
?
X
?
9
?
<
?
?
>
:
!
:
f
?
!
:
f
?
?
!
:
f
?
!
:
f
?
?
P
P
?
P
P
?
Y
!
:
f
?
!
:
f
?
?
!
:
f
?
!
:
f
?
?
P
P
?
P
P
?
B
D
?
B
B
L
B
d
B
R
?
B
f
B
X
?
B
<
B
?
B
?
B
>
B
:
0
0
D
0
d
?
0
R
0
?
0
0
0
?
0
<
0
0
0
>
:
0
:
H
>
0
0
?
2
2
D
H
2
d
2
R
2
X
2
f
2
2
<
2
U
2
V
2
H
2
H
2
L
2
>
2
:
x
?
?
X
9
-
#
%
G
1
p
n
l
h
h
C
Q
)
H
?
o
?
x
?
X
5
p
w
7
?
?
n
l
h
l
h
i
?
x
o
?
]
3
A
p
?
3
?
/
+
}
m
i
G
E
O
;
=
H
H
A
!
%
n
?
?
q
?
|
|
S
H
K
H
M
O
e
k
a
"
"
"
d
?
"
R
"
+
?
"
1
^
"
<
"
"
"
>
"
:
H
"
"
?
"
?
"
"
~
~
"
W
?
"
"
6
D
6
6
R
6
5
!
:
f
?
6
<
6
6
6
>
6
:
6
!
:
f
?
6
?
6
!
:
f
?
6
D
L
?
R
7
.
<
:
V
~
>
L
?
P
S
0
Y
p
333333
?
?
-
C
6
?
8
8
D
8
R
8
<
8
8
8
>
8
:
8
?
8
?
8
8
?
8
?
