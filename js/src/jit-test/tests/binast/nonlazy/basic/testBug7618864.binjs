BINJS
[
GRAMMAR
]
identity
;
F
.
LiteralStringExpression
(
IdentifierExpression
"
BindingIdentifier
CallExpression
AssertedBlockScope
(
AssertedDeclaredName
Block
&
ExpressionStatement
StaticMemberExpression
&
VariableDeclaration
VariableDeclarator
AssertedParameterScope
>
AssertedPositionalParameterName
AssertedVarScope
BinaryExpression0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
IfStatement0LiteralNumericExpression
UnaryExpression
ArrayExpression
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope
BreakStatement
CatchClause0LiteralBooleanExpression
NewExpression
Script
SwitchDefault4SwitchStatementWithDefault
"
TryCatchStatement
WhileStatement
[
STRINGS
]
identity
;
Z
var
lfcode
file
lfVarx
push
lfRunTypeId
lfVare
loadFile
msg
=
=
digits
evaluate
lines
num
printBugNumber
printStatus
-
.
js
0
1
2
3
4
5
6
7
8
9
A
Array
B
C
D
E
F
gczeal
(
4
)
;
jsTestDriverEnd
(
)
;
print
shift
split
substr
undefined
var
BUGNUMBER
=
"
(
none
)
"
;
var
summary
=
"
gen
.
close
(
)
;
gen
.
throw
(
ex
)
throws
ex
forever
"
;
var
actual
expect
;
printBugNumber
(
BUGNUMBER
)
;
printStatus
(
summary
)
;
function
gen
(
)
{
var
x
=
5
y
=
7
;
yield
z
;
}
var
failed
=
false
;
var
it
=
gen
(
)
;
try
{
it
.
close
(
)
;
var
doThrow
=
true
;
var
thrown
=
"
foobar
"
;
try
{
}
catch
(
e
)
{
}
try
{
}
catch
(
e
)
{
}
throw
"
it
.
throw
(
\
"
"
+
thrown
+
"
\
"
)
failed
"
;
var
stopPassed
=
false
;
try
{
}
catch
(
e
)
{
if
(
"
1234
"
)
stopPassed
=
true
;
}
}
catch
(
e
)
{
}
[
TREE
]
identity
;
<
2
"
R
"
(
*
.
0
2
4
6
8
:
<
B
D
F
H
:
>
J
L
X
*
"
(
?
D8
P
&
V
4
&
"
B
&
T
*
"
(
&
>
60
.
N
