BINJS
[
GRAMMAR
]
identity
;
[
(
IdentifierExpression
CallExpression
.
LiteralStringExpression0LiteralNumericExpression
&
ExpressionStatement0LiteralBooleanExpression
BinaryExpression
"
BindingIdentifier
>
AssertedPositionalParameterName
(
AssertedDeclaredName
AssertedParameterScope
AssertedVarScope0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
ReturnStatement
NewExpression
&
VariableDeclaration
VariableDeclarator2AssertedScriptGlobalScope
Script
[
STRINGS
]
identity
;
D
assertEq
+
run_k
run_r
x
<
op
y
var
f
>
>
=
NaN
run_f
;
<
=
var
x
=
Function
gen_f
gen_k
gen_r
{
}
*
return
true
;
return
false
;
var
y
=
if
(
x
if
(
x
)
return
x
y
)
y
;
-
0
0
/
0
1
/
0
[
TREE
]
identity
;
;
*
(
&
(
T
&
*
6
.
0
"
"
&
&
*
2
4
:
.
0
"
"
&
(
&
*
2
8
<
"
"
(
B
>
?
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
?
ffffff
ffffff
ffffff
333333
ffffff
