BINJS
[
GRAMMAR
]
identity
;
N
(
IdentifierExpression
"
BindingIdentifier
&
ExpressionStatement
CallExpression
AssertedBlockScope
>
AssertedPositionalParameterName
(
AssignmentExpression
Block
(
AssertedDeclaredName8StaticMemberAssignmentTarget
StaticMemberExpression
.
LiteralStringExpression
ThisExpression
AssertedParameterScope
AssertedVarScope0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
IfStatement
&
VariableDeclaration
VariableDeclarator
BinaryExpression
NewExpression
UnaryExpression
ArrayExpression
"
AssertedBoundName
.
AssertedBoundNamesScope2AssertedScriptGlobalScope4AssignmentTargetIdentifier
BreakStatement
CatchClause0LiteralBooleanExpression0LiteralNumericExpression
Script
SwitchDefault4SwitchStatementWithDefault
"
TryCatchStatement
WhileStatement
[
STRINGS
]
identity
;
"
L
var
lfcode
lfVarx
a
e
file
push
actual
d
"
getTestCaseResult
loadFile
n
Array
TestCase
expected
gTestcases
lfRunTypeId
lfVare
=
=
.
js
3
description
evaluate
expect
isNaN
name
new
TestCase
(
assertEq
"
String
.
prototype
.
toString
(
)
"
"
"
String
.
prototype
.
toString
(
)
)
;
new
TestCase
(
SECTION
"
(
new
String
(
)
)
.
toString
(
)
"
"
"
(
new
String
(
)
)
.
toString
(
)
)
;
new
TestCase
(
SECTION
"
(
new
String
(
\
"
\
"
)
)
.
toString
(
)
"
"
"
(
new
String
(
"
"
)
)
.
toString
(
)
)
;
new
TestCase
(
SECTION
"
(
new
String
(
String
(
)
)
)
.
toString
(
)
"
"
"
(
new
String
(
String
(
)
)
)
.
toString
(
)
)
;
gczeal
(
4
)
;
new
TestCase
(
SECTION
"
(
new
String
(
0
)
)
.
toString
(
)
"
"
0
"
(
new
String
(
(
1
)
)
)
.
toString
(
)
)
;
options
passed
shift
stackvalues
substr
undefineds
var
SECTION
=
"
15
.
4
.
4
.
3
-
1
"
;
new
TestCase
(
SECTION
"
Array
.
prototype
.
join
.
length
"
1
Array
.
prototype
.
join
.
length
)
;
new
TestCase
(
SECTION
"
delete
Array
.
prototype
.
join
.
length
"
false
delete
Array
.
prototype
.
join
.
length
)
;
new
TestCase
(
SECTION
"
delete
Array
.
prototype
.
join
.
length
;
Array
.
prototype
.
join
.
length
"
1
eval
(
"
delete
Array
.
prototype
.
join
.
length
;
Array
.
prototype
.
join
.
length
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
)
;
TEST_ARRAY
.
join
(
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
)
;
TEST_ARRAY
.
join
(
'
'
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
null
void
0
true
false
123
new
Object
(
)
new
Boolean
(
true
)
)
;
TEST_ARRAY
.
join
(
'
&
'
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
null
void
0
true
false
123
new
Object
(
)
new
Boolean
(
true
)
)
;
TEST_ARRAY
.
join
(
'
'
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
null
void
0
true
false
123
new
Object
(
)
new
Boolean
(
true
)
)
;
TEST_ARRAY
.
join
(
void
0
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
null
void
0
true
false
123
new
Object
(
)
new
Boolean
(
true
)
)
;
TEST_ARRAY
.
join
(
)
"
)
)
;
new
TestCase
(
SECTION
eval
(
"
var
TEST_ARRAY
=
new
Array
(
true
)
;
TEST_ARRAY
.
join
(
'
\
v
'
)
"
)
)
;
SEPARATOR
=
"
\
t
"
;
new
TestCase
(
SECTION
TEST_ARRAY
.
join
(
SEPARATOR
)
)
;
m
var
statusitems
=
[
]
;
var
actualvalues
=
[
]
;
var
expectedvalues
=
[
]
;
actual
=
'
a
^
'
.
replace
(
/
\
\
^
/
'
-
-
'
)
;
actual
=
'
ababc
'
.
replace
(
/
abc
/
'
-
-
'
)
;
actual
=
'
ababc
'
.
replace
(
/
abc
/
g
'
-
-
'
)
;
!
-
[
TREE
]
identity
;
D8
(
*
.
"
4
0
:
8
>
2
"
(
*
.
*
F
D
6L
(
*
<
&
B
<
&
"
J
&
0JB
(
&
0H
2
:
H
F
.
>
6
4
"
"
