/
/
Partly
split
into
simd_f32x4_cmp_part2
.
js
because
we
OOM
on
32
-
bit
systems
bug
1645638
var
ins
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
func
(
export
"
eq
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
eq
(
local
.
get
x
)
(
local
.
get
y
)
)
)
(
func
(
export
"
ne
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
ne
(
local
.
get
x
)
(
local
.
get
y
)
)
)
(
func
(
export
"
lt
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
lt
(
local
.
get
x
)
(
local
.
get
y
)
)
)
(
func
(
export
"
le
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
le
(
local
.
get
x
)
(
local
.
get
y
)
)
)
(
func
(
export
"
gt
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
gt
(
local
.
get
x
)
(
local
.
get
y
)
)
)
(
func
(
export
"
ge
"
)
(
param
x
v128
)
(
param
y
v128
)
(
result
v128
)
(
f32x4
.
ge
(
local
.
get
x
)
(
local
.
get
y
)
)
)
)
)
)
)
;
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
eq
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
ne
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
lt
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
nan
nan
nan
nan
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
inf
inf
inf
inf
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
149
0x1p
-
149
0x1p
-
149
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
inf
-
inf
-
inf
-
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
+
0
0x1p
+
0
0x1p
+
0
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
-
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
-
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
-
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
0x1
.
fffffep
+
127
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
nan
-
nan
-
nan
-
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
-
0x1p
-
149
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
-
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
1
0x1p
-
1
0x1p
-
1
0x1p
-
1
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
-
0x1
.
921fb6p
+
2
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
nan
nan
nan
nan
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x0p
+
0
0x0p
+
0
0x0p
+
0
0x0p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
inf
inf
inf
inf
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
-
0x1p
+
0
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
(
v128
.
const
f32x4
0x1p
-
126
0x1p
-
126
0x1p
-
126
0x1p
-
126
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e019
0123456789e019
0123456789e019
0123456789e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
0123456789e
-
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
0
0
0
0
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
0123456789
.
e019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
0123456789
.
e
+
019
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
var
run
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
import
"
"
"
le
"
(
func
f
(
param
v128
v128
)
(
result
v128
)
)
)
(
func
(
export
"
run
"
)
(
result
i32
)
(
local
result
v128
)
(
local
expected
v128
)
(
local
cmpresult
v128
)
(
local
.
set
result
(
call
f
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
(
v128
.
const
f32x4
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
0123456789
.
0123456789
)
)
)
(
local
.
set
expected
(
v128
.
const
i32x4
-
1
-
1
-
1
-
1
)
)
(
local
.
set
cmpresult
(
i32x4
.
eq
(
local
.
get
result
)
(
local
.
get
expected
)
)
)
(
i8x16
.
all_true
(
local
.
get
cmpresult
)
)
)
)
)
)
{
'
'
:
ins
.
exports
}
)
;
assertEq
(
run
.
exports
.
run
(
)
1
)
