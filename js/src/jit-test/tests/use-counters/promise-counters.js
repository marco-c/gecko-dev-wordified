function
test_function_for_use_counter_integration
(
fn
counter
expected_growth
=
true
)
{
let
before
=
getUseCounterResults
(
)
;
assertEq
(
counter
in
before
true
)
;
fn
(
)
;
let
after
=
getUseCounterResults
(
)
;
if
(
expected_growth
)
{
console
.
log
(
"
Yes
Increase
:
Before
"
before
[
counter
]
"
After
"
after
[
counter
]
)
;
assertEq
(
after
[
counter
]
>
before
[
counter
]
true
)
;
}
else
{
console
.
log
(
"
No
Increase
:
Before
"
before
[
counter
]
"
After
"
after
[
counter
]
)
;
assertEq
(
after
[
counter
]
=
=
before
[
counter
]
true
)
;
}
}
class
MyPromise
extends
Promise
{
}
function
promise_all
(
)
{
let
p
=
Promise
.
all
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_all_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
all
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_all
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_all_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
function
promise_allSettled
(
)
{
let
p
=
Promise
.
allSettled
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_allSettled_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
allSettled
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_allSettled
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_allSettled_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
function
promise_any
(
)
{
let
p
=
Promise
.
any
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_any_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
any
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_any
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_any_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
function
promise_race
(
)
{
let
p
=
Promise
.
race
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_race_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
race
(
[
Promise
.
resolve
(
1
)
]
)
;
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_race
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_race_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
function
promise_resolve
(
)
{
let
p
=
Promise
.
resolve
(
1
)
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_resolve_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
resolve
(
1
)
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_resolve
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_resolve_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
function
promise_reject
(
)
{
let
p
=
Promise
.
reject
(
1
)
.
catch
(
(
)
=
>
undefined
)
assertEq
(
p
instanceof
Promise
true
)
;
}
function
promise_reject_subclassing_type_ii
(
)
{
let
p
=
MyPromise
.
reject
(
1
)
.
catch
(
(
)
=
>
undefined
)
assertEq
(
p
instanceof
MyPromise
true
)
;
}
test_function_for_use_counter_integration
(
promise_reject
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
false
)
;
test_function_for_use_counter_integration
(
promise_reject_subclassing_type_ii
"
SubclassingPromiseTypeII
"
/
*
expected_growth
=
*
/
true
)
;
