<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
BUGNUMBER
<
/
string
>
<
string
>
Foo
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
f
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
1
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
instanceof
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
"
Regression
test
for
Bugzilla
#
7635
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
7635
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Foo
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Foo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
theproto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Foo
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
theproto
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
instanceof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
theproto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Foo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
S
function
Foo
(
)
{
}
;
theproto
=
{
}
;
Foo
.
prototype
=
theproto
;
theproto
instanceof
Foo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
instanceof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
theproto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Foo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Function
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
&
var
f
=
new
Function
(
)
;
f
instanceof
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
instanceof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
