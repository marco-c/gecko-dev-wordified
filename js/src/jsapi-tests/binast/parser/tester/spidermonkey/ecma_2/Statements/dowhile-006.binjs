<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedScriptGlobalScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
looping
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dowhile
-
006
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
do
.
.
.
while
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
EagerFunctionDeclaration
isAsync
isGenerator
name
length
directives
contents
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
looping
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
FunctionOrMethodContents
isThisCaptured
parameterScope
params
bodyScope
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
paramNames
hasDirectEval
isSimpleParameterList
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
-
-
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
EagerFunctionDeclaration
isAsync
isGenerator
name
length
directives
contents
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DoWhileObject
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
FunctionOrMethodContents
isThisCaptured
parameterScope
params
bodyScope
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
paramNames
hasDirectEval
isSimpleParameterList
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
loops
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loops
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
iterations
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loops
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loops
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
looping
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
looping
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
EagerFunctionDeclaration
isAsync
isGenerator
name
length
directives
contents
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
FunctionOrMethodContents
isThisCaptured
parameterScope
params
bodyScope
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
paramNames
hasDirectEval
isSimpleParameterList
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
result1
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
result2
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LabelledStatement
label
body
<
/
head
>
<
string
>
outie
<
/
string
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LabelledStatement
label
body
<
/
head
>
<
string
>
innie
<
/
string
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
DoWhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
looping
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
outie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
innie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
!
hit
code
after
loop
in
inner
loop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
breakIn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
!
hit
code
after
loop
in
outer
loop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
string
>
breakOut
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result2
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
