<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
exception
<
/
string
>
<
string
>
expect
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
lexical
-
020
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
JS1_4
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Future
Reserved
Words
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Failed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
No
exception
thrown
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Passed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedBlockScope
lexicallyDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
eval
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
const
=
true
;
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
const
=
true
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
(
threw
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
