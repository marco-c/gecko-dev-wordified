<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedScriptGlobalScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
RegExp
/
properties
-
001
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Properties
of
RegExp
Instances
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
(
?
:
)
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
.
*
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
*
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
\
d
]
{
5
}
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
\
d
]
{
5
}
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
\
S
]
?
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
\
S
]
?
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
<
/
string
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
<
/
string
>
<
string
>
gi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
a
-
zA
-
Z0
-
9
]
*
<
/
string
>
<
string
>
gm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
a
-
zA
-
Z0
-
9
]
*
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
x
|
y
|
z
<
/
string
>
<
string
>
gim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
x
|
y
|
z
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
u0051
<
/
string
>
<
string
>
im
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
\
u0051
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
x45
<
/
string
>
<
string
>
gm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
\
x45
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
097
<
/
string
>
<
string
>
gi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
\
097
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
EagerFunctionDeclaration
isAsync
isGenerator
name
length
directives
contents
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
FunctionOrMethodContents
isThisCaptured
parameterScope
params
bodyScope
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
paramNames
hasDirectEval
isSimpleParameterList
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedPositionalParameterName
index
name
isCaptured
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
declaredNames
hasDirectEval
<
/
head
>
<
list
>
<
tuple
>
<
head
>
AssertedDeclaredName
name
kind
isCaptured
<
/
head
>
<
string
>
S
<
/
string
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
test
=
=
RegExp
.
prototype
.
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
&
.
toString
=
=
RegExp
.
prototype
.
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
+
.
contructor
=
=
RegExp
.
prototype
.
constructor
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
constructor
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
constructor
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
compile
=
=
RegExp
.
prototype
.
compile
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
compile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
compile
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
exec
=
=
RegExp
.
prototype
.
exec
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
exec
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
exec
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
source
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
S
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
(
?
:
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
toString
(
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
S
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
global
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
ignoreCase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
ignoreCase
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
multiline
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
multiline
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
lastIndex
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
string
>
lastIndex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
