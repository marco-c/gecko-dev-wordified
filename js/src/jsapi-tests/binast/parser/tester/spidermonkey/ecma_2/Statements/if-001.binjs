<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
BUGNUMBER
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
a
<
/
string
>
<
string
>
b
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
for
-
001
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
The
if
statement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
148822
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
passed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
failed
:
a
=
b
should
return
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
if
(
a
=
b
)
where
a
and
b
are
both
equal
to
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
passed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
