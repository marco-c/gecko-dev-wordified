<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
A
<
/
string
>
<
string
>
B
<
/
string
>
<
string
>
BUGNUMBER
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
SwitchTest
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
/
list
>
<
list
>
L
<
string
>
A
<
/
string
>
<
string
>
B
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
m
"
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
switch
-
003
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
The
switch
statement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
315988
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
void
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
false
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
true
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
H
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
H
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
X
<
string
>
SwitchTest
<
/
string
>
<
string
>
expect
<
/
string
>
<
string
>
input
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
(
3
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchStatementWithDefault
discriminant
preDefaultCases
defaultCase
postDefaultCases
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
SwitchDefault
consequent
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
new
TRUE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
new
FALSE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
true
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
false
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
new
ZERO
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
new
ONE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
'
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
!
switch
with
no
breaks
:
input
is
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
