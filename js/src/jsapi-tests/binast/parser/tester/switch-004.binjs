<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
a
"
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
switch
-
003
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
The
switch
statement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
BUGNUMBER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
315988
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
n
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
n
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
prefix
argument
<
/
head
>
<
string
>
void
<
/
string
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NullLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
false
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
}
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
true
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
#
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SwitchTest
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
8
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchStatement
discriminant
cases
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
list
>
'
<
tuple
>
<
head
>
SwitchCase
consequent
<
/
head
>
<
list
>
m
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
B
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
TRUE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
FALSE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
NULL
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
true
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
list
>
k
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
false
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
TRUE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
list
>
k
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
FALSE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
ZERO
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
m
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
ONE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
list
>
i
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ONE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ZERO
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
!
switch
with
no
breaks
:
input
is
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
BINJS
:
CapturedNames
<
/
head
>
<
list
>
Z
<
string
>
A
<
/
string
>
<
string
>
B
<
/
string
>
<
string
>
BUGNUMBER
<
/
string
>
<
string
>
Boolean
<
/
string
>
<
string
>
FALSE
<
/
string
>
<
string
>
NULL
<
/
string
>
<
string
>
Number
<
/
string
>
<
string
>
ONE
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
String
<
/
string
>
<
string
>
SwitchTest
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
TRUE
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
ZERO
<
/
string
>
<
string
>
expect
<
/
string
>
<
string
>
input
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
list
>
<
list
>
;
<
string
>
A
<
/
string
>
<
string
>
B
<
/
string
>
<
string
>
Boolean
<
/
string
>
<
string
>
FALSE
<
/
string
>
<
string
>
NULL
<
/
string
>
<
string
>
Number
<
/
string
>
<
string
>
ONE
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TRUE
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
string
>
ZERO
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
