<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
expression
-
004
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
JS1_4
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Property
Accessors
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
OBJECT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Property
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
null
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NullLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
null
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Failed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
No
exception
thrown
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Passed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
TryStatement
block
handler
<
/
head
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
OBJECT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
param
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
LetDeclaredNames
<
/
head
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
8
Get
the
toString
value
of
an
object
whose
value
is
null
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
threw
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
expect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Property
<
/
string
>
<
/
tuple
>
<
list
>
/
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Number
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
BINJS
:
CapturedNames
<
/
head
>
<
list
>
<
string
>
Number
<
/
string
>
<
string
>
OBJECT
<
/
string
>
<
string
>
Property
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
String
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
exception
<
/
string
>
<
string
>
expect
<
/
string
>
<
string
>
number
<
/
string
>
<
string
>
object
<
/
string
>
<
string
>
result
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
string
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
toString
<
/
string
>
<
string
>
value
<
/
string
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
list
>
<
list
>
:
<
string
>
Number
<
/
string
>
<
string
>
String
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
