<
tuple
>
<
head
>
Script
scope
directives
statements
<
/
head
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
YUI
<
/
string
>
<
/
list
>
<
list
>
<
string
>
YUI
<
/
string
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_YUI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
I
)
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
string
>
args
<
/
string
>
<
string
>
gconf
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
instanceOf
<
/
string
>
<
string
>
l
<
/
string
>
<
/
list
>
<
list
>
#
<
string
>
instanceOf
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
%
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
instanceOf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
o
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
instanceof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
gconf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI_config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI_config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instanceOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
GlobalConfig
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
GlobalConfig
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
gconf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
gconf
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
J
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_setup
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_setup
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
instanceOf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instanceOf
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
ALREADY_DONE
<
/
string
>
<
string
>
APPLY_TO_AUTH
<
/
string
>
<
string
>
BASE
<
/
string
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
string
>
DOC_LABEL
<
/
string
>
<
string
>
NOOP
<
/
string
>
<
string
>
PERIOD
<
/
string
>
<
string
>
SLICE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
add
<
/
string
>
<
string
>
clobber
<
/
string
>
<
string
>
doc
<
/
string
>
<
string
>
docClass
<
/
string
>
<
string
>
docEl
<
/
string
>
<
string
>
getLoader
<
/
string
>
<
string
>
handleLoad
<
/
string
>
<
string
>
hasWin
<
/
string
>
<
string
>
instances
<
/
string
>
<
string
>
prop
<
/
string
>
<
string
>
proto
<
/
string
>
<
string
>
remove
<
/
string
>
<
string
>
time
<
/
string
>
<
string
>
win
<
/
string
>
<
/
list
>
<
list
>
<
string
>
ALREADY_DONE
<
/
string
>
<
string
>
APPLY_TO_AUTH
<
/
string
>
<
string
>
BASE
<
/
string
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
string
>
NOOP
<
/
string
>
<
string
>
PERIOD
<
/
string
>
<
string
>
SLICE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
clobber
<
/
string
>
<
string
>
doc
<
/
string
>
<
string
>
docEl
<
/
string
>
<
string
>
getLoader
<
/
string
>
<
string
>
handleLoad
<
/
string
>
<
string
>
hasWin
<
/
string
>
<
string
>
instances
<
/
string
>
<
string
>
remove
<
/
string
>
<
string
>
time
<
/
string
>
<
string
>
win
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
l
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
p
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
PERIOD
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BASE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
http
:
/
/
yui
.
yahooapis
.
com
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOC_LABEL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui3
-
js
-
enabled
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui3
-
css
-
stamp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NOOP
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SLICE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
slice
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
APPLY_TO_AUTH
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
.
xdrReady
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
.
xdrResponse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
SWF
.
eventHandler
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasWin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
window
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasWin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
window
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasWin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
time
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Date
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
getTime
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
g
<
string
>
capture
<
/
string
>
<
string
>
el
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
capture
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
T
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
addEventListener
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
addEventListener
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
capture
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
attachEvent
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
attachEvent
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
on
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
remove
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
g
<
string
>
capture
<
/
string
>
<
string
>
el
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
capture
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
removeEventListener
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
removeEventListener
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
capture
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
detachEvent
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
detachEvent
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
on
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
handleLoad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
windowLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
DOMReady
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasWin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
remove
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
window
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoad
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
getLoader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
Y
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
l
<
string
>
G_ENV
<
/
string
>
<
string
>
lCore
<
/
string
>
<
string
>
loader
<
/
string
>
<
string
>
mods
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
k
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
lCore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
loadType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
lCore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
q
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lCore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
loaderExtras
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
i
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lCore
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
clobber
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
r
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
F
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
ForInOfBinding
kind
binding
<
/
head
>
<
string
>
var
<
/
string
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ALREADY_DONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOC_LABEL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
d
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOC_LABEL
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docClass
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
5
.
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
aliases
<
/
string
>
<
string
>
attr
<
/
string
>
<
string
>
config
<
/
string
>
<
string
>
groups
<
/
string
>
<
string
>
loader
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
name
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NOOP
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
G
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clobber
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clobber
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clobber
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
string
>
contentWindow
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_yuid
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
~
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Env
<
/
string
>
<
string
>
G_ENV
<
/
string
>
<
string
>
Y
<
/
string
>
<
string
>
el
<
/
string
>
<
string
>
filter
<
/
string
>
<
string
>
prop
<
/
string
>
<
/
list
>
<
list
>
2
<
string
>
Env
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
7
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
b
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Yn
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loaderExtras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cdn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
BASE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
build
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_idx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_used
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_attached
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_uidx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_guidp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_BASE_RE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
L
(
?
:
\
?
(
?
:
[
^
&
]
*
&
)
*
(
[
^
&
]
*
)
)
?
\
b
(
simpleyui
|
yui
(
?
:
-
\
w
+
)
?
)
\
/
\
2
(
?
:
-
(
min
|
debug
)
)
?
\
.
js
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
parseBasePath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
8
<
string
>
pattern
<
/
string
>
<
string
>
src
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
R
<
string
>
filter
<
/
string
>
<
string
>
match
<
/
string
>
<
string
>
path
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pattern
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
a
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pattern
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
string
>
leftContext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
string
>
slice
<
/
string
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
?
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
getBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
getBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
pattern
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
nodes
<
/
string
>
<
string
>
parsed
<
/
string
>
<
string
>
path
<
/
string
>
<
string
>
src
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
W
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pattern
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
u
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
s
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementsByTagName
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cdn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
parseBasePath
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pattern
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
~
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parsed
<
/
string
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parsed
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
M
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_guidp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui_
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
time
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
^
a
-
z0
-
9_
]
+
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_YUI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_yidx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_uidx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_uidx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
s
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
stamp
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
constructor
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
bootstrap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cacheUse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
debug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
throwFail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
useBrowserConsole
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
useNativeES5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Function
<
/
string
>
<
/
tuple
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
return
this
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementById
<
/
string
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
div
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
innerHTML
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
div
id
=
"
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
M
"
style
=
"
position
:
absolute
!
important
;
visibility
:
hidden
!
important
"
>
<
/
div
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
firstChild
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
body
<
/
string
>
<
/
tuple
>
<
string
>
appendChild
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docEl
<
/
string
>
<
/
tuple
>
<
string
>
firstChild
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementById
<
/
string
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementById
<
/
string
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS_STAMP_EL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
US
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
getBase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_BASE_RE
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
mindebug
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
min
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
loaderPath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
loaderPath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
/
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_setup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
string
>
Y
<
/
string
>
<
string
>
core
<
/
string
>
<
string
>
extras
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
mods
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
(
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
extras
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
core
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
getLoader
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
applyTo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
O
<
string
>
args
<
/
string
>
<
string
>
id
<
/
string
>
<
string
>
method
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
f
<
string
>
i
<
/
string
>
<
string
>
instance
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
nest
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
APPLY_TO_AUTH
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
:
applyTo
not
allowed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
warn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
instance
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instance
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
h
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instance
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nest
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
applyTo
not
found
:
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
warn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instance
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
l
<
string
>
details
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
version
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
applied
<
/
string
>
<
string
>
env
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
inst
<
/
string
>
<
string
>
loader
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
versions
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
x
(
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
applied
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
inst
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
inst
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
applied
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
inst
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
applied
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
inst
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
inst
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
moot
<
/
string
>
<
string
>
r
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
string
>
after
<
/
string
>
<
string
>
aliases
<
/
string
>
<
string
>
c
<
/
string
>
<
string
>
cache
<
/
string
>
<
string
>
def
<
/
string
>
<
string
>
details
<
/
string
>
<
string
>
done
<
/
string
>
<
string
>
go
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
loader
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
use
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
moot
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
&
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_attached
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
~
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
moot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
moot
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
k
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
skin
-
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
w
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
message
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
NOT
loaded
:
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
warn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
[
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
message
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Found
:
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
"
(
was
reported
as
missing
earlier
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
warn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
H
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
throwFail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
v
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Attach
error
:
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_delayCallback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
5
<
string
>
cb
<
/
string
>
<
string
>
until
<
/
string
>
<
/
list
>
<
list
>
5
<
string
>
cb
<
/
string
>
<
string
>
until
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
string
>
Y
<
/
string
>
<
string
>
mod
<
/
string
>
<
/
list
>
<
list
>
2
<
string
>
Y
<
/
string
>
<
string
>
mod
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cb
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
;
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
args
<
/
string
>
<
/
list
>
<
list
>
<
string
>
args
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
on
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
string
>
delayUntil
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cb
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
until
<
/
string
>
<
/
tuple
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Env
<
/
string
>
<
string
>
Y
<
/
string
>
<
string
>
args
<
/
string
>
<
string
>
callback
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
provisioned
<
/
string
>
<
/
list
>
<
list
>
:
<
string
>
args
<
/
string
>
<
string
>
callback
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
6
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SLICE
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
provisioned
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isFunction
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
pop
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
delayUntil
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_delayCallback
<
/
string
>
<
/
tuple
>
<
list
>
s
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
delayUntil
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
cacheUse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
F
<
tuple
>
<
head
>
WhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_attached
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
w
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
provisioned
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
provisioned
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_notify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ALREADY_DONE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
7
<
string
>
Y
<
/
string
>
<
string
>
response
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
L
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_notify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_notify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
W
<
string
>
args
<
/
string
>
<
string
>
callback
<
/
string
>
<
string
>
response
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
)
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
loadErrorFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
loadErrorFn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Missing
modules
:
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_missed
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
throwFail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
use
callback
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
:
<
string
>
args
<
/
string
>
<
string
>
callback
<
/
string
>
<
/
list
>
<
list
>
:
<
string
>
args
<
/
string
>
<
string
>
callback
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Env
<
/
string
>
<
string
>
G_ENV
<
/
string
>
<
string
>
Y
<
/
string
>
<
string
>
YArray
<
/
string
>
<
string
>
aliases
<
/
string
>
<
string
>
boot
<
/
string
>
<
string
>
config
<
/
string
>
<
string
>
fetchCSS
<
/
string
>
<
string
>
firstArg
<
/
string
>
<
string
>
handleBoot
<
/
string
>
<
string
>
handleLoader
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
loader
<
/
string
>
<
string
>
missing
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
process
<
/
string
>
<
string
>
queue
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
ret
<
/
string
>
<
string
>
used
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Env
<
/
string
>
<
string
>
G_ENV
<
/
string
>
<
string
>
Y
<
/
string
>
<
string
>
aliases
<
/
string
>
<
string
>
missing
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
process
<
/
string
>
<
string
>
queue
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
used
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
H
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
handleBoot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
used
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_used
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_loaderQueue
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
firstArg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
bootstrap
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
7
<
string
>
names
<
/
string
>
<
string
>
skip
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
use
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skip
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
K
?
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
;
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
7
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
8
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
names
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skip
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
used
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
used
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
used
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
handleLoader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
#
<
string
>
fromLoader
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
data
<
/
string
>
<
string
>
origMissing
<
/
string
>
<
string
>
redo
<
/
string
>
<
string
>
response
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
:
<
string
>
data
<
/
string
>
<
string
>
response
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Z
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fromLoader
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
3
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fromLoader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
not
dynamic
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
redo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
origMissing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
origMissing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
redo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
redo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
sort
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
origMissing
<
/
string
>
<
/
tuple
>
<
string
>
sort
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
redo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
redo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
i
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
L
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_notify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
L
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_notify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
response
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
string
>
size
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_useQueue
<
/
string
>
<
/
tuple
>
<
string
>
next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
firstArg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
*
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
G
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoader
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
getLoader
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
_boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
calculate
<
/
string
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
sorted
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
_boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
getLoader
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoader
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
missing
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
string
>
insert
<
/
string
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
boot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
bootstrapped
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
handleBoot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
string
>
running
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
bootstrapped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_bootstrapping
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_use
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_bootstrapping
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleBoot
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
G_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_bootstrapping
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
loaderPath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleBoot
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
_attach
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoader
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
namespace
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
string
>
arg
<
/
string
>
<
string
>
d
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
"
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
PERIOD
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
PERIOD
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
YAHOO
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NOOP
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
message
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NOOP
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dump
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
=
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
J
<
string
>
e
<
/
string
>
<
string
>
msg
<
/
string
>
<
string
>
src
<
/
string
>
<
/
list
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
string
>
Y
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
[
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
u
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
errorFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
errorFn
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThrowStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Error
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
message
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
guid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
pre
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
id
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pre
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_guidp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_uidx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pre
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pre
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
stamp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
7
<
string
>
o
<
/
string
>
<
string
>
readOnly
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
uid
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
readOnly
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
uniqueID
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
"
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
uniqueID
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
_yuid
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
guid
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
readOnly
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
_yuid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
uid
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
destroy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Event
<
/
string
>
<
/
tuple
>
<
string
>
_unload
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
instances
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
s
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
prop
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
GlobalConfig
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
GlobalConfig
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
applyConfig
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
GlobalConfig
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasWin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
window
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoad
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
handleLoad
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
remove
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
remove
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exports
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exports
<
/
string
>
<
/
tuple
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
setLoadHook
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
fn
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
R
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_getLoadHook
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
_getLoadHook
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
CACHED_DELIMITER
<
/
string
>
<
string
>
L
<
/
string
>
<
string
>
Lang
<
/
string
>
<
string
>
NATIVE_FN_REGEX
<
/
string
>
<
string
>
Native
<
/
string
>
<
string
>
O
<
/
string
>
<
string
>
Queue
<
/
string
>
<
string
>
STRING_PROTO
<
/
string
>
<
string
>
SUBREGEX
<
/
string
>
<
string
>
TOSTRING
<
/
string
>
<
string
>
TRIMREGEX
<
/
string
>
<
string
>
TRIM_LEFT_REGEX
<
/
string
>
<
string
>
TRIM_RIGHT_REGEX
<
/
string
>
<
string
>
TYPES
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
string
>
WHITESPACE
<
/
string
>
<
string
>
WHITESPACE_CLASS
<
/
string
>
<
string
>
YArray
<
/
string
>
<
string
>
forceEnum
<
/
string
>
<
string
>
hasEnumBug
<
/
string
>
<
string
>
hasOwn
<
/
string
>
<
string
>
hasProtoEnumBug
<
/
string
>
<
string
>
isObject
<
/
string
>
<
string
>
owns
<
/
string
>
<
/
list
>
<
list
>
8
<
string
>
CACHED_DELIMITER
<
/
string
>
<
string
>
L
<
/
string
>
<
string
>
Lang
<
/
string
>
<
string
>
NATIVE_FN_REGEX
<
/
string
>
<
string
>
Native
<
/
string
>
<
string
>
O
<
/
string
>
<
string
>
SUBREGEX
<
/
string
>
<
string
>
TOSTRING
<
/
string
>
<
string
>
TRIMREGEX
<
/
string
>
<
string
>
TRIM_LEFT_REGEX
<
/
string
>
<
string
>
TRIM_RIGHT_REGEX
<
/
string
>
<
string
>
TYPES
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
string
>
forceEnum
<
/
string
>
<
string
>
hasEnumBug
<
/
string
>
<
string
>
hasOwn
<
/
string
>
<
string
>
hasProtoEnumBug
<
/
string
>
<
string
>
isObject
<
/
string
>
<
string
>
owns
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
4
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
STRING_PROTO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TOSTRING
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TYPES
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
x
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
boolean
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
boolean
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
[
object
Function
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
function
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
[
object
RegExp
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
[
object
Array
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
[
object
Date
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
date
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
[
object
Error
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SUBREGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
{
\
s
*
(
[
^
|
}
]
+
?
)
\
s
*
(
?
:
\
|
(
[
^
}
]
*
)
)
?
\
s
*
\
}
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
WHITESPACE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
A
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
WHITESPACE_CLASS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
(
[
-
-
]
+
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TRIM_LEFT_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
^
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WHITESPACE_CLASS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TRIM_RIGHT_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WHITESPACE_CLASS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TRIMREGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRIM_LEFT_REGEX
<
/
string
>
<
/
tuple
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
|
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRIM_RIGHT_REGEX
<
/
string
>
<
/
tuple
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NATIVE_FN_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
&
\
{
\
s
*
\
[
(
?
:
native
code
|
function
)
\
]
\
s
*
\
}
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
fn
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
R
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
t
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
useNativeES5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NATIVE_FN_REGEX
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
I
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isBoolean
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
boolean
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isDate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
date
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Invalid
Date
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isNaN
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isFunction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
L
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
function
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isNull
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
"
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isNumber
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isFinite
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
5
<
string
>
failfn
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
t
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
failfn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
[
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
=
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
failfn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
function
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isFunction
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isString
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isUndefined
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isValue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
t
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
|
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchStatementWithDefault
discriminant
preDefaultCases
defaultCase
postDefaultCases
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
number
<
/
string
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isFinite
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
null
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
SwitchCase
test
consequent
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
SwitchDefault
consequent
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
now
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Date
<
/
string
>
<
/
tuple
>
<
string
>
now
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Date
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
getTime
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
sub
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
o
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SUBREGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
6
<
string
>
key
<
/
string
>
<
string
>
match
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isUndefined
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
trim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
STRING_PROTO
<
/
string
>
<
/
tuple
>
<
string
>
trim
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WHITESPACE
<
/
string
>
<
/
tuple
>
<
string
>
trim
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
trim
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
trim
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
*
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRIMREGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
trimLeft
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
STRING_PROTO
<
/
string
>
<
/
tuple
>
<
string
>
trimLeft
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WHITESPACE
<
/
string
>
<
/
tuple
>
<
string
>
trimLeft
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
H
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
trimLeft
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRIM_LEFT_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
trimRight
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
STRING_PROTO
<
/
string
>
<
/
tuple
>
<
string
>
trimRight
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WHITESPACE
<
/
string
>
<
/
tuple
>
<
string
>
trimRight
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
I
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
trimRight
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TRIM_RIGHT_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TYPES
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TYPES
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TOSTRING
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
null
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
E
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
W
<
string
>
force
<
/
string
>
<
string
>
startIndex
<
/
string
>
<
string
>
thing
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
7
<
string
>
len
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
c
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
slice
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
E
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
startIndex
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thing
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
create
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
array
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
hash
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
item
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
results
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
0
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
create
<
/
string
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
array
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
hash
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
item
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
results
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
results
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
forEach
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
forEach
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
forEach
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
p
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
8
<
string
>
keys
<
/
string
>
<
string
>
values
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
d
<
string
>
hash
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
vlen
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
vlen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
vlen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
from
<
/
string
>
<
string
>
value
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
from
<
/
string
>
<
string
>
value
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
len
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
z
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
I
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
*
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Math
<
/
string
>
<
/
tuple
>
<
string
>
floor
<
/
string
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Math
<
/
string
>
<
/
tuple
>
<
string
>
abs
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
r
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
numericSort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
a
<
/
string
>
<
string
>
b
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
some
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
some
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
some
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
Q
<
string
>
array
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YArray
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
^
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
string
>
tagName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
string
>
scrollTo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
l
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
next
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
string
>
shift
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
last
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
string
>
pop
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
5
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
size
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
.
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_q
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loaderQueue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_loaderQueue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Queue
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
S
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
CACHED_DELIMITER
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
__
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
cached
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
U
<
string
>
cache
<
/
string
>
<
string
>
refetch
<
/
string
>
<
string
>
source
<
/
string
>
<
/
list
>
<
list
>
U
<
string
>
cache
<
/
string
>
<
string
>
refetch
<
/
string
>
<
string
>
source
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
refetch
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
arg
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
key
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
|
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CACHED_DELIMITER
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arg
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
refetch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
refetch
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
getLocation
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
win
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
string
>
location
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
string
>
i
<
/
string
>
<
string
>
key
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
obj
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
(
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
n
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
r
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
merge
<
/
string
>
<
string
>
mode
<
/
string
>
<
string
>
overwrite
<
/
string
>
<
string
>
receiver
<
/
string
>
<
string
>
supplier
<
/
string
>
<
string
>
whitelist
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
alwaysOverwrite
<
/
string
>
<
string
>
exists
<
/
string
>
<
string
>
from
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
key
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
to
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
whitelist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
\
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
alwaysOverwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
whitelist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
p
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supplier
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
alwaysOverwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
whitelist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
whitelist
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
whitelist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
alwaysOverwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
alwaysOverwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
exists
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
_hasEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
to
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
from
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overwrite
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
_forceEnum
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
receiver
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
V
*
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
create
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
create
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
F
<
/
string
>
<
/
list
>
<
list
>
<
string
>
F
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
F
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
w
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
F
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
F
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
forceEnum
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
_forceEnum
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
isPrototypeOf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
propertyIsEnumerable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
toLocaleString
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
valueOf
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
_hasEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
valueOf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
propertyIsEnumerable
<
/
string
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
valueOf
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasProtoEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
_hasProtoEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
string
>
propertyIsEnumerable
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
4
<
string
>
key
<
/
string
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
I
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasOwn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
hasKey
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
_isNative
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasProtoEnumBug
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
c
<
string
>
i
<
/
string
>
<
string
>
key
<
/
string
>
<
string
>
keys
<
/
string
>
<
string
>
len
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
"
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
ThrowStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TypeError
<
/
string
>
<
/
tuple
>
<
list
>
y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
"
Object
.
keys
called
on
a
non
-
object
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasProtoEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
function
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
.
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasEnumBug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
forceEnum
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
forceEnum
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
f
<
string
>
i
<
/
string
>
<
string
>
keys
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
values
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
J
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
size
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
(
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
hasValue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
6
<
string
>
obj
<
/
string
>
<
string
>
value
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
N
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
values
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
value
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
i
<
string
>
fn
<
/
string
>
<
string
>
obj
<
/
string
>
<
string
>
proto
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
key
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
some
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
i
<
string
>
fn
<
/
string
>
<
string
>
obj
<
/
string
>
<
string
>
proto
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
key
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
proto
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
owns
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
getValue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
o
<
/
string
>
<
string
>
path
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
F
<
string
>
i
<
/
string
>
<
string
>
l
<
/
string
>
<
string
>
p
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isObject
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
setValue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
K
<
string
>
o
<
/
string
>
<
string
>
path
<
/
string
>
<
string
>
val
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
d
<
string
>
i
<
/
string
>
<
string
>
leafIdx
<
/
string
>
<
string
>
p
<
/
string
>
<
string
>
ref
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
c
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
leafIdx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
leafIdx
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
M
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
leafIdx
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
k
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
k
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
isEmpty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
obj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
O
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
obj
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
parseUA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
subUA
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
href
<
/
string
>
<
string
>
loc
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
nav
<
/
string
>
<
string
>
numberify
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
ua
<
/
string
>
<
string
>
win
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
subUA
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
C3
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
.
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
c
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parseFloat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
.
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
string
>
navigator
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
0
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
safari
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
air
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
phantomjs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ipad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
iphone
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ipod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
silk
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
accel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
webos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
caja
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
string
>
cajaVersion
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
secure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
winjs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Windows
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Windows
<
/
string
>
<
/
tuple
>
<
string
>
System
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
touchEnabled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subUA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
string
>
userAgent
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
loc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
string
>
location
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
loc
<
/
string
>
<
/
tuple
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
userAgent
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
secure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
string
>
toLowerCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
https
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
windows
|
win32
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
windows
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
macintosh
|
mac_powerpc
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
macintosh
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
android
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
symbos
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
symbos
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
linux
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
linux
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
rhino
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
rhino
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
KHTML
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
IEMobile
|
XBLWP7
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
windows
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Fennec
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
AppleWebKit
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
safari
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
PhantomJS
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
PhantomJS
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
phantomjs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Mobile
\
/
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
iPad
|
iPod
|
iPhone
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Apple
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
OS
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
F
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ipad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ipod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
iphone
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
iPad
|
iPod
|
iPhone
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
y
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
string
>
toLowerCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
NokiaN
[
^
\
/
]
*
|
webOS
\
/
\
d
\
.
\
d
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
webOS
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
8
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
WebOS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
webOS
\
/
(
[
^
\
s
]
*
)
;
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
webos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Android
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Mobile
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Android
(
[
^
\
s
]
*
)
;
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Silk
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Silk
\
/
(
[
^
\
s
]
*
)
\
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
silk
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
Q
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Accelerated
=
true
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
accel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
OPR
\
/
(
\
d
+
\
.
\
d
+
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
(
Chrome
|
CrMo
|
CriOS
)
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
d
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
safari
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
CrMo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
AdobeAIR
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
air
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Opera
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
!
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Opera
[
\
s
\
/
]
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Version
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Opera
Mobi
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Opera
Mobi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Opera
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Opera
Mini
[
^
;
]
*
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
!
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
MSIE
(
[
^
;
]
*
)
|
Trident
.
*
;
rv
:
(
[
0
-
9
.
]
+
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Gecko
\
/
(
[
^
\
s
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
rv
:
(
[
^
\
s
\
)
]
*
)
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
Mobile
|
Tablet
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
mobile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ffos
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
touchEnabled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ontouchstart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
msMaxTouchPoints
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nav
<
/
string
>
<
/
tuple
>
<
string
>
msMaxTouchPoints
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subUA
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
os
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
string
>
platform
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
numberify
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
process
<
/
string
>
<
/
tuple
>
<
string
>
versions
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
parseUA
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
compareVersions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
a
<
/
string
>
<
string
>
b
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
aPart
<
/
string
>
<
string
>
aParts
<
/
string
>
<
string
>
bPart
<
/
string
>
<
string
>
bParts
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
#
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
J
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
aParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
bParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
aParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Math
<
/
string
>
<
/
tuple
>
<
string
>
max
<
/
string
>
<
/
tuple
>
<
list
>
r
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aParts
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bParts
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parseInt
<
/
string
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parseInt
<
/
string
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bParts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isNaN
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isNaN
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
aPart
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bPart
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
qe
*
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
curve
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
easing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
node
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
xy
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
shape
-
transform
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
shape
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
content
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
lazy
-
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
sync
-
rest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
-
node
-
map
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
events
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
observable
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
sources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
category
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
time
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axes
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
category
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
time
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
offline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
charts
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
collection
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
-
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
invoke
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
hsl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
harmony
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
controller
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
json
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
text
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
io
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
function
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
jsonschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
xmlschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
arrayschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
textschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
polling
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
table
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
column
-
widths
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
message
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
mutable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
datasource
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
%
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
6
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
math
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
-
format
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
-
format
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
delegate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
frame
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
selection
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
exec
-
command
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
br
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
bidi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
tab
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
createlink
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mousewheel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
hover
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
outside
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
valuechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
tap
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
gestures
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
handlebars
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
j
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
handlebars
-
compiler
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
highlight
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
accentfold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
html5
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
xdr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
form
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
upload
-
iframe
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
queue
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
-
config
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
indexer
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
constrain
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
slider
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
value
-
range
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
clickable
-
rail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
range
-
slider
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
template
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
template
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
template
-
micro
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
htmlparser
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
uievents
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
v
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
string
>
Get
<
/
string
>
<
string
>
Lang
<
/
string
>
<
string
>
Transaction
<
/
string
>
<
/
list
>
<
list
>
v
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
string
>
Get
<
/
string
>
<
string
>
Lang
<
/
string
>
<
string
>
Transaction
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
t
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssOptions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
rel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
stylesheet
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
linkDoc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pollInterval
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
I
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
jsOptions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autopurge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
scriptDoc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
utf
-
8
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
purgethreshold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
4
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
REGEX_CSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
.
css
(
?
:
[
?
;
]
.
*
)
?
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
REGEX_JS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
.
js
(
?
:
[
?
;
]
.
*
)
?
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_insertCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_purgeNodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
transaction
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
~
<
string
>
i
<
/
string
>
<
string
>
id
<
/
string
>
<
string
>
item
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
pending
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pending
<
/
string
>
<
/
tuple
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pending
<
/
string
>
<
/
tuple
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
V
<
string
>
callback
<
/
string
>
<
string
>
options
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
z
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_load
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
V
<
string
>
callback
<
/
string
>
<
string
>
options
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
y
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_load
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
V
<
string
>
callback
<
/
string
>
<
string
>
options
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
Z
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_load
<
/
string
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_autoPurge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
"
<
string
>
threshold
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Y
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
threshold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
threshold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_purgeNodes
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
threshold
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_purge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_purgeNodes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_getEnv
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
3
<
string
>
doc
<
/
string
>
<
string
>
ua
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssFail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
"
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
compareVersions
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
R
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssLoad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
"
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
compareVersions
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
R
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
chrome
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
2
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
preservesScriptOrder
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_getTransaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
9
<
string
>
options
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
requests
<
/
string
>
<
string
>
url
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
qH
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
x
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
REGEX_CSS
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
REGEX_JS
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
jsOptions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
cssOptions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
guid
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
defaultView
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
parentWindow
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
a
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
o
<
string
>
callback
<
/
string
>
<
string
>
options
<
/
string
>
<
string
>
type
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
transaction
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
K
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
C
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
function
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
r
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
_onFinish
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_onTransactionFinish
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_getEnv
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_getTransaction
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
1
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_onTransactionFinish
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
item
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
1
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
shift
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
string
>
execute
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
item
<
/
string
>
<
/
tuple
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_purge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
nodes
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
x
<
string
>
index
<
/
string
>
<
string
>
isTransaction
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
purgeNodes
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
purgeNodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_purgeNodes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
isTransaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
purgeNodes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
WhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
string
>
pop
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
_yuiget_finished
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
parentNode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
parentNode
<
/
string
>
<
/
tuple
>
<
string
>
removeChild
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isTransaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
purgeNodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
purgeNodes
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
=
<
string
>
options
<
/
string
>
<
string
>
requests
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
string
>
_lastId
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_callbacks
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_reqsWaiting
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
tId
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
string
>
_lastId
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Transaction
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
K
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
new
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
msg
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pollTimer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clearTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pollTimer
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_reqsWaiting
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Aborted
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
execute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
!
<
string
>
callback
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
queue
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
requests
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
state
<
/
string
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
/
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
(
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_state
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_callbacks
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
callback
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
executing
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
executing
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Timeout
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_reqsWaiting
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
requests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
queue
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
purge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_purge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_createNode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
O
<
string
>
attrs
<
/
string
>
<
string
>
doc
<
/
string
>
<
string
>
name
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
Q
<
string
>
attr
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
testEl
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
attrs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
e
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
testEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
d
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
testEl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
div
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testEl
<
/
string
>
<
/
tuple
>
<
string
>
setAttribute
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
class
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testEl
<
/
string
>
<
/
tuple
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
for
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
htmlFor
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
class
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attrs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
1
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attrs
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
setAttribute
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CUSTOM_ATTRS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attrs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
attr
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
data
<
/
string
>
<
string
>
errors
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
options
<
/
string
>
<
string
>
thisObj
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
P
-
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_state
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
/
string
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_callbacks
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_callbacks
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_getEventData
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Timeout
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onTimeout
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onFailure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onFailure
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onSuccess
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onSuccess
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
thisObj
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
_onFinish
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
_onFinish
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_getEventData
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
req
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
R
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
abort
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
purge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
purge
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
request
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_getInsertBefore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
req
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
j
<
string
>
cache
<
/
string
>
<
string
>
doc
<
/
string
>
<
string
>
docStamp
<
/
string
>
<
string
>
el
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
"
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementById
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_insertCache
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
stamp
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementsByTagName
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementsByTagName
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
head
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
appendChild
<
/
string
>
<
/
tuple
>
<
list
>
h
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
createTextNode
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
lastChild
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docStamp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
getElementsByTagName
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
req
<
/
string
>
<
/
list
>
<
list
>
<
string
>
req
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
cssTimeout
<
/
string
>
<
string
>
env
<
/
string
>
<
string
>
insertBefore
<
/
string
>
<
string
>
isScript
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
nodeType
<
/
string
>
<
string
>
onError
<
/
string
>
<
string
>
onLoad
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
ua
<
/
string
>
<
/
list
>
<
list
>
<
string
>
cssTimeout
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
onError
<
/
string
>
<
string
>
onLoad
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
k
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_getInsertBefore
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cssTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
script
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
cssLoad
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
link
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_createNode
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodeType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
onError
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_progress
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Failed
to
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
onLoad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
W
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cssTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
L
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clearTimeout
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cssTimeout
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_progress
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
setAttribute
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
preservesScriptOrder
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
v
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
cssLoad
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
gecko
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
innerHTML
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
charset
"
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
"
;
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
import
"
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
"
;
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
setAttribute
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
"
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
string
>
documentMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
document
<
/
string
>
<
/
tuple
>
<
string
>
documentMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
"
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onreadystatechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
loaded
|
complete
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
readyState
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
q
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onreadystatechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onLoad
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
cssLoad
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_poll
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
.
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onerror
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onError
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onload
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onLoad
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onerror
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onError
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
onload
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onLoad
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
env
<
/
string
>
<
/
tuple
>
<
string
>
cssFail
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isScript
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
F
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cssTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onError
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
p
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
nodes
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
string
>
parentNode
<
/
string
>
<
/
tuple
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
q
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
shift
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_reqsWaiting
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_poll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
newReq
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
hasRules
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
isWebKit
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
nodeHref
<
/
string
>
<
string
>
pendingCSS
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
sheets
<
/
string
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
V
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
newReq
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_pendingCSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
isWebKit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
webkit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasRules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nodeHref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
sheets
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
newReq
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
newReq
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_pollTimer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_pollTimer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
isWebKit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
sheets
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
styleSheets
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sheets
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nodeHref
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
WhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
-
-
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
8
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sheets
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
href
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nodeHref
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
-
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_progress
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
hasRules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
sheet
<
/
string
>
<
/
tuple
>
<
string
>
cssRules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
-
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_progress
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pendingCSS
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_pollTimer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_poll
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
pollInterval
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_progress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
4
<
string
>
err
<
/
string
>
<
string
>
req
<
/
string
>
<
/
list
>
<
list
>
<
string
>
err
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
options
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
err
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
)
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
err
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
err
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
err
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
request
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
_yuiget_finished
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
finished
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
7
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_getEventData
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
autopurge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_autoPurge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
options
<
/
string
>
<
/
tuple
>
<
string
>
purgethreshold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
_purgeNodes
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_pending
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
-
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_reqsWaiting
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
>
<
string
>
add
<
/
string
>
<
string
>
feature_tests
<
/
string
>
<
/
list
>
<
list
>
&
<
string
>
feature_tests
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
namespace
<
/
string
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
\
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
K
<
string
>
cat
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
all
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
5
<
string
>
args
<
/
string
>
<
string
>
cat
<
/
string
>
<
/
list
>
<
list
>
5
<
string
>
args
<
/
string
>
<
string
>
cat
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
9
<
string
>
cat_o
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
string
>
result
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
n
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
k
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
:
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
;
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
N
<
string
>
args
<
/
string
>
<
string
>
cat
<
/
string
>
<
string
>
name
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
cat_o
<
/
string
>
<
string
>
feature
<
/
string
>
<
string
>
result
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
ua
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
e
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature_tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat_o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isUndefined
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
args
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
feature
<
/
string
>
<
/
tuple
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
!
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
-
native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
5
<
string
>
doc
<
/
string
>
<
string
>
node
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
G
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
MozTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
WebkitTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
#
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
-
keys
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
gestures
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
touchEnabled
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
X
#
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
\
"
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
DOCUMENT
<
/
string
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
string
>
WINDOW
<
/
string
>
<
string
>
addFeature
<
/
string
>
<
string
>
ret
<
/
string
>
<
string
>
testFeature
<
/
string
>
<
/
list
>
<
list
>
a
<
string
>
DOCUMENT
<
/
string
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
string
>
WINDOW
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
m
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
computedStyle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
getComputedStyle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
computedStyle
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
4
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
instead
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
imp
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
{
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Events
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2
.
0
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
m
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
6
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
q
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
r
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useCanvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
7
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
y
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
canvas
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
r
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useCanvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
8
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useSVG
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
9
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
svg
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useSVG
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
10
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
vml
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
\
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
11
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
vml
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
\
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
12
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
docMode
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
}
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
documentMode
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
onhashchange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
13
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
14
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
-
shim
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
string
>
Native
<
/
string
>
<
string
>
_JSON
<
/
string
>
<
string
>
nativeSupport
<
/
string
>
<
string
>
workingNative
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
string
>
JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
object
JSON
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
useNativeJSONParse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
k
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
workingNative
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
!
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ok
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
parse
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
{
"
ok
"
:
false
}
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
workingNative
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
ok
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
8
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
15
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
;
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
-
shim
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
[
<
string
>
Native
<
/
string
>
<
string
>
_JSON
<
/
string
>
<
string
>
nativeSupport
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
H
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
string
>
JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
object
JSON
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
useNativeJSONStringify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
stringify
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
16
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
17
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
css2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
9
<
string
>
DOCUMENT
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
W
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
X
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querySelectorAll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
18
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
-
timer
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
R
<
string
>
DOCUMENT
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
%
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
MozTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
WebkitTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
19
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
E
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
20
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
jsonp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
h
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
21
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
22
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
SPLIT_REGEX
<
/
string
>
<
/
list
>
<
list
>
<
string
>
SPLIT_REGEX
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SPLIT_REGEX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
[
]
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
namespace
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Intl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
a
:
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lookupBestLang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
R
<
string
>
availableLanguages
<
/
string
>
<
string
>
preferredLanguages
<
/
string
>
<
/
list
>
<
list
>
+
<
string
>
availableLanguages
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
index
<
/
string
>
<
string
>
language
<
/
string
>
<
string
>
result
<
/
string
>
<
string
>
scan
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
availableLanguages
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
V5
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
!
<
string
>
language
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
scan
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
{
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
availableLanguages
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
toLowerCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
availableLanguages
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
toLowerCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
availableLanguages
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isString
<
/
string
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SPLIT_REGEX
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
v
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
preferredLanguages
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
*
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
WhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Q
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
scan
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
a
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
lastIndexOf
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
substring
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
charAt
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
6
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
language
<
/
string
>
<
/
tuple
>
<
string
>
substring
<
/
string
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
m
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
w
<
string
>
INSTANCE
<
/
string
>
<
string
>
LEVELS
<
/
string
>
<
string
>
LOGEVENT
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
/
list
>
<
list
>
w
<
string
>
INSTANCE
<
/
string
>
<
string
>
LEVELS
<
/
string
>
<
string
>
LOGEVENT
<
/
string
>
<
string
>
UNDEFINED
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
g
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
LOGEVENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
:
log
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
LEVELS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
debug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
warn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
g
<
string
>
cat
<
/
string
>
<
string
>
msg
<
/
string
>
<
string
>
silent
<
/
string
>
<
string
>
src
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
string
>
bail
<
/
string
>
<
string
>
c
<
/
string
>
<
string
>
excl
<
/
string
>
<
string
>
f
<
/
string
>
<
string
>
incl
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
minlevel
<
/
string
>
<
string
>
publisher
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
silent
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
S
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
g
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
excl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
minlevel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
fire
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
globalEvents
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
debug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
G
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
excl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
logExclude
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
logInclude
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
incl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
excl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
excl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
excl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
logLevel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
logLevel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
debug
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
minlevel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LEVELS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
logLevel
<
/
string
>
<
/
tuple
>
<
string
>
toLowerCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LEVELS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LEVELS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
minlevel
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
bail
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
>
&
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
useBrowserConsole
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
:
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isFunction
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
logFn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
logFn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
J
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LEVELS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
UNDEFINED
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
opera
<
/
string
>
<
/
tuple
>
<
string
>
postError
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
silent
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
string
>
getEvent
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LOGEVENT
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
string
>
publish
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LOGEVENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
broadcast
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
publisher
<
/
string
>
<
/
tuple
>
<
string
>
fire
<
/
string
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
LOGEVENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cat
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
src
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
string
>
message
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
Z
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
string
>
log
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INSTANCE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
NO_ARGS
<
/
string
>
<
/
list
>
<
list
>
<
string
>
NO_ARGS
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
5
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NO_ARGS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
data
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
periodic
<
/
string
>
<
string
>
when
<
/
string
>
<
/
list
>
<
list
>
3
<
string
>
data
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
p
<
string
>
cancelled
<
/
string
>
<
string
>
id
<
/
string
>
<
string
>
method
<
/
string
>
<
string
>
wrapper
<
/
string
>
<
/
list
>
<
list
>
T
<
string
>
cancelled
<
/
string
>
<
string
>
id
<
/
string
>
<
string
>
method
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
periodic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isUndefined
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NO_ARGS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
~
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cancelled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isString
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
wrapper
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cancelled
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
method
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NO_ARGS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
periodic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setInterval
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
wrapper
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
setTimeout
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
wrapper
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
interval
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
periodic
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cancel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cancelled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
interval
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
E
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clearInterval
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
clearTimeout
<
/
string
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
later
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
(
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
\
<
string
>
CSS
<
/
string
>
<
string
>
DEFAULT_SKIN
<
/
string
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
string
>
GLOBAL_LOADED
<
/
string
>
<
string
>
INTL
<
/
string
>
<
string
>
JS
<
/
string
>
<
string
>
L
<
/
string
>
<
string
>
MAX_URL_LENGTH
<
/
string
>
<
string
>
META
<
/
string
>
<
string
>
NOT_FOUND
<
/
string
>
<
string
>
NO_REQUIREMENTS
<
/
string
>
<
string
>
ON_PAGE
<
/
string
>
<
string
>
ROOT_LANG
<
/
string
>
<
string
>
SKIN_PREFIX
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
YObject
<
/
string
>
<
string
>
_path
<
/
string
>
<
string
>
_queue
<
/
string
>
<
string
>
modulekey
<
/
string
>
<
string
>
oeach
<
/
string
>
<
string
>
yArray
<
/
string
>
<
/
list
>
<
list
>
>
<
string
>
CSS
<
/
string
>
<
string
>
DEFAULT_SKIN
<
/
string
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
string
>
GLOBAL_LOADED
<
/
string
>
<
string
>
INTL
<
/
string
>
<
string
>
JS
<
/
string
>
<
string
>
L
<
/
string
>
<
string
>
MAX_URL_LENGTH
<
/
string
>
<
string
>
META
<
/
string
>
<
string
>
NOT_FOUND
<
/
string
>
<
string
>
NO_REQUIREMENTS
<
/
string
>
<
string
>
ON_PAGE
<
/
string
>
<
string
>
ROOT_LANG
<
/
string
>
<
string
>
SKIN_PREFIX
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
YObject
<
/
string
>
<
string
>
_path
<
/
string
>
<
string
>
_queue
<
/
string
>
<
string
>
oeach
<
/
string
>
<
string
>
yArray
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
A
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
BUILD
<
/
string
>
<
string
>
CDN_BASE
<
/
string
>
<
string
>
COMBO_BASE
<
/
string
>
<
string
>
GALLERY_VERSION
<
/
string
>
<
string
>
META
<
/
string
>
<
string
>
ROOT
<
/
string
>
<
string
>
TNT
<
/
string
>
<
string
>
TNT_VERSION
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
YUI2_VERSION
<
/
string
>
<
string
>
galleryUpdate
<
/
string
>
<
string
>
groups
<
/
string
>
<
string
>
yui2Update
<
/
string
>
<
/
list
>
<
list
>
<
string
>
BUILD
<
/
string
>
<
string
>
CDN_BASE
<
/
string
>
<
string
>
COMBO_BASE
<
/
string
>
<
string
>
GALLERY_VERSION
<
/
string
>
<
string
>
TNT
<
/
string
>
<
string
>
TNT_VERSION
<
/
string
>
<
string
>
YUI2_VERSION
<
/
string
>
<
string
>
groups
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
*
s
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
F
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
BUILD
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
build
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ROOT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
CDN_BASE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
GALLERY_VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
gallery
-
2013
.
08
.
22
-
21
-
03
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TNT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2in3
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
TNT_VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
4
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
YUI2_VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2
.
9
.
0
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CDN_BASE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
combo
?
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ROOT
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
sam
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
assets
/
skins
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
skin
.
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
5
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
-
context
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
yui2Update
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
P
<
string
>
config
<
/
string
>
<
string
>
tnt
<
/
string
>
<
string
>
yui2
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
P
<
string
>
base
<
/
string
>
<
string
>
combo
<
/
string
>
<
string
>
root
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
tnt
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
l
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TNT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tnt
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
TNT_VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI2_VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
BUILD
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CDN_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
combo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
combo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
galleryUpdate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
7
<
string
>
config
<
/
string
>
<
string
>
tag
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
P
<
string
>
base
<
/
string
>
<
string
>
combo
<
/
string
>
<
string
>
root
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
tag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GALLERY_VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
BUILD
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CDN_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
combo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
combo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
galleryUpdate
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
gallery
-
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
/
gallery
-
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
gallerycss
-
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
COMBO_BASE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yui2Update
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
u
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui2
-
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
me
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
R
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
j
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
-
skin
|
reset
|
fonts
|
grids
|
base
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
.
js
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
css
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
me
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
/
yui2
-
skin
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
assets
/
skins
/
sam
/
yui2
-
skin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
galleryUpdate
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yui2Update
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
#
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NOT_FOUND
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NO_REQUIREMENTS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
MAX_URL_LENGTH
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
GLOBAL_LOADED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_loaded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
INTL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DEFAULT_SKIN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
sam
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ROOT_LANG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
YObject
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
oeach
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YObject
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_loaderQueue
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
SKIN_PREFIX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
skin
-
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
modulekey
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
h
<
string
>
dir
<
/
string
>
<
string
>
file
<
/
string
>
<
string
>
nomin
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
path
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
dir
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
file
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nomin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
C
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
dir
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
file
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nomin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
min
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CompoundAssignmentExpression
operator
binding
expression
<
/
head
>
<
string
>
+
=
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_cssLoaded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_cssLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
Q
&
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
modulekey
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
string
>
md5
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
string
>
substr
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
4
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
&
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
MAX_URL_LENGTH
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
forceMap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
allowRollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
s
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
meta
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_internal
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_populateCache
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_LOADED
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_inspectPage
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_internal
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
forceMap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
tests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
^
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
tests
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
sorted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
tested
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_resetModules
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
!
)
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_populateCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
j
<
string
>
cache
<
/
string
>
<
string
>
defaults
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
*
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
META
<
/
string
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_conditions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
F
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_resetModules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
details
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
M
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
)
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
_reset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
supercedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
langCache
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
skinCache
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
REGEX_CSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralRegExpExpression
pattern
flags
<
/
head
>
<
string
>
\
.
css
(
?
:
[
?
;
]
.
*
)
?
<
/
string
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
FILTER_DEFS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
N
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
RAW
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
searchExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
min
\
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
replaceStr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
DEBUG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
searchExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
min
\
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
replaceStr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
debug
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
COVERAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
searchExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
min
\
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
replaceStr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
coverage
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_inspectPage
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
mr
<
/
string
>
<
string
>
req
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
-
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
E
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
8
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
isCSSLoaded
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
!
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
_inspected
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mr
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
req
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
_inspected
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
6
<
string
>
mod1
<
/
string
>
<
string
>
mod2
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
after_map
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
info
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
other
<
/
string
>
<
string
>
rm
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
7
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
rm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
other
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
other
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
rm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
other
<
/
string
>
<
/
tuple
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_requires
<
/
string
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod1
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_requires
<
/
string
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
rm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
rm
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
other
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
other
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
string
>
f
<
/
string
>
<
string
>
group
<
/
string
>
<
string
>
groupName
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
val
<
/
string
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
I
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
H
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3G
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
t
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
I
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
!
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addGroup
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addAlias
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addAlias
<
/
string
>
<
/
tuple
>
<
list
>
A
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
gallery
<
/
string
>
<
/
tuple
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2in3
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
string
>
update
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2in3
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
yui2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
val
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isString
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
string
>
toUpperCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filterName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
FILTER_DEFS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
DEBUG
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dump
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filterName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
coverage
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filterName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
COVERAGE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
coverage
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
coverage
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
coverage
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
L
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
coverage
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
mod
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
FILTER_DEFS
<
/
string
>
<
/
tuple
>
<
string
>
COVERAGE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filterName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
RAW
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
FILTER_DEFS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
filterName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
formatSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
5
<
string
>
mod
<
/
string
>
<
string
>
skin
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
O
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
SKIN_PREFIX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
-
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
P
<
string
>
mod
<
/
string
>
<
string
>
parent
<
/
string
>
<
string
>
skin
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
ext
<
/
string
>
<
string
>
info
<
/
string
>
<
string
>
mdef
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
nmod
<
/
string
>
<
string
>
pkg
<
/
string
>
<
string
>
sinf
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
parent
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
)
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
I
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
sinf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
formatSkin
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
6
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sinf
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
parent
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sinf
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
/
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
.
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nmod
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nmod
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mdef
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
addAlias
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
5
<
string
>
name
<
/
string
>
<
string
>
use
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
addGroup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
name
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
b
<
string
>
i
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
l
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
~
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
name
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
i
<
string
>
conditions
<
/
string
>
<
string
>
flatLang
<
/
string
>
<
string
>
flatSup
<
/
string
>
<
string
>
g
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
l
<
/
string
>
<
string
>
lang
<
/
string
>
<
string
>
langs
<
/
string
>
<
string
>
overrides
<
/
string
>
<
string
>
p
<
/
string
>
<
string
>
packName
<
/
string
>
<
string
>
plug
<
/
string
>
<
string
>
plugins
<
/
string
>
<
string
>
ret
<
/
string
>
<
string
>
s
<
/
string
>
<
string
>
skinname
<
/
string
>
<
string
>
smod
<
/
string
>
<
string
>
subs
<
/
string
>
<
string
>
sup
<
/
string
>
<
string
>
supName
<
/
string
>
<
string
>
t
<
/
string
>
<
string
>
trigger
<
/
string
>
<
string
>
when
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
b
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
flatSup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
flatLang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
REGEX_CSS
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_path
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_internal
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
submodules
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
1
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
defaults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
M
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
langPack
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addLangPack
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
p
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
b
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
|
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
subs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_path
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
d4
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
.
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
langs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addLangPack
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
flatSup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
flatSup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
flatSup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
flatLang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
flatLang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
flatLang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ROOT_LANG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ROOT_LANG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addLangPack
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
flatSup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
supName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
sup
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
allowRollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Math
<
/
string
>
<
/
tuple
>
<
string
>
min
<
/
string
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plugins
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_path
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
plug
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
&
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
t
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
instead
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
a
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_renderedMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
_conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
what
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
T
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
what
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
typeof
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
what
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
what
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_explodeRollups
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_explodeRollups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
len2
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
m2
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
(
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
allowRollup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
C
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
h
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m2
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
r
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
t
<
string
>
c
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
E
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Lang
<
/
string
>
<
/
tuple
>
<
string
>
isArray
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
mod
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
add
<
/
string
>
<
string
>
adddef
<
/
string
>
<
string
>
cond
<
/
string
>
<
string
>
d
<
/
string
>
<
string
>
def
<
/
string
>
<
string
>
ftests
<
/
string
>
<
string
>
go
<
/
string
>
<
string
>
hash
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
info
<
/
string
>
<
string
>
intl
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
lang
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
old_mod
<
/
string
>
<
string
>
packName
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
reparse
<
/
string
>
<
string
>
skindef
<
/
string
>
<
string
>
skinmod
<
/
string
>
<
string
>
skinname
<
/
string
>
<
string
>
skinpar
<
/
string
>
<
string
>
testresults
<
/
string
>
<
/
list
>
<
list
>
g
<
string
>
d
<
/
string
>
<
string
>
ftests
<
/
string
>
<
string
>
hash
<
/
string
>
<
string
>
name
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
8
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NO_REQUIREMENTS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
_parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NO_REQUIREMENTS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
adddef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
details
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
old_mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ftests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
tests
<
/
string
>
<
/
tuple
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
reparse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
adddef
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
old_mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
adddef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
old_mod
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
old_mod
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
reparse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
langCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
skinCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
reparse
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
_parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
langCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
skinCache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INTL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filterRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
s
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
submodules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INTL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loadOptional
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INTL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
conditions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
6
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
_parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ftests
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
oeach
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testresults
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
6
<
string
>
id
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
condmod
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
condmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ftests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
condmod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ftests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ftests
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
condmod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
condmod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
g
!
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cond
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
def
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
go
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
5
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
y
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
aliases
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
7
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinpar
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
U
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skindef
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
isCSSLoaded
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_boot
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addSkin
<
/
string
>
<
/
tuple
>
<
list
>
M
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
isCSSLoaded
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_boot
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skinmod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
_parsed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
langPack
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Intl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Intl
<
/
string
>
<
/
tuple
>
<
string
>
lookupBestLang
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ROOT_LANG
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
unshift
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
INTL
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YObject
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded_map
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
expanded
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
isCSSLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
6
<
string
>
name
<
/
string
>
<
string
>
skip
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
e
<
string
>
el
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
ret
<
/
string
>
<
string
>
style
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skip
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
C
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skip
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
cssStampEl
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_cssLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
currentStyle
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
defaultView
<
/
string
>
<
/
tuple
>
<
string
>
getComputedStyle
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
string
>
display
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
none
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
#
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
string
>
className
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_cssLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
getProvides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
name
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
F
<
string
>
m
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
T
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
3
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NOT_FOUND
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
provides
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
h
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
each
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getProvides
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
provides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
provides
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
calculate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
o
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
)
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_setup
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_explode
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
allowRollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
*
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_rollup
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_explodeRollups
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_reduce
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_sort
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_addLangPack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
P
<
string
>
lang
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
packName
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
p
<
string
>
conf
<
/
string
>
<
string
>
existing
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
packPath
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
+
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
packPath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
existing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
existing
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
#
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packPath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_path
<
/
string
>
<
/
tuple
>
<
list
>
J
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
pkg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packPath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
langPack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
conf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_setup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
info
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
l
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
packName
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
3
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
e
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
dedupe
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ROOT_LANG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_addLangPack
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
packName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
GLOBAL_ENV
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getProvides
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
force
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_init
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
getLangPackName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
7
<
string
>
lang
<
/
string
>
<
string
>
mname
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
lang
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
_
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_explode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
done
<
/
string
>
<
string
>
expound
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
reqs
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
&
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
reqs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_explodeRollups
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
reqs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
expound
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
reqs
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
reqs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
reqs
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_patternTest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
8
<
string
>
mname
<
/
string
>
<
string
>
pname
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
string
>
indexOf
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
mname
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
found
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
p
<
/
string
>
<
string
>
patterns
<
/
string
>
<
string
>
pname
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
D0
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
u
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
patterns
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_patternTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
action
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
string
>
action
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
pname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
addModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mname
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
temp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
found
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
configFn
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_reduce
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
r
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
i
<
/
string
>
<
string
>
ignore
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
s
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
*
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
A
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loadType
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
yArray
<
/
string
>
<
/
tuple
>
<
string
>
hash
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ON_PAGE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
forceMap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ignore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
J
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
%
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
8
<
string
>
msg
<
/
string
>
<
string
>
success
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
onEnd
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
running
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
%
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_continue
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_onSuccess
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
failed
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
mod
<
/
string
>
<
string
>
msg
<
/
string
>
<
string
>
rreg
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
skipped
<
/
string
>
<
string
>
success
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
rreg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
requireRegistration
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
+
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
rreg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mod
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getProvides
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
onSuccess
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
notregistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
failed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skipped
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_onProgress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
3
<
string
>
i
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
N
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
v
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
7
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_onFailure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
o
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
f
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
msg
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
y
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
onFailure
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
error
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_finish
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_onTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
transaction
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
f
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
%
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
onTimeout
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
msg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
transaction
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
a
<
/
string
>
<
string
>
b
<
/
string
>
<
string
>
done
<
/
string
>
<
string
>
doneKey
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
k
<
/
string
>
<
string
>
l
<
/
string
>
<
string
>
moved
<
/
string
>
<
string
>
p
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
+
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YObject
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
moved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doneKey
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
moved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
doneKey
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doneKey
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_requires
<
/
string
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
a
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
splice
<
/
string
>
<
/
tuple
>
<
list
>
}
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
b
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
done
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doneKey
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
moved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
moved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
p
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
moved
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
sorted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
k
<
string
>
o
<
/
string
>
<
string
>
skipcalc
<
/
string
>
<
string
>
source
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
actions
<
/
string
>
<
string
>
comp
<
/
string
>
<
string
>
complete
<
/
string
>
<
string
>
deps
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
modules
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
string
>
actions
<
/
string
>
<
string
>
comp
<
/
string
>
<
string
>
complete
<
/
string
>
<
string
>
deps
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skipcalc
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_config
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
resolve
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skipcalc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
comp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
actions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_refetch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
t
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
fetchCSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
errs
<
/
string
>
<
string
>
fn
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
modName
<
/
string
>
<
string
>
o
<
/
string
>
<
string
>
resMods
<
/
string
>
<
string
>
u
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
Fl
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
actions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
errs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
resMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
request
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
request
<
/
string
>
<
/
tuple
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
.
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
errors
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
errs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_refetch
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
actions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
2
;
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_refetch
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_refetch
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
1
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_refetch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
deps
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
keys
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
resMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
resolve
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resMods
<
/
string
>
<
/
tuple
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
:
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resMods
<
/
string
>
<
/
tuple
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
I
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resMods
<
/
string
>
<
/
tuple
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
string
>
_cssLoaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
isCSSLoaded
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
sorted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_sort
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_loading
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
i
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
actions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
-
<
/
string
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
?
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
K
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onSuccess
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
F
&
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
#
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
cssAttributes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
U
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onProgress
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
T
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onTimeout
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onSuccess
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onSuccess
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onFailure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
failure
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onFailure
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
\
(
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Get
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
list
>
&
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
%
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
string
>
jsMods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
insertBefore
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
jsAttributes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
charset
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
timeout
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autopurge
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onProgress
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
U
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onProgress
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onTimeout
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
T
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onTimeout
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onSuccess
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
success
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onSuccess
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
onFailure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
d
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
failure
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
string
>
fn
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_onFailure
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
complete
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_continue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
running
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
size
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
'
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
running
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
next
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
insert
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
P
<
string
>
o
<
/
string
>
<
string
>
skipsort
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
list
>
P
<
string
>
o
<
/
string
>
<
string
>
skipsort
<
/
string
>
<
string
>
type
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
6
<
string
>
copy
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
6
<
string
>
copy
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
skipsort
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
j
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
copy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
merge
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
copy
<
/
string
>
<
/
tuple
>
<
string
>
require
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
delete
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
copy
<
/
string
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_queue
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
d
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_insert
<
/
string
>
<
/
tuple
>
<
list
>
Q
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
copy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
skipsort
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_continue
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loadNext
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
M
<
string
>
group
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
u
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
t
<
string
>
f
<
/
string
>
<
string
>
groupName
<
/
string
>
<
string
>
hasFilter
<
/
string
>
<
string
>
modFilter
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
S
!
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
hasFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
modFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
modFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
filter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
hasFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
hasFilter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
q
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isString
<
/
string
>
<
/
tuple
>
<
list
>
\
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modFilter
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
FILTER_DEFS
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modFilter
<
/
string
>
<
/
tuple
>
<
string
>
toUpperCase
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
modFilter
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
Q
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
replace
<
/
string
>
<
/
tuple
>
<
list
>
l
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
string
>
searchExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
f
<
/
string
>
<
/
tuple
>
<
string
>
replaceStr
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
_url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
O
<
string
>
base
<
/
string
>
<
string
>
name
<
/
string
>
<
string
>
path
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resolve
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
calc
<
/
string
>
<
string
>
s
<
/
string
>
<
/
list
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
addSingle
<
/
string
>
<
string
>
base
<
/
string
>
<
string
>
baseLen
<
/
string
>
<
string
>
comboBase
<
/
string
>
<
string
>
comboSep
<
/
string
>
<
string
>
comboSource
<
/
string
>
<
string
>
comboSources
<
/
string
>
<
string
>
frag
<
/
string
>
<
string
>
group
<
/
string
>
<
string
>
groupName
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
inserted
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
len
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
maxURLLength
<
/
string
>
<
string
>
mods
<
/
string
>
<
string
>
resCombos
<
/
string
>
<
string
>
resolved
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
tmpBase
<
/
string
>
<
string
>
type
<
/
string
>
<
string
>
u
<
/
string
>
<
string
>
url
<
/
string
>
<
string
>
urls
<
/
string
>
<
/
list
>
<
list
>
<
string
>
group
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
resolved
<
/
string
>
<
string
>
self
<
/
string
>
<
string
>
url
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
calc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
.
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
frag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
baseLen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
jsMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
loadType
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
addSingle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
overrides
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
skin
<
/
string
>
<
/
tuple
>
<
string
>
defaultSkin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DEFAULT_SKIN
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
ignoreRegistered
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_resetModules
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
calc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
calculate
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
sorted
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
addSingle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
m
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
"
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
j
!
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
NOT_FOUND
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_url
<
/
string
>
<
/
tuple
>
<
list
>
_
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
'
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
async
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
attributes
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
V
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
)
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
groups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
groupName
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addSingle
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
comboBase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isValue
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
z
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addSingle
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSource
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
O6
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
4
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
js
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
jsMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssMods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
'
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
inserted
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
combine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
ext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
;
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
frag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
L
<
/
string
>
<
/
tuple
>
<
string
>
isValue
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
root
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
path
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
fullpath
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
frag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
frag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
frag
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addSingle
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
N
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
UL
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
wB
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
JS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
CSS
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
:
?
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
baseLen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
I
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
MAX_URL_LENGTH
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
)
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
baseLen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
"
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
len
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
urls
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
maxURLLength
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
pop
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
u
<
/
string
>
<
/
tuple
>
<
string
>
join
<
/
string
>
<
/
tuple
>
<
list
>
[
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
comboSep
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
push
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
_filter
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
tmpBase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
group
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Mods
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
string
>
concat
<
/
string
>
<
/
tuple
>
<
list
>
W
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
mods
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
resCombos
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
resolved
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
cb
<
/
string
>
<
/
list
>
<
list
>
<
string
>
cb
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
5
<
string
>
out
<
/
string
>
<
string
>
self
<
/
string
>
<
/
list
>
<
list
>
<
string
>
self
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
R
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
cb
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cb
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
out
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
resolve
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
data
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
out
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
onEnd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
cb
<
/
string
>
<
/
tuple
>
<
string
>
apply
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
arguments
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
self
<
/
string
>
<
/
tuple
>
<
string
>
insert
<
/
string
>
<
/
tuple
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
M
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Loader
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
_rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
c
<
/
string
>
<
string
>
i
<
/
string
>
<
string
>
info
<
/
string
>
<
string
>
j
<
/
string
>
<
string
>
m
<
/
string
>
<
string
>
r
<
/
string
>
<
string
>
roll
<
/
string
>
<
string
>
rolled
<
/
string
>
<
string
>
s
<
/
string
>
<
string
>
smod
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
H
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
required
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
moduleInfo
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
rolled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
dirty
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
rollups
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
j
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
rollups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
rollup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
rollups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
0
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
rolled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForInStatement
left
right
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
rollups
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
rollups
<
/
string
>
<
/
tuple
>
<
string
>
hasOwnProperty
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
)
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
forceMap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getModule
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
supersedes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
rollup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
S
<
tuple
>
<
head
>
ContinueStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
loaded
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
forceMap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
p
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
j
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
smod
<
/
string
>
<
/
tuple
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UpdateExpression
isPrefix
operator
operand
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
c
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
string
>
rollup
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
roll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberAssignmentTarget
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
r
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
i
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
rolled
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ThisExpression
<
/
head
>
<
/
tuple
>
<
string
>
getRequires
<
/
string
>
<
/
tuple
>
<
list
>
T
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
m
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
rolled
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
P
<
tuple
>
<
head
>
BreakStatement
label
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
o
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
+
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
mix
<
/
string
>
<
/
tuple
>
<
list
>
|
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
modules
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
align
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
p
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
curve
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
easing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
node
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
xy
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
curve
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
xy
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
easing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
node
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
shape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
V
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
t
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
easing
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
matrix
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
shape
-
transform
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
shape
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
anim
-
xy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
content
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
lazy
-
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
sync
-
rest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
-
node
-
map
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
U
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
s
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pjax
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
-
content
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pjax
-
content
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
-
transitions
-
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
app
-
transitions
-
native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
-
native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
5
<
string
>
doc
<
/
string
>
<
string
>
node
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
:
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
G
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
MozTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
WebkitTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
app
-
transitions
-
css
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
parallel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
array
-
invoke
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
arraylist
-
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
arraylist
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
arraysort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
async
-
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
/
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
observable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
extras
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
complex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
events
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
observable
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
attribute
-
observable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
sources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
sources
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
valuechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
filters
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
&
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
highlighters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
highlighters
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
accentfold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
5
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
sources
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
css3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
shim
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
-
align
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
list
-
keys
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
#
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
-
keys
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
ios
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
android
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
autocomplete
-
sources
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
i
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
jsonp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
h
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
autocomplete
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
category
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
time
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axes
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
o
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
category
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
time
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
+
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
category
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
category
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
category
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
numeric
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
numeric
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
stacked
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
J
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
h
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
numeric
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
time
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
time
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
axis
-
time
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
#
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
observable
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
core
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
-
observable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
M
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
observable
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
base
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
button
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
button
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
button
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
button
-
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
button
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
button
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
button
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
offline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cache
-
offline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cache
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
calendar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
calendar
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
calendarnavigator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
calendar
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
de
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
AR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ja
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nb
-
NO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pt
-
BR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ru
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hans
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hans
-
CN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hant
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hant
-
HK
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
HANT
-
TW
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
}
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
math
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
calendarnavigator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
.
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
w
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
?
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
charts
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charts
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
:
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axes
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
pie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
marker
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
area
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
spline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
column
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
bar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
areaspline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combospline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
marker
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
area
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
spline
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
column
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
bar
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
areaspline
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combo
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combospline
-
stacked
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
charts
-
legend
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
charts
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
clickable
-
rail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
collection
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
-
add
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
invoke
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
hsl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
harmony
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
-
harmony
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
hsl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
-
hsl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
color
-
hsv
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ja
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
console
-
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
n
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
console
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
controller
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
:
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cookie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
createlink
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssbase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
-
context
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssbase
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssreset
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssfonts
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
-
context
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssfonts
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssfonts
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
+
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssnormalize
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssgrids
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
+
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssnormalize
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssgrids
-
responsive
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssnormalize
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
-
responsive
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssgrids
-
units
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
m
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssnormalize
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
d
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssgrids
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssnormalize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssnormalize
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssreset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
cssreset
-
context
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
type
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
css
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
json
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
text
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
-
array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
-
json
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
-
text
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dataschema
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
io
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
function
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
jsonschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
xmlschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
arrayschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
textschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
polling
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
arrayschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
#
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
cache
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cache
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
function
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
io
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
jsonschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
"
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
json
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
polling
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
textschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
"
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
text
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datasource
-
xmlschema
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dataschema
-
xml
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
table
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
column
-
widths
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
message
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
mutable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
datasource
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
?
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
table
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
column
-
widths
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
datasource
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
!
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datasource
-
local
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
foot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
formatters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
p
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
message
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
mutable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
paginator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
paginator
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
foot
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
paginator
-
templates
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
paginator
-
templates
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
template
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
column
-
widths
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
N
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatable
-
table
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
head
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatable
-
body
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
%
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
date
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
6
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
date
-
math
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
date
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ar
-
JO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ca
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ca
-
ES
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
da
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
da
-
DK
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
de
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
de
-
AT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
de
-
DE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
el
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
el
-
GR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
AU
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
CA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
GB
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
IE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
IN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
JO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
MY
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
NZ
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
PH
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
SG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
-
US
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
AR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
BO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
CL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
CO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
EC
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
ES
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
MX
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
PE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
PY
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
US
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
UY
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
-
VE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fi
-
FI
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
-
BE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
-
CA
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fr
-
FR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hi
-
IN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
id
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
id
-
ID
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
it
-
IT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ja
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ja
-
JP
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ko
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ko
-
KR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ms
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ms
-
MY
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nb
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nb
-
NO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nl
-
BE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nl
-
NL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pl
-
PL
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pt
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pt
-
BR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ro
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ro
-
RO
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ru
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ru
-
RU
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
sv
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
sv
-
SE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
th
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
th
-
TH
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tr
-
TR
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
vi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
vi
-
VN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hans
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hans
-
CN
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hant
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hant
-
HK
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
zh
-
Hant
-
TW
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
date
-
math
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
date
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
number
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
number
-
format
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
number
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
number
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
xml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
-
format
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
xml
-
format
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
datatype
-
xml
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
delegate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
ddm
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
ddm
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
V
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
t
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
throttle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
ddm
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
?
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
"
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
drop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
ddm
-
drop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
drop
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
gestures
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
gestures
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
touchEnabled
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
!
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
gestures
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
proxy
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dd
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dial
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lang
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
en
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
es
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
hu
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
core
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
deprecated
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
color
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dom
-
style
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
\
"
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
DOCUMENT
<
/
string
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
string
>
WINDOW
<
/
string
>
<
string
>
addFeature
<
/
string
>
<
string
>
ret
<
/
string
>
<
string
>
testFeature
<
/
string
>
<
/
list
>
<
list
>
a
<
string
>
DOCUMENT
<
/
string
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
string
>
WINDOW
<
/
string
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
m
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
Features
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
computedStyle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
getComputedStyle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
WINDOW
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
addFeature
<
/
string
>
<
/
tuple
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT_ELEMENT
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
opacity
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
testFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
computedStyle
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
dump
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
0
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
frame
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
selection
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
exec
-
command
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
br
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
bidi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
tab
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
createlink
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
frame
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
exec
-
command
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
selection
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
bidi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
br
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
lists
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
para
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
para
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
para
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
instead
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
para
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
selection
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
editor
-
tab
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
editor
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mousewheel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
hover
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
outside
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
valuechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
tap
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
h
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
imp
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
{
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
imp
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
Events
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2
.
0
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
contextmenu
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
custom
-
complex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
J
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
h
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
gestures
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
hover
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
mouseenter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
mousewheel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
move
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
outside
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
tap
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
}
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
touch
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
event
-
valuechange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
exec
-
command
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
\
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
frame
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
file
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
file
-
flash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
file
-
html5
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
file
-
flash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
file
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
frame
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
S
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
q
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
css3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
throttle
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
gesture
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
!
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
async
-
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
matrix
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
q
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
r
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useCanvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
canvas
-
default
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
y
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
canvas
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
r
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useCanvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
q
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useCanvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
group
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
svg
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useSVG
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
svg
-
default
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
svg
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
o
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
string
>
svg
<
/
string
>
<
string
>
useSVG
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
2
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
defaultGraphicEngine
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
svg
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
useSVG
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
vml
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
vml
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
\
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
graphics
-
vml
-
default
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
-
vml
-
default
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
<
string
>
DOCUMENT
<
/
string
>
<
string
>
canvas
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
\
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
createElement
<
/
string
>
<
/
tuple
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
implementation
<
/
string
>
<
/
tuple
>
<
string
>
hasFeature
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
http
:
/
/
www
.
w3
.
org
/
TR
/
SVG11
/
feature
#
BasicStructure
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
1
.
1
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
canvas
<
/
string
>
<
/
tuple
>
<
string
>
getContext
<
/
string
>
<
/
tuple
>
<
list
>
Y
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
2d
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
handlebars
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
j
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
handlebars
-
compiler
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
handlebars
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
handlebars
-
compiler
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
handlebars
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
highlight
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
accentfold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
highlight
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
highlight
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
accentfold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
highlight
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
html5
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
M
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
complex
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
d
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
html5
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
!
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
synthetic
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
-
hash
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
string
>
docMode
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
}
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
string
>
documentMode
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
onhashchange
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
win
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
docMode
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
hash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
history
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
7
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
imageloader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
intl
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
xdr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
form
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
upload
-
iframe
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
queue
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
stringify
-
simple
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
form
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
nodejs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
^
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
queue
-
promote
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
upload
-
iframe
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
io
-
xdr
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
datatype
-
xml
-
parse
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
-
parse
-
shim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
-
shim
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
}
<
string
>
Native
<
/
string
>
<
string
>
_JSON
<
/
string
>
<
string
>
nativeSupport
<
/
string
>
<
string
>
workingNative
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
string
>
JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
object
JSON
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
useNativeJSONParse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
0
<
string
>
k
<
/
string
>
<
string
>
v
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
workingNative
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
!
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
k
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ok
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
v
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
parse
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
{
"
ok
"
:
false
}
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
workingNative
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
string
>
ok
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
json
-
stringify
-
shim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
d
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
;
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
-
shim
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
[
<
string
>
Native
<
/
string
>
<
string
>
_JSON
<
/
string
>
<
string
>
nativeSupport
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
H
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
string
>
JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
string
>
call
<
/
string
>
<
/
tuple
>
<
list
>
X
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
[
object
JSON
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
_JSON
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
!
=
=
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
useNativeJSONStringify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
TryCatchStatement
body
catchClause
<
/
head
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
=
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Native
<
/
string
>
<
/
tuple
>
<
string
>
stringify
<
/
string
>
<
/
tuple
>
<
list
>
K
<
tuple
>
<
head
>
LiteralNumericExpression
value
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
binding
body
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
-
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
nativeSupport
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
jsonp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
jsonp
-
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
\
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
jsonp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
lazy
-
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
-
list
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
matrix
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
model
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
k
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
invoke
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
model
-
sync
-
rest
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
model
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
V
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
t
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
deprecated
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
delegate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
event
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
gesture
-
simulate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
2
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
{
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
flick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
focusmanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
0
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
load
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
menunav
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
2
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
{
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
focusmanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
scroll
-
info
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
5
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
overlay
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
R
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stdmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
-
align
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
-
constrain
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
paginator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
G
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
e
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
paginator
-
core
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
paginator
-
core
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
paginator
-
url
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
paginator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
panel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
.
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
w
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
autohide
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
buttons
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
modality
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
-
align
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stdmod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
parallel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pjax
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pjax
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pjax
-
content
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pjax
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
&
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pjax
-
content
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
io
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pjax
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pjax
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
-
config
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pluginhost
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
pluginhost
-
config
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
pluginhost
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
promise
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
?
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
timers
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
-
parse
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
-
parse
-
simple
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
-
stringify
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
querystring
-
stringify
-
simple
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
queue
-
promote
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
range
-
slider
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
(
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
value
-
range
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
clickable
-
rail
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
j
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
indexer
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
-
filter
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
-
indexer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
recordset
-
sort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraysort
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
recordset
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
constrain
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
+
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
t
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drag
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
constrain
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
resize
-
proxy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
resize
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
router
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
B
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
h
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querystring
-
parse
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
history
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
scrollbars
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
5
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
~
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
gestures
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
mousewheel
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
scrollview
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
-
list
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
w
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
-
paginator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
scrollview
-
scrollbars
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
selector
-
css2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
F
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
css2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
9
<
string
>
DOCUMENT
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
W
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
X
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
querySelectorAll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
selector
-
css3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
selector
-
css2
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
selector
-
native
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dom
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
area
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
fill
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
area
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
area
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
areaspline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
area
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
curve
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
areaspline
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
areaspline
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
bar
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
marker
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
histogram
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
bar
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
bar
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
graphics
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
candlestick
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
range
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
column
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
marker
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
histogram
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
column
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
column
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
combo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
r
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
plot
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
fill
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
combo
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combo
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
combospline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combo
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
curve
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
combospline
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
combo
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
curve
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
curve
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
fill
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
histogram
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
plot
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
line
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
line
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
line
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
marker
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
plot
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
marker
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
marker
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
ohlc
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
range
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
pie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
plot
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
plot
-
util
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
range
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
I
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
g
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
cartesian
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
spline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
line
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
curve
-
util
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
spline
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
series
-
spline
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
series
-
stacked
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
axis
-
stacked
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
shim
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
slider
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
d
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
value
-
range
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
clickable
-
rail
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
range
-
slider
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
slider
-
value
-
range
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
slider
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
sortable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
drop
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
proxy
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
sortable
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dd
-
scroll
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
sortable
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
stylesheet
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
substitute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
z
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
optional
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
dump
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
swf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
o
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
swfdetect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
swfdetect
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tabview
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
parent
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
child
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tabview
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
focusmanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tabview
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tabview
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
E
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tabview
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
template
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
template
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
template
-
micro
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
template
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
template
-
micro
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
?
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
]
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
escape
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
%
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
json
-
stringify
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
-
console
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
console
-
filters
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
data
-
accentfold
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
-
data
-
accentfold
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
-
data
-
wordbreak
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
text
-
wordbreak
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
array
-
extras
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
text
-
data
-
wordbreak
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
timers
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
C
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
transition
-
timer
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
-
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
-
timer
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
AssertedVarScope
lexicallyDeclaredNames
varDeclaredNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
/
list
>
<
list
>
R
<
string
>
DOCUMENT
<
/
string
>
<
string
>
node
<
/
string
>
<
string
>
ret
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
%
<
tuple
>
<
head
>
VariableDeclaration
kind
declarators
<
/
head
>
<
string
>
var
<
/
string
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
config
<
/
string
>
<
/
tuple
>
<
string
>
doc
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
DOCUMENT
<
/
string
>
<
/
tuple
>
<
string
>
documentElement
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralNullExpression
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclarator
binding
init
<
/
head
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
IfStatement
test
consequent
alternate
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Block
scope
statements
<
/
head
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
list
>
B
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentTargetIdentifier
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
|
|
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
MozTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
WebkitTransition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
in
<
/
string
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
string
>
style
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
ret
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
a
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
transition
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
-
node
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
labelable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
lazy
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
openable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
selectable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
tree
-
sortable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
tree
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
uploader
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
uploader
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
uploader
-
flash
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
uploader
-
flash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
swf
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
custom
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
file
-
flash
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
uploader
-
queue
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
uploader
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
simulate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
file
-
html5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
uploader
-
queue
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
uploader
-
queue
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
view
-
node
-
map
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
=
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
[
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
view
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
htmlparser
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
uievents
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
anim
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
anim
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
autohide
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
X
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
key
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
outside
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
O
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
attribute
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
pluginhost
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
classnamemanager
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
focus
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
style
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
-
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
ie
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
buttons
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
button
-
plugin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
cssbutton
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
stdmod
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
child
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
htmlparser
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
locale
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
modality
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
event
-
outside
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
parent
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
arraylist
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
screen
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
position
-
align
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
position
-
constrain
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
f
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
position
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
skin
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
stack
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
q
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
skinnable
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralBooleanExpression
value
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
stdmod
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
base
-
build
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
widget
-
uievents
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
node
-
event
-
delegate
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
widget
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
Z
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
oop
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yql
-
jsonp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
H
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
jsonp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
Q
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
h
<
tuple
>
<
head
>
ReturnStatement
expression
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
&
&
<
/
string
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
operand
<
/
head
>
<
string
>
!
<
/
string
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
UA
<
/
string
>
<
/
tuple
>
<
string
>
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
jsonp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
jsonp
-
url
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yql
-
nodejs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
nodejs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yql
-
winjs
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
condition
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
name
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
-
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
trigger
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yql
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
ua
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
winjs
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
when
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
after
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
yui
-
throttle
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
A
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
_
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
binding
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberAssignmentTarget
object
property
<
/
head
>
<
tuple
>
<
head
>
ComputedMemberExpression
object
expression
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
Env
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
string
>
version
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
string
>
md5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
fd7c67956df50e445f40d1668dd1dc80
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
D
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
requires
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
b
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
StaticMemberExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
IdentifierExpression
name
<
/
head
>
<
string
>
YUI
<
/
string
>
<
/
tuple
>
<
string
>
add
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionExpression
isAsync
isGenerator
parameterScope
bodyScope
name
params
body
<
/
head
>
<
tuple
>
<
head
>
AssertedParameterScope
parameterNames
capturedNames
hasDirectEval
<
/
head
>
<
list
>
3
<
string
>
NAME
<
/
string
>
<
string
>
Y
<
/
string
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
FormalParameters
items
rest
<
/
head
>
<
list
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
Y
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BindingIdentifier
name
<
/
head
>
<
string
>
NAME
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
_Null
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionBody
directives
statements
<
/
head
>
<
list
>
<
/
list
>
<
list
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
3
.
12
.
0
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ObjectExpression
properties
<
/
head
>
<
list
>
<
tuple
>
<
head
>
DataProperty
name
expression
<
/
head
>
<
tuple
>
<
head
>
LiteralPropertyName
value
<
/
head
>
<
string
>
use
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
get
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
features
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
intl
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
log
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
yui
-
later
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
base
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
rollup
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
LiteralStringExpression
value
<
/
head
>
<
string
>
loader
-
yui3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
