<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
*
Q
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
String
/
match
-
001
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
String
.
prototype
.
match
(
regexp
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
1234567890
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
N
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
3
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
y
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
34
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
34
/
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
343443444
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
34
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
34
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
34
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
\
d
{
1
}
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
d
{
1
}
/
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
123456abcde7890
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
1
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
2
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
3
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
4
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
5
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
6
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
7
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
8
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
9
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
0
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
\
d
{
2
}
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
d
{
2
}
/
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
123456abcde7890
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
{
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
12
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
34
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
56
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
78
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
90
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
9
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
\
D
{
2
}
<
/
string
>
<
string
>
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
d
{
2
}
/
g
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
123456abcde7890
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ab
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
cd
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
index
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
index
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
=
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
input
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
input
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
operator
argument
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
[
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
?
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
operator
argument
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
match
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_regexp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
[
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
match
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
O
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
regexp
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
BINJS
:
CapturedNames
<
/
head
>
<
list
>
<
string
>
AddGlobalRegExpCases
<
/
string
>
<
string
>
AddRegExpCases
<
/
string
>
<
string
>
AddTestCase
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
index
<
/
string
>
<
string
>
input
<
/
string
>
<
string
>
length
<
/
string
>
<
string
>
match
<
/
string
>
<
string
>
matches_array
<
/
string
>
<
string
>
regexp
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
str_regexp
<
/
string
>
<
string
>
string
<
/
string
>
<
string
>
test
<
/
string
>
<
/
list
>
<
list
>
<
string
>
AddTestCase
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
