<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
boolean
-
001
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
JS1_4
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Boolean
.
prototype
.
toString
(
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
No
exception
thrown
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Failed
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TO_STRING
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Boolean
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
TryStatement
block
handler
<
/
head
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
z
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
String
<
/
string
>
<
/
tuple
>
<
list
>
Z
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Not
a
Boolean
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TO_STRING
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
s
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
s
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
CatchClause
param
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
0
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Passed
!
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
LetDeclaredNames
<
/
head
>
<
list
>
<
string
>
e
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
e
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
8
Assigning
Boolean
.
prototype
.
toString
to
a
String
object
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
threw
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
exception
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
Passed
!
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
Boolean
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
String
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
TO_STRING
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
exception
<
/
string
>
<
string
>
prototype
<
/
string
>
<
string
>
result
<
/
string
>
<
string
>
s
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
toString
<
/
string
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
