<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
while
-
001
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
while
statement
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
DoWhile
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
pass
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
WhileStatement
test
body
<
/
head
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
i
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
fail
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BreakStatement
<
/
head
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
NewExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TestCase
<
/
string
>
<
/
tuple
>
<
list
>
q
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
while
statement
:
don
'
t
evaluate
statement
is
expression
is
false
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
pass
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
result
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
BINJS
:
CapturedNames
<
/
head
>
<
list
>
<
string
>
DoWhile
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
result
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
writeHeaderToLog
<
/
string
>
<
/
list
>
<
list
>
X
<
string
>
SECTION
<
/
string
>
<
string
>
TestCase
<
/
string
>
<
string
>
result
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
