<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
c
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
RegExp
/
constructor
-
001
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
(
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
AssignmentExpression
operator
left
right
<
/
head
>
<
string
>
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
getClassProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Object
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
prototype
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
toString
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
?
RegExp
.
prototype
.
getClassProperty
=
Object
.
prototype
.
toString
;
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
!
(
new
RegExp
(
)
)
.
getClassProperty
(
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
[
object
RegExp
]
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
getClassProperty
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
new
RegExp
(
)
)
.
source
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
?
:
)
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
source
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
a
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
new
RegExp
(
)
)
.
global
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
global
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
i
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
new
RegExp
(
)
)
.
ignoreCase
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
ignoreCase
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
new
RegExp
(
)
)
.
multiline
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BooleanLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
multiline
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
g
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
new
RegExp
(
)
)
.
lastIndex
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
re
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
lastIndex
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
AddTestCase
<
/
string
>
<
string
>
Object
<
/
string
>
<
string
>
RegExp
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
getClassProperty
<
/
string
>
<
string
>
global
<
/
string
>
<
string
>
ignoreCase
<
/
string
>
<
string
>
lastIndex
<
/
string
>
<
string
>
multiline
<
/
string
>
<
string
>
prototype
<
/
string
>
<
string
>
re
<
/
string
>
<
string
>
source
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
toString
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
