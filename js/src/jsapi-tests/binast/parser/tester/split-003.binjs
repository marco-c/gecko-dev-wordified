<
tuple
>
<
head
>
Program
body
BINJS
:
Scope
<
/
head
>
<
list
>
j
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
SECTION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ecma_2
/
String
/
split
-
003
.
js
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
VERSION
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
ECMA_2
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
TITLE
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
*
String
.
prototype
.
split
(
regexp
[
limit
]
)
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
startTest
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
1
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
d
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
O
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
n
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
prefix
argument
<
/
head
>
<
string
>
void
<
/
string
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
RegExpLiteral
pattern
flags
<
/
head
>
<
string
>
l
<
/
string
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
/
l
/
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
he
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
?
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
N
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
D
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
w
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
UnaryExpression
operator
prefix
argument
<
/
head
>
<
string
>
void
<
/
string
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hi
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
<
/
head
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
3
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
hello
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NewExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
RegExp
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
new
RegExp
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
undefined
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ArrayExpression
elements
<
/
head
>
<
list
>
v
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
h
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
e
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
l
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
o
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
test
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
9
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
W
!
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
constructor
=
=
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
constructor
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
alternate
consequent
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
operator
argument
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
[
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
:
<
string
>
limit
<
/
string
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
:
<
string
>
limit
<
/
string
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
FunctionDeclaration
id
params
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddLimitedSplitCases
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
%
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
y
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
constructor
=
=
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BooleanLiteral
value
<
/
head
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
=
=
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
constructor
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
Array
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
c
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
/
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
slimit
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ConditionalExpression
test
alternate
consequent
<
/
head
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
>
<
/
string
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
R
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
length
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
ForStatement
init
test
update
body
BINJS
:
Scope
<
/
head
>
<
tuple
>
<
head
>
VariableDeclaration
declarations
kind
<
/
head
>
<
list
>
<
tuple
>
<
head
>
VariableDeclarator
id
init
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
NumericLiteral
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
string
>
var
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
<
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
slimit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
UpdateExpression
operator
argument
<
/
head
>
<
string
>
+
+
<
/
string
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BlockStatement
body
BINJS
:
Scope
<
/
head
>
<
list
>
<
tuple
>
<
head
>
ExpressionStatement
expression
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
AddTestCase
<
/
string
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
BinaryExpression
operator
left
right
<
/
head
>
<
string
>
+
<
/
string
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
(
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
.
split
(
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
str_sep
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
)
[
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
StringLiteral
value
<
/
head
>
<
string
>
]
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split_array
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BracketExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
CallExpression
callee
arguments
<
/
head
>
<
tuple
>
<
head
>
DotExpression
object
property
<
/
head
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
string
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
split
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
list
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
separator
<
/
string
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
limit
<
/
string
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
tuple
>
<
head
>
Identifier
name
<
/
head
>
<
string
>
matches
<
/
string
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
<
/
head
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
<
string
>
matches
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
;
<
string
>
matches
<
/
string
>
<
string
>
slimit
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
<
/
head
>
<
list
>
;
<
string
>
matches
<
/
string
>
<
string
>
slimit
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
<
/
list
>
<
tuple
>
<
head
>
BINJS
:
Scope
BINJS
:
VarDeclaredNames
BINJS
:
CapturedNames
<
/
head
>
<
list
>
/
<
string
>
AddLimitedSplitCases
<
/
string
>
<
string
>
AddSplitCases
<
/
string
>
<
string
>
AddTestCase
<
/
string
>
<
string
>
Array
<
/
string
>
<
string
>
RegExp
<
/
string
>
<
string
>
SECTION
<
/
string
>
<
string
>
TITLE
<
/
string
>
<
string
>
VERSION
<
/
string
>
<
string
>
constructor
<
/
string
>
<
string
>
length
<
/
string
>
<
string
>
limit
<
/
string
>
<
string
>
separator
<
/
string
>
<
string
>
split
<
/
string
>
<
string
>
split_array
<
/
string
>
<
string
>
startTest
<
/
string
>
<
string
>
str_sep
<
/
string
>
<
string
>
string
<
/
string
>
<
string
>
test
<
/
string
>
<
string
>
undefined
<
/
string
>
<
/
list
>
<
list
>
>
<
string
>
AddTestCase
<
/
string
>
<
string
>
Array
<
/
string
>
<
/
list
>
<
/
tuple
>
<
/
tuple
>
