BINJS
[
GRAMMAR
]
identity
;
Y
<
(
IdentifierExpression
.
LiteralStringExpression
BinaryExpression
CallExpression
StaticMemberExpression
&
ExpressionStatement
"
BindingIdentifier
&
VariableDeclaration
VariableDeclarator
ArrayExpression
(
AssignmentExpression0LiteralNumericExpression4AssignmentTargetIdentifier8StaticMemberAssignmentTarget
Block
*
LiteralNullExpression0ComputedMemberExpression
.
LiteralRegExpExpression
AssertedVarScope
ReturnStatement
ForStatement
AssertedParameterScope0EagerFunctionDeclaration
IfStatement
*
ConditionalExpression
FunctionBody
FormalParameters
UpdateExpression
Script
[
STRINGS
]
identity
;
s
n
+
string
regexp
matches_array
s
length
matches
02134
match
str_regexp
re
0
AddTestCase
lastIndexOf
var
AddRegExpCases
limit
)
.
match
(
(
undefined
index
=
=
lastIndex
exec4
(
[
\
d
]
{
5
}
)
(
[
-
\
]
?
[
\
d
]
{
4
}
)
?
^
re
=
/
(
[
d
]
{
5
}
)
(
[
-
]
?
[
d
]
{
4
}
)
?
/
;
re
.
lastIndex
=
(
AddGlobalRegExpCases
TITLE
&
Boston
Mass
.
02134
)
[
)
.
length
)
>
]
VERSION
SECTION
|
|
+
+
<
g
input
ECMA_2
String
.
prototype
.
match
(
regexp
)
.
match
(
Boston
MA
02134
&
String
/
match
-
002
.
js
)
.
input
startTest2
/
(
[
d
]
{
5
}
)
(
[
-
]
?
[
d
]
{
4
}
)
?
/
4
/
(
[
d
]
{
5
}
)
(
[
-
]
?
[
d
]
{
4
}
)
?
/
g
)
.
index
.
exec
(
test
^
re
=
/
(
[
d
]
{
5
}
)
(
[
-
]
?
[
d
]
{
4
}
)
?
/
;
re
.
lastIndex
=
0
[
TREE
]
identity
;
:
&
4
H6F
&
H
\
F
T
6
V
0
:
b
8
&
4
0P
d
8
0
:
Z
l
&
2
&
2
&
?
2
?
&
j
.
(
&
6
(
4
0
J
*
.
*
X
(
"
>
"
f
(
(
"
^
R
2
B
*
N
8
L
"
<
D
"
"
.
4
&
6
4
0
J
*
.
*
h
.
(
"
>
2
B
*
N
8
L
"
<
D
"
"
