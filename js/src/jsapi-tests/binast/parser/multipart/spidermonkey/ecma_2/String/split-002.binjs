BINJS
[
GRAMMAR
]
identity
;
N
(
IdentifierExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
CallExpression
StaticMemberExpression
.
LiteralStringExpression
"
BindingIdentifier
(
AssignmentExpression4AssignmentTargetIdentifier
IfStatement
Block
VariableDeclarator
&
VariableDeclaration
ReturnStatement
NewExpression0LiteralBooleanExpression
<
ComputedMemberAssignmentTarget0ComputedMemberExpression
AssertedVarScope
AssertedParameterScope
FunctionBody0EagerFunctionDeclaration
FormalParameters
ForStatement
&
LiteralPropertyName
UpdateExpression
DataProperty
UnaryExpression
*
ConditionalExpression
WhileStatement
ObjectExpression
"
LabelledStatement
"
ContinueStatement
Script
BreakStatement8StaticMemberAssignmentTarget8CompoundAssignmentExpression
[
STRINGS
]
identity
;
+
length
A
separator
hello
var
*
CompareSplitWithLimit
i
n
q
S
=
=
split_item
CompareSplit
string
Number
R
split_1
limit
split_2
Math
reResult
p
l
s
splitlimit
<
cap
-
z
lim
r
SplitMatch
!
=
pow
string_split
undefined
.
split
(
AddTestCase
+
+
T
ToUint32
split
endIndex
sign
captures
__this
e
Array
abs
>
a
String
loop
)
[
RegExp
(
|
|
SECTION
]
prototype
VERSION
charAt
TITLE
slice
)
)
.
length
constructor
index
NaN
floor
o
hellothere
match
+
=
toString
test
ll
*
xTString
.
prototype
.
split
(
regexp
[
limit
]
)
void
h
"
POSITIVE_INFINITY
startTest
4ecma_2
/
String
/
split
-
002
.
js
boo
%
ECMA_2
[
TREE
]
identity
;
S
F
(
RF
t
~
z
H
t
z
~
.
H
h
J
xT
hxT
&
:
vC
?
&
:
vC
?
?
&
:
vC
?
&
:
vC
?
&
:
vC
?
Y
&
:
vC
?
:
&
:
vC
?
8
(
D
?
&
:
vC
?
&
:
vC
?
:
8
8
(
D
?
.
.
.
?
.
.
.
.
*
(
0
"
T
&
F
L
p
J
&
"
<
d
"
&
"
&
2
4
6
N
L
J
l
v
&
&
&
"
.
*
2
(
0
2
"
T
2
&
F
2
L
p
J
2
&
"
<
d
"
&
"
&
2
4
6
N
L
J
2
l
v
&
&
&
"
.
*
\
(
0
F
F0
\
h
\
H
<
8
(
D
?
?
<
R
0
H
n
<
H
0
:
B
:
"
Bj
>
"
0H
:
B
:
"
^
:
V
6
:
Z
B
^
P
P
<
^
>
"
6
Dj
?
&
6
<
?
P
P
.
*
(
>
*
0
n
*
*
H
"
f
8
*
?
2
?
4
*
6
N
f
f
&
*
84V
*
&
*
84Z
6
>
0
d
>
0
"
2
4
>
6
N
B
|
|
"
6
84V
>
84Z
6
.
*
(
X
R
R0
X
<
4
:
8
?
?
r
r
(
b
(
b
B
X
(
(
b
(
D
4
L
(
D
