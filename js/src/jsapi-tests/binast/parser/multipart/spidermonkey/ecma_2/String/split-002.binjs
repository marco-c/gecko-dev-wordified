BINJS
[
GRAMMAR
]
identity
;
N
(
IdentifierExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
CallExpression
StaticMemberExpression
.
LiteralStringExpression
"
BindingIdentifier
(
AssignmentExpression4AssignmentTargetIdentifier
IfStatement
Block
&
VariableDeclaration
VariableDeclarator
ReturnStatement
NewExpression0LiteralBooleanExpression0ComputedMemberExpression
<
ComputedMemberAssignmentTarget
AssertedVarScope
AssertedParameterScope
FunctionBody0EagerFunctionDeclaration
FormalParameters
DataProperty
ForStatement
&
LiteralPropertyName
UpdateExpression
*
ConditionalExpression
UnaryExpression
ObjectExpression
WhileStatement
BreakStatement
"
LabelledStatement
Script
"
ContinueStatement8StaticMemberAssignmentTarget8CompoundAssignmentExpression
[
STRINGS
]
identity
;
+
length
A
separator
hello
var
*
CompareSplitWithLimit
i
n
S
q
=
=
split_item
CompareSplit
Number
string
R
limit
split_1
split_2
Math
reResult
p
l
z
s
cap
splitlimit
-
<
undefined
r
pow
string_split
SplitMatch
lim
!
=
T
.
split
(
ToUint32
AddTestCase
+
+
split
__this
endIndex
abs
sign
captures
a
>
Array
e
String
)
)
.
length
SECTION
)
[
slice
prototype
TITLE
VERSION
(
loop
]
constructor
charAt
RegExp
|
|
o
index4ecma_2
/
String
/
split
-
002
.
js
ll
floor
+
=
"
POSITIVE_INFINITY
test
h
boo
toString
*
x
ECMA_2
hellothere
NaNTString
.
prototype
.
split
(
regexp
[
limit
]
)
startTest
match
void
%
[
TREE
]
identity
;
S
F
(
lDvNxB
DNB
H
l
x
v
.
<
h
J
rT
hrT
&
:
vC
?
&
:
vC
?
?
&
:
vC
?
&
:
vC
?
&
:
vC
?
Y
&
:
vC
?
<
&
:
vC
?
8
(
?
&
:
vC
?
&
:
vC
?
<
8
8
(
?
.
.
.
?
.
.
.
.
*
(
"
0
T
&
B
P
z
L
j
&
"
:
b
&
&
4
:
"
8
R
P
L
n
~
&
.
*
6
(
"
0
6
T
6
&
B
6
P
z
L
t
6
j
&
"
:
b
&
&
4
:
"
8
R
P
L
t
6
n
~
&
.
B
*
V
"
(
2
0
V
"
h
V
d
"
<
F
8
(
?
?
F
N
"
2
<
&
F
<
&
2
0
D
H
0
"
&
D
|
"
2B
0
D
H
0
"
f
0X
4
0
^
H
f
J
p
&
J
F
f
"
4
H
|
?
&
4
F
?
J
p
&
J
.
D
*
(
>
*
0
*
*
<
"
d
8
*
?
4
?
:
*
8
R
&
*
>
26X
*
*
26
^
4
>
2
b
>
2
"
4
:
>
8
R
H
"
4
d
>
26X
>
26
^
4
.
N
*
(
\
0
\
:
:
<
8
?
?
(
Z
(
Z
H
\
(
(
Z
(
:
L
(
