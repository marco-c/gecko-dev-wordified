BINJS
[
GRAMMAR
]
identity
;
N
(
IdentifierExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
CallExpression
StaticMemberExpression
.
LiteralStringExpression
"
BindingIdentifier
(
AssignmentExpression4AssignmentTargetIdentifier
IfStatement
Block
&
VariableDeclaration
VariableDeclarator
ReturnStatement
NewExpression0ComputedMemberExpression
<
ComputedMemberAssignmentTarget0LiteralBooleanExpression
AssertedVarScope0EagerFunctionDeclaration
FormalParameters
AssertedParameterScope
FunctionBody
DataProperty
ForStatement
&
LiteralPropertyName
UpdateExpression
UnaryExpression
*
ConditionalExpression
ObjectExpression
WhileStatement
BreakStatement8StaticMemberAssignmentTarget
Script
"
LabelledStatement
"
ContinueStatement8CompoundAssignmentExpression
[
STRINGS
]
identity
;
+
length
A
separator
hello
var
i
n
*
CompareSplitWithLimit
q
S
split_item
=
=
CompareSplit
string
Number
R
limit
split_1
split_2
Math
p
reResult
l
<
splitlimit
z
-
s
cap
string_split
pow
undefined
lim
r
!
=
SplitMatch
.
split
(
+
+
split
AddTestCase
T
ToUint32
abs
__this
endIndex
String
sign
a
captures
Array
>
e
)
)
.
length
|
|
slice
loop
VERSION
(
)
[
TITLE
RegExp
]
constructor
prototype
charAt
SECTION
toString
startTest4ecma_2
/
String
/
split
-
002
.
jsTString
.
prototype
.
split
(
regexp
[
limit
]
)
x
void
test
*
match
+
=
ll
%
"
POSITIVE_INFINITY
floor
h
boo
index
hellothere
o
NaN
ECMA_2
[
TREE
]
identity
;
S
F
(
HzTr
<
HT
<
H
r
z
.
\
D
N
\
N
&
:
vC
?
&
:
vC
?
?
&
:
vC
?
&
:
vC
?
&
:
vC
?
Y
&
:
vC
?
:
&
:
vC
?
6
(
>
?
&
:
vC
?
&
:
vC
?
:
6
6
(
>
?
.
.
.
?
.
.
.
*
.
(
"
0
N
&
<
P
t
J
j
&
"
<
f
&
&
4
0
"
8
L
P
J
v
~
"
&
"
*
.
2
(
"
2
0
N
2
&
<
2
P
t
J
x
2
j
&
"
<
f
&
&
4
0
"
8
L
P
J
x
2
v
~
"
&
"
*
<
.
X
"
(
*
8
X
"
0
\
X
d
"
B
6
(
>
?
?
B
T
"
8
*
|
B
8
4
H
F
4
&
*
Hp
&
8B
4
H
F
4
&
h
4Z
:
4b
F
h
*
R
n
*
R
B
*
h
&
:
*
Jp
?
"
:
B
?
R
n
*
R
*
H
.
(
D
0
|
&
d
6
?
4
?
0
8
L
"
>
26Z
"
26b
:
D
8
f
D
8
&
4
0
D8
L
F
&
:
d
>
26Z
D26b
:
*
T
.
(
^
0
^
<
0
:
6
?
?
l
l
(
V
(
V
F
^
(
(
V
(
>
0
L
(
>
