BINJS
[
GRAMMAR
]
identity
;
%
.
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement0LiteralNumericExpression
.
LiteralRegExpExpression
BinaryExpression
ArrayExpression
StaticMemberExpression
"
BindingIdentifier
*
LiteralNullExpression
VariableDeclarator
&
VariableDeclaration
IfStatement
ReturnStatement
AssertedParameterScope
FormalParameters
Block
FunctionBody
Script
AssertedVarScope0EagerFunctionDeclaration
[
STRINGS
]
identity
;
AddRegExpCases
+
pattern
regexp
exec
matches_array
AddTestCase
.
exec
(
(
a
*
)
b
\
1
a
index
aabaa
aba
b
var
a
*
b
abaaaxaabaayy
SECTION
=
=
TITLE
"
(
.
|
[
^
"
\
\
\
\
]
)
*
"
q
toString
(
a
*
)
baa
length
adcaxc
aa
VERSION
"
ma
"
xxqababqyy
)
.
toString
(
)
)
.
length
a
+
b
+
d
(
a
|
d
|
q
|
)
x
x45y
qababq
x
\
d
\
dy
)
Dx
ECMA_2
xxx
bcaDxqy
|
|
[
^
abc
]
def
[
abc
]
+
input
aabbeeaabbs
startTest
y
(
a
(
.
|
[
^
d
]
)
c
)
*
axc
:
RegExp
.
prototype
.
exec
(
string
)
q
(
a
|
b
)
*
q
test
"
cccdaaabqxaabaayy
ccdaaabaxaabaa
x
(
a
|
(
e
|
q
)
)
(
x
|
y
)
aaadaabaaa
"
makudonarudo
"
qy
aab
dddb
)
.
input
)
.
index
xdefbb
xx
"
makudonarudo
"
yy
xx
"
ma
"
yy
o
abcx45ysss235
RegExp
/
exec
-
002
"
cccdaaabaxaabaayy
abxdefbb
bcaddxqy
D
i
[
TREE
]
identity
;
u
(
*
(
8
0
8
P
(
f
^
D
T
N
r
x
B
\
t
z
|
R
J
F
X
0
n
"
6
0
6
h
<
H
b
4
4
d
p
"
"
l
*
v
*
:
j
"
&
V
&
&
L
2
2
~
Z
>
.
.
