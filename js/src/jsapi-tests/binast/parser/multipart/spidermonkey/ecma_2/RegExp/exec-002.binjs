BINJS
[
GRAMMAR
]
identity
;
6
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
.
LiteralRegExpExpression
ArrayExpression
StaticMemberExpression
"
BindingIdentifier
(
AssertedDeclaredName
>
AssertedPositionalParameterName
*
LiteralNullExpression
&
VariableDeclaration
VariableDeclarator
AssertedBlockScope
AssertedParameterScope2AssertedScriptGlobalScope
AssertedVarScope
Block0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
IfStatement
ReturnStatement
Script
[
STRINGS
]
identity
;
AddRegExpCases
+
pattern
regexp
var
exec
matches_array
.
exec
(
AddTestCase
(
a
*
)
b
\
1
a
index
a
*
b
aabaa
aba
b
"
(
.
|
[
^
"
\
\
\
\
]
)
*
"
(
a
*
)
baa
SECTION
TITLE
VERSION
aa
abaaaxaabaayy
adcaxc
length
q
toString
=
=
"
ma
"
"
makudonarudo
"
(
a
(
.
|
[
^
d
]
)
c
)
*
(
a
|
(
e
|
q
)
)
(
x
|
y
)
(
a
|
d
|
q
|
)
x
)
)
.
index
)
.
input
)
.
length
)
.
toString
(
)
D
Dx
ECMA_2
:
RegExp
.
prototype
.
exec
(
string
)
RegExp
/
exec
-
002
[
^
abc
]
def
[
abc
]
+
a
+
b
+
d
aaadaabaaa
aab
aabbeeaabbs
abcx45ysss235
abxdefbb
axc
bcaDxqy
bcaddxqy
"
cccdaaabaxaabaayy
"
cccdaaabqxaabaayy
ccdaaabaxaabaa
dddb
i
input
o
q
(
a
|
b
)
*
q
qababq
qy
startTest
test
x
x45y
x
\
d
\
dy
xdefbb
xx
"
ma
"
yy
xx
"
makudonarudo
"
yy
xxqababqyy
xxx
y
|
|
[
TREE
]
identity
;
4
&
(
*
0
&
V
*
R
(
T
Bt
h
P
N
j
~
4
4
Z
\
^
r
b
X
d
p
"
z
|
>
0
0
f
.
.
l
n
"
<
x
"
:
*
.
"
&
0
8
8
(
D
2
J
2
2
F
H
v
L
6
6
