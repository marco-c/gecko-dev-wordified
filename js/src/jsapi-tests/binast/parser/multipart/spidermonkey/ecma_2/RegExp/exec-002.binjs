BINJS
[
GRAMMAR
]
identity
;
%
.
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
.
LiteralRegExpExpression
ArrayExpression
StaticMemberExpression
"
BindingIdentifier
*
LiteralNullExpression
&
VariableDeclaration
VariableDeclarator
ReturnStatement
Block
FunctionBody
Script
AssertedVarScope
FormalParameters0EagerFunctionDeclaration
AssertedParameterScope
IfStatement
[
STRINGS
]
identity
;
AddRegExpCases
+
pattern
regexp
matches_array
exec
AddTestCase
.
exec
(
(
a
*
)
b
\
1
a
index
aba
aabaa
var
a
*
b
b
aa
q
adcaxc
TITLE
VERSION
toString
abaaaxaabaayy
=
=
SECTION
"
(
.
|
[
^
"
\
\
\
\
]
)
*
"
length
(
a
*
)
baa
ECMA_2
"
ma
"
"
cccdaaabqxaabaayy
"
makudonarudo
"
(
a
|
(
e
|
q
)
)
(
x
|
y
)
(
a
|
d
|
q
|
)
x
y
qababq
a
+
b
+
d
)
.
index
D
x
)
.
toString
(
)
x
\
d
\
dy
input
aabbeeaabbs
xdefbb
dddb
abxdefbb
axc
Dx
[
^
abc
]
def
[
abc
]
+
"
cccdaaabaxaabaayy
o
q
(
a
|
b
)
*
q
startTest
(
a
(
.
|
[
^
d
]
)
c
)
*
i
)
.
length
bcaddxqy
aab
qy
xxx
)
|
|
xx
"
makudonarudo
"
yy
:
RegExp
.
prototype
.
exec
(
string
)
RegExp
/
exec
-
002
aaadaabaaa
bcaDxqy
abcx45ysss235
xxqababqyy
)
.
input
ccdaaabaxaabaa
xx
"
ma
"
yy
x45y
test
[
TREE
]
identity
;
u
"
2
(
*
0
2
*
:
(
l
Dp
b
N
B
t
x
F
J
X
v
\
z
T
d
^
Z
8
"
"
8
"
j
H
n
&
&
P
.
.
f
>
4
h
4
<
(
*
&
~
0
0
|
r
6
6
L
V
R
