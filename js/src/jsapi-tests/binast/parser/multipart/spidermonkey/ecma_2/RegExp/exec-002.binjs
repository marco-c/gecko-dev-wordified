BINJS
[
GRAMMAR
]
identity
;
6
.
LiteralStringExpression
(
IdentifierExpression
CallExpression
&
ExpressionStatement
BinaryExpression0LiteralNumericExpression
.
LiteralRegExpExpression
ArrayExpression
StaticMemberExpression
"
BindingIdentifier
*
LiteralNullExpression
(
AssertedDeclaredName
>
AssertedPositionalParameterName
VariableDeclarator
&
VariableDeclaration0FunctionOrMethodContents2AssertedScriptGlobalScope
AssertedParameterScope
Block
AssertedVarScope
Script
IfStatement
AssertedBlockScope
ReturnStatement0EagerFunctionDeclaration
FormalParameters
[
STRINGS
]
identity
;
AddRegExpCases
+
pattern
regexp
var
matches_array
exec
AddTestCase
.
exec
(
a
index
(
a
*
)
b
\
1
a
*
b
b
aabaa
aba
q
SECTION
(
a
*
)
baa
=
=
adcaxc
TITLE
abaaaxaabaayy
length
VERSION
"
(
.
|
[
^
"
\
\
\
\
]
)
*
"
aa
toString
[
^
abc
]
def
[
abc
]
+
qababq
ccdaaabaxaabaa
abxdefbb
)
bcaDxqy
"
cccdaaabaxaabaayy
dddb
(
a
|
d
|
q
|
)
x
"
ma
"
aaadaabaaa
x
RegExp
/
exec
-
002
xx
"
makudonarudo
"
yy
D
abcx45ysss235
x
\
d
\
dy
qy
:
RegExp
.
prototype
.
exec
(
string
)
xxqababqyy
(
a
(
.
|
[
^
d
]
)
c
)
*
aab
)
.
toString
(
)
i
(
a
|
(
e
|
q
)
)
(
x
|
y
)
xdefbb
q
(
a
|
b
)
*
q
xxx
)
.
length
test
y
)
.
index
Dx
startTest
a
+
b
+
d
xx
"
ma
"
yy
"
cccdaaabqxaabaayy
axc
x45y
|
|
)
.
input
o
"
makudonarudo
"
aabbeeaabbs
bcaddxqy
input
ECMA_2
[
TREE
]
identity
;
*
"
2
0
R
2
^
|
Jh
D
z
V
j
\
"
"
v
~
N
d
H
p
Z
X
:
l
&
>
"
6
&
6
n
<
b
*
*
P
.
.
F
4
T
4
L
t
2
4
(
(
(
&
.
B
0
r
0
0
x
f
8
8
