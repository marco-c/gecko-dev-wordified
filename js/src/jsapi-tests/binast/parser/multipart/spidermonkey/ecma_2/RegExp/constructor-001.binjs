BINJS
[
GRAMMAR
]
identity
;
"
(
IdentifierExpression
.
LiteralStringExpression
&
ExpressionStatement
StaticMemberExpression
CallExpression
(
AssertedDeclaredName
&
VariableDeclaration
VariableDeclarator
"
BindingIdentifier0LiteralBooleanExpression
Script
BinaryExpression
NewExpression2AssertedScriptGlobalScope0LiteralNumericExpression
(
AssignmentExpression8StaticMemberAssignmentTarget
[
STRINGS
]
identity
;
i
>
var
re
AddTestCase
prototype
RegExp
TITLE
SECTION
getClassProperty
VERSIONB
(
new
RegExp
(
)
)
.
getClassProperty
(
)
source
~
RegExp
.
prototype
.
getClassProperty
=
Object
.
prototype
.
toString
;
0
(
new
RegExp
(
)
)
.
lastIndex
(
?
:
)
lastIndex2
(
new
RegExp
(
)
)
.
ignoreCase
new
RegExp
(
)
*
(
new
RegExp
(
)
)
.
source
multiline0
(
new
RegExp
(
)
)
.
multiline
RegExp
/
constructor
-
001
Object
[
object
RegExp
]
+
ECMA_2
startTest
toString
test
*
(
new
RegExp
(
)
)
.
global
global
ignoreCase
[
TREE
]
identity
;
W
(
0
2
*
4
.
"
8
:
<
&
6
