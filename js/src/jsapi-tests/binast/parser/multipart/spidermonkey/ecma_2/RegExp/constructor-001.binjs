BINJS
[
GRAMMAR
]
identity
;
y
(
IdentifierExpression
.
LiteralStringExpression
StaticMemberExpression
&
ExpressionStatement
CallExpression
VariableDeclarator
"
BindingIdentifier
&
VariableDeclaration0LiteralBooleanExpression8StaticMemberAssignmentTarget
(
AssignmentExpression0LiteralNumericExpression
AssertedVarScope
BinaryExpression
Script
NewExpression
[
STRINGS
]
identity
;
i
>
re
AddTestCase
var
prototype
VERSION
RegExp
getClassProperty
TITLE
SECTION2
(
new
RegExp
(
)
)
.
ignoreCase
[
object
RegExp
]
RegExp
/
constructor
-
001
source
*
(
new
RegExp
(
)
)
.
global0
(
new
RegExp
(
)
)
.
lastIndex
lastIndex
ignoreCase
ObjectB
(
new
RegExp
(
)
)
.
getClassProperty
(
)
+
ECMA_2
(
?
:
)
0
(
new
RegExp
(
)
)
.
multiline
global
multiline
startTest
*
(
new
RegExp
(
)
)
.
source
test
toString
~
RegExp
.
prototype
.
getClassProperty
=
Object
.
prototype
.
toString
;
new
RegExp
(
)
[
TREE
]
identity
;
C
(
<
2
"
8
&
:
4
*
.
0
6
