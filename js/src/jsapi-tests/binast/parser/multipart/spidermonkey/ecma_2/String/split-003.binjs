BINJS
[
GRAMMAR
]
identity
;
.
LiteralStringExpression
(
IdentifierExpression
BinaryExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
ArrayExpression
"
BindingIdentifier0LiteralNumericExpression
NewExpression
>
AssertedPositionalParameterName
(
AssertedDeclaredName
.
LiteralRegExpExpression
VariableDeclarator
&
VariableDeclaration0ComputedMemberExpression
FormalParameters
Block
UnaryExpression
0EagerFunctionDeclaration
UpdateExpression
*
ConditionalExpression0FunctionOrMethodContents4AssignmentTargetIdentifier0LiteralBooleanExpression
ForStatement
AssertedBlockScope
AssertedVarScope
AssertedParameterScope2AssertedScriptGlobalScope
Script
[
STRINGS
]
identity
;
A
f
+
string
l
hello
(
AddLimitedSplitCases
var
matches
separator
length
split_array
limit
split
new
RegExp
RegExp
str_sep
/
l
/
o
h
he
e
)
.
split
(
AddTestCase
(
AddSplitCases
slimit
Array
SECTION
hi
]
+
+
VERSION
>
TITLE
undefined
constructor
<
void
=
=
TString
.
prototype
.
split
(
regexp
[
limit
]
)
test
)
.
constructor
=
=
Array4ecma_2
/
String
/
split
-
003
.
js
)
[
)
.
length
ECMA_2
)
.
length
)
[
.
)
.
constructor
=
=
Array
startTest
[
TREE
]
identity
;
q
>
<
0
8
D
4
8
V
\
D
P
d
0
(
"
0
&
"
?
&
&
&
"
&
"
L
&
"
:
F
&
"
0
(
"
?
(
(
(
L
(
"
:
F
(
"
R
(
0
.
:
&
8
.
*
T2
N
H
6
.
*
Z
B
4
J
*
>
0
"
6
.
*
<
(
.
:
&
8
2
.
*
4
b2
N
H
6
.
*
4
^
2
B
4
J
2
*
>
0
"
6
.
*
4
X
<
