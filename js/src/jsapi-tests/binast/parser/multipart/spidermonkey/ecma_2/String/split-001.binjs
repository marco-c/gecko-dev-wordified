BINJS
[
GRAMMAR
]
identity
;
<
(
IdentifierExpression
.
LiteralStringExpression
BinaryExpression
StaticMemberExpression
"
BindingIdentifier
CallExpression
>
AssertedPositionalParameterName
&
ExpressionStatement
(
AssertedDeclaredName
VariableDeclarator
&
VariableDeclaration0ComputedMemberExpression
AssertedBlockScope4AssignmentTargetIdentifier0LiteralBooleanExpression
FormalParameters0EagerFunctionDeclaration
AssertedParameterScope
AssertedVarScope
UpdateExpression
ForStatement
ArrayExpression0LiteralNumericExpression0FunctionOrMethodContents
Block
Script
NewExpression2AssertedScriptGlobalScope
*
ConditionalExpression
[
STRINGS
]
identity
;
/
d
+
string
matches
var
separator
split_array
length
str_sep
split
)
.
split
(
(
AddTestCase
limit
str_limit
AddSplitCases
m
TITLE
=
=
e
p
SECTION
l
t
constructor
Array
i
VERSION
(
AddLimitedSplitCases
splitme
]
<
+
+
s
)
[
)
.
length
>
'
'
RegExp
)
[
test
startTest
ECMA_2
new
RegExp
(
)
)
.
constructor
=
=
Array4ecma_2
/
String
/
split
-
001
.
js
.
)
.
constructor
=
=
Array
)
.
lengthTString
.
prototype
.
split
(
regexp
[
limit
]
)
[
TREE
]
identity
;
48
8
*
"
6
*
Z
6
T
"
b
R
:
\
J
B
(
4
.
&
:
6
L
V
B
(
4
.
&
P
0
"
*
X
0
2
:
H
(
.
>
&
2
N
<
8
0
"
*
^
0
2
F
(
.
>
&
2
D
<
