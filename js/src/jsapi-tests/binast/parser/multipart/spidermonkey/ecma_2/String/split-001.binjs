BINJS
[
GRAMMAR
]
identity
;
<
(
IdentifierExpression
.
LiteralStringExpression
BinaryExpression
StaticMemberExpression
"
BindingIdentifier
CallExpression
>
AssertedPositionalParameterName
&
ExpressionStatement
(
AssertedDeclaredName
&
VariableDeclaration
VariableDeclarator0ComputedMemberExpression
ArrayExpression
AssertedBlockScope
AssertedParameterScope
AssertedVarScope4AssignmentTargetIdentifier
Block0EagerFunctionDeclaration
ForStatement
FormalParameters0FunctionOrMethodContents0LiteralBooleanExpression0LiteralNumericExpression
UpdateExpression2AssertedScriptGlobalScope
*
ConditionalExpression
NewExpression
Script
[
STRINGS
]
identity
;
/
d
+
string
matches
var
separator
split_array
length
str_sep
split
)
.
split
(
(
AddTestCase
limit
str_limit
AddSplitCases
(
AddLimitedSplitCases
Array
SECTION
TITLE
VERSION
]
constructor
e
i
l
m
p
s
splitme
t
+
+
<
=
=
.
)
.
constructor
=
=
Array
)
.
length
)
[
'
'
)
.
constructor
=
=
Array
)
.
length
)
[
ECMA_2
RegExpTString
.
prototype
.
split
(
regexp
[
limit
]
)
4ecma_2
/
String
/
split
-
001
.
js
new
RegExp
(
)
startTest
test
>
[
TREE
]
identity
;
:
4
&
(
Z
(
T
&
X
^
:
D
L
8
6
2
0
<
4
.
:
8
V
\
8
6
2
0
<
4
.
&
*
N
.
B
"
P
6
b
(
0
2
>
"
R
*
&
*
F
.
B
"
H
(
0
2
>
"
J
*
