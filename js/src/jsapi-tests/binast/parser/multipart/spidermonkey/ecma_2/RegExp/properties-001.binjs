BINJS
[
GRAMMAR
]
identity
;
0
(
IdentifierExpression0LiteralBooleanExpression
.
LiteralStringExpression
CallExpression
&
ExpressionStatement
BinaryExpression
StaticMemberExpression
"
BindingIdentifier0LiteralNumericExpression
.
LiteralRegExpExpression
(
AssertedDeclaredName
>
AssertedPositionalParameterName
&
VariableDeclaration
VariableDeclarator
*
ConditionalExpression
AssertedParameterScope2AssertedScriptGlobalScope
AssertedVarScope0EagerFunctionDeclaration
FormalParameters0FunctionOrMethodContents
NewExpression
Script
[
STRINGS
]
identity
;
x
re
+
AddRegExpCases
AddTestCase
var
RegExp
g
i
m
prototype
s
=
=
S
l
test
toString
(
?
:
)
.
*
/
BUGNUMBER
SECTION
TITLE
VERSION
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
[
\
S
]
?
[
\
d
]
{
5
}
[
a
-
zA
-
Z0
-
9
]
*
\
097
\
u0051
\
x45
.
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
compile
constructor
exec
gi
gm
x
|
y
|
zH
.
compile
=
=
RegExp
.
prototype
.
compileV
.
contructor
=
=
RegExp
.
prototype
.
constructor
<
.
exec
=
=
RegExp
.
prototype
.
exec
.
global
.
ignoreCase
.
lastIndex
.
multiline
.
source
<
.
test
=
=
RegExp
.
prototype
.
testL
.
toString
=
=
RegExp
.
prototype
.
toString
.
toString
(
)
ECMA_2
<
Properties
of
RegExp
Instances0RegExp
/
properties
-
001
.
js
gim
global
ignoreCase
im
lastIndex
multiline
source
startTest
[
TREE
]
identity
;
S
.
"
(
*
.
*
f
.
b
d
(
v
"
4
4
2
2
>
>
0F
0
6H
6
Jh
J
:
n
:
<
H
<
8F
8
&
*
(
\
^
N
B
B
L
P
D
D
Z
t
"
&
&
R
j
T
l
X
r
V
p
