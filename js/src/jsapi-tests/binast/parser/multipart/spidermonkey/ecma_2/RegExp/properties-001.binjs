BINJS
[
GRAMMAR
]
identity
;
*
(
IdentifierExpression0LiteralBooleanExpression
.
LiteralStringExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
BinaryExpression
"
BindingIdentifier0LiteralNumericExpression
.
LiteralRegExpExpression
&
VariableDeclaration
VariableDeclarator
*
ConditionalExpression
AssertedVarScope
AssertedParameterScope
FormalParameters0EagerFunctionDeclaration
Script
NewExpression
FunctionBody
[
STRINGS
]
identity
;
x
re
+
AddRegExpCases
AddTestCase
g
m
RegExp
i
=
=
var
prototype
s
toString
test
l
S
[
\
S
]
?
compile
exec
TITLE
.
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
[
\
d
]
{
5
}
gi
BUGNUMBER
\
x45
VERSION
gm
.
*
\
097
\
u0051
x
|
y
|
z
[
a
-
zA
-
Z0
-
9
]
*
(
?
:
)
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
/
constructor
SECTION
global
.
multiline
<
.
test
=
=
RegExp
.
prototype
.
test
.
lastIndex
startTestL
.
toString
=
=
RegExp
.
prototype
.
toString
.
toString
(
)
multiline
<
Properties
of
RegExp
InstancesH
.
compile
=
=
RegExp
.
prototype
.
compile
gim
.
global
.
ignoreCase
.
source
lastIndexV
.
contructor
=
=
RegExp
.
prototype
.
constructor
im
<
.
exec
=
=
RegExp
.
prototype
.
exec
ECMA_2
source0RegExp
/
properties
-
001
.
js
ignoreCase
[
TREE
]
identity
;
"
0J
(
4
J
t
4
p
(
\
0
T
&
B
8
8
"
"
*
*
D
.
D
6
>
>
<
l
<
26
2
:
.
:
(
P
V
j
H
H
^
n
&
&
f
r
B
X
F
F
b
L
d
v
N
Z
R
h
