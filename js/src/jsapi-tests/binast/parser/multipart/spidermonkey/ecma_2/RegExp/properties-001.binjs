BINJS
[
GRAMMAR
]
identity
;
*
(
IdentifierExpression0LiteralBooleanExpression
.
LiteralStringExpression
CallExpression
&
ExpressionStatement
BinaryExpression
StaticMemberExpression
"
BindingIdentifier0LiteralNumericExpression
.
LiteralRegExpExpression
VariableDeclarator
&
VariableDeclaration
*
ConditionalExpression
AssertedVarScope
FormalParameters
Script
AssertedParameterScope
FunctionBody0EagerFunctionDeclaration
NewExpression
[
STRINGS
]
identity
;
x
re
+
AddRegExpCases
AddTestCase
g
i
RegExp
m
var
s
=
=
prototype
l
test
S
toString
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
exec
\
x45
\
u0051
.
*
\
097
constructor
[
\
S
]
?
[
a
-
zA
-
Z0
-
9
]
*
.
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
TITLE
/
x
|
y
|
z
compile
gi
SECTION
VERSION
BUGNUMBER
[
\
d
]
{
5
}
gm
(
?
:
)
.
global
lastIndex
ignoreCase
<
Properties
of
RegExp
Instances
.
lastIndex
.
toString
(
)
.
source
gim
global
.
multiline
<
.
test
=
=
RegExp
.
prototype
.
testL
.
toString
=
=
RegExp
.
prototype
.
toString
startTest
.
ignoreCase
im
ECMA_2
source0RegExp
/
properties
-
001
.
js
<
.
exec
=
=
RegExp
.
prototype
.
execH
.
compile
=
=
RegExp
.
prototype
.
compile
multilineV
.
contructor
=
=
RegExp
.
prototype
.
constructor
[
TREE
]
identity
;
D
6B
n
B
j
6
R
D
d
&
J
*
*
F
F
0
0
4
4
"
>
"
2H
2
:
Z
:
(
h
(
&
H
&
>
(
"
b
v
.
.
r
<
<
p
X
l
J
V
8
8
L
\
f
P
^
t
T
N
