BINJS
[
GRAMMAR
]
identity
;
*
(
IdentifierExpression0LiteralBooleanExpression
.
LiteralStringExpression
CallExpression
&
ExpressionStatement
StaticMemberExpression
BinaryExpression
"
BindingIdentifier0LiteralNumericExpression
.
LiteralRegExpExpression
&
VariableDeclaration
VariableDeclarator
*
ConditionalExpression
AssertedVarScope
NewExpression
FunctionBody
AssertedParameterScope
FormalParameters0EagerFunctionDeclaration
Script
[
STRINGS
]
identity
;
x
re
+
AddRegExpCases
AddTestCase
g
RegExp
m
i
prototype
=
=
var
s
l
toString
S
test
exec
TITLE
gm
[
\
S
]
?
gi
compile
(
?
:
)
/
SECTION
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
[
a
-
zA
-
Z0
-
9
]
*
\
x45
[
\
d
]
{
5
}
BUGNUMBER
.
*
\
u0051
constructor
x
|
y
|
z
\
097
VERSION
.
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
<
.
exec
=
=
RegExp
.
prototype
.
exec
.
lastIndex
startTest
ignoreCase
multiline
.
multiline
ECMA_2
<
.
test
=
=
RegExp
.
prototype
.
test
global
lastIndex
.
toString
(
)
L
.
toString
=
=
RegExp
.
prototype
.
toString
im0RegExp
/
properties
-
001
.
jsV
.
contructor
=
=
RegExp
.
prototype
.
constructor
sourceH
.
compile
=
=
RegExp
.
prototype
.
compile
gim
<
Properties
of
RegExp
Instances
.
global
.
source
.
ignoreCase
[
TREE
]
identity
;
(
<
2
H
2
f
H
X
p
<
P
.
>
>
:
:
(
(
J
J
4
*
4
6
&
6
Dn
D
d
8
&
8
F
*
F
&
"
Z
b
h
B
B
l
L
"
"
t
j
.
0
0
r
\
v
R
V
T
N
^
