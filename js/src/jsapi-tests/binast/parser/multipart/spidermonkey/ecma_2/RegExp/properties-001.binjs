BINJS
[
GRAMMAR
]
identity
;
0
(
IdentifierExpression0LiteralBooleanExpression
.
LiteralStringExpression
CallExpression
&
ExpressionStatement
BinaryExpression
StaticMemberExpression
"
BindingIdentifier0LiteralNumericExpression
.
LiteralRegExpExpression
(
AssertedDeclaredName
>
AssertedPositionalParameterName
VariableDeclarator
&
VariableDeclaration
*
ConditionalExpression
Script
NewExpression0EagerFunctionDeclaration
FormalParameters2AssertedScriptGlobalScope
AssertedVarScope
AssertedParameterScope0FunctionOrMethodContents
[
STRINGS
]
identity
;
x
re
+
AddRegExpCases
AddTestCase
var
RegExp
m
i
g
prototype
s
=
=
test
S
toString
l
gm
VERSION
gi
exec
[
a
-
zA
-
Z0
-
9
]
*
TITLE
\
x45
\
097
/
[
\
S
]
?
.
^
(
[
a
-
z
]
*
)
[
^
\
w
\
s
\
f
\
n
\
r
]
+
BUGNUMBER
[
\
D
]
{
1
5
}
[
\
-
]
[
\
d
]
SECTION
x
|
y
|
z
compile
(
?
:
)
constructor
.
*
\
u0051
[
\
d
]
{
5
}
0RegExp
/
properties
-
001
.
js
<
.
test
=
=
RegExp
.
prototype
.
test
source
multiline
.
lastIndex
<
.
exec
=
=
RegExp
.
prototype
.
exec
.
toString
(
)
.
ignoreCase
im
global
<
Properties
of
RegExp
Instances
ECMA_2H
.
compile
=
=
RegExp
.
prototype
.
compileL
.
toString
=
=
RegExp
.
prototype
.
toString
.
multiline
.
source
gim
startTestV
.
contructor
=
=
RegExp
.
prototype
.
constructor
.
global
lastIndex
ignoreCase
[
TREE
]
identity
;
S
&
8
<
<
L
b
8
n
B
F
F
J
J
4
4
6
6
:
&
:
*
"
*
>
l
>
H
\
H
.
"
.
0
&
0
"
.
(
*
N
f
p
D
D
d
V
(
(
j
P
B
X
2
2
r
^
Z
v
h
R
T
t
