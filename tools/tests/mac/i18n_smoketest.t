>
y
"
[
]
use
"
apFrame
.
inc
"
[
]
[
]
/
/
GLOBAL
VARIABLES
[
]
ARRAY
[
8
]
OF
ANYTYPE
aaData
[
]
STRING
sTestArea
[
]
STRING
sTestCoverage
[
]
STRING
sTestName
[
]
STRING
sReport
/
/
name
of
the
report
file
[
]
STRING
sWindowName
/
/
name
of
the
expected
window
[
]
HFILE
hReport
hData
[
]
[
-
]
Debug
(
)
[
]
[
-
]
DebugStr
(
STRING
s
)
[
]
Print
(
s
)
[
+
]
STRING
GetBuildNum
(
)
[
]
HFILE
hXUL
[
]
STRING
sLine
sPrint
[
]
INT
i
[
]
hXUL
=
FileOpen
(
"
:
:
:
:
dist
:
viewer
:
res
:
samples
:
navigator
.
xul
"
FM_READ
)
[
-
]
while
(
FileReadLine
(
hXUL
sLine
)
)
[
]
i
=
StrPos
(
"
Build
ID
"
sLine
)
[
-
]
if
(
i
>
0
)
[
]
sPrint
=
SubStr
(
sLine
i
20
)
[
]
return
(
sPrint
)
[
]
return
(
"
Build
ID
not
found
"
)
[
+
]
SetSeamonkeyOptions
(
)
[
]
/
/
QAP
options
necessary
for
running
these
tests
[
]
Agent
.
SetOption
(
OPT_VERIFY_EXPOSED
false
)
[
]
Agent
.
SetOption
(
OPT_VERIFY_ENABLED
false
)
[
]
Agent
.
SetOption
(
OPT_WINDOW_TIMEOUT
60
)
/
/
maximum
time
QAP
will
wait
for
a
window
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_COUNT
1
)
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_INTERVAL
.
1
)
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_TIMEOUT
60
)
/
/
maximum
time
QAP
will
wait
for
a
bitmap
to
match
[
-
]
AppRunnerBMP
(
STRING
sBMP
RECT
rVerify
)
[
]
/
/
captures
a
bitmap
[
]
/
/
this
should
be
repeated
before
each
run
[
]
Apprunner
.
SetActive
(
)
[
]
sleep
(
2
)
[
]
Mozilla
.
CaptureBitmap
(
sBMP
rVerify
)
[
-
]
INT
DoMailTest
(
ARRAY
OF
STRING
aaArray
)
[
]
DebugStr
(
"
Do
Mail
Test
"
)
[
]
return
(
1
)
[
-
]
INT
DoEditTest
(
ARRAY
OF
STRING
aaArray
)
[
]
DebugStr
(
"
Do
Edit
Test
"
)
[
]
return
(
1
)
[
-
]
INT
DoBrowserTest
(
ARRAY
[
6
]
OF
ANYTYPE
aaArray
)
[
]
/
/
Local
Variable
declarations
[
]
INT
iCRC
/
/
checksum
for
bitmap
region
[
]
INT
iTimes
/
/
loop
variable
for
checksum
verification
[
]
INT
iExcept
/
/
exception
number
returned
by
QA
Partner
[
]
INT
iRes
/
/
numerical
result
for
return
value
[
]
BOOLEAN
bDone
/
/
Flag
for
completion
of
checksum
verification
[
]
BOOLEAN
bTimedOut
/
/
If
bitmap
doesn
'
t
match
also
gives
information
about
time
[
]
STRING
sRes
/
/
Result
of
test
returned
as
a
string
[
]
STRING
sPrintStr
/
/
string
to
print
to
report
file
[
]
HTIMER
hTimer
/
/
timer
handle
[
]
NUMBER
nSeconds
/
/
seconds
elapsed
since
beginning
of
checksum
verification
[
]
RECT
rRect
/
/
rectangle
of
bitmap
for
verification
-
-
must
include
part
of
throbber
[
]
[
]
/
/
Variable
assignment
-
-
aaArray
has
been
read
from
data
file
[
]
sURL
=
aaArray
[
1
]
/
/
URL
to
Load
[
]
sTestArea
=
aaArray
[
2
]
[
]
sTestCoverage
=
aaArray
[
3
]
[
]
sTestName
=
aaArray
[
4
]
[
]
rRect
=
aaArray
[
5
]
[
]
sWindowName
=
aaArray
[
6
]
[
-
]
if
(
sTestArea
=
=
"
stop
"
)
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
TEST
NOT
RUN
:
{
sTestCoverage
}
"
)
[
]
return
-
1
[
]
Apprunner
.
Invoke
(
)
[
-
]
do
[
]
iCRC
=
0
[
]
iTimes
=
0
[
]
nSeconds
=
0
[
]
bTimedOut
=
false
[
]
bDone
=
false
[
]
hTimer
=
TimerCreate
(
)
[
]
Mozilla
.
SetText
(
sURL
)
[
]
TimerStart
(
hTimer
)
[
-
]
while
(
bDone
=
=
false
)
[
]
iCRC
=
Mozilla
.
GetBitmapCRC
(
rThrobber
)
[
-
]
if
(
iCRC
!
=
iBaselineCRC
)
[
]
nSeconds
=
TimerValue
(
hTimer
)
[
]
iTimes
=
0
[
+
]
if
(
nSeconds
>
iBitmapWait
)
[
]
bTimedOut
=
true
[
]
bDone
=
true
[
-
]
else
[
-
]
switch
(
iTimes
)
[
-
]
case
0
[
]
iTimes
+
+
[
]
nSeconds
=
TimerValue
(
hTimer
)
[
-
]
case
1
[
]
iTimes
+
+
[
-
]
case
2
[
]
bDone
=
true
[
]
Debug
(
)
[
]
Verify
(
bTimedOut
false
"
time
less
than
60
seconds
"
)
[
]
Verify
(
iCRC
iBaselineCRC
"
bitmap
matches
baseline
"
)
[
-
]
do
[
]
Verify
(
Mozilla
.
GetCaption
(
)
sWindowName
"
window
name
matches
expected
value
"
)
[
-
]
except
[
]
Print
(
"
*
*
*
Warning
:
window
name
{
sWindowName
}
does
not
match
expected
value
"
)
[
]
sPrintStr
=
sTestName
+
"
"
+
Str
(
nSeconds
4
2
)
+
"
PASS
"
[
]
FileWriteLine
(
hReport
sPrintStr
)
[
]
DebugStr
(
sPrintStr
)
[
]
TimerDestroy
(
hTimer
)
[
]
iRes
=
0
[
-
]
except
[
]
iExcept
=
ExceptNum
(
)
[
-
]
switch
(
iExcept
)
[
-
]
case
E_VERIFY
/
/
iCRC
does
not
equal
iBaselineCRC
[
]
iRes
=
-
1
[
]
sRes
=
ExceptData
(
)
[
-
]
case
E_WINDOW_NOT_FOUND
/
/
Window
not
found
-
-
often
because
App
has
crashed
[
]
iRes
=
-
2
[
]
sRes
=
ExceptData
(
)
[
-
]
case
E_BITMAPS_DIFFERENT
/
/
same
as
E1
[
]
iRes
=
-
3
[
]
sRes
=
ExceptData
(
)
[
-
]
case
E_BITMAP_NOT_STABLE
/
/
mainly
with
waitBitmap
-
-
possibly
hung
[
]
iRes
=
-
4
[
]
sRes
=
ExceptData
(
)
[
-
]
case
E_BITMAP_REGION_INVALID
/
/
bitmap
region
is
not
inside
window
boundaries
[
]
iRes
=
-
5
[
]
sRes
=
ExceptData
(
)
[
-
]
default
[
]
sRes
=
ExceptData
(
)
[
]
iRes
=
-
999
[
+
]
/
/
if
(
ApprunnerError
.
Exists
(
)
)
/
/
uncomment
line
for
windows
[
]
/
/
ApprunnerError
.
Close
.
Click
(
)
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
{
sRes
}
FAIL
"
)
[
]
DebugStr
(
"
{
sTestName
}
{
sRes
}
FAIL
"
)
[
]
TimerDestroy
(
hTimer
)
[
]
return
iRes
[
]
[
-
]
SmokeTest
(
)
[
]
/
/
Local
Variable
declarations
[
]
STRING
sTimeStamp
[
]
STRING
printStr
[
]
STRING
sBuildNum
[
]
INTEGER
i
iLoop
iExcept
iPass
iFail
iRan
iRes
[
]
HTIMER
hTimer
hStarter
[
]
ARRAY
[
8
]
OF
ANYTYPE
aaData
[
]
sTimeStamp
=
StrTran
(
TimeStr
(
)
"
:
"
"
"
)
[
]
sReport
=
"
SmokeReport
{
sTimeStamp
}
.
txt
"
[
]
iBitmapWait
=
60
[
]
sBitmapFile
=
"
throb
.
bmp
"
[
]
Print
(
"
Using
data
file
{
sData
}
"
)
[
]
FileWriteLine
(
hReport
"
Using
data
file
{
sData
}
"
)
[
]
sData
=
"
IntlSmoke
.
txt
"
[
]
sBuildNum
=
GetBuildNum
(
)
[
]
FileWriteLine
(
hReport
"
{
sBuildNum
}
"
)
[
]
Print
(
"
{
sBuildNum
}
"
)
[
]
Print
(
"
Begin
I18N
Smoke
Tests
at
{
TimeStr
(
)
}
"
)
[
]
FileWriteLine
(
hReport
"
Begin
I18N
Smoke
Tests
at
{
TimeStr
(
)
}
"
)
[
]
hReport
=
FileOpen
(
sReport
FM_WRITE
)
[
]
Print
(
"
Using
log
file
{
sReport
}
"
)
[
]
hData
=
FileOpen
(
sData
FM_READ
)
[
]
Apprunner
.
Invoke
(
)
[
]
sleep
(
10
)
[
]
Mozilla
.
SetActive
(
)
[
]
sleep
(
1
)
[
]
AppRunnerBMP
(
sBitmapFile
rThrobber
)
[
]
Mozilla
.
SetActive
(
)
[
]
sleep
(
1
)
[
]
iBaselineCRC
=
SYS_GetBitmapCRC
(
sBitmapFile
)
[
]
Agent
.
SetOption
(
OPT_VERIFY_EXPOSED
false
)
[
]
Agent
.
SetOption
(
OPT_VERIFY_ENABLED
false
)
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_COUNT
1
)
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_INTERVAL
.
1
)
[
]
Agent
.
SetOption
(
OPT_BITMAP_MATCH_TIMEOUT
iBitmapWait
)
[
]
iPass
=
0
[
]
iFail
=
0
[
]
iRan
=
0
[
-
]
while
(
FileReadValue
(
hData
aaData
)
)
[
]
sURL
=
aaData
[
1
]
[
]
sTestArea
=
aaData
[
2
]
[
]
sTestName
=
aaData
[
4
]
[
]
sWindowName
=
aaData
[
6
]
[
]
Apprunner
.
Invoke
(
)
[
-
]
switch
sTestArea
[
-
]
/
/
case
"
Mail
"
[
]
/
/
DoMailTest
(
aaData
)
[
-
]
/
/
case
"
Editor
"
[
]
/
/
DoEditTest
(
aaData
)
[
+
]
case
"
Startup
"
/
/
This
test
must
pass
or
the
others
will
not
be
run
[
-
]
do
[
]
Apprunner
.
Invoke
(
)
[
-
]
except
[
]
DebugStr
(
"
{
sTestName
}
FAIL
{
ExceptData
(
)
}
"
)
[
]
reraise
[
-
]
do
[
]
Verify
(
Mozilla
.
GetCaption
(
)
sWindowName
)
[
-
]
except
[
]
DebugStr
(
"
{
sTestName
}
FAIL
{
ExceptData
(
)
}
"
)
[
]
reraise
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
PASS
"
)
[
]
DebugStr
(
"
{
sTestName
}
PASS
"
)
[
]
iPass
+
+
[
]
iRan
+
+
[
-
]
case
"
Exit
"
/
/
This
test
must
pass
or
the
others
will
not
be
run
[
-
]
do
[
]
Apprunner
.
Invoke
(
)
[
-
]
except
[
]
DebugStr
(
"
{
sTestName
}
FAIL
{
ExceptData
(
)
}
"
)
[
]
reraise
[
-
]
do
[
]
Mozilla
.
Close
(
)
[
-
]
except
[
]
DebugStr
(
"
{
sTestName
}
FAIL
{
ExceptData
(
)
}
"
)
[
]
reraise
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
PASS
"
)
[
]
DebugStr
(
"
{
sTestName
}
PASS
"
)
[
]
iPass
+
+
[
]
iRan
+
+
[
-
]
case
"
Top
Site
"
"
Frames
"
"
Tables
"
"
Java
"
"
JavaScript
Applets
"
"
PNG
Images
"
"
JPEG
Images
"
"
Transparencies
"
"
Java
Applets
"
"
Multilingual
UTF
-
8
"
"
Multilingual
NCR
"
[
-
]
do
[
]
iRes
=
DoBrowserTest
(
aaData
)
[
]
iRan
+
+
[
-
]
if
(
iRes
<
0
)
[
]
iFail
+
+
[
-
]
else
[
]
iPass
+
+
[
-
]
except
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
FAILED
"
)
[
]
DebugStr
(
"
{
sTestName
}
FAILED
"
)
[
-
]
if
(
iRes
<
0
)
[
]
iFail
+
+
[
-
]
else
[
]
iPass
+
+
[
-
]
default
[
]
FileWriteLine
(
hReport
"
{
sTestName
}
Not
Run
"
)
[
]
continue
[
-
]
do
[
]
Mozilla
.
Close
(
)
[
-
]
except
[
-
]
if
(
sTestArea
=
=
"
Exit
"
)
[
]
[
-
]
else
[
]
Print
(
"
*
*
*
Warning
:
Apprunner
may
not
have
quit
cleanly
"
)
[
]
FileWriteLine
(
hReport
"
Smoke
test
complete
at
{
TimeStr
(
)
}
"
)
[
]
Print
(
"
Smoke
test
complete
at
{
TimeStr
(
)
}
"
)
[
-
]
main
(
)
[
]
SmokeTest
(
)
2
"
}
i
D
d
yZER
*
x
e
xC
]
M
5
*
P
O
(
(
W
W
"
#
I2
y
^
;
rT
e
st
VW
hrF
T
{
J
:
J
c
O
b
)
(
*
ryl
B
V
A
T
{
m
eU
K
9U
f
9
~
~
F
&
I
*
H
=
GQ
|
8
6
fSC
~
6
W
JY
?
20
G
G
jj
%
netscape
.
com
1
.
2
i18n_smoketest
.
t
M
i18n_smoketest
.
t
1
.
2
-
kb
mozilla
/
tools
/
tests
/
mac
H
Monaco
Z
p
m
J
s
E
E
~
x
8
Z
ckid
mcvs
&
MPSR
2
[
Projector
Data
MacCVS
Version
ResourceTEXTQAP2
