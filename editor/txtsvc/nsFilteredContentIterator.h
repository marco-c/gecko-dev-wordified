/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
nsFilteredContentIterator_h__
#
define
nsFilteredContentIterator_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIContentIterator
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nscore
.
h
"
class
nsIAtom
;
class
nsIDOMNode
;
class
nsIDOMRange
;
class
nsINode
;
class
nsITextServicesFilter
;
class
nsRange
;
class
nsFilteredContentIterator
MOZ_FINAL
:
public
nsIContentIterator
{
public
:
/
/
nsISupports
interface
.
.
.
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsFilteredContentIterator
)
explicit
nsFilteredContentIterator
(
nsITextServicesFilter
*
aFilter
)
;
/
*
nsIContentIterator
*
/
virtual
nsresult
Init
(
nsINode
*
aRoot
)
MOZ_OVERRIDE
;
virtual
nsresult
Init
(
nsIDOMRange
*
aRange
)
MOZ_OVERRIDE
;
virtual
void
First
(
)
MOZ_OVERRIDE
;
virtual
void
Last
(
)
MOZ_OVERRIDE
;
virtual
void
Next
(
)
MOZ_OVERRIDE
;
virtual
void
Prev
(
)
MOZ_OVERRIDE
;
virtual
nsINode
*
GetCurrentNode
(
)
MOZ_OVERRIDE
;
virtual
bool
IsDone
(
)
MOZ_OVERRIDE
;
virtual
nsresult
PositionAt
(
nsINode
*
aCurNode
)
MOZ_OVERRIDE
;
/
*
Helpers
*
/
bool
DidSkip
(
)
{
return
mDidSkip
;
}
void
ClearDidSkip
(
)
{
mDidSkip
=
false
;
}
protected
:
nsFilteredContentIterator
(
)
{
}
virtual
~
nsFilteredContentIterator
(
)
;
/
/
enum
to
give
us
the
direction
typedef
enum
{
eDirNotSet
eForward
eBackward
}
eDirectionType
;
nsresult
AdvanceNode
(
nsIDOMNode
*
aNode
nsIDOMNode
*
&
aNewNode
eDirectionType
aDir
)
;
void
CheckAdvNode
(
nsIDOMNode
*
aNode
bool
&
aDidSkip
eDirectionType
aDir
)
;
nsresult
SwitchDirections
(
bool
aChangeToForward
)
;
nsCOMPtr
<
nsIContentIterator
>
mCurrentIterator
;
nsCOMPtr
<
nsIContentIterator
>
mIterator
;
nsCOMPtr
<
nsIContentIterator
>
mPreIterator
;
nsCOMPtr
<
nsIAtom
>
mBlockQuoteAtom
;
nsCOMPtr
<
nsIAtom
>
mScriptAtom
;
nsCOMPtr
<
nsIAtom
>
mTextAreaAtom
;
nsCOMPtr
<
nsIAtom
>
mSelectAreaAtom
;
nsCOMPtr
<
nsIAtom
>
mMapAtom
;
nsCOMPtr
<
nsITextServicesFilter
>
mFilter
;
nsRefPtr
<
nsRange
>
mRange
;
bool
mDidSkip
;
bool
mIsOutOfRange
;
eDirectionType
mDirection
;
}
;
#
endif
