#
!
/
bin
/
bash
-
ex
function
usage
(
)
{
echo
"
Usage
:
0
[
-
-
project
<
js
|
browser
>
]
<
workspace
-
dir
>
flags
.
.
.
"
echo
"
flags
are
treated
the
same
way
as
a
commit
message
would
be
"
echo
"
(
as
in
they
are
scanned
for
directives
just
like
a
try
:
.
.
.
line
)
"
}
PROJECT
=
js
WORKSPACE
=
while
[
[
#
-
gt
0
]
]
;
do
if
[
[
"
1
"
=
=
"
-
h
"
]
]
|
|
[
[
"
1
"
=
=
"
-
-
help
"
]
]
;
then
usage
exit
0
elif
[
[
"
1
"
=
=
"
-
-
project
"
]
]
;
then
shift
PROJECT
=
"
1
"
shift
elif
[
[
"
1
"
=
=
"
-
-
no
-
tooltool
"
]
]
;
then
shift
elif
[
[
-
z
"
WORKSPACE
"
]
]
;
then
WORKSPACE
=
(
cd
"
1
"
&
&
pwd
)
shift
break
fi
done
SCRIPT_FLAGS
=
*
ANALYSIS_DIR
=
"
WORKSPACE
/
haz
-
PROJECT
"
#
Ensure
all
the
scripts
in
this
dir
are
on
the
path
.
.
.
.
DIRNAME
=
(
cd
"
(
dirname
"
{
BASH_SOURCE
[
0
]
}
"
)
"
&
&
pwd
)
PATH
=
DIRNAME
:
PATH
#
Use
GECKO_BASE_REPOSITORY
as
a
signal
for
whether
we
are
running
in
automation
.
export
AUTOMATION
=
{
GECKO_BASE_REPOSITORY
:
+
1
}
:
"
{
GECKO_PATH
:
=
"
DIRNAME
"
/
.
.
/
.
.
/
.
.
}
"
if
!
[
-
d
"
GECKO_PATH
"
]
;
then
echo
"
GECKO_PATH
must
be
set
to
a
directory
containing
a
gecko
source
checkout
"
>
&
2
exit
1
fi
#
Directory
to
hold
the
compiled
JS
shell
that
will
run
the
analysis
.
HAZARD_SHELL_OBJDIR
=
WORKSPACE
/
obj
-
haz
-
shell
export
NO_MERCURIAL_SETUP_CHECK
=
1
if
[
[
"
PROJECT
"
=
"
browser
"
]
]
;
then
(
cd
"
WORKSPACE
"
set
"
WORKSPACE
"
#
Mozbuild
config
:
export
MOZBUILD_STATE_PATH
=
WORKSPACE
/
mozbuild
/
#
Create
.
mozbuild
so
mach
doesn
'
t
complain
about
this
mkdir
-
p
"
MOZBUILD_STATE_PATH
"
)
fi
.
hazard
-
analysis
.
sh
export
PATH
=
"
MOZ_FETCHES_DIR
/
rustc
/
bin
:
PATH
"
export
CFLAGS
=
"
CFLAGS
-
Wno
-
attributes
-
Wno
-
ignored
-
attributes
"
export
CPPFLAGS
=
"
CPPFLAGS
-
Wno
-
attributes
-
Wno
-
ignored
-
attributes
"
#
Build
the
shell
export
HAZARD_SHELL_OBJDIR
#
This
will
be
picked
up
by
the
mozconfig
.
GECKO_PATH
/
mach
hazards
build
-
shell
#
Artifacts
folder
is
outside
of
the
cache
.
mkdir
-
p
"
HOME
"
/
artifacts
/
|
|
true
function
onexit
(
)
{
grab_artifacts
"
ANALYSIS_DIR
"
"
HOME
/
artifacts
"
}
trap
onexit
EXIT
#
Directory
to
hold
the
(
useless
)
object
files
generated
by
the
analysis
.
export
HAZ_OBJDIR
=
"
WORKSPACE
/
obj
-
analyzed
-
PROJECT
"
mkdir
-
p
"
HAZ_OBJDIR
"
export
LD_LIBRARY_PATH
=
"
MOZ_FETCHES_DIR
/
gcc
/
lib64
:
LD_LIBRARY_PATH
"
#
Gather
the
information
from
the
source
tree
by
compiling
it
.
GECKO_PATH
/
mach
hazards
gather
-
-
application
=
PROJECT
-
-
haz
-
objdir
=
"
HAZ_OBJDIR
"
-
-
work
-
dir
=
"
ANALYSIS_DIR
"
#
Analyze
the
collected
information
.
GECKO_PATH
/
mach
hazards
analyze
-
-
application
=
PROJECT
-
-
shell
-
objdir
=
"
HAZARD_SHELL_OBJDIR
"
-
-
work
-
dir
=
"
ANALYSIS_DIR
"
check_hazards
"
ANALYSIS_DIR
"
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
script
end
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
