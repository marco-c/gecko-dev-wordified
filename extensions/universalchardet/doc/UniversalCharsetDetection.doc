>
t
v
q
r
s
q
bjbjt
+
t
+
"
A
A
Y
]
f
f
f
z
z
z
z
8
f
z
p
z
G
"
i
u
f
}
G
}
}
4
}
D
f
z
z
}
*
f
L
G
*
Z
z
z
A
composite
approach
to
language
/
encoding
detection
Shanjian
Li
(
shanjian
netscape
.
com
)
Katsuhiko
Momoi
(
momoi
netscape
.
com
)
Netscape
Communications
Corp
.
(
Please
do
not
distribute
this
paper
before
09
/
15
/
2001
.
Thanks
!
)
1
.
AbstractSummary
:
This
paper
presents
three
types
of
auto
-
detection
methods
to
determine
encodings
of
documents
without
explicit
charset
declaration
.
We
discuss
merits
and
demerits
of
each
method
and
propose
a
composite
approach
in
which
all
3
types
of
detection
methods
are
used
in
such
a
way
as
to
maximize
their
strengths
and
complement
other
detection
methods
.
We
argue
that
auto
-
detection
can
play
an
important
role
in
helping
transition
browser
users
from
frequent
uses
of
a
character
encoding
menu
into
a
more
desirable
state
where
an
encoding
menu
is
rarely
if
ever
used
.
We
envision
that
the
transition
to
the
Unicode
would
have
to
be
transparent
to
the
users
.
Users
need
not
know
how
characters
are
displayed
as
long
as
they
are
displayed
correctly
-
-
whether
it
s
a
native
encoding
or
one
of
Unicode
encodings
.
Good
auto
-
detection
service
could
would
help
significantly
in
this
effort
as
it
takes
most
encoding
issues
out
of
the
user
s
concerns
.
2
.
Background
:
Since
the
beginning
of
the
computer
age
many
encoding
schemes
have
been
created
to
processing
certain
language
and
languages
for
certain
region
.
With
the
trend
of
global
village
and
especially
the
development
of
Internet
Information
exchange
across
regions
become
more
andrepresent
various
writing
scripts
/
characters
for
computerized
data
.
With
the
advent
of
globalization
and
the
development
of
the
Internet
information
exchanges
crossing
both
language
and
regional
boundaries
are
becoming
ever
more
important
.
But
the
existence
of
multiple
coding
schemes
presents
a
established
a
bigsignificant
barrier
.
Thedevelopment
of
Unicode
provideshas
provided
a
universal
coding
scheme
but
it
could
not
replace
existing
coding
scheme
for
many
reasons
.
Manyhas
not
so
far
replaced
existing
regional
coding
schemes
for
a
variety
of
reasons
.
This
in
spite
of
the
fact
that
many
W3C
and
IETF
recommendations
list
UTF
-
8
as
the
default
encoding
e
.
g
.
XML
XHTML
RDF
etc
.
Thus
today
'
s
global
software
applications
haveare
required
to
handle
multiple
encodings
in
addition
to
supporting
Unicode
.
This
work
is
done
in
the
context
to
developing
Internet
browser
.
Today
s
Internet
is
full
of
web
pages
in
various
languages
using
various
encoding
.
A
lot
of
effort
have
been
put
into
browser
development
to
handle
web
pages
in
various
encoding
but
inThe
current
work
has
been
conducted
in
the
context
of
developing
an
Internet
browser
.
To
deal
with
a
variety
of
languages
using
different
encodings
on
the
web
today
a
lot
of
efforts
have
been
expended
.
In
order
to
get
the
correct
display
result
browser
s
rely
on
http
server
html
author
or
end
user
to
provide
the
correctbrowsers
should
be
able
to
utilize
the
encoding
information
inprovided
by
http
servers
web
pages
or
end
users
via
a
character
encoding
menu
.
order
to
interpret
the
text
data
correctly
.
Unfortunately
this
piecetype
of
information
is
missing
in
many
http
server
and
/
or
html
pages
and
manyfrom
many
http
servers
and
web
pages
.
Moreover
most
average
users
are
unable
to
provide
this
piece
of
information
.
Withoutinformation
via
manual
operation
of
a
character
encoding
menu
.
WBut
without
this
charset
information
the
web
pages
are
sometimes
displayed
inas
garbage
characters
and
users
are
rejected
from
accessing
thatunable
to
access
the
desired
information
.
This
also
leadsto
many
users
to
believeconclude
that
their
browser
is
not
functioning
well
.
To
auto
-
detectmal
-
functioning
or
buggy
.
As
more
Internet
standard
protocols
designate
Unicode
as
the
default
encoding
there
will
undoubtedly
be
a
significant
shift
toward
the
use
of
Unicode
on
web
pages
.
Good
universal
auto
-
detection
can
make
an
important
contribution
toward
such
a
shift
if
it
works
seamlessly
without
the
user
ever
having
to
use
an
encoding
menu
.
Under
such
a
condition
gradual
shift
to
Unicode
could
be
painless
and
without
noticeable
effects
on
web
users
since
for
users
pages
simply
display
correctly
without
them
doing
anything
or
paying
attention
to
an
encoding
menu
.
in
this
situation
thus
becomes
very
important
.
Such
a
smooth
transition
could
be
aided
by
making
encodings
issues
less
and
less
noticeable
to
the
users
.
Auto
-
detection
would
play
an
important
role
for
such
a
scenario
.
3
.
Problem
Scope
:
3
.
1
.
General
Schema
Let
us
begin
with
a
general
schema
.
For
most
applications
the
following
represents
a
general
framework
of
auto
-
detection
use
:
(
(
An
application
/
program
takes
the
returned
result
(
s
)
from
an
auto
-
detector
and
then
uses
this
information
for
a
variety
of
purposes
such
as
setting
the
encoding
for
the
data
displaying
the
data
as
intended
by
the
original
creator
pass
it
on
to
other
programs
and
so
on
.
The
auto
-
detection
methods
discussed
in
this
paper
use
an
Internet
Browser
application
as
an
example
.
These
auto
-
detection
methods
however
can
be
easily
adapted
for
other
types
of
applications
.
3
.
2
.
Browser
and
auto
-
detection
Browsers
may
use
certain
detection
algorithms
to
auto
-
detect
the
encoding
of
web
pages
.
A
program
can
potentially
interpret
a
piece
of
text
in
any
number
of
ways
assuming
different
encodings
but
except
in
some
extremely
rare
situations
only
one
interpretation
is
desired
by
the
page
'
s
author
.
Tand
this
is
normally
thenormally
the
only
reasonable
way
for
the
browser
user
to
see
that
page
correctly
in
the
intended
language
.
To
list
major
factors
in
designing
an
auto
-
detection
algorithm
we
begin
with
might
macke
certain
assumptions
about
input
text
and
approaches
to
them
i
.
e
.
web
pages
.
.
Taking
For
example
web
page
data
as
an
example
1
1
.
Input
text
is
composed
ofreadable
words
/
sentences
to
human
reader
.
readable
to
readers
of
a
particular
language
.
(
=
The
data
is
not
gibberish
.
)
2
2
.
Input
text
is
from
typical
webpages
that
you
could
meet
on
internet
everyday
.
web
pages
on
the
Internet
.
(
=
The
data
is
usually
not
from
some
dead
or
ancient
language
.
)
3
.
The
input
text
may
contains
certain
noise
which
has
no
relation
with
its
encoding
like
some
HTML
tags
English
words
contain
extraneous
noises
which
have
no
relation
to
its
encoding
e
.
g
.
HTML
tags
non
-
native
words
(
e
.
g
.
English
words
in
Chinese
documents
)
space
and
other
format
/
control
characters
found
in
a
typical
web
page
.
characters
.
To
enumerate
and
cover
all
languages
and
encoding
is
almost
a
mission
impossible
.
cover
all
the
known
languages
and
encodings
for
auto
-
detection
is
nearly
an
impossible
task
.
In
the
current
approaches
wWe
tried
to
cover
all
popular
encodings
used
in
East
Asian
languages
and
provided
a
generic
model
to
handle
single
-
byte
encodings
at
the
same
time
.
The
Russian
language
encodings
was
chosen
as
an
implementation
example
of
the
latter
type
and
also
our
test
bed
for
single
-
byte
encodings
.
4
.
Target
multi
-
byte
encodings
include
UTF8
Shift
-
JIS
EUC
-
JP
GB2312
Big5
EUC
-
TW
EUC
-
KR
ISO2022
-
XX
and
HZ
.
5
.
Providing
a
generic
model
to
handle
single
-
byte
encodings
andencodings
Russian
language
encodings
(
KOI8
-
R
ISO8859
-
5
window1251
Mac
-
cyrillic
ibm866
ibm855
)
are
covered
in
a
test
bed
and
as
an
implementation
example
.
4
.
Three
Methods
of
Auto
-
detectionBasic
idea
Coding
scheme
Character
Distribution
and
Precedence
Distribution
:
4
.
1
.
Introduction
:
In
this
section
we
discuss
3
different
methods
used
infor
detecting
the
encoding
of
text
data
.
They
are
1
)
Coding
scheme
method
2
)
Character
Distribution
and
3
)
2
-
Char
Sequence
Distribution
.
Each
one
has
its
strengths
and
weaknesses
used
onby
its
ownself
but
if
we
use
all
3
in
a
complementary
manner
the
results
can
be
quite
satisfying
.
4
.
2
.
Coding
Scheme
Method
:
This
method
is
probably
the
most
obvious
and
the
one
most
often
tried
first
for
multi
-
byte
encodings
.
In
any
of
the
multi
-
byte
encoding
coding
schemes
not
all
possible
code
points
are
used
.
If
an
illegal
byte
or
byte
sequence
(
i
.
e
.
unused
code
point
)
is
meetencountered
when
verifying
a
certain
encoding
we
can
immediately
conclude
that
this
is
not
the
right
guess
.
A
small
number
of
code
points
are
also
specific
to
a
certain
encoding
and
that
fact
can
lead
to
an
immediate
positive
conclusion
.
Frank
Tang
(
Netscape
Communications
)
developed
a
very
efficient
algorithm
to
detecting
character
set
using
coding
scheme
through
a
parallel
state
machine
.
His
basic
idea
is
:
For
each
coding
scheme
a
state
machine
is
implemented
to
verify
a
byte
sequence
for
this
particular
encoding
.
For
each
byte
the
detector
receives
the
detectorit
will
feed
that
byte
to
every
active
state
machine
available
-
-
one
byte
at
a
time
.
.
The
state
machine
changes
its
state
based
on
its
previous
state
and
the
byte
it
receive
.
Among
all
states
a
state
machine
might
reach
there
are
3
states
are
of
detector
s
interest
receives
.
There
are
3
states
in
a
state
machine
that
are
of
interest
to
an
auto
-
detector
:
START
state
-
:
Thiswhich
is
the
state
to
start
with
or
acharacter
s
legal
byte
sequence
(
i
.
e
.
a
valid
code
point
)
for
character
has
been
identified
.
ME
state
:
-
whichTthis
indicates
that
the
state
machine
identified
a
byte
sequence
that
is
specific
to
the
charset
it
is
designed
for
and
that
there
is
no
other
possible
encoding
which
can
contain
this
byte
sequence
.
This
will
to
lead
to
an
immediate
positive
answer
for
the
detector
.
ERROR
state
:
This
-
which
indicates
the
state
machine
identified
an
illegal
byte
sequence
for
that
encoding
.
This
will
lead
to
an
immediate
negative
answer
for
this
encoding
.
Detector
will
exclude
this
encoding
from
nowconsideration
from
here
on
.
In
a
typical
example
eventually
one
state
machine
will
eventually
provide
a
positive
answer
and
all
others
will
provide
a
negative
answer
.
The
version
of
PSM
(
Parallel
State
Machine
)
used
in
the
current
work
is
a
modification
of
Frank
Tang
'
s
original
work
.
Whenever
a
state
machine
reaches
the
START
state
meaning
it
has
successfully
identified
a
legal
character
we
can
query
the
state
machine
to
see
how
many
bytes
this
character
has
.
This
information
is
used
in
2
ways
.
First
for
UTF
-
8
encoding
if
several
multi
-
byte
characters
are
identified
itthe
input
data
is
a
very
unlikely
to
beother
encodinganything
other
than
UTF
-
8
.
So
we
count
the
number
of
multi
-
byte
characters
identified
by
the
UTF
-
8
state
machine
.
When
it
reaches
a
certain
number
(
=
the
threshold
)
conclusion
is
made
.
Second
for
other
multi
-
byte
encodings
this
information
is
fed
to
Character
Distribution
analyzer
(
see
below
)
so
that
so
that
no
more
judgement
is
needed
inside
the
Coding
Scheanalyzer
can
deal
with
character
data
rather
than
raw
data
.
me
analyzer
.
4
.
3
.
Character
Distribution
Method
:
SomeIn
any
given
language
some
characters
are
used
more
often
than
other
characters
.
This
fact
can
be
used
to
devise
a
data
model
for
each
language
script
.
This
is
particularly
useful
for
languages
with
a
large
number
of
characters
such
as
Chinese
Japanese
and
Korean
.
We
often
hear
anecdotally
about
such
distributional
statistics
but
we
have
not
found
many
published
results
.
Thus
for
the
following
discussions
we
relied
mostly
on
our
own
collected
data
.
This
is
true
in
almost
any
languages
.
4
.
3
.
1
.
Simplified
Chinese
:
Our
A
research
ofresearch
on
6763
Chinese
characters
data
encoded
in
GB2312
shows
the
following
distributional
resultsresult
:
Number
of
Most
Frequent
Characters
Accumulated
Percentage
10
0
.
11723
64
0
.
31983
128
0
.
45298
256
0
.
61872
512
0
.
79135
1024
0
.
92260
2048
0
.
98505
4096
0
.
99929
67636763
1
.
00000
Table
1
.
Simplified
Chinese
Character
Distribution
Table
4
.
3
.
2
.
Traditional
Chinese
:
A
similar
researchResearch
by
Taiwan
s
Mandarin
Promotion
Council
conducted
annually
(
Year
?
?
)
shows
thea
similar
result
for
traditional
Chinese
encoded
in
Big5
.
<
HYPERLINK
"
http
:
/
/
www
.
edu
.
tw
:
81
/
mandr
/
"
http
:
/
/
www
.
edu
.
tw
:
81
/
mandr
/
>
Number
of
Most
Frequent
Characters
Accumulated
Percentage
10
0
.
11713
64
0
.
29612
128
0
.
42261
256
0
.
57851
512
0
.
74851
1024
0
.
89384
2048
0
.
97583
4096
0
.
99910
Table
2
.
Traditional
Chinese
Character
Distribution
Table
4
.
3
.
3
.
Japanese
:
We
collected
our
own
data
for
Japanese
then
wrote
a
utility
to
analyze
them
.
The
following
table
shows
the
results
:
We
could
not
find
any
work
aboutpublished
work
on
Japanese
and
Korean
language
yet
.
languages
.
We
therefore
collected
somenetwork
materials
in
these
2
languages
and
wrote
some
utilities
to
analyze
those
texts
.
Following
is
the
table
I
got
.
a
utility
to
analyze
the
text
data
.
The
following
are
the
results
we
obtained
:
Number
of
Most
Frequent
Characters
Accumulated
Percentage
10
0
.
27098
64
0
.
66722
128
0
.
77094
256
0
.
85710
512
0
.
92635
1024
0
.
97130
2048
0
.
99431
4096
0
.
99981
Table
3
.
Japanese
Character
Distribution
Table
4
.
3
.
4
.
Korean
:
Similarly
for
Korean
we
collected
our
own
data
from
the
Internet
and
run
our
utility
on
it
.
The
results
are
as
follows
:
Number
of
Most
Frequent
Characters
Accumulated
Percentage
10
0
.
25620
64
0
.
64293
128
0
.
79290
256
0
.
92329
512
0
.
98653
1024
0
.
99944
2048
0
.
99999
4096
0
.
99999
Table
4
.
Korean
Character
Distribution
Table
4
.
4
.
General
characteristics
of
the
distributional
results
:
In
all
those
four
language
we
can
seethese
four
languages
we
find
that
a
rather
small
set
of
coding
points
covers
a
significant
percentage
of
characters
used
in
our
defined
application
scope
.
Moreover
A
closecCloser
examination
of
those
frequently
used
code
points
shows
however
that
they
are
scattered
aroundover
a
rather
largewide
coding
range
.
This
gives
us
a
way
to
overcome
the
common
problem
encountered
in
the
Coding
Scheme
analyzer
i
.
e
.
different
national
encodings
may
share
overlapping
code
points
.
Because
the
most
frequently
occurring
sets
for
these
languages
have
the
characteristics
described
above
and
thatindicate
the
overlap
problem
between
different
encodings
isbecomes
insignificant
if
we
choose
the
sampling
range
carefully
.
This
overcomes
a
problem
encountered
in
the
Coding
Scheme
analyzer
i
.
e
.
different
national
encodings
may
share
overlapping
code
points
.
in
the
Code
Scheme
Method
will
be
insignificant
in
the
Distribution
Method
.
4
.
5
.
Algorithm
for
analysis
:
ToIn
order
to
identify
characteristic
basecharacteristics
of
a
language
based
on
the
character
frequency
/
distribution
statistic
data
statistics
we
need
an
algorithm
to
calculate
a
value
from
a
stream
of
text
input
.
This
value
should
show
the
likelihood
of
this
stream
of
text
being
in
a
certain
characterset
encoding
.
A
naturenatural
choice
might
be
to
calculate
this
value
based
on
each
character
s
frequency
weight
.
But
from
our
experiment
with
various
charset
encoding
I
foundcharacter
encodings
we
find
that
this
approach
is
not
necessary
and
it
uses
too
much
memory
and
CPU
power
.
A
simplified
version
provides
a
very
satisfactory
result
and
it
is
much
smaller
uses
much
less
resources
and
runs
faster
.
In
thisthe
current
approach
all
characters
in
certaina
given
encoding
are
classified
into
2
categories
frequent
used
and
no
frequentfrequently
used
and
not
frequently
used
.
If
a
character
is
among
the
most
frequent
used
512
character
top
512
characters
in
the
frequency
distribution
table
it
is
categorized
as
a
frequently
used
character
.
The
number
512
is
chosen
because
it
covers
a
significant
amount
of
accumulated
percentages
in
any
of
the
4
language
input
text
while
only
occupying
a
small
percentage
of
coding
points
.
We
count
the
number
of
characters
in
either
category
in
a
batch
of
input
text
and
then
calculate
a
float
value
we
called
Distribution
Ratio
.
ThisThe
Distribution
Ratio
is
defined
as
:
as
follows
:
Distribution
Ratio
=
the
Number
of
appearance
ofoccurrences
of
the
512
most
frequently
used
characters
divided
by
the
Number
of
apperance
of
restoccurrences
of
the
rest
of
the
characters
.
Each
of
the
multi
-
byte
encodings
tested
actually
shows
a
distinct
Distribution
Ratio
.
From
this
Ratio
ratio
then
we
can
calculate
the
confidence
level
of
the
raw
input
text
of
being
in
certainfor
a
given
encoding
.
Following
discussions
for
each
encoding
willshould
make
this
point
clear
.
clearer
.
4
.
6
.
Distribution
Ratio
and
Confidence
Level
:
Let
us
look
at
the
4
language
data
to
see
the
differences
in
Distribution
Ratios
.
Note
first
that
we
use
the
term
Distribution
Ratio
in
two
ways
.
An
ideal
Distribution
Ratio
is
defined
for
language
scripts
/
character
sets
rather
than
for
encodings
.
If
a
language
script
/
character
set
is
represented
by
more
than
one
encodings
then
for
each
encoding
we
calculate
the
actual
Distribution
Ratio
in
the
input
data
by
sorting
characters
into
frequently
used
or
not
frequently
used
categories
.
This
value
is
then
compared
against
the
ideal
Distribution
Ratio
of
the
language
script
/
character
set
.
Based
on
the
actual
Distribution
Ratios
obtained
we
can
calculate
the
Confidence
level
for
each
set
of
input
data
as
described
below
.
4
.
6
.
1
.
Simplified
Chinese
(
GB2312
)
:
GB2312
encoding
contains
two
levels
of
Chinese
characters
.
levelLevel
1
contains
3755
characters
and
level
2
containsLevel
2
3008
characters
.
Level
1
characters
are
more
frequently
used
than
level
2
Level
2
ones
and
it
is
no
surprise
to
see
that
all
512
characters
on
our
gb2312the
most
frequently
used
character
list
for
GB
2312
are
within
levelLevel
1
.
Because
level
1
character
are
sorted
base
on
itsLevel
1
characters
are
sorted
based
on
pronunciation
those
512
characters
are
evenly
scattered
in
3755
code
points
.
ThoseThese
characters
occupies
13
.
64
%
of
all
coding
points
in
levelLevel
1
but
it
covers
79
.
135
%
of
all
charactersthe
character
occurrences
in
a
typical
Chinese
text
.
In
an
ideal
situation
a
piece
of
Chinese
text
that
contains
enough
characters
should
return
us
something
like
:
Distribution
Ratio
=
0
.
79135
/
(
1
-
0
.
79135
)
=
3
.
79
And
for
a
randomly
generated
text
using
the
same
encoding
scheme
the
ratio
should
be
around
512
/
(
3755
-
512
)
=
0
.
157
if
no
level
2
character
is
used
.
If
considering
level
2
characters
we
include
Level
2
characters
into
consideration
we
can
assume
that
the
average
probablity
of
each
level
oneprobability
of
each
Level
1
character
is
p1
and
level
two
is
p2
thethat
of
Level
2
is
p2
.
The
calculation
shouldthen
would
be
:
512
*
p1
/
(
3755
*
p1
+
3008
*
p2
512
*
p1
)
=
512
/
(
3755
+
3008
*
p2
/
p1
-
512
)
Obviously
this
value
is
even
smaller
.
In
a
later
analysis
we
just
use
the
worst
case
for
comparison
.
4
.
6
.
2
.
Big
5
:
Big5
and
EUC
-
TW
(
i
.
e
.
CNS
Character
Set
)
encoding
haveencodings
have
a
very
similar
story
.
Big5
also
encodes
Chinese
characters
in
2
levels
.
All
of
theThe
most
frequently
used
512
characters
are
evenly
scattered
in
5401
levelLevel
1
characters
.
The
ideal
ratio
we
can
get
from
a
big5
-
encoded
text
is
:
Distribution
Ratio
=
0
.
74851
/
(
1
-
0
.
74851
)
=
2
.
98
And
for
a
randomly
generated
text
should
have
a
ration
near
512
/
(
5401
-
512
)
=
0
.
105
.
Since
Big5
levelLevel
1
characters
is
almostare
nearly
identical
to
CNS
plane
1
characters
the
same
analysis
applies
to
EUC
-
TW
too
.
4
.
6
.
3
.
Japanese
Shift_JIS
&
EUC
-
JP
:
For
the
Japanese
Language
Hiragana
and
katakana
is
normallyKatakana
are
usually
more
frequently
used
that
mostthan
Kanji
.
Because
Shift
-
JIS
and
EUC
-
JP
encoded
Hiragana
and
katakanaKatakana
in
different
coding
ranges
this
coding
characteristics
can
be
used
in
detectingwe
are
still
able
to
use
this
method
to
distinguish
among
the
two
encodings
.
Those
range
that
is
rather
an
advantage
to
be
used
in
charset
detecting
.
Kanji
character
among
firstKanji
characters
that
are
among
the
most
512
frequently
used
characters
are
also
scatteredaround
evenly
inamong
2965
JIS
Level
1
kanji
.
SameKanji
set
.
The
same
Analysis
leads
to
the
following
distribution
ratio
:
Distribution
Ratio
=
0
.
92635
/
(
1
-
0
.
92635
)
=
12
.
58
For
randomly
generated
text
itJapanese
text
data
the
ratio
should
be
at
least
512
/
(
2965
+
632
+
83
+
86
-
512
)
=
0
.
191
.
The
calculation
includes
Hankaku
Katakana
(
63
)
Hiragana
(
83
)
and
Katakana
(
86
)
.
4
.
6
.
4
.
Korean
EUC
-
KR
:
In
EUC
-
KR
encoding
HANJAthe
numberamount
of
Hanja
(
Chinese
)
characters
)
actually
used
in
a
typical
Korean
text
is
insignificant
in
a
typical
Korean
text
.
The
2350
HANGULHangul
characters
encoded
in
this
encoding
are
arranged
by
their
pronunciation
.
In
the
frequency
table
we
got
through
analyzing
a
large
amount
of
text
Korean
text
data
most
frequently
used
characters
are
evenly
distributed
in
these
2350
code
points
.
Using
the
same
analysis
in
an
ideal
situation
we
gotget
:
Distribution
Ratio
=
0
.
98653
/
(
1
-
0
.
98653
)
=
73
.
24
For
randomly
generated
Korean
text
it
should
be
:
512
/
(
2350
-
512
)
=
0
.
279
.
4
.
6
.
5
.
Calculating
Confidence
Level
:
From
the
foregoing
discussions
for
each
language
script
we
can
define
the
Confidence
level
for
each
data
set
as
follows
:
Confidence
Detecting
(
InputText
)
{
for
each
multi
-
byte
character
in
InputText
{
TotalCharacterCount
+
+
;
if
the
character
is
among
512
most
frequent
ones
FrequentCharacterCount
+
+
;
}
Ratio
=
FrequentCharacterCount
/
(
TotalCharacterCount
-
FreqentCharacterCount
)
;
Confidence
=
Ratio
/
CHARSET_RATIO
;
Return
Confidence
;
}
The
Confidence
level
for
a
given
set
data
is
defined
as
the
Distribution
Ratio
of
the
input
data
divided
by
the
ideal
Distribution
Ratio
obtained
by
the
analyses
in
the
preceding
sections
.
4
.
7
.
Two2
-
Char
Sequence
Distribution
Distribution
Method
:
In
languages
that
only
useletters
because
only
a
small
number
of
characters
are
involved
we
couldcharacters
we
need
to
go
further
than
counting
the
occurrences
of
each
single
characters
.
Combination
ofthose
characters
reveals
more
language
-
characteristic
information
.
We
define
a
2
-
Char
Sequence
as
2
characters
appearing
immediately
one
after
another
in
input
text
and
the
order
is
significant
in
this
case
.
Just
likeas
not
all
characters
are
used
equally
frequently
in
a
language
2
-
Char
Sequence
distribution
also
turns
out
to
be
extremely
language
/
encoding
dependent
.
This
characteristic
can
be
used
in
language
detection
.
This
leads
to
better
confidence
in
detecting
a
charsetcharacter
encoding
and
is
very
useful
in
detecting
single
byte
languages
.
Let
s
use
Russian
language
as
an
example
.
We
downloaded
around
20MB
of
Russian
plain
text
and
wrote
a
program
to
analyze
the
text
.
The
program
foundtotally
21
199
528
2
-
Char
Sequences
.
Among
those
Sequencessequence
occurrencess
in
total
.
Among
the
sequences
we
found
some
of
them
are
irrelevant
to
languages
likefor
our
consideration
e
.
g
.
space
-
space
combination
.
Those
sequenceThese
sequences
are
considered
as
noises
and
their
occurrences
are
not
included
in
the
analysiseliminated
later
.
In
thefrom
consideration
.
model
I
am
using
to
detectingIn
the
data
we
used
to
detect
the
Russian
language
encodings
20
134
122
sequences
are
covered
that
is
about
95
%
of
all
sequences
we
found
.
Those
sequences
covered
by
our
model
are
belong
to
4096
differencethis
left
20
134
122
2
-
Char
sequence
occurrencess
.
That
covers
about
95
%
of
all
the
sequence
occurrencess
found
in
the
data
.
The
sequences
used
in
building
our
language
model
data
can
be
classified
into
4096
different
sequences
and
1961
of
them
appear
fewerless
than
3
times
in
our
20
134
122
samples
.
WeI
called
these
1961kinds
of
sequences
as
Negative
Sequence
Set
of
this
language
.
4
.
7
.
1
.
Algorithm
for
determining
Confidence
Level
For
single
-
byte
languages
we
define
the
Confidence
Level
as
follows
:
Confidence
Detecting
(
InputText
)
{
for
each
character
in
InputText
{
If
character
is
not
a
symbol
or
punctuation
character
TotalCharacters
+
+
;
Find
its
frequency
order
in
frequency
table
;
If
(
Frequency
order
<
SampleSize
)
{
FrequentCharCount
+
+
;
If
we
do
not
have
lastChar
{
lastChar
=
thisChar
;
continue
;
}
if
both
lastChar
and
thisChar
are
within
our
sample
range
{
TotalSequence
+
+
;
If
Sequence
(
lastChar
thisChar
)
belongs
to
NegativeSequenceSet
NetgativeSequenceCount
+
+
;
}
}
}
Confidence
=
(
TotalSequence
NegativeSequenceCount
)
/
TotalSequence
*
FrequentCharCount
/
TotalCharacters
;
return
Confidence
;
}
Confidence
Detecting
(
InputText
)
{
for
each
character
in
InputText
{
TotalCharacters
+
+
;
Find
its
frequency
order
in
frequency
table
;
If
(
Frequency
order
<
SampleSize
)
{
FrequentCharCount
+
+
;
If
we
do
not
have
lastChar
{
lastChar
=
thisChar
;
continue
;
}
if
either
lastChar
and
thisChar
are
high
byte
char
{
TotalSequence
+
+
;
If
Sequence
(
lastChar
thisChar
)
belongs
to
NegativeSequenceSet
NetgativeSequenceCount
+
+
;
}
}
}
Confidence
=
(
TotalSequence
NegativeSequenceCount
)
/
mTotalSequence
*
FrequentCharCount
/
TotalCharacters
;
return
Confidence
;
}
There
are
several
things
in
the
algorithm
that
need
to
be
explained
.
First
this
sequence
analysis
is
not
done
to
all
characters
.
We
can
build
a
256
by
X256
matrix
to
cover
all
those
sequences
but
many
of
those
are
language
/
encoding
irrelevant
and
thus
unnecessary
.
Since
most
languages
uses
fewer
then
64
letters
the
most
frequently
used
64
characters
seems
covered
all
the
language
specificirrelevant
to
language
/
encoding
analysis
and
thus
unnecessary
.
Since
most
single
-
byte
languages
use
fewer
then
64
letters
the
most
frequently
used
64
characters
seem
to
cover
almost
characters
.
This
way
the
matrix
can
be
reduced
to
64X64
that
is
much
smaller
.
The
frequency
table
we
used
to
find
a
character
s
frequency
order
is
not
strictly
the
one
that
program
got
from
my
Russian
sample
.
Some
characters
like
0x0d
0x0a
are
very
similar
to
space
characters
they
have
been
eliminated
from
matrix
by
assigning
them
a
higher
frequency
order
.
Second
for
all
sequences
covered
by
this
64X64
model
some
sequence
is
also
irrelevant
to
language
/
encoding
.
Almost
all
single
-
byte
language
encoding
include
ASCII
as
a
subset
it
is
very
common
to
see
a
lot
of
English
words
in
other
language
s
context
especially
on
web
sites
.
It
is
also
obvious
that
space
-
space
sequence
has
no
connection
with
any
language
encoding
.
A
simple
judge
used
in
the
algorithm
is
to
make
sure
there
is
at
least
one
characters
whose
is
bigger
than
128
.
For
Russian
since
Russian
lettered
are
bigger
than
128
we
can
only
count
those
sequence
that
both
characters
are
bigger
than
128
.
Third
we
calculating
confidence
we
need
to
also
consider
how
many
characters
are
counted
.
If
all
characters
are
fallen
into
those
characters
that
we
ignored
in
our
analysis
sequence
distribution
itself
may
still
return
us
a
high
value
since
less
negative
sequence
is
found
too
.
Comparison
Code
scheme
For
many
single
-
byte
encodings
all
code
points
are
used
.
And
even
for
those
do
have
some
unallocated
code
points
they
are
seldom
used
and
unsuitable
for
encoding
detection
.
But
for
some
multi
-
byte
encodings
this
method
leads
to
very
good
result
and
is
very
efficient
fast
.
However
because
some
multi
-
byte
encoding
like
EUC
-
CN
and
EUC
-
KR
because
they
share
almost
identical
coding
points
it
is
very
hard
to
discriminated
between
them
.
Considering
the
fact
that
browser
does
not
have
a
large
amount
of
text
to
do
this
work
we
must
resort
to
other
method
to
resolve
the
problem
.
For
7
-
bit
multi
-
bye
encoding
like
ISO
-
2022
and
HZ
this
method
produce
very
satisfactory
result
.
Very
Good
for
7
-
bit
multi
-
bye
encoding
like
ISO
-
2022
and
HZ
Good
for
some
multi
-
byte
encoding
like
SJIS
and
EUC
-
JP
Not
very
useful
for
single
-
byte
encodings
.
Can
apply
to
any
kind
of
text
Fast
and
efficient
.
Character
Distribution
For
multi
-
byte
encodings
and
especially
those
that
could
not
be
handled
by
code
scheme
character
distribution
seems
our
only
help
if
we
do
not
want
to
dig
into
complicated
context
analysis
.
For
single
-
byte
encodings
because
the
sample
size
is
too
small
and
there
are
so
many
possible
encodings
I
doubt
it
will
produce
good
result
except
some
special
situation
.
Since
2
-
Char
Sequence
allall
the
language
specific
characters
.
This
way
the
matrix
can
be
reduced
to
64
by
4X64
which
is
much
smaller
.
So
we
are
using
64
as
our
SampleSize
in
this
work
.
The
64
characters
we
choose
to
build
our
model
are
mostly
based
on
the
frequency
statistics
with
some
adjustment
allowed
.
Some
characters
such
as
0x0d
and
0x0a
play
roles
very
similar
to
the
space
character
(
0x20
)
in
our
perspective
and
thus
have
been
eliminated
from
the
sampling
.
Second
for
all
the
sequences
covered
by
this
64
by
X64
model
some
sequences
are
also
irrelevant
to
detecting
language
/
encoding
.
Almost
all
single
-
byte
language
encodings
include
ASCII
as
a
subset
it
is
very
common
to
see
a
lot
of
English
words
in
data
from
other
languages
especially
on
web
sites
.
It
is
also
obvious
that
the
space
-
space
sequence
has
no
connection
with
any
language
encoding
.
Those
are
considered
as
noise
in
our
detection
and
are
removed
by
filtering
.
Third
in
calculating
confidence
we
need
to
also
count
the
number
of
characters
that
fall
into
our
sample
range
and
those
that
do
not
.
If
most
of
the
characters
in
a
small
sample
data
do
not
fall
into
our
sampling
range
the
sequence
distribution
itself
may
return
us
a
high
value
since
very
few
negative
sequences
might
be
found
in
such
a
case
.
After
filtering
most
of
those
characters
that
have
been
fed
to
the
detector
should
fall
into
the
sampling
range
if
the
text
is
in
the
desired
encoding
.
So
the
confidence
obtained
from
counting
negative
sequences
needs
to
be
adjusted
by
this
number
.
To
summarize
the
foregoing
:
Only
a
subset
of
all
the
characters
are
used
for
character
set
identification
.
This
keeps
our
model
small
.
We
also
improved
detection
accuracy
by
reducing
noise
.
Each
language
model
is
generated
by
a
script
/
tool
.
Handling
of
Latin
Alphabet
characters
:
If
the
language
does
not
use
Latin
Alphabet
letters
Alphabet
-
letter
to
Alphabet
-
letter
sequences
are
removed
as
noise
for
detection
.
(
e
.
g
.
English
words
frequently
appear
in
web
pages
of
other
languages
.
)
If
the
language
does
use
Latin
Alphabet
letters
those
sequences
are
kept
for
analysis
.
The
number
of
characters
that
fall
into
our
sample
range
and
those
that
do
not
are
counted
so
that
they
can
be
used
in
calculating
the
Confidence
Level
.
5
.
Comparison
of
son
of
the
3
methods
:
5
.
1
.
Code
scheme
:
For
many
single
-
byte
encodings
all
code
points
are
used
fairly
evenly
.
And
even
for
those
encodings
whichthat
do
contain
some
unused
code
points
those
unused
code
points
are
seldom
used
in
other
encodings
and
are
thus
unsuitable
for
encoding
detection
.
For
some
multi
-
byte
encodings
this
method
leads
to
a
very
good
result
and
is
very
efficient
.
However
because
some
multi
-
byte
encodings
such
as
EUC
-
CN
and
EUC
-
KR
share
almost
identical
coding
points
it
is
very
hard
to
discriminatedistinguish
betweenamong
such
encodings
with
this
method
.
Considering
the
fact
that
a
browser
normally
does
not
have
a
large
amount
of
text
we
must
resort
to
other
methods
to
decide
on
an
encoding
.
For
7
-
bit
multi
-
bye
encodings
like
ISO
-
2022
-
xx
and
HZ
which
use
easily
recognizable
escape
or
shift
sequences
this
method
produces
satisfactory
results
.
Summarizing
the
Code
Scheme
method
It
is
very
good
for
7
-
bit
multi
-
byte
encodings
like
ISO
-
2022
-
xx
and
HZ
.
It
is
good
for
some
multi
-
byte
encoding
like
Shift_JIS
and
EUC
-
JP
but
not
for
others
like
EUC
-
CN
and
EUC
-
KR
.
It
is
not
very
useful
for
single
-
byte
encodings
.
It
can
apply
to
any
kind
of
text
.
It
is
fast
and
efficient
.
5
.
2
.
Character
Distribution
:
For
multi
-
byte
encodings
and
especially
those
that
can
not
be
handled
reliably
by
the
Code
Scheme
method
Character
Distribution
offers
strong
help
without
if
we
do
not
want
to
digging
into
complicated
context
analysis
.
For
single
-
byte
encodings
because
the
input
data
size
is
usually
small
and
there
are
so
many
possible
encodings
it
is
unlikely
to
produce
good
results
except
under
some
special
situations
.
Since
the
2
-
Char
Sequence
Distribution
method
leads
to
a
very
good
detection
result
in
such
a
case
we
have
not
gone
further
with
this
method
on
single
-
byte
encodings
.
Summarizing
these
points
the
Character
Distribution
Method
Distribution
leads
to
very
good
detecting
result
I
did
not
go
any
further
.
It
is
very
good
for
multi
-
byte
encodings
.
It
only
applies
to
typical
text
.
It
is
fast
and
efficient
.
5
.
3
.
2
-
Char
Sequence
Distribution
:
In
the
2
-
Char
Sequence
distribution
we
are
usingDistribution
method
we
can
use
more
information
todata
in
detecting
language
/
encodings
.
That
leads
to
good
resultsconfidence
even
with
a
very
small
data
sample
.
But
because
sequences
are
used
instead
of
separated
characters
words
(
separated
by
a
space
)
the
matrix
will
be
very
big
if
it
was
to
apply
to
multi
-
byte
languages
.
Thus
this
method
:
Veryis
very
good
for
single
-
byte
encodings
.
Notis
not
efficient
for
multi
-
byte
encodings
.
can
leads
to
good
resultsconfidence
with
even
small
sample
size
.
only
applyapplies
to
typical
text
.
6
.
A
composite
Approach
:
6
.
1
.
Combining
the
3
methods
:
LConsidering
the
fact
that
languages
/
encodings
we
want
to
cover
inwith
our
charset
auto
-
detector
includes
a
number
ofvarious
multi
-
byte
multi
-
byte
and
single
-
byte
encodings
.
Given
the
deficiencies
of
each
method
none
of
the
3
methods
alone
can
produce
truly
satisfactory
results
.
We
propose
therefore
a
composite
approach
hasneeds
to
be
used
in
order
to
get
a
satisfactory
result
for
which
can
deal
with
both
types
of
encodings
.
The
2
-
Char
Sequence
Distribution
method
is
used
for
all
single
-
byte
encoding
detections
.
detection
.
The
Code
Scheme
method
is
used
for
UTF
-
8
ISO
-
2022
-
xx
and
HZ
detection
.
In
UTF
-
8
detection
a
small
modification
has
been
made
to
the
existing
state
machine
.
The
UTF
-
8
detector
declares
its
success
after
several
multi
-
byte
sequences
have
been
identified
.
(
See
Martin
Duerst
s
(
1977
)
detail
discussion
in
<
http
:
/
/
www
.
ifi
.
unizh
.
ch
/
groups
/
mml
/
people
/
mduerst
/
papers
/
PDF
/
IUC11
-
UTF
-
8
.
pdf
>
)
.
Both
the
Code
Scheme
and
Character
Distribution
methods
are
used
for
other
majorpopular
East
Asian
Charset
includescharacter
encodings
such
as
GB2312
Big5
EUC
-
TW
EUC
-
KR
Shift_JIS
and
EUC
-
JP
.
For
Japanese
encodings
like
Shift_JIS
and
EUC
-
JP
the
2
-
Char
Sequence
Distribution
method
can
also
be
used
because
containsthey
contain
a
significant
number
of
Hiragana
which
works
very
similar
as
letters
in
other
languages
Hiragana
syallbary
characters
which
work
like
letters
in
single
-
byte
languages
.
The
2
-
Char
Sequence
Distribution
method
can
achieve
an
accurate
result
with
less
text
material
.
the
2
-
Char
Sequence
Distribution
method
can
also
be
used
in
this
case
.
We
tried
both
approaches
-
-
one
with
the
2
-
Char
Distribution
Method
and
the
other
without
.
approaches
Band
allboth
lead
to
quitevery
satisfactory
results
.
The
2
-
Char
Sequence
Distribution
method
can
achieve
an
accurate
result
with
less
text
material
.
We
notice
that
someThere
are
some
web
sites
which
contain
a
lot
of
Kanji
and
Katakana
characters
but
only
a
few
Hiragana
characters
.
To
achieve
the
best
possible
result
a
better
result
without
losing
anything
wWe
use
both
the
Character
Distribution
and
2
-
CharDistribution
methods
methods
for
Japanese
encoding
detection
.
Here
then
is
one
example
of
how
these
3
detection
methods
are
used
together
.
TThe
upper
most
control
modules
ismodule
(
for
auto
-
detectors
)
has
an
algorithm
like
followings
:
the
following
:
Charset
AutoDetection
(
InputText
)
{
if
(
all
characters
in
InputText
are
ASCII
)
{
if
InputText
contains
ESC
or
~
{
{
call
ISO
-
2022
and
HZ
detector
with
InputText
;
if
one
of
them
succeed
return
that
charset
otherwise
return
ASCII
;
}
else
return
ASCII
;
}
else
if
(
InputText
start
with
BOM
)
{
return
UCS2
;
}
else
{
Call
all
multi
-
byte
detectors
and
single
-
byte
detectors
;
Return
the
one
with
best
confidence
;
}
}
Summarizing
the
sequences
in
the
code
fragment
above
Mostof
web
pages
are
still
encoded
in
ASCII
.
This
top
-
level
control
algorithm
also
begins
withcontains
an
ASCII
verifier
.
AllIf
all
characters
are
ASCII
ones
there
is
no
need
to
launch
other
detectors
except
ISO
-
2022
-
xx
and
HZ
ones
.
.
ISO
-
2022
-
xx
and
HZ
detectors
are
launched
only
after
encountering
ESC
or
~
{
is
met
and
they
are
killedabandoned
immediately
when
a
8
-
bit
byte
is
met
.
BOM
is
being
searched
to
identify
UCS2
.
We
found
that
some
web
sites
send
0x00
inside
http
stream
and
useusing
this
byte
to
identify
UCS2
is
not
reliable
.
for
identifying
UCS2
proved
to
be
unreliable
.
If
any
one
of
the
active
detectors
received
enough
data
and
reachedreaches
a
high
level
of
confidence
the
entire
whole
auto
-
detecting
process
will
be
terminated
and
that
charset
will
be
returned
as
thedetecting
result
.
This
is
called
shortcut
.
6
.
2
.
Test
Results
:
As
a
test
for
the
approach
advocated
in
this
paper
wWe
tried
to
appliedy
our
detector
(
s
)
to
the
home
pages
oftop
100
popular
international
web
sites
-
-
-
by
what
statistics
?
-
-
-
without
utilizing
any
without
document
-
based
or
server
-
sent
HTTP
charset
information
provided
either
through
a
document
-
based
meta
tag
or
charset
info
sent
from
an
HTTP
server
.
Fand
for
all
the
encodings
covered
by
our
detector
(
s
)
we
were
able
to
achieve
100
%
accuracy
rate
.
For
example
wWhen
visiting
a
web
site
that
provides
no
charset
information
(
e
.
g
.
like
the
web
site
at
HYPERLINK
"
http
:
/
/
www
.
yahoo
.
co
.
jp
"
http
:
/
/
www
.
yahoo
.
co
.
jp
before
its
server
started
sending
the
charset
infoo
.
co
.
jp
)
our
charset
detector
(
s
)
generates
output
like
the
following
:
follows
:
[
UTF8
]
is
inactive
[
SJIS
]
is
inactive
[
EUCJP
]
detector
has
confidence
0
.
950000
[
GB2312
]
detector
has
confidence
0
.
150852
[
EUCKR
]
is
inactive
[
Big5
]
detector
has
confidence
0
.
129412
[
EUCTW
]
is
inactive
[
Windows
-
1251
]
detector
has
confidence
0
.
010000
[
KOI8
-
R
]
detector
has
confidence
0
.
010000
[
ISO
-
8859
-
5
]
detector
has
confidence
0
.
010000
[
x
-
mac
-
cyrillic
]
detector
has
confidence
0
.
010000
[
IBM866
]
detector
has
confidence
0
.
010000
[
IBM855
]
detector
has
confidence
0
.
010000
This
then
leads
to
the
determination
that
EUC
-
JP
is
the
most
likely
encoding
for
this
site
.
7
.
Conclusion
:
The
composite
approach
that
utilizes
Code
Scheme
Character
Distribution
and
2
-
Char
Sequence
Distribution
methods
to
identify
language
/
encodings
has
been
proven
to
be
very
effective
and
efficient
in
our
environment
in
our
work
.
We
covered
Unicode
encodings
multi
-
byte
encodings
and
single
-
byte
encodings
.
These
are
representative
encodings
are
representatives
in
our
current
digital
text
on
the
Internet
.
It
is
reasonable
to
believe
that
this
method
can
be
extended
to
cover
the
rest
of
the
encodings
not
covered
mentioned
in
this
paper
.
Though
only
encodings
information
is
desired
in
our
detection
results
at
this
time
language
is
also
identified
in
most
cases
.
In
fact
both
Character
Ddistribution
and
2
-
Char
Sequence
Ddistribution
methods
rely
on
characteristic
distributional
patternsinformation
of
different
language
characterss
.
Only
in
the
case
of
UTF16
and
UTF8
encoding
is
detected
but
the
language
remains
unknown
.
But
even
in
such
cases
this
work
can
still
be
easily
extended
to
cover
language
detection
in
future
.
The
3
methods
outlined
here
have
been
implemented
in
Netscape
6
.
1
PR1
and
later
versions
as
the
Detect
All
option
.
We
expect
our
work
in
auto
-
detection
to
free
our
users
further
from
having
to
deal
with
cumbersome
manipulations
of
the
Character
Coding
menu
.
The
Character
Coding
menu
(
or
Encoding
menu
for
others
)
is
different
from
other
UI
items
in
the
Internet
client
in
that
it
exposes
part
of
the
i18n
backend
to
general
users
.
Its
existence
itself
is
a
mirror
of
how
messy
today
s
web
pages
are
when
it
comes
to
language
/
encoding
.
We
hope
that
offering
good
encoding
default
and
universal
auto
-
detection
will
help
alleviate
most
of
the
encoding
problems
our
users
encounter
in
surfing
the
net
.
Web
standards
are
shifting
toward
Unicode
particularly
toward
UTF
-
8
as
the
default
encoding
.
We
expect
gradual
increase
of
its
use
on
the
web
.
Such
shifts
need
not
be
overt
as
more
and
more
users
are
freed
from
confronting
issues
related
to
encoding
while
browsing
or
reading
/
sending
messages
thanks
in
part
to
auto
-
detection
.
This
is
why
we
advocate
good
auto
-
detection
and
good
default
encoding
settings
for
Internet
clients
.
.
8
.
Future
WorksWork
:
Our
auto
-
detection
identifies
a
language
.
The
encoding
determination
is
a
byproduct
of
that
determination
.
For
the
current
work
we
only
covered
Russian
as
an
example
of
single
-
byte
implementation
.
Since
it
identifies
a
language
and
only
then
which
encoding
it
uses
the
more
language
data
models
there
are
the
better
the
quality
of
encoding
detection
.
For
the
time
being
current
work
we
only
cover
cyrillicRussian
as
an
example
of
single
-
byte
implementation
.
To
add
other
single
-
byte
languages
/
encodings
it
needswe
need
a
large
amount
of
text
samples
andsample
data
for
each
language
and
certain
degree
of
language
knowledge
/
analysis
.
We
currently
use
a
script
to
generate
a
language
model
for
all
the
encodings
for
that
language
.
This
work
is
at
present
not
in
the
Mozilla
source
but
we
hope
to
make
it
public
in
the
near
future
.
When
we
do
wWe
hope
people
with
the
above
such
qualification
maywill
contribute
in
this
area
.
Because
we
have
not
yet
testednot
many
single
-
byte
encodings
arehave
been
tested
it
is
likely
that
the
model
we
proposed
here
needs
to
be
tuned
or
even
redesigned
in
certain
degreefine
-
tuned
modified
or
possibly
even
re
-
designed
when
applying
to
other
languages
/
encodings
.
9
.
References
:
Duerst
Martin
.
1977
.
The
Properties
and
Promizes
of
UTF
-
8
.
11th
Unicode
Conference
.
http
:
/
/
www
.
ifi
.
unizh
.
ch
/
groups
/
mml
/
people
/
mduerst
/
papers
/
HYPERLINK
"
http
:
/
/
www
.
ifi
.
unizh
.
ch
/
groups
/
mml
/
people
/
mduerst
/
papers
/
PDF
/
IUC11
-
UTF
-
8
.
pdf
"
IUC11
-
UTF
-
8
.
pdf
Mandarin
Promotion
Council
Taiwan
.
Annual
survey
results
of
Traditional
Chinese
character
usage
.
http
:
/
/
www
.
edu
.
tw
/
mandr
/
result
/
87news
/
index1
.
htm
Mozilla
Internationalization
Projects
.
HYPERLINK
"
http
:
/
/
www
.
mozilla
.
org
/
projects
/
intl
"
http
:
/
/
www
.
mozilla
.
org
/
projects
/
intl
Mozilla
.
org
.
HYPERLINK
"
http
:
/
/
www
.
mozilla
.
org
/
"
http
:
/
/
www
.
mozilla
.
org
/
Mozilla
source
viewing
.
http
:
/
/
lxr
.
mozilla
.
org
/
HYPERLINK
"
"
A
Composite
approach
to
Language
/
Encoding
Detection
19th
International
Unicode
Conference
PAGE
1
San
Jose
September
2001
Returns
results
Auto
-
detector
Returned
results
Input
Data
Input
Data
4
5
6
B
Z
j
k
q
<
B
H
M
[
~
sh
s
cH
dh
V
gH
o
(
H
h
V
H
o
(
CJ
o
(
H
h
V
H
CJ
o
(
H
hp
V
H
CJ
o
(
CJ
cH
dhp
V
gH
o
(
H
h
V
H
CJ
o
(
H
h
eW
H
5
CJ
o
(
H
h
eW
H
5
CJ
o
(
5
CJ
o
(
5
CJ
5
mH
5
mH
o
(
mH
o
(
5
o
(
o
(
CJ
o
(
5
CJ
o
(
CJ
h
#
5
6
Z
T
U
]
^
b
q
D
C
E
eW
5
6
Z
T
U
]
^
b
q
r
)
*
6
7
?
+
}
z
:
;
\
]
/
0
i
j
y
0
C
I
+
4
<
H
k
h
t
y
~
A
B
D
L
M
O
9
_
u
w
cH
dh
S
gH
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
S
H
cH
dh
S
gH
o
(
H
h
S
H
o
(
o
(
H
h
V
H
CJ
o
(
CJ
o
(
H
h
V
H
CJ
o
(
2
+
Z
:
=
B
K
b
d
e
f
m
n
9
S
\
f
5
B
^
a
H
h
V
H
CJ
o
(
H
h
W
H
o
(
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
H
h
S
H
o
(
o
(
cH
dh
S
gH
cH
dh
S
gH
o
(
<
a
b
o
p
q
r
zocQH
<
H
h
V
H
j
H
h
V
H
"
j
U
cH
dh
V
gH
mH
nH
H
h
V
H
5
o
(
H
h
V
H
5
j
U
mH
nH
j
5
U
mH
nH
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
!
H
h
V
H
5
W
V
o
(
H
h
V
H
5
o
(
H
h
V
H
o
(
o
(
H
h
V
H
o
(
CJ
o
(
CJ
cH
dh
S
gH
o
(
q
r
u
s
.
.
D
C
E
V
D
C
E
V
D
C
E
V
2
g
o
p
)
E
{
p
{
e
{
YH
!
H
h
V
H
5
W
V
o
(
H
h
V
H
5
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
o
(
H
h
V
H
o
(
H
h
V
H
j
H
h
V
H
H
h
V
H
o
(
k
&
D
C
E
V
D
C
E
V
N
C
p
E
V
)
*
u
u
u
0
D
C
E
V
D
C
E
V
D
C
E
V
6
7
?
p
p
D
C
E
V
C
D
C
E
V
.
/
0
8
:
;
<
=
B
I
V
b
{
~
A
X
Z
]
k
m
n
u
}
}
rgr
g
cH
dh
S
gH
o
(
H
h
S
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
cH
dh
V
gH
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
cH
dh
V
gH
o
(
o
(
(
5
6
7
9
;
W
^
q
w
3
>
C
0
1
:
>
*
+
U
W
d
j
H
h
V
H
CJ
o
(
H
h
V
H
CJ
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
H
h
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
;
+
s
q
D
C
E
V
D
C
E
S
!
!
"
a
"
|
"
}
"
%
!
%
)
'
*
'
'
(
)
)
d
*
e
*
+
-
-
.
.
/
0
'
0
(
0
)
0
0
0
0
0
0
0
0
0
~
{
vqmh
0
^
k
^
J
L
C
\
a
\
\
:
;
N
O
'
!
!
!
!
'
!
0
!
9
!
!
C
!
!
!
!
!
"
"
"
"
"
N
"
T
"
a
"
f
"
s
"
{
"
}
"
|
#
#
#
#
#
"
4
|
|
okok
cH
dh
S
gH
o
(
mH
o
(
H
h
V
H
mH
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
o
(
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
S
H
o
(
H
h
V
H
o
(
!
H
h
V
H
5
W
V
o
(
H
h
S
H
o
(
CJ
o
(
H
h
V
H
CJ
o
(
CJ
cH
dh
V
gH
o
(
%
!
!
"
a
"
|
"
}
"
%
!
%
)
'
u
u
r
p
p
p
u
D
C
E
S
D
C
E
V
4
8
=
B
N
P
|
%
%
a
%
c
%
{
%
%
%
%
%
%
%
%
%
%
%
%
&
&
&
&
&
&
&
&
C
&
j
&
s
&
&
&
&
&
&
&
&
&
&
&
&
&
&
&
&
&
&
'
'
)
'
*
'
5
'
6
'
cH
dh
:
V
gH
H
h
S
H
cH
dh
V
gH
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dh
;
V
gH
o
(
H
h
;
V
H
o
(
cH
dh
S
gH
cH
dh
S
gH
o
(
o
(
H
h
S
H
o
(
;
)
'
*
'
'
(
u
.
F
&
F
\
E
S
F
&
F
\
E
p
V
C
E
S
6
'
8
'
9
'
=
'
B
'
P
'
S
'
]
'
c
'
l
'
m
'
n
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
(
(
4
(
7
(
:
(
F
(
s
(
}
(
~
(
(
(
(
(
(
(
(
(
)
)
)
)
!
)
7
)
A
)
)
)
)
cH
dh
;
V
gH
H
h
;
V
H
o
(
H
h
S
H
"
H
h
S
H
cH
dh
:
V
gH
cH
dh
:
V
gH
H
h
:
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
cH
dh
S
gH
o
(
o
(
cH
dh
V
gH
H
h
V
H
o
(
5
(
)
)
d
*
e
*
+
q
D
C
E
f
V
F
&
F
\
E
S
)
)
)
*
*
c
*
d
*
*
*
*
*
*
*
I
+
J
+
O
+
+
+
+
0
1
9
A
c
-
d
-
l
-
u
-
~
-
-
-
{
pep
cH
dhG
V
gH
o
(
cH
dh
V
gH
o
(
cH
dhg
V
gH
o
(
H
h
V
H
o
(
H
hg
V
H
o
(
cH
dh
S
gH
o
(
H
hC
V
H
o
(
cH
dhB
V
gH
o
(
H
hB
V
H
o
(
H
h
S
H
H
h
S
H
o
(
H
hf
V
H
o
(
H
hA
V
H
o
(
cH
dhA
V
gH
o
(
o
(
'
+
-
-
.
.
/
0
m
D
C
E
H
V
H
&
F
^
C
E
C
V
-
-
-
-
-
-
-
-
-
-
-
-
-
.
.
.
.
6
.
l
.
m
.
v
.
z
.
.
.
.
.
%
/
'
/
4
/
|
qfq
]
qfqfR
H
hL
V
H
o
(
H
hK
V
H
H
hK
V
H
o
(
H
hI
V
H
o
(
H
hH
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
H
h
W
H
o
(
H
hC
V
H
o
(
cH
dh
V
gH
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
o
(
cH
dhT
UfgH
o
(
o
(
cH
dh
V
gH
o
(
cH
dhi
V
gH
o
(
4
/
?
/
/
/
/
/
/
0
0
'
0
(
0
)
0
-
0
:
0
;
0
E0
^
0
c0
0
0
0
0
0
0
0
L1
M1
N1
d1
h1
r1
~
1
w
la
V
H
hU
V
H
o
(
cH
dhS
V
gH
o
(
H
hS
V
H
o
(
5
W
U
V
o
(
cH
dhj
V
gH
o
(
H
hj
V
H
o
(
H
h
S
H
o
(
H
hO
V
H
o
(
!
H
hO
V
H
5
W
O
V
o
(
o
(
cH
dh
S
gH
o
(
H
hH
V
H
o
(
H
hi
V
H
o
(
H
hN
V
H
o
(
H
hL
V
H
o
(
H
hL
V
H
0
'
0
(
0
)
0
0
0
0
0
0
0
u
u
s
u
s
s
g
g
&
#
/
D
C
E
O
V
D
C
E
N
V
0
0
0
0
0
0
0
0
1
1
0
}
0
}
4
2
l
t
0
t
*
&
#
/
&
#
/
2
l
t
0
t
*
0
0
0
0
0
0
1
1
1
1
1
1
1
#
1
1
)
1
11
21
71
?
1
1
E1
M1
N1
i1
q1
r1
s1
t1
u1
v1
w1
x1
y1
z1
{
1
|
1
}
1
~
{
xurolifc
6
7
8
9
:
;
<
=
>
?
'
A
I
d
e
m
r
s
{
%
1
1
1
1
1
1
#
1
1
)
1
11
21
71
?
1
1
E1
4
}
4
}
8
8
}
8
2
l
t
0
t
*
&
#
/
&
#
/
2
l
t
0
t
*
E1
M1
N1
i1
q1
r1
o
2
l
t
0
t
*
&
#
/
&
#
/
2
l
t
0
t
*
&
#
/
C
r1
s1
t1
u1
v1
w1
x1
y1
z1
{
1
|
1
}
1
u
u
u
u
u
u
u
u
u
u
D
C
E
U
V
D
'
C
E
U
V
}
1
~
1
1
1
1
1
1
1
2
2
2
2
3
3
3
3
3
3
3
3
!
3
)
3
*
3
.
3
63
73
;
3
C3
D3
I3
Q3
R3
W3
_3
3
e3
m3
n3
|
wrnid
E
M
R
S
[
a
i
n
o
w
{
|
'
4
5
%
}
1
~
1
1
1
1
1
u
s
.
s
D
C
E
o
V
D
'
C
E
U
V
D
C
E
U
V
~
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
12
22
82
92
2
C2
D2
}
2
~
2
2
2
~
s
~
hZQ
cH
dh
W
gH
j
U
cH
dh
W
gH
cH
dhn
V
gH
o
(
cH
dhw
V
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
cH
dh
S
gH
o
(
H
hk
V
H
o
(
cH
dhk
V
gH
o
(
H
hk
V
H
5
o
(
H
ho
V
H
5
o
(
o
(
H
hj
V
H
o
(
W
j
V
o
(
H
hl
V
H
o
(
1
1
1
2
2
2
2
3
s
p
p
D
C
E
o
V
D
C
E
k
V
2
2
2
2
2
2
2
2
2
3
n3
}
3
3
3
3
3
3
3
3
4
4
4
4
4
4
#
4
4
.
4
74
M4
zqz
f
f
zfz
[
zP
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
!
H
h
V
H
5
W
V
o
(
5
W
]
V
o
(
5
W
\
V
o
(
o
(
cH
dhn
V
gH
o
(
H
ho
V
H
o
(
0J
cH
dh
W
gH
j
U
cH
dh
W
gH
j
U
cH
dh
W
gH
3
3
3
3
3
3
3
3
!
3
)
3
*
3
.
3
63
73
;
3
C3
D3
I3
0
0
4
4
4
8
0
l
t
0
Z
.
0
l
t
0
Z
.
I3
Q3
R3
W3
_3
3
e3
m3
n3
o3
3
3
8
8
}
{
'
D
'
C
E
o
V
0
l
t
0
Z
.
n3
o3
3
3
3
3
74
t5
u5
v5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
6
6
6
6
6
6
zuqlgc
<
=
>
{
'
C
'
D
3
3
3
74
t5
u5
r
-
D
C
E
S
D
C
E
V
C
D
C
E
V
M4
W4
a4
e4
h4
}
4
4
4
4
4
4
4
4
4
%
5
25
95
g5
j5
s5
t5
u5
v5
5
6
6
6
R6
S6
T6
a6
c6
}
qeqY
H
h
V
H
5
o
(
H
h
V
H
5
o
(
H
h
V
H
5
o
(
H
h
V
H
o
(
H
hT
V
H
o
(
o
(
5
W
V
o
(
H
h
S
H
o
(
"
H
h
S
H
cH
dh
V
gH
cH
dh
S
gH
cH
dh
V
gH
o
(
%
H
h
S
H
cH
dh
{
V
gH
o
(
%
H
h
S
H
cH
dh
V
gH
o
(
cH
dh
S
gH
o
(
u5
v5
5
5
5
5
5
5
5
0
|
K0
0
l
t
0
Z
.
0
l
t
0
Z
.
D
C
E
S
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
6
6
6
6
6
6
4
4
4
8
8
8
0
l
t
0
Z
.
6
6
R6
b6
c6
6
6
6
7
7
7
7
7
%
7
(
7
07
17
57
=
7
>
7
B7
J7
K7
O7
W7
X7
]
7
e7
f7
k7
s7
t7
y7
7
7
7
7
{
wrmid_
'
/
'
0
1
9
>
?
G
L
M
U
Z
[
c
g
h
p
t
u
}
O
P
'
'
6
6
R6
b6
c6
6
6
6
7
7
q
q
q
n
n
D
C
E
V
'
D
'
C
E
V
c6
6
6
7
7
7
%
7
07
17
=
7
>
7
J7
K7
W7
X7
e7
f7
s7
t7
7
7
7
7
7
7
7
8
>
8
?
8
8
A8
8
8
8
8
8
8
8
8
8
9
{
p
H
h
V
H
o
(
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
H
h
V
H
o
(
!
H
h
V
H
5
W
V
o
(
H
h
V
H
o
(
o
(
W
V
o
(
H
h
V
H
o
(
(
7
7
7
7
%
7
(
7
07
17
57
=
7
>
7
B7
J7
K7
O7
W7
X7
]
7
0
0
4
4
4
8
0
l
t
0
0
l
t
0
]
7
e7
f7
k7
s7
t7
y7
7
7
7
7
7
7
8
8
}
{
{
'
D
'
C
E
V
0
l
t
0
7
7
7
7
7
;
;
;
;
>
>
RA
SA
A
A
GB
HB
rC
sC
C
C
F
F
F
F
I
I
J
J
J
J
K
K
K
K
VL
XL
fL
gL
M
M
M
M
N
N
N
N
~
{
xu
a
v
w
"
y
z
2
3
'
(
.
7
7
7
;
;
u
0
.
D
C
E
V
D
C
E
V
D
C
E
V
9
9
9
9
-
9
39
79
A9
F9
J9
W9
Y9
Z9
[
9
9
e9
9
9
9
9
9
:
F
:
f
:
h
:
p
:
x
:
y
:
:
|
qf
[
P
P
cH
dh
V
gH
o
(
H
hZ
V
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
hY
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
H
h
V
H
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dh
V
gH
o
(
:
:
:
:
:
:
:
:
:
:
u
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
<
<
'
<
-
<
?
<
H
<
I
<
J
<
t
h
]
]
]
R
cH
dh
V
gH
o
(
H
h
S
H
o
(
H
h
S
H
5
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
\
V
H
o
(
H
h
\
V
H
H
h
W
H
o
(
cH
dh
V
gH
o
(
cH
dhY
V
gH
o
(
cH
dhZ
V
gH
o
(
cH
dh
[
V
gH
o
(
%
H
h
S
H
cH
dh
[
V
gH
o
(
cH
dh
S
gH
o
(
o
(
H
h
[
V
H
o
(
;
;
;
>
>
RA
SA
A
A
GB
HB
rC
sC
C
q
D
C
E
V
D
C
E
S
J
<
W
<
f
<
q
<
z
<
|
<
<
<
<
=
=
=
"
=
(
=
/
=
\
=
]
=
o
=
p
=
=
=
=
=
=
=
=
>
>
l
>
>
>
>
>
>
>
>
>
>
>
?
?
3
?
B
?
C
?
H
?
I
?
W
?
\
?
]
?
_
?
?
|
?
?
?
?
?
?
?
B
L
g
s
t
}
9A
;
A
QA
SA
WA
[
A
H
h
V
H
o
(
H
h
V
H
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
I
[
A
gA
mA
yA
}
A
A
A
A
A
A
A
B
B
:
B
GB
HB
B
B
B
B
B
B
C
C
3C
4C
GC
KC
QC
\
C
hC
pC
qC
rC
sC
C
C
C
C
C
D
D
(
D
5D
8D
}
}
r
H
h
W
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
H
h
V
H
5
o
(
!
H
h
V
H
5
W
V
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
5
W
V
o
(
H
h
S
H
5
W
V
C
C
F
F
F
F
u
0
.
D
C
E
S
D
C
E
V
D
C
E
V
8D
9D
>
D
?
D
SD
rD
D
D
D
D
D
D
D
D
E
E
E
E
E
1E
9E
>
E
CE
_E
E
oE
pE
tE
uE
E
E
E
E
E
E
E
E
E
E
E
E
v
vkv
v
v
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
W
H
(
E
E
E
E
F
F
%
F
.
F
F
F
F
F
F
F
F
F
F
F
F
F
F
G
!
G
(
G
OG
QG
lG
tG
G
G
G
G
G
G
H
H
H
H
H
H
AH
|
q
|
q
q
|
q
|
q
q
|
q
f
|
H
h
V
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
H
h
S
H
5
o
(
H
h
V
H
5
o
(
H
h
V
H
5
o
(
H
h
V
H
5
o
(
!
H
h
S
H
5
W
V
o
(
H
h
W
H
o
(
H
h
]
V
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
(
AH
gH
hH
uH
H
H
H
H
H
H
I
)
I
BI
PI
WI
aI
dI
wI
|
I
I
I
I
I
I
I
I
J
J
)
J
-
J
J
J
J
J
J
K
'
K
2K
BK
XK
lK
K
K
K
K
K
K
K
K
K
K
XL
_L
gL
L
L
L
L
L
L
L
M
+
M
1M
2M
>
M
DM
IM
NM
M
M
M
M
H
h
V
H
o
(
H
h
V
H
5
o
(
H
h
S
H
H
h
S
H
5
o
(
5
o
(
cH
dh
S
gH
o
(
o
(
H
h
S
H
o
(
H
F
I
I
J
J
J
J
K
K
K
K
VL
XL
fL
gL
M
M
M
M
N
D
C
E
S
M
M
M
N
N
N
N
N
'
N
N
1N
?
N
HN
RN
xN
|
N
N
N
N
N
N
N
N
N
O
O
-
O
6O
:
O
eO
fO
tO
|
O
O
O
O
O
O
P
P
#
P
)
P
P
P
P
P
P
P
P
P
P
P
Q
Q
(
Q
H
hT
Uf
H
H
h
V
H
o
(
H
hT
Uf
H
o
(
cH
dhT
UfgH
o
(
5
o
(
H
h
S
H
5
o
(
H
h
V
H
5
o
(
cH
dh
S
gH
o
(
cH
dhd
V
gH
o
(
H
hd
V
H
o
(
H
h
S
H
o
(
o
(
6
N
N
N
N
N
N
N
N
#
P
]
Q
^
Q
Q
Q
Q
s
s
s
s
s
D
C
E
S
D
C
E
d
V
N
N
N
N
N
#
P
]
Q
^
Q
Q
Q
Q
Q
R
R
\
R
]
R
^
R
_R
R
vR
wR
XT
YT
T
T
T
T
T
T
T
U
U
~
U
U
U
U
U
U
U
U
(
V
LV
PV
QV
tV
V
V
~
{
xu
)
*
.
R
v
w
!
"
p
q
W
^
.
(
Q
;
Q
[
Q
]
Q
^
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
R
R
R
R
[
R
\
R
]
R
^
R
_R
R
gR
vR
wR
R
R
R
R
R
R
}
r_
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
o
(
5
o
(
H
h
S
H
5
o
(
H
h
V
H
5
o
(
H
h
^
V
H
5
o
(
H
h
^
V
H
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
V
H
o
(
cH
dh
S
gH
o
(
H
h
S
H
o
(
o
(
Q
Q
R
R
\
R
]
R
^
R
_R
R
u
u
s
D
C
E
^
V
D
C
E
V
R
vR
wR
XT
YT
T
T
T
T
T
T
s
s
D
C
E
W
V
D
C
E
S
R
R
R
R
R
R
R
S
S
!
S
'
S
3S
5S
qS
rS
S
S
S
9T
<
T
PT
ST
WT
XT
YT
T
T
T
T
T
T
T
T
T
T
T
U
U
=
U
w
l
H
ha
V
H
o
(
!
H
h
^
V
H
5
W
^
V
o
(
H
h
^
V
H
o
(
cH
dhW
V
gH
o
(
H
hW
V
H
o
(
H
h
V
H
o
(
cH
dhV
V
gH
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
S
H
o
(
H
h
W
H
o
(
&
T
T
U
U
~
U
U
s
.
D
C
E
b
V
D
C
E
_
V
D
C
E
^
V
=
U
DU
yU
~
U
U
U
V
V
dW
W
W
W
W
W
W
W
W
W
W
W
W
W
W
X
X
2X
SX
bX
}
r
}
g
\
QFrF
Q
QF
H
h
S
H
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
hh
V
H
o
(
H
hc
V
H
o
(
H
h
V
H
H
h
V
H
o
(
H
h
V
H
o
(
o
(
6
OJ
QJ
W
V
o
(
H
h
^
V
H
OJ
QJ
o
(
H
h_
V
H
OJ
QJ
o
(
H
hb
V
H
o
(
H
ha
V
H
o
(
H
h
V
H
o
(
U
U
U
U
U
U
U
(
V
LV
PV
QV
tV
V
V
V
V
V
D
C
E
^
V
V
V
V
V
V
W
W
W
W
P
V
V
W
W
W
t
.
.
F
C
E
c
V
D
C
E
c
V
F
C
E
V
W
W
W
W
Z
Z
f_
g_
_
r
p
p
p
p
n
D
C
E
S
D
C
E
S
bX
X
X
X
X
X
X
+
Y
4Y
Y
Y
Y
Y
Y
Z
Z
Z
Z
Z
+
[
[
~
[
[
[
[
[
[
[
[
[
[
[
[
[
[
\
#
\
>
\
X
\
f
\
u
\
\
\
\
\
\
\
\
\
cH
dh
V
gH
o
(
H
h
V
H
H
h
V
H
o
(
H
h
W
H
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
cH
dhT
UfgH
o
(
H
h
V
H
o
(
o
(
0
\
\
\
\
]
]
]
]
-
]
1
]
8
]
M
]
O
]
P
]
S
]
U
]
X
]
]
]
]
]
]
]
]
^
^
^
>
^
J
^
K
^
n
^
s
^
v
^
^
^
^
^
^
^
^
^
^
_
_
_
{
p
H
h
W
H
o
(
cH
dh
W
gH
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
S
H
cH
dh
S
gH
H
h
W
H
o
(
cH
dh
S
gH
o
(
o
(
H
h
S
H
o
(
%
H
h
S
H
cH
dh
V
gH
o
(
_
_
_
_
_
'
_
/
_
g_
n_
w_
|
_
_
_
_
_
tb
ub
b
=
e
>
e
e
e
e
e
e
f
l
_TNC
H
h
V
H
o
(
OJ
QJ
o
(
H
h
V
H
o
(
6
OJ
QJ
W
W
o
(
&
6
OJ
QJ
W
W
cH
dh
V
gH
)
6
OJ
QJ
W
W
cH
dh
V
gH
o
(
&
H
h
V
H
6
OJ
QJ
W
W
)
H
h
V
H
6
OJ
QJ
W
W
o
(
H
h
V
H
o
(
H
hj
V
H
H
hj
V
H
o
(
cH
dh
S
gH
o
(
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
_
_
_
_
&
*
f
!
a
+
a
Ka
a
ka
a
a
a
C
D
C
E
j
V
a
b
>
b
Hb
Pb
Ub
b
b
b
c
c
8c
<
c
Uc
c
c
c
c
c
c
d
2d
=
d
xd
d
d
d
e
e
e
C
e
e
ee
e
e
e
e
e
e
f
p
D
C
E
V
D
C
E
V
C
f
f
|
i
k
m
m
m
m
o
o
m
F
&
FZ
E
S
D
C
E
V
f
f
[
f
_f
f
wf
xf
yf
f
g
g
Sg
{
g
g
g
g
g
g
g
g
g
h
h
h
Uh
]
h
h
h
h
h
i
i
:
j
Cj
pj
qj
j
j
dk
kk
sk
zk
Wl
]
l
^
l
hl
n
v
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
S
H
o
(
cH
dh
S
gH
cH
dh
S
gH
o
(
cH
dh
V
gH
o
(
H
h
V
H
o
(
cH
dhk
V
gH
o
(
H
hk
V
H
o
(
o
(
H
h
V
H
o
(
.
n
n
n
n
q
q
.
r
1r
4r
r
r
r
r
r
r
2s
Fs
Ns
Ps
_s
is
ms
rs
ws
s
s
s
s
s
%
t
)
t
*
t
Lt
Vt
t
t
pu
xu
u
u
u
u
u
u
u
v
v
[
v
_v
gv
}
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
V
H
o
(
o
(
H
h
S
H
%
H
h
S
H
cH
dh
V
gH
o
(
H
h
V
H
o
(
H
h
S
H
o
(
H
h
V
H
%
H
h
S
H
cH
dh
V
gH
o
(
cH
dh
S
gH
o
(
cH
dh
S
gH
1
o
5p
p
~
p
q
*
F
&
FZ
E
S
F
&
FZ
E
S
F
&
FZ
E
S
~
p
p
p
p
s
q
C
E
S
F
&
FZ
E
S
s
s
u
u
+
x
x
w
2
D
C
E
V
C
E
S
D
C
E
S
gv
v
v
v
v
v
v
w
w
0w
)
x
9x
<
x
Gx
Hx
]
x
ax
x
x
x
x
x
x
x
x
x
x
y
y
{
y
y
y
y
y
y
y
y
y
y
Uz
Vz
Wz
Zz
mz
~
s
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
V
H
o
(
H
h
S
H
o
(
H
h
S
H
o
(
+
x
Hx
Ix
x
y
Fy
u
-
-
-
H
&
Fd
C
E
V
D
C
E
V
D
C
E
V
Fy
z
oz
{
{
k
&
D
C
E
V
H
&
Fd
C
E
W
L
&
Fd
C
8
E
V
mz
nz
oz
pz
z
{
{
{
{
{
{
{
{
!
{
.
{
/
{
0
{
1
{
6
{
{
{
{
{
{
{
{
{
{
|
|
C
|
F
|
|
~
s
h
]
[
[
[
[
[
o
(
H
hT
Uf
H
o
(
cH
dhT
UfgH
o
(
H
h
V
H
o
(
3
H
h
S
H
CJ
W
V
cH
dh_
W
gH
o
(
H
h_
W
H
CJ
o
(
"
H
h
S
H
CJ
W
V
o
(
"
H
h
V
H
CJ
W
V
o
(
H
h
S
H
o
(
H
h
V
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
V
H
o
(
{
0
{
1
{
C
{
D
{
D
|
u
0
u
u
D
C
E
S
D
C
E
S
D
C
E
S
D
|
E
|
}
}
~
~
w
w
2
D
C
E
S
D
C
E
W
C
E
S
|
!
}
-
}
8
}
9
}
}
E
}
J
}
K
}
}
}
}
}
}
}
/
~
~
M
~
h
~
~
~
~
~
~
~
~
~
0
5
C
o
p
s
x
m
m
m
cH
dhc
W
gH
o
(
H
hd
W
H
o
(
cH
dh
W
gH
o
(
H
hc
W
H
H
hb
W
H
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
^
W
gH
o
(
o
(
H
hT
Uf
H
o
(
cH
dhT
UfgH
H
h_
W
H
o
(
"
H
h
S
H
cH
dh_
W
gH
H
h
S
H
*
~
p
r
D
C
E
S
H
&
FZ
C
E
S
3
5
E
N
M
N
P
_
l
s
t
B
\
~
&
/
2
3
4
9
~
H
h
V
H
5
o
(
cH
dhy
W
gH
o
(
cH
dhx
W
gH
o
(
cH
dh
S
gH
o
(
H
h
S
H
H
hx
W
H
o
(
%
H
h
S
H
cH
dhw
W
gH
o
(
H
hw
W
H
o
(
o
(
H
h
V
H
o
(
H
h
{
W
H
o
(
H
h
S
H
o
(
/
u
0
0
.
D
C
E
S
D
C
E
S
D
C
E
{
W
1
2
q
*
(
F
&
FX
E
p
V
F
&
FX
E
p
V
F
&
FX
E
p
V
2
3
4
X
Y
s
s
s
D
C
E
S
D
C
E
{
W
9
:
V
W
X
Y
\
p
+
V
k
H
I
R
Y
c
CJ
CJ
o
(
H
h
{
W
H
CJ
o
(
H
h
{
W
H
o
(
cH
dhz
W
gH
o
(
cH
dhz
W
gH
H
hz
W
H
o
(
cH
dh
S
gH
o
(
H
h
S
H
o
(
o
(
H
h
S
H
5
o
(
5
o
(
H
hy
W
H
5
o
(
6
q
*
F
&
FY
E
S
F
&
FY
E
S
F
&
FY
E
S
s
p
+
D
C
E
W
C
D
C
E
{
W
F
&
FY
E
S
H
S
Z
[
f
t
&
)
.
d
x
ync
c
H
h
W
H
o
(
cH
dh
W
gH
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
!
H
h
W
H
5
W
W
o
(
H
h
W
H
o
(
&
u
0
D
C
E
S
D
C
E
W
D
C
E
W
A
B
u
u
u
s
D
C
E
S
D
C
E
W
+
w
x
1
3
4
B
t
A
C
t
it
H
h
W
H
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
cH
dh
W
gH
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
o
(
(
C
D
E
F
v
y
!
#
1
;
|
zozdYF
%
H
h
S
H
cH
dh
W
gH
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
S
H
o
(
"
H
h
S
H
cH
dh
W
gH
%
H
h
S
H
cH
dh
W
gH
o
(
c
d
!
"
D
F
t
y
s
D
C
E
W
D
C
E
W
3
A
L
R
:
A
d
"
|
s
|
f
[
f
6
OJ
QJ
W
W
6
OJ
QJ
W
W
o
(
H
h
S
H
H
h
S
H
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
o
(
cH
dh
W
gH
o
(
#
"
#
3
D
_
a
/
0
4
7
>
D
F
J
K
O
R
+
0
H
K
P
[
|
cH
dhT
UfgH
o
(
H
h
S
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
cH
dh
S
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
o
(
6
OJ
QJ
W
W
o
(
6
OJ
QJ
W
W
7
2
;
G
_
d
!
"
#
Z
D
C
E
W
Z
[
G
u
.
F
&
F
[
E
T
Uf
F
&
F
[
E
p
V
C
E
S
q
o
l
F
&
F
[
E
p
V
F
&
F
[
E
S
"
k
m
q
t
}
#
&
+
3
K
f
{
|
L
O
xm
xmxmx
m
H
h
W
H
o
(
cH
dh
W
gH
o
(
B
*
cH
dhT
UfgH
o
(
H
hT
Uf
H
o
(
cH
dhT
UfgH
o
(
cH
dh
W
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
cH
dh
S
gH
o
(
H
h
S
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
o
(
*
}
~
3
[
o
s
s
s
D
C
E
W
D
C
E
W
O
|
!
"
E
I
U
\
s
v
z
j
_
T
cH
dh
W
gH
o
(
H
h
W
H
o
(
W
W
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
0J
o
(
0J
W
W
o
(
"
H
h
W
H
0J
W
W
o
(
j
U
H
h
W
H
o
(
W
W
o
(
H
h
W
H
W
W
o
(
j
U
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
o
(
%
\
a
o
p
}
~
-
6
X
a
\
d
*
=
F
Z
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
CJ
o
(
H
h
W
H
CJ
o
(
o
(
6
6
o
(
4
.
Y
D
C
E
W
%
-
8
9
Y
]
^
h
i
r
ti
iU
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
cH
dh
W
gH
o
(
H
h
W
H
H
h
W
H
o
(
o
(
!
o
p
s
D
C
E
S
D
C
E
W
'
.
O
m
n
p
s
z
sobUsU
J
H
h
W
H
o
(
H
h
S
H
CJ
o
(
CJ
cH
dh
S
gH
o
(
CJ
o
(
H
h
W
H
CJ
o
(
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
M
"
U
W
p
z
h
j
t
i
iti
i
t
^
t
H
h
W
H
o
(
H
h
S
H
o
(
H
h
W
H
o
(
o
(
cH
dh
W
gH
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
#
i
j
u
s
.
.
D
C
E
W
D
C
E
W
D
C
E
W
j
k
w
5
K
N
i
j
m
v
}
+
5
A
B
}
pe
H
h
W
H
CJ
H
h
W
H
PJ
o
(
H
h
W
H
o
(
%
H
h
S
H
cH
dh
W
gH
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
S
H
o
(
cH
dh
S
gH
o
(
cH
dh
W
gH
o
(
o
(
cH
dh
W
gH
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
&
A
Q
R
u
0
D
C
E
W
D
C
E
W
D
C
E
W
B
P
Q
R
B
C
R
S
T
U
x
r
]
TK
H
h
W
H
o
(
H
h
W
H
H
h
W
H
)
H
h
W
H
0J
>
*
B
*
PJ
W
W
H
h
W
H
W
W
j
H
h
W
H
U
W
W
H
h
W
H
H
h
W
H
o
(
!
H
h
W
H
H
*
W
W
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
CJ
o
(
H
h
W
H
CJ
o
(
H
h
W
H
CJ
o
(
x
C
E
F
G
k
l
m
y
z
{
|
{
s
{
f
{
]
R
H
h
W
H
o
(
H
h
W
H
H
h
W
H
0J
o
(
j
U
j
U
H
h
W
H
o
(
H
h
W
H
0J
o
(
j
H
h
W
H
U
j
H
h
W
H
U
H
h
W
H
o
(
H
h
W
H
H
h
W
H
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
H
h
W
H
o
(
R
u
0
D
C
E
W
D
C
E
W
D
C
E
W
;
<
>
z
{
wjfd
d
dYVYOYd
D
H
h
V
H
o
(
0J
mH
nH
0J
j
0J
U
H
*
o
(
o
(
PJ
o
(
H
h
W
H
CJ
o
(
H
h
W
H
CJ
PJ
o
(
H
h
W
H
CJ
PJ
o
(
H
h
W
H
CJ
PJ
o
(
H
h
W
H
CJ
PJ
o
(
j
CJ
U
cH
dh
W
gH
CJ
cH
dh
W
gH
j
CJ
U
cH
dh
W
gH
H
h
W
H
o
(
H
h
W
H
H
h
W
H
o
(
u
0
.
D
C
E
W
D
C
E
W
D
C
E
W
:
;
<
D
C
E
V
PJ
o
(
W
V
o
(
W
V
o
(
H
h
V
H
o
(
H
h
V
H
o
(
o
(
H
h
V
H
W
V
o
(
D
C
E
V
&
P
/
=
!
"
#
%
D
y
K
h
t
t
p
:
/
/
w
w
w
.
e
d
u
.
t
w
:
8
1
/
m
a
n
d
r
/
y
K
8
h
t
t
p
:
/
/
w
w
w
.
e
d
u
.
t
w
:
8
1
/
m
a
n
d
r
/
D
y
K
h
t
t
p
:
/
/
w
w
w
.
y
a
h
o
o
.
c
o
.
j
p
y
K
0
h
t
t
p
:
/
/
w
w
w
.
y
a
h
o
o
.
c
o
.
j
p
/
D
y
K
%
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
y
K
J
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
D
y
K
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
y
K
0
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
D
y
K
%
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
y
K
J
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
*
[
4
4
N
o
r
m
a
l
_H
mH
nH
sH
tH
6
6
H
e
a
d
i
n
g
1
&
5
CJ
\
J
"
J
H
e
a
d
i
n
g
2
d
d
&
[
\
5
CJ
\
aJ
tH
8
8
H
e
a
d
i
n
g
3
&
a
5
\
2
2
H
e
a
d
i
n
g
4
&
5
\
0
0
H
e
a
d
i
n
g
5
&
5
<
A
<
D
e
f
a
u
l
t
P
a
r
a
g
r
a
p
h
F
o
n
t
H
e
a
d
e
r
C
"
F
o
o
t
e
r
C
"
&
)
&
P
a
g
e
N
u
m
b
e
r
J
O
"
J
N
o
r
m
a
l
(
W
e
b
)
d
d
[
\
CJ
PJ
aJ
tH
T
O
C
1
&
&
T
O
C
2
^
&
&
T
O
C
3
^
&
&
T
O
C
4
X
^
X
&
&
T
O
C
5
^
&
&
T
O
C
6
^
&
&
T
O
C
7
^
&
&
T
O
C
8
x
^
x
&
&
T
O
C
9
^
.
U
.
H
y
p
e
r
l
i
n
k
>
*
B
*
ph
2
2
I
n
d
e
x
1
8
^
8
<
<
I
n
d
e
x
2
8
^
8
5
CJ
\
2
2
I
n
d
e
x
3
X
8
^
X
8
2
2
I
n
d
e
x
4
8
^
8
2
2
I
n
d
e
x
5
!
8
^
8
2
2
I
n
d
e
x
6
"
8
^
8
2
2
I
n
d
e
x
7
#
x
8
^
x
8
2
2
I
n
d
e
x
8
8
^
8
2
2
I
n
d
e
x
9
%
8
^
8
.
!
.
I
n
d
e
x
H
e
a
d
i
n
g
&
0
"
0
C
a
p
t
i
o
n
'
x
x
5
\
>
V
>
F
o
l
l
o
w
e
d
H
y
p
e
r
l
i
n
k
>
*
B
*
ph
H
T
M
L
P
r
e
f
o
r
m
a
t
t
e
d
7
)
2
(
P
x
4
#
\
'
*
.
2
5
9
OJ
PJ
QJ
^
J
tH
L
X
-
(
+
)
L
X
[
6
6
a
4
6
'
)
-
4
/
~
1
2
M4
c6
9
:
J
<
[
A
8D
E
AH
M
(
Q
R
=
U
bX
\
_
f
n
gv
mz
|
9
C
O
j
B
x
X
[
\
]
_
c
d
g
i
k
m
o
p
y
{
q
)
'
(
+
0
0
1
E1
r1
}
1
1
3
I3
3
u5
5
6
7
]
7
7
;
C
F
N
Q
R
T
U
V
W
_
a
e
f
o
~
p
s
x
Fy
{
D
|
~
2
Z
R
Y
^
a
b
e
h
j
l
n
q
r
t
u
v
x
z
|
}
0
}
1
n3
6
7
N
V
Z
f
s
w
~
U
n
k
n
o
w
n
s
h
a
n
j
i
a
n
m
o
m
o
i
~
.
.
.
!
B
R
F
k
{
X
X
X
X
X
X
t
{
}
!
-
.
O
R
Ul
J
+
R
6
1
{
0
i
x
f
R
(
X
3q
J
R
:
/
~
/
k_
C
%
F
-
(
H
(
#
(
H
)
#
)
B
+
H
#
H
-
#
-
B
S
?
+
T
#
\
?
t
-
P
#
X
?
t
#
4
?
t
)
T
W
\
s
t
(
#
?
t
_
H
l
t
5
1
8
5
8
8
6
6
8
[
\
Z
j
k
4
a
s
t
{
#
N
*
N
N
N
!
O
'
O
Q
Q
Q
Q
Q
Q
2R
JR
\
R
rR
R
R
[
[
\
\
p
\
\
\
\
\
\
]
]
6
]
>
]
A
]
I
]
{
]
]
]
]
]
]
]
]
]
]
^
^
^
<
^
f
^
s
^
v
^
^
^
^
^
^
^
^
n
n
-
6
*
7
9
B
_
h
p
y
Z
~
Q
X
a
{
E
E
Q
Q
Q
Q
Q
Q
[
[
\
\
\
\
6
]
>
]
V
]
^
]
s
]
u
]
]
]
^
^
1n
4n
p
p
u
u
5v
=
v
sv
yv
z
z
{
{
s
{
u
{
{
{
{
{
~
~
~
~
C
d
i
z
F
K
I
K
B
F
Q
W
g
k
x
~
W
z
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
m
o
m
o
i
/
D
:
\
I
n
t
l
D
o
c
s
\
U
n
i
c
o
d
e
1
9
\
i
u
c
1
9
a
u
t
o
d
e
t
e
c
t
f
n
l
r
e
v
.
d
o
c
s
h
a
n
j
i
a
n
"
E
:
\
d
o
c
u
m
e
n
t
\
I
U
C
1
9
A
u
t
o
D
e
t
e
c
t
i
o
n
.
d
o
c
l
|
3
}
F
~
j
b
>
l
'
%
6
<
tX
'
2
o
\
sK
<
b
e
<
{
?
"
x
&
a
+
A
v
.
{
z
Io
s
5w
Ll
&
8
b
V
!
cF8
p
AE
VXZ
9
:
tN
(
c
9
8
{
z
{
z
=
"
N
(
[
f
.
3
t
J
6
Q
f
?
6
zk
C
M
]
J
{
z
e
%
(
L
v
(
W
?
f
(
t
2
op
)
b
Jd
.
G
9
-
P
*
t
/
h
{
^
&
0
w
2
[
2
n
:
(
*
4
{
z
<
4bDBX
D
5
/
'
#
T5
Oj
;
L
P
&
+
>
]
\
X
[
x4
r
C6kX
B
F
WiG
.
6
cIKt
A
RL
.
LF
T
%
:
pL6
=
H
[
*
M
:
F
pM
l
(
M
m
Q
{
z
.
l
S
yc
S
n
T
Q
<
T
w
\
HV
\
}
MVj
84W4
W
~
j
WZt
*
7FX
]
D
+
g
YH
2m
o
=
Ylq4
}
Z
dK
Ol
Z
{
z
Z
Dy
[
8
A
\
*
K
*
\
}
^
/
+
B
d
R
d
if
eZ
zNghP
n
nhDh
<
j
h
w
A
i
h
q
i
?
yl
{
z
w
l
J
T
l
l
u
m
c
]
oB
P
o
(
MY
(
q
t
O
G
q
{
z
^
t
n
O
b
>
u
M
w
Fd
{
j
<
-
|
w
nr
|
2
>
[
~
*
h
^
.
^
.
^
.
^
.
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
h
h
^
h
.
h
h
^
h
OJ
QJ
o
(
h
h
h
^
h
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
x
x
^
x
OJ
QJ
o
(
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
t
t
^
t
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
|
|
^
|
OJ
QJ
o
(
L
L
^
L
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
^
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
h
^
h
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
x
x
^
x
OJ
QJ
o
(
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
^
o
(
h
h
^
h
o
(
.
h
h
^
h
o
(
.
0
^
0
o
(
.
.
0
^
0
o
(
.
.
.
8
8
^
8
o
(
.
.
.
.
8
8
^
8
o
(
.
.
.
.
.
^
o
(
.
.
.
.
.
.
^
o
(
.
.
.
.
.
.
.
^
o
(
.
.
.
.
.
.
.
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
^
h
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
h
^
h
OJ
QJ
o
(
^
o
(
^
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
x
x
^
x
OJ
QJ
o
(
H
H
^
H
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
o
p
p
^
p
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
P
P
^
P
CJ
OJ
QJ
o
(
^
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
^
h
o
(
.
8
8
^
8
.
L
^
L
.
^
.
^
.
x
L
x
^
x
L
.
H
H
^
H
.
^
.
L
^
L
.
h
h
^
h
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
x
x
^
x
OJ
QJ
o
(
o
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
h
^
h
OJ
QJ
o
(
h
h
^
h
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
x
x
^
x
OJ
QJ
o
(
o
H
H
^
H
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
h
^
.
h
^
.
h
p
L
p
^
p
L
.
h
^
.
h
^
.
h
L
^
L
.
h
^
.
h
^
.
h
P
L
P
^
P
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
^
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
8
8
^
8
PJ
o
(
.
^
.
L
^
L
.
^
.
x
x
^
x
.
H
L
H
^
H
L
.
^
.
^
.
L
^
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
p
p
^
p
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
P
P
^
P
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
o
p
p
^
p
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
^
CJ
OJ
QJ
o
(
P
P
^
P
CJ
OJ
QJ
o
(
^
o
(
h
h
^
h
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
^
o
(
h
8
8
^
8
OJ
QJ
o
(
h
^
.
h
L
^
L
.
h
^
.
h
p
p
^
p
.
h
L
^
L
.
h
^
.
h
^
.
h
L
^
L
.
^
o
(
^
o
(
h
h
^
h
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
0
^
0
o
(
.
8
8
^
8
.
L
^
L
.
^
.
^
.
x
L
x
^
x
L
.
H
H
^
H
.
^
.
L
^
L
.
^
OJ
QJ
o
(
8
8
^
8
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
x
x
^
x
OJ
QJ
o
(
H
H
^
H
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
o
(
8
8
^
8
OJ
QJ
o
(
^
OJ
QJ
o
(
o
p
p
^
p
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
h
^
h
o
(
.
8
8
^
8
.
L
^
L
.
^
.
^
.
x
L
x
^
x
L
.
H
H
^
H
.
^
.
L
^
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
^
h
OJ
QJ
o
(
h
^
.
h
^
.
h
p
L
p
^
p
L
.
h
^
.
h
^
.
h
L
^
L
.
h
^
.
h
^
.
h
P
L
P
^
P
L
.
h
h
^
h
OJ
QJ
o
(
^
.
^
CJ
OJ
QJ
o
(
o
p
p
^
p
CJ
OJ
QJ
o
(
^
.
^
.
^
.
^
.
^
.
P
P
^
P
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
.
h
^
.
h
p
L
p
^
p
L
.
h
^
.
h
^
.
h
L
^
L
.
h
^
.
h
^
.
h
P
L
P
^
P
L
.
h
h
h
^
h
.
h
h
h
^
h
.
h
8
L
8
^
8
L
.
h
^
.
h
^
.
h
L
^
L
.
h
x
x
^
x
.
h
H
H
^
H
.
h
L
^
L
.
h
h
^
h
o
(
.
h
8
8
^
8
OJ
QJ
o
(
L
^
L
.
^
.
^
.
x
L
x
^
x
L
.
H
H
^
H
.
^
.
L
^
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
h
^
h
o
(
.
8
8
^
8
PJ
o
(
.
L
^
L
.
^
.
^
.
x
L
x
^
x
L
.
H
H
^
H
.
^
.
L
^
L
.
h
h
h
^
h
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
x
x
^
x
OJ
QJ
o
(
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
^
5
OJ
QJ
o
(
.
{
{
^
{
OJ
QJ
o
(
o
K
K
^
K
OJ
QJ
o
(
^
OJ
QJ
o
(
^
OJ
QJ
o
(
o
^
OJ
QJ
o
(
^
OJ
QJ
o
(
[
[
^
[
OJ
QJ
o
(
o
+
+
^
+
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
|
|
^
|
OJ
QJ
o
(
h
L
L
^
L
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
h
h
^
h
.
h
8
8
^
8
.
h
L
^
L
.
h
^
.
h
^
.
h
x
L
x
^
x
L
.
h
H
H
^
H
.
h
^
.
h
L
^
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
^
h
PJ
o
(
8
8
^
8
PJ
o
(
.
p
0
p
^
p
0
PJ
o
(
.
.
0
^
0
PJ
o
(
.
.
.
0
^
0
PJ
o
(
.
.
.
.
H
H
^
H
PJ
o
(
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
P
P
^
P
PJ
o
(
.
.
.
.
.
.
.
^
PJ
o
(
.
.
.
.
.
.
.
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
^
h
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
x
x
^
x
OJ
QJ
o
(
o
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
.
h
^
.
h
p
L
p
^
p
L
.
h
^
.
h
^
.
h
L
^
L
.
h
^
.
h
^
.
h
P
L
P
^
P
L
.
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
p
p
^
p
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
P
P
^
P
OJ
QJ
o
(
h
h
h
^
h
OJ
QJ
o
(
h
8
8
^
8
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
x
x
^
x
OJ
QJ
o
(
h
H
H
^
H
OJ
QJ
o
(
h
^
OJ
QJ
o
(
o
h
^
OJ
QJ
o
(
n
w
l
7FX
R
d
R
d
p
:
R
d
:
[
*
M
C
:
AE
b
>
u
B
F
\
j
W
e
RL
.
L
WiG
Oj
;
zNg
Z
^
t
A
i
v
.
8
.
2
%
:
pL
Dy
[
?
yl
]
J
G
q
m
Q
Ol
Z
T
l
A
\
sK
q
i
&
J
(
*
4
*
t
/
Fd
{
MY
(
q
VXZ
nr
|
if
f
?
e
%
]
o
?
f
(
a
+
A
}
Z
}
^
W
9
-
.
l
S
o
P
o
v
(
5w
g
Y
yc
S
3
6
84W
cIK
<
4
-
|
j
h
T
r
C
[
2
V
!
}
MV
&
+
>
cF8
N
(
[
n
T
o
=
Y
\
HV
pM
M
w
K
*
\
w
2
=
"
(
M
+
B
d
op
)
^
&
0
9
u
m
{
?
D
5
>
[
~
nh
'
#
T5
s
Io
~
}
|
|
:
"
.
:
"
p
p
^
p
CJ
OJ
QJ
o
(
l
p
G
z
T
i
m
e
s
N
e
w
R
o
m
a
n
5
S
y
m
b
o
l
3
&
z
A
r
i
a
l
?
5
z
C
o
u
r
i
e
r
N
e
w
3
h
-
3
f
g
I6
?
?
A
r
i
a
l
U
n
i
c
o
d
e
M
S
;
W
i
n
g
d
i
n
g
s
"
q
h
eW
eW
m
Q
&
F
!
20
d
I
C
:
\
W
I
N
N
T
-
J
\
P
r
o
f
i
l
e
s
\
m
o
m
o
i
\
A
p
p
l
i
c
a
t
i
o
n
D
a
t
a
\
M
i
c
r
o
s
o
f
t
\
T
e
m
p
l
a
t
e
s
\
N
o
r
m
a
l
.
d
o
t
K
a
t
s
u
h
i
k
o
M
o
m
o
i
s
h
a
n
j
i
a
n
Oh
+
'
0
4
L
X
d
l
t
|
s
s
Katsuhiko
Momoi
ats
ats
Normal
k
shanjian
Mo
2
an
Microsoft
Word
8
.
0
O
Z
Z
.
+
D
.
+
H
h
p
Netscape
Communications
Corp
.
1
F
1
Title
(
R
Z
_PID_GUID
_PID_HLINKS
A
N
{
B
D
C
C
4
A
3
0
-
7
7
4
D
-
1
1
D
5
-
8
7
1
2
-
0
0
1
0
A
4
B
8
7
A
1
1
}
A
8
\
%
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
f
9
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
\
%
h
t
t
p
:
/
/
w
w
w
.
m
o
z
i
l
l
a
.
o
r
g
/
p
r
o
j
e
c
t
s
/
i
n
t
l
u
h
h
t
t
p
:
/
/
w
w
w
.
y
a
h
o
o
.
c
o
.
j
p
/
5
h
t
t
p
:
/
/
w
w
w
.
e
d
u
.
t
w
:
8
1
/
m
a
n
d
r
/
!
"
#
%
&
'
(
)
*
+
-
.
/
0
1
2
3
4
5
6
7
8
9
:
;
<
=
>
?
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
[
\
]
^
_
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
{
|
}
~
!
"
#
%
&
'
(
)
*
+
-
.
/
0
1
2
3
4
5
6
7
8
9
:
;
<
=
>
?
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
[
\
]
^
_
b
c
d
e
f
g
h
j
k
l
m
n
o
p
u
R
o
o
t
E
n
t
r
y
F
Z
8D
Z
w
D
a
t
a
1
T
a
b
l
e
W
o
r
d
D
o
c
u
m
e
n
t
"
S
u
m
m
a
r
y
I
n
f
o
r
m
a
t
i
o
n
(
a
D
o
c
u
m
e
n
t
S
u
m
m
a
r
y
I
n
f
o
r
m
a
t
i
o
n
8
i
C
o
m
p
O
b
j
j
O
b
j
e
c
t
P
o
o
l
8D
Z
8D
Z
F
Microsoft
Word
Document
MSWordDoc
Word
.
Document
.
8
9
q
