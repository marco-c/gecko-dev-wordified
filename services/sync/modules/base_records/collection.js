/
*
*
*
*
*
*
BEGIN
LICENSE
BLOCK
*
*
*
*
*
*
Version
:
MPL
1
.
1
/
GPL
2
.
0
/
LGPL
2
.
1
*
*
The
contents
of
this
file
are
subject
to
the
Mozilla
Public
License
Version
*
1
.
1
(
the
"
License
"
)
;
you
may
not
use
this
file
except
in
compliance
with
*
the
License
.
You
may
obtain
a
copy
of
the
License
at
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
*
Software
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
basis
*
WITHOUT
WARRANTY
OF
ANY
KIND
either
express
or
implied
.
See
the
License
*
for
the
specific
language
governing
rights
and
limitations
under
the
*
License
.
*
*
The
Original
Code
is
Weave
.
*
*
The
Initial
Developer
of
the
Original
Code
is
Mozilla
.
*
Portions
created
by
the
Initial
Developer
are
Copyright
(
C
)
2008
*
the
Initial
Developer
.
All
Rights
Reserved
.
*
*
Contributor
(
s
)
:
*
Dan
Mills
<
thunder
mozilla
.
com
>
*
*
Alternatively
the
contents
of
this
file
may
be
used
under
the
terms
of
*
either
the
GNU
General
Public
License
Version
2
or
later
(
the
"
GPL
"
)
or
*
the
GNU
Lesser
General
Public
License
Version
2
.
1
or
later
(
the
"
LGPL
"
)
*
in
which
case
the
provisions
of
the
GPL
or
the
LGPL
are
applicable
instead
*
of
those
above
.
If
you
wish
to
allow
use
of
your
version
of
this
file
only
*
under
the
terms
of
either
the
GPL
or
the
LGPL
and
not
to
allow
others
to
*
use
your
version
of
this
file
under
the
terms
of
the
MPL
indicate
your
*
decision
by
deleting
the
provisions
above
and
replace
them
with
the
notice
*
and
other
provisions
required
by
the
GPL
or
the
LGPL
.
If
you
do
not
delete
*
the
provisions
above
a
recipient
may
use
your
version
of
this
file
under
*
the
terms
of
any
one
of
the
MPL
the
GPL
or
the
LGPL
.
*
*
*
*
*
*
*
END
LICENSE
BLOCK
*
*
*
*
*
*
/
const
EXPORTED_SYMBOLS
=
[
'
Collection
'
]
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cr
=
Components
.
results
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
weave
/
log4moz
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
constants
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
util
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
resource
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
base_records
/
wbo
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
base_records
/
crypto
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
weave
/
base_records
/
keys
.
js
"
)
;
function
Collection
(
uri
recordObj
)
{
this
.
_Coll_init
(
uri
)
;
this
.
_recordObj
=
recordObj
;
}
Collection
.
prototype
=
{
__proto__
:
Resource
.
prototype
_logName
:
"
Collection
"
_Coll_init
:
function
Coll_init
(
uri
)
{
this
.
_init
(
uri
)
;
this
.
pushFilter
(
new
JsonFilter
(
)
)
;
this
.
_full
=
true
;
this
.
_older
=
0
;
this
.
_newer
=
0
;
this
.
_data
=
[
]
;
}
_rebuildURL
:
function
Coll__rebuildURL
(
)
{
/
/
XXX
should
consider
what
happens
if
it
'
s
not
a
URL
.
.
.
this
.
uri
.
QueryInterface
(
Ci
.
nsIURL
)
;
let
args
=
[
]
;
if
(
this
.
older
)
args
.
push
(
'
older
=
'
+
this
.
older
)
;
else
if
(
this
.
newer
)
{
args
.
push
(
'
newer
=
'
+
this
.
newer
)
;
args
.
push
(
'
modified
=
'
+
this
.
newer
)
;
/
/
tmp
hack
for
older
servers
}
if
(
this
.
full
)
args
.
push
(
'
full
=
1
'
)
;
if
(
this
.
sort
)
args
.
push
(
'
sort
=
'
+
this
.
sort
)
;
this
.
uri
.
query
=
(
args
.
length
>
0
)
?
'
?
'
+
args
.
join
(
'
&
'
)
:
'
'
;
}
/
/
get
full
items
get
full
(
)
{
return
this
.
_full
;
}
set
full
(
value
)
{
this
.
_full
=
value
;
this
.
_rebuildURL
(
)
;
}
/
/
get
only
items
modified
before
some
date
get
older
(
)
{
return
this
.
_older
;
}
set
older
(
value
)
{
this
.
_older
=
value
;
this
.
_rebuildURL
(
)
;
}
/
/
get
only
items
modified
since
some
date
get
newer
(
)
{
return
this
.
_newer
;
}
set
newer
(
value
)
{
this
.
_newer
=
value
;
this
.
_rebuildURL
(
)
;
}
/
/
get
items
sorted
by
some
criteria
.
valid
values
:
/
/
oldest
(
oldest
first
)
/
/
newest
(
newest
first
)
/
/
index
/
/
depthindex
get
sort
(
)
{
return
this
.
_sort
;
}
set
sort
(
value
)
{
this
.
_sort
=
value
;
this
.
_rebuildURL
(
)
;
}
pushData
:
function
Coll_pushData
(
data
)
{
this
.
_data
.
push
(
data
)
;
}
clearRecords
:
function
Coll_clearRecords
(
)
{
this
.
_data
=
[
]
;
}
set
recordHandler
(
onRecord
)
{
/
/
Save
this
because
onProgress
is
called
with
this
as
the
ChannelListener
let
coll
=
this
;
this
.
_onProgress
=
function
(
)
{
/
/
Save
some
work
by
quitting
early
when
there
'
s
no
records
if
(
this
.
_data
=
=
"
[
]
"
)
return
;
do
{
/
/
Strip
off
the
the
starting
"
[
"
or
separating
"
"
or
trailing
"
]
"
if
/
/
it
wasn
'
t
stripped
off
from
a
previous
progress
update
let
start
=
this
.
_data
[
0
]
;
if
(
start
=
=
"
[
"
|
|
start
=
=
"
"
|
|
start
=
=
"
]
"
)
this
.
_data
=
this
.
_data
.
slice
(
1
)
;
/
/
Track
various
states
of
#
open
braces
and
ignore
for
strings
let
json
=
"
"
;
let
braces
=
1
;
let
ignore
=
false
;
let
escaped
=
false
;
let
length
=
this
.
_data
.
length
;
/
/
Skip
the
first
character
the
"
{
"
and
try
to
find
a
json
record
for
(
let
i
=
1
;
i
<
length
;
i
+
+
)
{
let
char
=
this
.
_data
[
i
]
;
/
/
Opening
a
string
makes
us
ignore
all
characters
except
close
"
if
(
char
=
=
'
"
'
)
{
if
(
!
ignore
)
ignore
=
true
;
/
/
It
'
s
a
real
close
"
if
it
'
s
not
escaped
else
if
(
!
escaped
)
ignore
=
false
;
}
/
/
Track
if
an
end
quote
might
be
escaped
when
processing
strings
if
(
ignore
)
{
escaped
=
char
=
=
"
\
\
"
?
!
escaped
:
false
;
/
/
Don
'
t
bother
checking
other
characters
when
ignoring
continue
;
}
/
/
Increase
the
brace
count
on
open
{
if
(
char
=
=
"
{
"
)
braces
+
+
;
/
/
Decrement
brace
count
on
close
}
else
if
(
char
=
=
"
}
"
&
&
-
-
braces
=
=
0
)
{
/
/
Split
the
json
record
from
the
rest
of
the
data
json
=
this
.
_data
.
slice
(
0
i
+
1
)
;
this
.
_data
=
this
.
_data
.
slice
(
i
+
1
)
;
/
/
Stop
processing
for
now
that
we
found
one
record
break
;
}
}
/
/
No
valid
record
json
found
?
if
(
json
.
length
=
=
0
)
break
;
/
/
Deserialize
a
record
from
json
and
give
it
to
the
callback
let
record
=
new
coll
.
_recordObj
(
)
;
record
.
deserialize
(
json
)
;
record
.
baseURI
=
coll
.
uri
;
record
.
id
=
record
.
data
.
id
;
onRecord
(
record
)
;
/
/
Keep
processing
the
data
until
we
can
'
t
find
a
json
record
}
while
(
true
)
;
/
/
Aggressively
clean
up
the
objects
we
created
above
so
that
the
next
set
/
/
of
records
have
enough
memory
to
decrypt
reconcile
apply
etc
.
Cu
.
forceGC
(
)
;
}
;
}
}
;
