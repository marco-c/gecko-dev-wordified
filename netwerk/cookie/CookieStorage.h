/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_net_CookieStorage_h
#
define
mozilla_net_CookieStorage_h
#
include
"
CookieKey
.
h
"
#
include
"
mozIStorageCompletionCallback
.
h
"
#
include
"
mozIStorageStatement
.
h
"
#
include
"
mozIStorageStatementCallback
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
net
{
/
/
Inherit
from
CookieKey
so
this
can
be
stored
in
nsTHashTable
/
/
TODO
:
why
aren
'
t
we
using
nsClassHashTable
<
CookieKey
ArrayType
>
?
class
CookieEntry
:
public
CookieKey
{
public
:
/
/
Hash
methods
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
net
:
:
Cookie
>
>
ArrayType
;
typedef
ArrayType
:
:
index_type
IndexType
;
explicit
CookieEntry
(
KeyTypePointer
aKey
)
:
CookieKey
(
aKey
)
{
}
CookieEntry
(
const
CookieEntry
&
toCopy
)
{
/
/
if
we
end
up
here
things
will
break
.
nsTHashtable
shouldn
'
t
/
/
allow
this
since
we
set
ALLOW_MEMMOVE
to
true
.
MOZ_ASSERT_UNREACHABLE
(
"
CookieEntry
copy
constructor
is
forbidden
!
"
)
;
}
~
CookieEntry
(
)
=
default
;
inline
ArrayType
&
GetCookies
(
)
{
return
mCookies
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
ArrayType
mCookies
;
}
;
class
CookieStorage
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
CookieStorage
)
CookieStorage
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
/
/
State
of
the
database
connection
.
enum
CorruptFlag
{
OK
/
/
normal
CLOSING_FOR_REBUILD
/
/
corruption
detected
connection
closing
REBUILDING
/
/
close
complete
rebuilding
database
from
memory
}
;
nsTHashtable
<
CookieEntry
>
hostTable
;
uint32_t
cookieCount
;
int64_t
cookieOldestTime
;
nsCOMPtr
<
nsIFile
>
cookieFile
;
nsCOMPtr
<
mozIStorageConnection
>
dbConn
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtInsert
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtDelete
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmtUpdate
;
CorruptFlag
corruptFlag
;
/
/
Various
parts
representing
asynchronous
read
state
.
These
are
useful
/
/
while
the
background
read
is
taking
place
.
nsCOMPtr
<
mozIStorageConnection
>
syncConn
;
nsCOMPtr
<
mozIStorageStatement
>
stmtReadDomain
;
/
/
DB
completion
handlers
.
nsCOMPtr
<
mozIStorageStatementCallback
>
insertListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
updateListener
;
nsCOMPtr
<
mozIStorageStatementCallback
>
removeListener
;
nsCOMPtr
<
mozIStorageCompletionCallback
>
closeListener
;
private
:
~
CookieStorage
(
)
;
}
;
}
/
/
namespace
net
}
/
/
namespace
mozilla
#
endif
/
/
mozilla_net_CookieStorage_h
