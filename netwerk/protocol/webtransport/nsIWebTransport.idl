/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
4
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
4
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
nsISupports
.
idl
"
#
include
"
nsIURI
.
idl
"
#
include
"
nsIPrincipal
.
idl
"
interface
WebTransportSessionEventListener
;
interface
nsIWebTransportStreamCallback
;
%
{
C
+
+
namespace
mozilla
:
:
net
{
class
Http3WebTransportSession
;
}
%
}
[
ptr
]
native
Http3WebTransportSessionPtr
(
mozilla
:
:
net
:
:
Http3WebTransportSession
)
;
[
builtinclass
scriptable
uuid
(
c20d6e77
-
8cb1
-
4838
-
a88d
-
fff826080aa3
)
]
interface
nsIWebTransport
:
nsISupports
{
/
/
When
called
perform
steps
in
"
Initialization
WebTransport
over
HTTP
"
.
void
asyncConnect
(
in
nsIURI
aURI
in
nsIPrincipal
aLoadingPrincipal
in
unsigned
long
aSecurityFlags
in
WebTransportSessionEventListener
aListener
)
;
/
/
Asynchronously
get
states
.
void
getStats
(
)
;
/
/
Close
the
session
.
void
closeSession
(
in
uint32_t
aErrorCode
in
ACString
aReason
)
;
/
/
Create
and
open
a
new
WebTransport
stream
.
Returns
a
nsICancelable
/
/
object
so
the
consumer
can
cancel
this
operation
.
void
createOutgoingBidirectionalStream
(
in
nsIWebTransportStreamCallback
aListener
)
;
void
createOutgoingUnidirectionalStream
(
in
nsIWebTransportStreamCallback
aListener
)
;
/
/
bool
sendDatagram
(
in
AUTF8String
aDatagram
)
;
}
;
/
/
Events
related
to
a
WebTransport
session
.
[
scriptable
uuid
(
0e3cb269
-
f318
-
43c8
-
959e
-
897f57894b71
)
]
interface
WebTransportSessionEventListener
:
nsISupports
{
/
/
This
is
used
to
let
the
consumer
of
nsIWebTransport
know
that
the
/
/
underlying
WebTransportSession
object
is
ready
to
use
.
void
onSessionReady
(
in
uint64_t
aSessionId
)
;
/
/
This
is
used
internally
to
pass
the
reference
of
WebTransportSession
/
/
object
to
WebTransportSessionProxy
.
void
onSessionReadyInternal
(
in
Http3WebTransportSessionPtr
aSession
)
;
void
onSessionClosed
(
in
uint32_t
aErrorCode
in
ACString
aReason
)
;
/
/
When
a
new
stream
has
been
received
.
/
/
void
onIncomingBidirectionalStreamAvailable
(
in
nsIWebTransportBidirectionalStream
aStream
)
;
/
/
void
onIncomingUnidirectionalStreamAvailable
(
in
nsIWebTransportReceiveStream
aStream
)
;
/
/
When
a
new
stream
has
been
opened
.
/
/
void
onOutgoingBidirectionalStreamAvailable
(
in
nsIWebTransportBidirectionalStream
aStream
)
;
/
/
void
onOutgoingUnidirectionalStreamAvailable
(
in
nsIWebTransportSendStream
aStream
)
;
/
/
When
a
new
datagram
has
been
received
.
/
/
void
onDatagramReceived
(
in
AUTF8String
aDatagram
)
;
/
/
void
onStatsAvailable
(
in
WebTransportStats
aStats
)
;
}
;
/
/
This
interface
is
used
as
a
callback
when
creating
an
outgoing
/
/
unidirectional
or
bidirectional
stream
.
[
scriptable
uuid
(
c6eeff1d
-
599b
-
40a8
-
9157
-
c7a40c3d51a2
)
]
interface
nsIWebTransportStreamCallback
:
nsISupports
{
/
/
void
onStreamReady
(
in
nsIWebTransportSendStream
aStream
)
;
void
onError
(
in
uint8_t
aError
)
;
}
;
