/
*
-
*
-
Mode
:
c
+
+
;
c
-
basic
-
offset
:
2
;
indent
-
tabs
-
mode
:
nil
;
tab
-
width
:
40
-
*
-
*
/
/
*
vim
:
set
ts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_ipc_SocketBase_h
#
define
mozilla_ipc_SocketBase_h
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
namespace
ipc
{
/
/
/
/
UnixSocketRawData
/
/
class
UnixSocketRawData
{
public
:
/
/
Number
of
octets
in
mData
.
size_t
mSize
;
size_t
mCurrentWriteOffset
;
nsAutoArrayPtr
<
uint8_t
>
mData
;
/
*
*
*
Constructor
for
situations
where
only
size
is
known
beforehand
*
(
for
example
when
being
assigned
strings
)
*
/
UnixSocketRawData
(
size_t
aSize
)
;
/
*
*
*
Constructor
for
situations
where
size
and
data
is
known
*
beforehand
(
for
example
when
being
assigned
strings
)
*
/
UnixSocketRawData
(
const
void
*
aData
size_t
aSize
)
;
}
;
enum
SocketConnectionStatus
{
SOCKET_DISCONNECTED
=
0
SOCKET_LISTENING
=
1
SOCKET_CONNECTING
=
2
SOCKET_CONNECTED
=
3
}
;
/
/
/
/
SocketConsumerBase
/
/
class
SocketConsumerBase
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SocketConsumerBase
)
virtual
~
SocketConsumerBase
(
)
;
SocketConnectionStatus
GetConnectionStatus
(
)
const
;
int
GetSuggestedConnectDelayMs
(
)
const
;
/
*
*
*
Queues
the
internal
representation
of
socket
for
deletion
.
Can
be
called
*
from
main
thread
.
*
/
virtual
void
CloseSocket
(
)
=
0
;
/
*
*
*
Function
to
be
called
whenever
data
is
received
.
This
is
only
called
on
the
*
main
thread
.
*
*
param
aMessage
Data
received
from
the
socket
.
*
/
virtual
void
ReceiveSocketData
(
nsAutoPtr
<
UnixSocketRawData
>
&
aMessage
)
=
0
;
/
*
*
*
Queue
data
to
be
sent
to
the
socket
on
the
IO
thread
.
Can
only
be
called
on
*
originating
thread
.
*
*
param
aMessage
Data
to
be
sent
to
socket
*
*
return
true
if
data
is
queued
false
otherwise
(
i
.
e
.
not
connected
)
*
/
virtual
bool
SendSocketData
(
UnixSocketRawData
*
aMessage
)
=
0
;
/
*
*
*
Callback
for
socket
connect
/
accept
success
.
Called
after
connect
/
accept
has
*
finished
.
Will
be
run
on
main
thread
before
any
reads
take
place
.
*
/
virtual
void
OnConnectSuccess
(
)
=
0
;
/
*
*
*
Callback
for
socket
connect
/
accept
error
.
Will
be
run
on
main
thread
.
*
/
virtual
void
OnConnectError
(
)
=
0
;
/
*
*
*
Callback
for
socket
disconnect
.
Will
be
run
on
main
thread
.
*
/
virtual
void
OnDisconnect
(
)
=
0
;
/
*
*
*
Called
by
implementation
to
notify
consumer
of
success
.
*
/
void
NotifySuccess
(
)
;
/
*
*
*
Called
by
implementation
to
notify
consumer
of
error
.
*
/
void
NotifyError
(
)
;
/
*
*
*
Called
by
implementation
to
notify
consumer
of
disconnect
.
*
/
void
NotifyDisconnect
(
)
;
protected
:
SocketConsumerBase
(
)
;
void
SetConnectionStatus
(
SocketConnectionStatus
aConnectionStatus
)
;
private
:
uint32_t
CalculateConnectDelayMs
(
)
const
;
SocketConnectionStatus
mConnectionStatus
;
PRIntervalTime
mConnectTimestamp
;
uint32_t
mConnectDelayMs
;
}
;
}
}
#
endif
