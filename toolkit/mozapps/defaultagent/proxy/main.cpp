/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
2
sw
=
2
sts
=
2
et
cindent
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
<
windows
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
objbase
.
h
>
#
include
<
string
.
h
>
#
include
<
filesystem
>
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
/
/
See
BackgroundTask_defaultagent
.
sys
.
mjs
for
arguments
.
int
wmain
(
int
argc
wchar_t
*
*
argv
)
{
std
:
:
vector
<
wchar_t
>
path
(
MAX_PATH
0
)
;
DWORD
charsWritten
=
GetModuleFileNameW
(
nullptr
path
.
data
(
)
path
.
size
(
)
)
;
/
/
GetModuleFileNameW
returns
the
count
of
characters
written
including
null
/
/
when
truncated
excluding
null
otherwise
.
Therefore
the
count
will
always
/
/
be
less
than
the
buffer
size
when
not
truncated
.
while
(
charsWritten
=
=
path
.
size
(
)
)
{
path
.
resize
(
path
.
size
(
)
*
2
0
)
;
charsWritten
=
GetModuleFileNameW
(
nullptr
path
.
data
(
)
path
.
size
(
)
)
;
}
if
(
charsWritten
=
=
0
)
{
return
E_UNEXPECTED
;
}
std
:
:
filesystem
:
:
path
programPath
=
path
.
data
(
)
;
programPath
=
programPath
.
parent_path
(
)
;
programPath
+
=
L
"
\
\
"
MOZ_APP_NAME
L
"
.
exe
"
;
std
:
:
vector
<
const
wchar_t
*
>
childArgv
;
childArgv
.
push_back
(
programPath
.
c_str
(
)
)
;
childArgv
.
push_back
(
L
"
-
-
backgroundtask
"
)
;
childArgv
.
push_back
(
L
"
defaultagent
"
)
;
/
/
Skip
argv
[
0
]
path
to
this
exectuable
.
for
(
int
i
=
1
;
i
<
argc
;
i
+
+
)
{
childArgv
.
push_back
(
argv
[
i
]
)
;
}
auto
cmdLine
=
mozilla
:
:
MakeCommandLine
(
childArgv
.
size
(
)
childArgv
.
data
(
)
)
;
STARTUPINFOW
si
=
{
}
;
si
.
cb
=
sizeof
(
STARTUPINFOW
)
;
PROCESS_INFORMATION
pi
=
{
}
;
/
/
Runs
{
program
path
}
-
-
backgoundtask
defaultagent
.
CreateProcessW
(
programPath
.
c_str
(
)
cmdLine
.
get
(
)
nullptr
nullptr
false
DETACHED_PROCESS
|
NORMAL_PRIORITY_CLASS
nullptr
nullptr
&
si
&
pi
)
;
}
