/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
use
anyhow
:
:
Result
;
use
crash_helper_common
:
:
{
errors
:
:
IPCError
messages
wait_for_events
IPCConnector
IPCEvent
IPCListener
}
;
use
crate
:
:
crash_generation
:
:
CrashGenerator
;
#
[
derive
(
PartialEq
)
]
pub
enum
IPCServerState
{
Running
ClientDisconnected
}
pub
(
crate
)
struct
IPCServer
{
listener
:
IPCListener
connectors
:
Vec
<
IPCConnector
>
}
impl
IPCServer
{
pub
(
crate
)
fn
new
(
listener
:
IPCListener
connector
:
IPCConnector
)
-
>
IPCServer
{
IPCServer
{
listener
connectors
:
vec
!
[
connector
]
}
}
pub
(
crate
)
fn
run
(
&
mut
self
generator
:
&
mut
CrashGenerator
)
-
>
Result
<
IPCServerState
IPCError
>
{
let
events
=
wait_for_events
(
&
mut
self
.
listener
&
mut
self
.
connectors
)
?
;
/
/
We
reverse
the
order
of
events
so
that
we
start
processing
them
/
/
from
the
highest
indexes
toward
the
lowest
.
If
we
did
the
opposite
/
/
removed
connections
would
invalidate
the
successive
indexes
.
for
event
in
events
.
into_iter
(
)
.
rev
(
)
{
match
event
{
IPCEvent
:
:
Connect
(
connector
)
=
>
{
self
.
connectors
.
push
(
connector
)
;
}
IPCEvent
:
:
Header
(
index
header
)
=
>
{
let
connector
=
self
.
connectors
.
get_mut
(
index
)
.
expect
(
"
Invalid
connector
index
"
)
;
let
res
=
Self
:
:
handle_message
(
connector
&
header
generator
)
;
if
let
Err
(
error
)
=
res
{
log
:
:
error
!
(
"
Error
{
error
}
while
handling
a
message
of
{
:
?
}
kind
"
header
.
kind
)
;
}
}
IPCEvent
:
:
Disconnect
(
index
)
=
>
{
/
/
TODO
:
Don
'
t
rely
on
the
index
if
index
=
=
0
{
/
/
The
main
process
disconnected
leave
return
Ok
(
IPCServerState
:
:
ClientDisconnected
)
;
}
else
{
/
/
This
closes
the
connection
let
_
=
self
.
connectors
.
remove
(
index
)
;
}
}
}
}
Ok
(
IPCServerState
:
:
Running
)
}
fn
handle_message
(
connector
:
&
mut
IPCConnector
header
:
&
messages
:
:
Header
generator
:
&
mut
CrashGenerator
)
-
>
Result
<
(
)
>
{
let
(
data
ancillary_data
)
=
connector
.
recv
(
header
.
size
)
?
;
let
reply
=
generator
.
client_message
(
header
.
kind
&
data
ancillary_data
)
?
;
if
let
Some
(
reply
)
=
reply
{
connector
.
send_message
(
reply
.
as_ref
(
)
)
?
;
}
Ok
(
(
)
)
}
}
