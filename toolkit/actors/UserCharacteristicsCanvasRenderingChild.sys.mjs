/
*
-
*
-
indent
-
tabs
-
mode
:
nil
;
js
-
indent
-
level
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
https
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
lazy
=
{
}
;
ChromeUtils
.
defineLazyGetter
(
lazy
"
console
"
(
)
=
>
{
return
console
.
createInstance
(
{
prefix
:
"
UserCharacteristicsPage
"
maxLogLevelPref
:
"
toolkit
.
telemetry
.
user_characteristics_ping
.
logLevel
"
}
)
;
}
)
;
/
*
This
actor
is
responsible
for
rendering
the
canvas
elements
defined
in
*
recipes
.
It
renders
with
both
hardware
and
software
rendering
.
*
It
also
provides
debug
information
about
the
canvas
rendering
*
capabilities
of
its
window
(
not
all
windows
get
HW
rendering
)
.
*
*
See
the
recipes
object
for
the
list
of
canvases
to
render
.
*
WebGL
is
still
being
rendered
in
toolkit
/
components
/
resistfingerprinting
/
content
/
usercharacteristics
.
js
*
*
/
export
class
UserCharacteristicsCanvasRenderingChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
destroyed
=
false
;
}
async
render
(
hwRenderingExpected
)
{
/
/
I
couldn
'
t
think
of
a
good
name
.
Recipes
as
in
instructions
to
render
.
const
runRecipe
=
async
(
isAccelerated
recipe
)
=
>
{
const
canvas
=
this
.
document
.
createElement
(
"
canvas
"
)
;
canvas
.
width
=
recipe
.
size
[
0
]
;
canvas
.
height
=
recipe
.
size
[
1
]
;
const
ctx
=
canvas
.
getContext
(
"
2d
"
{
forceSoftwareRendering
:
!
isAccelerated
}
)
;
if
(
!
ctx
)
{
lazy
.
console
.
error
(
"
Could
not
get
2d
context
"
)
;
return
{
error
:
"
COULD_NOT_GET_CONTEXT
"
}
;
}
let
debugInfo
=
null
;
try
{
debugInfo
=
ctx
.
getDebugInfo
(
true
/
*
ensureTarget
*
/
)
;
}
catch
(
e
)
{
lazy
.
console
.
error
(
"
Error
getting
canvas
debug
info
during
render
:
"
await
stringifyError
(
e
)
)
;
return
{
error
:
"
COULD_NOT_GET_DEBUG_INFO
"
originalError
:
await
stringifyError
(
e
)
}
;
}
if
(
debugInfo
.
isAccelerated
!
=
=
isAccelerated
)
{
lazy
.
console
.
error
(
Canvas
is
not
rendered
with
expected
mode
.
Expected
:
{
isAccelerated
}
got
:
{
debugInfo
.
isAccelerated
}
)
;
return
{
error
:
"
WRONG_RENDERING_MODE
"
}
;
}
try
{
await
recipe
.
func
(
this
.
contentWindow
canvas
ctx
)
;
}
catch
(
e
)
{
lazy
.
console
.
error
(
"
Error
rendering
canvas
:
"
await
stringifyError
(
e
)
)
;
return
{
error
:
"
RENDERING_ERROR
"
originalError
:
await
stringifyError
(
e
)
}
;
}
return
sha1
(
canvas
.
toDataURL
(
"
image
/
png
"
1
)
)
.
catch
(
stringifyError
)
;
}
;
const
errors
=
[
]
;
const
renderings
=
new
Map
(
)
;
/
/
Run
HW
renderings
/
/
Attempt
HW
rendering
regardless
of
the
expected
rendering
mode
.
for
(
const
[
name
recipe
]
of
Object
.
entries
(
lazy
.
recipes
)
)
{
lazy
.
console
.
debug
(
"
[
HW
]
Rendering
"
name
)
;
const
result
=
await
runRecipe
(
true
recipe
)
;
if
(
result
.
error
)
{
if
(
!
hwRenderingExpected
&
&
result
.
error
=
=
=
"
WRONG_RENDERING_MODE
"
)
{
/
/
If
the
rendering
mode
is
wrong
we
can
ignore
the
error
.
lazy
.
console
.
debug
(
"
Ignoring
error
because
HW
rendering
is
not
expected
:
"
result
.
error
)
;
continue
;
}
errors
.
push
(
{
name
error
:
result
.
error
originalError
:
result
.
originalError
}
)
;
continue
;
}
renderings
.
set
(
name
result
)
;
}
/
/
Run
SW
renderings
for
(
const
[
name
recipe
]
of
Object
.
entries
(
lazy
.
recipes
)
)
{
lazy
.
console
.
debug
(
"
[
SW
]
Rendering
"
name
)
;
const
result
=
await
runRecipe
(
false
recipe
)
;
if
(
result
.
error
)
{
errors
.
push
(
{
name
:
name
+
"
software
"
error
:
result
.
error
originalError
:
result
.
originalError
}
)
;
continue
;
}
renderings
.
set
(
name
+
"
software
"
result
)
;
}
const
data
=
new
Map
(
)
;
data
.
set
(
"
renderings
"
renderings
)
;
data
.
set
(
"
errors
"
errors
)
;
return
data
;
}
async
getDebugInfo
(
)
{
const
canvas
=
this
.
document
.
createElement
(
"
canvas
"
)
;
const
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
if
(
!
ctx
)
{
return
null
;
}
try
{
return
ctx
.
getDebugInfo
(
true
/
*
ensureTarget
*
/
)
;
}
catch
(
e
)
{
lazy
.
console
.
error
(
"
Error
getting
canvas
debug
info
:
"
await
stringifyError
(
e
)
)
;
return
null
;
}
}
sendMessage
(
name
obj
transferables
)
{
if
(
this
.
destroyed
)
{
return
;
}
this
.
sendAsyncMessage
(
name
obj
transferables
)
;
}
didDestroy
(
)
{
this
.
destroyed
=
true
;
}
async
receiveMessage
(
msg
)
{
lazy
.
console
.
debug
(
"
Actor
Child
:
Got
"
msg
.
name
)
;
switch
(
msg
.
name
)
{
case
"
CanvasRendering
:
GetDebugInfo
"
:
return
this
.
getDebugInfo
(
)
;
case
"
CanvasRendering
:
Render
"
:
return
this
.
render
(
msg
.
data
.
hwRenderingExpected
)
;
}
return
null
;
}
}
ChromeUtils
.
defineLazyGetter
(
lazy
"
canvas3Recipes
"
(
)
=
>
{
const
b64Blobs
=
{
png
:
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAAGQAAAA4CAMAAAA8cK3qAAAC
/
VBMVEXm5ufk5Obi4uPi4eTj4
+
PV1NXe3uDh4ePg4OLc3N7X19jd3d
/
n5
+
nd3d7j4
+
Xk5OTf3
+
Hm5ujb29va2trg4ODe3t
/
h4eHo6Onn5
+
jf39
/
l5uXW1tbZ2NkAAADb293c3Nza2tzY2NjT09Pc3N3Z2dvY2NvS0dHT0tLW1tjp6erR0NDV1djMzMzU1Nfq6uzf3
+
LZ2drR0dPo6OvT09XS0tTPz9DQ0NLq6u7o6O3Ozs7g4OPd3OHo5
+
vi4uXa2d7JycrZ1tfs6
+
7p6ezn5
+
va293Pzs7Ozc3Kysvs7Oze3uLc3ODLy8zv7vHl5Ojr6uzX19rHxsXCwcVIQEXPz9HIyMnFxMUyKy0UERfr6
/
Dt7e7q6urb29
/
QzsvMy8mLhoUqKC8hHiEbGB7k4
+
ja2djGxcjKx8XFxMK
/
vb
+
5triqpqN5dno9NjcvLDQlJCvw8PLT0M3NycXGw8HKxcDEwLu8uruwrrLz8
/
Tt7fHOztDR0M
/
MzM7Py8nIx8fCwcLDwb
+
9vbu1s7Kblpdyb3Rya2lNRUY8OD01MDc0MjXp6O3T0tfOzszMysfCv8DBvbm9ubSrqKqioKCdmZ2Qiot
/
e31pYWFkXl9cWFVQS1FLSE0aFhr29vjx8fPQz9XMzNHAv8G7usGwq6aHg4V4dXVyam1cX2tSU11eWFxOTVdBPkRAO0AxLjMqJykuJCklIiXV1NnV09PRz9PHyM3Mycmzs7esq7CmoqWSj5GMipF4cG9sZ2ZaVFlgV1NSS0xFPT04MDNCMjE2JiYpHiIPDBK0r6
+
6squnoJublJGDf4F
/
e3lYW2dbT1BrV09aS0Y3NDxENjo0KzQ8LS4eHigjDhcfBBEJAQ0TAAIgAAAIAAD6
+
vvY1NHLy867tbGXkY
+
ZhXd3bnRhZHGEd3B3a2lfWmNWV2JZWF1TUFZDREwrLjohKDchEiInGR0wEhmdnZ
+
gm5mgj4mMfX6li3yLd3hta2xLVWd4ZVxSSElNNTUjIy8wIC7JyM2wlYSPgnxyX2c
/
LCAACByil0qIAAATPklEQVRYwxWYY7RcVxTHz7m2zbGfbSN5sW0nTZo2qd2mqW3btm3btm2tnnfWXXc
+
zKy979Z
/
/
+
4AlUkwe86D6UkrWqpX3OByHM9gPN
/
RwVbtL05qKRpmwGAxLREWQdg0UAnMdiw9NrowwgOm6wB1AQCi67IarigAEtAjAFOmZIOmJ
/
oNIxRNQw
/
9SILMiskthewglLowD5eEybJCKUoCy0
+
yZmuGho0SFIFJkiOLrqUsVMRI92NZKAKZMDHH7rdlQowD1uuEwLaBIMjG1LoMIakeZijlBI9DCACDJzCPaNiuGyYmAAK0tqpFT4YMVb3WBrKnaxNvkBgcYhZuV2MGM4FKJhMamDS6AGCebMlg81nAIjDDinGHwAEhAwKrMQkMqo7geAZDYTTtgQjvXhgl2taSmgVtDAMtLdXA8wCGU
/
tU
/
D1AE39zuL0GAsWlgBSIpkFppqjNf
+
MsmyAcyxQj0XBj4BgGLxmsQkcZuoYmZAd49QOCI6BPSOMANNAsNTHjr
+
IJYTwQGVdbJ8kqlK2MOZzLk2TDec8dOpOvTbB0VJflazXT9TmNocxRWzZ0juPa9uM0AzPTPE6jyg0OUnwN4dkAqK2tdn8rslkDAFAkWqlhJZYQIASG7MhgoBgzNGOgkmNmEHNVtz5wUh1PRVDWdYGw9Kg2jsme
/
ZoFS
+
TIZKDryaS5MhZ5SZKgzLJ8ogYXOu2BgU7VsVsHBurTBKoJYKGKswUoHNHnVEOJJiAViKjS9ny3kCJjtuq8JS9sSyiMCsi2zWczyLZJGXqeU
+
JY55KZQDfwAhkTuISzEyckIkscJBzPU1vt8XtLvaDRAODFmaBTSSRU5IOQDZOQccXUPAxKhJlMJc1E48zjXzs4pbO0Y8
+
3MXaFqKd4NlPGGV10g4BX6Pkep1uG4kC6fWKWcURSVVEpUJ
/
hEOVMmIw7QBHGLCABpbN1ABIGgEAFqqZhBptIBobBiOxMn7xj4wF12QxbPAv46apcwFOGmUmIZuzhFsD7shUXMDQGAMQZKmHIQLAFCYe2qtCq2tJarBUBjjdBQEi0cET1PEFQFbW
/
6LicazEm4Zoun2ZnNTSuDW8rVSX4GhWYgDBdhcYwhWyksSk2hidAQjR0zMFbgSoAjEDT2qJCmm9HNiGEoLq9DhUepI0izvBAnQcwG6oD
/
Q4B9mmWeBYzDELkuapsQ
/
rQj7iqMqoL6xp
+
BuASbRmqI4rQYNOlHDHJ0Qie6jurD3pQaBHAEQKmMLxpqP31QO1UmmXA2JjlSFQB2APVUxwA6
+
tVKzeMmS7qiinFdjbTkOWkY8Kba8gsNmoH3ZqJERA6zvyzCb2xKuIxD0DMtgqMCk1mfAYBhuYMVyTJVCd5oHWydC4DgGpZMmZygGndTGC4OtlGDaHzbpyBRRnrcnVUc1U45fQebWY2IQZpF0DBximJKVsGylxEoxwysmFgsCkJCIqnoyoZ2WEk1TKThorDQgMFoMozlitSRXtei
+
tKoA4smG8hXTEY3CgSQQ0Xs4WIfiw8JEqtJVOmqLS3E5DhWdHS3aLAUDSAUDZEn5eghqsMGxVoMXYhw1TDdEDTfKIuAkCyPUK0IAdViLk4HEyPTnKGk46BGQSbzYqUVpvNDFeOeSncvtLPB1zERzyvQEBTOG1lEpgg14
/
KyEmCluigY56KM3VxbBiy5gh9RUGAuGe6AuisRz0h9
/
kNU6iC3i6lqc0LOEXC8jqB0QprEqbI82KMfRteViJ9LijwLE
/
jaDIlHreyWauzPt2mWG6aArTJKwoUoEaKcS1flgDAOvtVAGW5C3QeMa
/
PBmxqPiFBDKd50gh0F5p6EnOk8YZkUC8ZjNR7WLgOK5c5UqfGD1u9GVfwfsA2oyxZBkbxqkrRUjUOHczMaF2TszgtaqyLIx
+
yBFr23MNeAMWmXCBhgJaxpJYajs8GRhCjqZUxi69hpK4aiTg
+
vF0IpnJBJjO
+
0sq0kPGwg
/
fHM6AatyyDxW0AJSZS91gQsxQOuq5r5wdruIJCEwRQwbyi
/
QZS6gNJzTRwWhJNS0xjBonVJUdthoB0TceEFegazG4It
/
dlWD7DcQpkMszUqdGt4S3tNMVbfTZaHADViWGVPlqklDTX3E11UAyLQxxHAoDcYBEhmwcmmDYRnaRIEO4
+
20pW8
+
RJ1YaiNtw8
/
dYTb7
/
5nHM6VoVXXIeXmwsJnoYZxsocefxv6zlKoRgBKg7KF0NzDFU3jaQUxkjvde5CkaYVAwLIICnTMAwjNTCUYW0B7WoRK3omLogd7KQ39gA4dXK46aGrr73mjENumfp4uOGcjkxVJECV5rsnHB8enM9xGZqmcbTmKQZHcUhdMtauEErEVnXTtIWhECwLFwDLG55LcGgTaazmYoS9x6hTG5hpZcqUoiwUbj30gy8uvfzSz5busmHdqeHpt99YIKv7BDrqf
+
vrJfnScHMCyTAQ6iEuQZ6lcQJiPGNkeCaxkJaFCa4stSdYBtAKl3DNXDKjpSnZjVifXCmaYkahGkv
+
eeft0
/
PJu
+
9efskl7196xplnXHh
/
GF5
+
Y9WR2XLVirX33HtMb6
+
ezbKoqaQGn5
/
gKozEABvyTA1SLl7CGbzASlApUzyAGNqlepptxyQgURMnNldSnM
/
iQNcwMuiQmm8L
/
3r35
/
cvefLjM64
+
86dP54aPn3vDqj
+
7z
/
/
6tW1kby96KJFnFWyYi2oAFJABSVXYKGIZhaaZSMFrkCTw7DitZIlYp6Qil4kT7dRRGEdGiHViUoWbN0drt
+
984IcPfn7ykicvuXzOzos3hr9un35O1
/
kzwtsgxHoTLJp
/
AM1yVTQOKmhWGgRF4SnINtKmqyHq6ogKFAtouhy5ySDLU1P6XIoO9qZ5aLLEAm
+
xNpmffv7xjRvCHb
/
c
/
fHHl77
/
0V1XL5vx4DW3ntt9
/
nOvXji1Cxd7M91Tu3F
+
9ls8S0mSMt7CBZzG0SZWyrThIq2gKY6lEgAIWEQFejRhgkaYseXnLDBOFbahxW03HzR9n
+
YTXl
/
64r2nX
/
rkJZ9cNuPqaw
/
/
csP5t2x8fUNz1ZFTp07t7pjQsXDhiq4swkEVMJplKhTOKOm0huM4gXiRRstRohD1EbgrpqOJEwMtqWOWbuEirK6mKxq11
/
Sxc288
/
7yTw53Lrvrs0stPP
/
2MjcuXnXn5LZe9EB58wznZ66Z2d2cWdmSz9uB1XfMi3FZNE1dlAkcDmtQUpOKNkwVUHKAC5MUhRJZSi3GqKerbQzctj3DOAlVLLpz
+
1pE33HjLuTeeEl61dOeOHTuvvGLO3IeWX3HIfS
/
dddDWdbdfeOL0c6Yeed2R06evmr79tnVQkgS7WG17FI5NaCcjvF3RcVy1VUABj
+
FMM9LdKVCMDYXK54ujXUmdC6pOCj98uG7VedtXZXp
+
Cndefe3VO3fOWTZ37vLDn3
/
h5fcuPOm5MPx9xnu3H3LynTM2zgm
/
/
ve2dtyW6PnFfplmXBoEtYgXqBpcUqGAAyiSejfr8n6pVpQxbmQm6nZX1sjC2EF3vHDQtP2nT6
+
MHPhEOHfZsmXXXjt33MmVDzy
/
8d4Zrz143
+
Ffvvby62H41cunHL
/
6ph5RUmMVqgCHEAl6gMJyJrQDw0TqBaptmVHk
+
Kh8gp8MLJziyZTlW
/
pwoY6snDbjmNmrVu03bc3sE644c
/
mZy5bNfeiha6558ZVNM66ccfHBJ5140jvvnHzSw
+
uOuX5l0MAhFbOrGQlKABqSrCGITRMMJposcjxpUhHY4rRKLQQIAAgGduG4r3MFt1KWc3MOOfH4sXxqbBp50ENz54avnPn6f6f88Mycpfctv
/
Kuy
+
acceJN
+
+
67625HH30AGpgCTwV8ROM0dAmE
+
Qj3okhTcMYNikXEEYaRbMoVKChMWTA
+
URAwVJTkKj0Jd
/
PYq
+
GmQ75ZO62irw
+
XL7
/
wiXCXHR99
/
917V8xZ9vymMFwaLtl
/
331Xbz16y
/
Ax22b5CU5UWEnGNM
+
RUZ9BCA0FpzASYb2XTHHkYFaHzp5nj3qELNv9SHy51PQG3kxNO
/
ieOWEYfrph3YlheMgB65
/
e
+
OzSz0
/
98eLTr3ll4x1PXfHpGRtOPunki05ecnF4535oOXNIDAnMK3qIXijcivkCzzNoj4JishavlQZ14PWrFnSAXNyzCBm9ea
+
MEvgjI
/
ut2
/
7N4zvCcMYD4baei59
+
5vdnn
/
3ilB
/
/
mXHNnF
+
fmnP4judfDcfPaQcft6YpRWYoBggAGCISc5VJi3y2HBFHUCoQV7q6JIuiIIDqSaMeNrlfpXWfbCxTtMxmS5UU2diw6oSL7rn
/
4N4nwq
+
e3rFp07MvPvXhZfc8
+
PQzD9532p2nHfrERUsu2PXNRUc3kUHE8jZMA0NzFapLFRwZT7AUi5zovVt8w4pFoX7S6BQHEkI94Ad1jkunFbBmdlOlbdY
+
dYVy3ewxDGXsng
/
vv2rTpk1ffHb6U4f98t3d4R3rH9n1zS277rsoP9SUS
/
mRwcOVYtEhEJkRQFAF6GEux9OgclRBgTJPeUIRmqLNsEUV51mW1TjTn9ZcKJWaGhsb62bOrD3mwbnLH3vsufsPX7pp6eefX3nYM38
/
uuTRt3fbfbct
+
y7OkUOzfLKBzLE1uglcRPaOgzzYAhIZFodAF1lsgSfyDoBqX1
/
R1IAtW5ipBSvTseZH2uLZjWN7zWycOeuur8ITLvhgzv2
/
HX7V0mt32WXpYYc
+
stuxx
+
26erddF
+
fyvbmKnqwq5YJCjy5ZpovjUBjoFGhHlhCMAdEl0JZHQQpHnH3WHo7FFG1E26KoB7yY4MqV
/
SvTRqrI2tRFf7x80YGPHBouP
/
Xe5bugs
+
OuQ3fffdGb
+
y5avbgyVOKmVVKpMkmOjGSzhQQCY0XqHHCARdcjimSALCM8Ecm4vlUY3ewYss
/
glK6JWoJtlxiuri01a1b5yMbskvCBQ9ZdcMGpL525
/
tGrlu6yy4sb7
/
126
+
pFvddvye1dyufIxW0psoErzc7WlacmRA
/
I6p5T6h0nsggLn4yS53kyVmDtVmDUTSu4nqMnKYyewIsZNpHN1iZmjezV0zA2I9yw9ri3DzrllU
+
O3e3iw
+
+
78rLHLtj9uN0POPCoLTkylSfJVEMhGfjJkaoMtWJFDPonTxndsxO9yllCjM0DsmPbnsdTEGLRzL38WlPG2BrJMcTBuvJeVVyhedbsVU11bUtePXT9cVu33hlueHjJ91
/
OOOzhXXfb
/
dhjjz3u6C1rxkgy6aNJDJJ6IhIRuwyoQn3rfFsABHQEUCvMQy8KNnCARknQMrW0FiQNiNdgwOWpKo4r5BqzIz0psrR2
/
zvuvuCA3bcuCQ877JRH7v7jpRN6F
+
2729bVB
+
yaJ0sk6ZNkoHNov3YxRvWA0NlZbKl3
+
gVPJorJ8p4DYI
/
5jkW4KUoWOoFQrSJ2gTIBgMnWpvRsmdTL
+
5Ncjmzbuu3AbdsO2B
+
xV
/
joluM2hneuX38sCuaAm
/
Ymc02l8XxxPCK3jmJ1
/
Z62YNv1rTZACuM53MyWTkAHnGjFDYMoynpBEg0UlhubJskFJS1b4NKpXDJVIkv7jdSN7DeyZvbsE05YvWjLQachLbnq1IvuPm3b3mNt
+
XyK9KdVxVw8UUHEMq
+
lxXaQE1R9zyFG5E4VpFIBIRvlDFChQGg65gAYkMlKhSNT6QSXUPLDTZWc39DUE
/
hkU09PW1tp76G986sfP
/
WwMFx22ju7L6605XJ5sm0dySUjCqI6tPTboDjuiJAJTOuRoQzSSRcFltGgpQion6FHWEmT8xNijkSURqX3m9VcV1XIVFU0PeBybcOVplwut3r12wceuH79QWuOXbNoCNUkR
/
aM5RvJpIk41xMcSwyyipHkXCobxUkMA37CAraXSEgMkunOfkdGK00PNDEmg3QmmsDme
+
qquAxbzptpP0
/
mxrNfWkTqR69ZPHz0oqPWDqNc5UopP5VrS9WV8mPDec6ykMj0NPukr2cWsnp3uwLSOBp4s8xCArOAgEPHAYoWGwGJY5qus3zDPhyX5Aojs3gNlbgnT6aQVf
/
6rdeXblqUG1pDkm0kmUfthZznGpu5un3GSkftPdTU1FzKJVmR6aLZmhrg2ACzxDIvCDawdM20AICY68ZDihDFYnsHV46iRMZPFUSN4
/
IVf
+
8K6Zdrczmzl
/
T9ocUkyfnJJHoMLko2FQpkc1NpKF
/
Za6zCpcVkrQSpmsHuCcBzHHvU0ej61gEp4nSNxTxAWBPTR
+
XiWgWHTIA4k03UkrEpBn7K18mUj2K5Kb
+
yl9N0FAOJ4hr
/
OyobcNlsliNLpbbhxnJDI6
+
5dKJ74cKFE7u7AQHAlLNtjmppQfDHTxyMXMuKlRpTHxrSLSKO9TTaLHgXF7hmjLKS0v2kFuenrVm82EdfogFEuU
/
qqCv8IKFFWR
/
FkitwmWzGxDSEpR04k8YAgRCF1nxKaKl2gCSxWZ6x0MBbbp5zkd2YpdEVZbhShgrQWw
+
ZRLOtDc0mTR9FhPKkaah06JbQtVoxnUhwbc2NjYVElow1MmB5BYBYBjIAmJ6sJTxEYI5gY7poUa7oAjMWEVmOmwjStSWSTXEUWRoq6df3imm9VMXF7sqcrwXo6g0CLU53ICRiI
+
QkR3IZvuxrfsn300itoCz
/
D6GF8UsgIlA7AAAAAElFTkSuQmCC
"
jpeg
:
"
data
:
image
/
jpeg
;
base64
/
9j
/
4AAQSkZJRgABAQAAAQABAAD
/
2wCEAAgICAgJCAkKCgkNDgwODRMREBARExwUFhQWFBwrGx8bGx8bKyYuJSMlLiZENS8vNUROQj5CTl9VVV93cXecnNEBCAgICAkICQoKCQ0ODA4NExEQEBETHBQWFBYUHCsbHxsbHxsrJi4lIyUuJkQ1Ly81RE5CPkJOX1VVX3dxd5yc0f
/
CABEIAKkBLAMBIgACEQEDEQH
/
xAAxAAACAgMBAQAAAAAAAAAAAAACAwEEAAUHBggBAQEBAQAAAAAAAAAAAAAAAAABAgP
/
2gAMAwEAAhADEAAAAOwnWmgsavYjkvgHHCIr3aw4Kz4M
/
CJXoWLyw4URIZEWZKBTULL1dDgWDgyVhTqzGgGUlULsAGBwmQKgtJeQsxMTZQSdVgINyKfF
+
1eSa9be5X0uxz4SmLhxVaYkDaiFRMkNw6UFhYuxBkSqQyWYo1kZDFC7NdowVSNruTGQZDEwNJcIHFOweB1E12Uati5exBhZgi8MyZHBTksIJbQDrGNxdgUzBKzoYWMrrK1mlbhsCIBPQOSu4YLtAbeeKhp2j5x6K9fdHxHtkNYuyiyX5NW
+
k5j0yW3AtuUuCCW1gHqmQZq2gW4ZhLaV8JJBC4wZgDFuiRsVhVbY6auNjsNJnc1b0deeqrHq8dPpvacn9tcv5lou6zVxh4wTlIDeiwZMIGicAMUwFiiByDLCcWQxYg3Arw1iZLnj
/
QaBX2OV9FKnBfpDVWcE2dXRV6PzLNfL7dOoC67RvOPU8u8735yZqfQyvnzYx1zfeB9wmzmGIsGCV3QwRYDBipaYgcipfXaokuCBTZVVVDSFcI77o5efew12gr3ny37
+
Vp
+
W6p4mX0mm1PpLfKM2pyu7N8
/
bW57wz582eZ2Xe8
/
9zZdYizZDMCBKcpZYkY1bzXWyyAsVLlQFitErkAMKCtFyoJYh1R5Dd8Ha1fsvbeAzrzKfWeZ3lm
+
8n6
+
X1Xsbt
/
mWRFclEFqG5KKuvpvHGDgBNQByQYpmBbUu1Si8owWqg6
+
LIk4qpJzHn
+
ddhStTknZdZHNFeo9y1xPtfFqB3UuU
+
pk9y1J6yw1gWCx1EZSZkYBkTCbeuu1Tt5EV2qt0sgVD61iCtDVhTh1rXmwXENhaLCjBIipr9u
+
Xzex2STCI7FC
/
AGBBZyjIxtayTMnQsVhZzFwq5VskJsDVYxCG1razBzDJWAeZNLCcgzFhQssIVMEZmYFBHSxKIrkRVhKYQ5NgmTyP
/
8QAPhAAAQMCBAQDBQYEBAcAAAAAAQACEQMhBBIxQQUQIlETYXEUIDKBkQYjQqGxwVJi0eEVFoLwJCU0Y6LS8f
/
aAAgBAQABPwExb1mybN75h2i6r1adNgc
+
fiaABckzssziew7alGTPVHyWQQBGggLKAEQVCqAeG5ztmkr4KTS0XgLMSOpqAlEX53RKzQiSUAd5K0R05QYRuroAIAczmnlCLE2zY5tuxtokcqjJNMwJDte02TWrTlKdFp35PGZpb
+
Ei6ZmbZgsBZpKe8vhcbZXq4F4pEgtOa2sD0XA8f4
+
Fa17yXtOU5jdZkEXOcdFfkCvHp6bopzrLMvFqaRZA3NipQUI6qfe35Ew0mNBKEZAfKUSbWtvygTGU
+
q9OTifohECDK6dyAnWmBKEqoJBCxccOxzKzW5BUIzj039CqT8wCbF1kfmnZOLbRdEAboEFEC9kAGtADnlG
/
INThFgboIK61ITrdyh7rtj25OnI4N1iypx4bIJgNAE62R5EfmvTk4S3cIVWPPxXuI7QouVHIzn
/
03XGMD7ZgngDrZ1s9ey
+
z2KfWw
/
hHWla
+
vkgmvgKBOkLKJsoRi91197IRe6kBB7SIvMlBpbcmUL3Q0ULLzJUqDryqOhsgIWAErQIaQnbR3Qn
+
E
+
qMC8X5AgixVQPymE3oGVpIH6ofF8lt8MnsivxFNaqv
/
KOOEzFCocx36Xf0Kp1WVaLKrCS1wkZb2TXt9Vqbabz
+
yaFtspC8RnwqDsohAKTMI5HTDtECWjpQLnXKmEXeW6nlss7Ra8qVVgty6k2V1FlHkn9LHOmIE
/
RTLQ4NKLpOllMAxrFlSaA0AevzKc4uIyQY3CLoaSeV9igFdQdrL7QcPq1qNKuzqfT6SO7XL7N40jPg3Du5n7oNaC6GxOp7qfp7m0TZSRohdFzWDqKkI3XZDUmbKx0Rs6eRNvWyHoVYohFq9IXzRB8oVZzWsLnfCNVmcT1K3Y
/
TkMwaLpmbMBYeicIOqYRmc2NIA
+
i
/
LlPJ4aWPBEiLjuOyxFB3CeIyASwddLzadrqnUZWptqUntcw9rqFPIGHO
+
SLpcPIariPF6GAcxjmOe92zYsF8YaQrQoMLcIrRN6ifJO9FbunGYA7hSr7aoTyhZpTnxGc22hYgZqTof2PqJ0XcaKCABmlHRAJzXOsCAmMyWlUWXee5T2rH4xuDw1Ss5pOXYL
/
Mlc074WH2ymTB
+
q
/
x
/
FWJY3TSTCpfaFhEVKJFtrribKfEeH5sOQ
+
pShzY
/
MLgHE24Z76FVwFKoZDuzv7rNmALXAgiU25IkW7FR5wh
/
wDVxPiFLB0xm1fm6fLusBgfaKzsbiRdx6GbADRNIiy
+
SuTqI7QjyGpuiwnRxCAhGN0RcOnSUJ5yByIspPYFGSUAsqkoVnDaUYcIdfyUKXSQDER
+
aL6tso
+
qqsc6m7xA26ApnEVMFiGw5rvuX9p29E6gaT8jhpon0mx5ptWth3h7HkHuFXPtVV1WjS
+
9IJqMA
/
8AMfuFguJYjCvb4biQPwk2I7LC4plekyrT
/
E3svGJ
/
AsdxGngqQcRme7Rm
/
mVhaOI4pjvaa4mnTNh
+
g
/
qg3SyiOUnv
+
6a8uE
+
ZWqjkVvy
+
aMkR5jlvPK6Eht1Km0ItAgZp5U
/
gHnf6rLCCMioexA
/
JGs1gVStVqgZBuvtFhSypRrjcQ6O
+
yp44VKYZW
+
IaP
/
qmu1P6KxZdVqZpEOYYIMgjZVvvnCoAA4
/
HHfv81wKr9y6magGV06SVjMfQwdLM6HvPwN0lNbiuK4ogGT
+
N
+
wHZYHC0cHh20aeg33J7lFXQWd5MZN
+
6A1Ww7Ke6N8p3BBVirJ0ktg6HluUVDv7Ib235RyLTCk2ACayQU3Sy8ynDplYriWHwbwys58vvYaBNfSrhr2kEHQogAKrh6eMoVaZu02
+
YWJw1XC1TSqiCPz8wqdQiJ0XtGiNTMP2T3w6y4ViG0q7S4w2DJWNxhr1ajye4HkFwWicNhuo3eZuq3FsDQeWPqDMOwmPosPxLB4j4KzZ7Gx
/
NB4iZsU
+
o0CS6Aji6ZEeIz6qpxjh9CM9cf6Rm
/
RYavSr0xVpvDmOPSQonRAIiFCNr8j8TTPccoO6t2CcCro2WZx9EB5J7SdDCa7JYglGCL6FPgH4jKxuCo4tuWoJ7HdVvaeDup5ZqUc032VKszEUmVWGWuEhM6S5Y7B0sYzJUHo7cHyWNwWIwjvvB0k9Ltis5G6NQlSqUtF
+
yaQ5
+
gt
+
aOLrDxJrvlwyhrdIOyHD8dUJeygY8zCdhMWwN8TBOvN9Z
+
ieMY0MDsJW7iQ8
/
TshgOI4gZhhXZf8AuH
/
2VD7PY17vvQykzci6o
/
Z7AUxcOqHzMfosNSbQpNY0AADQK5sHZfNTtPN3wlWbAkfNWNwtkCoReEXhQSbpossvKE4TqjqpzOsLKvh6OIovpVfhIhPfiuE1KmGLg5huJ38wsLx
/
QYijP8zP6KnxTh9WAMQ0E7O6T
+
axb2NwVaoQHtFMmNZTpDk
/
gtenhjWqG4E5FToOzEuEAFUfYqlHwS3q2cVXwQpP
+
7MrMWPJzEKpiKpaWtqVfDm8um
/
qsBjMXhS0teXUuxuqOKoVWNcHgZrgEwUXsH4whVbY
+
LptsU7ieCbV8I1mZ
+
yY
+
QF6oQjpyN7FaqOx5aPHoswTupxHbVAAxCIuOVzyCLgnXTGwntnXRVsJhqoirSa8fzCU
/
gHDjpTLT
/
K4hV
/
s
/
Va3
/
h6
+
f
+
Wr
/
ZGlxLCtfT9nqsY6zgOphXCuGOxGLp1HMIot6zNrjYLjHFmU3uoUDOz3H9AqkVctdsSRDh2IQMLD4pjopvt2f691iMOHZjp
/
vusK7GeFFN0hv4D5JriJgwCdOyqUcZl
/
6XMDfM1ub9F7Fj3tn2KoZ3I
/
qqHB
+
JVSczfCbuXH
+
iwnAcLQhxl7wLTpPkE2UEFN4RLp0UqJWVARbZEiIm
/
KHnVya1bjlLjojMIGQEQoW6qAui9gstladbqyhcZ4n7JQ8Nh
+
+
qC3kO6wuDrYzECk31c7sO64jRpUKNIU3ZcsMy
/
xD
+
yLTqAYn6KYum17yQD6rC1wDI21VXhDMQ
/
xWvyTrbVUKDW
+
UWHoED3KAvZbJt2gqYQKYWkuIEXU3906qyhXX4hyztAui5rkDa4RPMhGVBbEbqAFj8YzB4Z1Utk7DuUHV8dXqENLqr9f99lgcE3BUYF3uHWe643evl
/
hpj81wvhvtOGe8vLTMMO3z8lWoVKT3sc2C0wUGrC4Wu7JTFM
/
GCXRsmABoE6LoOmyhQnTlMIctXEGbIShsosgEVoYU6KFB5GM3J4JQBCBlRCOidorqU
/
USg1cQw
/
tdB1HfUFcNp1sPiajMvzTRa6481zMU18dD6YH0WC4i2hgaVGkJqZjPzK4rRqse3EEdNQdXk7
+
64YaBxbKdVoh2h
/
mCyAaLKmg5iiHWj3co1QCj3Qc1QjspRqzoFdfi5zJUBF0FGoETbkAoGaSplOEoUwRoskLEYOliqZZUFlhuA06NcP8UkA2Cq0adam6m9stcIIWL4VjMDUFWj1sBkHcR3CHGuJMcSa0
+
TgmfaOoR10BPkVw7HYnEudnoZWbFTzpvzSRpPIKb
+
9R6vvNz
+
3IX5HVHlHOERMc46igEYgpg6QioUcqlKWEEp
+
EoVGgPpNPyVPAYVh6aLB8kGDNZRyIshaymF4h
/
hsm1AnVBsZXiP2heIe6BPdaoaqVCyqOrkTCkoFEBFMdBcCtVCi6hEJogWRQF1vyOUkXRhZUBcq3OyhEcvkoKDR3UQp8keeeEJLuRCLUObm3QtytymU0pxQkrflEm4sskaKT7sczqgDykDUSpQRFubk3XmdEOTdF39x2iCG6dqmpu6K25DVH3dz7h
+
PkEOf
/
xAAkEAEAAgICAgMBAQEBAQAAAAABABEhMUFRYXEQgZGhscHw8f
/
aAAgBAQABPxAo2KHBqI4XKoAH3eY6GsapQATONdwsf2giMBscW
/
2V16ZCFwtTCpmF4Poi9IxxgIDeKoFhhwfGpcu9RiO4BW8x8UBKR3F8S4AIhurlIVBC2ZdwEyQiF6xLUqZ3ae5RQbgJQMexjZprxDVOGJSW3ClSFS4lTYKjxcpqMGBwpdM36RjcwIFFwvrEAQuoZuMNNLZ5DiNxtbwGKtmMUEELlLRcBF0emsSRuYGv9i5JQGngalhBqPbfozMA0krq7wxOxAFFXiZWjymYUKCyIuVrEFE1lsXAlfFSo6EqJem2hzRcCs3jYzsvEJQxNrsgUZYgC5VocEULpeeWiW9
/
yZLZQu3jtli0E2ZIAz5BibCMT2VKb3QwrbpSLtPYMBViJuLBLAApMQRWXmkJoowFOMMrU3IT0u9V9ZgQ4gXEX7hNCirhxkYMWSzLcqYbrIYCCjUv4Hc4gb4IS4XuLPsQEGMAqgrOsylGUzVsMmqh4t8Duo4KGa3V1AuozBa2ZIwq4Wps6RlGykQzuFHBmu2o2NVLzQULLm3ATAbam7Bn7S1q3J4Fl3zXcsBtIOshRtKguQ781DLiBEKsjaDk7FXLEUl8B5hjkHmXFmvF2Q2KiOYhagJvUcFzIUwNQ4kFGIwL8uC
+
Yd4o28wo7dG5jkvcTeK6
+
rgthsZIUeIK9jF0rC1AJYrC6x3DK0aw1decwv24vsvauZSxVULoo8E1YXUhLaseTqVpOC
/
fEB4mEoAQVmsruF
+
5
+
FO10SnwLS
+
npOGKZOY0FnjhUG1A8vMBpeXNNzMXFFqqboxFm2kEMzANGpaOEexcguDWq1i5pm
+
jU1YjgVZpXiVq7qMoQ3ud4biUMrFlzBUYg9GaBAa1GlBhLDXPrel1UN4oNNG
+
4CjUBTeV9RSroVO2WyUXldiW78scFawlzmgFteNzenFbim2FncrKnbyaxxE23bGTbXcv5XrCyCJb89vGOhtWWRnKdwXS2MlOPNam3N6
+
oX3KEspltVuKObY7M4h5ub5l0ULM1e5bpM68y1RrwBU0cvNRU1dir
+
4m0wpDJVJ30yzbZBqGLf1KVQxWU4lJivgGynMt4fdYAbpMxTBhHP2R1WuyDk6xKsBY1RBa0KNZRKKzZBXJ3atXLqA8EFSheZUVBgu1wVf2IFWWeGOIDOPEdDiAzd3l4M5dkI3pQPG9GmBlTbBfvslER1zKG5ntj9AoH1cIoCovIvAXKLat1kaFuCXQLHOyZ0u07JRw
/
MSrPwpBiqltk4dwLFDRLmKmXqBa3CAB2tz0DaxtFFWy4irmFsF2
/
sKNRDy2hX
+
QSV9WEAvhYVEvJZ56lsmnIVbAqmG643BnylzMsWruYFam2
+
Cq9EYK72QNLW9uWoVJOK887QjaYCiYEjt2c3silZaKrjtK8XX
+
SVaha8Iyl
+
tGrHPcKXseauYCXaq4bWNzsAcuGHRGsW6xWOwZTCE0wDGTnWP3Muxi
+
5
+
5iKwH6mw2v8DqPXEU8va4lAW24lYsLm9UlMFBTiVdFyqNxQ2gCXb38IYbgbfoMyrRfBoi1UKFqDKNVMEIUhZGag7dIJjW6hPqOZq3BbSKJViPCMOay1JUXW36krbvHyOyMojSu
+
YLq7xNbg3J0RDIm7g8iFfkyKuACYfY
+
SaRgc3HB6dVgeTgiYohw4bH
/
YKhcs6oxC7EK5nUhvoi20bq9DUyIIIVdND
/
ALCDdURR5ajkMUOMQo1DpK2YOBtzzcGNuISs9talxxxNyF5o2wVkySaHFkLsdVmAgtrtvb2uVrywrtZbystjmLoovV5lUdtM5om3
+
/
4DMVfHDfyEaG0K6YlXiZ2c5inxVKVOLrA0PWRgQ08GvcQsGlOXquu2JJerTCzTwXghz7FW1uFVKKRsepfCIu25RWg7UMHLKbDi1jnk2DFPuNUFlF
/
IWgVgmOcn5uLk4ZQgYIbU8JSRPuHBspfuUosthYq0cbfbHW1y3OIkMSrSmAasr0M2bjMxAMGD0TBakUghhcMxouU6TyXc6UBExtPryHkY9jSdB
/
wY7khVAVTghiobdDcueNsD4pdEumlhrB6lwKtXCMVtkV
+
Nw0jhv
/
KhIA2CaYvMG3gnXvbhdSr3ksEdd1eIz46NaqKRXPc5csoYP2IZUvEMhC6YSvoJminP
+
k3gq
+
5S7RXtH3HFDUrSINsXn8TkV7gSJaOBD3GbBakckI1scGp5CQNBlktag0p2CYzBFjpMgZEMeYTIOyzMq2eA
/
wDsfDBG3qCdtYuN77htaMGQKxnw7JfGa0Gj
/
wCEzCkQqhU
/
YaERSgadWZealLQ
/
1F7QNAoHoVx2dErZS
+
+
VvypDu
+
AKD0RBEm7dMdSwmSumo2rf7EMZuyzuXwnHPnEKQCirbo89xbIqFjfEAaAwYDBULZSEwkFkLY363KaVFB4iEy1DsCyUQ0DzbxC
+
0DBCdL6zVX1G9feWulenuYVFdLj
+
qcffX
/
nJOYeAxjRfG6gGQqrkmpMG8ZuqnuYwHeoiXIXrNdh1B1BTpR
+
kln
+
wN9kMEjTgn7K9QoWbwxsUcYVJZE2PU9zpVc
+
4ytWQS0sjprEWkwQb4lcrTMVikoERSZuophriDYNKH
/
ks7s3RKAXW6WClG7gTLIkmjiUNkJqIDKEEUcpWpHAM2auONls86qv0RLAUFD9WQT0bdm3R4zDFpBkACE5BX9IOl019QR6hfEcPCNBSOxq
+
jRgK3GTETrBM5F4q4NXjti6ZK8c3iqHYpQSje5
+
m3LHiFYHa4VBcHqVWUwF9twQsBWkyyg5qPA1FVtiOl0JlgFq4TKqp4IVRkNR2EAd7qN2pmjTcH
+
IeVjXRzL6NMcZ9UvKI
+
iYFKDn3TYTq9nvUxSi3kNu3zFZ0R5XTLVpWd
+
ZRnQSxnWSG6HBdbFqH7SruPI6YCAWJ5YPqwg5YRODqFQdly
/
COgoDzUzgmTw1jEVYWCJCqxPcdQFOpXaBOI0yVLU34F1BEGmyOZJLXEb3UDMwYSXiDGo2VLAOdyotUa7Ir5cuAdF8CYtYb5X
/
hxEnoftTMlF7gDYOVC5KiNgxHQzcuTIAStJ8jiBUjMZ0kJCJZqBo1RAYZ4DUNI9zAUUEuIeY5IlGrg4gtrVYjkEBYKFAsQYKe5bU4WG1UpUteIWSlnmW1iLmWGqhcunYEbawUCsOjUIK6a4lK2ZrII
+
W3P
+
8X0R7wA6DDPe
+
ga6pa4BkpqitJMgscwrGY1AqYd2dQS4KhCNth9QJfVa53H3CoAdUS
/
bLmKjqsELFy61hqKBc1KlGag0TUpuXHyx18DZ2RCn82ZbQQndHtY8j2Ro2fTUE86rkY4VXXteEH52bS1KZ5qT
+
wZgaVdQr4I3KIHuoNy43CyjXwyiKVlxKFeBCuiLYLDCklK1FiCOKlCNxsXBbDmxFTR8cYmAZfgGQ8QMDEXTKXUK
/
GeESEnaNiWr0AhGGgOPhfFSxl7gw0IOKU273FLw
+
ZQwLxG
/
AlcstCweiVoKVmZYdYuWgK1LJBhlR9CG6WHwNKhaAah0mBuAu
/
A0bMQTNIDmZzKbZxLIT3RuFcygYJSkrdu4AypVIb3MGIn7MugepmIGrBFKPUES1FGGiK4xWIIlfBQNfGhS2UK0SzCUhbhhBAtjXQRGx4mSJPBN4RaHEK7QJRWrJxBNJEOYBKm0NsQYcAgNRxQ7hmeNBqKbguAqjMoxZT8afKzZNIzdDfyZompNvgbs2jRhBr6mz4Pz1H4XiE0eo6mp8TT8f
/
xAAiEQEAAgEDAwUAAAAAAAAAAAABABEhAjBAECAxQUJQUWH
/
2gAIAQIBAT8A5L8PXYO8Xp1X7fWNPiGHqboxg9HpZL3sDBb
/
ACOkMkWo1MfcHe8s0s10yoHAzcc8Su
+
uJ
/
/
EACQRAAIBAwMDBQAAAAAAAAAAAAERAAIQMBIhQCBBYTEyQlBR
/
9oACAEDAQE
/
AOpFPh0lQ8MpA8MQhGwDlQA2GbaqlfLtZsKKe0ecoUI6BtNIM0xD9hXbGLLZzS6fMepAxRWKy0iD1lSlLEedxxiH6
/
8A
/
9k
=
"
avif
:
"
data
:
image
/
avif
;
base64
AAAAIGZ0eXBhdmlmAAAAAGF2aWZtaWYxbWlhZk1BMUIAAADybWV0YQAAAAAAAAAoaGRscgAAAAAAAAAAcGljdAAAAAAAAAAAAAAAAGxpYmF2aWYAAAAADnBpdG0AAAAAAAEAAAAeaWxvYwAAAABEAAABAAEAAAABAAABGgAAEUIAAAAoaWluZgAAAAAAAQAAABppbmZlAgAAAAABAABhdjAxQ29sb3IAAAAAamlwcnAAAABLaXBjbwAAABRpc3BlAAAAAAAAASwAAACpAAAAEHBpeGkAAAAAAwgICAAAAAxhdjFDgQAMAAAAABNjb2xybmNseAACAAIABoAAAAAXaXBtYQAAAAAAAAABAAEEAQKDBAAAEUptZGF0EgAKChgh5XUMECAgaEAysSISAAKKKKFA3SynzacepfHUAXjnSefFp4vYXYOJlYpR5gFyY8PQW2IrEwDZ0nqrDoO5qB2H1skFkf
+
ExTbvL
/
p1RNrQUw6JlTqBbBi3PmqCDxddAul0L8exLAZqOmJB3WwTrLtlWmocrtOc7InYhUsMuZr1mRhGbRPwAJwnfdrwLbveRxceQ7DlSAH9xfh8qNoDql6Mz
+
YZ2
+
XvB6phk
/
G2zmd3oWQgjmOiJMN5n3vXFInosMQpChvEBZdBn
/
ZcMiKpomHjUKdQPN7mNH6huJivG0IkkOjyY0sEf089LI9rLRS
+
YzdxsUDAgU1u92sxUw9wCHAwqPfNHN5suNbHLA2xXRdKAeCEByh72VRxaI0sD9hYfLlFk75MyXqfd2UH
/
ukTvjQSP1hV2H9wJBHw0DbQ
/
h8xCDtGiIUmfdBA3
+
jMBcAE3bBIgD
+
oiS9JGnHreoqhelQU5pMRHta2dWcadTtA
+
f
+
2RtqXsXq59qDq11mr1hCz4ad
/
EoeBHueCw4YRHHyk8Itfv4O73hiZNeDBX
+
lUFe9OhC7lTRGqHnutATNgTVDbkPUBO
/
3dlbeRZ7nHWp4yMP80b9uaViR7cysWZkFuzuXmPZ
+
GzIt4rJDn7qzNd9sIei9Jze71cvTzsLtjDsUw3cRu8iCrxQQ7nIiDqNdY5dK8PzSGDVj0VqQnpPgmf85
+
cBcK8cRZEc5uU5N00FFHMkSam3DJhHQhAs17WhlXkihC2imftwOb
/
kxVBavvURM5xq42zPVtqvmwjcaUHP34m
/
q136Iws
/
ZAvr4d84He
/
PeNZ
/
OT1HfAXwgaHT0BODG5Wzll4g
/
SpfYOiDTQt9I
/
G0jd6Exj0iqUJm
/
GCTIZutJKSGn2BXxp
/
CPL2Ag8KLqlgD5Cg6IL
/
dIwmUF4T
+
/
0cChGbn3kVsn4CDWWObpoD64TQQdmamXToUXYbX63izoo9qTAqHoSUWlcs
+
Xab7zPOp2XRC1aZhTv0p59Qd93l5cKBrCMVTJHh
/
Y7XCLrS1k0Lfumhb5f4Xt1GIu3Q
+
y1kkEK
+
pcH7DklgUJn3X5dVETFB0fA
/
ZzT
/
QZk9Z
+
bSMQzHF2nxQzH67b2GIvUJDoBVhmDcNjJy7ZO2q8ADGZwkYMLKMbHDm8n9wcFodHFkQbPsHTrLsp
+
qT06q6
+
kTHv6zrRUA5gBbN1ZvTEYioxRa9lufGNuSwfxKtk5nGx
+
Yo7LVDhoodtqlMQMqwodG3
+
J0FDGQlPiL3pt6yX8JuAs5NZ3koznHJtruBtx
/
BXboZkoWe
/
FpkcWZ2VVUdD3fgbZ25evj2R8OdbAxA9JwtfJxN4xUqg634wmutBZ
/
rq1BZ1Z6o1qb9hnX3b3lHSET40AhfYqByS3pq3Bc7NdT4FKYKI7OTjCLI2WO9VUne1QmBnFhA1Y5P6meAFrivcMQfB5k0mG5NXk6npnJCYCebORsCsnYqbOXE5H8HBqXrtScxtN8r8PAsGDVxhzdngAgjiMd7FCVsJ72V
+
UoIuGB0uS79VJGu
+
1P1o8ijmLUxnDKZEKbU4c5CrLiV94
/
plMxjgboohF
+
Hr7U8kFLzsV0eVU7MRjErImmJhQVRq0QoaG
+
SCP7J8DI8VjtwdeU
+
JcID6NAIMfkQZ
/
xKo7n7WQNGBf2MhhUmKlHvzHo2LXptnc6eT5H7VPzqXmFdViU
/
8bUjcE
/
OBhQxQSRJ0G9Eas6LQ3f9yicDVk8NLLuPtgNMp9UAqxKLq4jGj3o3nFYXSWda4j2gaqwnBJH
/
RsDxLrJhlMWcbeCnypdpzP3KB800zrWcN8EBvP64xTtvbQHnkTTVPyloDofDZ
+
flLSI7BWLL
+
3y4SIIo0TN0Wf5TyTCCMWcZ3mUDO8cEl5LtCF9Iso3JpEAMjWxEYR5xiY26gLi83o7jKR6DUloKUgUM
+
y88Q
/
r8G51fJjysSIO
+
loMmYtfP
/
qnM0tt4QR4Wpzktl1qjW7uIU
/
UXZ9ruej
+
71W
/
xNga6YHr8NXrvWsjnjVY0dV4Ot7SCXk
/
SWVIT7HcddGidljUjXagCg21Wt4H5MUKtT7ElIna4GIXKUo6YskDJcZjl9X2v7kbZ77g4aoK5dpzYjRD5lHMd
/
wTlVKTeUuaMNndULtB08
/
qu6
+
DejBNl9Dxyc8N
/
WTJKK
+
wWMifNtA9Uhpkq5Cbex0EWRGES8pVG1MJDClBx28SbqmKjX0HaTsy
/
TNCLrgog4t9UDcAB1yptxd5kKUnr
/
4MdHSk3zuekpw8oSGnCT1H
/
oKX4jgEWRrBorSxZSUVe
/
Xe9tPc1EFdejQ7pZJbElsVWBLibp
/
Fkhckl5ESQjqv7Y0oa4S91P8c9wfrdAPGTRlOXpIk8M0R2SUQ2bcJRUg
+
LRtTKy2bimKyVXOS66UiI
+
nCMPopvZF0j5KWtNyV
+
8ua3t7nKbwRkxj03
/
WhgUmOBOfvRmo
+
kQ4NlXOyg
/
/
cAESozkfsZIz6R2OVzJyypKc0HL2tthreuxpwh1Q1mnw3
+
mja9
+
o2PclIELhGzsnQ9eyn
+
gRlUpg73
/
uyC3Zl4MlSRPU7CnSGwWTqkf0rriSia
/
A1OXWUgLLBKq5hcByY7zLOyfnxfy
+
drQ5PoFG
+
AOarjubiuxm6XNo12pv57Rd7RVnQ0fI5l4wd
+
4RQ56wxOmgX77uGvNtPEl
+
aSewYYUaDq
+
E87Ie7NsCU4Ct9g7RBIufnTLl7AjFasHy7fpw9m0RSvXyQxw6MyECOOYwvX
/
6vs
+
U0gBzDF9pW4
/
5DiaSM5j7
/
Km
/
helJRaQZy1mlc2yIjivtXvO7gRCLsjFQJJYQEc
+
S4hIlTjLqALsojcDYsphk5ShyQ903YFDzb03cB9gZOoIhjxuarO1dnB
+
l
/
ije5bTYbzXR
+
lOo8KRzPw7IN4roclvU8qbkzH9CPGUOxn8P1r0z7ZFHYc7aCia2cOpuCDhyLof0Yb3J4g
+
QMeX6vKvoLJf4N9sWd0giuQLJ
/
vhPFYZrhDR5fX6bTRIRi
+
FKGAAUxmQV5jtHCGNeC7Ey5E7jK6dzr69Iiv
/
8B3YYJyWAv1qWc8uNIcb5IHsHSf1d
/
bbwEt2litVjw3nCb
+
kf91o6s5j1cxBtsGcAoOThvxCy9uMEFCtbfYQcN5K9WZjpiZ1iOd5CCOEzwpkfDb
/
YVacASYni75gTuD
+
3loJUmX29NIhSKdZx
+
g77wtRmkacuMqyXJ5o7e9ziOhIghUJYNDx4LpP
+
GPvh9GNUft5gRK286OwSLgrxIjvKyYoYSe
+
CNrVG2rhqa2O2aj
+
VZIYkSWs7zkhEVFPTAvlcvkmthI5lEpPgxAclSdvYKXwNpwRrU9im29p23LQf1vZJW1uHVo226WiR
/
G4gxa5Az0zUXTXOsbt2SESfRqgaLzxdpuVIBxhMO6R3UAUbOJweNss7OiTWMwEAJUyDlq6n0qPp5zy
+
8IwUgxmmKkTl2oqHv1ZsxnbvD1V5FQfbr1EBbQEltCu08rXaREIOeATFVDygkNzH63uJqEPtXswnaTV2jVcUcXioeRtRlTAjrU5q9dzvykDse
/
VgaX334CzrNjqVq
/
2JwVjI3ODeBKHKwUt7M4JlFTT6cLLhwCPPu3r4Uu
+
slrTMzjPpl7K8CfdINlo3
/
907q1wXw3IlxXVqmd
/
KvXlUflCCB3gpArILzlz8uQ
/
wGsAWHABq5V3LnXGkf9qHNYkraW4lIgdwHHureKI65WAAVW7YZ9kdkQwfFxbTlqQVSl7PVU62y
/
V6TJLBqaPFfrdehQYhhNKtu3iolSdGD1krQvFt5m9AROYHc4
/
z
/
67HV4lbmeLYtlgaMWI339wyKy5kSGUyQWpz4KmjDs92LBr
/
LEAExMGkucfmZ5NsC6t6mkom64TDIVgzU
+
gB0zKo1m
/
lHyPdiqLMd0tK6OBWSpGCnK
+
ISqTTSNiZMMa7bV7IkxlJt78v68B0R8tFr1r6CPvOIFOXvM87BQEfOwHY64
+
0zRNfLt84aW1P4cmMxXrqiCQzVBcO
/
PlEunKJmOJnl9zmy6XjgdJEjFvh2dkyPnfCwGZ3Fn5HOAaRk5QE7oANl3b139aGNwxBYzuOIfOy90YktlqrBlOwl3VAf8wdva6VrZb18R5ZYJCTQWtrZD3Cuh2GEA95reZHTtXIby
+
TLMV
/
SSPJcjf50S4H
/
acAy
+
Edfa6VUnABNHgU6cad0eX35bsgmxWeqvgtzhYVF
/
pjxR
+
+
4LvpZUV0Y0usqIfYuwU4IJPAibsE4lNhDCqcYS7h0xqgF2X2vezEYiXzQ5S3zMQELcqimaAf8U
+
6q
+
io657BiR4Qwk5lRdUoaAbDYaWH1sWc0PxuVUePf5D
/
24JPwakwcfDW93rlYDS5utqcZ8PdOwQ6ij5ic1tBxo
+
2KxAx3EmsOP
+
goJmdAd2swfcemUT6NY9DuJMrYr4DzW5hhHA0mGzgX7RYy9DNLQJ3UoqHGdaQO5q8iCKe
/
n3qVXNlS6AIo
/
S2tE6NKS
+
TR5yEijpCvMVplsYRYYeD4SY7w0tqxzYvmv3
/
9U0Tgc7bJ2x3clK4EQcK6TO8Edk
/
ySUhebEekEYe0yQGyHVeCWZsEu17LC5RY
/
xc2VgzEh6eGwlTOsLpN
+
kfTjBj7O4UEJL1ipoLM1iJaGZkUJVJ9A2Xm80gs3DHULRFYQ6vjoXBo4c1wQyC2jS1gY3Sj6KqandVzWO6DNKRCXS
+
VB36A59qqeGnngpu8I
+
+
KPYEBVKgzpFq9AL17oL9Q3y59t88u3mMDswQ6WKJefxGvjZBk1m0joie9JvkHU8wi2SlpN7Ezuz2x
/
zD0swQaIjuAaI25Cz9rVIW6iqL7X3BLMyY5c80lDs4JEl
/
sQtPlhZT4yH2X9m3353b4Z5uHTV2
+
6P8tJ2aAVIs
+
NQC6CBe5
+
X
/
O8e2LYCgwaAo1HuCySur
+
XNxR6JiXklgmkFSQO10ZJ5DU0Vw2BpmOhlInmb5PhWi
+
1vIpMdimNlS
+
ER2A
/
k
+
urdGB64
+
fG23yd61tUmfLCdpzxPZ
/
tNafZMoXl0G76NGE
/
BGz0T4
+
NffpREYY5QvlRZjXFsfqfYbrHKz2z7b5aLjt0neXwKsxpjRul0ISaCXjdKe2xlkKw2tU20hSKj9QshSinpljYgNdtUQfq61bjDuazefhyLm1TutvD11qm6u
+
FHb7XlJwBne5
+
Jdi6kKXkZ7vlZtwqUiHxp
+
bkowQNmxgETqa51Q8qkVk8AENKjzZEarrDMTdpF
+
F3X2PIgV5ntnNICu7qhm
/
r5Uhocz3UwA6O8WtBOZEuQE
/
CTxugRUeMs483gNg7PajIXROkgdKgJCC2
+
zoFxEGI6uenxR5CQkdKYu0r01fWyyJGyojr3
/
VjQUPiio2yZ9pbU937Pn2LAwxl
+
ThY5ITaAvuPZitheQOibWyEpBDLPH6j9Y7896MbdI5w85woBew
+
bBYgSHdQp7YU5BDfGhiCeRbyPS3hxXpeflCknOZ
/
T0kA84PvWCzq4AdKDyJ0tq0cLBo9ztgGbgH24LYMhVrz5raCnZxMjTu9TvFEYbWAQCXnYRpDCwYMzfvaa3DSw6b
+
UIcIgP5hOP0mdlVE6uroW8
+
4hPDK2uJ0o
+
9uErNqAGB
+
CiFTKLFyyKkokI9xi8P0HM3
+
cEEof17OWXcjE1sa9xIIX1EnHzoxnet9L55hP53NpjX5sUjuu
/
nT3zQMpbHSzulk21fDsJ26L2YtS3XDpK6pVY3sEU7y0hsHHYITEKBDUr5jggPE7AbjqL7YI
+
1Jph
/
o7ITn31oOiaw4KdFcHABLRxRIAqvpzKjuVnQ7EVHn6w2dSsymdGRdrz2wu5PMzt7EavrHW9EhEFLeNNOvPKerw7Do
+
pZ2jgcdgVOaPlT49r
/
Fyj0HvS3ju2fweYbJHVaxW
+
W1wvZDGN1in0qBlaxDZLfxTtPYx4xS38mU6o2RNcQXjKjTn1Ll6UpCtBkAVGuax9SQw
=
"
webp
:
"
data
:
image
/
webp
;
base64
UklGRqIYAABXRUJQVlA4IJYYAACQaQCdASosAakAPpFCm0qlo6IhppTaILASCWlqmtOBCcBy
+
hnWspGMvMlFed9i9jm8fuWO3nB0RgvH
+
Hv8R6gHCL0APJ
/
75H7R6hfS99GD9pCb
+
CG
+
GZDFYadXRvVKweNvUwvROpCqMZ2UosUNz1iMnVkxbOk8sURu
/
NdHG19
/
6qH8Z
+
XDElU05XdTB7JYfSlnHaBv0MC6irkD91YS2nT8IwYVnhU
/
ZcjjzLonnwBsnxiFWSPJYLw6
+
YRY6ZoqELn0gDoT8QF0xdZnQHFietk9eKMaXijNVxzibJhuEaItNBr9aBrlZ8D5zyQO4KPAlzzjWRlv9bQX2uiJBAXDZ4EIN3zOvgD9WyjESmv6BWqGmwQ3YBBrVnkiJ6LNqPf3PNf6X
/
VHRbJOYRiRWbE
/
E5thuH
/
cBi
+
4l8pmOfuOeAEB6q6yHh2FykC3zhPFNH3p9f4inMepyqTwDrynZZZl6u9TMTcne2bBg7oHS0I4UQTbp4UIpkGS2N7N1DqFpUPZ2InhPF8FUODMqVyazavvW
/
GvRYSvLL1Jp02BbwNnh1Qw6oRsRmldvk
+
Cv54Z69bd292Q6nqgt3o2rEuYB0SfM
+
puS0fZwl16OdWGUibGx5OB
/
Axrs3N8rDxeeKR2qAjwffIfTwscfDmIQhFuEgtrJAso00kw6pe11HK6aGCMKOQNoxI2pUb8OhGohyMsTfl5MQKIYohTbkG
+
JTyVCA6ugBX3B39osfSn42TyL2yGl8GcAanM
/
4MF
/
VAyvZibv23Ky2zPto1GFh9vmiOW8iLEW6qqwkrIH5WGoQXHG8fI7MW
/
qRsJLyW2vk0nAmdp2UIkAEqcl1SSl4zZZv
/
2qqtqw42apGTDpg1ElW3XEGf5y95XcppU
/
JuhzyKMLCGJnajehdIJtTTxZ
/
l3oT8viNGHwfj8xbckLuFivxby2r23PKDLJoeyvWZKQSelMr7QBcnmn2orshQN5sTZ5x
/
BWpTiXP2ra0J9t
/
vIxfHwFM5WQmkrI
/
ECXHnJbMBdY
/
BvNcY6xFHjtnveD3c6taKDQaGDdrKnbryGSvh2agoGiiZHQRAYOSRY97x84x3GqsIqWQ1vTT9lRe3DDee0
+
4APVHfMrOIQMjsST
+
FXYVrdWftoNbvaOrRBkDkAAP73mPLLGz1IeicwdJK2HhnyUD5KLPfhdXjt8pTT4VHntTn
+
s2TsRPbwab62e4JzvRwfA2frX78TFI
/
6uH771aC
/
Xb5ospVPJspBd1iSUMSD3wvRaDD
+
uxFkgaXuB
/
1q7YS2hORHmzZYlXGsaJpPwdcOZcO4c
+
UiOCvldNHrwSLxBmIy1JT9IPo86kHZHZCOEYGTo
/
/
5hQbKgEzeXEusoTOPT6SOYp2obHcJnPrsi30FidIZTG0Tbcnk6f1gU0hDuCoNlPBQDdO1GM
+
gvTPw
/
GeFzPy41y82ARX6tWZ
/
4R80T2Z
+
A7AiB7dmuQGp0v1lKRpoXEGBfiXoELqXTuMnnWGLCjz2dsOSduH0h0NyjcXbtDOIiA16cF
+
2IFB2aOPZMBRB3SA9DWh5Lw79PDrUphLc1c
/
Ii1useWLM3SSCdxpia1qVrmftKiktUgdgQzlpDgwzHVhLoy3tkSjbDNtzAVd
/
1vRnr5CGoi9XXHXN3r
/
VT4
/
mKlDr9d56y8wpsC54xP2gSSIX
/
j04MBU
+
78IZrl96WszhB7EA5xEuLbMqNn
+
OMXRbnMaRCX1wDelNKvvcqw9iFObSH0rB
/
dv
/
z3LdO8fdBLXcwNZRiE8KCv3htHLAugArhhEqCqEF5kFlB6OaHxAYdZ7VqttYYbvmEMAmm8WnQcTvMR1NWMUn7Bet
/
jS8LJJsd1gi3dY
/
JaYt96eqYJzTY9qSiodLYxK0TkQYXq4bPWaOXzlqmCBQ3v2QNjDM456tLIH6P6
/
rCVrzmh9o4i4YREAbKRvp51cvOP2NZfbnfV4qcZczYVKAZvZzJBgNbHA
/
xAh7XppT683LCoTOBPgpmYpgUVLyRx
+
xTZ3lTezbJduEuf3yXsqsxutLxkpAZQz64WJDY37xZKTruX
+
pqWE4cpa0RWBKYDyCwA7jp6fCASLjtUyuMqQqCovmVvc43LBjJb8P4uHMx5oh458
+
br
+
md68mOxwv8esdOxrKb0pQCKsNAo7vzRKvwafe2g1OXZM
+
/
k3a9j0kkebAmW7w8huVF9mqp9v4bqhOLhGGWHJ39QuHrkWha1A0XtISSH
/
M8ndUqh7RqDg8CgH
/
bIXRi4qA1aGEdmWdF0J6WJ5qIcpfrHwh7pZffP0AodDIBgtG3CpmRiI5XA2I
/
hTlVP51LXf8tqnz9wWyOgX6gAPg1RfxRFusfNyeVX0Ndp1z1LT2aBFvAvnW3qq7T7rpgfD
+
M6PjI6T3ZLnq7wmf2
/
IV5h83
+
eIoH
+
1tPyEg1FmwFf2AlrErWa0ei
+
zgpeDX6ZBppGIEfbHiPAH2kqP6X87f0MfgTc1Xw4o2HsS4MtDSgi3PruwUrY60CdcFWTeAiwXLD7OSK02cZ4Bl2UpujTVGfRe5NwlQXwDNwtsTqVhaYmD5aouvDYLA
+
GR4zEvzUfBMvCTB
+
8W8IIGeDffiddvMRn9Bz09R0d5l
/
D6NYEMvuPZ4V7b
+
edlZZuhHmBWjVZN6ADIsl7QaW082pM3A9UVIEURpeegg2vBOw3RZkdT1e4dQaSiFhQNaBh2cZwpO4YbzNe4aZvvPh8eltad4JNkFdf9V0jacXUySUMG0pDgNr5bzHj6k9ovQ6p4f3MNGUdL0zefWI1Wz
/
DX
+
9f0Kz5KUUgqt0StkDdXF9lqKPAxQ3GISHjbh7v9
/
TA
/
iwbIBveN9pi9Jh9FGh8OBUSuqf7TZ35VCDnqeomc9J3yjAMGmz
/
Lj7Ii5BEJEJs3bDTlKdWhaNVlfF3fa2p
+
8Eikx9Wecd
+
Z8BaKlFNNefCwJUyd8mJEKWpMiyiTnVQ1TiwRT4sGI4bazyhe
+
tcLY0OieNY3bwg
/
ZEWUMaPcwxcN6FOz9S803M1YEKH1uS3ApkcnA0dYYQjD
/
QnNcS2CVq4beVH2Nvj0cfQgC2vChpLZWHQilup996kOUqhMPe4QLGZ7IJNqWiGTAr46TWE
/
pTsg0ixhY1CNoEZg7DGAT5fBQJiVY4CtNyiL7B72yLRpBt6RW6OFhttKTZeQSE8tSOXeE
+
4ZmlbM5fu7miwABMnDR8Ys5tuivlUdOMdboDb
+
d4xzBto2YRgeCvlp034ZimvV5oyX5n823dy3tfDY
/
VZOj1uTsLEVE3JWKQd28iwM4sk
+
K7
/
uEHw
/
nT0pxwjWzIJdcCm1cqAul9wwWOzU72m18Eb
+
C
/
fjtbF
+
KJsZgfSPvjijqhOaURdW7
+
VXYOLc2SkWyNNGRKqQ0Nhx58W18yO4PuCHHGoYcJ3YTtcSj81d
/
RF8orp
+
H3ui664tl4F9
+
xmxTdK4hftPSCQPR
+
BQgOsnLKLFvT9bvbkCFML
/
3HnQb15McLJ2if7TagNerPCSmpQ2VsJMzpq8iqX1qzjGOZUZ2hQHN0GbJC6SgBZWtpAsTvadsC9YCC8Rf2rV8po4jWOh428ebpu3pkd1vStvtCeNdoSYhaIMhOAIOrrKKaTi8D15EPwPiYshG
/
GdcCz7Ecbw
+
MvY93YOdcgADpSgLIcHR7t3qX4e1Ko0iaeg3eIZXB2bvKCwrJ6yCBjHkvLuWIGypQZtptkZqjztNJTJQYlqTvhkx5oBA2pBV
+
649kMUY59
+
yWAB
+
g3HM4mrMFDTKgXDAXgH6ls137l2s
+
heWw
+
ZL3bkATETz5ge7cQdkcltUloaBxnhWl4aOLuCFiOWyyQrWQzi3oRidPXsKBFUCpjNawALlclG
+
qPQNmPgEgz
/
JCrcV98
/
hJ1WoSxuy3wkajaihLUNyCpq7zEdLy7vU8ab3GUlXShxeeLsuwDLKHaE449scBFJEhjr2EQe5OV0X2kVu5HOKzKKq8PeAiY
+
+
cd4FDg
+
LBlcom0FzqlKyMw
/
78MjphLLKSBFpByFjCKM9Sn5
/
wl
/
UdKfp2OF25ljpNK3ACQLcz8ACh2HCwSX1ZhnHNdOIkFAENk6MkNaKQzo
+
NNCXtLHDh
+
1bgIb79VTApoysAnzMnpBCjVwEPqcon03CzEv
/
atUQ
/
YKHIExd9N83h9zxxy3hFnsDJg5ZYCx
+
t5JGaHvEkGD4bLgoidX15tU
/
Q3JlTm26NoPa9uCChlKqbs6atRmNLf44M4vjDrRvzP91rPuQXL1Vorh2TIUd7o8QmGOtCwTu4zQ
/
833PFJdoBiG6LkadS65Jdsup6Ws9tjTIr
+
dbka6DC3UGFD2O0fnrMeozgDe6ryf
+
buKNIsFigj6hoboWDx2UZpPdSYiUc1yFPz28fbVk
/
2KINhKri3SLXaEPy1L3GHOvcvDR0sGW
+
zieSmJkVPxgUVVu2vKXdksFZXe
/
xsEv00597PdzvDAdnRUWzZAMZkNR
/
BkBFbW4wx
+
D0W4Z75xWY
/
TqPC9gRPRy
+
WbHkzbL16CMEWSMMS1RHM7hASMgiqQDFfCEQ7pAal3NV4vLXcPqALHzw4zP4Xpy1EEz1LGaDrqQXp8
+
urUyEIbdyV1d4
/
pNhdtqhFU5ROtvebgApp6CEUgZtXHpjRxprPixdM3LehCKBYJJJrG
/
0L7qfxqgER5OXaq2EdnSsOkRy9G1zHu7q596Cv8tMcSSU7JSFCC2WH1RlDAKCydt
+
Z5AzghqnTJZ37uG6lsuVNSXpuwkV2XBX
+
5WYL1xCFfdx5Xy5wxb7
+
TwkuhT
/
bvmPNJROOFDUGddYliP
/
d8fvQ24Bf0V9jnTVvNnbG2BuF3mfGsGu
+
X5zEpZs8sDO0746FYx
/
5OmcmWcKpi6qJhhvzhyQ8sUfyn49l61xauvWELRMql6x56PgU
+
uqC5Gyj
/
w3coHY
+
B1bAnYop8ruspUwHRKFBnlI1WmmRATWLgeBdNPTY6QMkfLLE4fxc97hueytQRvrSuJJSM9G0HRO2EUgs3vUAbF3b
/
hXw28VsVwmQ5dvhEvIk83XANJUzIq
+
kTeMIEWccZKnSwLzK
+
xOU1VJwza8f9KG8mtIZzcJiMUF7j3UUuGgXIqLdN15Rg7ptwVOhyuOwwO9yZFAXNHhGOn4eUNOiBVKPj
+
j
/
PXUShmr3CybgDJt83RyAk6ZJhuDcRQpk1sSUtLcgZGKDEVp8EpVbKxvjSF6k9evHnTvIgBOdChxLs86X4j0N7
/
7xTq8ibJtAK5Jcoxixog2HIpvHVg
/
lhTQ3cPGkbJwgyllyGRpnGZcdOr7NaWPJZDujkw9qHHcclrrAxKgWpEOspbpxqbNkXq49wGpZO6Q
+
K9mYnjE
+
RW0pCivpEIONzjkt8AKUPXUjYDIA7VoUQqAzrYnOnNWH2TS75
/
KZZXOL0yuELPzbqTnFufEyRhGT3XoY4HggMWKs9pNK1w2HPPr2GRv
+
5z1DRZDLBSbnz
+
w8BZlK5gDJ4bfB3rQ7Jlm24zLrzV5dVKo3Np60EkzeyMSxMUtquhraQqiq
/
47Sxe7GeqPwQc8ro6Db6Pv
+
Fp
+
0SXLl5b5AgbdaeBx
+
E6d94ovy4THMQsM70k7Im937653q
+
ATr
/
UgiobLOu1beOBfgXeirvwyZTywvgnS
/
R7ABaJBuZsWaa1useCGLBSxPzSgIH12fbbSVpZ8nc4OkTrTm0vHs
+
tvzoeCchljO81kD8xWqEO10
/
3TQ53gEmPps
/
svvRH
+
pJ9lVo2QqUEQIHAt2oN5ExLbzH0QgMzN0ZbaHYCKxmGXTAB
+
lsedag
/
oxpiRdw9ByOK6GsfsrdzxoFcWMtIJ8
+
MOFc6n
+
ItDr0IjCpb96JFMZQvYVMSEbyAdix0WT8ivsHqZE8B7DBPdCqj60QN2mXm2VOnVTQ1awEcTK8KxPbklmsEW9kHIKuDwZxVUIsTcZ3b4gllKlG
/
4Ar4rXMbp60ve8frZINgGHSWoRvtgPw6VSgCusfrkrwq
/
DxlNJxNs3X0C0dD0ql1rU8VMCKMG
/
tYSwzoEqw87s34IFO91FQe
/
GdV0klAiBncecqnJjOsgwnw
/
Zhunl
+
vCJq7yXhpd
+
UcTpjWpyypWbwuNoOLlevfwfkR3Sv08oQFpRA7LnlqBGb9JVZenuI
+
wuZ6IBbViod0yO8sG8lnNph9kq99wwGnHvF8MZIZ6Dtz3cwcB5jcFFrb
+
yIerqyqLgWML8VBumO0LVF
+
cW5bQEYDSKXViJfU4xxAdyuS6BPHiZNzg
+
bz2lgYc9o8Ssh
+
EM4ddMWj8aCheEmN370YYneQjnUyz7tutzKBWgc
+
Izd
+
tLQzLuCNsXZtyM1FhL7KO8ZdPK
+
OdfGlW208JyOTujETeQvTgkZUlhyMuN8R0Yrz1eyfoOMnmlZlgZ8QwhtLm1dpR
/
7XQ0mfaA7d07KbTbGscmwySU
+
g5Cua48Kq
/
+
u7qBvZQfIehEW6hGqd3ckxv5iqkALamQfvGGBn74
+
buGzQrfAeUcFGajG57ltmVVVYXY1Fmb0JXLhW32HWJrEXXKqc1XGCs
/
o9S5A2xnezB14qEx5LXV
/
1YskrkUBTzabah
+
hFkYZCK9Cdr9KDGcWz0AgNo7uJbFtTxWbS9YEknTbfjXD46fHXPvOveFCPSQXcjJKhow8mGJIIchJFtoTrYhg7UtrklFXNUxcONE85jidy4x7DCLpCnEEFD5vuGwJ4h4TEUs3O3iGWjtytf3BL9K6a
+
ZGAEol9djuWPxkzJ7LFqLRXqbg79zypDgylITAf6QtMyvLjVR4nbzmIEBMrC
/
QhpOVhm9jP33pR
+
2NZlpwFAxrtprXfZhbCG2LbcJ0ctBlnCgnzYWG
/
3icoUrgM1wcAaB0HZxlMn
+
yDjcBxtsv9Y0OKsNhl8etB8Uy1A17iBWV68mwcZyaMQGWNyZZwHrC1
+
uxUJ5
+
vTfPMNtGolR9Yn9SwJTI6EbiwD381jOhDAIrNzRwdSeyDKl
/
V9zmQAs2N2Whd2cgl3anZgzC0mwX3aBdULNI
/
0ghbLVQQkKjpgXBwizaG8wcC3EI1QP
+
EEw6SctB
/
AJR93
+
XLyOFsGneT782uAaZ2mvTSdqnb8TDNB3eq0ugjylYe3s
+
+
XWldqbKYhdXygGG94HH4mjLRGOEdkiUtjmDKmuyaPGm9Q1JBxV4z5X1XvQFbI
+
yHjsGquayBgc
+
Ect8Lj4ibEY8
+
Z
/
zgTkny6VqgGLs1m34
/
XIJn
+
HDlR4Mmy2uUx
+
AaB7IvhjW6O557t3bA1UjAFwKePUQx6M3BZpyyBCdvlvQMzxfMrMUCLDq4IPwwLjBSzYL
/
LJk1lzmR5II1M1i7dXjuNMAwIbgvJuZX1BtSkjt8
+
l
/
dEEaAl7yKRHKPEuKVikGvIh2IygHo468ShxyANxynAlcqRH5Touk7ex2bcHoB8IpSbIvEKaypvmB
+
eo8BIGV6hFU3Bfcaw6C60UNWleMPScNBKnh5qwVtIS8YFYRD
+
kC
+
wxudCB752lXiiW3TMHX1iKixeo
/
f6MjNDU7QuORccsWAlZnsEkc3UqdxXywIXnG1iaUTC
/
v
/
Gp8UgLD5nmxQVJo
/
oU55NCjcgRqPRGPFc
/
QOZvHiYzMboMqOwacRzEO0JcEdWBth5weX5SCj2UUJyG3C3skQ8g8bkb4Neshb0LxBagU27zMbmq1OGY1ti9fTOhCoO6KfJg
+
gEtlESj3T6V9UAJ4k65dmdoxBDxPxf
+
rgwwZBvZihx
/
ahe30VNpJBlXh2bktyDnm5sZ805le40yPgeNZG2XpKMIqoD2I0u
+
8sE7trTx8T74i6teikq1ERfNKNBwmPpKzN9dH3XyFWVPz7h72GKYBb9
/
WrGc6qQ2K3jC1h71yhGiokLeipOo2u3wCzFoTmginH05K
+
S0ELFEFq1RYUys5eYfvu5PPs7IhXq5ReEHaCX8wFnT5
/
wGJuBkG9Lc0Liu8hKbh1PENoT
/
R40SI00CbC
+
Qv8GgrNzjJ0DbqUDOmhQmv3Ncl8I0Tqg2PjBEvWcYtzgQA5brpK0hTOa
/
+
f
+
kMtYLy3mJjRLyF8EeXplxMEZq9SxXt4o
/
zDf5XJsXmtYNirstCpsq9bC1NdecvfGrUsASkistLvMQG94KVvs1
+
K4JT7t5uqj13PHqeIaGQKLJw005kLBmHf1aGUXJnkCVuYyFW65umKWgailL98YoHIAMJEVtdEylG04Ie8qGYAakWNw2yxnksFq7YZzX46mPS
/
SwEwztH8tbrPrvG5EQ8U53WhUs4UGhzmEb6ZMgR
/
KhyDPnobcicMnSZNO
/
HqHjaN1sBbHKIuvJK9HYpSgv4MzsDw9VW6
/
hc6JbglfWY50AVOrPG3WR5E0b
/
49h2z2XBQOiL4lEQHxu6
+
8
/
FKUMgTg3EdAfc8csmUn
/
PSZs6uFQUw7Z0kUavR
+
OOCs8t0OjmtU9qhJMiJZtBgIPcZJp9UPupPMlHWi
+
AmAaiAhUeOvr7Z9VPZflVKk522LvwKcWYkMSQND
/
/
Fat83rQafXF9xEnzRrkKINPxZAAA
=
"
gif
:
"
data
:
image
/
gif
;
base64
R0lGODlhlgBVAPcAAAwKDRMLDQ0MERMOEhoOExIPGBUSFBsTFRYUGRsVGh0aHB0YFxURESIWGyMbHScaGiUhHx0cISQdIikeIyQfKSQiJCsjJSUjKiwlKywqLCspJzEmKzMrLTYoKDcxLi0rMispNTQtMjkuMzMtODQxNDsyNTUzOjw1Ozw5PTc4PC4wOB4hJUE2O0M7PUU5OEhBPVZDPT08Qjo2QkM8Q0o
+
Q0I7Rj9ARURCRUtDREVES0tESkxKTUpJSVNLTFVISVpRTk1MUktLVlNNUllOU1FPW1NRVFtTVFRUW1tUW1xaXVpZWk1QWGNcXGVZWWVVT2dhXlxcZFlZZmRdYmheZV1hbWViZGxkZGNjamtlam1qa3NsbHVnZ2hodHducnVydHtzdHx1ent5e3dxboN8fYV4eIuCfYV
+
goWChIuDhIyFio2LjIqIh5SMjJSIiJeRjZWNkpSSlJuUlJyanJyXmY6NkaOcm6SZmKaTiqijnp6coaWdoqWjpKqkpKulqayrrKqnp7Ktq7OopbWxrrmyra6tsbOtsrSztLq1tLy5tra2ubu2ury7vLe7usG9vMK6t8TBvsnEvsbFu769wcO
+
wr7AwsTDxMnFxMvJxcbGycrGyszMzMfIytHNzNTKx9LRztfVzc7O0dLO0s7R0tTT1NnV1drZ1tbW2dnW2tfZ2tvb3NfY1c7QzuHd3d7g3
+
Th397e4eHe4t
/
h4
+
Hh4uLi5OPj5eTk5OTk5uXl5
+
fn5
+
bm6Ofn6enm6ujo6uvr7e3t7unl5e7u8PHx8vPy9Pb2
+
Pn1
+
O
/
w8r7AvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH
/
C05FVFNDQVBFMi4wAwEAAAAh
/
i1HSUYgb3B0aW1pemVkIHdpdGggaHR0cHM6Ly9lemdpZi5jb20vb3B0aW1pemUAIfkEBBQA
/
wAsAAAAAJYAVQAACP8Aac1KhcqWL2G8ehkcBSyhwoeVcmkCNargK1kDLxLUuGkRJoIHE5pitXEhLIG3MqpcidKhRpMYU7KU
+
TAXzJMWS95sOTPmxoofd
+
KyGXORQZcHKeoiGJSnT50jcwZr9RKqVaFOn1bsWZUmzZxRiWYVO3BiV5QWzZ71WozsR4Zik
/
qsuZaWUluUKm29inVv17A6keJk65Iv4bgqAS9dHKux37Evk1aCw1Vw5J2TWg2TWXdu5b9g6UK2idArVc
+
HP6s2bJXyY8Y8G45OZChm6a2JmPw5ZVguaKmlYZserbXv8NTCj7P8WVtxcsumRdnVpEu20jwLcDQK3Zlvqrabof
/
/
Bqm8u
+
rn0Tn
/
ZAocvXixZiUVDAUUEI4NcO6Ov
/
pa
/
Hq99L3GmnnuoadfV9SdR9pUqHF0WlRAmTHBFISoxZ13fmECYGGoKJXhgMQFVuCIxpFY4H5MKaLFAl8oQgqGHFoVn1MfggViep2ZqCNy
/
hkHWH1M9NBGJryhphR4KG74YCk2
/
geic4jt6Bl9sKklGkSIXRgSex
/
WEYcFTyhJIFr
/
+
dZke
/
0tp2WUUqqH5UhXrvbcek7OEYIFhQQoonWJ1egnd76kmdyNPPZIKIlwVfUnbp48QUAWRPbX0F7SQWnpkm8
+
6COahrJpy49UYtUjY02N
+
Yox8wEiQQV
+
ZAZlphdC
/
/
jkKofmWCJhoLhUaqGeipTop0kCNYoXCXRxiKBr0hgWkg1i9GunIYqKUkTqUatcnMd5tGuzFpZCiAMnRIpssiB2dOCe7
/
WKbpbRNhtic24puwmdRiQwR5GXdtgbrPt2RUxw7ra5mFHAGojaiS4my
+
9GfoDbbYzrHsXsuKaqWxmDOLZrkWzSznuogPftxmStq5FM0ZqVCuwryYH2q2h3D
+
8CxwQlnDGdx5dCvG3JAavZc5o7KxxnIth2LCNH4Gbg6mQmm
+
m0pxRXDFnOxUH7NKZH
/
5dIJiVMwCKo5PIM85kc4ow1tJw2rWvMm9L5pQKszosz2z
+
/
Oui18FGNdtG8eP
+
8MJwta0r3k13QLEWlYKstFyWE5kunggf7Nt3EJiueCNxKO3lu3Zz3nLHYvDpb7stVq0ysBDZrzl
+
hVKeNbdhCh9TWTZtj7YmVvirCN8wYZKADvonXdZceb
+
gtNYwsPwSwHKLHWi2fs1i79090rJoHikmKwIGrt6YbHvbJf0
+
QyJqWzhytGBF99eMfCkFCBtf7vJ8ljhjhwRmcJD
/
rSPIdD7UpzFMdfySBKllxTCdb00Sr8vCGClHqWxjYAUnIVrXxfQkNg3vWeMw1QP1xBV4VtN3ZnLaGGAjBCyhI4Q1ykAQvzMEPQIlB78AwrQxqhA9gwMGQ8qc4jdVOWsABBff
/
xESmzgXje7X4FCYy8IEUVMAEMYgiFKOogzEAIhXY2UAI6EBEdmlECmDazu3G6L
/
OpexnCPuTZ6AXMSXSQQhpcEELbEAEFu7gjik8Av5mZoESGCENzZnXAZ9Shwlp62FtBF3TgscnNYYwaxBihBXAgIcm9OAIUbgCJuuYghzQkQ9N0F7S9jCuPbCAA30gY9Qco0jz
/
DBYMNJTEZfEv0NWIgwOaIMdtvADKFBBk1RYgjBHYMIxnLIBq1KBA09moTDcp0Xoo
+
Asy7hIDzrIhuybjAbut0sp
/
DKTm0whE5mwIgPALQkEFFaAvjDHw2HzmrDDTCurKUABBa5sRZgADHTp
/
00ugNOXw2SiGaqQAABYb2knK
+
EJMJBKB8EyYgmSX5Xi2TzwwRNoe
+
qIJNSwgAfsEw1J
+
Ocmj
+
DJ92nhBgMwpxkKYQhx5XChNLRon3oYNIu
+
0ovWEh7u9OKHPFSCEtvsoxZOOlKAJoEHC9VADw6wKiX0jyBouM8GwiAg9gnxLRSVH0YrKlMMEUiWBDRGATVB0AuMswhoVQIQjIqEGTDxTr0rwh9amomowlRcj2SfGffqOWmSzW8Go8pP6WouSpjSrH08wQqLqlYdiLN3T
/
RCS9mQVHTycG7SDGw8jefDxo3QJmDl6UQ01FJcVuC0b11rUVf4PsyZIAk9pcEcHQApZv86cpV8JV2MWAdJfsULQBrS00RctIh8opaJngRCSfH4PgGYs4l9yMJsW5CfdE4CuH9VZ0YTSU00
+
nZ25ZMdFnHwx0dgl2kVMQQQ
+
njcTk7RrU7s6HNf
+
9gssLQRjRgDOatwhgRy6aphLYQevIAFOnC3QYC1lRGRtxBLwEdFIWCBHkgZILEmzBS5CepbmzjFJsLNnAkw62M5wIY4EE8J7H2vFcNghjOgwQtCuGSMRckBdF5mQevjqmdNJtbvsDE
+
gnCmkAgbVmaqd8PHhewFEABiJisWikL1Yw9a4ICkDcGxMZbCJSN8Sg40lZI9fVZN
+
9pdvep4g
/
hlp1MHW9jhShL
/
tRGIczJX1WTXfsC15O2aBaosgYX6mcZzhq24nmoxiGm2YmCtICJnNNx6iUG0kB5sHJL64RBb2qADSHGgqVxjLbxBDSW
+
8lCzbMU9ECJPtkXW9PzKI
+
0iunnCksWR5
/
AIUp63sKerszkB4Nwa
+
6ADfJaiH8GAhjpkwYWAsK4tu8VZsR2qbIOLFqX2sgfrgfrWwTVEpQu6bd
/
xU44aTixcQ4yFVkXavLW
+
7Y7zqkGYpDp0tOPfgaqnxQwkAQ7LnghHU1qADxzbAwEIAAVeu2KQjtiP444rkSHB5lHcOqvdm6bO7Ha1iXcRC15
+
XxOloAZTv6Vwu
+
64feotAxNyPA1Z
/
wiSnr1G5w1guQrmZjMiDoFuUOvBI
+
qO
+
JlJJ6iJGW20YPHIH6qwgw2r0IT5
+
QKdeTDYL1hB3FA8oX67IFWmepoJFtDBUY2ABK6LAQtB6ifY96wFrDZ7ntM8explqQo3N
+
IPcFjDS0mwXPeFWA4esYMT2MllEFDRxVZQeZWHDV
/
Fcp0GyEWyCJTghmTbEG1mZrXaRWNAzQWXtM4UMZeLwFMqv
+
DpfXdvF8rgTcc2ANyh37PqWQ4u
+
6Ibu8Zb98SltbuLdlC79NkDGNpaY1Lah6kT
+
jWHiSlQov7aB7wUdxdSfsmvf6HYhB0jrXBLz5l
+
dpDcAptCHj59dSrikEP4MP8LmvAE7cF1
+
Ft
/
eRtAzwEw0
/
wTY2Q4o12NwHahDeixy
+
1pGJFvs9N
/
DZcmBl
/
SZedHfHS0dU
/
wbTWDB4Iwc5aQP
/
iHe5NnfwJEe69WT
/
MngX3gZQcQAFbgJUo3XYrHYc3nJSUWCIHQCa8nfd0XgfRXRv9jTSESPKkigfTRCDqQYoIAglokWxl3ZwOneVz3Qo6wgvLXZjaYhBQYg89GOW1jVUiYapmAcXrWgF7ygzhwA0qGWJAVJHWwgg74gJcwhhmYhAlWZgGjQUcEMKdxN7cHXJg1EmcgAj4ocji0AXzGBJTGhWY1BIG3B0bIgi74VG3nfe
+
mYGinhmzoHJJniC3
/
KId91yJWeFJe0wNBlnBKVoJi
+
CKcKIiOqF2EqGqrJhSK2FVelYSFwIEzgAYtBQhzFSReY0XGoFCZqIn4tYmeaIaRhDj5ZzXZgmC444a394mjwEckFmCGcAha1jtfuAiFwFraQ15EGAm3WI2XpYs0iIjTI4x58060hIqXN0aetwanFoZWkFT4xYBZqEKyWI1hGIar4H
+
7eCacJV6Qgyj
/
FXvzSIz1cQZFlwV4V42nswGAMFBsUAY9GAJlR4by5464mHNSY4869zlaxVe6GFZmcAOu93pZFEHSqIzRGC6jxZBiyH1K2Iu1lxLSI5EWGC9pmGj76H09NVff93pltU3Q
/
zQISNU1asAJJFmSD
/
mIEJmSH3QRRKky8QaFGnhdMsdm0pV1tOaTfABwGyB200hzjjeIJ3ljR8kShEYq3wgTo6huF4mEg7UHHfeTPMBnEDB4RjBqQgJ7W5lI3vM8s8dVqzaXGChcnzho18h3bBlscRmOudhFngMtIKSSVbVd4fWNelmG71aYoPgIB
+
l079NOaRmUvKhAQnmYiBKME1iRjymXhRiZ
/
Bh
/
taYtc0WTTQmZcQhxSZRd1fc5EJmPZCmUg3hubuaaF5ldPVab1HdgjWibQbeXZYl
/
t4iNuGmajyl7LWmXIgQVvAk2r3mcHKScfJmdkgmTlZOI7GZ7acFs2IzpcH45nuaZm52pP8syUbCzmDunL4uinBNUms1Jj
/
R5mgyGhvsDcbJ5noVonAA6nqZYaDh1iqqUdr0VoLvJnLICnPX5hKmxntwYnd03oAGqNZDpoPbJoGgncWP5nvt5obXUoBranxmajUwIKK8ToiZKov4JayU6jC4anqEpnMMZeS36oCJ6ozM6lGIREAA7
"
}
;
const
func
=
b64Blob
=
>
(
window
canvas
ctx
)
=
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
/
/
Calling
new
Image
(
)
fails
for
some
reason
that
'
s
why
we
use
new
window
.
Image
(
)
/
/
It
is
also
the
only
reason
we
pass
window
as
an
argument
to
all
the
functions
:
)
const
image
=
new
window
.
Image
(
)
;
/
/
CC
Public
Domain
-
https
:
/
/
www
.
flickr
.
com
/
photos
/
birds_and_critters
/
53695948491
/
image
.
onload
=
(
)
=
>
{
ctx
.
drawImage
(
image
0
0
canvas
.
width
canvas
.
height
)
;
resolve
(
)
;
}
;
image
.
onerror
=
e
=
>
{
reject
(
e
)
;
}
;
image
.
src
=
b64Blob
;
}
)
;
}
;
const
bitmapFunc
=
(
b64Blob
mime
)
=
>
async
(
window
canvas
ctx
)
=
>
{
function
base64ToBlob
(
base64
mimeType
)
{
const
byteCharacters
=
atob
(
base64
)
;
const
byteArray
=
new
Uint8Array
(
[
.
.
.
byteCharacters
]
.
map
(
c
=
>
c
.
charCodeAt
(
0
)
)
)
;
return
new
Blob
(
[
byteArray
]
{
type
:
mimeType
}
)
;
}
const
blob
=
base64ToBlob
(
b64Blob
mime
)
;
const
bitmap
=
await
window
.
createImageBitmap
(
blob
)
;
ctx
.
drawImage
(
bitmap
0
0
canvas
.
width
canvas
.
height
)
;
}
;
return
{
png
:
func
(
b64Blobs
.
png
)
jpeg
:
func
(
b64Blobs
.
jpeg
)
avif
:
func
(
b64Blobs
.
avif
)
webp
:
func
(
b64Blobs
.
webp
)
gif
:
func
(
b64Blobs
.
gif
)
bitmap
:
bitmapFunc
(
b64Blobs
.
jpeg
.
slice
(
b64Blobs
.
jpeg
.
indexOf
(
"
"
)
+
1
)
"
image
/
jpeg
"
)
}
;
}
)
;
ChromeUtils
.
defineLazyGetter
(
lazy
"
recipes
"
(
)
=
>
{
return
{
/
/
Metric
name
=
>
(
optionally
async
)
function
to
render
canvasdata1
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
orange
"
;
ctx
.
fillRect
(
100
100
50
50
)
;
}
size
:
[
250
250
]
}
canvasdata2
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
blue
"
;
ctx
.
beginPath
(
)
;
ctx
.
moveTo
(
50
50
)
;
ctx
.
lineTo
(
200
200
)
;
ctx
.
lineTo
(
175
100
)
;
ctx
.
closePath
(
)
;
ctx
.
fill
(
)
;
ctx
.
strokeStyle
=
"
red
"
;
ctx
.
lineWidth
=
5
;
ctx
.
stroke
(
)
;
}
size
:
[
250
250
]
}
canvasdata3
:
{
func
:
lazy
.
canvas3Recipes
.
jpeg
size
:
[
250
250
]
}
canvasdata4
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
orange
"
;
ctx
.
globalAlpha
=
0
.
5
;
ctx
.
translate
(
100
100
)
;
ctx
.
rotate
(
(
45
.
0
*
Math
.
PI
)
/
180
.
0
)
;
ctx
.
fillRect
(
0
0
50
50
)
;
ctx
.
rotate
(
(
-
15
.
0
*
Math
.
PI
)
/
180
.
0
)
;
ctx
.
fillRect
(
0
0
50
50
)
;
}
size
:
[
250
250
]
}
canvasdata5
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
font
=
"
italic
30px
Georgia
"
;
ctx
.
fillText
(
"
The
quick
brown
"
15
100
)
;
ctx
.
fillText
(
"
fox
jumps
over
"
15
150
)
;
ctx
.
fillText
(
"
the
lazy
dog
"
15
200
)
;
}
size
:
[
250
250
]
}
canvasdata6
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
translate
(
10
100
)
;
ctx
.
rotate
(
(
45
.
0
*
Math
.
PI
)
/
180
.
0
)
;
ctx
.
shadowColor
=
"
blue
"
;
ctx
.
shadowBlur
=
50
;
ctx
.
font
=
"
italic
40px
Georgia
"
;
ctx
.
fillText
(
"
The
quick
"
0
0
)
;
}
size
:
[
250
250
]
}
canvasdata7
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
font
=
"
italic
30px
system
-
ui
"
;
ctx
.
fillText
(
"
The
quick
brown
"
15
100
)
;
ctx
.
fillText
(
"
fox
jumps
over
"
15
150
)
;
ctx
.
fillText
(
"
the
lazy
dog
"
15
200
)
;
}
size
:
[
250
250
]
}
canvasdata8
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
translate
(
10
100
)
;
ctx
.
rotate
(
(
45
.
0
*
Math
.
PI
)
/
180
.
0
)
;
ctx
.
shadowColor
=
"
blue
"
;
ctx
.
shadowBlur
=
50
;
ctx
.
font
=
"
italic
40px
system
-
ui
"
;
ctx
.
fillText
(
"
The
quick
"
0
0
)
;
}
size
:
[
250
250
]
}
canvasdata9
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
font
=
"
italic
30px
LocalFiraSans
"
;
ctx
.
fillText
(
"
The
quick
brown
"
15
100
)
;
ctx
.
fillText
(
"
fox
jumps
over
"
15
150
)
;
ctx
.
fillText
(
"
the
lazy
dog
"
15
200
)
;
}
size
:
[
250
250
]
}
canvasdata10
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
fillStyle
=
"
green
"
;
ctx
.
translate
(
10
100
)
;
ctx
.
rotate
(
(
45
.
0
*
Math
.
PI
)
/
180
.
0
)
;
ctx
.
shadowColor
=
"
blue
"
;
ctx
.
shadowBlur
=
50
;
ctx
.
font
=
"
italic
40px
LocalFiraSans
"
;
ctx
.
fillText
(
"
The
quick
"
0
0
)
;
}
size
:
[
250
250
]
}
/
/
fingerprintjs
/
/
Their
fingerprinting
code
went
to
the
BSL
license
from
MIT
in
/
/
https
:
/
/
github
.
com
/
fingerprintjs
/
fingerprintjs
/
commit
/
572fd98f9e4f27b4e854137ea0d53231b3b4eb6e
/
/
So
use
the
version
of
the
code
in
the
parent
commit
which
is
still
MIT
/
/
https
:
/
/
github
.
com
/
fingerprintjs
/
fingerprintjs
/
blob
/
aca79b37f7956eee58018e4a317a2bdf8be62d0f
/
src
/
sources
/
canvas
.
ts
canvasdata12Fingerprintjs1
:
{
func
:
(
window
canvas
ctx
)
=
>
{
ctx
.
textBaseline
=
"
alphabetic
"
;
ctx
.
fillStyle
=
"
#
f60
"
;
ctx
.
fillRect
(
100
1
62
20
)
;
ctx
.
fillStyle
=
"
#
069
"
;
/
/
It
'
s
important
to
use
explicit
built
-
in
fonts
in
order
to
exclude
the
affect
of
font
preferences
/
/
(
there
is
a
separate
entropy
source
for
them
)
.
ctx
.
font
=
'
11pt
"
Times
New
Roman
"
'
;
/
/
The
choice
of
emojis
has
a
gigantic
impact
on
rendering
performance
(
especially
in
FF
)
.
/
/
Some
newer
emojis
cause
it
to
slow
down
50
-
200
times
.
/
/
There
must
be
no
text
to
the
right
of
the
emoji
see
https
:
/
/
github
.
com
/
fingerprintjs
/
fingerprintjs
/
issues
/
574
/
/
A
bare
emoji
shouldn
'
t
be
used
because
the
canvas
will
change
depending
on
the
script
encoding
:
/
/
https
:
/
/
github
.
com
/
fingerprintjs
/
fingerprintjs
/
issues
/
66
/
/
Escape
sequence
shouldn
'
t
be
used
too
because
Terser
will
turn
it
into
a
bare
unicode
.
const
printedText
=
Cwm
fjordbank
gly
{
String
.
fromCharCode
(
55357
56835
)
/
*
*
/
}
;
ctx
.
fillText
(
printedText
2
15
)
;
ctx
.
fillStyle
=
"
rgba
(
102
204
0
0
.
2
)
"
;
ctx
.
font
=
"
18pt
Arial
"
;
ctx
.
fillText
(
printedText
4
45
)
;
}
/
/
usercharacteristics
.
html
uses
240x60
but
we
can
'
t
get
HW
acceleration
/
/
if
an
axis
is
less
than
128px
size
:
[
240
128
]
}
canvasdata13Fingerprintjs2
:
{
func
:
(
window
canvas
ctx
)
=
>
{
/
/
Canvas
blending
/
/
https
:
/
/
web
.
archive
.
org
/
web
/
20170826194121
/
http
:
/
/
blogs
.
adobe
.
com
/
webplatform
/
2013
/
01
/
28
/
blending
-
features
-
in
-
canvas
/
/
/
http
:
/
/
jsfiddle
.
net
/
NDYV8
/
16
/
ctx
.
globalCompositeOperation
=
"
multiply
"
;
for
(
const
[
color
x
y
]
of
[
[
"
#
f2f
"
40
40
]
[
"
#
2ff
"
80
40
]
[
"
#
ff2
"
60
80
]
]
)
{
ctx
.
fillStyle
=
color
;
ctx
.
beginPath
(
)
;
ctx
.
arc
(
x
y
40
0
Math
.
PI
*
2
true
)
;
ctx
.
closePath
(
)
;
ctx
.
fill
(
)
;
}
/
/
Canvas
winding
/
/
https
:
/
/
web
.
archive
.
org
/
web
/
20130913061632
/
http
:
/
/
blogs
.
adobe
.
com
/
webplatform
/
2013
/
01
/
30
/
winding
-
rules
-
in
-
canvas
/
/
/
http
:
/
/
jsfiddle
.
net
/
NDYV8
/
19
/
ctx
.
fillStyle
=
"
#
f9c
"
;
ctx
.
arc
(
60
60
60
0
Math
.
PI
*
2
true
)
;
ctx
.
arc
(
60
60
20
0
Math
.
PI
*
2
true
)
;
ctx
.
fill
(
"
evenodd
"
)
;
}
/
/
usercharacteristics
.
html
uses
122x110
but
we
can
'
t
get
HW
acceleration
/
/
if
an
axis
is
less
than
128px
size
:
[
128
128
]
}
canvasdata3avif
:
{
func
:
lazy
.
canvas3Recipes
.
avif
size
:
[
250
250
]
}
canvasdata3webp
:
{
func
:
lazy
.
canvas3Recipes
.
webp
size
:
[
250
250
]
}
canvasdata3png
:
{
func
:
lazy
.
canvas3Recipes
.
png
size
:
[
250
250
]
}
canvasdata3cspsafe
:
{
func
:
lazy
.
canvas3Recipes
.
bitmap
size
:
[
250
250
]
}
}
;
}
)
;
async
function
sha1
(
message
)
{
const
msgUint8
=
new
TextEncoder
(
)
.
encode
(
message
)
;
const
hashBuffer
=
await
crypto
.
subtle
.
digest
(
"
SHA
-
1
"
msgUint8
)
;
const
hashArray
=
Array
.
from
(
new
Uint8Array
(
hashBuffer
)
)
;
const
hashHex
=
hashArray
.
map
(
b
=
>
b
.
toString
(
16
)
.
padStart
(
2
"
0
"
)
)
.
join
(
"
"
)
;
return
hashHex
;
}
async
function
stringifyError
(
error
)
{
if
(
error
instanceof
Error
)
{
const
stack
=
error
.
stack
?
?
"
"
;
return
{
error
.
toString
(
)
}
{
stack
}
;
}
/
/
A
hacky
attempt
to
extract
as
much
as
info
from
error
const
errStr
=
await
(
async
(
)
=
>
{
const
asStr
=
await
(
async
(
)
=
>
error
.
toString
(
)
)
(
)
.
catch
(
(
)
=
>
"
"
)
;
const
asJson
=
await
(
async
(
)
=
>
JSON
.
stringify
(
error
)
)
(
)
.
catch
(
(
)
=
>
"
"
)
;
return
asStr
.
length
>
asJson
.
len
?
asStr
:
asJson
;
}
)
(
)
;
return
errStr
;
}
