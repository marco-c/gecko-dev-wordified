diff
-
-
git
a
/
package
.
json
b
/
package
.
json
index
117688f
.
.
50becb0
100644
-
-
-
a
/
package
.
json
+
+
+
b
/
package
.
json
-
26
7
+
26
9
"
format
:
check
"
:
"
prettier
-
-
check
.
"
"
typegen
"
:
"
tsc
-
-
build
"
"
dev
"
:
"
webpack
serve
-
-
no
-
client
-
overlay
"
-
"
build
"
:
"
webpack
&
&
npm
run
typegen
"
+
"
build
:
dev
"
:
"
webpack
-
-
mode
development
"
+
"
build
:
prod
"
:
"
webpack
-
-
mode
production
"
+
"
build
"
:
"
npm
run
build
:
prod
&
&
npm
run
typegen
"
"
test
"
:
"
node
-
-
experimental
-
vm
-
modules
node_modules
/
jest
/
bin
/
jest
.
js
-
-
verbose
"
"
readme
"
:
"
python
.
/
docs
/
scripts
/
build_readme
.
py
"
"
docs
-
api
"
:
"
node
.
/
docs
/
scripts
/
generate
.
js
"
diff
-
-
git
a
/
src
/
backends
/
onnx
.
js
b
/
src
/
backends
/
onnx
.
js
index
a64f9d1
.
.
8efc9eb
100644
-
-
-
a
/
src
/
backends
/
onnx
.
js
+
+
+
b
/
src
/
backends
/
onnx
.
js
-
20
7
+
20
7
import
{
env
apis
}
from
'
.
.
/
env
.
js
'
;
/
/
NOTE
:
Import
order
matters
here
.
We
need
to
import
onnxruntime
-
node
before
onnxruntime
-
web
.
/
/
In
either
case
we
select
the
default
export
if
it
exists
otherwise
we
use
the
named
export
.
-
import
*
as
ONNX_NODE
from
'
onnxruntime
-
node
'
;
+
const
ONNX_NODE
=
null
;
import
*
as
ONNX_WEB
from
'
onnxruntime
-
web
'
;
export
{
Tensor
}
from
'
onnxruntime
-
common
'
;
diff
-
-
git
a
/
webpack
.
config
.
js
b
/
webpack
.
config
.
js
index
09611f1
.
.
0c4ebce
100644
-
-
-
a
/
webpack
.
config
.
js
+
+
+
b
/
webpack
.
config
.
js
-
7
17
+
7
14
const
__dirname
=
path
.
dirname
(
fileURLToPath
(
import
.
meta
.
url
)
)
;
/
*
*
*
Plugin
to
post
-
process
build
files
.
Required
to
solve
certain
issues
with
ESM
module
output
.
-
*
See
https
:
/
/
github
.
com
/
webpack
/
webpack
/
issues
/
17121
for
more
information
.
-
*
-
*
see
https
:
/
/
webpack
.
js
.
org
/
contribute
/
writing
-
a
-
plugin
/
*
/
class
PostBuildPlugin
{
-
apply
(
compiler
)
{
-
compiler
.
hooks
.
done
.
tap
(
'
PostBuildPlugin
'
(
)
=
>
{
-
const
dist
=
path
.
join
(
__dirname
'
dist
'
)
;
-
const
ORT_JSEP_FILE
=
'
ort
-
wasm
-
simd
-
threaded
.
jsep
.
mjs
'
;
-
const
ORT_BUNDLE_FILE
=
'
ort
.
bundle
.
min
.
mjs
'
;
+
compiler
.
hooks
.
done
.
tap
(
"
PostBuildPlugin
"
(
)
=
>
{
+
const
dist
=
path
.
join
(
__dirname
"
dist
"
)
;
+
const
ORT_JSEP_FILE
=
"
ort
-
wasm
-
simd
-
threaded
.
jsep
.
mjs
"
;
+
const
isProd
=
compiler
.
options
.
mode
=
=
=
"
production
"
;
+
const
ORT_BUNDLE_FILE
=
isProd
?
"
ort
.
webgpu
.
mjs
"
:
"
ort
.
webgpu
-
dev
.
mjs
"
;
/
/
Dynamic
filename
/
/
1
.
Remove
unnecessary
files
{
-
27
7
+
24
7
class
PostBuildPlugin
{
/
/
2
.
Copy
unbundled
JSEP
file
{
-
const
src
=
path
.
join
(
__dirname
'
node_modules
/
onnxruntime
-
web
/
dist
'
ORT_JSEP_FILE
)
;
+
const
src
=
path
.
join
(
__dirname
"
node_modules
/
onnxruntime
-
web
/
dist
"
ORT_JSEP_FILE
)
;
const
dest
=
path
.
join
(
dist
ORT_JSEP_FILE
)
;
fs
.
copyFileSync
(
src
dest
)
;
}
-
36
155
+
33
64
class
PostBuildPlugin
{
}
/
*
*
-
*
Helper
function
to
create
webpack
configurations
.
-
*
param
{
Object
}
options
Options
for
creating
a
webpack
target
.
-
*
param
{
string
}
options
.
name
Name
of
output
file
.
-
*
param
{
string
}
options
.
suffix
Suffix
of
output
file
.
-
*
param
{
string
}
options
.
type
Type
of
library
.
-
*
param
{
string
}
options
.
ignoreModules
The
list
of
modules
to
ignore
.
-
*
param
{
string
}
options
.
externalModules
The
list
of
modules
to
set
as
external
.
-
*
param
{
Object
[
]
}
options
.
plugins
List
of
plugins
to
use
.
-
*
returns
{
import
(
'
webpack
'
)
.
Configuration
}
One
webpack
target
.
+
*
Generate
Webpack
configuration
dynamically
based
on
the
environment
.
*
/
-
function
buildConfig
(
{
-
name
=
"
"
-
suffix
=
"
.
js
"
-
type
=
"
module
"
/
/
'
module
'
|
'
commonjs
'
-
ignoreModules
=
[
]
-
externalModules
=
[
]
-
plugins
=
[
]
-
}
=
{
}
)
{
-
const
outputModule
=
type
=
=
=
"
module
"
;
-
-
const
alias
=
Object
.
fromEntries
(
-
ignoreModules
.
map
(
(
module
)
=
>
[
module
false
]
)
-
)
;
+
export
default
(
env
argv
)
=
>
{
+
const
isProd
=
argv
.
mode
=
=
=
"
production
"
;
-
/
*
*
type
{
import
(
'
webpack
'
)
.
Configuration
}
*
/
-
const
config
=
{
-
mode
:
"
development
"
-
devtool
:
"
source
-
map
"
+
return
{
+
mode
:
isProd
?
"
production
"
:
"
development
"
+
devtool
:
false
/
/
No
source
maps
for
smaller
file
size
entry
:
{
-
[
transformers
{
name
}
]
:
"
.
/
src
/
transformers
.
js
"
-
[
transformers
{
name
}
.
min
]
:
"
.
/
src
/
transformers
.
js
"
+
transformers
:
"
.
/
src
/
transformers
.
js
"
}
output
:
{
-
filename
:
[
name
]
{
suffix
}
+
filename
:
isProd
?
"
transformers
.
min
.
js
"
:
"
transformers
.
dev
.
js
"
/
/
Different
filenames
path
:
path
.
join
(
__dirname
"
dist
"
)
library
:
{
-
type
+
type
:
"
module
"
}
assetModuleFilename
:
"
[
name
]
[
ext
]
"
chunkFormat
:
false
}
optimization
:
{
-
minimize
:
true
-
minimizer
:
[
-
new
TerserPlugin
(
{
-
test
:
new
RegExp
(
\
\
.
min
\
\
{
suffix
}
)
-
-
/
/
Do
not
bundle
with
comments
.
-
/
/
See
https
:
/
/
webpack
.
js
.
org
/
plugins
/
terser
-
webpack
-
plugin
/
#
remove
-
comments
for
more
information
.
-
terserOptions
:
{
-
output
:
{
-
comments
:
false
-
}
-
}
-
extractComments
:
false
-
}
)
-
]
+
minimize
:
isProd
+
minimizer
:
isProd
+
?
[
+
new
TerserPlugin
(
{
+
test
:
/
\
.
js
/
+
terserOptions
:
{
+
output
:
{
+
comments
:
false
+
}
+
}
+
extractComments
:
false
+
}
)
+
]
+
:
[
]
}
experiments
:
{
-
outputModule
+
outputModule
:
true
}
-
resolve
:
{
alias
}
-
-
externals
:
externalModules
-
-
/
/
Development
server
-
devServer
:
{
-
static
:
{
-
directory
:
__dirname
+
resolve
:
{
+
alias
:
{
+
"
onnxruntime
-
web
"
:
false
}
-
port
:
8080
}
-
plugins
-
}
;
-
-
if
(
outputModule
)
{
-
config
.
module
=
{
+
externals
:
{
+
"
onnxruntime
-
web
"
:
isProd
+
?
"
chrome
:
/
/
global
/
content
/
ml
/
ort
.
webgpu
.
mjs
"
+
:
"
chrome
:
/
/
global
/
content
/
ml
/
ort
.
webgpu
-
dev
.
mjs
"
+
}
+
module
:
{
parser
:
{
javascript
:
{
importMeta
:
false
}
}
-
}
;
-
}
else
{
-
config
.
externalsType
=
"
commonjs
"
;
-
}
-
-
return
config
;
-
}
-
-
/
/
Do
not
bundle
onnxruntime
-
web
when
packaging
for
Node
.
js
.
-
/
/
Instead
we
use
the
native
library
(
onnxruntime
-
node
)
.
-
const
NODE_IGNORE_MODULES
=
[
"
onnxruntime
-
web
"
]
;
-
-
/
/
Do
not
bundle
the
following
modules
with
webpack
(
mark
as
external
)
-
/
/
NOTE
:
This
is
necessary
for
both
type
=
"
module
"
and
type
=
"
commonjs
"
-
/
/
and
will
be
ignored
when
building
for
web
(
only
used
for
node
/
deno
)
-
const
NODE_EXTERNAL_MODULES
=
[
-
"
onnxruntime
-
common
"
-
"
onnxruntime
-
node
"
-
"
sharp
"
-
"
fs
"
-
"
path
"
-
"
url
"
-
]
;
-
-
/
/
Do
not
bundle
onnxruntime
-
node
when
packaging
for
the
web
.
-
const
WEB_IGNORE_MODULES
=
[
"
onnxruntime
-
node
"
]
;
-
-
/
/
Do
not
bundle
the
following
modules
with
webpack
(
mark
as
external
)
-
const
WEB_EXTERNAL_MODULES
=
[
-
"
onnxruntime
-
common
"
-
"
onnxruntime
-
web
"
-
]
;
-
-
/
/
Web
-
only
build
-
const
WEB_BUILD
=
buildConfig
(
{
-
name
:
"
.
web
"
-
type
:
"
module
"
-
ignoreModules
:
WEB_IGNORE_MODULES
-
externalModules
:
WEB_EXTERNAL_MODULES
-
}
)
;
-
-
/
/
Web
-
only
build
bundled
with
onnxruntime
-
web
-
const
BUNDLE_BUILD
=
buildConfig
(
{
-
type
:
"
module
"
-
plugins
:
[
new
PostBuildPlugin
(
)
]
-
}
)
;
+
}
+
plugins
:
[
new
PostBuildPlugin
(
)
]
+
}
;
+
}
;
-
/
/
Node
-
compatible
builds
-
const
NODE_BUILDS
=
[
-
buildConfig
(
{
-
name
:
"
.
node
"
-
suffix
:
"
.
mjs
"
-
type
:
"
module
"
-
ignoreModules
:
NODE_IGNORE_MODULES
-
externalModules
:
NODE_EXTERNAL_MODULES
-
}
)
-
buildConfig
(
{
-
name
:
"
.
node
"
-
suffix
:
"
.
cjs
"
-
type
:
"
commonjs
"
-
ignoreModules
:
NODE_IGNORE_MODULES
-
externalModules
:
NODE_EXTERNAL_MODULES
-
}
)
-
]
;
-
/
/
When
running
with
webpack
serve
only
build
the
web
target
.
-
const
BUILDS
=
process
.
env
.
WEBPACK_SERVE
-
?
[
BUNDLE_BUILD
]
-
:
[
BUNDLE_BUILD
WEB_BUILD
.
.
.
NODE_BUILDS
]
;
-
export
default
BUILDS
;
