/
/
Generated
by
uniffi
-
bindgen
-
gecko
-
js
.
DO
NOT
EDIT
.
#
include
"
nsString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
UniFFIScaffolding
.
h
"
#
include
"
mozilla
/
dom
/
ScaffoldingCall
.
h
"
namespace
mozilla
:
:
uniffi
{
using
dom
:
:
ArrayBuffer
;
using
dom
:
:
GlobalObject
;
using
dom
:
:
RootedDictionary
;
using
dom
:
:
Promise
;
using
dom
:
:
ScaffoldingType
;
using
dom
:
:
Sequence
;
using
dom
:
:
UniFFIPointer
;
using
dom
:
:
UniFFIScaffoldingCallResult
;
/
/
Define
scaffolding
functions
from
UniFFI
extern
"
C
"
{
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
func
in
ci
.
iter_user_ffi_function_definitions
(
)
%
}
{
{
func
.
rust_return_type
(
)
}
}
{
{
func
.
rust_name
(
)
}
}
(
{
{
func
.
rust_arg_list
(
)
}
}
)
;
{
%
-
endfor
%
}
{
%
-
endfor
%
}
}
/
/
Define
pointer
types
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
object
in
ci
.
object_definitions
(
)
%
}
{
%
-
let
pointer_type
=
ci
.
pointer_type
(
object
)
%
}
const
static
mozilla
:
:
uniffi
:
:
UniFFIPointerType
{
{
pointer_type
}
}
{
"
{
{
"
{
}
:
:
{
}
"
|
format
(
ci
.
namespace
(
)
object
.
name
(
)
)
}
}
"
_ns
{
{
object
.
ffi_object_free
(
)
.
rust_name
(
)
}
}
}
;
{
%
-
endfor
%
}
{
%
-
endfor
%
}
Maybe
<
already_AddRefed
<
Promise
>
>
{
{
prefix
}
}
CallAsync
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
Sequence
<
ScaffoldingType
>
&
aArgs
ErrorResult
&
aError
)
{
switch
(
aId
)
{
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
func
in
ci
.
exposed_functions
(
)
%
}
case
{
{
function_ids
.
get
(
ci
func
)
}
}
:
{
/
/
{
{
function_ids
.
name
(
ci
func
)
}
}
using
CallHandler
=
{
{
ci
.
scaffolding_call_handler
(
func
)
}
}
;
return
Some
(
CallHandler
:
:
CallAsync
(
{
{
func
.
rust_name
(
)
}
}
aGlobal
aArgs
"
{
{
func
.
name
(
)
}
}
:
"
_ns
aError
)
)
;
}
{
%
-
endfor
%
}
{
%
-
endfor
%
}
}
return
Nothing
(
)
;
}
bool
{
{
prefix
}
}
CallSync
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
Sequence
<
ScaffoldingType
>
&
aArgs
RootedDictionary
<
UniFFIScaffoldingCallResult
>
&
aReturnValue
ErrorResult
&
aError
)
{
switch
(
aId
)
{
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
func
in
ci
.
exposed_functions
(
)
%
}
case
{
{
function_ids
.
get
(
ci
func
)
}
}
:
{
/
/
{
{
function_ids
.
name
(
ci
func
)
}
}
using
CallHandler
=
{
{
ci
.
scaffolding_call_handler
(
func
)
}
}
;
CallHandler
:
:
CallSync
(
{
{
func
.
rust_name
(
)
}
}
aGlobal
aArgs
aReturnValue
"
{
{
func
.
name
(
)
}
}
:
"
_ns
aError
)
;
return
true
;
}
{
%
-
endfor
%
}
{
%
-
endfor
%
}
}
return
false
;
}
Maybe
<
already_AddRefed
<
UniFFIPointer
>
>
{
{
prefix
}
}
ReadPointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
const
UniFFIPointerType
*
type
;
switch
(
aId
)
{
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
object
in
ci
.
object_definitions
(
)
%
}
case
{
{
object_ids
.
get
(
ci
object
)
}
}
:
{
/
/
{
{
object_ids
.
name
(
ci
object
)
}
}
type
=
&
{
{
ci
.
pointer_type
(
object
)
}
}
;
break
;
}
{
%
-
endfor
%
}
{
%
-
endfor
%
}
default
:
return
Nothing
(
)
;
}
return
Some
(
UniFFIPointer
:
:
Read
(
aArrayBuff
aPosition
type
aError
)
)
;
}
bool
{
{
prefix
}
}
WritePointer
(
const
GlobalObject
&
aGlobal
uint64_t
aId
const
UniFFIPointer
&
aPtr
const
ArrayBuffer
&
aArrayBuff
long
aPosition
ErrorResult
&
aError
)
{
const
UniFFIPointerType
*
type
;
switch
(
aId
)
{
{
%
-
for
ci
in
ci_list
%
}
{
%
-
for
object
in
ci
.
object_definitions
(
)
%
}
case
{
{
object_ids
.
get
(
ci
object
)
}
}
:
{
/
/
{
{
object_ids
.
name
(
ci
object
)
}
}
type
=
&
{
{
ci
.
pointer_type
(
object
)
}
}
;
break
;
}
{
%
-
endfor
%
}
{
%
-
endfor
%
}
default
:
return
false
;
}
aPtr
.
Write
(
aArrayBuff
aPosition
type
aError
)
;
return
true
;
}
}
/
/
namespace
mozilla
:
:
uniffi
