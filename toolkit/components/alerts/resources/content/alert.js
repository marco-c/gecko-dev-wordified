/
/
-
*
-
Mode
:
Java
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
/
/
Copied
from
nsILookAndFeel
.
h
see
comments
on
eMetric_AlertNotificationOrigin
const
NS_ALERT_HORIZONTAL
=
1
;
const
NS_ALERT_LEFT
=
2
;
const
NS_ALERT_TOP
=
4
;
var
gOrigin
=
0
;
/
/
Default
value
:
alert
from
bottom
right
.
var
gAlertListener
=
null
;
var
gAlertTextClickable
=
false
;
var
gAlertCookie
=
"
"
;
function
prefillAlertInfo
(
)
{
/
/
unwrap
all
the
args
.
.
.
.
/
/
arguments
[
0
]
-
-
>
the
image
src
url
/
/
arguments
[
1
]
-
-
>
the
alert
title
/
/
arguments
[
2
]
-
-
>
the
alert
text
/
/
arguments
[
3
]
-
-
>
is
the
text
clickable
?
/
/
arguments
[
4
]
-
-
>
the
alert
cookie
to
be
passed
back
to
the
listener
/
/
arguments
[
5
]
-
-
>
the
alert
origin
reported
by
the
look
and
feel
/
/
arguments
[
6
]
-
-
>
an
optional
callback
listener
(
nsIObserver
)
switch
(
window
.
arguments
.
length
)
{
default
:
case
7
:
gAlertListener
=
window
.
arguments
[
6
]
;
case
6
:
gOrigin
=
window
.
arguments
[
5
]
;
case
5
:
gAlertCookie
=
window
.
arguments
[
4
]
;
case
4
:
gAlertTextClickable
=
window
.
arguments
[
3
]
;
if
(
gAlertTextClickable
)
{
document
.
getElementById
(
'
alertNotification
'
)
.
setAttribute
(
'
clickable
'
true
)
;
document
.
getElementById
(
'
alertTextLabel
'
)
.
setAttribute
(
'
clickable
'
true
)
;
}
case
3
:
document
.
getElementById
(
'
alertTextLabel
'
)
.
setAttribute
(
'
value
'
window
.
arguments
[
2
]
)
;
case
2
:
document
.
getElementById
(
'
alertTitleLabel
'
)
.
setAttribute
(
'
value
'
window
.
arguments
[
1
]
)
;
case
1
:
document
.
getElementById
(
'
alertImage
'
)
.
setAttribute
(
'
src
'
window
.
arguments
[
0
]
)
;
case
0
:
break
;
}
}
function
onAlertLoad
(
)
{
/
/
Make
sure
that
the
contents
are
fixed
at
the
window
edge
facing
the
/
/
screen
'
s
center
so
that
the
window
looks
like
"
sliding
in
"
and
not
/
/
like
"
unfolding
"
.
The
default
packing
of
"
start
"
only
works
for
/
/
vertical
-
bottom
and
horizontal
-
right
positions
so
we
change
it
here
.
if
(
gOrigin
&
NS_ALERT_HORIZONTAL
)
{
if
(
gOrigin
&
NS_ALERT_LEFT
)
document
.
documentElement
.
pack
=
"
end
"
;
/
/
Additionally
change
the
orientation
so
the
packing
works
as
intended
document
.
documentElement
.
orient
=
"
horizontal
"
;
}
else
{
if
(
gOrigin
&
NS_ALERT_TOP
)
document
.
documentElement
.
pack
=
"
end
"
;
}
var
alertBox
=
document
.
getElementById
(
"
alertBox
"
)
;
alertBox
.
orient
=
(
gOrigin
&
NS_ALERT_HORIZONTAL
)
?
"
vertical
"
:
"
horizontal
"
;
sizeToContent
(
)
;
/
/
Determine
position
var
x
=
gOrigin
&
NS_ALERT_LEFT
?
screen
.
availLeft
:
screen
.
availLeft
+
screen
.
availWidth
-
window
.
outerWidth
;
var
y
=
gOrigin
&
NS_ALERT_TOP
?
screen
.
availTop
:
screen
.
availTop
+
screen
.
availHeight
-
window
.
outerHeight
;
/
/
Offset
the
alert
by
10
pixels
from
the
edge
of
the
screen
y
+
=
gOrigin
&
NS_ALERT_TOP
?
10
:
-
10
;
x
+
=
gOrigin
&
NS_ALERT_LEFT
?
10
:
-
10
;
window
.
moveTo
(
x
y
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
alerts
.
disableSlidingEffect
"
)
)
{
setTimeout
(
closeAlert
4000
)
;
return
;
}
alertBox
.
addEventListener
(
"
animationend
"
function
hideAlert
(
event
)
{
if
(
event
.
animationName
=
=
"
alert
-
animation
"
)
{
alertBox
.
removeEventListener
(
"
animationend
"
hideAlert
false
)
;
closeAlert
(
)
;
}
}
false
)
;
alertBox
.
setAttribute
(
"
animate
"
true
)
;
}
function
closeAlert
(
)
{
if
(
gAlertListener
)
gAlertListener
.
observe
(
null
"
alertfinished
"
gAlertCookie
)
;
window
.
close
(
)
;
}
function
onAlertClick
(
)
{
if
(
gAlertListener
&
&
gAlertTextClickable
)
gAlertListener
.
observe
(
null
"
alertclickcallback
"
gAlertCookie
)
;
closeAlert
(
)
;
}
