/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
/
/
This
tests
the
public
Telemetry
API
for
submitting
pings
.
"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryPing
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryStorage
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
this
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gPingsArchivePath
"
function
(
)
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
datareporting
"
"
archived
"
)
;
}
)
;
function
run_test
(
)
{
do_get_profile
(
true
)
;
run_next_test
(
)
;
}
add_task
(
function
*
test_archivedPings
(
)
{
yield
TelemetryPing
.
setup
(
)
;
const
PINGS
=
[
{
type
:
"
test
-
ping
-
api
-
1
"
payload
:
{
foo
:
"
bar
"
}
dateCreated
:
new
Date
(
2010
1
1
10
0
0
)
}
{
type
:
"
test
-
ping
-
api
-
2
"
payload
:
{
moo
:
"
meh
"
}
dateCreated
:
new
Date
(
2010
2
1
10
0
0
)
}
]
;
/
/
Submit
pings
and
check
the
ping
list
.
let
expectedPingList
=
[
]
;
for
(
let
data
of
PINGS
)
{
fakeNow
(
data
.
dateCreated
)
;
data
.
id
=
yield
TelemetryPing
.
send
(
data
.
type
data
.
payload
)
;
let
list
=
yield
TelemetryPing
.
promiseArchivedPingList
(
)
;
expectedPingList
.
push
(
{
id
:
data
.
id
type
:
data
.
type
timestampCreated
:
data
.
dateCreated
.
getTime
(
)
}
)
;
Assert
.
deepEqual
(
list
expectedPingList
"
Archived
ping
list
should
contain
submitted
pings
"
)
;
}
/
/
Check
loading
the
archived
pings
.
let
ids
=
[
for
(
p
of
PINGS
)
p
.
id
]
;
let
checkLoadingPings
=
Task
.
async
(
function
*
(
)
{
for
(
let
data
of
PINGS
)
{
let
ping
=
yield
TelemetryPing
.
promiseArchivedPingById
(
data
.
id
)
;
Assert
.
equal
(
ping
.
id
data
.
id
"
Archived
ping
should
have
matching
id
"
)
;
Assert
.
equal
(
ping
.
type
data
.
type
"
Archived
ping
should
have
matching
type
"
)
;
Assert
.
equal
(
ping
.
creationDate
data
.
dateCreated
.
toISOString
(
)
"
Archived
ping
should
have
matching
creation
date
"
)
;
}
}
)
;
yield
checkLoadingPings
(
)
;
/
/
Check
that
we
find
the
archived
pings
again
by
scanning
after
a
restart
.
yield
TelemetryPing
.
setup
(
)
;
let
pingList
=
yield
TelemetryPing
.
promiseArchivedPingList
(
)
;
Assert
.
deepEqual
(
expectedPingList
pingList
"
Should
have
submitted
pings
in
archive
list
after
restart
"
)
;
yield
checkLoadingPings
(
)
;
/
/
Write
invalid
pings
into
the
archive
with
both
valid
and
invalid
names
.
let
writeToArchivedDir
=
Task
.
async
(
function
*
(
dirname
filename
content
)
{
const
dirPath
=
OS
.
Path
.
join
(
gPingsArchivePath
dirname
)
;
yield
OS
.
File
.
makeDir
(
dirPath
{
ignoreExisting
:
true
}
)
;
const
filePath
=
OS
.
Path
.
join
(
dirPath
filename
)
;
const
options
=
{
tmpPath
:
filePath
+
"
.
tmp
"
noOverwrite
:
false
}
;
yield
OS
.
File
.
writeAtomic
(
filePath
content
options
)
;
}
)
;
const
FAKE_ID1
=
"
10000000
-
0123
-
0123
-
0123
-
0123456789a1
"
;
const
FAKE_ID2
=
"
20000000
-
0123
-
0123
-
0123
-
0123456789a2
"
;
const
FAKE_TYPE
=
"
foo
"
/
/
These
should
get
rejected
.
yield
writeToArchivedDir
(
"
xx
"
"
foo
.
json
"
"
{
}
"
)
;
yield
writeToArchivedDir
(
"
2010
-
02
"
"
xx
.
xx
.
xx
.
json
"
"
{
}
"
)
;
/
/
This
one
should
get
picked
up
.
.
.
yield
writeToArchivedDir
(
"
2010
-
02
"
"
1
.
"
+
FAKE_ID1
+
"
.
"
+
FAKE_TYPE
+
"
.
json
"
"
{
}
"
)
;
/
/
.
.
.
but
get
overwritten
by
this
one
.
yield
writeToArchivedDir
(
"
2010
-
02
"
"
2
.
"
+
FAKE_ID1
+
"
.
"
+
FAKE_TYPE
+
"
.
json
"
"
"
)
;
/
/
This
should
get
picked
up
fine
.
yield
writeToArchivedDir
(
"
2010
-
02
"
"
3
.
"
+
FAKE_ID2
+
"
.
"
+
FAKE_TYPE
+
"
.
json
"
"
"
)
;
expectedPingList
.
push
(
{
id
:
FAKE_ID1
type
:
"
foo
"
timestampCreated
:
2
}
)
;
expectedPingList
.
push
(
{
id
:
FAKE_ID2
type
:
"
foo
"
timestampCreated
:
3
}
)
;
expectedPingList
.
sort
(
(
a
b
)
=
>
a
.
timestampCreated
-
b
.
timestampCreated
)
;
/
/
Trigger
scanning
the
ping
dir
.
yield
TelemetryPing
.
setup
(
)
;
/
/
Check
that
we
are
still
picking
up
the
valid
archived
pings
on
disk
/
/
plus
the
valid
ones
above
.
pingList
=
yield
TelemetryPing
.
promiseArchivedPingList
(
)
;
Assert
.
deepEqual
(
expectedPingList
pingList
"
Should
have
picked
up
valid
archived
pings
"
)
;
yield
checkLoadingPings
(
)
;
/
/
Now
check
that
we
fail
to
load
the
two
invalid
pings
from
above
.
let
rejects
=
(
promise
)
=
>
promise
.
then
(
(
)
=
>
false
(
)
=
>
true
)
;
Assert
.
ok
(
(
yield
rejects
(
TelemetryPing
.
promiseArchivedPingById
(
FAKE_ID1
)
)
)
"
Should
not
have
scanned
invalid
ping
"
)
;
Assert
.
ok
(
(
yield
rejects
(
TelemetryPing
.
promiseArchivedPingById
(
FAKE_ID2
)
)
)
"
Should
not
have
scanned
invalid
ping
"
)
;
}
)
;
