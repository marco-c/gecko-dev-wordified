/
/
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
/
/
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
/
/
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
this
.
EXPORTED_SYMBOLS
=
[
"
RemoteAddonsParent
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
/
/
Similar
to
Python
.
Returns
dict
[
key
]
if
it
exists
.
Otherwise
/
/
sets
dict
[
key
]
to
default_
and
returns
default_
.
function
setDefault
(
dict
key
default_
)
{
if
(
key
in
dict
)
{
return
dict
[
key
]
;
}
dict
[
key
]
=
default_
;
return
default_
;
}
/
/
This
code
keeps
track
of
a
set
of
paths
of
the
form
[
component_1
/
/
.
.
.
component_n
]
.
The
components
can
be
strings
or
booleans
.
The
/
/
child
is
notified
whenever
a
path
is
added
or
removed
and
new
/
/
children
can
request
the
current
set
of
paths
.
The
purpose
is
to
/
/
keep
track
of
all
the
observers
and
events
that
the
child
should
/
/
monitor
for
the
parent
.
let
NotificationTracker
=
{
/
/
_paths
is
a
multi
-
level
dictionary
.
Let
'
s
add
paths
[
A
B
]
and
/
/
[
A
C
]
.
Then
_paths
will
look
like
this
:
/
/
{
'
A
'
:
{
'
B
'
:
{
'
_count
'
:
1
}
'
C
'
:
{
'
_count
'
:
1
}
}
}
/
/
Each
component
in
a
path
will
be
a
key
in
some
dictionary
.
At
the
/
/
end
the
_count
property
keeps
track
of
how
many
instances
of
the
/
/
given
path
are
present
in
_paths
.
_paths
:
{
}
init
:
function
(
)
{
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
addMessageListener
(
"
Addons
:
GetNotifications
"
this
)
;
}
add
:
function
(
path
)
{
let
tracked
=
this
.
_paths
;
for
(
let
component
of
path
)
{
tracked
=
setDefault
(
tracked
component
{
}
)
;
}
let
count
=
tracked
.
_count
|
|
0
;
count
+
+
;
tracked
.
_count
=
count
;
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
broadcastAsyncMessage
(
"
Addons
:
AddNotification
"
path
)
;
}
remove
:
function
(
path
)
{
let
tracked
=
this
.
_paths
;
for
(
let
component
of
path
)
{
tracked
=
setDefault
(
tracked
component
{
}
)
;
}
tracked
.
_count
-
-
;
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
broadcastAsyncMessage
(
"
Addons
:
RemoveNotification
"
path
)
;
}
receiveMessage
:
function
(
msg
)
{
if
(
msg
.
name
=
=
"
Addons
:
GetNotifications
"
)
{
return
this
.
_paths
;
}
}
}
;
NotificationTracker
.
init
(
)
;
/
/
An
interposition
is
an
object
with
three
properties
:
methods
/
/
getters
and
setters
.
See
multiprocessShims
.
js
for
an
explanation
/
/
of
how
these
are
used
.
The
constructor
here
just
allows
one
/
/
interposition
to
inherit
members
from
another
.
function
Interposition
(
base
)
{
if
(
base
)
{
this
.
methods
=
Object
.
create
(
base
.
methods
)
;
this
.
getters
=
Object
.
create
(
base
.
getters
)
;
this
.
setters
=
Object
.
create
(
base
.
setters
)
;
}
else
{
this
.
methods
=
{
}
;
this
.
getters
=
{
}
;
this
.
setters
=
{
}
;
}
}
/
/
This
object
is
responsible
for
notifying
the
child
when
a
new
/
/
content
policy
is
added
or
removed
.
It
also
runs
all
the
registered
/
/
add
-
on
content
policies
when
the
child
asks
it
to
do
so
.
let
ContentPolicyParent
=
{
init
:
function
(
)
{
let
ppmm
=
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
ppmm
.
addMessageListener
(
"
Addons
:
ContentPolicy
:
Run
"
this
)
;
this
.
_policies
=
[
]
;
}
addContentPolicy
:
function
(
cid
)
{
this
.
_policies
.
push
(
cid
)
;
NotificationTracker
.
add
(
[
"
content
-
policy
"
]
)
;
}
removeContentPolicy
:
function
(
cid
)
{
let
index
=
this
.
_policies
.
lastIndexOf
(
cid
)
;
if
(
index
>
-
1
)
{
this
.
_policies
.
splice
(
index
1
)
;
}
NotificationTracker
.
remove
(
[
"
content
-
policy
"
]
)
;
}
receiveMessage
:
function
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
Addons
:
ContentPolicy
:
Run
"
:
return
this
.
shouldLoad
(
aMessage
.
data
aMessage
.
objects
)
;
break
;
}
}
shouldLoad
:
function
(
aData
aObjects
)
{
for
(
let
policyCID
of
this
.
_policies
)
{
let
policy
=
Cc
[
policyCID
]
.
getService
(
Ci
.
nsIContentPolicy
)
;
try
{
let
result
=
policy
.
shouldLoad
(
aObjects
.
contentType
aObjects
.
contentLocation
aObjects
.
requestOrigin
aObjects
.
node
aObjects
.
mimeTypeGuess
null
)
;
if
(
result
!
=
Ci
.
nsIContentPolicy
.
ACCEPT
&
&
result
!
=
0
)
return
result
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
}
;
ContentPolicyParent
.
init
(
)
;
/
/
This
interposition
intercepts
calls
to
add
or
remove
new
content
/
/
policies
and
forwards
these
requests
to
ContentPolicyParent
.
let
CategoryManagerInterposition
=
new
Interposition
(
)
;
CategoryManagerInterposition
.
methods
.
addCategoryEntry
=
function
(
addon
target
category
entry
value
persist
replace
)
{
if
(
category
=
=
"
content
-
policy
"
)
{
ContentPolicyParent
.
addContentPolicy
(
entry
)
;
}
target
.
addCategoryEntry
(
category
entry
value
persist
replace
)
;
}
;
CategoryManagerInterposition
.
methods
.
deleteCategoryEntry
=
function
(
addon
target
category
entry
persist
)
{
if
(
category
=
=
"
content
-
policy
"
)
{
ContentPolicyParent
.
remoteContentPolicy
(
entry
)
;
}
target
.
deleteCategoryEntry
(
category
entry
persist
)
;
}
;
let
RemoteAddonsParent
=
{
init
:
function
(
)
{
}
getInterfaceInterpositions
:
function
(
)
{
let
result
=
{
}
;
function
register
(
intf
interp
)
{
result
[
intf
.
number
]
=
interp
;
}
register
(
Ci
.
nsICategoryManager
CategoryManagerInterposition
)
;
return
result
;
}
getTaggedInterpositions
:
function
(
)
{
return
{
}
;
}
}
;
