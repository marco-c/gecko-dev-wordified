/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
"
use
strict
"
;
/
*
*
*
Checks
that
the
page
renders
without
issue
and
that
the
expected
elements
*
are
there
.
*
/
add_task
(
async
function
test_about_translations_enabled
(
)
{
await
openAboutTranslations
(
{
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
function
checkElementIsVisble
(
name
)
{
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
"
visible
"
Element
{
name
}
was
visible
.
)
;
}
checkElementIsVisble
(
"
pageHeader
"
)
;
checkElementIsVisble
(
"
fromLanguageSelect
"
)
;
checkElementIsVisble
(
"
toLanguageSelect
"
)
;
checkElementIsVisble
(
"
translationTextarea
"
)
;
checkElementIsVisble
(
"
translationResult
"
)
;
checkElementIsVisble
(
"
translationResultBlank
"
)
;
}
}
)
;
}
)
;
/
*
*
*
Checks
that
the
page
does
not
show
the
content
when
disabled
.
*
/
add_task
(
async
function
test_about_translations_disabled
(
)
{
await
openAboutTranslations
(
{
disabled
:
true
runInPage
:
async
(
{
selectors
}
)
=
>
{
const
{
document
window
}
=
content
;
function
checkElementIsInvisible
(
name
)
{
const
element
=
document
.
querySelector
(
selectors
[
name
]
)
;
ok
(
Boolean
(
element
)
Element
{
name
}
was
found
.
)
;
const
{
visibility
}
=
window
.
getComputedStyle
(
element
)
;
is
(
visibility
"
hidden
"
Element
{
name
}
was
invisible
.
)
;
}
checkElementIsInvisible
(
"
pageHeader
"
)
;
checkElementIsInvisible
(
"
fromLanguageSelect
"
)
;
checkElementIsInvisible
(
"
toLanguageSelect
"
)
;
checkElementIsInvisible
(
"
translationTextarea
"
)
;
checkElementIsInvisible
(
"
translationResult
"
)
;
checkElementIsInvisible
(
"
translationResultBlank
"
)
;
}
}
)
;
}
)
;
