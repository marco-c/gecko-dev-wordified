/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
2
et
sw
=
2
tw
=
80
filetype
=
javascript
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
Provides
functions
to
integrate
with
the
host
application
handling
for
*
example
the
global
prompts
on
shutdown
.
*
/
"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
DownloadIntegration
"
]
;
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
Globals
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DownloadStore
"
"
resource
:
/
/
gre
/
modules
/
DownloadStore
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
commonjs
/
sdk
/
core
/
promise
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
env
"
"
mozilla
.
org
/
process
/
environment
;
1
"
"
nsIEnvironment
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gParentalControlsService
"
function
(
)
{
if
(
"
mozilla
.
org
/
parental
-
controls
-
service
;
1
"
in
Cc
)
{
return
Cc
[
"
mozilla
.
org
/
parental
-
controls
-
service
;
1
"
]
.
createInstance
(
Ci
.
nsIParentalControlsService
)
;
}
return
null
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gStringBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
mozapps
/
locale
/
downloads
/
downloads
.
properties
"
)
;
}
)
;
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
DownloadIntegration
/
*
*
*
Provides
functions
to
integrate
with
the
host
application
handling
for
*
example
the
global
prompts
on
shutdown
.
*
/
this
.
DownloadIntegration
=
{
/
/
For
testing
only
testMode
:
false
dontLoad
:
false
dontCheckParentalControls
:
false
shouldBlockInTest
:
false
/
*
*
*
Main
DownloadStore
object
for
loading
and
saving
the
list
of
persistent
*
downloads
or
null
if
the
download
list
was
never
requested
and
thus
it
*
doesn
'
t
need
to
be
persisted
.
*
/
_store
:
null
/
*
*
*
Performs
initialization
of
the
list
of
persistent
downloads
before
its
*
first
use
by
the
host
application
.
This
function
may
be
called
only
once
*
during
the
entire
lifetime
of
the
application
.
*
*
param
aList
*
DownloadList
object
to
be
populated
with
the
download
objects
*
serialized
from
the
previous
session
.
This
list
will
be
persisted
*
to
disk
during
the
session
lifetime
or
when
the
session
terminates
.
*
*
return
{
Promise
}
*
resolves
When
the
list
has
been
populated
.
*
rejects
JavaScript
exception
.
*
/
loadPersistent
:
function
DI_loadPersistent
(
aList
)
{
if
(
this
.
dontLoad
)
{
return
Promise
.
resolve
(
)
;
}
if
(
this
.
_store
)
{
throw
new
Error
(
"
loadPersistent
may
be
called
only
once
.
"
)
;
}
this
.
_store
=
new
DownloadStore
(
aList
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
downloads
.
json
"
)
)
;
return
this
.
_store
.
load
(
)
;
}
/
*
*
*
Returns
the
system
downloads
directory
asynchronously
.
*
*
return
{
Promise
}
*
resolves
The
nsIFile
of
downloads
directory
.
*
/
getSystemDownloadsDirectory
:
function
DI_getSystemDownloadsDirectory
(
)
{
return
Task
.
spawn
(
function
(
)
{
if
(
this
.
_downloadsDirectory
)
{
/
/
This
explicitly
makes
this
function
a
generator
for
Task
.
jsm
.
We
/
/
need
this
because
calls
to
the
"
yield
"
operator
below
may
be
/
/
preprocessed
out
on
some
platforms
.
yield
;
throw
new
Task
.
Result
(
this
.
_downloadsDirectory
)
;
}
let
directory
=
null
;
#
ifdef
XP_MACOSX
directory
=
this
.
_getDirectory
(
"
DfltDwnld
"
)
;
#
elifdef
XP_WIN
/
/
For
XP
/
2K
use
My
Documents
/
Downloads
.
Other
version
uses
/
/
the
default
Downloads
directory
.
let
version
=
parseFloat
(
Services
.
sysinfo
.
getProperty
(
"
version
"
)
)
;
if
(
version
<
6
)
{
directory
=
yield
this
.
_createDownloadsDirectory
(
"
Pers
"
)
;
}
else
{
directory
=
this
.
_getDirectory
(
"
DfltDwnld
"
)
;
}
#
elifdef
XP_UNIX
#
ifdef
MOZ_PLATFORM_MAEMO
/
/
As
maemo
does
not
follow
the
XDG
"
standard
"
(
as
usually
desktop
/
/
Linux
distros
do
)
neither
has
a
working
HOME
/
Desktop
folder
/
/
for
us
to
fallback
into
"
HOME
/
MyDocs
/
.
documents
/
"
is
the
folder
/
/
we
found
most
appropriate
to
be
the
default
target
folder
for
/
/
downloads
on
the
platform
.
directory
=
this
.
_getDirectory
(
"
XDGDocs
"
)
;
#
elifdef
ANDROID
/
/
Android
doesn
'
t
have
a
HOME
directory
and
by
default
we
only
have
/
/
write
access
to
/
data
/
data
/
org
.
mozilla
.
{
APP
}
and
/
sdcard
let
directoryPath
=
env
.
get
(
"
DOWNLOADS_DIRECTORY
"
)
;
if
(
!
directoryPath
)
{
throw
new
Components
.
Exception
(
"
DOWNLOADS_DIRECTORY
is
not
set
.
"
Cr
.
NS_ERROR_FILE_UNRECOGNIZED_PATH
)
;
}
directory
=
new
FileUtils
.
File
(
directoryPath
)
;
#
else
/
/
For
Linux
use
XDG
download
dir
with
a
fallback
to
Home
/
Downloads
/
/
if
the
XDG
user
dirs
are
disabled
.
try
{
directory
=
this
.
_getDirectory
(
"
DfltDwnld
"
)
;
}
catch
(
e
)
{
directory
=
yield
this
.
_createDownloadsDirectory
(
"
Home
"
)
;
}
#
endif
#
else
directory
=
yield
this
.
_createDownloadsDirectory
(
"
Home
"
)
;
#
endif
this
.
_downloadsDirectory
=
directory
;
throw
new
Task
.
Result
(
this
.
_downloadsDirectory
)
;
}
.
bind
(
this
)
)
;
}
_downloadsDirectory
:
null
/
*
*
*
Returns
the
user
downloads
directory
asynchronously
.
*
*
return
{
Promise
}
*
resolves
The
nsIFile
of
downloads
directory
.
*
/
getUserDownloadsDirectory
:
function
DI_getUserDownloadsDirectory
(
)
{
return
Task
.
spawn
(
function
(
)
{
let
directory
=
null
;
let
prefValue
=
1
;
try
{
prefValue
=
Services
.
prefs
.
getIntPref
(
"
browser
.
download
.
folderList
"
)
;
}
catch
(
e
)
{
}
switch
(
prefValue
)
{
case
0
:
/
/
Desktop
directory
=
this
.
_getDirectory
(
"
Desk
"
)
;
break
;
case
1
:
/
/
Downloads
directory
=
yield
this
.
getSystemDownloadsDirectory
(
)
;
break
;
case
2
:
/
/
Custom
try
{
directory
=
Services
.
prefs
.
getComplexValue
(
"
browser
.
download
.
dir
"
Ci
.
nsIFile
)
;
yield
OS
.
File
.
makeDir
(
directory
.
path
{
ignoreExisting
:
true
}
)
;
}
catch
(
ex
)
{
/
/
Either
the
preference
isn
'
t
set
or
the
directory
cannot
be
created
.
directory
=
yield
this
.
getSystemDownloadsDirectory
(
)
;
}
break
;
default
:
directory
=
yield
this
.
getSystemDownloadsDirectory
(
)
;
}
throw
new
Task
.
Result
(
directory
)
;
}
.
bind
(
this
)
)
;
}
/
*
*
*
Returns
the
temporary
downloads
directory
asynchronously
.
*
*
return
{
Promise
}
*
resolves
The
nsIFile
of
downloads
directory
.
*
/
getTemporaryDownloadsDirectory
:
function
DI_getTemporaryDownloadsDirectory
(
)
{
return
Task
.
spawn
(
function
(
)
{
let
directory
=
null
;
#
ifdef
XP_MACOSX
directory
=
yield
this
.
getUserDownloadsDirectory
(
)
;
#
elifdef
ANDROID
directory
=
yield
this
.
getSystemDownloadsDirectory
(
)
;
#
else
/
/
For
Metro
mode
on
Windows
8
we
want
searchability
for
documents
/
/
that
the
user
chose
to
open
with
an
external
application
.
if
(
this
.
_isImmersiveProcess
(
)
)
{
directory
=
yield
this
.
getSystemDownloadsDirectory
(
)
;
}
else
{
directory
=
this
.
_getDirectory
(
"
TmpD
"
)
;
}
#
endif
throw
new
Task
.
Result
(
directory
)
;
}
.
bind
(
this
)
)
;
}
/
*
*
*
Checks
to
determine
whether
to
block
downloads
for
parental
controls
.
*
*
aParam
aDownload
*
The
download
object
.
*
*
return
{
Promise
}
*
resolves
The
boolean
indicates
to
block
downloads
or
not
.
*
/
shouldBlockForParentalControls
:
function
DI_shouldBlockForParentalControls
(
aDownload
)
{
if
(
this
.
dontCheckParentalControls
)
{
return
Promise
.
resolve
(
this
.
shouldBlockInTest
)
;
}
let
isEnabled
=
gParentalControlsService
&
&
gParentalControlsService
.
parentalControlsEnabled
;
let
shouldBlock
=
isEnabled
&
&
gParentalControlsService
.
blockFileDownloadsEnabled
;
/
/
Log
the
event
if
required
by
parental
controls
settings
.
if
(
isEnabled
&
&
gParentalControlsService
.
loggingEnabled
)
{
gParentalControlsService
.
log
(
gParentalControlsService
.
ePCLog_FileDownload
shouldBlock
aDownload
.
source
.
uri
null
)
;
}
return
Promise
.
resolve
(
shouldBlock
)
;
}
/
*
*
*
Determines
whether
it
'
s
a
Windows
Metro
app
.
*
/
_isImmersiveProcess
:
function
(
)
{
/
/
TODO
:
to
be
implemented
return
false
;
}
/
*
*
*
Calls
the
directory
service
create
a
downloads
directory
and
returns
an
*
nsIFile
for
the
downloads
directory
.
*
*
return
{
Promise
}
*
resolves
The
nsIFile
directory
.
*
/
_createDownloadsDirectory
:
function
DI_createDownloadsDirectory
(
aName
)
{
let
directory
=
this
.
_getDirectory
(
aName
)
;
directory
.
append
(
gStringBundle
.
GetStringFromName
(
"
downloadsFolder
"
)
)
;
/
/
Create
the
Downloads
folder
and
ignore
if
it
already
exists
.
return
OS
.
File
.
makeDir
(
directory
.
path
{
ignoreExisting
:
true
}
)
.
then
(
function
(
)
{
return
directory
;
}
)
;
}
/
*
*
*
Calls
the
directory
service
and
returns
an
nsIFile
for
the
requested
*
location
name
.
*
*
return
The
nsIFile
directory
.
*
/
_getDirectory
:
function
DI_getDirectory
(
aName
)
{
return
Services
.
dirsvc
.
get
(
this
.
testMode
?
"
TmpD
"
:
aName
Ci
.
nsIFile
)
;
}
}
;
