[
NDEFReader_scan
.
https
.
html
]
[
Test
that
nfc
watch
success
if
NFC
HW
is
enabled
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
succeeds
if
NDEFScanOptions
.
url
is
valid
URL
with
'
*
'
wildcard
character
in
the
beginning
of
path
component
followed
by
subpath
.
]
expected
:
FAIL
[
NDEFReader
.
scan
should
fail
if
NFC
HW
is
disabled
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
succeeds
if
NDEFScanOptions
.
url
is
valid
URL
with
'
*
'
wildcard
character
in
path
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
succeeds
if
NDEFScanOptions
.
url
is
empty
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
succeeds
if
NDEFScanOptions
.
url
is
valid
URL
.
]
expected
:
FAIL
[
NDEFReader
.
scan
should
fail
if
NFC
HW
is
not
supported
.
]
expected
:
FAIL
[
Test
that
NDEFReader
can
not
get
any
reading
events
once
the
signal
aborts
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
NDEFScanOptions
.
signal
aborts
right
after
the
scan
invocation
.
]
expected
:
FAIL
[
NDEFRecord
.
toRecords
returns
its
embedded
records
correctly
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
onreading
should
not
be
fired
if
the
NFC
tag
does
not
expose
NDEF
technology
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
NDEFScanOptions
.
signal
is
already
aborted
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
signal
is
not
an
AbortSignal
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
onreading
should
be
fired
on
an
unformatted
NFC
tag
with
empty
records
array
for
NDEFMessage
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
NDEFScanOptions
.
id
is
invalid
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
NDEFScanOptions
.
id
is
missing
components
.
]
expected
:
FAIL
[
Test
that
NDEFReader
.
scan
rejects
if
NDEFScanOptions
.
id
has
wrong
protocol
.
]
expected
:
FAIL
[
NDEFReader
.
scan
should
fail
if
user
permission
is
not
granted
.
]
expected
:
FAIL
