[
cts
.
html
?
q
=
cts
:
fences
:
]
[
cts
:
fences
:
wait
/
less
+
than
+
signaled
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
no
+
descriptor
=
]
expected
:
FAIL
[
cts
:
fences
:
drop
/
promise
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
empty
+
descriptor
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
many
/
serially
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
already
+
completed
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
descriptor
+
with
+
initialValue
=
]
expected
:
FAIL
[
cts
:
fences
:
drop
/
fence
+
and
+
promise
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
equal
+
to
+
signaled
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
many
/
parallel
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
signaled
+
multiple
+
times
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
signaled
+
once
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
signaled_multiple_times
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
descriptor_with_initialValue
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
no_descriptor
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
less_than_signaled
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
already_completed
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
signaled_once
=
]
expected
:
FAIL
[
cts
:
fences
:
initial
/
empty_descriptor
=
]
expected
:
FAIL
[
cts
:
fences
:
drop
/
fence_and_promise
=
]
expected
:
FAIL
[
cts
:
fences
:
wait
/
equal_to_signaled
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
render
/
rendering
:
]
[
cts
:
command_buffer
/
render
/
rendering
:
fullscreen
+
quad
=
]
expected
:
FAIL
[
cts
:
command_buffer
/
render
/
rendering
:
fullscreen_quad
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
buffers
/
map_oom
:
]
[
cts
:
buffers
/
map_oom
:
createBufferAsync
=
]
expected
:
FAIL
[
cts
:
buffers
/
map_oom
:
createBufferMapped
=
]
expected
:
FAIL
[
cts
:
buffers
/
map_oom
:
mapWriteAsync
=
]
expected
:
FAIL
[
cts
:
buffers
/
map_oom
:
mapReadAsync
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
copies
:
]
[
cts
:
command_buffer
/
copies
:
b2b
=
]
expected
:
FAIL
[
cts
:
command_buffer
/
copies
:
b2t2t2b
=
]
expected
:
FAIL
[
cts
:
command_buffer
/
copies
:
b2t2b
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
compute
/
basic
:
]
[
cts
:
command_buffer
/
compute
/
basic
:
memcpy
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
buffers
/
map_detach
:
]
[
cts
:
buffers
/
map_detach
:
mapReadAsync
=
{
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
mapWriteAsync
=
{
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
mapWriteAsync
=
{
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
false
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
mapReadAsync
=
{
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
true
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
false
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
false
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
mapWriteAsync
=
{
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
true
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
mapReadAsync
=
{
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create
+
mapped
=
{
"
async
"
:
true
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
true
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
false
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
true
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
false
"
unmap
"
:
false
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
true
"
unmap
"
:
true
"
destroy
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map_detach
:
create_mapped
=
{
"
async
"
:
false
"
unmap
"
:
true
"
destroy
"
:
true
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
buffers
/
create_mapped
:
]
[
cts
:
buffers
/
create_mapped
:
createBufferMappedAsync
=
{
"
size
"
:
524288
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMapped
=
{
"
size
"
:
12
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMapped
=
{
"
size
"
:
12
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMappedAsync
=
{
"
size
"
:
12
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMapped
=
{
"
size
"
:
524288
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMappedAsync
=
{
"
size
"
:
524288
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMapped
=
{
"
size
"
:
524288
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
create_mapped
:
createBufferMappedAsync
=
{
"
size
"
:
12
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
render
/
basic
:
]
[
cts
:
command_buffer
/
render
/
basic
:
clear
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
examples
:
]
[
cts
:
examples
:
basic
/
params
=
{
"
x
"
:
-
10
"
y
"
:
18
"
result
"
:
8
}
]
expected
:
FAIL
[
cts
:
examples
:
basic
/
params
=
{
"
x
"
:
2
"
y
"
:
4
"
result
"
:
6
}
]
expected
:
FAIL
[
cts
:
examples
:
gpu
/
async
=
]
expected
:
FAIL
[
cts
:
examples
:
basic
=
]
expected
:
FAIL
[
cts
:
examples
:
gpu
/
buffers
=
]
expected
:
FAIL
[
cts
:
examples
:
basic
/
async
=
]
expected
:
FAIL
[
cts
:
examples
:
test_name
=
]
expected
:
FAIL
[
cts
:
examples
:
basic
/
params
=
{
"
x
"
:
2
"
y
"
:
4
}
]
expected
:
FAIL
[
cts
:
examples
:
basic
/
params
=
{
"
x
"
:
-
10
"
y
"
:
18
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
buffers
/
map
:
]
[
cts
:
buffers
/
map
:
mapWriteAsync
=
{
"
size
"
:
524288
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
mapWriteAsync
=
{
"
size
"
:
12
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMappedAsync
=
{
"
size
"
:
524288
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMapped
=
{
"
size
"
:
524288
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMappedAsync
=
{
"
size
"
:
12
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMapped
=
{
"
size
"
:
12
"
mappable
"
:
true
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
mapReadAsync
=
{
"
size
"
:
12
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMapped
=
{
"
size
"
:
524288
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMapped
=
{
"
size
"
:
12
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
mapReadAsync
=
{
"
size
"
:
524288
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMappedAsync
=
{
"
size
"
:
524288
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
:
buffers
/
map
:
createBufferMappedAsync
=
{
"
size
"
:
12
"
mappable
"
:
false
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
basic
:
]
[
cts
:
command_buffer
/
basic
:
empty
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
canvas
/
context_creation
:
]
[
cts
:
canvas
/
context_creation
:
getContext
+
returns
+
GPUCanvasContext
=
]
expected
:
FAIL
[
cts
:
canvas
/
context_creation
:
getContext_returns_GPUCanvasContext
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
vertex_input
:
]
[
cts
:
validation
/
vertex_input
:
check
+
out
+
of
+
bounds
+
on
+
number
+
of
+
vertex
+
attributes
+
on
+
a
+
single
+
vertex
+
buffer
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
out
+
of
+
bounds
+
condition
+
on
+
input
+
strides
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
multiple
+
of
+
4
+
bytes
+
constraint
+
on
+
offset
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
pipeline
+
vertex
+
buffers
+
are
+
backed
+
by
+
attributes
+
in
+
vertex
+
input
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
attribute
+
offset
+
out
+
of
+
bounds
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
attribute
+
offset
+
overflow
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
identical
+
duplicate
+
attributes
+
are
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
multiple
+
of
+
4
+
bytes
+
constraint
+
on
+
input
+
stride
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
a
+
stride
+
of
+
0
+
is
+
valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
a
+
null
+
buffer
+
is
+
valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
two
+
attributes
+
overlapping
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
out
+
of
+
bounds
+
on
+
number
+
of
+
vertex
+
attributes
+
across
+
vertex
+
buffers
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
an
+
empty
+
vertex
+
input
+
is
+
valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
out
+
of
+
bounds
+
condition
+
on
+
attribute
+
shader
+
location
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
offset
+
should
+
be
+
within
+
vertex
+
buffer
+
stride
+
if
+
stride
+
is
+
not
+
zero
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check
+
out
+
of
+
bounds
+
condition
+
on
+
total
+
number
+
of
+
vertex
+
buffers
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
we
+
cannot
+
set
+
same
+
shader
+
location
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_out_of_bounds_condition_on_input_strides
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_multiple_of_4_bytes_constraint_on_offset
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
identical_duplicate_attributes_are_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
an_empty_vertex_input_is_valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
a_null_buffer_is_valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
pipeline_vertex_buffers_are_backed_by_attributes_in_vertex_input
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_out_of_bounds_condition_on_attribute_shader_location
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_multiple_of_4_bytes_constraint_on_input_stride
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_out_of_bounds_condition_on_total_number_of_vertex_buffers
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_attribute_offset_overflow
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
offset_should_be_within_vertex_buffer_stride_if_stride_is_not_zero
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
a_stride_of_0_is_valid
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
we_cannot_set_same_shader_location
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_out_of_bounds_on_number_of_vertex_attributes_on_a_single_vertex_buffer
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_two_attributes_overlapping
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_out_of_bounds_on_number_of_vertex_attributes_across_vertex_buffers
=
]
expected
:
FAIL
[
cts
:
validation
/
vertex_input
:
check_attribute_offset_out_of_bounds
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createBindGroup
:
]
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
1
"
size
"
:
256
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
binding
+
count
+
mismatch
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
must
+
have
+
correct
+
component
+
type
=
{
"
textureComponentType
"
:
"
sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
binding
+
must
+
have
+
correct
+
usage
=
{
"
type
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
1024
"
size
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
1024
"
size
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
binding
+
must
+
have
+
correct
+
usage
=
{
"
type
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
0
"
size
"
:
256
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
1280
"
size
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
must
+
have
+
correct
+
component
+
type
=
{
"
textureComponentType
"
:
"
uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
255
"
size
"
:
256
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
0
"
size
"
:
1280
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
0
"
size
"
:
512
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
128
"
size
"
:
256
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
binding
+
must
+
be
+
present
+
in
+
layout
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
256
"
size
"
:
256
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
0
"
size
"
:
1024
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
768
"
size
"
:
256
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
must
+
have
+
correct
+
component
+
type
=
{
"
textureComponentType
"
:
"
float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture
+
must
+
have
+
correct
+
dimension
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
binding
+
must
+
contain
+
exactly
+
one
+
buffer
+
of
+
its
+
type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer
+
offset
+
and
+
size
+
for
+
bind
+
groups
+
match
=
{
"
offset
"
:
256
"
size
"
:
-
256
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
0
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
0
"
size
"
:
1280
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
1024
"
size
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
0
"
size
"
:
1024
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
0
"
size
"
:
512
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
1024
"
size
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
binding_count_mismatch
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
binding_must_be_present_in_layout
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_must_have_correct_component_type
=
{
"
textureComponentType
"
:
"
sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
255
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_must_have_correct_component_type
=
{
"
textureComponentType
"
:
"
float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
256
"
size
"
:
-
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
256
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
768
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
1
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_must_have_correct_dimension
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
texture
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_binding_must_have_correct_usage
=
{
"
type
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampled
-
texture
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
storage
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_binding_must_have_correct_usage
=
{
"
type
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
1280
"
size
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
error
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
sampler
"
"
resourceType
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
readonly
-
storage
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
texture_must_have_correct_component_type
=
{
"
textureComponentType
"
:
"
uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_offset_and_size_for_bind_groups_match
=
{
"
offset
"
:
128
"
size
"
:
256
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroup
:
buffer_binding_must_contain_exactly_one_buffer_of_its_type
=
{
"
bindingType
"
:
"
uniform
-
buffer
"
"
resourceType
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
error_scope
:
]
[
cts
:
validation
/
error_scope
:
push
/
popping
+
sibling
+
error
+
scopes
+
must
+
be
+
balanced
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
push
/
popping
+
nested
+
error
+
scopes
+
must
+
be
+
balanced
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
if
+
no
+
error
+
scope
+
handles
+
an
+
error
+
it
+
fires
+
an
+
uncapturederror
+
event
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
simple
+
case
+
where
+
the
+
error
+
scope
+
catches
+
an
+
error
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
if
+
an
+
error
+
scope
+
matches
+
an
+
error
+
it
+
does
+
not
+
bubble
+
to
+
the
+
parent
+
scope
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
errors
+
bubble
+
to
+
the
+
parent
+
scope
+
if
+
not
+
handled
+
by
+
the
+
current
+
scope
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
push
/
popping_nested_error_scopes_must_be_balanced
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
if_an_error_scope_matches_an_error_it_does_not_bubble_to_the_parent_scope
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
simple_case_where_the_error_scope_catches_an_error
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
errors_bubble_to_the_parent_scope_if_not_handled_by_the_current_scope
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
push
/
popping_sibling_error_scopes_must_be_balanced
=
]
expected
:
FAIL
[
cts
:
validation
/
error_scope
:
if_no_error_scope_handles_an_error_it_fires_an_uncapturederror_event
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setViewport
:
]
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
0
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
10
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
-
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
-
1
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
0
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
17
"
height
"
:
17
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
10
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
-
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
-
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
-
1
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
.
5
"
maxDepth
"
:
0
.
5
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
.
8
"
maxDepth
"
:
0
.
5
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use
+
of
+
setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
-
1
"
maxDepth
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
0
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
.
5
"
maxDepth
"
:
0
.
5
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
10
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
-
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
-
1
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
10
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
-
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
-
1
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
-
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
.
8
"
maxDepth
"
:
0
.
5
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
-
1
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
17
"
height
"
:
17
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
0
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setViewport
:
use_of_setViewport
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
1
"
minDepth
"
:
0
"
maxDepth
"
:
1
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createTexture
:
]
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
3
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
4
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
submit
+
a
+
destroyed
+
texture
+
before
+
and
+
after
+
encode
=
{
"
destroyBeforeEncode
"
:
true
"
destroyAfterEncode
"
:
false
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
31
"
mipLevelCount
"
:
7
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
8
"
mipLevelCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
100
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
16
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg11b10float
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba8unorm
-
srgb
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
31
"
height
"
:
32
"
mipLevelCount
"
:
7
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
valid
+
to
+
destroy
+
a
+
texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
2
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
4
"
arrayLayerCount
"
:
2
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgb10a2unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
valid
+
to
+
destroy
+
a
+
destroyed
+
texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
8
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
bgra8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
submit
+
a
+
destroyed
+
texture
+
before
+
and
+
after
+
encode
=
{
"
destroyBeforeEncode
"
:
false
"
destroyAfterEncode
"
:
false
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
bgra8unorm
-
srgb
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rg8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation
+
of
+
sampleCount
=
{
"
sampleCount
"
:
4
"
mipLevelCount
"
:
2
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
submit
+
a
+
destroyed
+
texture
+
before
+
and
+
after
+
encode
=
{
"
destroyBeforeEncode
"
:
false
"
destroyAfterEncode
"
:
true
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
r8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it
+
is
+
invalid
+
to
+
have
+
an
+
output
+
attachment
+
texture
+
with
+
non
+
renderable
+
format
=
{
"
format
"
:
"
rgba8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
8
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
16
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg11b10float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
bgra8unorm
-
srgb
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode
=
{
"
destroyBeforeEncode
"
:
false
"
destroyAfterEncode
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
31
"
height
"
:
32
"
mipLevelCount
"
:
7
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
4
"
arrayLayerCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
100
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
31
"
mipLevelCount
"
:
7
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
8
"
mipLevelCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
3
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
bgra8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_valid_to_destroy_a_texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
4
"
mipLevelCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_mipLevelCount
=
{
"
width
"
:
32
"
height
"
:
32
"
mipLevelCount
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rg16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
depth32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_valid_to_destroy_a_destroyed_texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgb10a2unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
depth24plus
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba8unorm
-
srgb
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
depth24plus
-
stencil8
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
validation_of_sampleCount
=
{
"
sampleCount
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode
=
{
"
destroyBeforeEncode
"
:
true
"
destroyAfterEncode
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
rgba8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format
=
{
"
format
"
:
"
r16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createTexture
:
it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode
=
{
"
destroyBeforeEncode
"
:
false
"
destroyAfterEncode
"
:
true
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setBindGroup
:
]
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
512
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
1024
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
1024
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
512
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
512
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
512
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
0
\
]
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
passed
+
but
+
not
+
expected
/
compute
+
pass
=
{
"
type
"
:
"
renderbundle
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
1024
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
1
2
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
512
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
1024
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
0
\
]
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
passed
+
but
+
not
+
expected
/
compute
+
pass
=
{
"
type
"
:
"
renderpass
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
0
\
]
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
512
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
1024
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
1
2
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
1024
0
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
1
2
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
passed
+
but
+
not
+
expected
/
compute
+
pass
=
{
"
type
"
:
"
compute
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic
+
offsets
+
match
+
expectations
+
in
+
pass
+
encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_passed_but_not_expected
/
compute_pass
=
{
"
type
"
:
"
renderbundle
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
1024
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
512
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
1
2
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_passed_but_not_expected
/
compute_pass
=
{
"
type
"
:
"
renderpass
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
1024
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
1
2
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
512
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
1
2
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
256
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
1024
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
1024
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
512
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
1024
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
0
512
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
256
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
0
1024
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderpass
"
"
dynamicOffsets
"
:
[
512
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
512
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
compute
"
"
dynamicOffsets
"
:
[
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
9007199254740991
0
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_passed_but_not_expected
/
compute_pass
=
{
"
type
"
:
"
compute
"
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
0
9007199254740991
\
]
}
]
expected
:
FAIL
[
cts
:
validation
/
setBindGroup
:
dynamic_offsets_match_expectations_in_pass_encoder
=
{
"
type
"
:
"
renderbundle
"
"
dynamicOffsets
"
:
[
256
0
0
\
]
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
render_pass_descriptor
:
]
[
cts
:
validation
/
render_pass_descriptor
:
OOB
+
color
+
attachment
+
indices
+
are
+
handled
=
{
"
colorAttachmentsCount
"
:
4
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
use
+
of
+
multisampled
+
attachment
+
and
+
non
+
multisampled
+
resolve
+
target
+
is
+
allowed
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
layer
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
arrayLayerCount
"
:
5
"
baseArrayLayer
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
a
+
render
+
pass
+
with
+
only
+
one
+
depth
+
attachment
+
is
+
ok
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
depth
+
stencil
+
attachment
+
sample
+
counts
+
mismatch
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
attachments
+
must
+
have
+
the
+
same
+
size
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
the
+
use
+
of
+
multisampled
+
textures
+
as
+
color
+
attachments
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
use
+
a
+
resolve
+
target
+
in
+
error
+
state
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
layer
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
9
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
mip
+
level
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
mip
+
level
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
3
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
use
+
a
+
resolve
+
target
+
whose
+
usage
+
is
+
not
+
output
+
attachment
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
size
+
of
+
the
+
resolve
+
target
+
must
+
be
+
the
+
same
+
as
+
the
+
color
+
attachment
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
use
+
a
+
resolve
+
target
+
with
+
mipmap
+
level
+
count
+
greater
+
than
+
1
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
OOB
+
color
+
attachment
+
indices
+
are
+
handled
=
{
"
colorAttachmentsCount
"
:
5
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
use
+
a
+
multisampled
+
resolve
+
target
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
use
+
a
+
resolve
+
target
+
in
+
a
+
format
+
different
+
than
+
the
+
attachment
+
is
+
not
+
allowed
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
mip
+
level
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check
+
layer
+
count
+
for
+
color
+
or
+
depth
+
stencil
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
a
+
render
+
pass
+
with
+
only
+
one
+
color
+
is
+
ok
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
set
+
resolve
+
target
+
if
+
color
+
attachment
+
is
+
non
+
multisampled
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
attachments
+
must
+
match
+
whether
+
they
+
are
+
used
+
for
+
color
+
or
+
depth
+
stencil
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it
+
is
+
invalid
+
to
+
use
+
a
+
resolve
+
target
+
with
+
array
+
layer
+
count
+
greater
+
than
+
1
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_layer_count_for_color_or_depth_stencil
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
OOB_color_attachment_indices_are_handled
=
{
"
colorAttachmentsCount
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_use_a_resolve_target_whose_usage_is_not_output_attachment
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_mip_level_count_for_color_or_depth_stencil
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
3
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
a_render_pass_with_only_one_depth_attachment_is_ok
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_use_a_resolve_target_with_array_layer_count_greater_than_1
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
attachments_must_have_the_same_size
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
a_render_pass_with_only_one_color_is_ok
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_use_a_resolve_target_in_error_state
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_layer_count_for_color_or_depth_stencil
=
{
"
arrayLayerCount
"
:
5
"
baseArrayLayer
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_mip_level_count_for_color_or_depth_stencil
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
size_of_the_resolve_target_must_be_the_same_as_the_color_attachment
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
use_a_resolve_target_in_a_format_different_than_the_attachment_is_not_allowed
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
attachments_must_match_whether_they_are_used_for_color_or_depth_stencil
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_mip_level_count_for_color_or_depth_stencil
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_depth_stencil_attachment_sample_counts_mismatch
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
OOB_color_attachment_indices_are_handled
=
{
"
colorAttachmentsCount
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_set_resolve_target_if_color_attachment_is_non_multisampled
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
use_of_multisampled_attachment_and_non_multisampled_resolve_target_is_allowed
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_layer_count_for_color_or_depth_stencil
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
9
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_use_a_multisampled_resolve_target
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
it_is_invalid_to_use_a_resolve_target_with_mipmap_level_count_greater_than_1
=
]
expected
:
FAIL
[
cts
:
validation
/
render_pass_descriptor
:
check_the_use_of_multisampled_textures_as_color_attachments
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
fences
:
]
[
cts
:
validation
/
fences
:
signal
+
a
+
value
+
equal
+
to
+
signaled
+
value
+
is
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal
+
a
+
fence
+
on
+
a
+
different
+
device
+
does
+
not
+
update
+
fence
+
signaled
+
value
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
wait
+
on
+
a
+
fence
+
without
+
signaling
+
the
+
value
+
is
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
increasing
+
fence
+
value
+
by
+
more
+
than
+
1
+
succeeds
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal
+
a
+
value
+
lower
+
than
+
signaled
+
value
+
is
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
wait
+
on
+
a
+
fence
+
with
+
a
+
value
+
greater
+
than
+
signaled
+
value
+
is
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal
+
a
+
fence
+
on
+
a
+
different
+
device
+
than
+
it
+
was
+
created
+
on
+
is
+
invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
wait_on_a_fence_without_signaling_the_value_is_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
wait_on_a_fence_with_a_value_greater_than_signaled_value_is_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
increasing_fence_value_by_more_than_1_succeeds
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal_a_fence_on_a_different_device_than_it_was_created_on_is_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal_a_value_lower_than_signaled_value_is_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal_a_value_equal_to_signaled_value_is_invalid
=
]
expected
:
FAIL
[
cts
:
validation
/
fences
:
signal_a_fence_on_a_different_device_does_not_update_fence_signaled_value
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createBindGroupLayout
:
]
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
storage
-
buffer
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
Visibility
+
of
+
bindings
+
can
+
be
+
0
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
uniform
-
buffer
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
storage
-
texture
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
readonly
-
storage
-
buffer
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
sampler
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
some
+
binding
+
index
+
was
+
specified
+
more
+
than
+
once
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
number
+
of
+
dynamic
+
buffers
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
uniform
-
buffer
"
"
maxDynamicBufferCount
"
:
8
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
number
+
of
+
dynamic
+
buffers
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
storage
-
buffer
"
"
maxDynamicBufferCount
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic
+
set
+
to
+
true
+
is
+
allowed
+
only
+
for
+
buffers
=
{
"
type
"
:
"
sampled
-
texture
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
negative
+
binding
+
index
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
some_binding_index_was_specified_more_than_once
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
readonly
-
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
sampled
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
number_of_dynamic_buffers_exceeds_the_maximum_value
=
{
"
type
"
:
"
uniform
-
buffer
"
"
maxDynamicBufferCount
"
:
8
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
negative_binding_index
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
sampler
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
Visibility_of_bindings_can_be_0
=
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
storage
-
texture
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
dynamic_set_to_true_is_allowed_only_for_buffers
=
{
"
type
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createBindGroupLayout
:
number_of_dynamic_buffers_exceeds_the_maximum_value
=
{
"
type
"
:
"
storage
-
buffer
"
"
maxDynamicBufferCount
"
:
4
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setVertexBuffer
:
]
[
cts
:
validation
/
setVertexBuffer
:
vertex
+
buffers
+
inherit
+
from
+
previous
+
pipeline
=
]
expected
:
FAIL
[
cts
:
validation
/
setVertexBuffer
:
vertex
+
buffers
+
do
+
not
+
inherit
+
between
+
render
+
passes
=
]
expected
:
FAIL
[
cts
:
validation
/
setVertexBuffer
:
vertex_buffers_inherit_from_previous_pipeline
=
]
expected
:
FAIL
[
cts
:
validation
/
setVertexBuffer
:
vertex_buffers_do_not_inherit_between_render_passes
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setStencilReference
:
]
[
cts
:
validation
/
setStencilReference
:
use
+
of
+
setStencilReference
=
{
"
reference
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
setStencilReference
:
use
+
of
+
setStencilReference
=
{
"
reference
"
:
4294967295
}
]
expected
:
FAIL
[
cts
:
validation
/
setStencilReference
:
use_of_setStencilReference
=
{
"
reference
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
setStencilReference
:
use_of_setStencilReference
=
{
"
reference
"
:
4294967295
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createView
:
]
[
cts
:
validation
/
createView
:
test
+
the
+
format
+
compatibility
+
rules
+
when
+
creating
+
a
+
texture
+
view
=
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
6
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
12
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
2
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
arrayLayerCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
arrayLayerCount
"
:
2
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
5
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
dimension
"
:
"
2d
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
dimension
"
:
"
2d
-
array
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
5
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
6
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
dimension
"
:
"
2d
-
array
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
format
"
:
"
rgba8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
2
"
baseArrayLayer
"
:
5
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
7
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
6
"
baseArrayLayer
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
dimension
"
:
"
2d
-
array
"
"
arrayLayerCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
format
"
:
"
r8unorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
6
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
+
with
+
a
+
non
+
square
+
texture
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
12
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
3
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
6
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
13
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
dimension
"
:
"
2d
"
"
arrayLayerCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
11
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
mipLevelCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
mipLevelCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
format
"
:
"
rgba8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
6
"
dimension
"
:
"
2d
-
array
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
only
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
6
"
baseMipLevel
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
format
"
:
"
r8unorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
5
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
7
"
baseMipLevel
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
0
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
arrayLayerCount
"
:
6
"
dimension
"
:
"
2d
-
array
"
"
mipLevelCount
"
:
6
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
5
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
12
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
cube
+
map
+
texture
+
view
+
with
+
a
+
non
+
square
+
texture
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
it
+
is
+
invalid
+
to
+
use
+
a
+
texture
+
view
+
created
+
from
+
a
+
destroyed
+
texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
6
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using
+
defaults
+
validates
+
the
+
same
+
as
+
setting
+
values
+
for
+
more
+
than
+
1
+
array
+
layer
=
{
"
dimension
"
:
"
2d
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
non
+
array
+
texture
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
4
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating
+
texture
+
view
+
on
+
a
+
2D
+
array
+
texture
=
{
"
arrayLayerCount
"
:
7
"
baseArrayLayer
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
13
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
arrayLayerCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
dimension
"
:
"
2d
"
"
arrayLayerCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
dimension
"
:
"
2d
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
3
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
arrayLayerCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view_with_a_non_square_texture
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
12
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
dimension
"
:
"
2d
-
array
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
7
"
baseMipLevel
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
7
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
format
"
:
"
rgba8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
mipLevelCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
it_is_invalid_to_use_a_texture_view_created_from_a_destroyed_texture
=
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
12
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
arrayLayerCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
6
"
baseMipLevel
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
1
"
baseArrayLayer
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
-
array
"
"
arrayLayerCount
"
:
11
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
7
"
baseArrayLayer
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
arrayLayerCount
"
:
6
"
dimension
"
:
"
2d
-
array
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
dimension
"
:
"
2d
-
array
"
"
arrayLayerCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
12
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
arrayLayerCount
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
format
"
:
"
rgba8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
dimension
"
:
"
2d
-
array
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
mipLevelCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
2
"
baseArrayLayer
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
format
"
:
"
r8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
1
"
baseMipLevel
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
arrayLayerCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
0
"
baseArrayLayer
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
test_the_format_compatibility_rules_when_creating_a_texture_view
=
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view_with_a_non_square_texture
=
{
"
dimension
"
:
"
cube
"
"
arrayLayerCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
5
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_cube_map_texture_view
=
{
"
dimension
"
:
"
cube
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
dimension
"
:
"
2d
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
2
"
baseMipLevel
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer
=
{
"
arrayLayerCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
arrayLayerCount
"
:
6
"
dimension
"
:
"
2d
-
array
"
"
mipLevelCount
"
:
6
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer
=
{
"
format
"
:
"
r8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_non_array_texture
=
{
"
mipLevelCount
"
:
0
"
baseMipLevel
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createView
:
creating_texture_view_on_a_2D_array_texture
=
{
"
arrayLayerCount
"
:
6
"
baseArrayLayer
"
:
1
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setScissorRect
:
]
[
cts
:
validation
/
setScissorRect
:
use
+
of
+
setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use
+
of
+
setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use
+
of
+
setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
17
"
height
"
:
17
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use
+
of
+
setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use
+
of
+
setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use_of_setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
17
"
height
"
:
17
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use_of_setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use_of_setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
0
"
height
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use_of_setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
setScissorRect
:
use_of_setScissorRect
=
{
"
x
"
:
0
"
y
"
:
0
"
width
"
:
1
"
height
"
:
1
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createRenderPipeline
:
]
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg11b10float
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
0
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
basic
+
use
+
of
+
createRenderPipeline
=
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba32float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
3
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
at
+
least
+
one
+
color
+
state
+
is
+
required
=
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
16
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
bgra8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
equal
+
to
+
the
+
one
+
of
+
every
+
attachment
+
in
+
the
+
render
+
pass
=
{
"
attachmentSamples
"
:
4
"
pipelineSamples
"
:
4
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg32sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
equal
+
to
+
the
+
one
+
of
+
every
+
attachment
+
in
+
the
+
render
+
pass
=
{
"
attachmentSamples
"
:
4
"
pipelineSamples
"
:
1
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
4
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg16sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
equal
+
to
+
the
+
one
+
of
+
every
+
attachment
+
in
+
the
+
render
+
pass
=
{
"
attachmentSamples
"
:
1
"
pipelineSamples
"
:
4
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
2
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
bgra8unorm
-
srgb
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
8
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba8unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba8unorm
-
srgb
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba16uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample
+
count
+
must
+
be
+
valid
=
{
"
sampleCount
"
:
1
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r8sint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
r16float
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba8uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgb10a2unorm
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba32uint
"
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rg8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color
+
formats
+
must
+
be
+
renderable
=
{
"
format
"
:
"
rgba8snorm
"
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
at_least_one_color_state_is_required
=
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_equal_to_the_one_of_every_attachment_in_the_render_pass
=
{
"
attachmentSamples
"
:
4
"
pipelineSamples
"
:
1
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
3
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgb10a2unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
depth24plus
-
stencil8
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
depth24plus
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg11b10float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
bgra8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r16float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
0
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba32uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r8sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
bgra8unorm
-
srgb
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
8
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_equal_to_the_one_of_every_attachment_in_the_render_pass
=
{
"
attachmentSamples
"
:
1
"
pipelineSamples
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg32sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
depth32float
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r8uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
r8snorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
2
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_equal_to_the_one_of_every_attachment_in_the_render_pass
=
{
"
attachmentSamples
"
:
4
"
pipelineSamples
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba8unorm
-
srgb
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba16sint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rg8unorm
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
color_formats_must_be_renderable
=
{
"
format
"
:
"
rgba16uint
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
basic_use_of_createRenderPipeline
=
]
expected
:
FAIL
[
cts
:
validation
/
createRenderPipeline
:
sample_count_must_be_valid
=
{
"
sampleCount
"
:
16
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
createPipelineLayout
:
]
[
cts
:
validation
/
createPipelineLayout
:
number
+
of
+
dynamic
+
buffers
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
storage
-
buffer
"
"
maxDynamicBufferCount
"
:
4
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number
+
of
+
dynamic
+
buffers
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
uniform
-
buffer
"
"
maxDynamicBufferCount
"
:
8
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number
+
of
+
bind
+
group
+
layouts
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number
+
of
+
bind
+
group
+
layouts
+
exceeds
+
the
+
maximum
+
value
=
{
"
type
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number_of_dynamic_buffers_exceeds_the_maximum_value
=
{
"
type
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number_of_dynamic_buffers_exceeds_the_maximum_value
=
{
"
type
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number_of_bind_group_layouts_exceeds_the_maximum_value
=
{
"
type
"
:
"
uniform
-
buffer
"
}
]
expected
:
FAIL
[
cts
:
validation
/
createPipelineLayout
:
number_of_bind_group_layouts_exceeds_the_maximum_value
=
{
"
type
"
:
"
storage
-
buffer
"
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
command_buffer
/
render
/
storeop
:
]
[
cts
:
command_buffer
/
render
/
storeop
:
storeOp
+
controls
+
whether
+
1x1
+
drawn
+
quad
+
is
+
stored
=
{
"
storeOp
"
:
"
clear
"
"
expected
"
:
0
}
]
expected
:
FAIL
[
cts
:
command_buffer
/
render
/
storeop
:
storeOp
+
controls
+
whether
+
1x1
+
drawn
+
quad
+
is
+
stored
=
{
"
storeOp
"
:
"
store
"
"
expected
"
:
255
}
]
expected
:
FAIL
[
cts
:
command_buffer
/
render
/
storeop
:
storeOp_controls_whether_1x1_drawn_quad_is_stored
=
{
"
storeOp
"
:
"
store
"
}
]
expected
:
FAIL
[
cts
:
command_buffer
/
render
/
storeop
:
storeOp_controls_whether_1x1_drawn_quad_is_stored
=
{
"
storeOp
"
:
"
clear
"
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
render_pass
:
]
[
cts
:
validation
/
render_pass
:
it
+
is
+
invalid
+
to
+
draw
+
in
+
a
+
render
+
pass
+
with
+
missing
+
bind
+
groups
=
{
"
setBindGroup1
"
:
false
"
setBindGroup2
"
:
true
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it
+
is
+
invalid
+
to
+
draw
+
in
+
a
+
render
+
pass
+
with
+
missing
+
bind
+
groups
=
{
"
setBindGroup1
"
:
true
"
setBindGroup2
"
:
false
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it
+
is
+
invalid
+
to
+
draw
+
in
+
a
+
render
+
pass
+
with
+
missing
+
bind
+
groups
=
{
"
setBindGroup1
"
:
false
"
setBindGroup2
"
:
false
"
success
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it
+
is
+
invalid
+
to
+
draw
+
in
+
a
+
render
+
pass
+
with
+
missing
+
bind
+
groups
=
{
"
setBindGroup1
"
:
true
"
setBindGroup2
"
:
true
"
success
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it_is_invalid_to_draw_in_a_render_pass_with_missing_bind_groups
=
{
"
setBindGroup1
"
:
true
"
setBindGroup2
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it_is_invalid_to_draw_in_a_render_pass_with_missing_bind_groups
=
{
"
setBindGroup1
"
:
false
"
setBindGroup2
"
:
false
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it_is_invalid_to_draw_in_a_render_pass_with_missing_bind_groups
=
{
"
setBindGroup1
"
:
false
"
setBindGroup2
"
:
true
}
]
expected
:
FAIL
[
cts
:
validation
/
render_pass
:
it_is_invalid_to_draw_in_a_render_pass_with_missing_bind_groups
=
{
"
setBindGroup1
"
:
true
"
setBindGroup2
"
:
false
}
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
queue_submit
:
]
[
cts
:
validation
/
queue_submit
:
submitting
+
with
+
a
+
mapped
+
buffer
+
is
+
disallowed
=
]
expected
:
FAIL
[
cts
:
validation
/
queue_submit
:
submitting_with_a_mapped_buffer_is_disallowed
=
]
expected
:
FAIL
[
cts
.
html
?
q
=
cts
:
validation
/
setBlendColor
:
]
[
cts
:
validation
/
setBlendColor
:
basic
+
use
+
of
+
setBlendColor
=
]
expected
:
FAIL
[
cts
:
validation
/
setBlendColor
:
setBlendColor
+
allows
+
any
+
number
+
value
=
]
expected
:
FAIL
[
cts
:
validation
/
setBlendColor
:
basic_use_of_setBlendColor
=
]
expected
:
FAIL
[
cts
:
validation
/
setBlendColor
:
setBlendColor_allows_any_number_value
=
]
expected
:
FAIL
