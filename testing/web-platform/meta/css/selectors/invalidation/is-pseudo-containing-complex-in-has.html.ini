[
is
-
pseudo
-
containing
-
complex
-
in
-
has
.
html
]
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
has_scope
.
classList
.
add
(
'
red
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
parent
.
classList
.
add
(
'
a
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
parent
.
classList
.
add
(
'
a
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
parent
.
classList
.
remove
(
'
a
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
has_scope
.
classList
.
add
(
'
a
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
has_scope
.
classList
.
add
(
'
a
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
a
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
child
.
classList
.
add
(
'
a
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
child
.
classList
.
add
(
'
a
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
child
.
classList
.
remove
(
'
a
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
red
:
has
(
#
descendant
:
is
(
.
a
.
b
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
red
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
has_scope
.
classList
.
add
(
'
green
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
parent_previous
.
classList
.
add
(
'
c
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
parent_previous
.
classList
.
add
(
'
c
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
parent_previous
.
classList
.
remove
(
'
c
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
previous
.
classList
.
add
(
'
c
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
previous
.
classList
.
add
(
'
c
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
previous
.
classList
.
remove
(
'
c
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
child_previous
.
classList
.
add
(
'
c
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
child_previous
.
classList
.
add
(
'
c
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
child_previous
.
classList
.
remove
(
'
c
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
green
:
has
(
#
descendant
:
is
(
.
c
~
.
d
.
e
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
green
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
has_scope
.
classList
.
add
(
'
blue
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
previous
.
classList
.
add
(
'
f
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
previous
.
classList
.
add
(
'
f
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
previous
.
classList
.
remove
(
'
f
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
has_scope
.
classList
.
add
(
'
f
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
has_scope
.
classList
.
add
(
'
f
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
f
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
direct_next
.
classList
.
add
(
'
f
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
direct_next
.
classList
.
add
(
'
f
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
direct_next
.
classList
.
remove
(
'
f
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
blue
:
has
(
~
#
indirect_next
:
is
(
.
f
~
.
g
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
blue
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
yellow
:
has
(
~
#
indirect_next
:
is
(
.
h
.
i
)
)
\
]
#
has_scope
.
classList
.
add
(
'
yellow
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
yellow
:
has
(
~
#
indirect_next
:
is
(
.
h
.
i
)
)
\
]
#
parent
.
classList
.
add
(
'
h
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
yellow
:
has
(
~
#
indirect_next
:
is
(
.
h
.
i
)
)
\
]
#
parent
.
classList
.
add
(
'
h
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
yellow
:
has
(
~
#
indirect_next
:
is
(
.
h
.
i
)
)
\
]
#
parent
.
classList
.
remove
(
'
h
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
yellow
:
has
(
~
#
indirect_next
:
is
(
.
h
.
i
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
yellow
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
purple
:
has
(
~
#
indirect_next
:
is
(
.
j
~
.
k
.
l
)
)
\
]
#
has_scope
.
classList
.
add
(
'
purple
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
purple
:
has
(
~
#
indirect_next
:
is
(
.
j
~
.
k
.
l
)
)
\
]
#
parent_previous
.
classList
.
add
(
'
j
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
purple
:
has
(
~
#
indirect_next
:
is
(
.
j
~
.
k
.
l
)
)
\
]
#
parent_previous
.
classList
.
add
(
'
j
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
purple
:
has
(
~
#
indirect_next
:
is
(
.
j
~
.
k
.
l
)
)
\
]
#
parent_previous
.
classList
.
remove
(
'
j
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
purple
:
has
(
~
#
indirect_next
:
is
(
.
j
~
.
k
.
l
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
purple
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
add
(
'
orange
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
add
(
'
m
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
add
(
'
m
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
remove
(
'
m
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
add
(
'
n
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
add
(
'
n
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
parent
.
classList
.
remove
(
'
n
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
add
(
'
m
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
add
(
'
m
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
m
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
add
(
'
n
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
add
(
'
n
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
n
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
add
(
'
m
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
add
(
'
m
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
remove
(
'
m
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
add
(
'
n
'
)
:
check
matches
(
true
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
add
(
'
n
'
)
:
check
#
has_scope
color
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
child
.
classList
.
remove
(
'
n
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
[
[
.
orange
:
has
(
#
descendant
:
is
(
:
is
(
.
m
.
n
)
.
o
)
)
\
]
#
has_scope
.
classList
.
remove
(
'
orange
'
)
:
check
matches
(
false
)
]
expected
:
FAIL
