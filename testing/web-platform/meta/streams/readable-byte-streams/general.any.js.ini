[
general
.
any
.
worker
.
html
]
[
ReadableStream
with
byte
source
can
be
constructed
with
no
errors
]
expected
:
if
not
domstreams
:
FAIL
[
getReader
(
{
mode
}
)
must
perform
ToString
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
and
expect
start
and
pull
being
called
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
No
automatic
pull
call
if
start
doesn
'
t
finish
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
start
(
)
throws
an
exception
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
with
highWaterMark
of
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
errored
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
with
mode
set
to
byob
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
releaseLock
(
)
on
ReadableStreamDefaultReader
with
pending
read
(
)
must
throw
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Mix
of
auto
allocate
and
BYOB
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Push
source
that
doesn
'
t
understand
pull
signal
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
pull
(
)
function
is
not
callable
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
with
Uint16Array
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
read
(
view
)
partially
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
enqueue
(
)
close
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
close
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
asynchronously
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
multiple
pull
(
)
by
separate
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respondWithNewView
(
)
with
a
transferred
ArrayBuffer
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
with
too
big
value
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respond
(
3
)
to
read
(
view
)
with
2
element
Uint16Array
enqueues
the
1
byte
remainder
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
not
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
read
(
view
)
then
cancel
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
cancel
(
)
with
partially
filled
pending
pull
(
)
request
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
where
view
.
buffer
is
not
fully
covered
by
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
a
bigger
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
smaller
views
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
1
byte
getReader
(
)
then
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
3
byte
getReader
(
)
then
read
(
view
)
with
2
-
element
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint16Array
on
close
(
)
-
d
stream
with
1
byte
enqueue
(
)
-
d
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
A
stream
must
be
errored
if
close
(
)
-
d
before
fulfilling
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
if
close
(
)
-
ed
more
than
once
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
on
enqueue
(
)
after
close
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
and
close
(
)
in
pull
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
respond
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
enqueue
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
twice
then
enqueue
(
)
twice
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
close
(
)
and
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
big
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
and
multiple
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
undefined
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
an
empty
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Even
read
(
view
)
with
passing
ArrayBufferView
like
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respondWithNewView
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
0
)
twice
on
the
same
byobRequest
should
throw
even
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
should
throw
when
canceled
]
expected
:
if
not
domstreams
:
FAIL
[
pull
(
)
resolving
should
not
make
releaseLock
(
)
possible
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
default
reader
+
autoAllocateChunkSize
+
byobRequest
interaction
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
cannot
be
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
can
be
constructed
directly
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
argument
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
an
unlocked
ReadableStream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
with
type
"
bytes
"
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
smaller
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
non
-
zero
-
length
view
(
in
the
readable
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
discards
auto
-
allocated
BYOB
request
]
expected
:
if
not
domstreams
:
FAIL
[
general
.
any
.
html
]
[
ReadableStream
with
byte
source
can
be
constructed
with
no
errors
]
expected
:
if
not
domstreams
:
FAIL
[
getReader
(
{
mode
}
)
must
perform
ToString
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
and
expect
start
and
pull
being
called
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
No
automatic
pull
call
if
start
doesn
'
t
finish
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
start
(
)
throws
an
exception
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
with
highWaterMark
of
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
errored
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
with
mode
set
to
byob
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
releaseLock
(
)
on
ReadableStreamDefaultReader
with
pending
read
(
)
must
throw
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Mix
of
auto
allocate
and
BYOB
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Push
source
that
doesn
'
t
understand
pull
signal
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
pull
(
)
function
is
not
callable
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
with
Uint16Array
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
read
(
view
)
partially
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
enqueue
(
)
close
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
close
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
asynchronously
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
multiple
pull
(
)
by
separate
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respondWithNewView
(
)
with
a
transferred
ArrayBuffer
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
with
too
big
value
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respond
(
3
)
to
read
(
view
)
with
2
element
Uint16Array
enqueues
the
1
byte
remainder
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
not
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
read
(
view
)
then
cancel
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
cancel
(
)
with
partially
filled
pending
pull
(
)
request
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
where
view
.
buffer
is
not
fully
covered
by
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
a
bigger
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
smaller
views
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
1
byte
getReader
(
)
then
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
3
byte
getReader
(
)
then
read
(
view
)
with
2
-
element
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint16Array
on
close
(
)
-
d
stream
with
1
byte
enqueue
(
)
-
d
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
A
stream
must
be
errored
if
close
(
)
-
d
before
fulfilling
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
if
close
(
)
-
ed
more
than
once
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
on
enqueue
(
)
after
close
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
and
close
(
)
in
pull
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
respond
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
enqueue
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
twice
then
enqueue
(
)
twice
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
close
(
)
and
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
big
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
and
multiple
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
undefined
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
an
empty
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Even
read
(
view
)
with
passing
ArrayBufferView
like
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respondWithNewView
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
0
)
twice
on
the
same
byobRequest
should
throw
even
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
should
throw
when
canceled
]
expected
:
if
not
domstreams
:
FAIL
[
pull
(
)
resolving
should
not
make
releaseLock
(
)
possible
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
default
reader
+
autoAllocateChunkSize
+
byobRequest
interaction
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
cannot
be
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
can
be
constructed
directly
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
argument
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
an
unlocked
ReadableStream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
with
type
"
bytes
"
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
smaller
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
non
-
zero
-
length
view
(
in
the
readable
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
discards
auto
-
allocated
BYOB
request
]
expected
:
if
not
domstreams
:
FAIL
[
general
.
any
.
sharedworker
.
html
]
[
ReadableStream
with
byte
source
can
be
constructed
with
no
errors
]
expected
:
if
not
domstreams
:
FAIL
[
getReader
(
{
mode
}
)
must
perform
ToString
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
and
expect
start
and
pull
being
called
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
No
automatic
pull
call
if
start
doesn
'
t
finish
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
start
(
)
throws
an
exception
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
with
highWaterMark
of
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
errored
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
with
mode
set
to
byob
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
releaseLock
(
)
on
ReadableStreamDefaultReader
with
pending
read
(
)
must
throw
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Mix
of
auto
allocate
and
BYOB
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Push
source
that
doesn
'
t
understand
pull
signal
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
pull
(
)
function
is
not
callable
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
with
Uint16Array
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
read
(
view
)
partially
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
enqueue
(
)
close
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
close
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
asynchronously
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
multiple
pull
(
)
by
separate
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respondWithNewView
(
)
with
a
transferred
ArrayBuffer
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
with
too
big
value
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respond
(
3
)
to
read
(
view
)
with
2
element
Uint16Array
enqueues
the
1
byte
remainder
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
not
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
read
(
view
)
then
cancel
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
cancel
(
)
with
partially
filled
pending
pull
(
)
request
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
where
view
.
buffer
is
not
fully
covered
by
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
a
bigger
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
smaller
views
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
1
byte
getReader
(
)
then
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
3
byte
getReader
(
)
then
read
(
view
)
with
2
-
element
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint16Array
on
close
(
)
-
d
stream
with
1
byte
enqueue
(
)
-
d
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
A
stream
must
be
errored
if
close
(
)
-
d
before
fulfilling
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
if
close
(
)
-
ed
more
than
once
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
on
enqueue
(
)
after
close
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
and
close
(
)
in
pull
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
respond
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
enqueue
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
twice
then
enqueue
(
)
twice
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
close
(
)
and
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
big
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
and
multiple
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
undefined
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
an
empty
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Even
read
(
view
)
with
passing
ArrayBufferView
like
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respondWithNewView
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
0
)
twice
on
the
same
byobRequest
should
throw
even
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
should
throw
when
canceled
]
expected
:
if
not
domstreams
:
FAIL
[
pull
(
)
resolving
should
not
make
releaseLock
(
)
possible
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
default
reader
+
autoAllocateChunkSize
+
byobRequest
interaction
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
cannot
be
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
can
be
constructed
directly
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
argument
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
an
unlocked
ReadableStream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
with
type
"
bytes
"
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
smaller
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
non
-
zero
-
length
view
(
in
the
readable
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
discards
auto
-
allocated
BYOB
request
]
expected
:
if
not
domstreams
:
FAIL
[
general
.
any
.
serviceworker
.
html
]
[
ReadableStream
with
byte
source
can
be
constructed
with
no
errors
]
expected
:
if
not
domstreams
:
FAIL
[
getReader
(
{
mode
}
)
must
perform
ToString
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
and
expect
start
and
pull
being
called
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
No
automatic
pull
call
if
start
doesn
'
t
finish
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
start
(
)
throws
an
exception
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Construct
with
highWaterMark
of
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
desiredSize
when
errored
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
with
mode
set
to
byob
then
releaseLock
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
closing
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Test
that
erroring
a
stream
does
not
release
a
BYOB
reader
automatically
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
releaseLock
(
)
on
ReadableStreamDefaultReader
with
pending
read
(
)
must
throw
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Mix
of
auto
allocate
and
BYOB
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Automatic
pull
(
)
after
start
(
)
and
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Push
source
that
doesn
'
t
understand
pull
signal
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
pull
(
)
function
is
not
callable
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
with
Uint16Array
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
read
(
view
)
partially
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
enqueue
(
)
close
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
close
(
)
getReader
(
)
then
read
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
pull
(
)
by
enqueue
(
)
asynchronously
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Respond
to
multiple
pull
(
)
by
separate
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respondWithNewView
(
)
with
a
transferred
ArrayBuffer
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
with
too
big
value
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respond
(
3
)
to
read
(
view
)
with
2
element
Uint16Array
enqueues
the
1
byte
remainder
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
not
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
cancel
(
)
(
mode
=
BYOB
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
getReader
(
)
read
(
view
)
then
cancel
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
cancel
(
)
with
partially
filled
pending
pull
(
)
request
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
where
view
.
buffer
is
not
fully
covered
by
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
enqueue
(
)
getReader
(
)
then
read
(
view
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
a
bigger
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
getReader
(
)
then
read
(
view
)
with
smaller
views
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
1
byte
getReader
(
)
then
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
3
byte
getReader
(
)
then
read
(
view
)
with
2
-
element
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint16Array
on
close
(
)
-
d
stream
with
1
byte
enqueue
(
)
-
d
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
A
stream
must
be
errored
if
close
(
)
-
d
before
fulfilling
read
(
view
)
with
Uint16Array
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
if
close
(
)
-
ed
more
than
once
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throw
on
enqueue
(
)
after
close
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
respond
(
)
and
close
(
)
in
pull
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
respond
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
Uint32Array
then
fill
it
by
multiple
enqueue
(
)
calls
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
twice
then
enqueue
(
)
twice
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
close
(
)
and
respond
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
big
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Multiple
read
(
view
)
and
multiple
enqueue
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
undefined
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
with
passing
an
empty
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Even
read
(
view
)
with
passing
ArrayBufferView
like
object
as
view
must
fail
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
on
an
errored
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
read
(
view
)
then
error
(
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
function
must
error
the
stream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
Throwing
in
pull
in
response
to
read
(
view
)
must
be
ignored
if
the
stream
is
errored
in
it
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respondWithNewView
(
)
twice
on
the
same
byobRequest
should
throw
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
0
)
twice
on
the
same
byobRequest
should
throw
even
when
closed
]
expected
:
if
not
domstreams
:
FAIL
[
calling
respond
(
)
should
throw
when
canceled
]
expected
:
if
not
domstreams
:
FAIL
[
pull
(
)
resolving
should
not
make
releaseLock
(
)
possible
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
default
reader
+
autoAllocateChunkSize
+
byobRequest
interaction
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
autoAllocateChunkSize
cannot
be
0
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
can
be
constructed
directly
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
argument
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
an
unlocked
ReadableStream
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStreamBYOBReader
constructor
requires
a
ReadableStream
with
type
"
bytes
"
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
smaller
view
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
non
-
zero
-
length
view
(
in
the
readable
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
respondWithNewView
(
)
with
a
transferred
zero
-
length
view
(
in
the
closed
state
)
]
expected
:
if
not
domstreams
:
FAIL
[
ReadableStream
with
byte
source
:
enqueue
(
)
discards
auto
-
allocated
BYOB
request
]
expected
:
if
not
domstreams
:
FAIL
