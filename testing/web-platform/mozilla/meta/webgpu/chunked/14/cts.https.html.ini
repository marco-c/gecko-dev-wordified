[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxUniformBufferBindingSize
:
validate
maxBufferSize
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxUniformBuffersPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxUniformBuffersPerShaderStage
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxUniformBuffersPerShaderStage
:
createPipelineLayout
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexAttributes
:
createRenderPipeline
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexBufferArrayStride
:
createRenderPipeline
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexBufferArrayStride
:
validate
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexBuffers
:
createRenderPipeline
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pipelineType
=
"
withoutLocations
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexBuffers
:
setVertexBuffer
at_over
:
*
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
CRASH
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxVertexBuffers
:
validate
maxBindGroupsPlusVertexBuffers
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minStorageBufferOffsetAlignment
:
createBindGroup
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minStorageBufferOffsetAlignment
:
setBindGroup
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minStorageBufferOffsetAlignment
:
validate
greaterThanOrEqualTo32
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minStorageBufferOffsetAlignment
:
validate
powerOf2
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minUniformBufferOffsetAlignment
:
createBindGroup
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minUniformBufferOffsetAlignment
:
setBindGroup
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overDefault
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underMinimum
"
;
testValueName
=
"
underLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minUniformBufferOffsetAlignment
:
validate
greaterThanOrEqualTo32
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
minUniformBufferOffsetAlignment
:
validate
powerOf2
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
basic
:
*
]
[
:
isAsync
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
limits
invocations_per_workgroup
:
*
]
[
:
isAsync
=
false
;
size
=
[
1
8
32
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
size
=
[
1
8
33
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
size
=
[
128
1
2
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
size
=
[
129
1
2
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
size
=
[
2
128
1
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
size
=
[
2
129
1
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
1
8
32
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
1
8
33
\
]
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
128
1
2
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
129
1
2
\
]
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
2
128
1
\
]
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
size
=
[
2
129
1
\
]
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
limits
workgroup_storage_size
:
*
]
[
:
isAsync
=
false
;
type
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
type
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
pipeline_layout
device_mismatch
:
*
]
[
:
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
shader_module
compute
:
*
]
[
:
isAsync
=
false
;
shaderModuleStage
=
"
compute
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
shaderModuleStage
=
"
fragment
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
false
;
shaderModuleStage
=
"
vertex
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
shaderModuleStage
=
"
compute
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
shaderModuleStage
=
"
fragment
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
;
shaderModuleStage
=
"
vertex
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
shader_module
device_mismatch
:
*
]
[
:
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
compute_pipeline
:
shader_module
invalid
:
*
]
[
:
isAsync
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
isAsync
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
