[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxDynamicUniformBuffersPerPipelineLayout
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxInterStageShaderComponents
:
createRenderPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxInterStageShaderVariables
:
createRenderPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createPipelineLayout
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSamplersPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSamplersPerShaderStage
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSamplersPerShaderStage
:
createPipelineLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBufferBindingSize
:
createBindGroup
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBufferBindingSize
:
validate
maxBufferSize
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBufferBindingSize
:
validate
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBuffersPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBuffersPerShaderStage
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
ERROR
]
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageBuffersPerShaderStage
:
createPipelineLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
read
-
only
-
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
type
=
"
storage
"
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageTexturesPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageTexturesPerShaderStage
:
createPipeline
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxStorageTexturesPerShaderStage
:
createPipelineLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureArrayLayers
:
createTexture
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureDimension1D
:
createTexture
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureDimension2D
:
configure
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureDimension2D
:
createTexture
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureDimension2D
:
getCurrentTexture
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
offscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
canvasType
=
"
onscreen
"
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxTextureDimension3D
:
createTexture
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxUniformBufferBindingSize
:
createBindGroup
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
biggerBufferWithOffset
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
bufferPart
=
"
wholeBuffer
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
