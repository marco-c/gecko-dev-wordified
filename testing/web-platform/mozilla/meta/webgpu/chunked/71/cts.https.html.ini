[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
literal
:
f16
:
*
]
[
:
val
=
"
-
1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
0
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
12
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
12f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
1e
-
2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
1h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0
.
0
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0
.
0f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
00012
.
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0X
.
3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0X1
.
fp
-
4
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x
.
3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x1
.
0p
%
2B999999h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x1P
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x3
.
2p
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x3p
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xE
.
fp
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xEp
-
2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xa
.
fP
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xa
.
fp
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xep2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
0e
%
2B999999h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1E
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1e
!
2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1e
%
2Bh
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1e2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1eh
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2E2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2e
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2e2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
12
.
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
12
.
223f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
12
.
f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1e
-
4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1i
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1u
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
e
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
literal
:
f32
:
*
]
[
:
val
=
"
-
1
"
]
expected
:
FAIL
[
:
val
=
"
.
0
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
12
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
12f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
1e
-
2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
1h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
.
e
-
2
"
]
expected
:
FAIL
[
:
val
=
"
.
f
"
]
expected
:
FAIL
[
:
val
=
"
0
.
0
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0
.
0f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
00012
.
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0X
.
3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0X1
.
fp
-
4
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x
.
3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x
.
p2
"
]
expected
:
FAIL
[
:
val
=
"
0x1
.
00000001pf0
"
]
expected
:
FAIL
[
:
val
=
"
0x1
.
0p
%
2B999999999999f
"
]
expected
:
FAIL
[
:
val
=
"
0x1P
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x1p
"
]
expected
:
FAIL
[
:
val
=
"
0x1p
%
5E
"
]
expected
:
FAIL
[
:
val
=
"
0x3
.
2p
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0x3p
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xE
.
fp
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xEp
-
2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xa
.
fP
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xa
.
fp
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
0xep2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
"
]
expected
:
FAIL
[
:
val
=
"
1
.
0e
%
2B999999999999f
"
]
expected
:
FAIL
[
:
val
=
"
1
.
1E
%
2B2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
1e2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2E2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2e
%
2B2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
2e2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1
.
e
%
262f
"
]
expected
:
FAIL
[
:
val
=
"
1
.
e
%
2Bf
"
]
expected
:
FAIL
[
:
val
=
"
1
.
ef
"
]
expected
:
FAIL
[
:
val
=
"
12
.
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
12
.
223f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
12
.
f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1e
-
4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
1i
"
]
expected
:
FAIL
[
:
val
=
"
1u
"
]
expected
:
FAIL
[
:
val
=
"
2
.
4e
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
4e
-
2h
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
2
.
e
%
2B4f
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
must_use
:
builtin_must_use
:
*
]
[
:
call
=
"
abs
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
abs
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
acos
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
acos
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
acosh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
acosh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
all
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
all
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
any
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
any
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
arrayLength
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
arrayLength
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
asin
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
asin
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
asinh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
asinh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
atan
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atan
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
atan2
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atan2
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
atanh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atanh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
bitcast
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
bitcast
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
ceil
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
ceil
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
clamp
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
clamp
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
cos
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
cos
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
cosh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
cosh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
countLeadingZeros
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
countLeadingZeros
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
countOneBits
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
countOneBits
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
countTrailingZeros
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
countTrailingZeros
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
cross
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
cross
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
degrees
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
degrees
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
determinant
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
determinant
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
distance
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
distance
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dot
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dot
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdx
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdx
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdxCoarse
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdxCoarse
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdxFine
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdxFine
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdy
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdy
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdyCoarse
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdyCoarse
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
dpdyFine
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
dpdyFine
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
exp
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
exp
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
exp2
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
exp2
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
extractBits
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
extractBits
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
faceForward
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
faceForward
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
firstLeadingBit
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
firstLeadingBit
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
firstTrailingBit
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
firstTrailingBit
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
floor
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
floor
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
fma
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
fma
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
fract
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
fract
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
frexp
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
frexp
"
;
use
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
fwidth
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
fwidth
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
fwidthCoarse
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
fwidthCoarse
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
fwidthFine
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
fwidthFine
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
i32
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
i32
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
insertBits
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
insertBits
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
inverseSqrt
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
inverseSqrt
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
ldexp
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
ldexp
"
;
use
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
length
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
length
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
log
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
log
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
log2
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
log2
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
max
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
max
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
min
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
min
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
mix
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
mix
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
modf
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
modf
"
;
use
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
FAIL
]
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
normalize
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
normalize
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pack2x16float
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pack2x16float
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pack2x16snorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pack2x16snorm
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pack2x16unorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pack2x16unorm
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pack4x8snorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pack4x8snorm
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pack4x8unorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pack4x8unorm
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
pow
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
pow
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
quantizeToF16
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
quantizeToF16
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
radians
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
radians
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
reflect
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
reflect
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
refract
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
refract
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
reverseBits
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
reverseBits
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
round
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
round
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
saturate
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
saturate
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
select
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
select
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
sign
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
sign
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
sin
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
sin
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
sinh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
sinh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
smoothstep
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
smoothstep
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
sqrt
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
sqrt
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
step
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
step
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
struct
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
struct
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
tan
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
tan
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
tanh
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
tanh
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureDimensions
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureDimensions
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureGather
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureGather
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureGatherCompare
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureGatherCompare
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureLoad
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureLoad
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureNumLayers
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureNumLayers
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureNumLevels
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureNumLevels
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureNumSamples
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureNumSamples
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
textureSample
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSample
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleBaseClampToEdge
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleBaseClampToEdge
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleBias
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleBias
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleCompare
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleCompare
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleCompareLevel
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleCompareLevel
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleGrad
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleGrad
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
textureSampleLevel
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
textureSampleLevel
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
transpose
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
transpose
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
trunc
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
trunc
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
u32
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
u32
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
unpack2x16float
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
unpack2x16float
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
unpack2x16snorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
unpack2x16snorm
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
unpack2x16unorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
unpack2x16unorm
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
unpack4x8snorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
unpack4x8snorm
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
unpack4x8unorm
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
unpack4x8unorm
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
workgroupUniformLoad
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
workgroupUniformLoad
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
must_use
:
builtin_no_must_use
:
*
]
[
:
call
=
"
atomicAdd
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicAdd
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicAnd
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicAnd
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicCompareExchangeWeak
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicCompareExchangeWeak
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicExchange
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicExchange
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicLoad
"
;
use
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
atomicLoad
"
;
use
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
call
=
"
atomicMax
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicMax
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicMin
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicMin
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicOr
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicOr
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicSub
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicSub
"
;
use
=
true
]
expected
:
FAIL
[
:
call
=
"
atomicXor
"
;
use
=
false
]
expected
:
FAIL
[
:
call
=
"
atomicXor
"
;
use
=
true
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
must_use
:
call
:
*
]
[
:
use
=
"
"
;
call
=
"
condition
"
]
expected
:
FAIL
[
:
use
=
"
"
;
call
=
"
let
"
]
expected
:
FAIL
[
:
use
=
"
"
;
call
=
"
param
"
]
expected
:
FAIL
[
:
use
=
"
"
;
call
=
"
phony
"
]
expected
:
FAIL
[
:
use
=
"
"
;
call
=
"
statement
"
]
expected
:
FAIL
[
:
use
=
"
"
;
call
=
"
var
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
condition
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
let
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
param
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
phony
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
statement
"
]
expected
:
FAIL
[
:
use
=
"
%
40must_use
"
;
call
=
"
var
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
must_use
:
declaration
:
*
]
[
:
test
=
"
empty_parameter
"
]
expected
:
FAIL
[
:
test
=
"
function_call
"
]
expected
:
FAIL
[
:
test
=
"
function_no_return
"
]
expected
:
FAIL
[
:
test
=
"
function_parameter
"
]
expected
:
FAIL
[
:
test
=
"
function_scalar_return
"
]
expected
:
FAIL
[
:
test
=
"
function_struct_return
"
]
expected
:
FAIL
[
:
test
=
"
function_var
"
]
expected
:
FAIL
[
:
test
=
"
parameter
"
]
expected
:
FAIL
[
:
test
=
"
var
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
compute_parsing
:
*
]
[
:
val
=
"
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
2F
%
5Ecomment
%
5E
%
2Fcompute
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
5Ctcompute
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40compute
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40compute
%
20
)
"
]
expected
:
FAIL
[
:
val
=
"
%
40compute
(
"
]
expected
:
FAIL
[
:
val
=
"
%
40compute
(
)
"
]
expected
:
FAIL
[
:
val
=
"
%
40mcompute
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
duplicate_compute_on_function
:
*
]
[
:
dupe
=
"
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
dupe
=
"
%
40compute
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
duplicate_fragment_on_function
:
*
]
[
:
dupe
=
"
"
]
expected
:
FAIL
[
:
dupe
=
"
%
40fragment
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
duplicate_vertex_on_function
:
*
]
[
:
dupe
=
"
"
]
expected
:
FAIL
[
:
dupe
=
"
%
40vertex
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
fragment_parsing
:
*
]
[
:
val
=
"
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
2F
%
5Ecomment
%
5E
%
2Ffragment
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
5Ctfragment
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40fragment
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40fragment
%
20
)
"
]
expected
:
FAIL
[
:
val
=
"
%
40fragment
(
"
]
expected
:
FAIL
[
:
val
=
"
%
40fragment
(
)
"
]
expected
:
FAIL
[
:
val
=
"
%
40mfragment
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
multiple_entry_points
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
placement
:
*
]
[
:
scope
=
"
_undef_
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
_undef_
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
_undef_
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
param
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
param
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
param
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
return
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
return
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
return
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
var
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
var
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
fn
-
var
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
private
-
var
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
private
-
var
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
private
-
var
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
storage
-
var
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
storage
-
var
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
storage
-
var
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
struct
-
member
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
struct
-
member
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
struct
-
member
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
:
scope
=
"
while
-
stmt
"
;
attr
=
"
%
40compute
"
]
expected
:
FAIL
[
:
scope
=
"
while
-
stmt
"
;
attr
=
"
%
40fragment
"
]
expected
:
FAIL
[
:
scope
=
"
while
-
stmt
"
;
attr
=
"
%
40vertex
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
pipeline_stage
:
vertex_parsing
:
*
]
[
:
val
=
"
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
2F
%
5Ecomment
%
5E
%
2Fvertex
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40
%
5Ctvertex
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40mvertex
"
]
expected
:
FAIL
[
:
val
=
"
%
40vertex
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
val
=
"
%
40vertex
%
20
)
"
]
expected
:
FAIL
[
:
val
=
"
%
40vertex
(
"
]
expected
:
FAIL
[
:
val
=
"
%
40vertex
(
)
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_call
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_enable
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_fn_const_decl
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_func_decl
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_member
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_module_const_decl
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_return
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_struct_decl
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
after_type_alias_decl
:
*
]
[
:
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
module_scope_multiple
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
parse
semicolon
:
module_scope_single
:
*
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
