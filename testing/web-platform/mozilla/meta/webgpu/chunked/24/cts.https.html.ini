[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
render_pass_descriptor
:
timestampWrites
query_set_type
:
*
]
[
:
queryTypeA
=
"
occlusion
"
;
queryTypeB
=
"
occlusion
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryTypeA
=
"
occlusion
"
;
queryTypeB
=
"
timestamp
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryTypeA
=
"
timestamp
"
;
queryTypeB
=
"
occlusion
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryTypeA
=
"
timestamp
"
;
queryTypeB
=
"
timestamp
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
stencil_write
:
*
]
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
frontPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backDepthFailOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
zero
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
replace
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
invert
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
clamp
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
increment
-
wrap
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
faceAndOpType
=
"
backPassOp
"
;
op
=
"
decrement
-
wrap
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
color_target_exists
:
*
]
[
:
isAsync
=
false
]
expected
:
FAIL
[
:
isAsync
=
true
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
format
:
*
]
[
:
isAsync
=
false
;
format
=
"
r8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
bgra8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
bgra8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgb10a2unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgb10a2unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg11b10ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgb9e5ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc1
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc1
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc2
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc2
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc3
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc3
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc4
-
r
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc4
-
r
-
snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc5
-
rg
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc5
-
rg
-
snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc6h
-
rgb
-
ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc6h
-
rgb
-
float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc7
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc7
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
pipeline_output_targets
blend
:
*
]
[
:
isAsync
=
false
;
format
=
"
r8unorm
"
;
componentCount
=
1
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8unorm
"
;
componentCount
=
1
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8unorm
"
;
componentCount
=
1
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
"
;
componentCount
=
1
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
"
;
componentCount
=
1
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
"
;
componentCount
=
2
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
"
;
componentCount
=
3
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
resolve
:
resolve_attachment
:
*
]
#
TODO
:
Currently
has
issues
being
followed
up
with
;
see
<
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1836479
>
.
disabled
:
true
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
targets_format_filterable
:
*
]
[
:
isAsync
=
true
;
format
=
"
r8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32float
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
stencil_test
:
*
]
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
front
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
;
face
=
"
back
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
front
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
;
face
=
"
back
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
front
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
;
face
=
"
back
"
;
compare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
targets_format_renderable
:
*
]
[
:
isAsync
=
true
;
format
=
"
r8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg11b10ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgb9e5ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth16unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth24plus
-
stencil8
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
depth32float
-
stencil8
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
isAsync
=
true
;
format
=
"
bc1
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc1
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc2
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc2
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc3
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc3
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc4
-
r
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc4
-
r
-
snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc5
-
rg
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc5
-
rg
-
snorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc6h
-
rgb
-
ufloat
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc6h
-
rgb
-
float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc7
-
rgba
-
unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bc7
-
rgba
-
unorm
-
srgb
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
inter_stage
:
location
superset
:
*
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
inter_stage
:
location
mismatch
:
*
]
[
:
isAsync
=
true
;
outputs
=
[
"
%
40location
(
0
)
%
20__
:
%
20f32
"
\
]
;
inputs
=
[
"
%
40location
(
1
)
%
20__
:
%
20f32
"
\
]
]
expected
:
FAIL
[
:
isAsync
=
true
;
outputs
=
[
"
%
40location
(
1
)
%
20__
:
%
20f32
"
\
]
;
inputs
=
[
"
%
40location
(
0
)
%
20__
:
%
20f32
"
\
]
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
render_pass_descriptor
:
occlusionQuerySet
query_set_type
:
*
]
[
:
queryType
=
"
occlusion
"
]
expected
:
FAIL
[
:
queryType
=
"
timestamp
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
render_pass_descriptor
:
timestamp_writes_location
:
*
]
[
:
locationA
=
"
beginning
"
;
locationB
=
"
beginning
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
locationA
=
"
beginning
"
;
locationB
=
"
end
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
locationA
=
"
end
"
;
locationB
=
"
beginning
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
locationA
=
"
end
"
;
locationB
=
"
end
"
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
limits
maxColorAttachmentBytesPerSample
aligned
:
*
]
[
:
format
=
"
rgba8unorm
"
]
expected
:
FAIL
[
:
format
=
"
rgba8unorm
-
srgb
"
]
expected
:
FAIL
[
:
format
=
"
bgra8unorm
"
]
expected
:
FAIL
[
:
format
=
"
bgra8unorm
-
srgb
"
]
expected
:
FAIL
[
:
format
=
"
rgb10a2unorm
"
]
expected
:
FAIL
[
:
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
format
=
"
rgba16float
"
]
expected
:
FAIL
[
:
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
format
=
"
rgba32float
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
depth_write
frag_depth
:
*
]
[
:
isAsync
=
false
;
format
=
"
_undef_
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
_undef_
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
render_pass_descriptor
:
timestampWrite
same_query_index
:
*
]
[
:
queryIndexA
=
0
;
queryIndexB
=
0
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndexA
=
0
;
queryIndexB
=
1
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndexA
=
1
;
queryIndexB
=
0
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndexA
=
1
;
queryIndexB
=
1
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
limits
maxColorAttachments
:
*
]
[
:
isAsync
=
true
;
targetsLength
=
9
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
depth_test
:
*
]
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
never
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
less
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
less
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
greater
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
not
-
equal
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthCompare
=
"
greater
-
equal
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
depth_stencil_state
:
depth_write
:
*
]
[
:
isAsync
=
true
;
format
=
"
stencil8
"
;
depthWriteEnabled
=
true
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
targets_blend
:
*
]
#
TODO
:
Currently
has
issues
being
followed
up
with
;
see
<
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1836479
>
.
disabled
:
true
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
render_pass_descriptor
:
timestampWrite
query_index
:
*
]
[
:
queryIndex
=
0
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndex
=
1
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndex
=
2
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
:
queryIndex
=
3
]
expected
:
if
os
=
=
"
mac
"
:
PASS
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
pipeline_output_targets
:
*
]
[
:
isAsync
=
false
;
format
=
"
r8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
r32float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba8sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
bgra8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
bgra8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgb10a2unorm
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba16float
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
isAsync
=
false
;
format
=
"
rgba32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
r32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba8sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
bgra8unorm
-
srgb
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgb10a2unorm
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rg32float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba16float
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32uint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32sint
"
]
expected
:
FAIL
[
:
isAsync
=
true
;
format
=
"
rgba32float
"
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
limits
maxColorAttachmentBytesPerSample
unaligned
:
*
]
[
:
formats
=
[
"
r32float
"
"
rgba8unorm
"
"
rgba32float
"
"
r8unorm
"
"
r8unorm
"
\
]
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pipeline
fragment_state
:
targets_write_mask
:
*
]
[
:
isAsync
=
true
;
writeMask
=
16
]
expected
:
FAIL
[
:
isAsync
=
true
;
writeMask
=
2147483649
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
render_pass
storeOp
:
store_op_and_read_only
:
*
]
[
:
readonly
=
true
;
depthStoreOp
=
"
discard
"
]
expected
:
FAIL
[
:
readonly
=
true
;
stencilStoreOp
=
"
discard
"
]
expected
:
FAIL
[
:
readonly
=
false
;
depthReadOnly
=
true
]
expected
:
FAIL
[
:
readonly
=
false
;
stencilReadOnly
=
true
]
expected
:
FAIL
[
:
readonly
=
"
_undef_
"
;
depthReadOnly
=
true
]
expected
:
FAIL
[
:
readonly
=
"
_undef_
"
;
stencilReadOnly
=
true
]
expected
:
FAIL
