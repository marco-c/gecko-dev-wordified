[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindingsPerBindGroup
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
mac
"
:
OK
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
TIMEOUT
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertex
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
fragment
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleVertexStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
vertexAndFragmentWithPossibleFragmentStageOverflow
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
forward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
backward
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
sameGroup
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
bindingCombination
=
"
compute
"
;
order
=
"
shiftByHalf
"
;
bindGroupTest
=
"
differentGroups
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBufferSize
:
createBuffer
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createPipelineLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
FAIL
]
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
FAIL
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachmentBytesPerSample
:
beginRenderPass
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeWorkgroupSizeY
:
createComputePipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindingsPerBindGroup
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeWorkgroupsPerDimension
:
dispatchWorkgroups
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipeline
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
0
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
pipelineType
=
"
createComputePipelineAsync
"
;
axis
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachments
:
createRenderPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxDynamicUniformBuffersPerPipelineLayout
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
PASS
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindingsPerBindGroup
:
validate
:
*
]
expected
:
if
os
=
=
"
mac
"
:
OK
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
OK
]
[
OK
TIMEOUT
]
[
:
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
FAIL
NOTRUN
]
[
FAIL
TIMEOUT
NOTRUN
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachments
:
validate
maxColorAttachmentBytesPerSample
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeWorkgroupStorageSize
:
createComputePipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
:
TIMEOUT
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
PASS
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
PASS
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
FAIL
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f16
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat2x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat3x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
mat4x4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S1
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S2
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
wgslType
=
"
S3
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxDynamicStorageBuffersPerPipelineLayout
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
win
"
and
debug
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeWorkgroupSizeZ
:
createComputePipeline
at_over
:
*
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxInterStageShaderComponents
:
createRenderPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
OK
]
if
os
=
=
"
linux
"
:
TIMEOUT
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
FAIL
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
FAIL
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
linux
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
PASS
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
TIMEOUT
]
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
PASS
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
[
NOTRUN
TIMEOUT
]
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
false
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
false
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
false
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
false
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
pointList
=
true
;
frontFacing
=
true
;
sampleIndex
=
true
;
sampleMaskIn
=
true
;
sampleMaskOut
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachments
:
beginRenderPass
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachmentBytesPerSample
:
createRenderBundle
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
not
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxInterStageShaderVariables
:
createRenderPipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
PASS
TIMEOUT
NOTRUN
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSamplersPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachments
:
createRenderBundle
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeInvocationsPerWorkgroup
:
createComputePipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxColorAttachmentBytesPerSample
:
createRenderPipeline
at_over
:
*
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
debug
and
os
=
=
"
win
"
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
1
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg16float
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rgba8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
rg8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
;
sampleCount
=
4
;
interleaveFormat
=
"
r8unorm
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
PASS
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
NOTRUN
TIMEOUT
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxSampledTexturesPerShaderStage
:
createBindGroupLayout
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
[
PASS
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
mac
"
:
FAIL
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
TIMEOUT
FAIL
NOTRUN
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
NOTRUN
FAIL
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
win
"
and
debug
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
1
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
2
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
3
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
4
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
5
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
6
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
forward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
backward
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
visibility
=
7
;
order
=
"
shiftByHalf
"
]
expected
:
if
os
=
=
"
win
"
:
[
NOTRUN
TIMEOUT
]
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxComputeWorkgroupSizeX
:
createComputePipeline
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
OK
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
OK
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
[
PASS
NOTRUN
TIMEOUT
]
[
FAIL
TIMEOUT
NOTRUN
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
async
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
if
os
=
=
"
linux
"
:
PASS
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
[
NOTRUN
PASS
TIMEOUT
]
