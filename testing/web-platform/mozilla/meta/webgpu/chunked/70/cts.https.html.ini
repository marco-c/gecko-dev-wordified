[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
log2
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
log2
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
log
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
log
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
modf
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
modf
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
radians
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
radians
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
round
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
round
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
saturate
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
saturate
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sign
:
unsigned_integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sign
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sin
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sin
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sinh
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sinh
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sqrt
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
sqrt
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
tan
:
integer_argument
:
*
]
[
:
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
i32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
u32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec2
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec3
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Ci32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
type
=
"
vec4
%
3Cu32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
expression
call
builtin
tan
:
values
:
*
]
[
:
stage
=
"
constant
"
;
type
=
"
abstract
-
float
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cabstract
-
float
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
constant
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f16
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
f32
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec2
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec3
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf16
%
3E
"
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
stage
=
"
override
"
;
type
=
"
vec4
%
3Cf32
%
3E
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
functions
alias_analysis
:
one_pointer_one_module_scope
:
*
]
[
:
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
functions
alias_analysis
:
subcalls
:
*
]
[
:
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
validation
functions
alias_analysis
:
two_pointers
:
*
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
[
FAIL
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
linux
"
and
not
debug
:
[
PASS
TIMEOUT
NOTRUN
]
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
FAIL
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
function
"
;
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
and
not
debug
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
assign
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
binary_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
bitcast
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
builtin_arg
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_lhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
compound_assign_rhs
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
convert
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
increment
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
index_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
let_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
no_access
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
return
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
switch_cond
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
unary_minus
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
assign
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
binary_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
bitcast
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
builtin_arg
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_lhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
compound_assign_rhs
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
convert
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
increment
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
index_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
let_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
no_access
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
return
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
switch_cond
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
unary_minus
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
false
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
[
:
address_space
=
"
private
"
;
a_use
=
"
var_init
"
;
b_use
=
"
var_init
"
;
aliased
=
true
]
expected
:
if
os
=
=
"
mac
"
:
FAIL
