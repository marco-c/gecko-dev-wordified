[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindGroups
:
createPipeline
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createComputePipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipeline
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
false
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
if
os
=
=
"
win
"
and
not
debug
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
createPipelineType
=
"
createRenderPipelineWithFragmentStage
"
;
async
=
true
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindGroups
:
createPipelineLayout
at_over
:
*
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
]
expected
:
if
os
=
=
"
win
"
and
debug
:
[
PASS
FAIL
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindGroups
:
setBindGroup
at_over
:
*
]
expected
:
if
os
=
=
"
win
"
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
mac
"
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
FAIL
if
os
=
=
"
linux
"
and
not
debug
:
FAIL
if
os
=
=
"
mac
"
:
FAIL
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
TIMEOUT
if
os
=
=
"
linux
"
and
not
debug
:
TIMEOUT
if
os
=
=
"
mac
"
:
TIMEOUT
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
atMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
betweenDefaultAndMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
overMaximum
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
atLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
compute
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
render
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
:
limitTest
=
"
underDefault
"
;
testValueName
=
"
overLimit
"
;
encoderType
=
"
renderBundle
"
]
expected
:
if
os
=
=
"
win
"
:
NOTRUN
if
os
=
=
"
linux
"
and
not
debug
:
NOTRUN
if
os
=
=
"
mac
"
:
NOTRUN
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
capability_checks
limits
maxBindGroups
:
validate
maxBindGroupsPlusVertexBuffers
:
*
]
[
:
]
