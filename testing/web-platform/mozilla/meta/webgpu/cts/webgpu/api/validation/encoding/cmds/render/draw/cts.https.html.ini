[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
buffer_binding_overlap
:
*
]
[
:
drawType
=
"
draw
"
]
[
:
drawType
=
"
drawIndexed
"
]
[
:
drawType
=
"
drawIndexedIndirect
"
]
[
:
drawType
=
"
drawIndirect
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
index_buffer_OOB
:
*
]
[
:
bufferSizeInElements
=
100
;
bindingSizeInElements
=
10
;
drawIndexCount
=
10
;
drawType
=
"
drawIndexed
"
]
[
:
bufferSizeInElements
=
100
;
bindingSizeInElements
=
10
;
drawIndexCount
=
10
;
drawType
=
"
drawIndexedIndirect
"
]
[
:
bufferSizeInElements
=
100
;
bindingSizeInElements
=
10
;
drawIndexCount
=
11
;
drawType
=
"
drawIndexed
"
]
[
:
bufferSizeInElements
=
100
;
bindingSizeInElements
=
10
;
drawIndexCount
=
11
;
drawType
=
"
drawIndexedIndirect
"
]
[
:
bufferSizeInElements
=
10
;
bindingSizeInElements
=
10
;
drawIndexCount
=
10
;
drawType
=
"
drawIndexed
"
]
[
:
bufferSizeInElements
=
10
;
bindingSizeInElements
=
10
;
drawIndexCount
=
10
;
drawType
=
"
drawIndexedIndirect
"
]
[
:
bufferSizeInElements
=
10
;
bindingSizeInElements
=
10
;
drawIndexCount
=
11
;
drawType
=
"
drawIndexed
"
]
[
:
bufferSizeInElements
=
10
;
bindingSizeInElements
=
10
;
drawIndexCount
=
11
;
drawType
=
"
drawIndexedIndirect
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
last_buffer_setting_take_account
:
*
]
[
:
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
max_draw_count
:
*
]
implementation
-
status
:
backlog
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
false
;
maxDrawCount
=
0
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
false
;
maxDrawCount
=
1
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
false
;
maxDrawCount
=
16
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
false
;
maxDrawCount
=
4
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
true
;
maxDrawCount
=
0
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
true
;
maxDrawCount
=
1
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
true
;
maxDrawCount
=
16
]
expected
:
FAIL
[
:
bundleFirstHalf
=
false
;
bundleSecondHalf
=
true
;
maxDrawCount
=
4
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
false
;
maxDrawCount
=
0
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
false
;
maxDrawCount
=
1
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
false
;
maxDrawCount
=
16
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
false
;
maxDrawCount
=
4
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
true
;
maxDrawCount
=
0
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
true
;
maxDrawCount
=
1
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
true
;
maxDrawCount
=
16
]
expected
:
FAIL
[
:
bundleFirstHalf
=
true
;
bundleSecondHalf
=
true
;
maxDrawCount
=
4
]
expected
:
FAIL
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
unused_buffer_bound
:
*
]
implementation
-
status
:
if
os
=
=
"
mac
"
:
backlog
[
:
smallIndexBuffer
=
false
;
smallVertexBuffer
=
false
;
smallInstanceBuffer
=
false
]
[
:
smallIndexBuffer
=
false
;
smallVertexBuffer
=
false
;
smallInstanceBuffer
=
true
]
expected
:
if
os
=
=
"
mac
"
and
debug
:
[
PASS
FAIL
]
[
:
smallIndexBuffer
=
false
;
smallVertexBuffer
=
true
;
smallInstanceBuffer
=
false
]
expected
:
if
os
=
=
"
mac
"
:
[
PASS
FAIL
]
[
:
smallIndexBuffer
=
false
;
smallVertexBuffer
=
true
;
smallInstanceBuffer
=
true
]
expected
:
if
os
=
=
"
mac
"
:
[
PASS
FAIL
]
[
:
smallIndexBuffer
=
true
;
smallVertexBuffer
=
false
;
smallInstanceBuffer
=
false
]
[
:
smallIndexBuffer
=
true
;
smallVertexBuffer
=
false
;
smallInstanceBuffer
=
true
]
[
:
smallIndexBuffer
=
true
;
smallVertexBuffer
=
true
;
smallInstanceBuffer
=
false
]
[
:
smallIndexBuffer
=
true
;
smallVertexBuffer
=
true
;
smallInstanceBuffer
=
true
]
[
cts
.
https
.
html
?
q
=
webgpu
:
api
validation
encoding
cmds
render
draw
:
vertex_buffer_OOB
:
*
]
tags
:
[
webgpu
webgpu
-
long
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
draw
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexed
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndexedIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
oneTooSmall
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
exact
"
;
IBSize
=
"
zero
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
oneTooSmall
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
exact
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
oversize
"
]
[
:
type
=
"
drawIndirect
"
;
VBSize
=
"
zero
"
;
IBSize
=
"
exact
"
;
AStride
=
"
zero
"
]
