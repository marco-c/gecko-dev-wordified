[
cts
.
https
.
html
?
q
=
webgpu
:
compat
api
validation
render_pipeline
shader_module
:
interpolate
:
*
]
implementation
-
status
:
backlog
[
:
interpolate
=
"
"
;
entryPoint
=
"
fsWithInterpolationUsage1
"
]
[
:
interpolate
=
"
"
;
entryPoint
=
"
fsWithInterpolationUsage2
"
]
[
:
interpolate
=
"
"
;
entryPoint
=
"
fsWithInterpolationUsage3
"
]
[
:
interpolate
=
"
"
;
entryPoint
=
"
fsWithoutInterpolationUsage
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
)
"
;
entryPoint
=
"
fsWithInterpolationUsage1
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
)
"
;
entryPoint
=
"
fsWithInterpolationUsage2
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
)
"
;
entryPoint
=
"
fsWithInterpolationUsage3
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
)
"
;
entryPoint
=
"
fsWithoutInterpolationUsage
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage1
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage2
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage3
"
]
[
:
interpolate
=
"
%
40interpolate
(
linear
%
20sample
)
"
;
entryPoint
=
"
fsWithoutInterpolationUsage
"
]
[
:
interpolate
=
"
%
40interpolate
(
perspective
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage1
"
]
[
:
interpolate
=
"
%
40interpolate
(
perspective
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage2
"
]
[
:
interpolate
=
"
%
40interpolate
(
perspective
%
20sample
)
"
;
entryPoint
=
"
fsWithInterpolationUsage3
"
]
[
:
interpolate
=
"
%
40interpolate
(
perspective
%
20sample
)
"
;
entryPoint
=
"
fsWithoutInterpolationUsage
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
compat
api
validation
render_pipeline
shader_module
:
sample_index
:
*
]
implementation
-
status
:
backlog
[
:
entryPoint
=
"
fsWithSampleIndexUsage
"
]
[
:
entryPoint
=
"
fsWithoutSampleIndexUsage
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
compat
api
validation
render_pipeline
shader_module
:
sample_mask
:
*
]
implementation
-
status
:
backlog
[
:
entryPoint
=
"
fsWithSampleMaskUsage
"
]
[
:
entryPoint
=
"
fsWithoutSampleMaskUsage
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
compat
api
validation
render_pipeline
shader_module
:
unsupportedStorageTextureFormats
computePipeline
:
*
]
implementation
-
status
:
backlog
[
:
format
=
"
rg32float
"
;
async
=
false
]
[
:
format
=
"
rg32float
"
;
async
=
true
]
[
:
format
=
"
rg32sint
"
;
async
=
false
]
[
:
format
=
"
rg32sint
"
;
async
=
true
]
[
:
format
=
"
rg32uint
"
;
async
=
false
]
[
:
format
=
"
rg32uint
"
;
async
=
true
]
[
cts
.
https
.
html
?
q
=
webgpu
:
compat
api
validation
render_pipeline
shader_module
:
unsupportedStorageTextureFormats
renderPipeline
:
*
]
implementation
-
status
:
backlog
[
:
format
=
"
rg32float
"
;
async
=
false
]
[
:
format
=
"
rg32float
"
;
async
=
true
]
[
:
format
=
"
rg32sint
"
;
async
=
false
]
[
:
format
=
"
rg32sint
"
;
async
=
true
]
[
:
format
=
"
rg32uint
"
;
async
=
false
]
[
:
format
=
"
rg32uint
"
;
async
=
true
]
