[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
scalar
:
*
]
[
:
inputSource
=
"
const
"
]
[
:
inputSource
=
"
storage_r
"
]
[
:
inputSource
=
"
storage_rw
"
]
[
:
inputSource
=
"
uniform
"
]
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
scalar_compound
:
*
]
implementation
-
status
:
if
os
=
=
"
win
"
:
backlog
[
:
inputSource
=
"
const
"
;
vectorize
=
"
_undef_
"
]
[
:
inputSource
=
"
const
"
;
vectorize
=
2
]
[
:
inputSource
=
"
const
"
;
vectorize
=
3
]
[
:
inputSource
=
"
const
"
;
vectorize
=
4
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
"
_undef_
"
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
2
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
3
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
4
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
"
_undef_
"
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
2
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
3
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
4
]
[
:
inputSource
=
"
uniform
"
;
vectorize
=
"
_undef_
"
]
[
:
inputSource
=
"
uniform
"
;
vectorize
=
2
]
[
:
inputSource
=
"
uniform
"
;
vectorize
=
3
]
expected
:
if
os
=
=
"
win
"
:
FAIL
[
:
inputSource
=
"
uniform
"
;
vectorize
=
4
]
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
scalar_vector
:
*
]
implementation
-
status
:
if
os
=
=
"
win
"
:
backlog
[
:
inputSource
=
"
const
"
;
dim
=
2
]
[
:
inputSource
=
"
const
"
;
dim
=
3
]
[
:
inputSource
=
"
const
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
4
]
[
:
inputSource
=
"
uniform
"
;
dim
=
2
]
expected
:
if
os
=
=
"
win
"
:
FAIL
[
:
inputSource
=
"
uniform
"
;
dim
=
3
]
[
:
inputSource
=
"
uniform
"
;
dim
=
4
]
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
vector
:
*
]
implementation
-
status
:
if
os
=
=
"
win
"
:
backlog
[
:
inputSource
=
"
const
"
;
vectorize
=
2
]
[
:
inputSource
=
"
const
"
;
vectorize
=
3
]
[
:
inputSource
=
"
const
"
;
vectorize
=
4
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
2
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
3
]
[
:
inputSource
=
"
storage_r
"
;
vectorize
=
4
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
2
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
3
]
[
:
inputSource
=
"
storage_rw
"
;
vectorize
=
4
]
[
:
inputSource
=
"
uniform
"
;
vectorize
=
2
]
[
:
inputSource
=
"
uniform
"
;
vectorize
=
3
]
expected
:
if
os
=
=
"
win
"
:
FAIL
[
:
inputSource
=
"
uniform
"
;
vectorize
=
4
]
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
vector_scalar
:
*
]
implementation
-
status
:
if
os
=
=
"
win
"
:
backlog
[
:
inputSource
=
"
const
"
;
dim
=
2
]
[
:
inputSource
=
"
const
"
;
dim
=
3
]
[
:
inputSource
=
"
const
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
4
]
[
:
inputSource
=
"
uniform
"
;
dim
=
2
]
[
:
inputSource
=
"
uniform
"
;
dim
=
3
]
expected
:
if
os
=
=
"
win
"
:
FAIL
[
:
inputSource
=
"
uniform
"
;
dim
=
4
]
[
cts
.
https
.
html
?
q
=
webgpu
:
shader
execution
expression
binary
f16_remainder
:
vector_scalar_compound
:
*
]
implementation
-
status
:
if
os
=
=
"
win
"
:
backlog
[
:
inputSource
=
"
const
"
;
dim
=
2
]
[
:
inputSource
=
"
const
"
;
dim
=
3
]
[
:
inputSource
=
"
const
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_r
"
;
dim
=
4
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
2
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
3
]
[
:
inputSource
=
"
storage_rw
"
;
dim
=
4
]
[
:
inputSource
=
"
uniform
"
;
dim
=
2
]
[
:
inputSource
=
"
uniform
"
;
dim
=
3
]
expected
:
if
os
=
=
"
win
"
:
FAIL
[
:
inputSource
=
"
uniform
"
;
dim
=
4
]
