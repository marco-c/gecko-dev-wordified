dictionary
IdleOptions
{
[
EnforceRange
]
unsigned
long
threshold
;
AbortSignal
signal
;
}
;
[
SecureContext
Exposed
=
(
Window
Worker
)
]
interface
IdleDetector
:
EventTarget
{
constructor
(
)
;
readonly
attribute
IdleState
state
;
attribute
EventHandler
onchange
;
Promise
<
any
>
start
(
optional
IdleOptions
options
=
{
}
)
;
}
;
[
SecureContext
Exposed
=
(
Window
Worker
)
]
interface
IdleState
{
readonly
attribute
UserIdleState
user
;
readonly
attribute
ScreenIdleState
screen
;
}
;
enum
UserIdleState
{
"
active
"
"
idle
"
}
;
enum
ScreenIdleState
{
"
locked
"
"
unlocked
"
}
;
