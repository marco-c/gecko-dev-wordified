-
name
:
2d
.
filter
.
canvasFilterObject
desc
:
Test
CanvasFilter
(
)
object
code
:
|
assert
ctx
.
filter
=
=
'
none
'
;
ctx
.
filter
=
'
blur
(
5px
)
'
;
assert
ctx
.
filter
=
=
'
blur
(
5px
)
'
;
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
{
stdDeviation
:
5
}
}
)
;
assert
ctx
.
filter
.
toString
(
)
=
=
'
[
object
CanvasFilter
]
'
;
ctx
.
filter
=
new
CanvasFilter
(
[
{
blur
:
{
stdDeviation
:
5
}
}
{
blur
:
{
stdDeviation
:
10
}
}
]
)
;
assert
ctx
.
filter
.
toString
(
)
=
=
'
[
object
CanvasFilter
]
'
;
var
canvas2
=
new
OffscreenCanvas
(
100
50
)
;
var
ctx2
=
canvas2
.
getContext
(
'
2d
'
)
;
ctx2
.
filter
=
ctx
.
filter
;
assert
ctx
.
filter
.
toString
(
)
=
=
'
[
object
CanvasFilter
]
'
;
ctx
.
filter
=
'
blur
(
5px
)
'
;
assert
ctx
.
filter
=
=
'
blur
(
5px
)
'
;
ctx
.
filter
=
'
none
'
;
assert
ctx
.
filter
=
=
'
none
'
;
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
{
stdDeviation
:
5
}
}
)
;
ctx
.
filter
=
"
this
string
is
not
a
filter
and
should
do
nothing
"
;
assert
ctx
.
filter
.
toString
(
)
=
=
'
[
object
CanvasFilter
]
'
;
t
.
done
(
)
;
-
name
:
2d
.
filter
.
canvasFilterObject
.
blur
.
exceptions
desc
:
Test
exceptions
on
CanvasFilter
(
)
blur
.
object
code
:
|
assert
throws
TypeError
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
null
}
)
;
assert
throws
TypeError
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
{
}
}
)
;
assert
throws
TypeError
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
{
stdDevation
:
null
}
}
)
;
assert
throws
TypeError
ctx
.
filter
=
new
CanvasFilter
(
{
blur
:
{
stdDeviation
:
"
foo
"
}
}
)
;
t
.
done
(
)
;
