/
/
GENERATED
CONTENT
-
DO
NOT
EDIT
/
/
Content
was
automatically
extracted
by
Reffy
into
reffy
-
reports
/
/
(
https
:
/
/
github
.
com
/
tidoust
/
reffy
-
reports
)
/
/
Source
:
Native
File
System
(
https
:
/
/
wicg
.
github
.
io
/
native
-
file
-
system
/
)
dictionary
FileSystemHandlePermissionDescriptor
{
boolean
writable
=
false
;
}
;
[
Exposed
=
(
Window
Worker
)
SecureContext
Serializable
]
interface
FileSystemHandle
{
readonly
attribute
boolean
isFile
;
readonly
attribute
boolean
isDirectory
;
readonly
attribute
USVString
name
;
Promise
<
boolean
>
isSameEntry
(
FileSystemHandle
other
)
;
Promise
<
PermissionState
>
queryPermission
(
optional
FileSystemHandlePermissionDescriptor
descriptor
=
{
}
)
;
Promise
<
PermissionState
>
requestPermission
(
optional
FileSystemHandlePermissionDescriptor
descriptor
=
{
}
)
;
}
;
dictionary
FileSystemCreateWritableOptions
{
boolean
keepExistingData
=
false
;
}
;
[
Exposed
=
(
Window
Worker
)
SecureContext
Serializable
]
interface
FileSystemFileHandle
:
FileSystemHandle
{
Promise
<
File
>
getFile
(
)
;
Promise
<
FileSystemWritableFileStream
>
createWritable
(
optional
FileSystemCreateWritableOptions
options
=
{
}
)
;
}
;
dictionary
FileSystemGetFileOptions
{
boolean
create
=
false
;
}
;
dictionary
FileSystemGetDirectoryOptions
{
boolean
create
=
false
;
}
;
dictionary
FileSystemRemoveOptions
{
boolean
recursive
=
false
;
}
;
[
Exposed
=
(
Window
Worker
)
SecureContext
Serializable
]
interface
FileSystemDirectoryHandle
:
FileSystemHandle
{
async
iterable
<
USVString
FileSystemHandle
>
;
Promise
<
FileSystemFileHandle
>
getFile
(
USVString
name
optional
FileSystemGetFileOptions
options
=
{
}
)
;
Promise
<
FileSystemDirectoryHandle
>
getDirectory
(
USVString
name
optional
FileSystemGetDirectoryOptions
options
=
{
}
)
;
Promise
<
void
>
removeEntry
(
USVString
name
optional
FileSystemRemoveOptions
options
=
{
}
)
;
Promise
<
sequence
<
USVString
>
?
>
resolve
(
FileSystemHandle
possibleDescendant
)
;
}
;
enum
WriteCommandType
{
"
write
"
"
seek
"
"
truncate
"
}
;
dictionary
WriteParams
{
required
WriteCommandType
type
;
unsigned
long
long
?
size
;
unsigned
long
long
?
position
;
(
BufferSource
or
Blob
or
USVString
)
?
data
;
}
;
typedef
(
BufferSource
or
Blob
or
USVString
or
WriteParams
)
FileSystemWriteChunkType
;
[
Exposed
=
(
Window
Worker
)
SecureContext
]
interface
FileSystemWritableFileStream
:
WritableStream
{
Promise
<
void
>
write
(
FileSystemWriteChunkType
data
)
;
Promise
<
void
>
seek
(
unsigned
long
long
position
)
;
Promise
<
void
>
truncate
(
unsigned
long
long
size
)
;
}
;
enum
ChooseFileSystemEntriesType
{
"
open
-
file
"
"
save
-
file
"
"
open
-
directory
"
}
;
dictionary
ChooseFileSystemEntriesOptionsAccepts
{
USVString
description
;
sequence
<
USVString
>
mimeTypes
;
sequence
<
USVString
>
extensions
;
}
;
dictionary
ChooseFileSystemEntriesOptions
{
ChooseFileSystemEntriesType
type
=
"
open
-
file
"
;
boolean
multiple
=
false
;
sequence
<
ChooseFileSystemEntriesOptionsAccepts
>
accepts
;
boolean
excludeAcceptAllOption
=
false
;
}
;
[
SecureContext
]
partial
interface
Window
{
Promise
<
(
FileSystemHandle
or
sequence
<
FileSystemHandle
>
)
>
chooseFileSystemEntries
(
optional
ChooseFileSystemEntriesOptions
options
=
{
}
)
;
}
;
[
SecureContext
]
partial
interface
mixin
WindowOrWorkerGlobalScope
{
Promise
<
FileSystemDirectoryHandle
>
getOriginPrivateDirectory
(
)
;
}
;
