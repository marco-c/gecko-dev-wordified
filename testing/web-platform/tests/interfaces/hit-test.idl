/
/
GENERATED
CONTENT
-
DO
NOT
EDIT
/
/
Content
was
automatically
extracted
by
Reffy
into
reffy
-
reports
/
/
(
https
:
/
/
github
.
com
/
tidoust
/
reffy
-
reports
)
/
/
Source
:
WebXR
Hit
Test
Module
(
https
:
/
/
immersive
-
web
.
github
.
io
/
hit
-
test
/
)
enum
XRHitTestTrackableType
{
"
point
"
"
plane
"
"
mesh
"
}
;
dictionary
XRHitTestOptionsInit
{
required
XRSpace
space
;
FrozenArray
<
XRHitTestTrackableType
>
entityTypes
;
XRRay
offsetRay
;
}
;
dictionary
XRTransientInputHitTestOptionsInit
{
required
DOMString
profile
;
FrozenArray
<
XRHitTestTrackableType
>
entityTypes
;
XRRay
offsetRay
;
}
;
[
SecureContext
Exposed
=
Window
]
interface
XRHitTestSource
{
void
cancel
(
)
;
}
;
[
SecureContext
Exposed
=
Window
]
interface
XRTransientInputHitTestSource
{
void
cancel
(
)
;
}
;
[
SecureContext
Exposed
=
Window
]
interface
XRHitTestResult
{
XRPose
?
getPose
(
XRSpace
baseSpace
)
;
}
;
[
SecureContext
Exposed
=
Window
]
interface
XRTransientInputHitTestResult
{
[
SameObject
]
readonly
attribute
XRInputSource
inputSource
;
readonly
attribute
FrozenArray
<
XRHitTestResult
>
results
;
}
;
partial
interface
XRSession
{
Promise
<
XRHitTestSource
>
requestHitTestSource
(
XRHitTestOptionsInit
options
)
;
Promise
<
XRTransientInputHitTestSource
>
requestHitTestSourceForTransientInput
(
XRTransientInputHitTestOptionsInit
options
)
;
}
;
partial
interface
XRFrame
{
FrozenArray
<
XRHitTestResult
>
getHitTestResults
(
XRHitTestSource
hitTestSource
)
;
FrozenArray
<
XRTransientInputHitTestResult
>
getHitTestResultsForTransientInput
(
XRTransientInputHitTestSource
hitTestSource
)
;
}
;
[
SecureContext
Exposed
=
Window
Constructor
(
optional
DOMPointInit
origin
optional
DOMPointInit
direction
)
Constructor
(
XRRigidTransform
transform
)
]
interface
XRRay
{
[
SameObject
]
readonly
attribute
DOMPointReadOnly
origin
;
[
SameObject
]
readonly
attribute
DOMPointReadOnly
direction
;
[
SameObject
]
readonly
attribute
Float32Array
matrix
;
}
;
