/
*
*
*
MozillaLogger
a
base
class
logger
that
just
logs
to
stdout
.
*
/
"
use
strict
"
;
/
*
import
-
globals
-
from
SpecialPowers
.
jsm
*
/
function
formatLogMessage
(
msg
)
{
return
msg
.
info
.
join
(
"
"
)
+
"
\
n
"
;
}
class
MozillaLogger
{
get
logCallback
(
)
{
return
(
msg
)
=
>
{
this
.
log
(
formatLogMessage
(
msg
)
)
;
}
;
}
log
(
msg
)
{
dump
(
msg
)
;
}
close
(
)
{
}
}
/
*
*
*
SpecialPowersLogger
inherits
from
MozillaLogger
and
utilizes
SpecialPowers
.
*
intented
to
be
used
in
content
scripts
to
write
to
a
file
*
/
class
SpecialPowersLogger
extends
MozillaLogger
{
constructor
(
aPath
)
{
super
(
)
;
SpecialPowers
.
setLogFile
(
aPath
)
;
}
get
logCallback
(
)
{
return
(
msg
)
=
>
{
var
data
=
formatLogMessage
(
msg
)
;
this
.
log
(
data
)
;
if
(
data
.
includes
(
"
SimpleTest
FINISH
"
)
)
{
this
.
close
(
)
;
}
}
;
}
log
(
msg
)
{
SpecialPowers
.
log
(
msg
)
;
}
close
(
)
{
SpecialPowers
.
closeLogFile
(
)
;
}
}
/
*
*
*
MozillaFileLogger
a
log
listener
that
can
write
to
a
local
file
.
*
intended
to
be
run
from
chrome
space
*
/
/
*
*
Init
the
file
logger
with
the
absolute
path
to
the
file
.
It
will
create
and
append
if
the
file
already
exists
*
*
/
class
MozillaFileLogger
extends
MozillaLogger
{
constructor
(
aPath
)
{
super
(
)
;
const
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
this
.
_file
=
FileUtils
.
File
(
aPath
)
;
this
.
_foStream
=
FileUtils
.
openFileOutputStream
(
this
.
_file
(
FileUtils
.
MODE_WRONLY
|
FileUtils
.
MODE_CREATE
|
FileUtils
.
MODE_APPEND
)
)
;
this
.
_converter
=
Cc
[
"
mozilla
.
org
/
intl
/
converter
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIConverterOutputStream
)
;
this
.
_converter
.
init
(
this
.
_foStream
"
UTF
-
8
"
)
;
}
get
logCallback
(
)
{
return
(
msg
)
=
>
{
if
(
this
.
_converter
)
{
var
data
=
formatLogMessage
(
msg
)
;
this
.
log
(
data
)
;
if
(
data
.
includes
(
"
SimpleTest
FINISH
"
)
)
{
this
.
close
(
)
;
}
}
}
;
}
log
(
msg
)
{
if
(
this
.
_converter
)
{
this
.
_converter
.
writeString
(
msg
)
;
}
}
close
(
)
{
this
.
_converter
.
flush
(
)
;
this
.
_converter
.
close
(
)
;
this
.
_foStream
=
null
;
this
.
_converter
=
null
;
this
.
_file
=
null
;
}
}
this
.
MozillaLogger
=
MozillaLogger
;
this
.
SpecialPowersLogger
=
SpecialPowersLogger
;
this
.
MozillaFileLogger
=
MozillaFileLogger
;
