/
*
*
*
Tests
FormAutofillNameUtils
object
.
*
/
"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillNameUtils
.
jsm
"
)
;
/
/
Test
cases
initially
copied
from
/
/
https
:
/
/
cs
.
chromium
.
org
/
chromium
/
src
/
components
/
autofill
/
core
/
browser
/
autofill_data_util_unittest
.
cc
const
TESTCASES
=
[
{
description
:
"
Full
name
including
given
middle
and
family
names
"
fullName
:
"
Homer
Jay
Simpson
"
nameParts
:
{
given
:
"
Homer
"
middle
:
"
Jay
"
family
:
"
Simpson
"
}
}
{
description
:
"
No
middle
name
"
fullName
:
"
Moe
Szyslak
"
nameParts
:
{
given
:
"
Moe
"
middle
:
"
"
family
:
"
Szyslak
"
}
}
{
description
:
"
Common
name
prefixes
removed
"
fullName
:
"
Reverend
Timothy
Lovejoy
"
nameParts
:
{
given
:
"
Timothy
"
middle
:
"
"
family
:
"
Lovejoy
"
}
expectedFullName
:
"
Timothy
Lovejoy
"
}
{
description
:
"
Common
name
suffixes
removed
"
fullName
:
"
John
Frink
Phd
"
nameParts
:
{
given
:
"
John
"
middle
:
"
"
family
:
"
Frink
"
}
expectedFullName
:
"
John
Frink
"
}
{
description
:
"
Exception
to
the
name
suffix
removal
"
fullName
:
"
John
Ma
"
nameParts
:
{
given
:
"
John
"
middle
:
"
"
family
:
"
Ma
"
}
}
{
description
:
"
Common
family
name
prefixes
not
considered
a
middle
name
"
fullName
:
"
Milhouse
Van
Houten
"
nameParts
:
{
given
:
"
Milhouse
"
middle
:
"
"
family
:
"
Van
Houten
"
}
}
/
/
CJK
names
have
reverse
order
(
surname
goes
first
given
name
goes
second
)
.
{
description
:
"
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Chinese
name
Unihan
\
"
IDEOGRAPHIC
SPACE
\
"
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Japanese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
/
/
In
Japanese
foreign
names
use
'
KATAKANA
MIDDLE
DOT
'
(
U
+
30FB
)
as
a
/
/
separator
.
There
is
no
consensus
for
the
ordering
.
For
now
we
use
the
same
/
/
ordering
as
regular
Japanese
names
(
"
last
first
"
)
.
{
description
:
"
Foreign
name
in
Japanese
Katakana
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
/
/
'
KATAKANA
MIDDLE
DOT
'
is
occasionally
typoed
as
'
MIDDLE
DOT
'
(
U
+
00B7
)
.
{
description
:
"
Foreign
name
in
Japanese
Katakana
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
/
/
CJK
names
don
'
t
usually
have
a
space
in
the
middle
but
most
of
the
time
/
/
the
surname
is
only
one
character
(
in
Chinese
&
Korean
)
.
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Simplified
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Traditional
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
/
/
There
are
a
few
exceptions
.
Occasionally
the
surname
has
two
characters
.
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Traditional
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
/
/
In
Korean
some
2
-
character
surnames
are
rare
/
ambiguous
like
"
"
:
"
"
/
/
is
a
common
surname
and
"
"
can
be
part
of
a
given
name
.
In
those
cases
/
/
we
assume
it
'
s
1
/
2
for
3
-
character
names
or
2
/
2
for
4
-
character
names
.
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
/
/
It
occasionally
happens
that
a
full
name
is
2
characters
1
/
1
.
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
/
/
These
are
no
CJK
names
for
us
they
'
re
just
bogus
.
{
description
:
"
Bogus
"
fullName
:
"
Homer
"
nameParts
:
{
given
:
"
Homer
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Bogus
"
fullName
:
"
Simpson
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
Simpson
"
}
}
{
description
:
"
CJK
has
a
middle
-
name
too
unusual
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
]
;
add_task
(
async
function
test_splitName
(
)
{
TESTCASES
.
forEach
(
testcase
=
>
{
if
(
testcase
.
fullName
)
{
info
(
"
Starting
testcase
:
"
+
testcase
.
description
)
;
let
nameParts
=
FormAutofillNameUtils
.
splitName
(
testcase
.
fullName
)
;
Assert
.
deepEqual
(
nameParts
testcase
.
nameParts
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_joinName
(
)
{
TESTCASES
.
forEach
(
testcase
=
>
{
info
(
"
Starting
testcase
:
"
+
testcase
.
description
)
;
let
name
=
FormAutofillNameUtils
.
joinNameParts
(
testcase
.
nameParts
)
;
Assert
.
equal
(
name
testcase
.
expectedFullName
|
|
testcase
.
fullName
)
;
}
)
;
}
)
;
