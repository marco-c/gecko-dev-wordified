/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
Status
and
progress
indicator
*
*
*
/
#
downloads
-
button
{
-
-
download
-
progress
-
pcent
:
0
%
;
}
#
downloads
-
indicator
-
anchor
{
min
-
width
:
16px
;
min
-
height
:
16px
;
-
moz
-
context
-
properties
:
fill
fill
-
opacity
;
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
downloads
/
downloads
.
svg
"
)
;
}
#
downloads
-
button
[
progress
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
anchor
>
#
downloads
-
indicator
-
icon
#
downloads
-
button
[
animate
]
[
notification
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
anchor
>
#
downloads
-
indicator
-
icon
{
visibility
:
hidden
;
}
#
wrapper
-
downloads
-
button
>
#
downloads
-
button
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
anchor
>
#
downloads
-
indicator
-
icon
{
visibility
:
visible
;
}
#
downloads
-
button
[
attention
=
"
success
"
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
anchor
>
#
downloads
-
indicator
-
icon
{
fill
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
fill
-
opacity
:
1
;
}
#
downloads
-
button
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
animatable
-
box
{
pointer
-
events
:
none
;
-
moz
-
context
-
properties
:
fill
fill
-
opacity
stroke
;
grid
-
area
:
initial
;
top
:
calc
(
50
%
-
10px
)
;
/
*
Vertically
center
the
20px
tall
animatable
image
*
/
left
:
calc
(
50
%
-
10px
)
;
/
*
Horizontally
center
the
20px
wide
animatable
image
*
/
width
:
20px
;
/
*
Width
of
each
frame
within
the
SVG
sprite
*
/
height
:
20px
;
/
*
Height
of
each
frame
within
the
SVG
sprite
*
/
/
*
animation
is
not
directional
and
shouldn
'
t
be
reversed
in
RTL
*
/
direction
:
ltr
;
}
/
*
Hide
progress
and
state
animations
in
customize
mode
*
/
toolbarpaletteitem
>
#
downloads
-
button
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
animatable
-
box
toolbarpaletteitem
>
#
downloads
-
button
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
progress
-
outer
{
display
:
none
;
}
#
downloads
-
indicator
-
start
-
box
>
.
toolbarbutton
-
animatable
-
image
#
downloads
-
indicator
-
finish
-
box
>
.
toolbarbutton
-
animatable
-
image
{
visibility
:
hidden
;
}
/
*
Button
progress
indication
*
/
#
downloads
-
button
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
progress
-
outer
{
visibility
:
hidden
;
top
:
calc
(
50
%
-
9px
)
;
/
*
Vertically
center
the
18px
tall
animatable
image
*
/
left
:
calc
(
50
%
-
9px
)
;
/
*
Horizontally
center
the
18px
wide
animatable
image
*
/
width
:
18px
;
height
:
18px
;
border
-
radius
:
100
%
;
border
:
1px
solid
currentColor
;
padding
:
1px
;
}
#
downloads
-
button
[
progress
]
:
not
(
[
notification
]
)
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
progress
-
outer
{
visibility
:
visible
;
}
#
downloads
-
indicator
-
progress
-
inner
{
width
:
14px
;
height
:
14px
;
/
*
From
javascript
side
we
update
the
-
-
download
-
progress
-
pcent
variable
to
show
the
current
progress
*
/
background
:
conic
-
gradient
(
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
var
(
-
-
download
-
progress
-
pcent
)
transparent
var
(
-
-
download
-
progress
-
pcent
)
)
;
border
-
radius
:
100
%
;
}
/
*
*
*
Status
badges
*
*
*
/
#
downloads
-
button
[
attention
=
"
warning
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
#
downloads
-
button
[
attention
=
"
severe
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
{
display
:
-
moz
-
box
;
height
:
8px
;
width
:
8px
;
min
-
width
:
0
;
border
-
radius
:
50
%
;
/
*
"
!
important
"
is
necessary
to
override
the
rule
in
toolbarbutton
.
css
*
/
margin
-
top
:
-
1px
!
important
;
margin
-
inline
-
end
:
-
2px
!
important
;
}
#
downloads
-
button
[
cui
-
areatype
=
"
toolbar
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
{
height
:
7px
;
width
:
7px
;
}
#
downloads
-
button
[
attention
=
"
severe
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
{
background
:
#
D90000
;
}
#
downloads
-
button
[
attention
=
"
warning
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
{
background
:
#
FFBF00
;
}
#
downloads
-
button
[
attention
=
"
severe
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
:
-
moz
-
window
-
inactive
#
downloads
-
button
[
attention
=
"
warning
"
]
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
:
-
moz
-
window
-
inactive
{
filter
:
none
;
}
/
*
*
*
Download
notifications
(
transitions
between
downloading
states
)
*
*
*
/
#
downloads
-
indicator
-
start
-
image
{
-
-
anim
-
steps
:
16
;
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
downloads
/
notification
-
start
-
animation
.
svg
"
)
;
width
:
calc
(
20px
*
(
var
(
-
-
anim
-
steps
)
+
1
)
)
;
height
:
20px
;
fill
:
currentColor
;
fill
-
opacity
:
1
;
stroke
:
currentColor
;
/
*
initial
state
for
animation
*
/
transform
:
translateX
(
0
)
;
}
#
downloads
-
button
[
animate
]
[
notification
=
"
start
"
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
start
-
box
>
#
downloads
-
indicator
-
start
-
image
{
visibility
:
visible
;
/
*
Upon
changing
the
animation
-
duration
below
please
keep
the
setTimeout
(
)
identical
in
indicator
.
js
#
_showNotification
.
*
/
animation
-
name
:
downloadsButtonNotification
;
animation
-
duration
:
calc
(
var
(
-
-
anim
-
steps
)
*
16
.
667ms
)
;
animation
-
timing
-
function
:
steps
(
var
(
-
-
anim
-
steps
)
)
;
/
*
end
state
for
animation
:
*
/
transform
:
translateX
(
calc
(
var
(
-
-
anim
-
steps
)
*
-
20px
)
)
;
}
#
downloads
-
indicator
-
finish
-
image
{
-
-
anim
-
steps
:
65
;
fill
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
fill
-
opacity
:
1
;
stroke
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
downloads
/
notification
-
finish
-
animation
.
svg
"
)
;
width
:
calc
(
20px
*
(
var
(
-
-
anim
-
steps
)
+
1
)
)
;
height
:
20px
;
/
*
initial
state
for
animation
*
/
transform
:
translateX
(
0
)
;
}
#
downloads
-
button
[
open
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
finish
-
box
>
#
downloads
-
indicator
-
finish
-
image
{
stroke
:
currentColor
;
}
#
downloads
-
button
[
animate
]
[
notification
=
"
finish
"
]
>
.
toolbarbutton
-
badge
-
stack
>
#
downloads
-
indicator
-
finish
-
box
>
#
downloads
-
indicator
-
finish
-
image
{
visibility
:
visible
;
/
*
Upon
changing
the
animation
-
duration
below
please
keep
the
setTimeout
(
)
identical
in
indicator
.
js
#
_showNotification
.
*
/
animation
-
name
:
downloadsButtonNotification
;
animation
-
duration
:
calc
(
var
(
-
-
anim
-
steps
)
*
16
.
667ms
)
;
animation
-
timing
-
function
:
steps
(
var
(
-
-
anim
-
steps
)
)
;
/
*
end
state
for
animation
:
*
/
transform
:
translateX
(
calc
(
var
(
-
-
anim
-
steps
)
*
-
20px
)
)
;
}
keyframes
downloadsButtonNotification
{
from
{
transform
:
translateX
(
0
)
;
}
}
