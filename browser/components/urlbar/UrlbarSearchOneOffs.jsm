/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarSearchOneOffs
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchOneOffs
:
"
resource
:
/
/
/
modules
/
SearchOneOffs
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
}
)
;
/
*
*
*
The
one
-
off
search
buttons
in
the
urlbar
.
*
/
class
UrlbarSearchOneOffs
extends
SearchOneOffs
{
/
*
*
*
Constructor
.
*
*
param
{
UrlbarView
}
view
*
The
parent
UrlbarView
.
*
/
constructor
(
view
)
{
super
(
view
.
panel
.
querySelector
(
"
.
search
-
one
-
offs
"
)
)
;
this
.
view
=
view
;
this
.
input
=
view
.
input
;
}
/
*
*
*
Enables
(
shows
)
or
disables
(
hides
)
the
one
-
offs
.
*
*
param
{
boolean
}
enable
*
True
to
enable
false
to
disable
.
*
/
enable
(
enable
)
{
if
(
enable
)
{
this
.
telemetryOrigin
=
"
urlbar
"
;
this
.
style
.
display
=
"
"
;
this
.
textbox
=
this
.
view
.
input
.
inputField
;
if
(
this
.
view
.
isOpen
)
{
this
.
_rebuild
(
)
;
}
this
.
view
.
controller
.
addQueryListener
(
this
)
;
}
else
{
this
.
telemetryOrigin
=
null
;
this
.
style
.
display
=
"
none
"
;
this
.
textbox
=
null
;
this
.
view
.
controller
.
removeQueryListener
(
this
)
;
}
}
/
*
*
*
Query
listener
method
.
Delegates
to
the
superclass
.
*
/
onViewOpen
(
)
{
this
.
_on_popupshowing
(
)
;
}
/
*
*
*
Query
listener
method
.
Delegates
to
the
superclass
.
*
/
onViewClose
(
)
{
this
.
_on_popuphidden
(
)
;
}
/
*
*
*
returns
{
boolean
}
*
True
if
the
view
is
open
.
*
/
get
isViewOpen
(
)
{
return
this
.
view
.
isOpen
;
}
/
*
*
*
returns
{
number
}
*
The
selected
index
in
the
view
.
*
/
get
selectedViewIndex
(
)
{
return
this
.
view
.
selectedElementIndex
;
}
/
*
*
*
Sets
the
selected
index
in
the
view
.
*
*
param
{
number
}
val
*
The
selected
index
or
-
1
if
no
selection
.
*
/
set
selectedViewIndex
(
val
)
{
return
(
this
.
view
.
selectedElementIndex
=
val
)
;
}
/
*
*
*
Closes
the
view
.
*
/
closeView
(
)
{
if
(
this
.
view
)
{
this
.
view
.
close
(
)
;
}
}
/
*
*
*
Called
when
a
one
-
off
is
clicked
or
the
"
Search
in
New
Tab
"
context
menu
*
item
is
picked
.
This
is
not
called
for
the
settings
button
.
*
*
param
{
event
}
event
*
The
event
that
triggered
the
pick
.
*
param
{
nsISearchEngine
|
SearchEngine
}
engine
*
The
engine
that
was
picked
.
*
param
{
boolean
}
forceNewTab
*
True
if
the
search
results
page
should
be
loaded
in
a
new
tab
.
*
/
handleSearchCommand
(
event
engine
forceNewTab
=
false
)
{
if
(
!
this
.
view
.
oneOffsRefresh
)
{
let
{
where
params
}
=
this
.
_whereToOpen
(
event
forceNewTab
)
;
this
.
input
.
handleCommand
(
event
where
params
)
;
return
;
}
this
.
input
.
setSearchMode
(
engine
)
;
this
.
selectedButton
=
null
;
this
.
input
.
startQuery
(
{
allowAutofill
:
false
event
}
)
;
}
/
*
*
*
Gets
the
tooltip
for
the
one
-
off
button
of
an
engine
.
*
*
param
{
nsISearchEngine
|
SearchEngine
}
engine
*
The
engine
.
*
returns
{
string
}
*
The
tooltip
for
the
given
engine
.
*
/
tooltipForEngine
(
engine
)
{
let
tooltip
=
engine
.
name
;
let
aliases
=
UrlbarSearchUtils
.
aliasesForEngine
(
engine
)
;
if
(
aliases
.
length
)
{
tooltip
+
=
(
{
aliases
[
0
]
}
)
;
}
return
tooltip
;
}
}
