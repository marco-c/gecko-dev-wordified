/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
*
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
"
use
strict
"
;
/
/
Test
the
Glean
telemetry
behavior
with
its
preferences
.
add_task
(
async
function
enabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
searchEngagementTelemetry
.
enabled
"
true
]
]
}
)
;
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
https
:
/
/
example
.
com
"
)
;
await
doEnter
(
)
;
assertEngagementTelemetry
(
[
{
selected_result
:
"
url
"
}
]
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
disabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
searchEngagementTelemetry
.
enabled
"
false
]
]
}
)
;
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
https
:
/
/
example
.
com
"
)
;
await
doEnter
(
)
;
assertEngagementTelemetry
(
[
]
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
nimbusEnabled
(
)
{
const
doCleanup
=
await
setupNimbus
(
{
searchEngagementTelemetryEnabled
:
true
}
)
;
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
https
:
/
/
example
.
com
"
)
;
await
doEnter
(
)
;
assertEngagementTelemetry
(
[
{
selected_result
:
"
url
"
}
]
)
;
}
)
;
doCleanup
(
)
;
}
)
;
add_task
(
async
function
nimbusDisabled
(
)
{
const
doCleanup
=
await
setupNimbus
(
{
searchEngagementTelemetryEnabled
:
false
}
)
;
await
doTest
(
async
browser
=
>
{
await
openPopup
(
"
https
:
/
/
example
.
com
"
)
;
await
doEnter
(
)
;
assertEngagementTelemetry
(
[
]
)
;
}
)
;
doCleanup
(
)
;
}
)
;
