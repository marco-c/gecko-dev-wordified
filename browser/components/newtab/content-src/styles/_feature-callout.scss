/
/
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
/
/
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
/
/
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
import
'
feature
-
callout
-
theme
'
;
#
feature
-
callout
{
/
/
See
_feature
-
callout
-
theme
.
scss
for
the
theme
mixins
and
/
/
FeatureCallout
.
sys
.
mjs
for
the
color
values
include
light
-
theme
;
position
:
absolute
;
z
-
index
:
2147483647
;
outline
:
none
;
color
:
var
(
-
-
fc
-
color
)
;
accent
-
color
:
var
(
-
-
fc
-
accent
-
color
)
;
/
/
Make
sure
HTML
content
uses
non
-
native
theming
even
in
chrome
windows
.
-
moz
-
theme
:
non
-
native
;
media
(
prefers
-
color
-
scheme
:
dark
)
{
include
dark
-
theme
;
}
media
(
prefers
-
contrast
)
{
include
hcm
-
theme
;
}
/
/
Account
for
feature
callouts
that
may
be
rendered
in
the
chrome
but
/
/
displayed
on
top
of
content
.
Each
context
has
its
own
color
scheme
so
they
/
/
may
not
match
.
In
that
case
we
use
the
special
media
query
below
.
&
.
simulateContent
{
color
-
scheme
:
env
(
-
moz
-
content
-
preferred
-
color
-
scheme
)
;
/
/
TODO
-
replace
2
mixins
with
a
single
mixin
with
light
-
dark
(
)
values
.
media
(
-
moz
-
content
-
prefers
-
color
-
scheme
:
light
)
{
include
light
-
theme
;
}
media
(
-
moz
-
content
-
prefers
-
color
-
scheme
:
dark
)
{
include
dark
-
theme
;
}
media
(
prefers
-
contrast
)
{
include
hcm
-
theme
;
}
}
panel
-
shadow
-
margin
:
6px
;
arrow
-
size
:
24px
;
arrow
-
visible
-
size
:
math
.
div
(
arrow
-
size
2
)
;
arrow
-
center
-
inset
:
calc
(
50
%
-
arrow
-
visible
-
size
)
;
/
/
move
the
arrow
1px
closer
to
the
callout
to
account
for
subpixel
rounding
/
/
differences
which
might
cause
the
corners
of
the
arrow
(
which
is
actually
/
/
a
rotated
square
)
to
be
visible
.
arrow
-
offset
:
1px
-
arrow
-
visible
-
size
;
arrow
-
inset
:
arrow
-
visible
-
size
+
6px
;
panel
-
arrow
-
space
:
panel
-
shadow
-
margin
+
arrow
-
visible
-
size
-
1px
;
arrow
-
overlap
-
magnitude
:
5px
;
/
/
The
callout
starts
with
its
edge
aligned
with
the
edge
of
the
anchor
.
But
/
/
we
want
the
arrow
to
align
to
the
anchor
not
the
callout
edge
.
So
we
need
/
/
to
offset
the
callout
by
the
arrow
size
and
margin
as
well
as
the
margin
/
/
of
the
entire
callout
(
it
has
margins
on
all
sides
to
make
room
for
the
/
/
shadow
when
displayed
in
a
panel
which
would
normally
cut
off
the
shadow
)
.
panel
-
margin
-
offset
-
magnitude
:
panel
-
shadow
-
margin
+
arrow
-
visible
-
size
+
arrow
-
inset
;
at
-
root
panel
#
{
&
}
{
-
-
panel
-
color
:
var
(
-
-
fc
-
color
)
;
-
-
panel
-
shadow
-
margin
:
#
{
panel
-
shadow
-
margin
}
;
-
-
panel
-
shadow
:
none
;
}
at
-
root
panel
#
{
&
}
:
:
part
(
content
)
{
width
:
initial
;
border
:
0
;
border
-
radius
:
0
;
padding
:
0
;
margin
:
var
(
-
-
panel
-
shadow
-
margin
)
;
background
:
none
;
color
:
inherit
;
/
/
stylelint
-
disable
-
next
-
line
declaration
-
no
-
important
overflow
:
visible
!
important
;
}
at
-
root
div
#
{
&
}
{
transition
:
opacity
0
.
5s
ease
;
&
.
hidden
{
opacity
:
0
;
pointer
-
events
:
none
;
}
}
.
onboardingContainer
.
onboardingContainer
.
outer
-
wrapper
{
/
/
Override
the
element
transitions
from
aboutwelcome
.
scss
-
-
transition
:
none
;
/
/
auto
height
to
allow
for
arrow
positioning
based
on
height
height
:
auto
;
}
/
/
use
a
different
approach
to
flipping
to
avoid
the
fuzzy
aliasing
that
/
/
transform
causes
.
&
:
dir
(
rtl
)
{
transform
:
none
;
direction
:
ltr
;
}
&
.
outer
-
wrapper
:
dir
(
rtl
)
{
transform
:
none
;
direction
:
rtl
;
}
.
screen
{
/
/
override
transform
in
about
:
welcome
&
:
dir
(
rtl
)
{
transform
:
none
;
}
&
[
pos
=
'
callout
'
]
{
height
:
fit
-
content
;
min
-
height
:
unset
;
overflow
:
visible
;
&
[
layout
=
'
inline
'
]
{
.
section
-
main
{
.
main
-
content
.
main
-
content
.
no
-
steps
{
width
:
18em
;
padding
-
inline
:
16px
;
padding
-
block
:
0
;
.
welcome
-
text
{
margin
-
block
:
12px
14px
;
margin
-
inline
:
0
;
padding
:
0
;
}
}
.
dismiss
-
button
{
height
:
24px
;
width
:
24px
;
min
-
height
:
24px
;
min
-
width
:
24px
;
margin
-
block
:
11px
0
;
margin
-
inline
:
0
12px
;
}
}
}
.
logo
-
container
{
display
:
flex
;
justify
-
content
:
center
;
.
brand
-
logo
{
margin
:
30px
45px
0
;
/
/
This
may
not
work
for
all
future
messages
so
we
may
want
to
make
/
/
flipping
the
logo
image
in
RTL
mode
configurable
&
:
dir
(
rtl
)
{
transform
:
rotateY
(
180deg
)
;
}
}
}
.
welcome
-
text
{
align
-
items
:
baseline
;
text
-
align
:
start
;
margin
-
inline
:
30px
;
padding
:
20px
0
0
;
h1
h2
{
font
-
size
:
0
.
8em
;
margin
:
0
;
color
:
inherit
;
}
h1
{
font
-
weight
:
600
;
}
h2
{
margin
-
block
:
10px
;
}
.
inline
-
icon
-
container
{
display
:
flex
;
flex
-
flow
:
row
wrap
;
align
-
items
:
center
;
.
logo
-
container
{
height
:
16px
;
width
:
16px
;
margin
-
inline
-
end
:
6px
;
-
moz
-
context
-
properties
:
fill
;
fill
:
currentColor
;
img
{
height
:
16px
;
width
:
16px
;
margin
:
0
;
}
}
}
}
.
multi
-
select
-
container
{
margin
-
inline
:
30px
;
padding
:
1em
0
0
;
font
-
size
:
0
.
8em
;
color
:
inherit
;
}
.
cta
-
link
{
background
:
none
;
text
-
decoration
:
underline
;
cursor
:
pointer
;
border
:
none
;
padding
:
0
;
color
:
var
(
-
-
fc
-
link
-
color
)
;
order
:
-
1
;
margin
-
inline
-
end
:
auto
;
margin
-
block
:
8px
;
&
:
hover
{
color
:
var
(
-
-
fc
-
link
-
color
-
hover
)
;
}
&
:
active
{
color
:
var
(
-
-
fc
-
link
-
color
-
active
)
;
}
}
/
/
Secondary
section
is
not
included
in
callouts
.
section
-
secondary
{
display
:
none
;
}
.
section
-
main
{
height
:
fit
-
content
;
width
:
fit
-
content
;
.
main
-
content
{
position
:
relative
;
overflow
:
hidden
;
border
:
1px
solid
var
(
-
-
fc
-
border
)
;
box
-
shadow
:
0
2px
6px
rgba
(
0
0
0
15
%
)
;
border
-
radius
:
4px
;
padding
-
top
:
0
;
padding
-
bottom
:
30px
;
width
:
25em
;
background
-
color
:
var
(
-
-
fc
-
background
)
;
.
steps
{
height
:
auto
;
position
:
absolute
;
/
/
30px
is
the
margin
of
the
CTAs
from
the
bottom
.
The
CTAs
are
32px
/
/
tall
and
the
steps
are
8px
tall
.
So
we
need
to
offset
the
steps
/
/
by
half
the
difference
in
order
to
center
them
.
=
36px
bottom
:
30px
+
math
.
div
(
32px
2
)
-
math
.
div
(
8px
2
)
;
margin
:
0
30px
;
padding
-
block
:
0
;
.
indicator
{
/
/
using
border
will
show
up
in
Windows
High
Contrast
Mode
to
improve
accessibility
.
border
:
4px
solid
var
(
-
-
fc
-
step
-
color
)
;
&
.
current
{
border
-
color
:
var
(
-
-
fc
-
accent
-
color
)
;
}
}
&
.
indicator
.
current
&
.
progress
-
bar
.
indicator
.
complete
{
border
-
color
:
var
(
-
-
fc
-
accent
-
color
)
;
}
}
}
.
dismiss
-
button
{
font
-
size
:
1em
;
top
:
0
;
margin
-
block
:
10px
0
;
margin
-
inline
:
0
10px
;
background
-
color
:
var
(
-
-
fc
-
background
)
;
}
}
.
action
-
buttons
{
display
:
flex
;
flex
-
flow
:
row
nowrap
;
align
-
items
:
stretch
;
justify
-
content
:
end
;
gap
:
10px
;
margin
-
inline
:
30px
;
.
primary
.
secondary
{
padding
:
4px
16px
;
margin
:
0
;
font
-
size
:
0
.
8em
;
font
-
weight
:
600
;
line
-
height
:
16px
;
min
-
height
:
32px
;
text
-
decoration
:
none
;
cursor
:
default
;
}
.
secondary
{
background
-
color
:
var
(
-
-
fc
-
button
-
background
)
;
}
.
primary
{
background
-
color
:
var
(
-
-
fc
-
primary
-
button
-
background
)
;
}
}
.
action
-
buttons
.
primary
.
action
-
buttons
.
secondary
.
dismiss
-
button
{
border
-
radius
:
4px
;
&
:
focus
-
visible
{
box
-
shadow
:
none
;
outline
:
2px
solid
var
(
-
-
fc
-
accent
-
color
)
;
outline
-
offset
:
2px
;
}
&
:
disabled
{
opacity
:
0
.
4
;
cursor
:
auto
;
}
}
.
action
-
buttons
.
secondary
.
dismiss
-
button
{
border
:
1px
solid
var
(
-
-
fc
-
button
-
border
)
;
color
:
var
(
-
-
fc
-
button
-
color
)
;
&
:
hover
:
not
(
:
disabled
)
{
background
-
color
:
var
(
-
-
fc
-
button
-
background
-
hover
)
;
color
:
var
(
-
-
fc
-
button
-
color
-
hover
)
;
border
:
1px
solid
var
(
-
-
fc
-
button
-
border
-
hover
)
;
&
:
active
{
background
-
color
:
var
(
-
-
fc
-
button
-
background
-
active
)
;
color
:
var
(
-
-
fc
-
button
-
color
-
active
)
;
border
:
1px
solid
var
(
-
-
fc
-
button
-
border
-
active
)
;
}
}
}
.
action
-
buttons
.
primary
{
border
:
1px
solid
var
(
-
-
fc
-
primary
-
button
-
border
)
;
color
:
var
(
-
-
fc
-
primary
-
button
-
color
)
;
&
:
hover
:
not
(
:
disabled
)
{
background
-
color
:
var
(
-
-
fc
-
primary
-
button
-
background
-
hover
)
;
color
:
var
(
-
-
fc
-
primary
-
button
-
color
-
hover
)
;
border
:
1px
solid
var
(
-
-
fc
-
primary
-
button
-
border
-
hover
)
;
&
:
active
{
background
-
color
:
var
(
-
-
fc
-
primary
-
button
-
background
-
active
)
;
color
:
var
(
-
-
fc
-
primary
-
button
-
color
-
active
)
;
border
:
1px
solid
var
(
-
-
fc
-
primary
-
button
-
border
-
active
)
;
}
}
}
}
}
at
-
root
panel
#
{
&
}
:
is
(
[
side
=
'
top
'
]
[
side
=
'
bottom
'
]
)
:
not
(
.
hidden
-
arrow
)
{
margin
-
inline
:
-
panel
-
margin
-
offset
-
magnitude
;
}
at
-
root
panel
#
{
&
}
:
is
(
[
side
=
'
left
'
]
[
side
=
'
right
'
]
)
:
not
(
.
hidden
-
arrow
)
{
margin
-
block
:
-
panel
-
margin
-
offset
-
magnitude
;
}
at
-
root
panel
#
{
&
}
:
:
part
(
content
)
{
position
:
relative
;
}
/
/
all
visible
callout
arrow
boxes
.
boxes
are
for
rotating
45
degrees
arrows
/
/
are
for
the
actual
arrow
shape
and
are
children
of
the
boxes
.
.
arrow
-
box
{
position
:
absolute
;
overflow
:
visible
;
transform
:
rotate
(
45deg
)
;
/
/
keep
the
border
crisp
under
transformation
transform
-
style
:
preserve
-
3d
;
}
&
:
not
(
[
arrow
-
position
]
)
.
arrow
-
box
&
.
hidden
-
arrow
.
arrow
-
box
{
display
:
none
;
}
/
/
both
shadow
arrow
and
background
arrow
.
arrow
{
width
:
arrow
-
size
;
height
:
arrow
-
size
;
}
/
/
the
arrow
'
s
shadow
box
.
shadow
-
arrow
-
box
{
z
-
index
:
-
1
;
}
/
/
the
arrow
'
s
shadow
.
shadow
-
arrow
{
background
:
transparent
;
outline
:
1px
solid
var
(
-
-
fc
-
border
)
;
box
-
shadow
:
0
2px
6px
rgba
(
0
0
0
15
%
)
;
}
/
/
the
'
filled
'
arrow
box
.
background
-
arrow
-
box
{
z
-
index
:
1
;
/
/
the
background
arrow
technically
can
overlap
the
dismiss
button
.
it
/
/
doesn
'
t
visibly
overlap
it
because
of
the
clip
-
path
rule
below
but
it
/
/
can
still
be
clicked
.
so
we
need
to
make
sure
it
doesn
'
t
block
inputs
on
/
/
the
button
.
the
visible
part
of
the
arrow
can
still
catch
clicks
because
/
/
we
don
'
t
add
this
rule
to
.
shadow
-
arrow
-
box
.
pointer
-
events
:
none
;
}
/
/
the
'
filled
'
arrow
.
background
-
arrow
{
background
-
color
:
var
(
-
-
fc
-
background
)
;
clip
-
path
:
var
(
-
-
fc
-
arrow
-
clip
-
path
)
;
}
/
/
top
(
center
)
arrow
positioning
&
[
arrow
-
position
=
'
top
'
]
.
arrow
-
box
{
top
:
arrow
-
offset
;
inset
-
inline
-
start
:
arrow
-
center
-
inset
;
/
/
the
callout
arrow
is
actually
a
diamond
(
a
rotated
square
)
with
the
/
/
lower
half
invisible
.
the
part
that
appears
in
front
of
the
callout
has
/
/
only
a
background
so
that
where
it
overlaps
the
callout
'
s
border
the
/
/
border
is
not
visible
.
the
part
that
appears
behind
the
callout
has
only
/
/
a
border
/
shadow
so
that
it
can
'
t
be
seen
overlapping
the
callout
.
but
/
/
because
the
background
is
the
same
color
as
the
callout
that
half
of
the
/
/
diamond
would
visibly
overlap
any
callout
content
that
happens
to
be
in
/
/
the
same
place
.
so
we
clip
it
to
a
triangle
with
a
2
%
extension
on
the
/
/
bottom
to
account
for
any
subpixel
rounding
differences
.
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
2
%
2
%
100
%
0
100
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
'
]
:
:
part
(
content
)
{
margin
-
top
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
'
]
{
margin
-
top
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
bottom
(
center
)
arrow
positioning
&
[
arrow
-
position
=
'
bottom
'
]
.
arrow
-
box
{
bottom
:
arrow
-
offset
;
inset
-
inline
-
start
:
arrow
-
center
-
inset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
98
%
0
0
98
%
0
100
%
100
%
100
%
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
'
]
:
:
part
(
content
)
{
margin
-
bottom
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
'
]
{
margin
-
bottom
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
end
(
center
)
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
end
'
]
.
arrow
-
box
{
top
:
arrow
-
center
-
inset
;
inset
-
inline
-
end
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
100
%
98
%
100
%
0
2
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
'
]
:
:
part
(
content
)
{
margin
-
inline
-
end
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
'
]
{
margin
-
inline
-
end
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
start
(
center
)
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
start
'
]
.
arrow
-
box
{
top
:
arrow
-
center
-
inset
;
inset
-
inline
-
start
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
0
100
%
100
%
100
%
100
%
98
%
2
%
0
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
'
]
:
:
part
(
content
)
{
margin
-
inline
-
start
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
'
]
{
margin
-
inline
-
start
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
top
-
end
arrow
positioning
&
[
arrow
-
position
=
'
top
-
end
'
]
.
arrow
-
box
{
top
:
arrow
-
offset
;
inset
-
inline
-
end
:
arrow
-
inset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
2
%
2
%
100
%
0
100
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
-
end
'
]
:
:
part
(
content
)
{
margin
-
top
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
-
end
'
]
{
margin
-
top
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
top
-
start
arrow
positioning
&
[
arrow
-
position
=
'
top
-
start
'
]
.
arrow
-
box
{
top
:
arrow
-
offset
;
inset
-
inline
-
start
:
arrow
-
inset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
2
%
2
%
100
%
0
100
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
-
start
'
]
:
:
part
(
content
)
{
margin
-
top
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
top
-
start
'
]
{
margin
-
top
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
bottom
-
end
arrow
positioning
&
[
arrow
-
position
=
'
bottom
-
end
'
]
.
arrow
-
box
{
bottom
:
arrow
-
offset
;
inset
-
inline
-
end
:
arrow
-
inset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
98
%
0
0
98
%
0
100
%
100
%
100
%
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
-
end
'
]
:
:
part
(
content
)
{
margin
-
bottom
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
-
end
'
]
{
margin
-
bottom
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
bottom
-
start
arrow
positioning
&
[
arrow
-
position
=
'
bottom
-
start
'
]
.
arrow
-
box
{
bottom
:
arrow
-
offset
;
inset
-
inline
-
start
:
arrow
-
inset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
98
%
0
0
98
%
0
100
%
100
%
100
%
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
-
start
'
]
:
:
part
(
content
)
{
margin
-
bottom
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
bottom
-
start
'
]
{
margin
-
bottom
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
inline
-
end
-
top
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
end
-
top
'
]
.
arrow
-
box
{
top
:
arrow
-
inset
;
inset
-
inline
-
end
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
100
%
98
%
100
%
0
2
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
-
top
'
]
:
:
part
(
content
)
{
margin
-
inline
-
end
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
-
top
'
]
{
margin
-
inline
-
end
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
inline
-
end
-
bottom
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
end
-
bottom
'
]
.
arrow
-
box
{
bottom
:
arrow
-
inset
;
inset
-
inline
-
end
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
100
%
0
100
%
100
%
98
%
100
%
0
2
%
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
-
bottom
'
]
:
:
part
(
content
)
{
margin
-
inline
-
end
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
end
-
bottom
'
]
{
margin
-
inline
-
end
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
inline
-
start
-
top
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
start
-
top
'
]
.
arrow
-
box
{
top
:
arrow
-
inset
;
inset
-
inline
-
start
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
0
100
%
100
%
100
%
100
%
98
%
2
%
0
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
-
top
'
]
:
:
part
(
content
)
{
margin
-
inline
-
start
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
-
top
'
]
{
margin
-
inline
-
start
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
inline
-
start
-
bottom
arrow
positioning
&
[
arrow
-
position
=
'
inline
-
start
-
bottom
'
]
.
arrow
-
box
{
bottom
:
arrow
-
inset
;
inset
-
inline
-
start
:
arrow
-
offset
;
-
-
fc
-
arrow
-
clip
-
path
:
polygon
(
0
100
%
100
%
100
%
100
%
98
%
2
%
0
0
0
)
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
-
bottom
'
]
:
:
part
(
content
)
{
margin
-
inline
-
start
:
panel
-
arrow
-
space
+
6px
;
}
at
-
root
panel
#
{
&
}
[
arrow
-
position
=
'
inline
-
start
-
bottom
'
]
{
margin
-
inline
-
start
:
calc
(
-
1
*
(
var
(
-
-
panel
-
shadow
-
margin
)
+
arrow
-
overlap
-
magnitude
)
)
;
}
/
/
focus
outline
for
the
callout
itself
&
:
focus
-
visible
{
.
screen
{
&
[
pos
=
'
callout
'
]
{
.
section
-
main
.
main
-
content
{
outline
:
2px
solid
var
(
-
-
fc
-
accent
-
color
)
;
border
-
color
:
transparent
;
media
(
prefers
-
contrast
)
{
border
-
color
:
var
(
-
-
fc
-
background
)
;
}
}
}
}
.
shadow
-
arrow
{
outline
:
2px
solid
var
(
-
-
fc
-
accent
-
color
)
;
}
}
}
