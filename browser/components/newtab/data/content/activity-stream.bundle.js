/
*
!
THIS
FILE
IS
AUTO
-
GENERATED
:
webpack
.
system
-
addon
.
config
.
js
*
/
/
*
*
*
*
*
*
/
(
function
(
modules
)
{
/
/
webpackBootstrap
/
*
*
*
*
*
*
/
/
/
The
module
cache
/
*
*
*
*
*
*
/
var
installedModules
=
{
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
The
require
function
/
*
*
*
*
*
*
/
function
__webpack_require__
(
moduleId
)
{
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Check
if
module
is
in
cache
/
*
*
*
*
*
*
/
if
(
installedModules
[
moduleId
]
)
{
/
*
*
*
*
*
*
/
return
installedModules
[
moduleId
]
.
exports
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
/
/
Create
a
new
module
(
and
put
it
into
the
cache
)
/
*
*
*
*
*
*
/
var
module
=
installedModules
[
moduleId
]
=
{
/
*
*
*
*
*
*
/
i
:
moduleId
/
*
*
*
*
*
*
/
l
:
false
/
*
*
*
*
*
*
/
exports
:
{
}
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Execute
the
module
function
/
*
*
*
*
*
*
/
modules
[
moduleId
]
.
call
(
module
.
exports
module
module
.
exports
__webpack_require__
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Flag
the
module
as
loaded
/
*
*
*
*
*
*
/
module
.
l
=
true
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Return
the
exports
of
the
module
/
*
*
*
*
*
*
/
return
module
.
exports
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
expose
the
modules
object
(
__webpack_modules__
)
/
*
*
*
*
*
*
/
__webpack_require__
.
m
=
modules
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
expose
the
module
cache
/
*
*
*
*
*
*
/
__webpack_require__
.
c
=
installedModules
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
define
getter
function
for
harmony
exports
/
*
*
*
*
*
*
/
__webpack_require__
.
d
=
function
(
exports
name
getter
)
{
/
*
*
*
*
*
*
/
if
(
!
__webpack_require__
.
o
(
exports
name
)
)
{
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
name
{
enumerable
:
true
get
:
getter
}
)
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
define
__esModule
on
exports
/
*
*
*
*
*
*
/
__webpack_require__
.
r
=
function
(
exports
)
{
/
*
*
*
*
*
*
/
if
(
typeof
Symbol
!
=
=
'
undefined
'
&
&
Symbol
.
toStringTag
)
{
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
Symbol
.
toStringTag
{
value
:
'
Module
'
}
)
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
'
__esModule
'
{
value
:
true
}
)
;
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
create
a
fake
namespace
object
/
*
*
*
*
*
*
/
/
/
mode
&
1
:
value
is
a
module
id
require
it
/
*
*
*
*
*
*
/
/
/
mode
&
2
:
merge
all
properties
of
value
into
the
ns
/
*
*
*
*
*
*
/
/
/
mode
&
4
:
return
value
when
already
ns
object
/
*
*
*
*
*
*
/
/
/
mode
&
8
|
1
:
behave
like
require
/
*
*
*
*
*
*
/
__webpack_require__
.
t
=
function
(
value
mode
)
{
/
*
*
*
*
*
*
/
if
(
mode
&
1
)
value
=
__webpack_require__
(
value
)
;
/
*
*
*
*
*
*
/
if
(
mode
&
8
)
return
value
;
/
*
*
*
*
*
*
/
if
(
(
mode
&
4
)
&
&
typeof
value
=
=
=
'
object
'
&
&
value
&
&
value
.
__esModule
)
return
value
;
/
*
*
*
*
*
*
/
var
ns
=
Object
.
create
(
null
)
;
/
*
*
*
*
*
*
/
__webpack_require__
.
r
(
ns
)
;
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
ns
'
default
'
{
enumerable
:
true
value
:
value
}
)
;
/
*
*
*
*
*
*
/
if
(
mode
&
2
&
&
typeof
value
!
=
'
string
'
)
for
(
var
key
in
value
)
__webpack_require__
.
d
(
ns
key
function
(
key
)
{
return
value
[
key
]
;
}
.
bind
(
null
key
)
)
;
/
*
*
*
*
*
*
/
return
ns
;
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
getDefaultExport
function
for
compatibility
with
non
-
harmony
modules
/
*
*
*
*
*
*
/
__webpack_require__
.
n
=
function
(
module
)
{
/
*
*
*
*
*
*
/
var
getter
=
module
&
&
module
.
__esModule
?
/
*
*
*
*
*
*
/
function
getDefault
(
)
{
return
module
[
'
default
'
]
;
}
:
/
*
*
*
*
*
*
/
function
getModuleExports
(
)
{
return
module
;
}
;
/
*
*
*
*
*
*
/
__webpack_require__
.
d
(
getter
'
a
'
getter
)
;
/
*
*
*
*
*
*
/
return
getter
;
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Object
.
prototype
.
hasOwnProperty
.
call
/
*
*
*
*
*
*
/
__webpack_require__
.
o
=
function
(
object
property
)
{
return
Object
.
prototype
.
hasOwnProperty
.
call
(
object
property
)
;
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
__webpack_public_path__
/
*
*
*
*
*
*
/
__webpack_require__
.
p
=
"
"
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Load
entry
module
and
return
exports
/
*
*
*
*
*
*
/
return
__webpack_require__
(
__webpack_require__
.
s
=
0
)
;
/
*
*
*
*
*
*
/
}
)
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
(
[
/
*
0
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
/
*
harmony
import
*
/
var
content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
77
)
;
/
*
harmony
import
*
/
var
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
6
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_5___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_5__
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
12
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_6___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_6__
)
;
/
*
harmony
import
*
/
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
81
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
store
=
Object
(
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_3__
[
"
initStore
"
]
)
(
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_7__
[
"
reducers
"
]
)
;
new
content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_2__
[
"
DetectUserSessionStart
"
]
(
store
)
.
sendEventOrAddListener
(
)
;
store
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
}
)
)
;
react_dom__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
hydrate
(
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
[
"
Provider
"
]
{
store
:
store
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_1__
[
"
Base
"
]
{
isFirstrun
:
global
.
document
.
location
.
href
=
=
=
"
about
:
welcome
"
locale
:
global
.
document
.
documentElement
.
lang
strings
:
global
.
gActivityStreamStrings
}
)
)
document
.
getElementById
(
"
root
"
)
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
1
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
var
g
;
/
/
This
works
in
non
-
strict
mode
g
=
(
function
(
)
{
return
this
;
}
)
(
)
;
try
{
/
/
This
works
if
eval
is
allowed
(
see
CSP
)
g
=
g
|
|
new
Function
(
"
return
this
"
)
(
)
;
}
catch
(
e
)
{
/
/
This
works
if
the
window
reference
is
available
if
(
typeof
window
=
=
=
"
object
"
)
g
=
window
;
}
/
/
g
can
still
be
undefined
but
nothing
to
do
about
it
.
.
.
/
/
We
return
undefined
instead
of
nothing
here
so
it
'
s
/
/
easier
to
handle
this
case
.
if
(
!
global
)
{
.
.
.
}
module
.
exports
=
g
;
/
*
*
*
/
}
)
/
*
2
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
MAIN_MESSAGE_TYPE
"
function
(
)
{
return
MAIN_MESSAGE_TYPE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
CONTENT_MESSAGE_TYPE
"
function
(
)
{
return
CONTENT_MESSAGE_TYPE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
PRELOAD_MESSAGE_TYPE
"
function
(
)
{
return
PRELOAD_MESSAGE_TYPE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
UI_CODE
"
function
(
)
{
return
UI_CODE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
BACKGROUND_PROCESS
"
function
(
)
{
return
BACKGROUND_PROCESS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
globalImportContext
"
function
(
)
{
return
globalImportContext
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
actionTypes
"
function
(
)
{
return
actionTypes
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterActions
"
function
(
)
{
return
ASRouterActions
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
actionCreators
"
function
(
)
{
return
actionCreators
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
actionUtils
"
function
(
)
{
return
actionUtils
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
var
MAIN_MESSAGE_TYPE
=
"
ActivityStream
:
Main
"
;
var
CONTENT_MESSAGE_TYPE
=
"
ActivityStream
:
Content
"
;
var
PRELOAD_MESSAGE_TYPE
=
"
ActivityStream
:
PreloadedBrowser
"
;
var
UI_CODE
=
1
;
var
BACKGROUND_PROCESS
=
2
;
/
*
*
*
globalImportContext
-
Are
we
in
UI
code
(
i
.
e
.
react
a
dom
)
or
some
kind
of
background
process
?
*
Use
this
in
action
creators
if
you
need
different
logic
*
for
ui
/
background
processes
.
*
/
const
globalImportContext
=
typeof
Window
=
=
=
"
undefined
"
?
BACKGROUND_PROCESS
:
UI_CODE
;
/
/
Export
for
tests
/
/
Create
an
object
that
avoids
accidental
differing
key
/
value
pairs
:
/
/
{
/
/
INIT
:
"
INIT
"
/
/
UNINIT
:
"
UNINIT
"
/
/
}
const
actionTypes
=
{
}
;
for
(
const
type
of
[
"
ADDONS_INFO_REQUEST
"
"
ADDONS_INFO_RESPONSE
"
"
ARCHIVE_FROM_POCKET
"
"
AS_ROUTER_INITIALIZED
"
"
AS_ROUTER_PREF_CHANGED
"
"
AS_ROUTER_TARGETING_UPDATE
"
"
AS_ROUTER_TELEMETRY_USER_EVENT
"
"
BLOCK_URL
"
"
BOOKMARK_URL
"
"
CLEAR_PREF
"
"
COPY_DOWNLOAD_LINK
"
"
DELETE_BOOKMARK_BY_ID
"
"
DELETE_FROM_POCKET
"
"
DELETE_HISTORY_URL
"
"
DIALOG_CANCEL
"
"
DIALOG_OPEN
"
"
DISCOVERY_STREAM_CONFIG_CHANGE
"
"
DISCOVERY_STREAM_CONFIG_RESET_DEFAULTS
"
"
DISCOVERY_STREAM_CONFIG_SETUP
"
"
DISCOVERY_STREAM_CONFIG_SET_VALUE
"
"
DISCOVERY_STREAM_FEEDS_UPDATE
"
"
DISCOVERY_STREAM_FEED_UPDATE
"
"
DISCOVERY_STREAM_IMPRESSION_STATS
"
"
DISCOVERY_STREAM_LAYOUT_RESET
"
"
DISCOVERY_STREAM_LAYOUT_UPDATE
"
"
DISCOVERY_STREAM_LINK_BLOCKED
"
"
DISCOVERY_STREAM_LOADED_CONTENT
"
"
DISCOVERY_STREAM_RETRY_FEED
"
"
DISCOVERY_STREAM_SPOCS_CAPS
"
"
DISCOVERY_STREAM_SPOCS_ENDPOINT
"
"
DISCOVERY_STREAM_SPOCS_FILL
"
"
DISCOVERY_STREAM_SPOCS_PLACEMENTS
"
"
DISCOVERY_STREAM_SPOCS_UPDATE
"
"
DISCOVERY_STREAM_SPOC_BLOCKED
"
"
DISCOVERY_STREAM_SPOC_IMPRESSION
"
"
DOWNLOAD_CHANGED
"
"
FAKE_FOCUS_SEARCH
"
"
FILL_SEARCH_TERM
"
"
HANDOFF_SEARCH_TO_AWESOMEBAR
"
"
HIDE_PRIVACY_INFO
"
"
HIDE_SEARCH
"
"
INIT
"
"
NEW_TAB_INIT
"
"
NEW_TAB_INITIAL_STATE
"
"
NEW_TAB_LOAD
"
"
NEW_TAB_REHYDRATED
"
"
NEW_TAB_STATE_REQUEST
"
"
NEW_TAB_UNLOAD
"
"
OPEN_DOWNLOAD_FILE
"
"
OPEN_LINK
"
"
OPEN_NEW_WINDOW
"
"
OPEN_PRIVATE_WINDOW
"
"
OPEN_WEBEXT_SETTINGS
"
"
PLACES_BOOKMARK_ADDED
"
"
PLACES_BOOKMARK_REMOVED
"
"
PLACES_HISTORY_CLEARED
"
"
PLACES_LINKS_CHANGED
"
"
PLACES_LINK_BLOCKED
"
"
PLACES_LINK_DELETED
"
"
PLACES_SAVED_TO_POCKET
"
"
POCKET_CTA
"
"
POCKET_LINK_DELETED_OR_ARCHIVED
"
"
POCKET_LOGGED_IN
"
"
POCKET_WAITING_FOR_SPOC
"
"
PREFS_INITIAL_VALUES
"
"
PREF_CHANGED
"
"
PREVIEW_REQUEST
"
"
PREVIEW_REQUEST_CANCEL
"
"
PREVIEW_RESPONSE
"
"
REMOVE_DOWNLOAD_FILE
"
"
RICH_ICON_MISSING
"
"
SAVE_SESSION_PERF_DATA
"
"
SAVE_TO_POCKET
"
"
SCREENSHOT_UPDATED
"
"
SECTION_DEREGISTER
"
"
SECTION_DISABLE
"
"
SECTION_ENABLE
"
"
SECTION_MOVE
"
"
SECTION_OPTIONS_CHANGED
"
"
SECTION_REGISTER
"
"
SECTION_UPDATE
"
"
SECTION_UPDATE_CARD
"
"
SETTINGS_CLOSE
"
"
SETTINGS_OPEN
"
"
SET_PREF
"
"
SHOW_DOWNLOAD_FILE
"
"
SHOW_FIREFOX_ACCOUNTS
"
"
SHOW_PRIVACY_INFO
"
"
SHOW_SEARCH
"
"
SKIPPED_SIGNIN
"
"
SNIPPETS_BLOCKLIST_CLEARED
"
"
SNIPPETS_BLOCKLIST_UPDATED
"
"
SNIPPETS_DATA
"
"
SNIPPETS_PREVIEW_MODE
"
"
SNIPPETS_RESET
"
"
SNIPPET_BLOCKED
"
"
SUBMIT_EMAIL
"
"
SUBMIT_SIGNIN
"
"
SYSTEM_TICK
"
"
TELEMETRY_IMPRESSION_STATS
"
"
TELEMETRY_PERFORMANCE_EVENT
"
"
TELEMETRY_UNDESIRED_EVENT
"
"
TELEMETRY_USER_EVENT
"
"
TOP_SITES_CANCEL_EDIT
"
"
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
"
"
TOP_SITES_EDIT
"
"
TOP_SITES_INSERT
"
"
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
"
"
TOP_SITES_PIN
"
"
TOP_SITES_PREFS_UPDATED
"
"
TOP_SITES_UNPIN
"
"
TOP_SITES_UPDATED
"
"
TOTAL_BOOKMARKS_REQUEST
"
"
TOTAL_BOOKMARKS_RESPONSE
"
"
TRAILHEAD_ENROLL_EVENT
"
"
UNINIT
"
"
UPDATE_PINNED_SEARCH_SHORTCUTS
"
"
UPDATE_SEARCH_SHORTCUTS
"
"
UPDATE_SECTION_PREFS
"
"
WEBEXT_CLICK
"
"
WEBEXT_DISMISS
"
]
)
{
actionTypes
[
type
]
=
type
;
}
/
/
These
are
acceptable
actions
for
AS
Router
messages
to
have
.
They
can
show
up
/
/
as
call
-
to
-
action
buttons
in
snippets
onboarding
tour
etc
.
const
ASRouterActions
=
{
}
;
for
(
const
type
of
[
"
HIGHLIGHT_FEATURE
"
"
INSTALL_ADDON_FROM_URL
"
"
OPEN_APPLICATIONS_MENU
"
"
OPEN_PRIVATE_BROWSER_WINDOW
"
"
OPEN_URL
"
"
OPEN_ABOUT_PAGE
"
"
OPEN_PREFERENCES_PAGE
"
"
SHOW_FIREFOX_ACCOUNTS
"
"
PIN_CURRENT_TAB
"
"
ENABLE_FIREFOX_MONITOR
"
"
OPEN_PROTECTION_PANEL
"
"
OPEN_PROTECTION_REPORT
"
"
DISABLE_STP_DOORHANGERS
"
"
SHOW_MIGRATION_WIZARD
"
]
)
{
ASRouterActions
[
type
]
=
type
;
}
/
/
Helper
function
for
creating
routed
actions
between
content
and
main
/
/
Not
intended
to
be
used
by
consumers
function
_RouteMessage
(
action
options
)
{
const
meta
=
action
.
meta
?
{
.
.
.
action
.
meta
}
:
{
}
;
if
(
!
options
|
|
!
options
.
from
|
|
!
options
.
to
)
{
throw
new
Error
(
"
Routed
Messages
must
have
options
as
the
second
parameter
and
must
at
least
include
a
.
from
and
.
to
property
.
"
)
;
}
/
/
For
each
of
these
fields
if
they
are
passed
as
an
option
/
/
add
them
to
the
action
.
If
they
are
not
defined
remove
them
.
[
"
from
"
"
to
"
"
toTarget
"
"
fromTarget
"
"
skipMain
"
"
skipLocal
"
]
.
forEach
(
o
=
>
{
if
(
typeof
options
[
o
]
!
=
=
"
undefined
"
)
{
meta
[
o
]
=
options
[
o
]
;
}
else
if
(
meta
[
o
]
)
{
delete
meta
[
o
]
;
}
}
)
;
return
{
.
.
.
action
meta
}
;
}
/
*
*
*
AlsoToMain
-
Creates
a
message
that
will
be
dispatched
locally
and
also
sent
to
the
Main
process
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
param
{
object
}
options
*
param
{
bool
}
skipLocal
Used
by
OnlyToMain
to
skip
the
main
reducer
*
param
{
string
}
fromTarget
The
id
of
the
content
port
from
which
the
action
originated
.
(
optional
)
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
AlsoToMain
(
action
fromTarget
skipLocal
)
{
return
_RouteMessage
(
action
{
from
:
CONTENT_MESSAGE_TYPE
to
:
MAIN_MESSAGE_TYPE
fromTarget
skipLocal
}
)
;
}
/
*
*
*
OnlyToMain
-
Creates
a
message
that
will
be
sent
to
the
Main
process
and
skip
the
local
reducer
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
param
{
object
}
options
*
param
{
string
}
fromTarget
The
id
of
the
content
port
from
which
the
action
originated
.
(
optional
)
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
OnlyToMain
(
action
fromTarget
)
{
return
AlsoToMain
(
action
fromTarget
true
)
;
}
/
*
*
*
BroadcastToContent
-
Creates
a
message
that
will
be
dispatched
to
main
and
sent
to
ALL
content
processes
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
BroadcastToContent
(
action
)
{
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
CONTENT_MESSAGE_TYPE
}
)
;
}
/
*
*
*
AlsoToOneContent
-
Creates
a
message
that
will
be
will
be
dispatched
to
the
main
store
*
and
also
sent
to
a
particular
Content
process
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
param
{
string
}
target
The
id
of
a
content
port
*
param
{
bool
}
skipMain
Used
by
OnlyToOneContent
to
skip
the
main
process
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
AlsoToOneContent
(
action
target
skipMain
)
{
if
(
!
target
)
{
throw
new
Error
(
"
You
must
provide
a
target
ID
as
the
second
parameter
of
AlsoToOneContent
.
If
you
want
to
send
to
all
content
processes
use
BroadcastToContent
"
)
;
}
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
CONTENT_MESSAGE_TYPE
toTarget
:
target
skipMain
}
)
;
}
/
*
*
*
OnlyToOneContent
-
Creates
a
message
that
will
be
sent
to
a
particular
Content
process
*
and
skip
the
main
reducer
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
param
{
string
}
target
The
id
of
a
content
port
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
OnlyToOneContent
(
action
target
)
{
return
AlsoToOneContent
(
action
target
true
)
;
}
/
*
*
*
AlsoToPreloaded
-
Creates
a
message
that
dispatched
to
the
main
reducer
and
also
sent
to
the
preloaded
tab
.
*
*
param
{
object
}
action
Any
redux
action
(
required
)
*
return
{
object
}
An
action
with
added
.
meta
properties
*
/
function
AlsoToPreloaded
(
action
)
{
return
_RouteMessage
(
action
{
from
:
MAIN_MESSAGE_TYPE
to
:
PRELOAD_MESSAGE_TYPE
}
)
;
}
/
*
*
*
UserEvent
-
A
telemetry
ping
indicating
a
user
action
.
This
should
only
*
be
sent
from
the
UI
during
a
user
session
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
(
source
etc
.
)
*
return
{
object
}
An
AlsoToMain
action
*
/
function
UserEvent
(
data
)
{
return
AlsoToMain
(
{
type
:
actionTypes
.
TELEMETRY_USER_EVENT
data
}
)
;
}
/
*
*
*
ASRouterUserEvent
-
A
telemetry
ping
indicating
a
user
action
from
AS
router
.
This
should
only
*
be
sent
from
the
UI
during
a
user
session
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
(
source
etc
.
)
*
return
{
object
}
An
AlsoToMain
action
*
/
function
ASRouterUserEvent
(
data
)
{
return
AlsoToMain
(
{
type
:
actionTypes
.
AS_ROUTER_TELEMETRY_USER_EVENT
data
}
)
;
}
/
*
*
*
DiscoveryStreamSpocsFill
-
A
telemetry
ping
indicating
a
SPOCS
Fill
event
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
(
spoc_fills
etc
.
)
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
return
{
object
}
An
AlsoToMain
action
*
/
function
DiscoveryStreamSpocsFill
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
DISCOVERY_STREAM_SPOCS_FILL
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
/
*
*
*
UndesiredEvent
-
A
telemetry
ping
indicating
an
undesired
state
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
(
value
etc
.
)
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
return
{
object
}
An
action
.
For
UI
code
a
AlsoToMain
action
.
*
/
function
UndesiredEvent
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_UNDESIRED_EVENT
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
/
*
*
*
PerfEvent
-
A
telemetry
ping
indicating
a
performance
-
related
event
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
(
value
etc
.
)
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
return
{
object
}
An
action
.
For
UI
code
a
AlsoToMain
action
.
*
/
function
PerfEvent
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_PERFORMANCE_EVENT
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
/
*
*
*
ImpressionStats
-
A
telemetry
ping
indicating
an
impression
stats
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
#
return
{
object
}
An
action
.
For
UI
code
a
AlsoToMain
action
.
*
/
function
ImpressionStats
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
TELEMETRY_IMPRESSION_STATS
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
/
*
*
*
DiscoveryStreamImpressionStats
-
A
telemetry
ping
indicating
an
impression
stats
in
Discovery
Stream
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
#
return
{
object
}
An
action
.
For
UI
code
a
AlsoToMain
action
.
*
/
function
DiscoveryStreamImpressionStats
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
DISCOVERY_STREAM_IMPRESSION_STATS
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
/
*
*
*
DiscoveryStreamLoadedContent
-
A
telemetry
ping
indicating
a
content
gets
loaded
in
Discovery
Stream
.
*
*
param
{
object
}
data
Fields
to
include
in
the
ping
*
param
{
int
}
importContext
(
For
testing
)
Override
the
import
context
for
testing
.
*
#
return
{
object
}
An
action
.
For
UI
code
a
AlsoToMain
action
.
*
/
function
DiscoveryStreamLoadedContent
(
data
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
DISCOVERY_STREAM_LOADED_CONTENT
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
SetPref
(
name
value
importContext
=
globalImportContext
)
{
const
action
=
{
type
:
actionTypes
.
SET_PREF
data
:
{
name
value
}
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
function
WebExtEvent
(
type
data
importContext
=
globalImportContext
)
{
if
(
!
data
|
|
!
data
.
source
)
{
throw
new
Error
(
'
WebExtEvent
actions
should
include
a
property
"
source
"
the
id
of
the
webextension
that
should
receive
the
event
.
'
)
;
}
const
action
=
{
type
data
}
;
return
importContext
=
=
=
UI_CODE
?
AlsoToMain
(
action
)
:
action
;
}
var
actionCreators
=
{
BroadcastToContent
UserEvent
ASRouterUserEvent
UndesiredEvent
PerfEvent
ImpressionStats
AlsoToOneContent
OnlyToOneContent
AlsoToMain
OnlyToMain
AlsoToPreloaded
SetPref
WebExtEvent
DiscoveryStreamImpressionStats
DiscoveryStreamLoadedContent
DiscoveryStreamSpocsFill
}
;
/
/
These
are
helpers
to
test
for
certain
kinds
of
actions
var
actionUtils
=
{
isSendToMain
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
to
=
=
=
MAIN_MESSAGE_TYPE
&
&
action
.
meta
.
from
=
=
=
CONTENT_MESSAGE_TYPE
;
}
isBroadcastToContent
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
if
(
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
&
&
!
action
.
meta
.
toTarget
)
{
return
true
;
}
return
false
;
}
isSendToOneContent
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
if
(
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
&
&
action
.
meta
.
toTarget
)
{
return
true
;
}
return
false
;
}
isSendToPreloaded
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
to
=
=
=
PRELOAD_MESSAGE_TYPE
&
&
action
.
meta
.
from
=
=
=
MAIN_MESSAGE_TYPE
;
}
isFromMain
(
action
)
{
if
(
!
action
.
meta
)
{
return
false
;
}
return
action
.
meta
.
from
=
=
=
MAIN_MESSAGE_TYPE
&
&
action
.
meta
.
to
=
=
=
CONTENT_MESSAGE_TYPE
;
}
getPortIdOfSender
(
action
)
{
return
action
.
meta
&
&
action
.
meta
.
fromTarget
|
|
null
;
}
_RouteMessage
}
;
/
*
*
*
/
}
)
/
*
3
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_Base
"
function
(
)
{
return
_Base
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
BaseContent
"
function
(
)
{
return
BaseContent
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Base
"
function
(
)
{
return
Base
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
4
)
;
/
*
harmony
import
*
/
var
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
5
)
;
/
*
harmony
import
*
/
var
content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
30
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamBase_DiscoveryStreamBase__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
31
)
;
/
*
harmony
import
*
/
var
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
47
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_7___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_7__
)
;
/
*
harmony
import
*
/
var
content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
76
)
;
/
*
harmony
import
*
/
var
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
59
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
PrefsButton
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
prefs
-
button
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
button
"
{
className
:
"
icon
icon
-
settings
"
onClick
:
props
.
onClick
"
data
-
l10n
-
id
"
:
"
newtab
-
settings
-
button
"
}
)
)
;
/
/
Returns
a
function
will
not
be
continuously
triggered
when
called
.
The
/
/
function
will
be
triggered
if
called
again
after
wait
milliseconds
.
function
debounce
(
func
wait
)
{
let
timer
;
return
(
.
.
.
args
)
=
>
{
if
(
timer
)
{
return
;
}
let
wakeUp
=
(
)
=
>
{
timer
=
null
;
}
;
timer
=
setTimeout
(
wakeUp
wait
)
;
func
.
apply
(
this
args
)
;
}
;
}
class
_Base
extends
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
PureComponent
{
componentWillMount
(
)
{
if
(
this
.
props
.
isFirstrun
)
{
global
.
document
.
body
.
classList
.
add
(
"
welcome
"
"
hide
-
main
"
)
;
}
}
componentWillUnmount
(
)
{
this
.
updateTheme
(
)
;
}
componentWillUpdate
(
)
{
this
.
updateTheme
(
)
;
}
updateTheme
(
)
{
const
bodyClassName
=
[
"
activity
-
stream
"
/
/
If
we
skipped
the
about
:
welcome
overlay
and
removed
the
CSS
classes
/
/
we
don
'
t
want
to
add
them
back
to
the
Activity
Stream
view
document
.
body
.
classList
.
contains
(
"
welcome
"
)
?
"
welcome
"
:
"
"
document
.
body
.
classList
.
contains
(
"
hide
-
main
"
)
?
"
hide
-
main
"
:
"
"
document
.
body
.
classList
.
contains
(
"
inline
-
onboarding
"
)
?
"
inline
-
onboarding
"
:
"
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
global
.
document
.
body
.
className
=
bodyClassName
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
App
}
=
props
;
const
isDevtoolsEnabled
=
props
.
Prefs
.
values
[
"
asrouter
.
devtoolsEnabled
"
]
;
if
(
!
App
.
initialized
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__
[
"
ErrorBoundary
"
]
{
className
:
"
base
-
content
-
fallback
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
BaseContent
this
.
props
)
isDevtoolsEnabled
?
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterAdmin
"
]
null
)
:
null
)
)
;
}
}
class
BaseContent
extends
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
openPreferences
=
this
.
openPreferences
.
bind
(
this
)
;
this
.
onWindowScroll
=
debounce
(
this
.
onWindowScroll
.
bind
(
this
)
5
)
;
this
.
state
=
{
fixedSearch
:
false
}
;
}
componentDidMount
(
)
{
global
.
addEventListener
(
"
scroll
"
this
.
onWindowScroll
)
;
}
componentWillUnmount
(
)
{
global
.
removeEventListener
(
"
scroll
"
this
.
onWindowScroll
)
;
}
onWindowScroll
(
)
{
const
SCROLL_THRESHOLD
=
34
;
if
(
global
.
scrollY
>
SCROLL_THRESHOLD
&
&
!
this
.
state
.
fixedSearch
)
{
this
.
setState
(
{
fixedSearch
:
true
}
)
;
}
else
if
(
global
.
scrollY
<
=
SCROLL_THRESHOLD
&
&
this
.
state
.
fixedSearch
)
{
this
.
setState
(
{
fixedSearch
:
false
}
)
;
}
}
openPreferences
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SETTINGS_OPEN
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
OPEN_NEWTAB_PREFS
"
}
)
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
App
}
=
props
;
const
{
initialized
}
=
App
;
const
prefs
=
props
.
Prefs
.
values
;
const
isDiscoveryStream
=
props
.
DiscoveryStream
.
config
&
&
props
.
DiscoveryStream
.
config
.
enabled
;
let
filteredSections
=
props
.
Sections
;
/
/
Filter
out
highlights
for
DS
if
(
isDiscoveryStream
)
{
filteredSections
=
filteredSections
.
filter
(
section
=
>
section
.
id
!
=
=
"
highlights
"
)
;
}
const
noSectionsEnabled
=
!
prefs
[
"
feeds
.
topsites
"
]
&
&
filteredSections
.
filter
(
section
=
>
section
.
enabled
)
.
length
=
=
=
0
;
const
searchHandoffEnabled
=
prefs
[
"
improvesearch
.
handoffToAwesomebar
"
]
;
const
outerClassName
=
[
"
outer
-
wrapper
"
isDiscoveryStream
&
&
"
ds
-
outer
-
wrapper
-
search
-
alignment
"
isDiscoveryStream
&
&
"
ds
-
outer
-
wrapper
-
breakpoint
-
override
"
prefs
.
showSearch
&
&
this
.
state
.
fixedSearch
&
&
!
noSectionsEnabled
&
&
"
fixed
-
search
"
prefs
.
showSearch
&
&
noSectionsEnabled
&
&
"
only
-
search
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
outerClassName
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
main
"
null
prefs
.
showSearch
&
&
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
non
-
collapsible
-
section
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__
[
"
ErrorBoundary
"
]
null
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_8__
[
"
Search
"
]
_extends
(
{
showLogo
:
noSectionsEnabled
handoffEnabled
:
searchHandoffEnabled
}
props
.
Search
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__
[
"
ASRouterUISurface
"
]
{
appUpdateChannel
:
this
.
props
.
Prefs
.
values
.
appUpdateChannel
fxaEndpoint
:
this
.
props
.
Prefs
.
values
.
fxa_endpoint
dispatch
:
this
.
props
.
dispatch
}
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
body
-
wrapper
{
initialized
?
"
on
"
:
"
"
}
}
isDiscoveryStream
?
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__
[
"
ErrorBoundary
"
]
{
className
:
"
borderless
-
error
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamBase_DiscoveryStreamBase__WEBPACK_IMPORTED_MODULE_5__
[
"
DiscoveryStreamBase
"
]
null
)
)
:
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_9__
[
"
Sections
"
]
null
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
PrefsButton
{
onClick
:
this
.
openPreferences
}
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__
[
"
ConfirmDialog
"
]
null
)
)
)
)
;
}
}
const
Base
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
[
"
connect
"
]
)
(
state
=
>
(
{
App
:
state
.
App
Prefs
:
state
.
Prefs
Sections
:
state
.
Sections
DiscoveryStream
:
state
.
DiscoveryStream
Search
:
state
.
Search
}
)
)
(
_Base
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
4
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ToggleStoryButton
"
function
(
)
{
return
ToggleStoryButton
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TogglePrefCheckbox
"
function
(
)
{
return
TogglePrefCheckbox
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DiscoveryStreamAdmin
"
function
(
)
{
return
DiscoveryStreamAdmin
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterAdminInner
"
function
(
)
{
return
ASRouterAdminInner
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
CollapseToggle
"
function
(
)
{
return
CollapseToggle
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterAdmin
"
function
(
)
{
return
ASRouterAdmin
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
5
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
harmony
import
*
/
var
_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
21
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
_SimpleHashRouter__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
29
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
Row
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
_extends
(
{
className
:
"
message
-
item
"
}
props
)
props
.
children
)
;
function
relativeTime
(
timestamp
)
{
if
(
!
timestamp
)
{
return
"
"
;
}
const
seconds
=
Math
.
floor
(
(
Date
.
now
(
)
-
timestamp
)
/
1000
)
;
const
minutes
=
Math
.
floor
(
(
Date
.
now
(
)
-
timestamp
)
/
60000
)
;
if
(
seconds
<
2
)
{
return
"
just
now
"
;
}
else
if
(
seconds
<
60
)
{
return
{
seconds
}
seconds
ago
;
}
else
if
(
minutes
=
=
=
1
)
{
return
"
1
minute
ago
"
;
}
else
if
(
minutes
<
600
)
{
return
{
minutes
}
minutes
ago
;
}
return
new
Date
(
timestamp
)
.
toLocaleString
(
)
;
}
const
LAYOUT_VARIANTS
=
{
basic
:
"
Basic
default
layout
(
on
by
default
in
nightly
)
"
staging_spocs
:
"
A
layout
with
all
spocs
shown
"
"
dev
-
test
-
all
"
:
"
A
little
bit
of
everything
.
Good
layout
for
testing
all
components
"
"
dev
-
test
-
feeds
"
:
"
Stress
testing
for
slow
feeds
"
}
;
class
ToggleStoryButton
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleClick
=
this
.
handleClick
.
bind
(
this
)
;
}
handleClick
(
)
{
this
.
props
.
onClick
(
this
.
props
.
story
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
handleClick
}
"
collapse
/
open
"
)
;
}
}
class
TogglePrefCheckbox
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
}
onChange
(
event
)
{
this
.
props
.
onChange
(
this
.
props
.
pref
event
.
target
.
checked
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
checked
:
this
.
props
.
checked
onChange
:
this
.
onChange
}
)
"
"
this
.
props
.
pref
"
"
)
;
}
}
class
DiscoveryStreamAdmin
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
restorePrefDefaults
=
this
.
restorePrefDefaults
.
bind
(
this
)
;
this
.
setConfigValue
=
this
.
setConfigValue
.
bind
(
this
)
;
this
.
expireCache
=
this
.
expireCache
.
bind
(
this
)
;
this
.
changeEndpointVariant
=
this
.
changeEndpointVariant
.
bind
(
this
)
;
this
.
onStoryToggle
=
this
.
onStoryToggle
.
bind
(
this
)
;
this
.
state
=
{
toggledStories
:
{
}
}
;
}
setConfigValue
(
name
value
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_CONFIG_SET_VALUE
data
:
{
name
value
}
}
)
)
;
}
restorePrefDefaults
(
event
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_CONFIG_RESET_DEFAULTS
}
)
)
;
}
expireCache
(
)
{
const
{
config
}
=
this
.
props
.
state
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_CONFIG_CHANGE
data
:
config
}
)
)
;
}
changeEndpointVariant
(
event
)
{
const
endpoint
=
this
.
props
.
state
.
config
.
layout_endpoint
;
if
(
endpoint
)
{
this
.
setConfigValue
(
"
layout_endpoint
"
endpoint
.
replace
(
/
layout_variant
=
.
+
/
layout_variant
=
{
event
.
target
.
value
}
)
)
;
}
}
renderComponent
(
width
component
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Type
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
component
.
type
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Width
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
width
)
)
component
.
feed
&
&
this
.
renderFeed
(
component
.
feed
)
)
)
;
}
isCurrentVariant
(
id
)
{
const
endpoint
=
this
.
props
.
state
.
config
.
layout_endpoint
;
const
isMatch
=
endpoint
&
&
!
!
endpoint
.
match
(
layout_variant
=
{
id
}
)
;
return
isMatch
;
}
renderFeedData
(
url
)
{
const
{
feeds
}
=
this
.
props
.
state
;
const
feed
=
feeds
.
data
[
url
]
.
data
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h4
"
null
"
Feed
url
:
"
url
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
feed
.
recommendations
.
map
(
story
=
>
this
.
renderStoryData
(
story
)
)
)
)
)
;
}
renderFeedsData
(
)
{
const
{
feeds
}
=
this
.
props
.
state
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
Object
.
keys
(
feeds
.
data
)
.
map
(
url
=
>
this
.
renderFeedData
(
url
)
)
)
;
}
renderSpocs
(
)
{
const
{
spocs
}
=
this
.
props
.
state
;
let
spocsData
=
[
]
;
if
(
spocs
.
data
&
&
spocs
.
data
.
spocs
&
&
spocs
.
data
.
spocs
.
length
)
{
spocsData
=
spocs
.
data
.
spocs
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
spocs_endpoint
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
spocs
.
spocs_endpoint
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Data
last
fetched
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
relativeTime
(
spocs
.
lastUpdated
)
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h4
"
null
"
Spoc
data
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
spocsData
.
map
(
spoc
=
>
this
.
renderStoryData
(
spoc
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h4
"
null
"
Spoc
frequency
caps
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
spocs
.
frequency_caps
.
map
(
spoc
=
>
this
.
renderStoryData
(
spoc
)
)
)
)
)
;
}
onStoryToggle
(
story
)
{
const
{
toggledStories
}
=
this
.
state
;
this
.
setState
(
{
toggledStories
:
{
.
.
.
toggledStories
[
story
.
id
]
:
!
toggledStories
[
story
.
id
]
}
}
)
;
}
renderStoryData
(
story
)
{
let
storyData
=
"
"
;
if
(
this
.
state
.
toggledStories
[
story
.
id
]
)
{
storyData
=
JSON
.
stringify
(
story
null
2
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
key
:
story
.
id
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
null
story
.
id
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
br
"
null
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
ToggleStoryButton
{
story
:
story
onClick
:
this
.
onStoryToggle
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
summary
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
pre
"
null
storyData
)
)
)
;
}
renderFeed
(
feed
)
{
const
{
feeds
}
=
this
.
props
.
state
;
if
(
!
feed
.
url
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Feed
url
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
feed
.
url
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Data
last
fetched
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
relativeTime
(
feeds
.
data
[
feed
.
url
]
?
feeds
.
data
[
feed
.
url
]
.
lastUpdated
:
null
)
|
|
"
(
no
data
)
"
)
)
)
;
}
render
(
)
{
const
prefToggles
=
"
enabled
hardcoded_layout
show_spocs
personalized
collapsible
"
.
split
(
"
"
)
;
const
{
config
lastUpdated
layout
}
=
this
.
props
.
state
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
restorePrefDefaults
}
"
Restore
Pref
Defaults
"
)
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
expireCache
}
"
Expire
Cache
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
prefToggles
.
map
(
pref
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
{
key
:
pref
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TogglePrefCheckbox
{
checked
:
config
[
pref
]
pref
:
pref
onChange
:
this
.
setConfigValue
}
)
)
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h3
"
null
"
Endpoint
variant
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
"
You
can
also
change
this
manually
by
changing
this
pref
:
"
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
code
"
null
"
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
config
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
{
style
:
config
.
enabled
&
&
!
config
.
hardcoded_layout
?
null
:
{
opacity
:
0
.
5
}
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
Object
.
keys
(
LAYOUT_VARIANTS
)
.
map
(
id
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
{
key
:
id
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
radio
"
value
:
id
checked
:
this
.
isCurrentVariant
(
id
)
onChange
:
this
.
changeEndpointVariant
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
id
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
LAYOUT_VARIANTS
[
id
]
)
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h3
"
null
"
Caching
info
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
{
style
:
config
.
enabled
?
null
:
{
opacity
:
0
.
5
}
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
Row
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Data
last
fetched
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
relativeTime
(
lastUpdated
)
|
|
"
(
no
data
)
"
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h3
"
null
"
Layout
"
)
layout
.
map
(
(
row
rowIndex
)
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
key
:
row
-
{
rowIndex
}
}
row
.
components
.
map
(
(
component
componentIndex
)
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
key
:
component
-
{
componentIndex
}
className
:
"
ds
-
component
"
}
this
.
renderComponent
(
row
.
width
component
)
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h3
"
null
"
Feeds
Data
"
)
this
.
renderFeedsData
(
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h3
"
null
"
Spocs
"
)
this
.
renderSpocs
(
)
)
;
}
}
class
ASRouterAdminInner
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
this
.
handleEnabledToggle
=
this
.
handleEnabledToggle
.
bind
(
this
)
;
this
.
handleUserPrefToggle
=
this
.
handleUserPrefToggle
.
bind
(
this
)
;
this
.
onChangeMessageFilter
=
this
.
onChangeMessageFilter
.
bind
(
this
)
;
this
.
findOtherBundledMessagesOfSameTemplate
=
this
.
findOtherBundledMessagesOfSameTemplate
.
bind
(
this
)
;
this
.
handleExpressionEval
=
this
.
handleExpressionEval
.
bind
(
this
)
;
this
.
onChangeTargetingParameters
=
this
.
onChangeTargetingParameters
.
bind
(
this
)
;
this
.
onChangeAttributionParameters
=
this
.
onChangeAttributionParameters
.
bind
(
this
)
;
this
.
setAttribution
=
this
.
setAttribution
.
bind
(
this
)
;
this
.
onCopyTargetingParams
=
this
.
onCopyTargetingParams
.
bind
(
this
)
;
this
.
onPasteTargetingParams
=
this
.
onPasteTargetingParams
.
bind
(
this
)
;
this
.
onNewTargetingParams
=
this
.
onNewTargetingParams
.
bind
(
this
)
;
this
.
state
=
{
messageFilter
:
"
all
"
evaluationStatus
:
{
}
trailhead
:
{
}
stringTargetingParameters
:
null
newStringTargetingParameters
:
null
copiedToClipboard
:
false
pasteFromClipboard
:
false
attributionParameters
:
{
source
:
"
addons
.
mozilla
.
org
"
campaign
:
"
non
-
fx
-
button
"
content
:
"
iridium
particlecore
.
github
.
io
"
}
}
;
}
onMessage
(
{
data
:
action
}
)
{
if
(
action
.
type
=
=
=
"
ADMIN_SET_STATE
"
)
{
this
.
setState
(
action
.
data
)
;
if
(
!
this
.
state
.
stringTargetingParameters
)
{
const
stringTargetingParameters
=
{
}
;
for
(
const
param
of
Object
.
keys
(
action
.
data
.
targetingParameters
)
)
{
stringTargetingParameters
[
param
]
=
JSON
.
stringify
(
action
.
data
.
targetingParameters
[
param
]
null
2
)
;
}
this
.
setState
(
{
stringTargetingParameters
}
)
;
}
}
}
componentWillMount
(
)
{
const
endpoint
=
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
getPreviewEndpoint
(
)
;
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
ADMIN_CONNECT_STATE
"
data
:
{
endpoint
}
}
)
;
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
addListener
(
this
.
onMessage
)
;
}
componentWillUnmount
(
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
removeListener
(
this
.
onMessage
)
;
}
findOtherBundledMessagesOfSameTemplate
(
template
)
{
return
this
.
state
.
messages
.
filter
(
msg
=
>
msg
.
template
=
=
=
template
&
&
msg
.
bundled
)
;
}
handleBlock
(
msg
)
{
if
(
msg
.
bundled
)
{
/
/
If
we
are
blocking
a
message
that
belongs
to
a
bundle
block
all
other
messages
that
are
bundled
of
that
same
template
let
bundle
=
this
.
findOtherBundledMessagesOfSameTemplate
(
msg
.
template
)
;
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
blockBundle
(
bundle
)
;
}
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
blockById
(
msg
.
id
)
;
}
handleUnblock
(
msg
)
{
if
(
msg
.
bundled
)
{
/
/
If
we
are
unblocking
a
message
that
belongs
to
a
bundle
unblock
all
other
messages
that
are
bundled
of
that
same
template
let
bundle
=
this
.
findOtherBundledMessagesOfSameTemplate
(
msg
.
template
)
;
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
unblockBundle
(
bundle
)
;
}
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
unblockById
(
msg
.
id
)
;
}
handleOverride
(
id
)
{
return
(
)
=
>
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
overrideMessage
(
id
)
;
}
expireCache
(
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
EXPIRE_QUERY_CACHE
"
}
)
;
}
resetPref
(
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
RESET_PROVIDER_PREF
"
}
)
;
}
handleExpressionEval
(
)
{
const
context
=
{
}
;
for
(
const
param
of
Object
.
keys
(
this
.
state
.
stringTargetingParameters
)
)
{
const
value
=
this
.
state
.
stringTargetingParameters
[
param
]
;
context
[
param
]
=
value
?
JSON
.
parse
(
value
)
:
null
;
}
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
EVALUATE_JEXL_EXPRESSION
"
data
:
{
expression
:
this
.
refs
.
expressionInput
.
value
context
}
}
)
;
}
onChangeTargetingParameters
(
event
)
{
const
{
name
}
=
event
.
target
;
const
{
value
}
=
event
.
target
;
this
.
setState
(
(
{
stringTargetingParameters
}
)
=
>
{
let
targetingParametersError
=
null
;
const
updatedParameters
=
{
.
.
.
stringTargetingParameters
}
;
updatedParameters
[
name
]
=
value
;
try
{
JSON
.
parse
(
value
)
;
}
catch
(
e
)
{
console
.
log
(
Error
parsing
value
of
parameter
{
name
}
)
;
/
/
eslint
-
disable
-
line
no
-
console
targetingParametersError
=
{
id
:
name
}
;
}
return
{
copiedToClipboard
:
false
evaluationStatus
:
{
}
stringTargetingParameters
:
updatedParameters
targetingParametersError
}
;
}
)
;
}
handleEnabledToggle
(
event
)
{
const
provider
=
this
.
state
.
providerPrefs
.
find
(
p
=
>
p
.
id
=
=
=
event
.
target
.
dataset
.
provider
)
;
const
userPrefInfo
=
this
.
state
.
userPrefs
;
const
isUserEnabled
=
provider
.
id
in
userPrefInfo
?
userPrefInfo
[
provider
.
id
]
:
true
;
const
isSystemEnabled
=
provider
.
enabled
;
const
isEnabling
=
event
.
target
.
checked
;
if
(
isEnabling
)
{
if
(
!
isUserEnabled
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
SET_PROVIDER_USER_PREF
"
data
:
{
id
:
provider
.
id
value
:
true
}
}
)
;
}
if
(
!
isSystemEnabled
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
ENABLE_PROVIDER
"
data
:
provider
.
id
}
)
;
}
}
else
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
DISABLE_PROVIDER
"
data
:
provider
.
id
}
)
;
}
this
.
setState
(
{
messageFilter
:
"
all
"
}
)
;
}
handleUserPrefToggle
(
event
)
{
const
action
=
{
type
:
"
SET_PROVIDER_USER_PREF
"
data
:
{
id
:
event
.
target
.
dataset
.
provider
value
:
event
.
target
.
checked
}
}
;
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
action
)
;
this
.
setState
(
{
messageFilter
:
"
all
"
}
)
;
}
onChangeMessageFilter
(
event
)
{
this
.
setState
(
{
messageFilter
:
event
.
target
.
value
}
)
;
}
/
/
Simulate
a
copy
event
that
sets
to
clipboard
all
targeting
paramters
and
values
onCopyTargetingParams
(
event
)
{
const
stringTargetingParameters
=
{
.
.
.
this
.
state
.
stringTargetingParameters
}
;
for
(
const
key
of
Object
.
keys
(
stringTargetingParameters
)
)
{
/
/
If
the
value
is
not
set
the
parameter
will
be
lost
when
we
stringify
if
(
stringTargetingParameters
[
key
]
=
=
=
undefined
)
{
stringTargetingParameters
[
key
]
=
null
;
}
}
const
setClipboardData
=
e
=
>
{
e
.
preventDefault
(
)
;
e
.
clipboardData
.
setData
(
"
text
"
JSON
.
stringify
(
stringTargetingParameters
null
2
)
)
;
document
.
removeEventListener
(
"
copy
"
setClipboardData
)
;
this
.
setState
(
{
copiedToClipboard
:
true
}
)
;
}
;
document
.
addEventListener
(
"
copy
"
setClipboardData
)
;
document
.
execCommand
(
"
copy
"
)
;
}
/
/
Copy
all
clipboard
data
to
targeting
parameters
onPasteTargetingParams
(
event
)
{
this
.
setState
(
(
{
pasteFromClipboard
}
)
=
>
(
{
pasteFromClipboard
:
!
pasteFromClipboard
newStringTargetingParameters
:
"
"
}
)
)
;
}
onNewTargetingParams
(
event
)
{
this
.
setState
(
{
newStringTargetingParameters
:
event
.
target
.
value
}
)
;
event
.
target
.
classList
.
remove
(
"
errorState
"
)
;
this
.
refs
.
targetingParamsEval
.
innerText
=
"
"
;
try
{
const
stringTargetingParameters
=
JSON
.
parse
(
event
.
target
.
value
)
;
this
.
setState
(
{
stringTargetingParameters
}
)
;
}
catch
(
e
)
{
event
.
target
.
classList
.
add
(
"
errorState
"
)
;
this
.
refs
.
targetingParamsEval
.
innerText
=
e
.
message
;
}
}
renderMessageItem
(
msg
)
{
const
isBlocked
=
this
.
state
.
messageBlockList
.
includes
(
msg
.
id
)
|
|
this
.
state
.
messageBlockList
.
includes
(
msg
.
campaign
)
;
const
impressions
=
this
.
state
.
messageImpressions
[
msg
.
id
]
?
this
.
state
.
messageImpressions
[
msg
.
id
]
.
length
:
0
;
let
itemClassName
=
"
message
-
item
"
;
if
(
isBlocked
)
{
itemClassName
+
=
"
blocked
"
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
itemClassName
key
:
{
msg
.
id
}
-
{
msg
.
provider
}
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
null
msg
.
id
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
br
"
null
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
button
{
isBlocked
?
"
"
:
"
primary
"
}
onClick
:
isBlocked
?
this
.
handleUnblock
(
msg
)
:
this
.
handleBlock
(
msg
)
}
isBlocked
?
"
Unblock
"
:
"
Block
"
)
isBlocked
?
null
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
handleOverride
(
msg
.
id
)
}
"
Show
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
br
"
null
)
"
(
"
impressions
"
impressions
)
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
summary
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
pre
"
null
JSON
.
stringify
(
msg
null
2
)
)
)
)
;
}
renderMessages
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
const
messagesToShow
=
this
.
state
.
messageFilter
=
=
=
"
all
"
?
this
.
state
.
messages
:
this
.
state
.
messages
.
filter
(
message
=
>
message
.
provider
=
=
=
this
.
state
.
messageFilter
)
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
messagesToShow
.
map
(
msg
=
>
this
.
renderMessageItem
(
msg
)
)
)
)
;
}
renderMessageFilter
(
)
{
if
(
!
this
.
state
.
providers
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
"
Show
messages
from
"
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
select
"
{
value
:
this
.
state
.
messageFilter
onChange
:
this
.
onChangeMessageFilter
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
option
"
{
value
:
"
all
"
}
"
all
providers
"
)
this
.
state
.
providers
.
map
(
provider
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
option
"
{
key
:
provider
.
id
value
:
provider
.
id
}
provider
.
id
)
)
)
)
;
}
renderTableHead
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
thead
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Provider
ID
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
Source
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Cohort
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Last
Updated
"
)
)
)
;
}
renderProviders
(
)
{
const
providersConfig
=
this
.
state
.
providerPrefs
;
const
providerInfo
=
this
.
state
.
providers
;
const
userPrefInfo
=
this
.
state
.
userPrefs
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
this
.
renderTableHead
(
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
providersConfig
.
map
(
(
provider
i
)
=
>
{
const
isTestProvider
=
provider
.
id
.
includes
(
"
_local_testing
"
)
;
const
info
=
providerInfo
.
find
(
p
=
>
p
.
id
=
=
=
provider
.
id
)
|
|
{
}
;
const
isUserEnabled
=
provider
.
id
in
userPrefInfo
?
userPrefInfo
[
provider
.
id
]
:
true
;
const
isSystemEnabled
=
isTestProvider
|
|
provider
.
enabled
;
let
label
=
"
local
"
;
if
(
provider
.
type
=
=
=
"
remote
"
)
{
label
=
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
null
"
endpoint
(
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
className
:
"
providerUrl
"
target
:
"
_blank
"
href
:
info
.
url
rel
:
"
noopener
noreferrer
"
}
info
.
url
)
"
)
"
)
;
}
else
if
(
provider
.
type
=
=
=
"
remote
-
settings
"
)
{
label
=
remote
settings
(
{
provider
.
bucket
}
)
;
}
let
reasonsDisabled
=
[
]
;
if
(
!
isSystemEnabled
)
{
reasonsDisabled
.
push
(
"
system
pref
"
)
;
}
if
(
!
isUserEnabled
)
{
reasonsDisabled
.
push
(
"
user
pref
"
)
;
}
if
(
reasonsDisabled
.
length
)
{
label
=
disabled
via
{
reasonsDisabled
.
join
(
"
"
)
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
key
:
i
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
isTestProvider
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
disabled
:
true
readOnly
:
true
checked
:
true
}
)
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
"
data
-
provider
"
:
provider
.
id
checked
:
isUserEnabled
&
&
isSystemEnabled
onChange
:
this
.
handleEnabledToggle
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
provider
.
id
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
sourceLabel
{
isUserEnabled
&
&
isSystemEnabled
?
"
"
:
"
isDisabled
"
}
}
label
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
provider
.
cohort
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
style
:
{
whiteSpace
:
"
nowrap
"
}
}
info
.
lastUpdated
?
new
Date
(
info
.
lastUpdated
)
.
toLocaleString
(
)
:
"
"
)
)
;
}
)
)
)
;
}
renderPasteModal
(
)
{
if
(
!
this
.
state
.
pasteFromClipboard
)
{
return
null
;
}
const
errors
=
this
.
refs
.
targetingParamsEval
&
&
this
.
refs
.
targetingParamsEval
.
innerText
.
length
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_3__
[
"
ModalOverlay
"
]
{
innerStyle
:
"
pasteModal
"
title
:
"
New
targeting
parameters
"
button_label
:
errors
?
"
Cancel
"
:
"
Done
"
onDismissBundle
:
this
.
onPasteTargetingParams
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
onboardingMessage
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
textarea
"
{
onChange
:
this
.
onNewTargetingParams
value
:
this
.
state
.
newStringTargetingParameters
rows
:
"
20
"
cols
:
"
60
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
ref
:
"
targetingParamsEval
"
}
)
)
)
;
}
renderTargetingParameters
(
)
{
/
/
There
was
no
error
and
the
result
is
truthy
const
success
=
this
.
state
.
evaluationStatus
.
success
&
&
!
!
this
.
state
.
evaluationStatus
.
result
;
const
result
=
JSON
.
stringify
(
this
.
state
.
evaluationStatus
.
result
null
2
)
|
|
"
(
Empty
result
)
"
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Evaluate
JEXL
expression
"
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
textarea
"
{
ref
:
"
expressionInput
"
rows
:
"
10
"
cols
:
"
60
"
placeholder
:
"
Evaluate
JEXL
expressions
and
mock
parameters
by
changing
their
values
below
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
"
Status
:
"
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
ref
:
"
evaluationStatus
"
}
success
?
"
"
:
"
"
"
Result
:
"
result
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
handleExpressionEval
}
"
Evaluate
"
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Modify
targeting
parameters
"
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
onCopyTargetingParams
disabled
:
this
.
state
.
copiedToClipboard
}
this
.
state
.
copiedToClipboard
?
"
Parameters
copied
!
"
:
"
Copy
parameters
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
onPasteTargetingParams
disabled
:
this
.
state
.
pasteFromClipboard
}
"
Paste
parameters
"
)
)
)
this
.
state
.
stringTargetingParameters
&
&
Object
.
keys
(
this
.
state
.
stringTargetingParameters
)
.
map
(
(
param
i
)
=
>
{
const
value
=
this
.
state
.
stringTargetingParameters
[
param
]
;
const
errorState
=
this
.
state
.
targetingParametersError
&
&
this
.
state
.
targetingParametersError
.
id
=
=
=
param
;
const
className
=
errorState
?
"
errorState
"
:
"
"
;
const
inputComp
=
(
value
&
&
value
.
length
)
>
30
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
textarea
"
{
name
:
param
className
:
className
value
:
value
rows
:
"
10
"
cols
:
"
60
"
onChange
:
this
.
onChangeTargetingParameters
}
)
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
name
:
param
className
:
className
value
:
value
onChange
:
this
.
onChangeTargetingParameters
}
)
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
key
:
i
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
param
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
inputComp
)
)
;
}
)
)
)
;
}
onChangeAttributionParameters
(
event
)
{
const
{
name
value
}
=
event
.
target
;
this
.
setState
(
(
{
attributionParameters
}
)
=
>
{
const
updatedParameters
=
{
.
.
.
attributionParameters
}
;
updatedParameters
[
name
]
=
value
;
return
{
attributionParameters
:
updatedParameters
}
;
}
)
;
}
setAttribution
(
e
)
{
_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__
[
"
ASRouterUtils
"
]
.
sendMessage
(
{
type
:
"
FORCE_ATTRIBUTION
"
data
:
this
.
state
.
attributionParameters
}
)
;
}
renderPocketStory
(
story
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
key
:
story
.
guid
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
null
story
.
guid
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
br
"
null
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
message
-
summary
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
pre
"
null
JSON
.
stringify
(
story
null
2
)
)
)
)
;
}
renderPocketStories
(
)
{
const
{
rows
}
=
this
.
props
.
Sections
.
find
(
Section
=
>
Section
.
id
=
=
=
"
topstories
"
)
|
|
{
}
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
rows
&
&
rows
.
map
(
story
=
>
this
.
renderPocketStory
(
story
)
)
)
)
;
}
renderDiscoveryStream
(
)
{
const
{
config
}
=
this
.
props
.
DiscoveryStream
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Enabled
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
config
.
enabled
?
"
yes
"
:
"
no
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Endpoint
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
config
.
endpoint
|
|
"
(
empty
)
"
)
)
)
)
)
;
}
renderAttributionParamers
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Attribution
Parameters
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
"
"
"
This
forces
the
browser
to
set
some
attribution
parameters
useful
for
testing
the
Return
To
AMO
feature
.
Clicking
on
'
Force
Attribution
'
with
the
default
values
in
each
field
will
demo
the
Return
To
AMO
flow
with
the
addon
called
'
Iridium
for
Youtube
'
.
If
you
wish
to
try
different
attribution
parameters
enter
them
in
the
text
boxes
.
If
you
wish
to
try
a
different
addon
with
the
Return
To
AMO
flow
make
sure
the
'
content
'
text
box
has
the
addon
GUID
then
click
'
Force
Attribution
'
.
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
b
"
null
"
Source
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
source
"
placeholder
:
"
addons
.
mozilla
.
org
"
value
:
this
.
state
.
attributionParameters
.
source
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
b
"
null
"
Campaign
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
campaign
"
placeholder
:
"
non
-
fx
-
button
"
value
:
this
.
state
.
attributionParameters
.
campaign
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
b
"
null
"
Content
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
content
"
placeholder
:
"
iridium
particlecore
.
github
.
io
"
value
:
this
.
state
.
attributionParameters
.
content
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
primary
button
"
onClick
:
this
.
setAttribution
}
"
"
"
Force
Attribution
"
"
"
)
"
"
)
)
)
)
;
}
renderErrorMessage
(
{
id
errors
}
)
{
const
providerId
=
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
{
rowSpan
:
errors
.
length
}
id
)
;
/
/
.
reverse
(
)
so
that
the
last
error
(
most
recent
)
is
first
return
errors
.
map
(
(
{
error
timestamp
}
cellKey
)
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
{
key
:
cellKey
}
cellKey
=
=
=
errors
.
length
-
1
?
providerId
:
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
error
.
message
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
relativeTime
(
timestamp
)
)
)
)
.
reverse
(
)
;
}
renderErrors
(
)
{
const
providersWithErrors
=
this
.
state
.
providers
&
&
this
.
state
.
providers
.
filter
(
p
=
>
p
.
errors
&
&
p
.
errors
.
length
)
;
if
(
providersWithErrors
&
&
providersWithErrors
.
length
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
{
className
:
"
errorReporting
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
thead
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
th
"
null
"
Provider
ID
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
th
"
null
"
Message
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
th
"
null
"
Timestamp
"
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
providersWithErrors
.
map
(
this
.
renderErrorMessage
)
)
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
null
"
No
errors
"
)
;
}
renderTrailheadInfo
(
)
{
const
{
trailheadInterrupt
trailheadTriplet
}
=
this
.
state
.
trailhead
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
table
"
{
className
:
"
minimal
-
table
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tbody
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
Interrupt
branch
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
trailheadInterrupt
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
tr
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
"
Triplet
branch
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
td
"
null
trailheadTriplet
)
)
)
)
;
}
getSection
(
)
{
const
[
section
]
=
this
.
props
.
location
.
routes
;
switch
(
section
)
{
case
"
targeting
"
:
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Targeting
Utilities
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
expireCache
}
"
Expire
Cache
"
)
"
"
"
(
This
expires
the
cache
in
ASR
Targeting
for
bookmarks
and
top
sites
)
"
this
.
renderTargetingParameters
(
)
this
.
renderAttributionParamers
(
)
)
;
case
"
pocket
"
:
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Pocket
"
)
this
.
renderPocketStories
(
)
)
;
case
"
ds
"
:
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Discovery
Stream
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
DiscoveryStreamAdmin
{
state
:
this
.
props
.
DiscoveryStream
otherPrefs
:
this
.
props
.
Prefs
.
values
dispatch
:
this
.
props
.
dispatch
}
)
)
;
case
"
errors
"
:
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
ASRouter
Errors
"
)
this
.
renderErrors
(
)
)
;
default
:
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Message
Providers
"
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
title
:
"
Restore
all
provider
settings
that
ship
with
Firefox
"
className
:
"
button
"
onClick
:
this
.
resetPref
}
"
Restore
default
prefs
"
)
)
this
.
state
.
providers
?
this
.
renderProviders
(
)
:
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Trailhead
"
)
this
.
renderTrailheadInfo
(
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
null
"
Messages
"
)
this
.
renderMessageFilter
(
)
this
.
renderMessages
(
)
this
.
renderPasteModal
(
)
)
;
}
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
asrouter
-
admin
{
this
.
props
.
collapsed
?
"
collapsed
"
:
"
expanded
"
}
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
aside
"
{
className
:
"
sidebar
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
ul
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
"
}
"
General
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
targeting
"
}
"
Targeting
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
pocket
"
}
"
Pocket
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
ds
"
}
"
Discovery
Stream
"
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
errors
"
}
"
Errors
"
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
main
"
{
className
:
"
main
-
panel
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h1
"
null
"
AS
Router
Admin
"
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
className
:
"
helpLink
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
info
"
}
)
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
null
"
Need
help
using
these
tools
?
Check
out
our
"
"
"
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
target
:
"
blank
"
href
:
"
https
:
/
/
github
.
com
/
mozilla
/
activity
-
stream
/
blob
/
master
/
content
-
src
/
asrouter
/
docs
/
debugging
-
docs
.
md
"
}
"
documentation
"
)
)
)
this
.
getSection
(
)
)
)
;
}
}
class
CollapseToggle
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onCollapseToggle
=
this
.
onCollapseToggle
.
bind
(
this
)
;
this
.
state
=
{
collapsed
:
false
}
;
}
get
renderAdmin
(
)
{
const
{
props
}
=
this
;
return
props
.
location
.
hash
&
&
(
props
.
location
.
hash
.
startsWith
(
"
#
asrouter
"
)
|
|
props
.
location
.
hash
.
startsWith
(
"
#
devtools
"
)
)
;
}
onCollapseToggle
(
e
)
{
e
.
preventDefault
(
)
;
this
.
setState
(
state
=
>
(
{
collapsed
:
!
state
.
collapsed
}
)
)
;
}
setBodyClass
(
)
{
if
(
this
.
renderAdmin
&
&
!
this
.
state
.
collapsed
)
{
global
.
document
.
body
.
classList
.
add
(
"
no
-
scroll
"
)
;
}
else
{
global
.
document
.
body
.
classList
.
remove
(
"
no
-
scroll
"
)
;
}
}
componentDidMount
(
)
{
this
.
setBodyClass
(
)
;
}
componentDidUpdate
(
)
{
this
.
setBodyClass
(
)
;
}
componentWillUnmount
(
)
{
global
.
document
.
body
.
classList
.
remove
(
"
no
-
scroll
"
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
renderAdmin
}
=
this
;
const
isCollapsed
=
this
.
state
.
collapsed
|
|
!
renderAdmin
;
const
label
=
{
isCollapsed
?
"
Expand
"
:
"
Collapse
"
}
devtools
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
href
:
"
#
devtools
"
title
:
label
"
aria
-
label
"
:
label
className
:
asrouter
-
toggle
{
isCollapsed
?
"
collapsed
"
:
"
expanded
"
}
onClick
:
this
.
renderAdmin
?
this
.
onCollapseToggle
:
null
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
devtools
"
}
)
)
renderAdmin
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
ASRouterAdminInner
_extends
(
{
}
props
{
collapsed
:
this
.
state
.
collapsed
}
)
)
:
null
)
;
}
}
const
_ASRouterAdmin
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_SimpleHashRouter__WEBPACK_IMPORTED_MODULE_5__
[
"
SimpleHashRouter
"
]
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
CollapseToggle
props
)
)
;
const
ASRouterAdmin
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
[
"
connect
"
]
)
(
state
=
>
(
{
Sections
:
state
.
Sections
DiscoveryStream
:
state
.
DiscoveryStream
Prefs
:
state
.
Prefs
}
)
)
(
_ASRouterAdmin
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
5
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterUtils
"
function
(
)
{
return
ASRouterUtils
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ASRouterUISurface
"
function
(
)
{
return
ASRouterUISurface
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
6
)
;
/
*
harmony
import
*
/
var
_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
80
)
;
/
*
harmony
import
*
/
var
_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
8
)
;
/
*
harmony
import
*
/
var
fluent_react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
78
)
;
/
*
harmony
import
*
/
var
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
11
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
12
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_7___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_7__
)
;
/
*
harmony
import
*
/
var
_templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
79
)
;
/
*
harmony
import
*
/
var
_templates_FirstRun_FirstRun__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
82
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
INCOMING_MESSAGE_NAME
=
"
ASRouter
:
parent
-
to
-
child
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ASRouter
:
child
-
to
-
parent
"
;
const
TEMPLATES_ABOVE_PAGE
=
[
"
trailhead
"
"
full_page_interrupt
"
"
return_to_amo_overlay
"
"
extended_triplets
"
]
;
const
FIRST_RUN_TEMPLATES
=
TEMPLATES_ABOVE_PAGE
;
const
TEMPLATES_BELOW_SEARCH
=
[
"
simple_below_search_snippet
"
]
;
const
ASRouterUtils
=
{
addListener
(
listener
)
{
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
INCOMING_MESSAGE_NAME
listener
)
;
}
}
removeListener
(
listener
)
{
if
(
global
.
RPMRemoveMessageListener
)
{
global
.
RPMRemoveMessageListener
(
INCOMING_MESSAGE_NAME
listener
)
;
}
}
sendMessage
(
action
)
{
if
(
global
.
RPMSendAsyncMessage
)
{
global
.
RPMSendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
}
blockById
(
id
options
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
BLOCK_MESSAGE_BY_ID
"
data
:
{
id
.
.
.
options
}
}
)
;
}
dismissById
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
DISMISS_MESSAGE_BY_ID
"
data
:
{
id
}
}
)
;
}
executeAction
(
button_action
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
USER_ACTION
"
data
:
button_action
}
)
;
}
unblockById
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
UNBLOCK_MESSAGE_BY_ID
"
data
:
{
id
}
}
)
;
}
unblockBundle
(
bundle
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
UNBLOCK_BUNDLE
"
data
:
{
bundle
}
}
)
;
}
overrideMessage
(
id
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
OVERRIDE_MESSAGE
"
data
:
{
id
}
}
)
;
}
sendTelemetry
(
ping
)
{
if
(
global
.
RPMSendAsyncMessage
)
{
const
payload
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ASRouterUserEvent
(
ping
)
;
global
.
RPMSendAsyncMessage
(
content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_1__
[
"
OUTGOING_MESSAGE_NAME
"
]
payload
)
;
}
}
getPreviewEndpoint
(
)
{
if
(
global
.
location
&
&
global
.
location
.
href
.
includes
(
"
endpoint
"
)
)
{
const
params
=
new
URLSearchParams
(
global
.
location
.
href
.
slice
(
global
.
location
.
href
.
indexOf
(
"
endpoint
"
)
)
)
;
try
{
const
endpoint
=
new
URL
(
params
.
get
(
"
endpoint
"
)
)
;
return
{
url
:
endpoint
.
href
snippetId
:
params
.
get
(
"
snippetId
"
)
theme
:
this
.
getPreviewTheme
(
)
}
;
}
catch
(
e
)
{
}
}
return
null
;
}
getPreviewTheme
(
)
{
return
new
URLSearchParams
(
global
.
location
.
href
.
slice
(
global
.
location
.
href
.
indexOf
(
"
theme
"
)
)
)
.
get
(
"
theme
"
)
;
}
}
;
/
/
Note
:
nextProps
/
prevProps
refer
to
props
passed
to
<
ImpressionsWrapper
/
>
not
<
ASRouterUISurface
/
>
function
shouldSendImpressionOnUpdate
(
nextProps
prevProps
)
{
return
nextProps
.
message
.
id
&
&
(
!
prevProps
.
message
|
|
prevProps
.
message
.
id
!
=
=
nextProps
.
message
.
id
)
;
}
class
ASRouterUISurface
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onMessageFromParent
=
this
.
onMessageFromParent
.
bind
(
this
)
;
this
.
sendClick
=
this
.
sendClick
.
bind
(
this
)
;
this
.
sendImpression
=
this
.
sendImpression
.
bind
(
this
)
;
this
.
sendUserActionTelemetry
=
this
.
sendUserActionTelemetry
.
bind
(
this
)
;
this
.
onUserAction
=
this
.
onUserAction
.
bind
(
this
)
;
this
.
fetchFlowParams
=
this
.
fetchFlowParams
.
bind
(
this
)
;
this
.
state
=
{
message
:
{
}
interruptCleared
:
false
}
;
if
(
props
.
document
)
{
this
.
headerPortal
=
props
.
document
.
getElementById
(
"
header
-
asrouter
-
container
"
)
;
this
.
footerPortal
=
props
.
document
.
getElementById
(
"
footer
-
asrouter
-
container
"
)
;
}
}
async
fetchFlowParams
(
params
=
{
}
)
{
let
result
=
{
}
;
const
{
fxaEndpoint
dispatch
}
=
this
.
props
;
if
(
!
fxaEndpoint
)
{
const
err
=
"
Tried
to
fetch
flow
params
before
fxaEndpoint
pref
was
ready
"
;
console
.
error
(
err
)
;
/
/
eslint
-
disable
-
line
no
-
console
}
try
{
const
urlObj
=
new
URL
(
fxaEndpoint
)
;
urlObj
.
pathname
=
"
metrics
-
flow
"
;
Object
.
keys
(
params
)
.
forEach
(
key
=
>
{
urlObj
.
searchParams
.
append
(
key
params
[
key
]
)
;
}
)
;
const
response
=
await
fetch
(
urlObj
.
toString
(
)
{
credentials
:
"
omit
"
}
)
;
if
(
response
.
status
=
=
=
200
)
{
const
{
deviceId
flowId
flowBeginTime
}
=
await
response
.
json
(
)
;
result
=
{
deviceId
flowId
flowBeginTime
}
;
}
else
{
console
.
error
(
"
Non
-
200
response
"
response
)
;
/
/
eslint
-
disable
-
line
no
-
console
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TELEMETRY_UNDESIRED_EVENT
data
:
{
event
:
"
FXA_METRICS_FETCH_ERROR
"
value
:
response
.
status
}
}
)
)
;
}
}
catch
(
error
)
{
console
.
error
(
error
)
;
/
/
eslint
-
disable
-
line
no
-
console
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TELEMETRY_UNDESIRED_EVENT
data
:
{
event
:
"
FXA_METRICS_ERROR
"
}
}
)
)
;
}
return
result
;
}
sendUserActionTelemetry
(
extraProps
=
{
}
)
{
const
{
message
}
=
this
.
state
;
const
eventType
=
{
message
.
provider
}
_user_event
;
ASRouterUtils
.
sendTelemetry
(
{
message_id
:
message
.
id
source
:
extraProps
.
id
action
:
eventType
.
.
.
extraProps
}
)
;
}
sendImpression
(
extraProps
)
{
if
(
this
.
state
.
message
.
provider
=
=
=
"
preview
"
)
{
return
;
}
ASRouterUtils
.
sendMessage
(
{
type
:
"
IMPRESSION
"
data
:
this
.
state
.
message
}
)
;
this
.
sendUserActionTelemetry
(
{
event
:
"
IMPRESSION
"
.
.
.
extraProps
}
)
;
}
/
/
If
link
has
a
metric
data
attribute
send
it
as
part
of
the
event_context
/
/
telemetry
field
which
can
have
arbitrary
values
.
/
/
Used
for
router
messages
with
links
as
part
of
the
content
.
sendClick
(
event
)
{
const
metric
=
{
event_context
:
event
.
target
.
dataset
.
metric
/
/
Used
for
the
source
of
the
event
.
Needed
to
differentiate
/
/
from
other
snippet
or
onboarding
events
that
may
occur
.
id
:
"
NEWTAB_FOOTER_BAR_CONTENT
"
}
;
const
action
=
{
type
:
event
.
target
.
dataset
.
action
data
:
{
args
:
event
.
target
.
dataset
.
args
}
}
;
if
(
action
.
type
)
{
ASRouterUtils
.
executeAction
(
action
)
;
}
if
(
!
this
.
state
.
message
.
content
.
do_not_autoblock
&
&
!
event
.
target
.
dataset
.
do_not_autoblock
)
{
ASRouterUtils
.
blockById
(
this
.
state
.
message
.
id
)
;
}
if
(
this
.
state
.
message
.
provider
!
=
=
"
preview
"
)
{
this
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
.
.
.
metric
}
)
;
}
}
onBlockById
(
id
)
{
return
options
=
>
ASRouterUtils
.
blockById
(
id
options
)
;
}
onDismissById
(
id
)
{
return
(
)
=
>
ASRouterUtils
.
dismissById
(
id
)
;
}
clearMessage
(
id
)
{
/
/
Request
new
set
of
dynamic
triplet
cards
when
click
on
a
card
CTA
clear
/
/
message
and
'
id
'
matches
one
of
the
cards
in
message
bundle
if
(
this
.
state
.
message
&
&
this
.
state
.
message
.
bundle
&
&
this
.
state
.
message
.
bundle
.
find
(
card
=
>
card
.
id
=
=
=
id
)
)
{
this
.
requestMessage
(
)
;
}
if
(
id
=
=
=
this
.
state
.
message
.
id
)
{
this
.
setState
(
{
message
:
{
}
}
)
;
/
/
Remove
any
styles
related
to
the
RTAMO
message
document
.
body
.
classList
.
remove
(
"
welcome
"
"
hide
-
main
"
"
amo
"
)
;
}
}
onMessageFromParent
(
{
data
:
action
}
)
{
switch
(
action
.
type
)
{
case
"
SET_MESSAGE
"
:
this
.
setState
(
{
message
:
action
.
data
}
)
;
break
;
case
"
CLEAR_INTERRUPT
"
:
this
.
setState
(
{
interruptCleared
:
true
}
)
;
break
;
case
"
CLEAR_MESSAGE
"
:
this
.
clearMessage
(
action
.
data
.
id
)
;
break
;
case
"
CLEAR_PROVIDER
"
:
if
(
action
.
data
.
id
=
=
=
this
.
state
.
message
.
provider
)
{
this
.
setState
(
{
message
:
{
}
}
)
;
}
break
;
case
"
CLEAR_ALL
"
:
this
.
setState
(
{
message
:
{
}
}
)
;
break
;
case
"
AS_ROUTER_TARGETING_UPDATE
"
:
action
.
data
.
forEach
(
id
=
>
this
.
clearMessage
(
id
)
)
;
break
;
}
}
requestMessage
(
endpoint
)
{
/
/
If
we
are
loading
about
:
welcome
we
want
to
trigger
the
onboarding
messages
if
(
this
.
props
.
document
&
&
this
.
props
.
document
.
location
.
href
=
=
=
"
about
:
welcome
"
)
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
TRIGGER
"
data
:
{
trigger
:
{
id
:
"
firstRun
"
}
}
}
)
;
}
else
{
ASRouterUtils
.
sendMessage
(
{
type
:
"
NEWTAB_MESSAGE_REQUEST
"
data
:
{
endpoint
}
}
)
;
}
}
componentWillMount
(
)
{
const
endpoint
=
ASRouterUtils
.
getPreviewEndpoint
(
)
;
if
(
endpoint
&
&
endpoint
.
theme
=
=
=
"
dark
"
)
{
global
.
window
.
dispatchEvent
(
new
CustomEvent
(
"
LightweightTheme
:
Set
"
{
detail
:
{
data
:
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_5__
[
"
NEWTAB_DARK_THEME
"
]
}
}
)
)
;
}
ASRouterUtils
.
addListener
(
this
.
onMessageFromParent
)
;
this
.
requestMessage
(
endpoint
)
;
}
componentWillUnmount
(
)
{
ASRouterUtils
.
removeListener
(
this
.
onMessageFromParent
)
;
}
async
getMonitorUrl
(
{
url
flowRequestParams
=
{
}
}
)
{
const
flowValues
=
await
this
.
fetchFlowParams
(
flowRequestParams
)
;
/
/
Note
that
flowParams
are
actually
added
dynamically
on
the
page
const
urlObj
=
new
URL
(
url
)
;
[
"
deviceId
"
"
flowId
"
"
flowBeginTime
"
]
.
forEach
(
key
=
>
{
if
(
key
in
flowValues
)
{
urlObj
.
searchParams
.
append
(
key
flowValues
[
key
]
)
;
}
}
)
;
return
urlObj
.
toString
(
)
;
}
async
onUserAction
(
action
)
{
switch
(
action
.
type
)
{
/
/
This
needs
to
be
handled
locally
because
its
case
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterActions
"
]
.
ENABLE_FIREFOX_MONITOR
:
const
url
=
await
this
.
getMonitorUrl
(
action
.
data
.
args
)
;
ASRouterUtils
.
executeAction
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
ASRouterActions
"
]
.
OPEN_URL
data
:
{
args
:
url
}
}
)
;
break
;
default
:
ASRouterUtils
.
executeAction
(
action
)
;
}
}
renderSnippets
(
)
{
const
{
message
}
=
this
.
state
;
if
(
!
_templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__
[
"
SnippetsTemplates
"
]
[
message
.
template
]
)
{
return
null
;
}
const
SnippetComponent
=
_templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__
[
"
SnippetsTemplates
"
]
[
message
.
template
]
;
const
{
content
}
=
this
.
state
.
message
;
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__
[
"
ImpressionsWrapper
"
]
{
id
:
"
NEWTAB_FOOTER_BAR
"
message
:
this
.
state
.
message
sendImpression
:
this
.
sendImpression
shouldSendImpressionOnUpdate
:
shouldSendImpressionOnUpdate
/
/
This
helps
with
testing
document
:
this
.
props
.
document
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
fluent_react__WEBPACK_IMPORTED_MODULE_4__
[
"
LocalizationProvider
"
]
{
bundles
:
Object
(
_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__
[
"
generateBundles
"
]
)
(
content
)
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
SnippetComponent
_extends
(
{
}
this
.
state
.
message
{
UISurface
:
"
NEWTAB_FOOTER_BAR
"
onBlock
:
this
.
onBlockById
(
this
.
state
.
message
.
id
)
onDismiss
:
this
.
onDismissById
(
this
.
state
.
message
.
id
)
onAction
:
this
.
onUserAction
sendClick
:
this
.
sendClick
sendUserActionTelemetry
:
this
.
sendUserActionTelemetry
}
)
)
)
)
;
}
renderPreviewBanner
(
)
{
if
(
this
.
state
.
message
.
provider
!
=
=
"
preview
"
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
snippets
-
preview
-
banner
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
info
"
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
span
"
null
"
Preview
Purposes
Only
"
)
)
;
}
renderFirstRun
(
)
{
const
{
message
}
=
this
.
state
;
if
(
FIRST_RUN_TEMPLATES
.
includes
(
message
.
template
)
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__
[
"
ImpressionsWrapper
"
]
{
id
:
"
FIRST_RUN
"
message
:
this
.
state
.
message
sendImpression
:
this
.
sendImpression
shouldSendImpressionOnUpdate
:
shouldSendImpressionOnUpdate
/
/
This
helps
with
testing
document
:
this
.
props
.
document
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_templates_FirstRun_FirstRun__WEBPACK_IMPORTED_MODULE_9__
[
"
FirstRun
"
]
{
document
:
this
.
props
.
document
interruptCleared
:
this
.
state
.
interruptCleared
message
:
message
sendUserActionTelemetry
:
this
.
sendUserActionTelemetry
executeAction
:
ASRouterUtils
.
executeAction
dispatch
:
this
.
props
.
dispatch
onBlockById
:
ASRouterUtils
.
blockById
onDismiss
:
this
.
onDismissById
(
this
.
state
.
message
.
id
)
fxaEndpoint
:
this
.
props
.
fxaEndpoint
appUpdateChannel
:
this
.
props
.
appUpdateChannel
fetchFlowParams
:
this
.
fetchFlowParams
}
)
)
;
}
return
null
;
}
render
(
)
{
const
{
message
}
=
this
.
state
;
if
(
!
message
.
id
)
{
return
null
;
}
const
shouldRenderBelowSearch
=
TEMPLATES_BELOW_SEARCH
.
includes
(
message
.
template
)
;
const
shouldRenderInHeader
=
TEMPLATES_ABOVE_PAGE
.
includes
(
message
.
template
)
;
return
shouldRenderBelowSearch
?
/
/
Render
special
below
search
snippets
in
place
;
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
below
-
search
-
snippet
-
wrapper
"
}
this
.
renderSnippets
(
)
)
:
/
/
For
onboarding
regular
snippets
etc
.
we
should
render
/
/
everything
in
our
footer
container
.
react_dom__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createPortal
(
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
Fragment
null
this
.
renderPreviewBanner
(
)
this
.
renderFirstRun
(
)
this
.
renderSnippets
(
)
)
shouldRenderInHeader
?
this
.
headerPortal
:
this
.
footerPortal
)
;
}
}
ASRouterUISurface
.
defaultProps
=
{
document
:
global
.
document
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
6
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
MERGE_STORE_ACTION
"
function
(
)
{
return
MERGE_STORE_ACTION
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
OUTGOING_MESSAGE_NAME
"
function
(
)
{
return
OUTGOING_MESSAGE_NAME
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
INCOMING_MESSAGE_NAME
"
function
(
)
{
return
INCOMING_MESSAGE_NAME
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
EARLY_QUEUED_ACTIONS
"
function
(
)
{
return
EARLY_QUEUED_ACTIONS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
rehydrationMiddleware
"
function
(
)
{
return
rehydrationMiddleware
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
queueEarlyMessageMiddleware
"
function
(
)
{
return
queueEarlyMessageMiddleware
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
initStore
"
function
(
)
{
return
initStore
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
7
)
;
/
*
harmony
import
*
/
var
redux__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
redux__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
eslint
-
env
mozilla
/
frame
-
script
*
/
const
MERGE_STORE_ACTION
=
"
NEW_TAB_INITIAL_STATE
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ActivityStream
:
ContentToMain
"
;
const
INCOMING_MESSAGE_NAME
=
"
ActivityStream
:
MainToContent
"
;
const
EARLY_QUEUED_ACTIONS
=
[
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
]
;
/
*
*
*
A
higher
-
order
function
which
returns
a
reducer
that
on
MERGE_STORE
action
*
will
return
the
action
.
data
object
merged
into
the
previous
state
.
*
*
For
all
other
actions
it
merely
calls
mainReducer
.
*
*
Because
we
want
this
to
merge
the
entire
state
object
it
'
s
written
as
a
*
higher
order
function
which
takes
the
main
reducer
(
itself
often
a
call
to
*
combineReducers
)
as
a
parameter
.
*
*
param
{
function
}
mainReducer
reducer
to
call
if
action
!
=
MERGE_STORE_ACTION
*
return
{
function
}
a
reducer
that
on
MERGE_STORE_ACTION
action
*
will
return
the
action
.
data
object
merged
*
into
the
previous
state
and
the
result
*
of
calling
mainReducer
otherwise
.
*
/
function
mergeStateReducer
(
mainReducer
)
{
return
(
prevState
action
)
=
>
{
if
(
action
.
type
=
=
=
MERGE_STORE_ACTION
)
{
return
{
.
.
.
prevState
.
.
.
action
.
data
}
;
}
return
mainReducer
(
prevState
action
)
;
}
;
}
/
*
*
*
messageMiddleware
-
Middleware
that
looks
for
SentToMain
type
actions
and
sends
them
if
necessary
*
/
const
messageMiddleware
=
store
=
>
next
=
>
action
=
>
{
const
skipLocal
=
action
.
meta
&
&
action
.
meta
.
skipLocal
;
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToMain
(
action
)
)
{
RPMSendAsyncMessage
(
OUTGOING_MESSAGE_NAME
action
)
;
}
if
(
!
skipLocal
)
{
next
(
action
)
;
}
}
;
const
rehydrationMiddleware
=
store
=
>
next
=
>
action
=
>
{
if
(
store
.
_didRehydrate
)
{
return
next
(
action
)
;
}
const
isMergeStoreAction
=
action
.
type
=
=
=
MERGE_STORE_ACTION
;
const
isRehydrationRequest
=
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
;
if
(
isRehydrationRequest
)
{
store
.
_didRequestInitialState
=
true
;
return
next
(
action
)
;
}
if
(
isMergeStoreAction
)
{
store
.
_didRehydrate
=
true
;
return
next
(
action
)
;
}
/
/
If
init
happened
after
our
request
was
made
we
need
to
re
-
request
if
(
store
.
_didRequestInitialState
&
&
action
.
type
=
=
=
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
INIT
)
{
return
next
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_STATE_REQUEST
}
)
)
;
}
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isBroadcastToContent
(
action
)
|
|
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToOneContent
(
action
)
|
|
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isSendToPreloaded
(
action
)
)
{
/
/
Note
that
actions
received
before
didRehydrate
will
not
be
dispatched
/
/
because
this
could
negatively
affect
preloading
and
the
the
state
/
/
will
be
replaced
by
rehydration
anyway
.
return
null
;
}
return
next
(
action
)
;
}
;
/
*
*
*
This
middleware
queues
up
all
the
EARLY_QUEUED_ACTIONS
until
it
receives
*
the
first
action
from
main
.
This
is
useful
for
those
actions
for
main
which
*
require
higher
reliability
i
.
e
.
the
action
will
not
be
lost
in
the
case
*
that
it
gets
sent
before
the
main
is
ready
to
receive
it
.
Conversely
any
*
actions
allowed
early
are
accepted
to
be
ignorable
or
re
-
sendable
.
*
/
const
queueEarlyMessageMiddleware
=
store
=
>
next
=
>
action
=
>
{
if
(
store
.
_receivedFromMain
)
{
next
(
action
)
;
}
else
if
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionUtils
"
]
.
isFromMain
(
action
)
)
{
next
(
action
)
;
store
.
_receivedFromMain
=
true
;
/
/
Sending
out
all
the
early
actions
as
main
is
ready
now
if
(
store
.
_earlyActionQueue
)
{
store
.
_earlyActionQueue
.
forEach
(
next
)
;
store
.
_earlyActionQueue
=
[
]
;
}
}
else
if
(
EARLY_QUEUED_ACTIONS
.
includes
(
action
.
type
)
)
{
store
.
_earlyActionQueue
=
store
.
_earlyActionQueue
|
|
[
]
;
store
.
_earlyActionQueue
.
push
(
action
)
;
}
else
{
/
/
Let
any
other
type
of
action
go
through
next
(
action
)
;
}
}
;
/
*
*
*
initStore
-
Create
a
store
and
listen
for
incoming
actions
*
*
param
{
object
}
reducers
An
object
containing
Redux
reducers
*
param
{
object
}
intialState
(
optional
)
The
initial
state
of
the
store
if
desired
*
return
{
object
}
A
redux
store
*
/
function
initStore
(
reducers
)
{
const
store
=
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
createStore
"
]
)
(
mergeStateReducer
(
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
combineReducers
"
]
)
(
reducers
)
)
global
.
RPMAddMessageListener
&
&
Object
(
redux__WEBPACK_IMPORTED_MODULE_1__
[
"
applyMiddleware
"
]
)
(
rehydrationMiddleware
queueEarlyMessageMiddleware
messageMiddleware
)
)
;
store
.
_didRehydrate
=
false
;
store
.
_didRequestInitialState
=
false
;
if
(
global
.
RPMAddMessageListener
)
{
global
.
RPMAddMessageListener
(
INCOMING_MESSAGE_NAME
msg
=
>
{
try
{
store
.
dispatch
(
msg
.
data
)
;
}
catch
(
ex
)
{
console
.
error
(
"
Content
msg
:
"
msg
"
Dispatch
error
:
"
ex
)
;
/
/
eslint
-
disable
-
line
no
-
console
dump
(
Content
msg
:
{
JSON
.
stringify
(
msg
)
}
\
nDispatch
error
:
{
ex
}
\
n
{
ex
.
stack
}
)
;
}
}
)
;
}
return
store
;
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
7
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
Redux
;
/
*
*
*
/
}
)
/
*
8
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
VISIBLE
"
function
(
)
{
return
VISIBLE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
VISIBILITY_CHANGE_EVENT
"
function
(
)
{
return
VISIBILITY_CHANGE_EVENT
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ImpressionsWrapper
"
function
(
)
{
return
ImpressionsWrapper
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
/
*
*
*
Component
wrapper
used
to
send
telemetry
pings
on
every
impression
.
*
/
class
ImpressionsWrapper
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
/
/
This
sends
an
event
when
a
user
sees
a
set
of
new
content
.
If
content
/
/
changes
while
the
page
is
hidden
(
i
.
e
.
preloaded
or
on
a
hidden
tab
)
/
/
only
send
the
event
if
the
page
becomes
visible
again
.
sendImpressionOrAddListener
(
)
{
if
(
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
props
.
sendImpression
(
{
id
:
this
.
props
.
id
}
)
;
}
else
{
/
/
We
should
only
ever
send
the
latest
impression
stats
ping
so
remove
any
/
/
older
listeners
.
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
/
/
When
the
page
becomes
visible
send
the
impression
stats
ping
if
the
section
isn
'
t
collapsed
.
this
.
_onVisibilityChange
=
(
)
=
>
{
if
(
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
props
.
sendImpression
(
{
id
:
this
.
props
.
id
}
)
;
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
;
this
.
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentWillUnmount
(
)
{
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentDidMount
(
)
{
if
(
this
.
props
.
sendOnMount
)
{
this
.
sendImpressionOrAddListener
(
)
;
}
}
componentDidUpdate
(
prevProps
)
{
if
(
this
.
props
.
shouldSendImpressionOnUpdate
(
this
.
props
prevProps
)
)
{
this
.
sendImpressionOrAddListener
(
)
;
}
}
render
(
)
{
return
this
.
props
.
children
;
}
}
ImpressionsWrapper
.
defaultProps
=
{
document
:
global
.
document
sendOnMount
:
true
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
9
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
React
;
/
*
*
*
/
}
)
/
*
10
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
PropTypes
;
/
*
*
*
/
}
)
/
*
11
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
IS_NEWTAB
"
function
(
)
{
return
IS_NEWTAB
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
NEWTAB_DARK_THEME
"
function
(
)
{
return
NEWTAB_DARK_THEME
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
IS_NEWTAB
=
global
.
document
&
&
global
.
document
.
documentURI
=
=
=
"
about
:
newtab
"
;
const
NEWTAB_DARK_THEME
=
{
ntp_background
:
{
r
:
42
g
:
42
b
:
46
a
:
1
}
ntp_text
:
{
r
:
249
g
:
249
b
:
250
a
:
1
}
sidebar
:
{
r
:
56
g
:
56
b
:
61
a
:
1
}
sidebar_text
:
{
r
:
249
g
:
249
b
:
250
a
:
1
}
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
12
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
ReactDOM
;
/
*
*
*
/
}
)
/
*
13
*
/
/
*
*
*
/
(
function
(
module
)
{
module
.
exports
=
{
"
title
"
:
"
EOYSnippet
"
"
description
"
:
"
Fundraising
Snippet
"
"
version
"
:
"
1
.
1
.
0
"
"
type
"
:
"
object
"
"
definitions
"
:
{
"
plainText
"
:
{
"
description
"
:
"
Plain
text
(
no
HTML
allowed
)
"
"
type
"
:
"
string
"
}
"
richText
"
:
{
"
description
"
:
"
Text
with
HTML
subset
allowed
:
i
b
u
strong
em
br
"
"
type
"
:
"
string
"
}
"
link_url
"
:
{
"
description
"
:
"
Target
for
links
or
buttons
"
"
type
"
:
"
string
"
"
format
"
:
"
uri
"
}
}
"
properties
"
:
{
"
donation_form_url
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Url
to
the
donation
form
.
"
}
"
currency_code
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
code
for
the
currency
.
Examle
gbp
cad
usd
.
"
"
default
"
:
"
usd
"
}
"
locale
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
String
for
the
locale
code
.
"
"
default
"
:
"
en
-
US
"
}
"
text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
text_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Modify
the
text
message
color
"
}
"
background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
background
color
.
"
}
"
highlight_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Paragraph
em
highlight
color
.
"
}
"
donation_amount_first
"
:
{
"
type
"
:
"
number
"
"
description
"
:
"
First
button
amount
.
"
}
"
donation_amount_second
"
:
{
"
type
"
:
"
number
"
"
description
"
:
"
Second
button
amount
.
"
}
"
donation_amount_third
"
:
{
"
type
"
:
"
number
"
"
description
"
:
"
Third
button
amount
.
"
}
"
donation_amount_fourth
"
:
{
"
type
"
:
"
number
"
"
description
"
:
"
Fourth
button
amount
.
"
}
"
selected_button
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Default
donation_amount_second
.
Donation
amount
button
that
'
s
selected
by
default
.
"
"
default
"
:
"
donation_amount_second
"
}
"
icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
Dark
theme
variant
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
icon_alt_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Alt
text
for
accessibility
"
"
default
"
:
"
"
}
"
title
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Snippet
title
displayed
before
snippet
text
"
}
]
}
"
title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
Dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
a
button
next
to
main
snippet
text
that
links
to
button_url
.
Requires
button_url
.
"
}
]
}
"
button_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
text
color
of
the
button
.
Valid
CSS
color
.
"
}
"
button_background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
background
color
of
the
button
.
Valid
CSS
color
.
"
}
"
block_button_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Tooltip
text
used
for
dismiss
button
.
"
}
"
monthly_checkbox_label_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
text
for
monthly
checkbox
.
"
"
default
"
:
"
Make
my
donation
monthly
"
}
"
test
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Different
styles
for
the
snippet
.
Options
are
bold
and
takeover
.
"
}
"
do_not_autoblock
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
Used
to
prevent
blocking
the
snippet
after
the
CTA
(
link
or
button
)
has
been
clicked
"
}
"
links
"
:
{
"
additionalProperties
"
:
{
"
url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
The
url
where
the
link
points
to
.
"
}
]
}
"
metric
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Custom
event
name
sent
with
telemetry
event
.
"
}
"
args
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Additional
parameters
for
link
action
example
which
specific
menu
the
button
should
open
"
}
}
}
}
"
additionalProperties
"
:
false
"
required
"
:
[
"
text
"
"
donation_form_url
"
"
donation_amount_first
"
"
donation_amount_second
"
"
donation_amount_third
"
"
donation_amount_fourth
"
"
button_label
"
"
currency_code
"
]
"
dependencies
"
:
{
"
button_color
"
:
[
"
button_label
"
]
"
button_background_color
"
:
[
"
button_label
"
]
}
}
;
/
*
*
*
/
}
)
/
*
14
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
convertLinks
"
function
(
)
{
return
convertLinks
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
RichText
"
function
(
)
{
return
RichText
;
}
)
;
/
*
harmony
import
*
/
var
fluent_react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
78
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
80
)
;
/
*
harmony
import
*
/
var
_template_utils__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
15
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Elements
allowed
in
snippet
content
const
ALLOWED_TAGS
=
{
b
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
b
"
null
)
i
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
i
"
null
)
u
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
u
"
null
)
strong
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
strong
"
null
)
em
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
em
"
null
)
br
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
br
"
null
)
}
;
/
*
*
*
Transform
an
object
(
tag
name
:
{
url
}
)
into
(
tag
name
:
anchor
)
where
the
url
*
is
used
as
href
in
order
to
render
links
inside
a
Fluent
.
Localized
component
.
*
/
function
convertLinks
(
links
sendClick
doNotAutoBlock
openNewWindow
=
false
)
{
if
(
links
)
{
return
Object
.
keys
(
links
)
.
reduce
(
(
acc
linkTag
)
=
>
{
const
{
action
}
=
links
[
linkTag
]
;
/
/
Setting
the
value
to
false
will
not
include
the
attribute
in
the
anchor
const
url
=
action
?
false
:
Object
(
_template_utils__WEBPACK_IMPORTED_MODULE_3__
[
"
safeURI
"
]
)
(
links
[
linkTag
]
.
url
)
;
acc
[
linkTag
]
=
/
/
eslint
was
getting
a
false
positive
caused
by
the
dynamic
injection
/
/
of
content
.
/
/
eslint
-
disable
-
next
-
line
jsx
-
a11y
/
anchor
-
has
-
content
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
href
:
url
target
:
openNewWindow
?
"
_blank
"
:
"
"
"
data
-
metric
"
:
links
[
linkTag
]
.
metric
"
data
-
action
"
:
action
"
data
-
args
"
:
links
[
linkTag
]
.
args
"
data
-
do_not_autoblock
"
:
doNotAutoBlock
onClick
:
sendClick
}
)
;
return
acc
;
}
{
}
)
;
}
return
null
;
}
/
*
*
*
Message
wrapper
used
to
sanitize
markup
and
render
HTML
.
*
/
function
RichText
(
props
)
{
if
(
!
_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__
[
"
RICH_TEXT_KEYS
"
]
.
includes
(
props
.
localization_id
)
)
{
throw
new
Error
(
ASRouter
:
{
props
.
localization_id
}
is
not
a
valid
rich
text
property
.
If
you
want
it
to
be
processed
you
need
to
add
it
to
asrouter
/
rich
-
text
-
strings
.
js
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
fluent_react__WEBPACK_IMPORTED_MODULE_0__
[
"
Localized
"
]
_extends
(
{
id
:
props
.
localization_id
}
ALLOWED_TAGS
props
.
customElements
convertLinks
(
props
.
links
props
.
sendClick
props
.
doNotAutoBlock
props
.
openNewWindow
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
props
.
text
)
)
;
}
/
*
*
*
/
}
)
/
*
15
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
safeURI
"
function
(
)
{
return
safeURI
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
function
safeURI
(
url
)
{
if
(
!
url
)
{
return
"
"
;
}
const
{
protocol
}
=
new
URL
(
url
)
;
const
isAllowed
=
[
"
http
:
"
"
https
:
"
"
data
:
"
"
resource
:
"
"
chrome
:
"
]
.
includes
(
protocol
)
;
if
(
!
isAllowed
)
{
console
.
warn
(
The
protocol
{
protocol
}
is
not
allowed
for
template
URLs
.
)
;
/
/
eslint
-
disable
-
line
no
-
console
}
return
isAllowed
?
url
:
"
"
;
}
/
*
*
*
/
}
)
/
*
16
*
/
/
*
*
*
/
(
function
(
module
)
{
module
.
exports
=
{
"
title
"
:
"
SimpleSnippet
"
"
description
"
:
"
A
simple
template
with
an
icon
text
and
optional
button
.
"
"
version
"
:
"
1
.
1
.
1
"
"
type
"
:
"
object
"
"
definitions
"
:
{
"
plainText
"
:
{
"
description
"
:
"
Plain
text
(
no
HTML
allowed
)
"
"
type
"
:
"
string
"
}
"
richText
"
:
{
"
description
"
:
"
Text
with
HTML
subset
allowed
:
i
b
u
strong
em
br
"
"
type
"
:
"
string
"
}
"
link_url
"
:
{
"
description
"
:
"
Target
for
links
or
buttons
"
"
type
"
:
"
string
"
"
format
"
:
"
uri
"
}
}
"
properties
"
:
{
"
title
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Snippet
title
displayed
before
snippet
text
"
}
]
}
"
text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
dark
theme
variant
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
icon_alt_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Alt
text
describing
icon
for
screen
readers
"
"
default
"
:
"
"
}
"
title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
Dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
title_icon_alt_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Alt
text
describing
title
icon
for
screen
readers
"
"
default
"
:
"
"
}
"
button_action
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
type
of
action
the
button
should
trigger
.
"
}
"
button_url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
A
url
button_label
links
to
this
"
}
]
}
"
button_action_args
"
:
{
"
description
"
:
"
Additional
parameters
for
button
action
example
which
specific
menu
the
button
should
open
"
}
"
button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
a
button
next
to
main
snippet
text
that
links
to
button_url
.
Requires
button_url
.
"
}
]
}
"
button_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
text
color
of
the
button
.
Valid
CSS
color
.
"
}
"
button_background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
background
color
of
the
button
.
Valid
CSS
color
.
"
}
"
block_button_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Tooltip
text
used
for
dismiss
button
.
"
"
default
"
:
"
Remove
this
"
}
"
tall
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
To
be
used
by
fundraising
only
increases
height
to
roughly
120px
.
Defaults
to
false
.
"
}
"
do_not_autoblock
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
Used
to
prevent
blocking
the
snippet
after
the
CTA
(
link
or
button
)
has
been
clicked
"
}
"
links
"
:
{
"
additionalProperties
"
:
{
"
url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
The
url
where
the
link
points
to
.
"
}
]
}
"
metric
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Custom
event
name
sent
with
telemetry
event
.
"
}
"
args
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Additional
parameters
for
link
action
example
which
specific
menu
the
button
should
open
"
}
}
}
"
section_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
.
16x16px
.
SVG
or
PNG
preferred
.
section_title_text
must
also
be
specified
to
display
.
"
}
"
section_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
section_title_text
must
also
be
specified
to
display
.
"
}
"
section_title_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
text
.
section_title_icon
must
also
be
specified
to
display
.
"
}
"
section_title_url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
A
url
section_title_text
links
to
this
"
}
]
}
}
"
additionalProperties
"
:
false
"
required
"
:
[
"
text
"
]
"
dependencies
"
:
{
"
button_action
"
:
[
"
button_label
"
]
"
button_url
"
:
[
"
button_label
"
]
"
button_color
"
:
[
"
button_label
"
]
"
button_background_color
"
:
[
"
button_label
"
]
"
section_title_url
"
:
[
"
section_title_text
"
]
}
}
;
/
*
*
*
/
}
)
/
*
17
*
/
/
*
*
*
/
(
function
(
module
)
{
module
.
exports
=
{
"
title
"
:
"
FXASignupSnippet
"
"
description
"
:
"
A
snippet
template
for
FxA
sign
up
/
sign
in
"
"
version
"
:
"
1
.
2
.
0
"
"
type
"
:
"
object
"
"
definitions
"
:
{
"
plainText
"
:
{
"
description
"
:
"
Plain
text
(
no
HTML
allowed
)
"
"
type
"
:
"
string
"
}
"
richText
"
:
{
"
description
"
:
"
Text
with
HTML
subset
allowed
:
i
b
u
strong
em
br
"
"
type
"
:
"
string
"
}
"
link_url
"
:
{
"
description
"
:
"
Target
for
links
or
buttons
"
"
type
"
:
"
string
"
"
format
"
:
"
uri
"
}
}
"
properties
"
:
{
"
scene1_title
"
:
{
"
allof
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
snippet
title
displayed
before
snippet
text
"
}
]
}
"
scene1_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_section_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
text
for
scene
1
.
scene1_section_title_icon
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
A
url
scene1_section_title_text
links
to
this
"
}
]
}
"
scene2_title
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Title
displayed
before
text
in
scene
2
.
Should
be
plain
text
.
"
}
]
}
"
scene2_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
Dark
theme
variant
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene1_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
Dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene2_email_placeholder_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Value
to
show
while
input
is
empty
.
"
"
default
"
:
"
Your
email
here
"
}
"
scene2_button_label
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
form
submit
button
"
"
default
"
:
"
Sign
me
up
"
}
"
scene2_dismiss_button_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
the
dismiss
button
when
the
sign
-
up
form
is
expanded
.
"
"
default
"
:
"
Dismiss
"
}
"
hidden_inputs
"
:
{
"
type
"
:
"
object
"
"
description
"
:
"
Each
entry
represents
a
hidden
input
key
is
used
as
value
for
the
name
property
.
"
"
properties
"
:
{
"
action
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
email
"
]
}
"
context
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
fx_desktop_v3
"
]
}
"
entrypoint
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
snippets
"
]
}
"
utm_content
"
:
{
"
type
"
:
"
number
"
"
description
"
:
"
Firefox
version
number
"
}
"
utm_source
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
snippet
"
]
}
"
utm_campaign
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_campaign
.
"
}
"
utm_term
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_term
.
"
}
"
additionalProperties
"
:
false
}
}
"
scene1_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
a
button
next
to
main
snippet
text
that
links
to
button_url
.
Requires
button_url
.
"
}
]
"
default
"
:
"
Learn
more
"
}
"
scene1_button_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
text
color
of
the
button
.
Valid
CSS
color
.
"
}
"
scene1_button_background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
background
color
of
the
button
.
Valid
CSS
color
.
"
}
"
retry_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
the
button
in
the
event
of
a
submission
error
/
failure
.
"
}
]
"
default
"
:
"
Try
again
"
}
"
do_not_autoblock
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
Used
to
prevent
blocking
the
snippet
after
the
CTA
(
link
or
button
)
has
been
clicked
"
"
default
"
:
false
}
"
utm_campaign
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_campaign
.
"
}
"
utm_term
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_term
.
"
}
"
links
"
:
{
"
additionalProperties
"
:
{
"
url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
The
url
where
the
link
points
to
.
"
}
]
}
"
metric
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Custom
event
name
sent
with
telemetry
event
.
"
}
}
}
}
"
additionalProperties
"
:
false
"
required
"
:
[
"
scene1_text
"
"
scene2_text
"
"
scene1_button_label
"
]
"
dependencies
"
:
{
"
scene1_button_color
"
:
[
"
scene1_button_label
"
]
"
scene1_button_background_color
"
:
[
"
scene1_button_label
"
]
}
}
;
/
*
*
*
/
}
)
/
*
18
*
/
/
*
*
*
/
(
function
(
module
)
{
module
.
exports
=
{
"
title
"
:
"
NewsletterSnippet
"
"
description
"
:
"
A
snippet
template
for
send
to
device
mobile
download
"
"
version
"
:
"
1
.
2
.
0
"
"
type
"
:
"
object
"
"
definitions
"
:
{
"
plainText
"
:
{
"
description
"
:
"
Plain
text
(
no
HTML
allowed
)
"
"
type
"
:
"
string
"
}
"
richText
"
:
{
"
description
"
:
"
Text
with
HTML
subset
allowed
:
i
b
u
strong
em
br
"
"
type
"
:
"
string
"
}
"
link_url
"
:
{
"
description
"
:
"
Target
for
links
or
buttons
"
"
type
"
:
"
string
"
"
format
"
:
"
uri
"
}
}
"
properties
"
:
{
"
locale
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Two
to
five
character
string
for
the
locale
code
"
"
default
"
:
"
en
-
US
"
}
"
scene1_title
"
:
{
"
allof
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
snippet
title
displayed
before
snippet
text
"
}
]
}
"
scene1_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_section_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
text
for
scene
1
.
scene1_section_title_icon
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
A
url
scene1_section_title_text
links
to
this
"
}
]
}
"
scene2_title
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Title
displayed
before
text
in
scene
2
.
Should
be
plain
text
.
"
}
]
}
"
scene2_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
Dark
theme
variant
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene1_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
Dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene2_email_placeholder_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Value
to
show
while
input
is
empty
.
"
"
default
"
:
"
Your
email
here
"
}
"
scene2_button_label
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
form
submit
button
"
"
default
"
:
"
Sign
me
up
"
}
"
scene2_privacy_html
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Html
for
disclaimer
and
link
underneath
input
box
.
"
}
"
scene2_dismiss_button_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
the
dismiss
button
when
the
sign
-
up
form
is
expanded
.
"
"
default
"
:
"
Dismiss
"
}
"
hidden_inputs
"
:
{
"
type
"
:
"
object
"
"
description
"
:
"
Each
entry
represents
a
hidden
input
key
is
used
as
value
for
the
name
property
.
"
"
properties
"
:
{
"
fmt
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
"
"
default
"
:
"
H
"
}
}
}
"
scene1_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
a
button
next
to
main
snippet
text
that
links
to
button_url
.
Requires
button_url
.
"
}
]
"
default
"
:
"
Learn
more
"
}
"
scene1_button_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
text
color
of
the
button
.
Valid
CSS
color
.
"
}
"
scene1_button_background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
background
color
of
the
button
.
Valid
CSS
color
.
"
}
"
retry_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
the
button
in
the
event
of
a
submission
error
/
failure
.
"
}
]
"
default
"
:
"
Try
again
"
}
"
do_not_autoblock
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
Used
to
prevent
blocking
the
snippet
after
the
CTA
(
link
or
button
)
has
been
clicked
"
"
default
"
:
false
}
"
success_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Message
shown
on
successful
registration
.
"
}
"
error_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Message
shown
if
registration
failed
.
"
}
"
scene2_newsletter
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Newsletter
/
basket
id
user
is
subscribing
to
.
"
"
default
"
:
"
mozilla
-
foundation
"
}
"
links
"
:
{
"
additionalProperties
"
:
{
"
url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
The
url
where
the
link
points
to
.
"
}
]
}
"
metric
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Custom
event
name
sent
with
telemetry
event
.
"
}
}
}
}
"
additionalProperties
"
:
false
"
required
"
:
[
"
scene1_text
"
"
scene2_text
"
"
scene1_button_label
"
]
"
dependencies
"
:
{
"
scene1_button_color
"
:
[
"
scene1_button_label
"
]
"
scene1_button_background_color
"
:
[
"
scene1_button_label
"
]
}
}
;
/
*
*
*
/
}
)
/
*
19
*
/
/
*
*
*
/
(
function
(
module
)
{
module
.
exports
=
{
"
title
"
:
"
SendToDeviceSnippet
"
"
description
"
:
"
A
snippet
template
for
send
to
device
mobile
download
"
"
version
"
:
"
1
.
2
.
0
"
"
type
"
:
"
object
"
"
definitions
"
:
{
"
plainText
"
:
{
"
description
"
:
"
Plain
text
(
no
HTML
allowed
)
"
"
type
"
:
"
string
"
}
"
richText
"
:
{
"
description
"
:
"
Text
with
HTML
subset
allowed
:
i
b
u
strong
em
br
"
"
type
"
:
"
string
"
}
"
link_url
"
:
{
"
description
"
:
"
Target
for
links
or
buttons
"
"
type
"
:
"
string
"
"
format
"
:
"
uri
"
}
}
"
properties
"
:
{
"
locale
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Two
to
five
character
string
for
the
locale
code
"
"
default
"
:
"
en
-
US
"
}
"
country
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Two
character
string
for
the
country
code
(
used
for
SMS
)
"
"
default
"
:
"
us
"
}
"
scene1_title
"
:
{
"
allof
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
snippet
title
displayed
before
snippet
text
"
}
]
}
"
scene1_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_section_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
icon
for
scene
1
dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
scene1_section_title_text
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Section
title
text
for
scene
1
.
scene1_section_title_icon
must
also
be
specified
to
display
.
"
}
"
scene1_section_title_url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
A
url
scene1_section_title_text
links
to
this
"
}
]
}
"
scene2_title
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Title
displayed
before
text
in
scene
2
.
Should
be
plain
text
.
"
}
]
}
"
scene2_text
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
richText
"
}
{
"
description
"
:
"
Main
body
text
of
snippet
.
HTML
subset
allowed
:
i
b
u
strong
em
br
"
}
]
}
"
scene1_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Snippet
icon
.
Dark
theme
variant
.
64x64px
.
SVG
or
PNG
preferred
.
"
}
"
scene2_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Image
to
display
above
the
form
.
Dark
theme
variant
.
98x98px
.
SVG
or
PNG
preferred
.
"
}
"
scene2_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Image
to
display
above
the
form
.
98x98px
.
SVG
or
PNG
preferred
.
"
}
"
scene1_title_icon
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene1_title_icon_dark_theme
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Small
icon
that
shows
up
before
the
title
/
text
.
Dark
theme
variant
.
16x16px
.
SVG
or
PNG
preferred
.
Grayscale
.
"
}
"
scene2_button_label
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
form
submit
button
"
"
default
"
:
"
Send
"
}
"
scene2_input_placeholder
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Value
to
show
while
input
is
empty
.
"
"
default
"
:
"
Your
email
here
"
}
"
scene2_disclaimer_html
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Html
for
disclaimer
and
link
underneath
input
box
.
"
}
"
scene2_dismiss_button_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Label
for
the
dismiss
button
when
the
sign
-
up
form
is
expanded
.
"
"
default
"
:
"
Dismiss
"
}
"
hidden_inputs
"
:
{
"
type
"
:
"
object
"
"
description
"
:
"
Each
entry
represents
a
hidden
input
key
is
used
as
value
for
the
name
property
.
"
"
properties
"
:
{
"
action
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
email
"
]
}
"
context
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
fx_desktop_v3
"
]
}
"
entrypoint
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
snippets
"
]
}
"
utm_content
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Firefox
version
number
"
}
"
utm_source
"
:
{
"
type
"
:
"
string
"
"
enum
"
:
[
"
snippet
"
]
}
"
utm_campaign
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_campaign
.
"
}
"
utm_term
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_term
.
"
}
"
additionalProperties
"
:
false
}
}
"
scene1_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
a
button
next
to
main
snippet
text
that
links
to
button_url
.
Requires
button_url
.
"
}
]
"
default
"
:
"
Learn
more
"
}
"
scene1_button_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
text
color
of
the
button
.
Valid
CSS
color
.
"
}
"
scene1_button_background_color
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
The
background
color
of
the
button
.
Valid
CSS
color
.
"
}
"
retry_button_label
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
plainText
"
}
{
"
description
"
:
"
Text
for
the
button
in
the
event
of
a
submission
error
/
failure
.
"
}
]
"
default
"
:
"
Try
again
"
}
"
do_not_autoblock
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
Used
to
prevent
blocking
the
snippet
after
the
CTA
(
link
or
button
)
has
been
clicked
"
"
default
"
:
false
}
"
success_title
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Title
shown
before
text
on
successful
registration
.
"
}
"
success_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Message
shown
on
successful
registration
.
"
}
"
error_text
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Message
shown
if
registration
failed
.
"
}
"
include_sms
"
:
{
"
type
"
:
"
boolean
"
"
description
"
:
"
(
send
to
device
)
Allow
users
to
send
an
SMS
message
with
the
form
?
"
"
default
"
:
false
}
"
message_id_sms
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Newsletter
/
basket
id
representing
the
SMS
message
to
be
sent
.
"
}
"
message_id_email
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
send
to
device
)
Newsletter
/
basket
id
representing
the
email
message
to
be
sent
.
Must
be
a
value
from
the
'
Slug
'
column
here
:
https
:
/
/
basket
.
mozilla
.
org
/
news
/
.
"
}
"
utm_campaign
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_campaign
.
"
}
"
utm_term
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
(
fxa
)
Value
to
pass
through
to
GA
as
utm_term
.
"
}
"
links
"
:
{
"
additionalProperties
"
:
{
"
url
"
:
{
"
allOf
"
:
[
{
"
ref
"
:
"
#
/
definitions
/
link_url
"
}
{
"
description
"
:
"
The
url
where
the
link
points
to
.
"
}
]
}
"
metric
"
:
{
"
type
"
:
"
string
"
"
description
"
:
"
Custom
event
name
sent
with
telemetry
event
.
"
}
}
}
}
"
additionalProperties
"
:
false
"
required
"
:
[
"
scene1_text
"
"
scene2_text
"
"
scene1_button_label
"
]
"
dependencies
"
:
{
"
scene1_button_color
"
:
[
"
scene1_button_label
"
]
"
scene1_button_background_color
"
:
[
"
scene1_button_label
"
]
}
}
;
/
*
*
*
/
}
)
/
*
20
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Trailhead
"
function
(
)
{
return
Trailhead
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
21
)
;
/
*
harmony
import
*
/
var
_components_FxASignupForm_FxASignupForm__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
22
)
;
/
*
harmony
import
*
/
var
_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
23
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
From
resource
:
/
/
devtools
/
client
/
shared
/
focus
.
js
const
FOCUSABLE_SELECTOR
=
[
"
a
[
href
]
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
button
:
not
(
[
disabled
]
)
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
iframe
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
input
:
not
(
[
disabled
]
)
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
select
:
not
(
[
disabled
]
)
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
textarea
:
not
(
[
disabled
]
)
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
"
[
tabindex
]
:
not
(
[
tabindex
=
'
-
1
'
]
)
"
]
.
join
(
"
"
)
;
class
Trailhead
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
closeModal
=
this
.
closeModal
.
bind
(
this
)
;
this
.
onStartBlur
=
this
.
onStartBlur
.
bind
(
this
)
;
}
get
dialog
(
)
{
return
this
.
props
.
document
.
getElementById
(
"
trailheadDialog
"
)
;
}
componentDidMount
(
)
{
/
/
We
need
to
remove
hide
-
main
since
we
should
show
it
underneath
everything
that
has
rendered
this
.
props
.
document
.
body
.
classList
.
remove
(
"
hide
-
main
"
)
;
/
/
The
rest
of
the
page
is
"
hidden
"
to
screen
readers
when
the
modal
is
open
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
setAttribute
(
"
aria
-
hidden
"
"
true
"
)
;
}
onStartBlur
(
event
)
{
/
/
Make
sure
focus
stays
within
the
dialog
when
tabbing
from
the
button
const
{
dialog
}
=
this
;
if
(
event
.
relatedTarget
&
&
!
(
dialog
.
compareDocumentPosition
(
event
.
relatedTarget
)
&
dialog
.
DOCUMENT_POSITION_CONTAINED_BY
)
)
{
dialog
.
querySelector
(
FOCUSABLE_SELECTOR
)
.
focus
(
)
;
}
}
closeModal
(
ev
)
{
global
.
removeEventListener
(
"
visibilitychange
"
this
.
closeModal
)
;
this
.
props
.
document
.
body
.
classList
.
remove
(
"
welcome
"
)
;
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
removeAttribute
(
"
aria
-
hidden
"
)
;
this
.
props
.
onNextScene
(
)
;
/
/
If
closeModal
(
)
was
triggered
by
a
visibilitychange
event
the
user
actually
/
/
submitted
the
email
form
so
we
don
'
t
send
a
SKIPPED_SIGNIN
ping
.
if
(
!
ev
|
|
ev
.
type
!
=
=
"
visibilitychange
"
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SKIPPED_SIGNIN
"
.
.
.
this
.
_getFormInfo
(
)
}
)
)
;
}
/
/
Bug
1190882
-
Focus
in
a
disappearing
dialog
confuses
screen
readers
this
.
props
.
document
.
activeElement
.
blur
(
)
;
}
/
*
*
*
Report
to
telemetry
additional
information
about
the
form
submission
.
*
/
_getFormInfo
(
)
{
const
value
=
{
has_flow_params
:
!
!
this
.
props
.
flowParams
.
flowId
.
length
}
;
return
{
value
}
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
UTMTerm
}
=
props
;
const
{
content
}
=
props
.
message
;
const
innerClassName
=
[
"
trailhead
"
content
&
&
content
.
className
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_1__
[
"
ModalOverlayWrapper
"
]
{
innerClassName
:
innerClassName
onClose
:
this
.
closeModal
id
:
"
trailheadDialog
"
headerId
:
"
trailheadHeader
"
hasDismissIcon
:
true
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
trailheadInner
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
trailheadContent
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h1
"
{
"
data
-
l10n
-
id
"
:
content
.
title
.
string_id
id
:
"
trailheadHeader
"
}
)
content
.
subtitle
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
content
.
subtitle
.
string_id
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
ul
"
{
className
:
"
trailheadBenefits
"
}
content
.
benefits
.
map
(
item
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
{
key
:
item
.
id
className
:
item
.
id
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
h2
"
{
"
data
-
l10n
-
id
"
:
item
.
title
.
string_id
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
item
.
text
.
string_id
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
className
:
"
trailheadLearn
"
"
data
-
l10n
-
id
"
:
content
.
learn
.
text
.
string_id
href
:
Object
(
_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_3__
[
"
addUtmParams
"
]
)
(
content
.
learn
.
url
UTMTerm
)
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
trailhead
-
join
-
form
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_components_FxASignupForm_FxASignupForm__WEBPACK_IMPORTED_MODULE_2__
[
"
FxASignupForm
"
]
{
document
:
this
.
props
.
document
content
:
content
dispatch
:
this
.
props
.
dispatch
fxaEndpoint
:
this
.
props
.
fxaEndpoint
UTMTerm
:
UTMTerm
flowParams
:
this
.
props
.
flowParams
onClose
:
this
.
closeModal
}
)
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
trailheadStart
"
"
data
-
l10n
-
id
"
:
content
.
skipButton
.
string_id
onBlur
:
this
.
onStartBlur
onClick
:
this
.
closeModal
}
)
)
;
}
}
Trailhead
.
defaultProps
=
{
flowParams
:
{
deviceId
:
"
"
flowId
:
"
"
flowBeginTime
:
"
"
}
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
21
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ModalOverlayWrapper
"
function
(
)
{
return
ModalOverlayWrapper
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ModalOverlay
"
function
(
)
{
return
ModalOverlay
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
ModalOverlayWrapper
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onKeyDown
=
this
.
onKeyDown
.
bind
(
this
)
;
}
/
/
The
intended
behaviour
is
to
listen
for
an
escape
key
/
/
but
not
for
a
click
;
see
Bug
1582242
onKeyDown
(
event
)
{
if
(
event
.
key
=
=
=
"
Escape
"
)
{
this
.
props
.
onClose
(
event
)
;
}
}
componentWillMount
(
)
{
this
.
props
.
document
.
addEventListener
(
"
keydown
"
this
.
onKeyDown
)
;
this
.
props
.
document
.
body
.
classList
.
add
(
"
modal
-
open
"
)
;
this
.
header
=
this
.
props
.
document
.
getElementById
(
"
header
-
asrouter
-
container
"
)
;
if
(
this
.
header
)
{
this
.
header
.
classList
.
add
(
"
modal
-
scroll
"
)
;
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
classList
.
add
(
"
modal
-
height
"
)
;
}
}
componentWillUnmount
(
)
{
this
.
props
.
document
.
removeEventListener
(
"
keydown
"
this
.
onKeyDown
)
;
this
.
props
.
document
.
body
.
classList
.
remove
(
"
modal
-
open
"
)
;
if
(
this
.
header
)
{
this
.
header
.
classList
.
remove
(
"
modal
-
scroll
"
)
;
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
classList
.
remove
(
"
modal
-
height
"
)
;
}
}
render
(
)
{
const
{
props
}
=
this
;
let
className
=
props
.
unstyled
?
"
"
:
"
modalOverlayInner
active
"
;
if
(
props
.
innerClassName
)
{
className
+
=
{
props
.
innerClassName
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modalOverlayOuter
active
"
onKeyDown
:
this
.
onKeyDown
role
:
"
presentation
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
className
"
aria
-
labelledby
"
:
props
.
headerId
id
:
props
.
id
role
:
"
dialog
"
}
props
.
hasDismissIcon
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
className
:
"
icon
icon
-
dismiss
"
onClick
:
props
.
onClose
"
data
-
l10n
-
id
"
:
"
onboarding
-
cards
-
dismiss
"
}
)
props
.
children
)
)
;
}
}
ModalOverlayWrapper
.
defaultProps
=
{
document
:
global
.
document
}
;
class
ModalOverlay
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
title
button_label
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
ModalOverlayWrapper
{
onClose
:
this
.
props
.
onDismissBundle
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
h2
"
null
"
"
title
"
"
)
this
.
props
.
children
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
footer
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
primary
modalButton
"
onClick
:
this
.
props
.
onDismissBundle
}
"
"
button_label
"
"
)
)
)
;
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
22
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FxASignupForm
"
function
(
)
{
return
FxASignupForm
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
23
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
FxASignupForm
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onSubmit
=
this
.
onSubmit
.
bind
(
this
)
;
this
.
onInputChange
=
this
.
onInputChange
.
bind
(
this
)
;
this
.
onInputInvalid
=
this
.
onInputInvalid
.
bind
(
this
)
;
this
.
handleSignIn
=
this
.
handleSignIn
.
bind
(
this
)
;
this
.
state
=
{
emailInput
:
"
"
}
;
}
get
email
(
)
{
return
this
.
props
.
document
.
getElementById
(
"
fxaSignupForm
"
)
.
querySelector
(
"
input
[
name
=
email
]
"
)
;
}
onSubmit
(
event
)
{
let
userEvent
=
"
SUBMIT_EMAIL
"
;
const
{
email
}
=
event
.
target
.
elements
;
if
(
email
.
disabled
)
{
userEvent
=
"
SUBMIT_SIGNIN
"
;
}
else
if
(
!
email
.
value
.
length
)
{
email
.
required
=
true
;
email
.
checkValidity
(
)
;
event
.
preventDefault
(
)
;
return
;
}
/
/
Report
to
telemetry
additional
information
about
the
form
submission
.
const
value
=
{
has_flow_params
:
!
!
this
.
props
.
flowParams
.
flowId
.
length
}
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
value
}
)
)
;
global
.
addEventListener
(
"
visibilitychange
"
this
.
props
.
onClose
)
;
}
handleSignIn
(
event
)
{
/
/
Set
disabled
to
prevent
email
from
appearing
in
url
resulting
in
the
wrong
page
this
.
email
.
disabled
=
true
;
}
componentDidMount
(
)
{
/
/
Start
with
focus
in
the
email
input
box
if
(
this
.
email
)
{
this
.
email
.
focus
(
)
;
}
}
onInputChange
(
e
)
{
let
error
=
e
.
target
.
previousSibling
;
this
.
setState
(
{
emailInput
:
e
.
target
.
value
}
)
;
error
.
classList
.
remove
(
"
active
"
)
;
e
.
target
.
classList
.
remove
(
"
invalid
"
)
;
}
onInputInvalid
(
e
)
{
let
error
=
e
.
target
.
previousSibling
;
error
.
classList
.
add
(
"
active
"
)
;
e
.
target
.
classList
.
add
(
"
invalid
"
)
;
e
.
preventDefault
(
)
;
/
/
Override
built
-
in
form
validation
popup
e
.
target
.
focus
(
)
;
}
render
(
)
{
const
{
content
UTMTerm
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
id
:
"
fxaSignupForm
"
role
:
"
group
"
"
aria
-
labelledby
"
:
"
joinFormHeader
"
"
aria
-
describedby
"
:
"
joinFormBody
"
className
:
"
fxaSignupForm
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
h3
"
{
id
:
"
joinFormHeader
"
"
data
-
l10n
-
id
"
:
content
.
form
.
title
.
string_id
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
p
"
{
id
:
"
joinFormBody
"
"
data
-
l10n
-
id
"
:
content
.
form
.
text
.
string_id
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
form
"
{
method
:
"
get
"
action
:
this
.
props
.
fxaEndpoint
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
onSubmit
:
this
.
onSubmit
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
action
"
type
:
"
hidden
"
value
:
"
email
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
context
"
type
:
"
hidden
"
value
:
"
fx_desktop_v3
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
entrypoint
"
type
:
"
hidden
"
value
:
"
activity
-
stream
-
firstrun
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
utm_source
"
type
:
"
hidden
"
value
:
"
activity
-
stream
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
utm_campaign
"
type
:
"
hidden
"
value
:
_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_1__
[
"
BASE_PARAMS
"
]
.
utm_campaign
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
utm_term
"
type
:
"
hidden
"
value
:
UTMTerm
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
device_id
"
type
:
"
hidden
"
value
:
this
.
props
.
flowParams
.
deviceId
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
flow_id
"
type
:
"
hidden
"
value
:
this
.
props
.
flowParams
.
flowId
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
flow_begin_time
"
type
:
"
hidden
"
value
:
this
.
props
.
flowParams
.
flowBeginTime
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
name
:
"
style
"
type
:
"
hidden
"
value
:
"
trailhead
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
onboarding
-
join
-
form
-
email
-
error
"
className
:
"
error
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
input
"
{
"
data
-
l10n
-
id
"
:
content
.
form
.
email
.
string_id
name
:
"
email
"
type
:
"
email
"
onInvalid
:
this
.
onInputInvalid
onChange
:
this
.
onInputChange
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
p
"
{
className
:
"
fxa
-
terms
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
join
-
form
-
legal
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
a
"
{
"
data
-
l10n
-
name
"
:
"
terms
"
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
href
:
Object
(
_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_1__
[
"
addUtmParams
"
]
)
(
"
https
:
/
/
accounts
.
firefox
.
com
/
legal
/
terms
"
UTMTerm
)
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
a
"
{
"
data
-
l10n
-
name
"
:
"
privacy
"
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
href
:
Object
(
_templates_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_1__
[
"
addUtmParams
"
]
)
(
"
https
:
/
/
accounts
.
firefox
.
com
/
legal
/
privacy
"
UTMTerm
)
}
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
"
data
-
l10n
-
id
"
:
content
.
form
.
button
.
string_id
type
:
"
submit
"
}
)
this
.
props
.
showSignInLink
&
&
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fxa
-
signin
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
onboarding
-
join
-
form
-
signin
-
label
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
"
data
-
l10n
-
id
"
:
"
onboarding
-
join
-
form
-
signin
"
onClick
:
this
.
handleSignIn
}
)
)
)
)
;
}
}
FxASignupForm
.
defaultProps
=
{
document
:
global
.
document
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
23
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
BASE_PARAMS
"
function
(
)
{
return
BASE_PARAMS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
addUtmParams
"
function
(
)
{
return
addUtmParams
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
BASE_PARAMS
keys
/
values
can
be
modified
from
outside
this
file
*
/
const
BASE_PARAMS
=
{
utm_source
:
"
activity
-
stream
"
utm_campaign
:
"
firstrun
"
utm_medium
:
"
referral
"
}
;
/
*
*
*
Takes
in
a
url
as
a
string
or
URL
object
and
returns
a
URL
object
with
the
*
utm_
*
parameters
added
to
it
.
If
a
URL
object
is
passed
in
the
paraemeters
*
are
added
to
it
(
the
return
value
can
be
ignored
in
that
case
as
it
'
s
the
*
same
object
)
.
*
/
function
addUtmParams
(
url
utmTerm
)
{
let
returnUrl
=
url
;
if
(
typeof
returnUrl
=
=
=
"
string
"
)
{
returnUrl
=
new
URL
(
url
)
;
}
Object
.
keys
(
BASE_PARAMS
)
.
forEach
(
key
=
>
{
returnUrl
.
searchParams
.
append
(
key
BASE_PARAMS
[
key
]
)
;
}
)
;
returnUrl
.
searchParams
.
append
(
"
utm_term
"
utmTerm
)
;
return
returnUrl
;
}
/
*
*
*
/
}
)
/
*
24
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ReturnToAMO
"
function
(
)
{
return
ReturnToAMO
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
_components_RichText_RichText__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
14
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Alt
text
if
available
;
in
the
future
this
should
come
from
the
server
.
See
bug
1551711
const
ICON_ALT_TEXT
=
"
"
;
class
ReturnToAMO
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClickAddExtension
=
this
.
onClickAddExtension
.
bind
(
this
)
;
this
.
onBlockButton
=
this
.
onBlockButton
.
bind
(
this
)
;
}
componentWillMount
(
)
{
global
.
document
.
body
.
classList
.
add
(
"
amo
"
)
;
}
componentDidMount
(
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
IMPRESSION
"
id
:
this
.
props
.
UISurface
}
)
;
/
/
Hide
the
page
content
from
screen
readers
while
the
modal
is
open
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
setAttribute
(
"
aria
-
hidden
"
"
true
"
)
;
}
onClickAddExtension
(
)
{
this
.
props
.
onAction
(
this
.
props
.
content
.
primary_button
.
action
)
;
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
INSTALL
"
id
:
this
.
props
.
UISurface
}
)
;
}
onBlockButton
(
)
{
this
.
props
.
onBlock
(
)
;
document
.
body
.
classList
.
remove
(
"
welcome
"
"
hide
-
main
"
"
amo
"
)
;
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
BLOCK
"
id
:
this
.
props
.
UISurface
}
)
;
/
/
Re
-
enable
the
document
for
screen
readers
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
setAttribute
(
"
aria
-
hidden
"
"
false
"
)
;
}
renderText
(
)
{
const
customElement
=
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
img
"
{
src
:
this
.
props
.
content
.
addon_icon
width
:
"
20px
"
height
:
"
20px
"
alt
:
ICON_ALT_TEXT
}
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
_components_RichText_RichText__WEBPACK_IMPORTED_MODULE_1__
[
"
RichText
"
]
{
customElements
:
{
icon
:
customElement
}
amo_html
:
this
.
props
.
content
.
text
localization_id
:
"
amo_html
"
}
)
;
}
render
(
)
{
const
{
content
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ReturnToAMOOverlay
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
h2
"
null
"
"
content
.
header
"
"
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ReturnToAMOContainer
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ReturnToAMOAddonContents
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
p
"
null
"
"
content
.
title
"
"
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ReturnToAMOText
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
null
"
"
this
.
renderText
(
)
"
"
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
onClickAddExtension
className
:
"
puffy
blue
ReturnToAMOAddExtension
"
}
"
"
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
add
"
}
)
"
"
content
.
primary_button
.
label
"
"
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ReturnToAMOIcon
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
onBlockButton
className
:
"
default
grey
ReturnToAMOGetStarted
"
}
"
"
content
.
secondary_button
.
label
"
"
)
)
)
;
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
25
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FxAccounts
"
function
(
)
{
return
FxAccounts
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FxCards
"
function
(
)
{
return
FxCards
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FullPageInterrupt
"
function
(
)
{
return
FullPageInterrupt
;
}
)
;
/
*
harmony
import
*
/
var
_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
23
)
;
/
*
harmony
import
*
/
var
_components_FxASignupForm_FxASignupForm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
22
)
;
/
*
harmony
import
*
/
var
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
26
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
FxAccounts
=
(
{
document
content
dispatch
fxaEndpoint
flowParams
removeOverlay
url
UTMTerm
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fullpage
-
left
-
section
"
"
aria
-
labelledby
"
:
"
fullpage
-
left
-
title
"
"
aria
-
describedby
"
:
"
fullpage
-
left
-
content
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h1
"
{
id
:
"
fullpage
-
left
-
title
"
className
:
"
fullpage
-
left
-
title
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
welcome
-
body
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
id
:
"
fullpage
-
left
-
content
"
className
:
"
fullpage
-
left
-
content
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
benefit
-
products
-
text
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
className
:
"
fullpage
-
left
-
content
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
benefit
-
privacy
-
text
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
className
:
"
fullpage
-
left
-
link
"
href
:
Object
(
_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_0__
[
"
addUtmParams
"
]
)
(
url
UTMTerm
)
target
:
"
_blank
"
rel
:
"
noopener
noreferrer
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
welcome
-
learn
-
more
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fullpage
-
icon
fx
-
systems
-
icons
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fullpage
-
form
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
_components_FxASignupForm_FxASignupForm__WEBPACK_IMPORTED_MODULE_1__
[
"
FxASignupForm
"
]
{
document
:
document
content
:
content
dispatch
:
dispatch
fxaEndpoint
:
fxaEndpoint
UTMTerm
:
UTMTerm
flowParams
:
flowParams
onClose
:
removeOverlay
showSignInLink
:
true
}
)
)
)
;
const
FxCards
=
(
{
cards
onCardAction
sendUserActionTelemetry
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
Fragment
null
cards
.
map
(
card
=
>
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_2__
[
"
OnboardingCard
"
]
_extends
(
{
key
:
card
.
id
message
:
card
className
:
"
trailheadCard
"
sendUserActionTelemetry
:
sendUserActionTelemetry
onAction
:
onCardAction
UISurface
:
"
TRAILHEAD
"
}
card
)
)
)
)
;
class
FullPageInterrupt
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
removeOverlay
=
this
.
removeOverlay
.
bind
(
this
)
;
this
.
onCardAction
=
this
.
onCardAction
.
bind
(
this
)
;
}
componentWillMount
(
)
{
global
.
document
.
body
.
classList
.
add
(
"
trailhead
-
fullpage
"
)
;
}
componentDidMount
(
)
{
/
/
Hide
the
page
content
from
screen
readers
while
the
full
page
interrupt
is
open
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
setAttribute
(
"
aria
-
hidden
"
"
true
"
)
;
}
removeOverlay
(
)
{
window
.
removeEventListener
(
"
visibilitychange
"
this
.
removeOverlay
)
;
document
.
body
.
classList
.
remove
(
"
hide
-
main
"
"
trailhead
-
fullpage
"
)
;
/
/
Re
-
enable
the
document
for
screen
readers
this
.
props
.
document
.
getElementById
(
"
root
"
)
.
setAttribute
(
"
aria
-
hidden
"
"
false
"
)
;
this
.
props
.
onBlock
(
)
;
document
.
body
.
classList
.
remove
(
"
welcome
"
)
;
}
onCardAction
(
action
message
)
{
let
actionUpdates
=
{
}
;
const
{
flowParams
UTMTerm
}
=
this
.
props
;
if
(
action
.
type
=
=
=
"
OPEN_URL
"
)
{
let
url
=
new
URL
(
action
.
data
.
args
)
;
Object
(
_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_0__
[
"
addUtmParams
"
]
)
(
url
UTMTerm
)
;
if
(
action
.
addFlowParams
)
{
url
.
searchParams
.
append
(
"
device_id
"
flowParams
.
deviceId
)
;
url
.
searchParams
.
append
(
"
flow_id
"
flowParams
.
flowId
)
;
url
.
searchParams
.
append
(
"
flow_begin_time
"
flowParams
.
flowBeginTime
)
;
}
actionUpdates
=
{
data
:
{
.
.
.
action
.
data
args
:
url
.
toString
(
)
}
}
;
}
this
.
props
.
onAction
(
{
.
.
.
action
.
.
.
actionUpdates
}
)
;
/
/
Only
block
if
message
is
in
dynamic
triplets
experiment
if
(
message
.
blockOnClick
)
{
this
.
props
.
onBlockById
(
message
.
id
{
preloadedOnly
:
true
}
)
;
}
this
.
removeOverlay
(
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
content
}
=
props
.
message
;
const
cards
=
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
FxCards
{
cards
:
props
.
cards
onCardAction
:
this
.
onCardAction
sendUserActionTelemetry
:
props
.
sendUserActionTelemetry
}
)
;
const
accounts
=
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
FxAccounts
{
document
:
props
.
document
content
:
content
dispatch
:
props
.
dispatch
fxaEndpoint
:
props
.
fxaEndpoint
flowParams
:
props
.
flowParams
removeOverlay
:
this
.
removeOverlay
url
:
content
.
learn
.
url
UTMTerm
:
props
.
UTMTerm
}
)
;
/
/
By
default
we
show
accounts
section
on
top
and
/
/
cards
section
in
bottom
half
of
the
full
page
interrupt
const
cardsFirst
=
content
&
&
content
.
className
=
=
=
"
fullPageCardsAtTop
"
;
const
firstContainerClassName
=
[
"
container
"
content
&
&
content
.
className
]
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fullpage
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fullpage
-
icon
brand
-
logo
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h1
"
{
className
:
"
welcome
-
title
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
welcome
-
header
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h2
"
{
className
:
"
welcome
-
subtitle
"
"
data
-
l10n
-
id
"
:
"
onboarding
-
fullpage
-
welcome
-
subheader
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
firstContainerClassName
}
cardsFirst
?
cards
:
accounts
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
divider
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
container
"
}
cardsFirst
?
accounts
:
cards
)
)
;
}
}
FullPageInterrupt
.
defaultProps
=
{
flowParams
:
{
deviceId
:
"
"
flowId
:
"
"
flowBeginTime
:
"
"
}
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
26
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
OnboardingCard
"
function
(
)
{
return
OnboardingCard
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
OnboardingCard
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
onClick
(
)
{
const
{
props
}
=
this
;
const
ping
=
{
event
:
"
CLICK_BUTTON
"
message_id
:
props
.
id
id
:
props
.
UISurface
}
;
props
.
sendUserActionTelemetry
(
ping
)
;
props
.
onAction
(
props
.
content
.
primary_button
.
action
props
.
message
)
;
}
render
(
)
{
const
{
content
}
=
this
.
props
;
const
className
=
this
.
props
.
className
|
|
"
onboardingMessage
"
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
className
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
onboardingMessageImage
{
content
.
icon
}
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
onboardingContent
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
h2
"
{
className
:
"
onboardingTitle
"
"
data
-
l10n
-
id
"
:
content
.
title
.
string_id
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
p
"
{
className
:
"
onboardingText
"
"
data
-
l10n
-
id
"
:
content
.
text
.
string_id
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
onboardingButtonContainer
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
"
data
-
l10n
-
id
"
:
content
.
primary_button
.
label
.
string_id
className
:
"
button
onboardingButton
"
onClick
:
this
.
onClick
}
)
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
27
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Triplets
"
function
(
)
{
return
Triplets
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
26
)
;
/
*
harmony
import
*
/
var
_addUtmParams__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
23
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Triplets
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onCardAction
=
this
.
onCardAction
.
bind
(
this
)
;
this
.
onHideContainer
=
this
.
onHideContainer
.
bind
(
this
)
;
}
componentWillMount
(
)
{
global
.
document
.
body
.
classList
.
add
(
"
inline
-
onboarding
"
)
;
}
componentWillUnmount
(
)
{
this
.
props
.
document
.
body
.
classList
.
remove
(
"
inline
-
onboarding
"
)
;
}
onCardAction
(
action
message
)
{
let
actionUpdates
=
{
}
;
const
{
flowParams
UTMTerm
}
=
this
.
props
;
if
(
action
.
type
=
=
=
"
OPEN_URL
"
)
{
let
url
=
new
URL
(
action
.
data
.
args
)
;
Object
(
_addUtmParams__WEBPACK_IMPORTED_MODULE_2__
[
"
addUtmParams
"
]
)
(
url
UTMTerm
)
;
if
(
action
.
addFlowParams
)
{
url
.
searchParams
.
append
(
"
device_id
"
flowParams
.
deviceId
)
;
url
.
searchParams
.
append
(
"
flow_id
"
flowParams
.
flowId
)
;
url
.
searchParams
.
append
(
"
flow_begin_time
"
flowParams
.
flowBeginTime
)
;
}
actionUpdates
=
{
data
:
{
.
.
.
action
.
data
args
:
url
.
toString
(
)
}
}
;
}
this
.
props
.
onAction
(
{
.
.
.
action
.
.
.
actionUpdates
}
)
;
/
/
Only
block
if
message
is
in
dynamic
triplets
experiment
if
(
message
.
blockOnClick
)
{
this
.
props
.
onBlockById
(
message
.
id
{
preloadedOnly
:
true
}
)
;
}
}
onHideContainer
(
)
{
const
{
sendUserActionTelemetry
cards
hideContainer
}
=
this
.
props
;
hideContainer
(
)
;
sendUserActionTelemetry
(
{
event
:
"
DISMISS
"
id
:
"
onboarding
-
cards
"
message_id
:
cards
.
map
(
m
=
>
m
.
id
)
.
join
(
"
"
)
action
:
"
onboarding_user_event
"
}
)
;
}
render
(
)
{
const
{
cards
headerId
showCardPanel
showContent
sendUserActionTelemetry
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
trailheadCards
{
showCardPanel
?
"
expanded
"
:
"
collapsed
"
}
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
trailheadCardsInner
"
"
aria
-
hidden
"
:
!
showContent
}
headerId
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
h1
"
{
"
data
-
l10n
-
id
"
:
headerId
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
trailheadCardGrid
{
showContent
?
"
show
"
:
"
"
}
}
cards
.
map
(
card
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_1__
[
"
OnboardingCard
"
]
_extends
(
{
key
:
card
.
id
message
:
card
className
:
"
trailheadCard
"
sendUserActionTelemetry
:
sendUserActionTelemetry
onAction
:
this
.
onCardAction
UISurface
:
"
TRAILHEAD
"
}
card
)
)
)
)
showCardPanel
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
className
:
"
icon
icon
-
dismiss
"
onClick
:
this
.
onHideContainer
"
data
-
l10n
-
id
"
:
"
onboarding
-
cards
-
dismiss
"
}
)
)
)
;
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
28
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
ReactRedux
;
/
*
*
*
/
}
)
/
*
29
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SimpleHashRouter
"
function
(
)
{
return
SimpleHashRouter
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SimpleHashRouter
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onHashChange
=
this
.
onHashChange
.
bind
(
this
)
;
this
.
state
=
{
hash
:
global
.
location
.
hash
}
;
}
onHashChange
(
)
{
this
.
setState
(
{
hash
:
global
.
location
.
hash
}
)
;
}
componentWillMount
(
)
{
global
.
addEventListener
(
"
hashchange
"
this
.
onHashChange
)
;
}
componentWillUnmount
(
)
{
global
.
removeEventListener
(
"
hashchange
"
this
.
onHashChange
)
;
}
render
(
)
{
const
[
.
.
.
routes
]
=
this
.
state
.
hash
.
split
(
"
-
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
cloneElement
(
this
.
props
.
children
{
location
:
{
hash
:
this
.
state
.
hash
routes
}
}
)
;
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
30
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_ConfirmDialog
"
function
(
)
{
return
_ConfirmDialog
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ConfirmDialog
"
function
(
)
{
return
ConfirmDialog
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
ConfirmDialog
component
.
*
One
primary
action
button
one
cancel
button
.
*
*
Content
displayed
is
controlled
by
data
prop
the
component
receives
.
*
Example
:
*
data
:
{
*
/
/
Any
sort
of
data
needed
to
be
passed
around
by
actions
.
*
payload
:
site
.
url
*
/
/
Primary
button
AlsoToMain
action
.
*
action
:
"
DELETE_HISTORY_URL
"
*
/
/
Primary
button
USerEvent
action
.
*
userEvent
:
"
DELETE
"
*
/
/
Array
of
locale
ids
to
display
.
*
message_body
:
[
"
confirm_history_delete_p1
"
"
confirm_history_delete_notice_p2
"
]
*
/
/
Text
for
primary
button
.
*
confirm_button_string_id
:
"
menu_action_delete
"
*
}
*
/
class
_ConfirmDialog
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
_handleCancelBtn
=
this
.
_handleCancelBtn
.
bind
(
this
)
;
this
.
_handleConfirmBtn
=
this
.
_handleConfirmBtn
.
bind
(
this
)
;
}
_handleCancelBtn
(
)
{
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_CANCEL
}
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_CANCEL
source
:
this
.
props
.
data
.
eventSource
}
)
)
;
}
_handleConfirmBtn
(
)
{
this
.
props
.
data
.
onConfirm
.
forEach
(
this
.
props
.
dispatch
)
;
}
_renderModalMessage
(
)
{
const
message_body
=
this
.
props
.
data
.
body_string_id
;
if
(
!
message_body
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
null
message_body
.
map
(
msg
=
>
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
p
"
{
key
:
msg
"
data
-
l10n
-
id
"
:
msg
}
)
)
)
;
}
render
(
)
{
if
(
!
this
.
props
.
visible
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
confirmation
-
dialog
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
-
overlay
"
onClick
:
this
.
_handleCancelBtn
role
:
"
presentation
"
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
section
"
{
className
:
"
modal
-
message
"
}
this
.
props
.
data
.
icon
&
&
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
spacer
icon
-
{
this
.
props
.
data
.
icon
}
}
)
this
.
_renderModalMessage
(
)
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
onClick
:
this
.
_handleCancelBtn
"
data
-
l10n
-
id
"
:
this
.
props
.
data
.
cancel_button_string_id
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
onClick
:
this
.
_handleConfirmBtn
"
data
-
l10n
-
id
"
:
this
.
props
.
data
.
confirm_button_string_id
}
)
)
)
)
;
}
}
const
ConfirmDialog
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
state
=
>
state
.
Dialog
)
(
_ConfirmDialog
)
;
/
*
*
*
/
}
)
/
*
31
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
isAllowedCSS
"
function
(
)
{
return
isAllowedCSS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_DiscoveryStreamBase
"
function
(
)
{
return
_DiscoveryStreamBase
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DiscoveryStreamBase
"
function
(
)
{
return
DiscoveryStreamBase
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_CardGrid_CardGrid__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
32
)
;
/
*
harmony
import
*
/
var
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
46
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_3__
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_DSDismiss_DSDismiss__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
52
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_DSMessage_DSMessage__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
53
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_DSPrivacyModal_DSPrivacyModal__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
54
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_DSTextPromo_DSTextPromo__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
55
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_Hero_Hero__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
56
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_Highlights_Highlights__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
58
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_HorizontalRule_HorizontalRule__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
71
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_List_List__WEBPACK_IMPORTED_MODULE_11__
=
__webpack_require__
(
57
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_Navigation_Navigation__WEBPACK_IMPORTED_MODULE_12__
=
__webpack_require__
(
72
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_13__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_13___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_13__
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_SectionTitle_SectionTitle__WEBPACK_IMPORTED_MODULE_14__
=
__webpack_require__
(
73
)
;
/
*
harmony
import
*
/
var
content_src_lib_selectLayoutRender__WEBPACK_IMPORTED_MODULE_15__
=
__webpack_require__
(
74
)
;
/
*
harmony
import
*
/
var
content_src_components_DiscoveryStreamComponents_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_16__
=
__webpack_require__
(
75
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
ALLOWED_CSS_URL_PREFIXES
=
[
"
chrome
:
/
/
"
"
resource
:
/
/
"
"
https
:
/
/
img
-
getpocket
.
cdn
.
mozilla
.
net
/
"
]
;
const
DUMMY_CSS_SELECTOR
=
"
DUMMY
#
CSS
.
SELECTOR
"
;
let
rollCache
=
[
]
;
/
/
Cache
of
random
probability
values
for
a
spoc
position
/
*
*
*
Validate
a
CSS
declaration
.
The
values
are
assumed
to
be
normalized
by
CSSOM
.
*
/
function
isAllowedCSS
(
property
value
)
{
/
/
Bug
1454823
:
INTERNAL
properties
e
.
g
.
-
moz
-
context
-
properties
are
/
/
exposed
but
their
values
aren
'
t
resulting
in
getting
nothing
.
Fortunately
/
/
we
don
'
t
care
about
validating
the
values
of
the
current
set
of
properties
.
if
(
value
=
=
=
undefined
)
{
return
true
;
}
/
/
Make
sure
all
urls
are
of
the
allowed
protocols
/
prefixes
const
urls
=
value
.
match
(
/
url
\
(
"
[
^
"
]
+
"
\
)
/
g
)
;
return
!
urls
|
|
urls
.
every
(
url
=
>
ALLOWED_CSS_URL_PREFIXES
.
some
(
prefix
=
>
url
.
slice
(
5
)
.
startsWith
(
prefix
)
)
)
;
}
class
_DiscoveryStreamBase
extends
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onStyleMount
=
this
.
onStyleMount
.
bind
(
this
)
;
}
onStyleMount
(
style
)
{
/
/
Unmounting
style
gets
rid
of
old
styles
so
nothing
else
to
do
if
(
!
style
)
{
return
;
}
const
{
sheet
}
=
style
;
const
styles
=
JSON
.
parse
(
style
.
dataset
.
styles
)
;
styles
.
forEach
(
(
row
rowIndex
)
=
>
{
row
.
forEach
(
(
component
componentIndex
)
=
>
{
/
/
Nothing
to
do
without
optional
styles
overrides
if
(
!
component
)
{
return
;
}
Object
.
entries
(
component
)
.
forEach
(
(
[
selectors
declarations
]
)
=
>
{
/
/
Start
with
a
dummy
rule
to
validate
declarations
and
selectors
sheet
.
insertRule
(
{
DUMMY_CSS_SELECTOR
}
{
}
)
;
const
[
rule
]
=
sheet
.
cssRules
;
/
/
Validate
declarations
and
remove
any
offenders
.
CSSOM
silently
/
/
discards
invalid
entries
so
here
we
apply
extra
restrictions
.
rule
.
style
=
declarations
;
[
.
.
.
rule
.
style
]
.
forEach
(
property
=
>
{
const
value
=
rule
.
style
[
property
]
;
if
(
!
isAllowedCSS
(
property
value
)
)
{
console
.
error
(
Bad
CSS
declaration
{
property
}
:
{
value
}
)
;
/
/
eslint
-
disable
-
line
no
-
console
rule
.
style
.
removeProperty
(
property
)
;
}
}
)
;
/
/
Set
the
actual
desired
selectors
scoped
to
the
component
const
prefix
=
.
ds
-
layout
>
.
ds
-
column
:
nth
-
child
(
{
rowIndex
+
1
}
)
.
ds
-
column
-
grid
>
:
nth
-
child
(
{
componentIndex
+
1
}
)
;
/
/
NB
:
Splitting
on
"
"
doesn
'
t
work
with
strings
with
commas
but
/
/
we
'
re
okay
with
not
supporting
those
selectors
rule
.
selectorText
=
selectors
.
split
(
"
"
)
.
map
(
selector
=
>
prefix
+
(
/
/
Assume
:
pseudo
-
classes
are
for
component
instead
of
descendant
selector
[
0
]
=
=
=
"
:
"
?
"
"
:
"
"
)
+
selector
)
.
join
(
"
"
)
;
/
/
CSSOM
silently
ignores
bad
selectors
so
we
'
ll
be
noisy
instead
if
(
rule
.
selectorText
=
=
=
DUMMY_CSS_SELECTOR
)
{
console
.
error
(
Bad
CSS
selector
{
selectors
}
)
;
/
/
eslint
-
disable
-
line
no
-
console
}
}
)
;
}
)
;
}
)
;
}
renderComponent
(
component
embedWidth
)
{
const
ENGAGEMENT_LABEL_ENABLED
=
this
.
props
.
Prefs
.
values
[
discoverystream
.
engagementLabelEnabled
]
;
switch
(
component
.
type
)
{
case
"
Highlights
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_Highlights_Highlights__WEBPACK_IMPORTED_MODULE_9__
[
"
Highlights
"
]
null
)
;
case
"
TopSites
"
:
let
promoAlignment
;
if
(
component
.
spocs
&
&
component
.
spocs
.
positions
&
&
component
.
spocs
.
positions
.
length
)
{
promoAlignment
=
component
.
spocs
.
positions
[
0
]
.
index
=
=
=
0
?
"
left
"
:
"
right
"
;
}
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_16__
[
"
TopSites
"
]
{
header
:
component
.
header
data
:
component
.
data
promoAlignment
:
promoAlignment
}
)
;
case
"
TextPromo
"
:
if
(
!
component
.
data
|
|
!
component
.
data
.
spocs
|
|
!
component
.
data
.
spocs
[
0
]
)
{
return
null
;
}
/
/
Grab
the
first
item
in
the
array
as
we
only
have
1
spoc
position
.
const
[
spoc
]
=
component
.
data
.
spocs
;
const
{
image_src
raw_image_src
alt_text
title
url
context
cta
flight_id
id
shim
}
=
spoc
;
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_DSDismiss_DSDismiss__WEBPACK_IMPORTED_MODULE_4__
[
"
DSDismiss
"
]
{
data
:
{
url
:
spoc
.
url
guid
:
spoc
.
id
shim
:
spoc
.
shim
}
dispatch
:
this
.
props
.
dispatch
shouldSendImpressionStats
:
true
extraClasses
:
ds
-
dismiss
-
ds
-
text
-
promo
}
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_DSTextPromo_DSTextPromo__WEBPACK_IMPORTED_MODULE_7__
[
"
DSTextPromo
"
]
{
dispatch
:
this
.
props
.
dispatch
image
:
image_src
raw_image_src
:
raw_image_src
alt_text
:
alt_text
|
|
title
header
:
title
cta_text
:
cta
cta_url
:
url
subtitle
:
context
flightId
:
flight_id
id
:
id
pos
:
0
shim
:
shim
type
:
component
.
type
}
)
)
;
case
"
Message
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_DSMessage_DSMessage__WEBPACK_IMPORTED_MODULE_5__
[
"
DSMessage
"
]
{
title
:
component
.
header
&
&
component
.
header
.
title
subtitle
:
component
.
header
&
&
component
.
header
.
subtitle
link_text
:
component
.
header
&
&
component
.
header
.
link_text
link_url
:
component
.
header
&
&
component
.
header
.
link_url
icon
:
component
.
header
&
&
component
.
header
.
icon
}
)
;
case
"
SectionTitle
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_SectionTitle_SectionTitle__WEBPACK_IMPORTED_MODULE_14__
[
"
SectionTitle
"
]
{
header
:
component
.
header
}
)
;
case
"
Navigation
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_Navigation_Navigation__WEBPACK_IMPORTED_MODULE_12__
[
"
Navigation
"
]
{
links
:
component
.
properties
.
links
alignment
:
component
.
properties
.
alignment
header
:
component
.
header
}
)
;
case
"
CardGrid
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_CardGrid_CardGrid__WEBPACK_IMPORTED_MODULE_1__
[
"
CardGrid
"
]
{
title
:
component
.
header
&
&
component
.
header
.
title
data
:
component
.
data
feed
:
component
.
feed
border
:
component
.
properties
.
border
type
:
component
.
type
dispatch
:
this
.
props
.
dispatch
items
:
component
.
properties
.
items
cta_variant
:
component
.
cta_variant
display_engagement_labels
:
ENGAGEMENT_LABEL_ENABLED
}
)
;
case
"
Hero
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_Hero_Hero__WEBPACK_IMPORTED_MODULE_8__
[
"
Hero
"
]
{
subComponentType
:
embedWidth
>
=
9
?
cards
:
list
feed
:
component
.
feed
title
:
component
.
header
&
&
component
.
header
.
title
data
:
component
.
data
border
:
component
.
properties
.
border
type
:
component
.
type
dispatch
:
this
.
props
.
dispatch
items
:
component
.
properties
.
items
}
)
;
case
"
HorizontalRule
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_HorizontalRule_HorizontalRule__WEBPACK_IMPORTED_MODULE_10__
[
"
HorizontalRule
"
]
null
)
;
case
"
List
"
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_List_List__WEBPACK_IMPORTED_MODULE_11__
[
"
List
"
]
{
data
:
component
.
data
feed
:
component
.
feed
fullWidth
:
component
.
properties
.
full_width
hasBorders
:
component
.
properties
.
border
=
=
=
"
border
"
hasImages
:
component
.
properties
.
has_images
hasNumbers
:
component
.
properties
.
has_numbers
items
:
component
.
properties
.
items
type
:
component
.
type
header
:
component
.
header
}
)
;
default
:
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
div
"
null
component
.
type
)
;
}
}
renderStyles
(
styles
)
{
/
/
Use
json
string
as
both
the
key
and
styles
to
render
so
React
knows
when
/
/
to
unmount
and
mount
a
new
instance
for
new
styles
.
const
json
=
JSON
.
stringify
(
styles
)
;
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
style
"
{
key
:
json
"
data
-
styles
"
:
json
ref
:
this
.
onStyleMount
}
)
;
}
componentWillReceiveProps
(
oldProps
)
{
if
(
this
.
props
.
DiscoveryStream
.
layout
!
=
=
oldProps
.
DiscoveryStream
.
layout
)
{
rollCache
=
[
]
;
}
}
render
(
)
{
/
/
Select
layout
render
data
by
adding
spocs
and
position
to
recommendations
const
{
layoutRender
spocsFill
}
=
Object
(
content_src_lib_selectLayoutRender__WEBPACK_IMPORTED_MODULE_15__
[
"
selectLayoutRender
"
]
)
(
{
state
:
this
.
props
.
DiscoveryStream
prefs
:
this
.
props
.
Prefs
.
values
rollCache
lang
:
this
.
props
.
document
.
documentElement
.
lang
}
)
;
const
{
config
spocs
feeds
}
=
this
.
props
.
DiscoveryStream
;
/
/
Send
SPOCS
Fill
if
any
.
Note
that
it
should
not
send
it
again
if
the
same
/
/
page
gets
re
-
rendered
by
state
changes
.
if
(
spocs
.
loaded
&
&
feeds
.
loaded
&
&
spocsFill
.
length
&
&
!
this
.
_spocsFillSent
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
DiscoveryStreamSpocsFill
(
{
spoc_fills
:
spocsFill
}
)
)
;
this
.
_spocsFillSent
=
true
;
}
/
/
Allow
rendering
without
extracting
special
components
if
(
!
config
.
collapsible
)
{
return
this
.
renderLayout
(
layoutRender
)
;
}
/
/
Find
the
first
component
of
a
type
and
remove
it
from
layout
const
extractComponent
=
type
=
>
{
for
(
const
[
rowIndex
row
]
of
Object
.
entries
(
layoutRender
)
)
{
for
(
const
[
index
component
]
of
Object
.
entries
(
row
.
components
)
)
{
if
(
component
.
type
=
=
=
type
)
{
/
/
Remove
the
row
if
it
was
the
only
component
or
the
single
item
if
(
row
.
components
.
length
=
=
=
1
)
{
layoutRender
.
splice
(
rowIndex
1
)
;
}
else
{
row
.
components
.
splice
(
index
1
)
;
}
return
component
;
}
}
}
return
null
;
}
;
/
/
Get
"
topstories
"
Section
state
for
default
values
const
topStories
=
this
.
props
.
Sections
.
find
(
s
=
>
s
.
id
=
=
=
"
topstories
"
)
;
if
(
!
topStories
)
{
return
null
;
}
/
/
Extract
TopSites
to
render
before
the
rest
and
Message
to
use
for
header
const
topSites
=
extractComponent
(
"
TopSites
"
)
;
const
message
=
extractComponent
(
"
Message
"
)
|
|
{
header
:
{
link_text
:
topStories
.
learnMore
.
link
.
message
link_url
:
topStories
.
learnMore
.
link
.
href
title
:
topStories
.
title
}
}
;
/
/
Render
a
DS
-
style
TopSites
then
the
rest
if
any
in
a
collapsible
section
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
Fragment
null
this
.
props
.
DiscoveryStream
.
isPrivacyInfoModalVisible
&
&
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_DiscoveryStreamComponents_DSPrivacyModal_DSPrivacyModal__WEBPACK_IMPORTED_MODULE_6__
[
"
DSPrivacyModal
"
]
{
dispatch
:
this
.
props
.
dispatch
}
)
topSites
&
&
this
.
renderLayout
(
[
{
width
:
12
components
:
[
topSites
]
}
]
)
!
!
layoutRender
.
length
&
&
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
[
"
CollapsibleSection
"
]
{
className
:
"
ds
-
layout
"
collapsed
:
topStories
.
pref
.
collapsed
dispatch
:
this
.
props
.
dispatch
icon
:
topStories
.
icon
id
:
topStories
.
id
isFixed
:
true
learnMore
:
{
link
:
{
href
:
message
.
header
.
link_url
message
:
message
.
header
.
link_text
}
}
privacyNoticeURL
:
topStories
.
privacyNoticeURL
showPrefName
:
topStories
.
pref
.
feed
title
:
message
.
header
.
title
}
this
.
renderLayout
(
layoutRender
)
)
this
.
renderLayout
(
[
{
width
:
12
components
:
[
{
type
:
"
Highlights
"
}
]
}
]
)
)
;
}
renderLayout
(
layoutRender
)
{
const
styles
=
[
]
;
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
div
"
{
className
:
"
discovery
-
stream
ds
-
layout
"
}
layoutRender
.
map
(
(
row
rowIndex
)
=
>
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
div
"
{
key
:
row
-
{
rowIndex
}
className
:
ds
-
column
ds
-
column
-
{
row
.
width
}
}
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
column
-
grid
"
}
row
.
components
.
map
(
(
component
componentIndex
)
=
>
{
if
(
!
component
)
{
return
null
;
}
styles
[
rowIndex
]
=
[
.
.
.
(
styles
[
rowIndex
]
|
|
[
]
)
component
.
styles
]
;
return
react__WEBPACK_IMPORTED_MODULE_13___default
.
a
.
createElement
(
"
div
"
{
key
:
component
-
{
componentIndex
}
}
this
.
renderComponent
(
component
row
.
width
)
)
;
}
)
)
)
)
this
.
renderStyles
(
styles
)
)
;
}
}
const
DiscoveryStreamBase
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_3__
[
"
connect
"
]
)
(
state
=
>
(
{
DiscoveryStream
:
state
.
DiscoveryStream
Prefs
:
state
.
Prefs
Sections
:
state
.
Sections
document
:
global
.
document
}
)
)
(
_DiscoveryStreamBase
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
32
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
CardGrid
"
function
(
)
{
return
CardGrid
;
}
)
;
/
*
harmony
import
*
/
var
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
33
)
;
/
*
harmony
import
*
/
var
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
45
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
CardGrid
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
renderCards
(
)
{
const
recs
=
this
.
props
.
data
.
recommendations
.
slice
(
0
this
.
props
.
items
)
;
const
cards
=
[
]
;
for
(
let
index
=
0
;
index
<
this
.
props
.
items
;
index
+
+
)
{
const
rec
=
recs
[
index
]
;
cards
.
push
(
!
rec
|
|
rec
.
placeholder
?
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
[
"
PlaceholderDSCard
"
]
{
key
:
dscard
-
{
index
}
}
)
:
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
[
"
DSCard
"
]
{
key
:
dscard
-
{
rec
.
id
}
pos
:
rec
.
pos
flightId
:
rec
.
flight_id
image_src
:
rec
.
image_src
raw_image_src
:
rec
.
raw_image_src
title
:
rec
.
title
excerpt
:
rec
.
excerpt
url
:
rec
.
url
id
:
rec
.
id
shim
:
rec
.
shim
type
:
this
.
props
.
type
context
:
rec
.
context
sponsor
:
rec
.
sponsor
dispatch
:
this
.
props
.
dispatch
source
:
rec
.
domain
pocket_id
:
rec
.
pocket_id
context_type
:
rec
.
context_type
bookmarkGuid
:
rec
.
bookmarkGuid
engagement
:
rec
.
engagement
display_engagement_labels
:
this
.
props
.
display_engagement_labels
cta
:
rec
.
cta
cta_variant
:
this
.
props
.
cta_variant
}
)
)
;
}
let
divisibility
=
;
if
(
this
.
props
.
items
%
4
=
=
=
0
)
{
divisibility
=
divisible
-
by
-
4
;
}
else
if
(
this
.
props
.
items
%
3
=
=
=
0
)
{
divisibility
=
divisible
-
by
-
3
;
}
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
ds
-
card
-
grid
ds
-
card
-
grid
-
{
this
.
props
.
border
}
ds
-
card
-
grid
-
{
divisibility
}
}
cards
)
;
}
render
(
)
{
const
{
data
}
=
this
.
props
;
/
/
Handle
a
render
before
feed
has
been
fetched
by
displaying
nothing
if
(
!
data
)
{
return
null
;
}
/
/
Handle
the
case
where
a
user
has
dismissed
all
recommendations
const
isEmpty
=
data
.
recommendations
.
length
=
=
=
0
;
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
null
this
.
props
.
title
&
&
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
header
"
}
this
.
props
.
title
)
isEmpty
?
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
card
-
grid
empty
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_1__
[
"
DSEmptyState
"
]
{
status
:
data
.
status
dispatch
:
this
.
props
.
dispatch
feed
:
this
.
props
.
feed
}
)
)
:
this
.
renderCards
(
)
)
;
}
}
CardGrid
.
defaultProps
=
{
border
:
border
items
:
4
/
/
Number
of
stories
to
display
}
;
/
*
*
*
/
}
)
/
*
33
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DefaultMeta
"
function
(
)
{
return
DefaultMeta
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
CTAButtonMeta
"
function
(
)
{
return
CTAButtonMeta
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSCard
"
function
(
)
{
return
DSCard
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
PlaceholderDSCard
"
function
(
)
{
return
PlaceholderDSCard
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
34
)
;
/
*
harmony
import
*
/
var
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
35
)
;
/
*
harmony
import
*
/
var
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
40
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
41
)
;
/
*
harmony
import
*
/
var
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
42
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Default
Meta
that
displays
CTA
as
link
if
cta_variant
in
layout
is
set
as
"
link
"
const
DefaultMeta
=
(
{
display_engagement_labels
source
title
excerpt
context
context_type
cta
engagement
cta_variant
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
meta
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
info
-
wrap
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
className
:
"
source
clamp
"
}
source
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
header
"
{
className
:
"
title
clamp
"
}
title
)
excerpt
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
className
:
"
excerpt
clamp
"
}
excerpt
)
cta_variant
=
=
=
"
link
"
&
&
cta
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
role
:
"
link
"
className
:
"
cta
-
link
icon
icon
-
arrow
"
tabIndex
:
"
0
"
}
cta
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_6__
[
"
DSContextFooter
"
]
{
context_type
:
context_type
context
:
context
display_engagement_labels
:
display_engagement_labels
engagement
:
engagement
}
)
)
;
const
CTAButtonMeta
=
(
{
display_engagement_labels
source
title
excerpt
context
context_type
cta
engagement
sponsor
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
meta
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
info
-
wrap
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
className
:
"
source
clamp
"
}
sponsor
?
sponsor
:
source
context
&
&
Sponsored
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
header
"
{
className
:
"
title
clamp
"
}
title
)
excerpt
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
p
"
{
className
:
"
excerpt
clamp
"
}
excerpt
)
)
context
&
&
cta
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
className
:
"
button
cta
-
button
"
}
cta
)
!
context
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_6__
[
"
DSContextFooter
"
]
{
context_type
:
context_type
context
:
context
display_engagement_labels
:
display_engagement_labels
engagement
:
engagement
}
)
)
;
class
DSCard
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
this
.
setPlaceholderRef
=
element
=
>
{
this
.
placeholderElement
=
element
;
}
;
this
.
state
=
{
isSeen
:
false
}
;
}
onLinkClick
(
event
)
{
if
(
this
.
props
.
dispatch
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
type
.
toUpperCase
(
)
action_position
:
this
.
props
.
pos
value
:
{
card_type
:
this
.
props
.
flightId
?
"
spoc
"
:
"
organic
"
}
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
type
.
toUpperCase
(
)
click
:
0
tiles
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
.
.
.
(
this
.
props
.
shim
&
&
this
.
props
.
shim
.
click
?
{
shim
:
this
.
props
.
shim
.
click
}
:
{
}
)
}
]
}
)
)
;
}
}
onSeen
(
entries
)
{
if
(
this
.
state
)
{
const
entry
=
entries
.
find
(
e
=
>
e
.
isIntersecting
)
;
if
(
entry
)
{
if
(
this
.
placeholderElement
)
{
this
.
observer
.
unobserve
(
this
.
placeholderElement
)
;
}
/
/
Stop
observing
since
element
has
been
seen
this
.
setState
(
{
isSeen
:
true
}
)
;
}
}
}
onIdleCallback
(
)
{
if
(
!
this
.
state
.
isSeen
)
{
if
(
this
.
observer
&
&
this
.
placeholderElement
)
{
this
.
observer
.
unobserve
(
this
.
placeholderElement
)
;
}
this
.
setState
(
{
isSeen
:
true
}
)
;
}
}
componentDidMount
(
)
{
this
.
idleCallbackId
=
this
.
props
.
windowObj
.
requestIdleCallback
(
this
.
onIdleCallback
.
bind
(
this
)
)
;
if
(
this
.
placeholderElement
)
{
this
.
observer
=
new
IntersectionObserver
(
this
.
onSeen
.
bind
(
this
)
)
;
this
.
observer
.
observe
(
this
.
placeholderElement
)
;
}
}
componentWillUnmount
(
)
{
/
/
Remove
observer
on
unmount
if
(
this
.
observer
&
&
this
.
placeholderElement
)
{
this
.
observer
.
unobserve
(
this
.
placeholderElement
)
;
}
if
(
this
.
idleCallbackId
)
{
this
.
props
.
windowObj
.
cancelIdleCallback
(
this
.
idleCallbackId
)
;
}
}
render
(
)
{
if
(
this
.
props
.
placeholder
|
|
!
this
.
state
.
isSeen
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
card
placeholder
"
ref
:
this
.
setPlaceholderRef
}
)
;
}
const
isButtonCTA
=
this
.
props
.
cta_variant
=
=
=
"
button
"
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
card
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_5__
[
"
SafeAnchor
"
]
{
className
:
"
ds
-
card
-
link
"
dispatch
:
this
.
props
.
dispatch
onLinkClick
:
!
this
.
props
.
placeholder
?
this
.
onLinkClick
:
undefined
url
:
this
.
props
.
url
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
img
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_1__
[
"
DSImage
"
]
{
extraClassNames
:
"
img
"
source
:
this
.
props
.
image_src
rawSource
:
this
.
props
.
raw_image_src
}
)
)
isButtonCTA
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
CTAButtonMeta
{
display_engagement_labels
:
this
.
props
.
display_engagement_labels
source
:
this
.
props
.
source
title
:
this
.
props
.
title
excerpt
:
this
.
props
.
excerpt
context
:
this
.
props
.
context
context_type
:
this
.
props
.
context_type
engagement
:
this
.
props
.
engagement
cta
:
this
.
props
.
cta
sponsor
:
this
.
props
.
sponsor
}
)
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
DefaultMeta
{
display_engagement_labels
:
this
.
props
.
display_engagement_labels
source
:
this
.
props
.
source
title
:
this
.
props
.
title
excerpt
:
this
.
props
.
excerpt
context
:
this
.
props
.
context
engagement
:
this
.
props
.
engagement
context_type
:
this
.
props
.
context_type
cta
:
this
.
props
.
cta
cta_variant
:
this
.
props
.
cta_variant
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_3__
[
"
ImpressionStats
"
]
{
flightId
:
this
.
props
.
flightId
rows
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
.
.
.
(
this
.
props
.
shim
&
&
this
.
props
.
shim
.
impression
?
{
shim
:
this
.
props
.
shim
.
impression
}
:
{
}
)
}
]
dispatch
:
this
.
props
.
dispatch
source
:
this
.
props
.
type
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_2__
[
"
DSLinkMenu
"
]
{
id
:
this
.
props
.
id
index
:
this
.
props
.
pos
dispatch
:
this
.
props
.
dispatch
url
:
this
.
props
.
url
title
:
this
.
props
.
title
source
:
this
.
props
.
source
type
:
this
.
props
.
type
pocket_id
:
this
.
props
.
pocket_id
shim
:
this
.
props
.
shim
bookmarkGuid
:
this
.
props
.
bookmarkGuid
flightId
:
this
.
props
.
flightId
}
)
)
;
}
}
DSCard
.
defaultProps
=
{
windowObj
:
window
/
/
Added
to
support
unit
tests
}
;
const
PlaceholderDSCard
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
DSCard
{
placeholder
:
true
}
)
;
/
*
*
*
/
}
)
/
*
34
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSImage
"
function
(
)
{
return
DSImage
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
12
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSImage
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onOptimizedImageError
=
this
.
onOptimizedImageError
.
bind
(
this
)
;
this
.
onNonOptimizedImageError
=
this
.
onNonOptimizedImageError
.
bind
(
this
)
;
this
.
state
=
{
isSeen
:
false
optimizedImageFailed
:
false
useTransition
:
false
}
;
}
onSeen
(
entries
)
{
if
(
this
.
state
)
{
const
entry
=
entries
.
find
(
e
=
>
e
.
isIntersecting
)
;
if
(
entry
)
{
if
(
this
.
props
.
optimize
)
{
this
.
setState
(
{
/
/
Thumbor
doesn
'
t
handle
subpixels
and
just
errors
out
so
rounding
.
.
.
containerWidth
:
Math
.
round
(
entry
.
boundingClientRect
.
width
)
containerHeight
:
Math
.
round
(
entry
.
boundingClientRect
.
height
)
}
)
;
}
this
.
setState
(
{
isSeen
:
true
}
)
;
/
/
Stop
observing
since
element
has
been
seen
this
.
observer
.
unobserve
(
react_dom__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
findDOMNode
(
this
)
)
;
}
}
}
onIdleCallback
(
)
{
if
(
!
this
.
state
.
isSeen
)
{
this
.
setState
(
{
useTransition
:
true
}
)
;
}
}
reformatImageURL
(
url
width
height
)
{
/
/
Change
the
image
URL
to
request
a
size
tailored
for
the
parent
container
width
/
/
Also
:
force
JPEG
quality
60
no
upscaling
no
EXIF
data
/
/
Uses
Thumbor
:
https
:
/
/
thumbor
.
readthedocs
.
io
/
en
/
latest
/
usage
.
html
return
https
:
/
/
img
-
getpocket
.
cdn
.
mozilla
.
net
/
{
width
}
x
{
height
}
/
filters
:
format
(
jpeg
)
:
quality
(
60
)
:
no_upscale
(
)
:
strip_exif
(
)
/
{
encodeURIComponent
(
url
)
}
;
}
componentDidMount
(
)
{
this
.
idleCallbackId
=
this
.
props
.
windowObj
.
requestIdleCallback
(
this
.
onIdleCallback
.
bind
(
this
)
)
;
this
.
observer
=
new
IntersectionObserver
(
this
.
onSeen
.
bind
(
this
)
{
/
/
Assume
an
image
will
be
eventually
seen
if
it
is
within
/
/
half
the
average
Desktop
vertical
screen
size
:
/
/
http
:
/
/
gs
.
statcounter
.
com
/
screen
-
resolution
-
stats
/
desktop
/
north
-
america
rootMargin
:
540px
}
)
;
this
.
observer
.
observe
(
react_dom__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
findDOMNode
(
this
)
)
;
}
componentWillUnmount
(
)
{
/
/
Remove
observer
on
unmount
if
(
this
.
observer
)
{
this
.
observer
.
unobserve
(
react_dom__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
findDOMNode
(
this
)
)
;
}
if
(
this
.
idleCallbackId
)
{
this
.
props
.
windowObj
.
cancelIdleCallback
(
this
.
idleCallbackId
)
;
}
}
render
(
)
{
let
classNames
=
ds
-
image
{
this
.
props
.
extraClassNames
?
{
this
.
props
.
extraClassNames
}
:
}
{
this
.
state
&
&
this
.
state
.
useTransition
?
use
-
transition
:
}
{
this
.
state
&
&
this
.
state
.
isSeen
?
loaded
:
}
;
let
img
;
if
(
this
.
state
&
&
this
.
state
.
isSeen
)
{
if
(
this
.
props
.
optimize
&
&
this
.
props
.
rawSource
&
&
!
this
.
state
.
optimizedImageFailed
)
{
let
source
;
let
source2x
;
if
(
this
.
state
&
&
this
.
state
.
containerWidth
)
{
let
baseSource
=
this
.
props
.
rawSource
;
source
=
this
.
reformatImageURL
(
baseSource
this
.
state
.
containerWidth
this
.
state
.
containerHeight
)
;
source2x
=
this
.
reformatImageURL
(
baseSource
this
.
state
.
containerWidth
*
2
this
.
state
.
containerHeight
*
2
)
;
img
=
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
img
"
{
alt
:
this
.
props
.
alt_text
crossOrigin
:
"
anonymous
"
onError
:
this
.
onOptimizedImageError
src
:
source
srcSet
:
{
source2x
}
2x
}
)
;
}
}
else
if
(
!
this
.
state
.
nonOptimizedImageFailed
)
{
img
=
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
img
"
{
alt
:
this
.
props
.
alt_text
crossOrigin
:
"
anonymous
"
onError
:
this
.
onNonOptimizedImageError
src
:
this
.
props
.
source
}
)
;
}
else
{
/
/
Remove
the
img
element
if
both
sources
fail
.
Render
a
placeholder
instead
.
img
=
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
broken
-
image
"
}
)
;
}
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
picture
"
{
className
:
classNames
}
img
)
;
}
onOptimizedImageError
(
)
{
/
/
This
will
trigger
a
re
-
render
and
the
unoptimized
450px
image
will
be
used
as
a
fallback
this
.
setState
(
{
optimizedImageFailed
:
true
}
)
;
}
onNonOptimizedImageError
(
)
{
this
.
setState
(
{
nonOptimizedImageFailed
:
true
}
)
;
}
}
DSImage
.
defaultProps
=
{
source
:
null
/
/
The
current
source
style
from
Pocket
API
(
always
450px
)
rawSource
:
null
/
/
Unadulterated
image
URL
to
filter
through
Thumbor
extraClassNames
:
null
/
/
Additional
classnames
to
append
to
component
optimize
:
true
/
/
Measure
parent
container
to
request
exact
sizes
alt_text
:
null
windowObj
:
window
/
/
Added
to
support
unit
tests
}
;
/
*
*
*
/
}
)
/
*
35
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSLinkMenu
"
function
(
)
{
return
DSLinkMenu
;
}
)
;
/
*
harmony
import
*
/
var
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
36
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
39
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSLinkMenu
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
this
.
onMenuShow
=
this
.
onMenuShow
.
bind
(
this
)
;
this
.
contextMenuButtonRef
=
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createRef
(
)
;
}
onMenuUpdate
(
showContextMenu
)
{
if
(
!
showContextMenu
)
{
const
dsLinkMenuHostDiv
=
this
.
contextMenuButtonRef
.
current
.
parentElement
;
dsLinkMenuHostDiv
.
parentElement
.
classList
.
remove
(
"
active
"
"
last
-
item
"
)
;
}
}
nextAnimationFrame
(
)
{
return
new
Promise
(
resolve
=
>
this
.
props
.
windowObj
.
requestAnimationFrame
(
resolve
)
)
;
}
async
onMenuShow
(
)
{
const
dsLinkMenuHostDiv
=
this
.
contextMenuButtonRef
.
current
.
parentElement
;
/
/
Wait
for
next
frame
before
computing
scrollMaxX
to
allow
fluent
menu
strings
to
be
visible
await
this
.
nextAnimationFrame
(
)
;
if
(
this
.
props
.
windowObj
.
scrollMaxX
>
0
)
{
dsLinkMenuHostDiv
.
parentElement
.
classList
.
add
(
"
last
-
item
"
)
;
}
dsLinkMenuHostDiv
.
parentElement
.
classList
.
add
(
"
active
"
)
;
}
render
(
)
{
const
{
index
dispatch
}
=
this
.
props
;
const
TOP_STORIES_CONTEXT_MENU_OPTIONS
=
[
"
CheckBookmarkOrArchive
"
"
CheckSavedToPocket
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
.
.
.
(
this
.
props
.
flightId
?
[
"
ShowPrivacyInfo
"
]
:
[
]
)
]
;
const
type
=
this
.
props
.
type
|
|
"
DISCOVERY_STREAM
"
;
const
title
=
this
.
props
.
title
|
|
this
.
props
.
source
;
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_1__
[
"
ContextMenuButton
"
]
{
refFunction
:
this
.
contextMenuButtonRef
tooltip
:
"
newtab
-
menu
-
content
-
tooltip
"
tooltipArgs
:
{
title
}
onUpdate
:
this
.
onMenuUpdate
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_0__
[
"
LinkMenu
"
]
{
dispatch
:
dispatch
index
:
index
source
:
type
.
toUpperCase
(
)
onShow
:
this
.
onMenuShow
options
:
TOP_STORIES_CONTEXT_MENU_OPTIONS
shouldSendImpressionStats
:
true
site
:
{
referrer
:
"
https
:
/
/
getpocket
.
com
/
recommendations
"
title
:
this
.
props
.
title
type
:
this
.
props
.
type
url
:
this
.
props
.
url
guid
:
this
.
props
.
id
pocket_id
:
this
.
props
.
pocket_id
shim
:
this
.
props
.
shim
bookmarkGuid
:
this
.
props
.
bookmarkGuid
flight_id
:
this
.
props
.
flightId
}
}
)
)
)
;
}
}
DSLinkMenu
.
defaultProps
=
{
windowObj
:
window
/
/
Added
to
support
unit
tests
}
;
/
*
*
*
/
}
)
/
*
36
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_LinkMenu
"
function
(
)
{
return
_LinkMenu
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
LinkMenu
"
function
(
)
{
return
LinkMenu
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
37
)
;
/
*
harmony
import
*
/
var
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
38
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
DEFAULT_SITE_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
EditTopSite
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
]
;
class
_LinkMenu
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
getOptions
(
)
{
const
{
props
}
=
this
;
const
{
site
index
source
isPrivateBrowsingEnabled
siteInfo
platform
}
=
props
;
/
/
Handle
special
case
of
default
site
const
propOptions
=
!
site
.
isDefault
|
|
site
.
searchTopSite
?
props
.
options
:
DEFAULT_SITE_MENU_OPTIONS
;
const
options
=
propOptions
.
map
(
o
=
>
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_3__
[
"
LinkMenuOptions
"
]
[
o
]
(
site
index
source
isPrivateBrowsingEnabled
siteInfo
platform
)
)
.
map
(
option
=
>
{
const
{
action
impression
id
type
userEvent
}
=
option
;
if
(
!
type
&
&
id
)
{
option
.
onClick
=
(
)
=
>
{
props
.
dispatch
(
action
)
;
if
(
userEvent
)
{
const
userEventData
=
Object
.
assign
(
{
event
:
userEvent
source
action_position
:
index
}
siteInfo
)
;
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
userEventData
)
)
;
}
if
(
impression
&
&
props
.
shouldSendImpressionStats
)
{
props
.
dispatch
(
impression
)
;
}
}
;
}
return
option
;
}
)
;
/
/
This
is
for
accessibility
to
support
making
each
item
tabbable
.
/
/
We
want
to
know
which
item
is
the
first
and
which
item
/
/
is
the
last
so
we
can
close
the
context
menu
accordingly
.
options
[
0
]
.
first
=
true
;
options
[
options
.
length
-
1
]
.
last
=
true
;
return
options
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_2__
[
"
ContextMenu
"
]
{
onUpdate
:
this
.
props
.
onUpdate
onShow
:
this
.
props
.
onShow
options
:
this
.
getOptions
(
)
keyboardAccess
:
this
.
props
.
keyboardAccess
}
)
;
}
}
const
getState
=
state
=
>
(
{
isPrivateBrowsingEnabled
:
state
.
Prefs
.
values
.
isPrivateBrowsingEnabled
platform
:
state
.
Prefs
.
values
.
platform
}
)
;
const
LinkMenu
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
getState
)
(
_LinkMenu
)
;
/
*
*
*
/
}
)
/
*
37
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ContextMenu
"
function
(
)
{
return
ContextMenu
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ContextMenuItem
"
function
(
)
{
return
ContextMenuItem
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
ContextMenu
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
hideContext
=
this
.
hideContext
.
bind
(
this
)
;
this
.
onShow
=
this
.
onShow
.
bind
(
this
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
hideContext
(
)
{
this
.
props
.
onUpdate
(
false
)
;
}
onShow
(
)
{
if
(
this
.
props
.
onShow
)
{
this
.
props
.
onShow
(
)
;
}
}
componentDidMount
(
)
{
this
.
onShow
(
)
;
setTimeout
(
(
)
=
>
{
global
.
addEventListener
(
"
click
"
this
.
hideContext
)
;
}
0
)
;
}
componentWillUnmount
(
)
{
global
.
removeEventListener
(
"
click
"
this
.
hideContext
)
;
}
onClick
(
event
)
{
/
/
Eat
all
clicks
on
the
context
menu
so
they
don
'
t
bubble
up
to
window
.
/
/
This
prevents
the
context
menu
from
closing
when
clicking
disabled
items
/
/
or
the
separators
.
event
.
stopPropagation
(
)
;
}
render
(
)
{
/
/
Disabling
focus
on
the
menu
span
allows
the
first
tab
to
focus
on
the
first
menu
item
instead
of
the
wrapper
.
return
(
/
/
eslint
-
disable
-
next
-
line
jsx
-
a11y
/
interactive
-
supports
-
focus
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
context
-
menu
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
ul
"
{
role
:
"
menu
"
onClick
:
this
.
onClick
onKeyDown
:
this
.
onClick
className
:
"
context
-
menu
-
list
"
}
this
.
props
.
options
.
map
(
(
option
i
)
=
>
option
.
type
=
=
=
"
separator
"
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
{
key
:
i
className
:
"
separator
"
role
:
"
separator
"
}
)
:
option
.
type
!
=
=
"
empty
"
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
ContextMenuItem
{
key
:
i
option
:
option
hideContext
:
this
.
hideContext
keyboardAccess
:
this
.
props
.
keyboardAccess
}
)
)
)
)
)
;
}
}
class
ContextMenuItem
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onKeyDown
=
this
.
onKeyDown
.
bind
(
this
)
;
this
.
onKeyUp
=
this
.
onKeyUp
.
bind
(
this
)
;
this
.
focusFirst
=
this
.
focusFirst
.
bind
(
this
)
;
}
onClick
(
)
{
this
.
props
.
hideContext
(
)
;
this
.
props
.
option
.
onClick
(
)
;
}
/
/
Focus
the
first
menu
item
if
the
menu
was
accessed
via
the
keyboard
.
focusFirst
(
button
)
{
if
(
this
.
props
.
keyboardAccess
&
&
button
)
{
button
.
focus
(
)
;
}
}
/
/
This
selects
the
correct
node
based
on
the
key
pressed
focusSibling
(
target
key
)
{
const
parent
=
target
.
parentNode
;
const
closestSiblingSelector
=
key
=
=
=
"
ArrowUp
"
?
"
previousSibling
"
:
"
nextSibling
"
;
if
(
!
parent
[
closestSiblingSelector
]
)
{
return
;
}
if
(
parent
[
closestSiblingSelector
]
.
firstElementChild
)
{
parent
[
closestSiblingSelector
]
.
firstElementChild
.
focus
(
)
;
}
else
{
parent
[
closestSiblingSelector
]
[
closestSiblingSelector
]
.
firstElementChild
.
focus
(
)
;
}
}
onKeyDown
(
event
)
{
const
{
option
}
=
this
.
props
;
switch
(
event
.
key
)
{
case
"
Tab
"
:
/
/
tab
goes
down
in
context
menu
shift
+
tab
goes
up
in
context
menu
/
/
if
we
'
re
on
the
last
item
one
more
tab
will
close
the
context
menu
/
/
similarly
if
we
'
re
on
the
first
item
one
more
shift
+
tab
will
close
it
if
(
event
.
shiftKey
&
&
option
.
first
|
|
!
event
.
shiftKey
&
&
option
.
last
)
{
this
.
props
.
hideContext
(
)
;
}
break
;
case
"
ArrowUp
"
:
case
"
ArrowDown
"
:
event
.
preventDefault
(
)
;
this
.
focusSibling
(
event
.
target
event
.
key
)
;
break
;
case
"
Enter
"
:
case
"
"
:
event
.
preventDefault
(
)
;
this
.
props
.
hideContext
(
)
;
option
.
onClick
(
)
;
break
;
case
"
Escape
"
:
this
.
props
.
hideContext
(
)
;
break
;
}
}
/
/
Prevents
the
default
behavior
of
spacebar
/
/
scrolling
the
page
&
auto
-
triggering
buttons
.
onKeyUp
(
event
)
{
if
(
event
.
key
=
=
=
"
"
)
{
event
.
preventDefault
(
)
;
}
}
render
(
)
{
const
{
option
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
{
role
:
"
presentation
"
className
:
"
context
-
menu
-
item
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
className
:
option
.
disabled
?
"
disabled
"
:
"
"
role
:
"
menuitem
"
onClick
:
this
.
onClick
onKeyDown
:
this
.
onKeyDown
onKeyUp
:
this
.
onKeyUp
ref
:
option
.
first
?
this
.
focusFirst
:
null
}
option
.
icon
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
spacer
icon
-
{
option
.
icon
}
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
option
.
string_id
|
|
option
.
id
}
)
)
)
;
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
38
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
LinkMenuOptions
"
function
(
)
{
return
LinkMenuOptions
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
_OpenInPrivateWindow
=
site
=
>
(
{
id
:
"
newtab
-
menu
-
open
-
new
-
private
-
window
"
icon
:
"
new
-
window
-
private
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_PRIVATE_WINDOW
data
:
{
url
:
site
.
url
referrer
:
site
.
referrer
}
}
)
userEvent
:
"
OPEN_PRIVATE_WINDOW
"
}
)
;
/
*
*
*
List
of
functions
that
return
items
that
can
be
included
as
menu
options
in
a
*
LinkMenu
.
All
functions
take
the
site
as
the
first
parameter
and
optionally
*
the
index
of
the
site
.
*
/
const
LinkMenuOptions
=
{
Separator
:
(
)
=
>
(
{
type
:
"
separator
"
}
)
EmptyItem
:
(
)
=
>
(
{
type
:
"
empty
"
}
)
ShowPrivacyInfo
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
show
-
privacy
-
info
"
icon
:
"
info
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SHOW_PRIVACY_INFO
}
userEvent
:
"
SHOW_PRIVACY_INFO
"
}
)
RemoveBookmark
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
remove
-
bookmark
"
icon
:
"
bookmark
-
added
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_BOOKMARK_BY_ID
data
:
site
.
bookmarkGuid
}
)
userEvent
:
"
BOOKMARK_DELETE
"
}
)
AddBookmark
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
bookmark
"
icon
:
"
bookmark
-
hollow
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
BOOKMARK_URL
data
:
{
url
:
site
.
url
title
:
site
.
title
type
:
site
.
type
}
}
)
userEvent
:
"
BOOKMARK_ADD
"
}
)
OpenInNewWindow
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
open
-
new
-
window
"
icon
:
"
new
-
window
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_NEW_WINDOW
data
:
{
referrer
:
site
.
referrer
typedBonus
:
site
.
typedBonus
url
:
site
.
url
}
}
)
userEvent
:
"
OPEN_NEW_WINDOW
"
}
)
/
/
This
blocks
the
url
for
regular
stories
/
/
but
also
sends
a
message
to
DiscoveryStream
with
flight_id
.
/
/
If
DiscoveryStream
sees
this
message
for
a
flight_id
/
/
it
also
blocks
it
on
the
flight_id
.
BlockUrl
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
newtab
-
menu
-
dismiss
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
BLOCK_URL
data
:
{
url
:
site
.
open_url
|
|
site
.
url
pocket_id
:
site
.
pocket_id
.
.
.
(
site
.
flight_id
?
{
flight_id
:
site
.
flight_id
}
:
{
}
)
}
}
)
impression
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
eventSource
block
:
0
tiles
:
[
{
id
:
site
.
guid
pos
:
index
.
.
.
(
site
.
shim
&
&
site
.
shim
.
delete
?
{
shim
:
site
.
shim
.
delete
}
:
{
}
)
}
]
}
)
userEvent
:
"
BLOCK
"
}
)
/
/
This
is
an
option
for
web
extentions
which
will
result
in
remove
items
from
/
/
memory
and
notify
the
web
extenion
rather
than
using
the
built
-
in
block
list
.
WebExtDismiss
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
menu_action_webext_dismiss
"
string_id
:
"
newtab
-
menu
-
dismiss
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
WebExtEvent
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
WEBEXT_DISMISS
{
source
:
eventSource
url
:
site
.
url
action_position
:
index
}
)
}
)
DeleteUrl
:
(
site
index
eventSource
isEnabled
siteInfo
)
=
>
(
{
id
:
"
newtab
-
menu
-
delete
-
history
"
icon
:
"
delete
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DIALOG_OPEN
data
:
{
onConfirm
:
[
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_HISTORY_URL
data
:
{
url
:
site
.
url
pocket_id
:
site
.
pocket_id
forceBlock
:
site
.
bookmarkGuid
}
}
)
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
:
"
DELETE
"
source
:
eventSource
action_position
:
index
}
siteInfo
)
)
]
eventSource
body_string_id
:
[
"
newtab
-
confirm
-
delete
-
history
-
p1
"
"
newtab
-
confirm
-
delete
-
history
-
p2
"
]
confirm_button_string_id
:
"
newtab
-
topsites
-
delete
-
history
-
button
"
cancel_button_string_id
:
"
newtab
-
topsites
-
cancel
-
button
"
icon
:
"
modal
-
delete
"
}
}
userEvent
:
"
DIALOG_OPEN
"
}
)
ShowFile
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
show
-
file
"
icon
:
"
search
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SHOW_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
OpenFile
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
open
-
file
"
icon
:
"
open
-
file
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
CopyDownloadLink
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
copy
-
download
-
link
"
icon
:
"
copy
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
COPY_DOWNLOAD_LINK
data
:
{
url
:
site
.
url
}
}
)
}
)
GoToDownloadPage
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
go
-
to
-
download
-
page
"
icon
:
"
download
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
{
url
:
site
.
referrer
}
}
)
disabled
:
!
site
.
referrer
}
)
RemoveDownload
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
remove
-
download
"
icon
:
"
delete
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
REMOVE_DOWNLOAD_FILE
data
:
{
url
:
site
.
url
}
}
)
}
)
PinSpocTopSite
:
(
site
index
)
=
>
(
{
id
:
"
newtab
-
menu
-
pin
"
icon
:
"
pin
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_PIN
data
:
{
site
index
}
}
)
userEvent
:
"
PIN
"
}
)
PinTopSite
:
(
{
url
searchTopSite
label
}
index
)
=
>
(
{
id
:
"
newtab
-
menu
-
pin
"
icon
:
"
pin
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_PIN
data
:
{
site
:
{
url
.
.
.
(
searchTopSite
&
&
{
searchTopSite
label
}
)
}
index
}
}
)
userEvent
:
"
PIN
"
}
)
UnpinTopSite
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
unpin
"
icon
:
"
unpin
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_UNPIN
data
:
{
site
:
{
url
:
site
.
url
}
}
}
)
userEvent
:
"
UNPIN
"
}
)
SaveToPocket
:
(
site
index
eventSource
)
=
>
(
{
id
:
"
newtab
-
menu
-
save
-
to
-
pocket
"
icon
:
"
pocket
-
save
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_TO_POCKET
data
:
{
site
:
{
url
:
site
.
url
title
:
site
.
title
}
}
}
)
impression
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
eventSource
pocket
:
0
tiles
:
[
{
id
:
site
.
guid
pos
:
index
.
.
.
(
site
.
shim
&
&
site
.
shim
.
save
?
{
shim
:
site
.
shim
.
save
}
:
{
}
)
}
]
}
)
userEvent
:
"
SAVE_TO_POCKET
"
}
)
DeleteFromPocket
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
delete
-
pocket
"
icon
:
"
pocket
-
delete
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DELETE_FROM_POCKET
data
:
{
pocket_id
:
site
.
pocket_id
}
}
)
userEvent
:
"
DELETE_FROM_POCKET
"
}
)
ArchiveFromPocket
:
site
=
>
(
{
id
:
"
newtab
-
menu
-
archive
-
pocket
"
icon
:
"
pocket
-
archive
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
ARCHIVE_FROM_POCKET
data
:
{
pocket_id
:
site
.
pocket_id
}
}
)
userEvent
:
"
ARCHIVE_FROM_POCKET
"
}
)
EditTopSite
:
(
site
index
)
=
>
(
{
id
:
"
newtab
-
menu
-
edit
-
topsites
"
icon
:
"
edit
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
}
}
}
)
CheckBookmark
:
site
=
>
site
.
bookmarkGuid
?
LinkMenuOptions
.
RemoveBookmark
(
site
)
:
LinkMenuOptions
.
AddBookmark
(
site
)
CheckPinTopSite
:
(
site
index
)
=
>
site
.
isPinned
?
LinkMenuOptions
.
UnpinTopSite
(
site
)
:
LinkMenuOptions
.
PinTopSite
(
site
index
)
CheckSavedToPocket
:
(
site
index
)
=
>
site
.
pocket_id
?
LinkMenuOptions
.
DeleteFromPocket
(
site
)
:
LinkMenuOptions
.
SaveToPocket
(
site
index
)
CheckBookmarkOrArchive
:
site
=
>
site
.
pocket_id
?
LinkMenuOptions
.
ArchiveFromPocket
(
site
)
:
LinkMenuOptions
.
CheckBookmark
(
site
)
OpenInPrivateWindow
:
(
site
index
eventSource
isEnabled
)
=
>
isEnabled
?
_OpenInPrivateWindow
(
site
)
:
LinkMenuOptions
.
EmptyItem
(
)
}
;
/
*
*
*
/
}
)
/
*
39
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ContextMenuButton
"
function
(
)
{
return
ContextMenuButton
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
ContextMenuButton
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
showContextMenu
:
false
contextMenuKeyboard
:
false
}
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
this
.
onKeyDown
=
this
.
onKeyDown
.
bind
(
this
)
;
this
.
onUpdate
=
this
.
onUpdate
.
bind
(
this
)
;
}
openContextMenu
(
isKeyBoard
event
)
{
if
(
this
.
props
.
onUpdate
)
{
this
.
props
.
onUpdate
(
true
)
;
}
this
.
setState
(
{
showContextMenu
:
true
contextMenuKeyboard
:
isKeyBoard
}
)
;
}
onClick
(
event
)
{
event
.
preventDefault
(
)
;
this
.
openContextMenu
(
false
event
)
;
}
onKeyDown
(
event
)
{
if
(
event
.
key
=
=
=
"
Enter
"
|
|
event
.
key
=
=
=
"
"
)
{
event
.
preventDefault
(
)
;
this
.
openContextMenu
(
true
event
)
;
}
}
onUpdate
(
showContextMenu
)
{
if
(
this
.
props
.
onUpdate
)
{
this
.
props
.
onUpdate
(
showContextMenu
)
;
}
this
.
setState
(
{
showContextMenu
}
)
;
}
render
(
)
{
const
{
tooltipArgs
tooltip
children
refFunction
}
=
this
.
props
;
const
{
showContextMenu
contextMenuKeyboard
}
=
this
.
state
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
"
aria
-
haspopup
"
:
"
true
"
"
data
-
l10n
-
id
"
:
tooltip
"
data
-
l10n
-
args
"
:
tooltipArgs
?
JSON
.
stringify
(
tooltipArgs
)
:
null
className
:
"
context
-
menu
-
button
icon
"
onKeyDown
:
this
.
onKeyDown
onClick
:
this
.
onClick
ref
:
refFunction
}
)
showContextMenu
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
cloneElement
(
children
{
keyboardAccess
:
contextMenuKeyboard
onUpdate
:
this
.
onUpdate
}
)
:
null
)
;
}
}
/
*
*
*
/
}
)
/
*
40
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
INTERSECTION_RATIO
"
function
(
)
{
return
INTERSECTION_RATIO
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ImpressionStats
"
function
(
)
{
return
ImpressionStats
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
/
/
Per
analytical
requirement
we
set
the
minimal
intersection
ratio
to
/
/
0
.
5
and
an
impression
is
identified
when
the
wrapped
item
has
at
least
/
/
50
%
visibility
.
/
/
/
/
This
constant
is
exported
for
unit
test
const
INTERSECTION_RATIO
=
0
.
5
;
/
*
*
*
Impression
wrapper
for
Discovery
Stream
related
React
components
.
*
*
It
makses
use
of
the
Intersection
Observer
API
to
detect
the
visibility
*
and
relies
on
page
visibility
to
ensure
the
impression
is
reported
*
only
when
the
component
is
visible
on
the
page
.
*
*
Note
:
*
*
This
wrapper
used
to
be
used
either
at
the
individual
card
level
*
or
by
the
card
container
components
.
*
It
is
now
only
used
for
individual
card
level
.
*
*
Each
impression
will
be
sent
only
once
as
soon
as
the
desired
*
visibility
is
detected
*
*
Batching
is
not
yet
implemented
hence
it
might
send
multiple
*
impression
pings
separately
*
/
class
ImpressionStats
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
/
/
This
checks
if
the
given
cards
are
the
same
as
those
in
the
last
impression
ping
.
/
/
If
so
it
should
not
send
the
same
impression
ping
again
.
_needsImpressionStats
(
cards
)
{
if
(
!
this
.
impressionCardGuids
|
|
this
.
impressionCardGuids
.
length
!
=
=
cards
.
length
)
{
return
true
;
}
for
(
let
i
=
0
;
i
<
cards
.
length
;
i
+
+
)
{
if
(
cards
[
i
]
.
id
!
=
=
this
.
impressionCardGuids
[
i
]
)
{
return
true
;
}
}
return
false
;
}
_dispatchImpressionStats
(
)
{
const
{
props
}
=
this
;
const
cards
=
props
.
rows
;
if
(
this
.
props
.
flightId
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOC_IMPRESSION
data
:
{
flightId
:
this
.
props
.
flightId
}
}
)
)
;
}
if
(
this
.
_needsImpressionStats
(
cards
)
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
DiscoveryStreamImpressionStats
(
{
source
:
props
.
source
.
toUpperCase
(
)
tiles
:
cards
.
map
(
link
=
>
(
{
id
:
link
.
id
pos
:
link
.
pos
.
.
.
(
link
.
shim
?
{
shim
:
link
.
shim
}
:
{
}
)
}
)
)
}
)
)
;
this
.
impressionCardGuids
=
cards
.
map
(
link
=
>
link
.
id
)
;
}
}
/
/
This
checks
if
the
given
cards
are
the
same
as
those
in
the
last
loaded
content
ping
.
/
/
If
so
it
should
not
send
the
same
loaded
content
ping
again
.
_needsLoadedContent
(
cards
)
{
if
(
!
this
.
loadedContentGuids
|
|
this
.
loadedContentGuids
.
length
!
=
=
cards
.
length
)
{
return
true
;
}
for
(
let
i
=
0
;
i
<
cards
.
length
;
i
+
+
)
{
if
(
cards
[
i
]
.
id
!
=
=
this
.
loadedContentGuids
[
i
]
)
{
return
true
;
}
}
return
false
;
}
_dispatchLoadedContent
(
)
{
const
{
props
}
=
this
;
const
cards
=
props
.
rows
;
if
(
this
.
_needsLoadedContent
(
cards
)
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
DiscoveryStreamLoadedContent
(
{
source
:
props
.
source
.
toUpperCase
(
)
tiles
:
cards
.
map
(
link
=
>
(
{
id
:
link
.
id
pos
:
link
.
pos
}
)
)
}
)
)
;
this
.
loadedContentGuids
=
cards
.
map
(
link
=
>
link
.
id
)
;
}
}
setImpressionObserverOrAddListener
(
)
{
const
{
props
}
=
this
;
if
(
!
props
.
dispatch
)
{
return
;
}
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
/
/
Send
the
loaded
content
ping
once
the
page
is
visible
.
this
.
_dispatchLoadedContent
(
)
;
this
.
setImpressionObserver
(
)
;
}
else
{
/
/
We
should
only
ever
send
the
latest
impression
stats
ping
so
remove
any
/
/
older
listeners
.
if
(
this
.
_onVisibilityChange
)
{
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
this
.
_onVisibilityChange
=
(
)
=
>
{
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
/
/
Send
the
loaded
content
ping
once
the
page
is
visible
.
this
.
_dispatchLoadedContent
(
)
;
this
.
setImpressionObserver
(
)
;
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
;
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
/
*
*
*
Set
an
impression
observer
for
the
wrapped
component
.
It
makes
use
of
*
the
Intersection
Observer
API
to
detect
if
the
wrapped
component
is
*
visible
with
a
desired
ratio
and
only
sends
impression
if
that
'
s
the
case
.
*
*
See
more
details
about
Intersection
Observer
API
at
:
*
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Web
/
API
/
Intersection_Observer_API
*
/
setImpressionObserver
(
)
{
const
{
props
}
=
this
;
if
(
!
props
.
rows
.
length
)
{
return
;
}
this
.
_handleIntersect
=
entries
=
>
{
if
(
entries
.
some
(
entry
=
>
entry
.
isIntersecting
&
&
entry
.
intersectionRatio
>
=
INTERSECTION_RATIO
)
)
{
this
.
_dispatchImpressionStats
(
)
;
this
.
impressionObserver
.
unobserve
(
this
.
refs
.
impression
)
;
}
}
;
const
options
=
{
threshold
:
INTERSECTION_RATIO
}
;
this
.
impressionObserver
=
new
props
.
IntersectionObserver
(
this
.
_handleIntersect
options
)
;
this
.
impressionObserver
.
observe
(
this
.
refs
.
impression
)
;
}
componentDidMount
(
)
{
if
(
this
.
props
.
rows
.
length
)
{
this
.
setImpressionObserverOrAddListener
(
)
;
}
}
componentWillUnmount
(
)
{
if
(
this
.
_handleIntersect
&
&
this
.
impressionObserver
)
{
this
.
impressionObserver
.
unobserve
(
this
.
refs
.
impression
)
;
}
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
ref
:
"
impression
"
className
:
"
impression
-
observer
"
}
this
.
props
.
children
)
;
}
}
ImpressionStats
.
defaultProps
=
{
IntersectionObserver
:
global
.
IntersectionObserver
document
:
global
.
document
rows
:
[
]
source
:
"
"
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
41
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SafeAnchor
"
function
(
)
{
return
SafeAnchor
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SafeAnchor
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
onClick
(
event
)
{
/
/
Use
dispatch
instead
of
normal
link
click
behavior
to
include
referrer
if
(
this
.
props
.
dispatch
)
{
event
.
preventDefault
(
)
;
const
{
altKey
button
ctrlKey
metaKey
shiftKey
}
=
event
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
{
event
:
{
altKey
button
ctrlKey
metaKey
shiftKey
}
referrer
:
"
https
:
/
/
getpocket
.
com
/
recommendations
"
/
/
Use
the
anchor
'
s
url
which
could
have
been
cleaned
up
url
:
event
.
currentTarget
.
href
}
}
)
)
;
}
/
/
Propagate
event
if
there
'
s
a
handler
if
(
this
.
props
.
onLinkClick
)
{
this
.
props
.
onLinkClick
(
event
)
;
}
}
safeURI
(
url
)
{
let
protocol
=
null
;
try
{
protocol
=
new
URL
(
url
)
.
protocol
;
}
catch
(
e
)
{
return
"
"
;
}
const
isAllowed
=
[
"
http
:
"
"
https
:
"
]
.
includes
(
protocol
)
;
if
(
!
isAllowed
)
{
console
.
warn
(
{
url
}
is
not
allowed
for
anchor
targets
.
)
;
/
/
eslint
-
disable
-
line
no
-
console
return
"
"
;
}
return
url
;
}
render
(
)
{
const
{
url
className
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
href
:
this
.
safeURI
(
url
)
className
:
className
onClick
:
this
.
onClick
}
this
.
props
.
children
)
;
}
}
/
*
*
*
/
}
)
/
*
42
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
StatusMessage
"
function
(
)
{
return
StatusMessage
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSContextFooter
"
function
(
)
{
return
DSContextFooter
;
}
)
;
/
*
harmony
import
*
/
var
_Card_types_js__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
43
)
;
/
*
harmony
import
*
/
var
react_transition_group__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
44
)
;
/
*
harmony
import
*
/
var
react_transition_group__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_transition_group__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Animation
time
is
mirrored
in
DSContextFooter
.
scss
const
ANIMATION_DURATION
=
3000
;
const
StatusMessage
=
(
{
icon
fluentID
}
)
=
>
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
status
-
message
"
}
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
span
"
{
"
aria
-
haspopup
"
:
"
true
"
className
:
story
-
badge
-
icon
icon
icon
-
{
icon
}
}
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
story
-
context
-
label
"
"
data
-
l10n
-
id
"
:
fluentID
}
)
)
;
class
DSContextFooter
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
render
(
)
{
/
/
display_engagement_labels
is
based
on
pref
browser
.
newtabpage
.
activity
-
stream
.
discoverystream
.
engagementLabelEnabled
const
{
context
context_type
engagement
display_engagement_labels
}
=
this
.
props
;
const
{
icon
fluentID
}
=
_Card_types_js__WEBPACK_IMPORTED_MODULE_0__
[
"
cardContextTypes
"
]
[
context_type
]
|
|
{
}
;
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
story
-
footer
"
}
context
&
&
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
p
"
{
className
:
"
story
-
sponsored
-
label
clamp
"
}
context
)
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
react_transition_group__WEBPACK_IMPORTED_MODULE_1__
[
"
TransitionGroup
"
]
{
component
:
null
}
!
context
&
&
(
context_type
|
|
display_engagement_labels
&
&
engagement
)
&
&
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
react_transition_group__WEBPACK_IMPORTED_MODULE_1__
[
"
CSSTransition
"
]
{
key
:
fluentID
timeout
:
ANIMATION_DURATION
classNames
:
"
story
-
animate
"
}
engagement
&
&
!
context_type
?
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
"
div
"
{
className
:
"
story
-
view
-
count
"
}
engagement
)
:
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
StatusMessage
{
icon
:
icon
fluentID
:
fluentID
}
)
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
43
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
cardContextTypes
"
function
(
)
{
return
cardContextTypes
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
cardContextTypes
=
{
history
:
{
fluentID
:
"
newtab
-
label
-
visited
"
icon
:
"
history
-
item
"
}
removedBookmark
:
{
fluentID
:
"
newtab
-
label
-
removed
-
bookmark
"
icon
:
"
bookmark
-
removed
"
}
bookmark
:
{
fluentID
:
"
newtab
-
label
-
bookmarked
"
icon
:
"
bookmark
-
added
"
}
trending
:
{
fluentID
:
"
newtab
-
label
-
recommended
"
icon
:
"
trending
"
}
pocket
:
{
fluentID
:
"
newtab
-
label
-
saved
"
icon
:
"
pocket
"
}
download
:
{
fluentID
:
"
newtab
-
label
-
download
"
icon
:
"
download
"
}
}
;
/
*
*
*
/
}
)
/
*
44
*
/
/
*
*
*
/
(
function
(
module
exports
)
{
module
.
exports
=
ReactTransitionGroup
;
/
*
*
*
/
}
)
/
*
45
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSEmptyState
"
function
(
)
{
return
DSEmptyState
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSEmptyState
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onReset
=
this
.
onReset
.
bind
(
this
)
;
this
.
state
=
{
}
;
}
componentWillUnmount
(
)
{
if
(
this
.
timeout
)
{
clearTimeout
(
this
.
timeout
)
;
}
}
onReset
(
)
{
if
(
this
.
props
.
dispatch
&
&
this
.
props
.
feed
)
{
const
{
feed
}
=
this
.
props
;
const
{
url
}
=
feed
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_FEED_UPDATE
data
:
{
feed
:
{
.
.
.
feed
data
:
{
.
.
.
feed
.
data
status
:
"
waiting
"
}
}
url
}
}
)
;
this
.
setState
(
{
waiting
:
true
}
)
;
this
.
timeout
=
setTimeout
(
(
)
=
>
{
this
.
timeout
=
null
;
this
.
setState
(
{
waiting
:
false
}
)
;
}
300
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_RETRY_FEED
data
:
{
feed
}
}
)
)
;
}
}
renderButton
(
)
{
if
(
this
.
props
.
status
=
=
=
"
waiting
"
|
|
this
.
state
.
waiting
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
try
-
again
-
button
waiting
"
"
data
-
l10n
-
id
"
:
"
newtab
-
discovery
-
empty
-
section
-
topstories
-
loading
"
}
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
try
-
again
-
button
"
onClick
:
this
.
onReset
"
data
-
l10n
-
id
"
:
"
newtab
-
discovery
-
empty
-
section
-
topstories
-
try
-
again
-
button
"
}
)
;
}
renderState
(
)
{
if
(
this
.
props
.
status
=
=
=
"
waiting
"
|
|
this
.
props
.
status
=
=
=
"
failed
"
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h2
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
discovery
-
empty
-
section
-
topstories
-
timed
-
out
"
}
)
this
.
renderButton
(
)
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
Fragment
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h2
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
discovery
-
empty
-
section
-
topstories
-
header
"
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
discovery
-
empty
-
section
-
topstories
-
content
"
}
)
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
empty
-
state
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
empty
-
state
-
message
"
}
this
.
renderState
(
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
46
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
CollapsibleSection
"
function
(
)
{
return
CollapsibleSection
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
47
)
;
/
*
harmony
import
*
/
var
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
49
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
/
*
harmony
import
*
/
var
content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
50
)
;
/
*
harmony
import
*
/
var
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
51
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
39
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
class
CollapsibleSection
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onBodyMount
=
this
.
onBodyMount
.
bind
(
this
)
;
this
.
onHeaderClick
=
this
.
onHeaderClick
.
bind
(
this
)
;
this
.
onKeyPress
=
this
.
onKeyPress
.
bind
(
this
)
;
this
.
onTransitionEnd
=
this
.
onTransitionEnd
.
bind
(
this
)
;
this
.
enableOrDisableAnimation
=
this
.
enableOrDisableAnimation
.
bind
(
this
)
;
this
.
onMenuButtonMouseEnter
=
this
.
onMenuButtonMouseEnter
.
bind
(
this
)
;
this
.
onMenuButtonMouseLeave
=
this
.
onMenuButtonMouseLeave
.
bind
(
this
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
this
.
state
=
{
enableAnimation
:
true
isAnimating
:
false
menuButtonHover
:
false
showContextMenu
:
false
}
;
this
.
setContextMenuButtonRef
=
this
.
setContextMenuButtonRef
.
bind
(
this
)
;
}
componentWillMount
(
)
{
this
.
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
enableOrDisableAnimation
)
;
}
componentWillUpdate
(
nextProps
)
{
/
/
Check
if
we
'
re
about
to
go
from
expanded
to
collapsed
if
(
!
this
.
props
.
collapsed
&
&
nextProps
.
collapsed
)
{
/
/
This
next
line
forces
a
layout
flush
of
the
section
body
which
has
a
/
/
max
-
height
style
set
so
that
the
upcoming
collapse
animation
can
/
/
animate
from
that
height
to
the
collapsed
height
.
Without
this
the
/
/
update
is
coalesced
and
there
'
s
no
animation
from
no
-
max
-
height
to
0
.
this
.
sectionBody
.
scrollHeight
;
/
/
eslint
-
disable
-
line
no
-
unused
-
expressions
}
}
setContextMenuButtonRef
(
element
)
{
this
.
contextMenuButtonRef
=
element
;
}
componentDidMount
(
)
{
this
.
contextMenuButtonRef
.
addEventListener
(
"
mouseenter
"
this
.
onMenuButtonMouseEnter
)
;
this
.
contextMenuButtonRef
.
addEventListener
(
"
mouseleave
"
this
.
onMenuButtonMouseLeave
)
;
}
componentWillUnmount
(
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
enableOrDisableAnimation
)
;
this
.
contextMenuButtonRef
.
removeEventListener
(
"
mouseenter
"
this
.
onMenuButtonMouseEnter
)
;
this
.
contextMenuButtonRef
.
removeEventListener
(
"
mouseleave
"
this
.
onMenuButtonMouseLeave
)
;
}
enableOrDisableAnimation
(
)
{
/
/
Only
animate
the
collapse
/
expand
for
visible
tabs
.
const
visible
=
this
.
props
.
document
.
visibilityState
=
=
=
VISIBLE
;
if
(
this
.
state
.
enableAnimation
!
=
=
visible
)
{
this
.
setState
(
{
enableAnimation
:
visible
}
)
;
}
}
onBodyMount
(
node
)
{
this
.
sectionBody
=
node
;
}
onHeaderClick
(
)
{
/
/
If
this
.
sectionBody
is
unset
it
means
that
we
'
re
in
some
sort
of
error
/
/
state
probably
displaying
the
error
fallback
so
we
won
'
t
be
able
to
/
/
compute
the
height
and
we
don
'
t
want
to
persist
the
preference
.
/
/
If
props
.
collapsed
is
undefined
handler
shouldn
'
t
do
anything
.
if
(
!
this
.
sectionBody
|
|
this
.
props
.
collapsed
=
=
=
undefined
)
{
return
;
}
/
/
Get
the
current
height
of
the
body
so
max
-
height
transitions
can
work
this
.
setState
(
{
isAnimating
:
true
maxHeight
:
{
this
.
_getSectionBodyHeight
(
)
}
px
}
)
;
const
{
action
userEvent
}
=
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__
[
"
SectionMenuOptions
"
]
.
CheckCollapsed
(
this
.
props
)
;
this
.
props
.
dispatch
(
action
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
source
:
this
.
props
.
source
}
)
)
;
}
onKeyPress
(
event
)
{
if
(
event
.
key
=
=
=
"
Enter
"
|
|
event
.
key
=
=
=
"
"
)
{
event
.
preventDefault
(
)
;
this
.
onHeaderClick
(
)
;
}
}
_getSectionBodyHeight
(
)
{
const
div
=
this
.
sectionBody
;
if
(
div
.
style
.
display
=
=
=
"
none
"
)
{
/
/
If
the
div
isn
'
t
displayed
we
can
'
t
get
it
'
s
height
.
So
we
display
it
/
/
to
get
the
height
(
it
doesn
'
t
show
up
because
max
-
height
is
set
to
0px
/
/
in
CSS
)
.
We
don
'
t
undo
this
because
we
are
about
to
expand
the
section
.
div
.
style
.
display
=
"
block
"
;
}
return
div
.
scrollHeight
;
}
onTransitionEnd
(
event
)
{
/
/
Only
update
the
animating
state
for
our
own
transition
(
not
a
child
'
s
)
if
(
event
.
target
=
=
=
event
.
currentTarget
)
{
this
.
setState
(
{
isAnimating
:
false
}
)
;
}
}
renderIcon
(
)
{
const
{
icon
}
=
this
.
props
;
if
(
icon
&
&
icon
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
)
{
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
"
style
:
{
backgroundImage
:
url
(
'
{
icon
}
'
)
}
}
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
icon
icon
-
small
-
spacer
icon
-
{
icon
|
|
"
webextension
"
}
}
)
;
}
onMenuButtonMouseEnter
(
)
{
this
.
setState
(
{
menuButtonHover
:
true
}
)
;
}
onMenuButtonMouseLeave
(
)
{
this
.
setState
(
{
menuButtonHover
:
false
}
)
;
}
onMenuUpdate
(
showContextMenu
)
{
this
.
setState
(
{
showContextMenu
}
)
;
}
render
(
)
{
const
isCollapsible
=
this
.
props
.
collapsed
!
=
=
undefined
;
const
{
enableAnimation
isAnimating
maxHeight
menuButtonHover
showContextMenu
}
=
this
.
state
;
const
{
id
eventSource
collapsed
learnMore
title
extraMenuOptions
showPrefName
privacyNoticeURL
dispatch
isFixed
isFirst
isLast
isWebExtension
}
=
this
.
props
;
const
active
=
menuButtonHover
|
|
showContextMenu
;
let
bodyStyle
;
if
(
isAnimating
&
&
!
collapsed
)
{
bodyStyle
=
{
maxHeight
}
;
}
else
if
(
!
isAnimating
&
&
collapsed
)
{
bodyStyle
=
{
display
:
"
none
"
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
section
"
{
className
:
collapsible
-
section
{
this
.
props
.
className
}
{
enableAnimation
?
"
animation
-
enabled
"
:
"
"
}
{
collapsed
?
"
collapsed
"
:
"
"
}
{
active
?
"
active
"
:
"
"
}
"
aria
-
expanded
"
:
!
collapsed
/
/
Note
:
data
-
section
-
id
is
used
for
web
extension
api
tests
in
mozilla
central
"
data
-
section
-
id
"
:
id
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
top
-
bar
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
click
-
target
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
click
-
target
"
role
:
"
button
"
tabIndex
:
"
0
"
onKeyPress
:
this
.
onKeyPress
onClick
:
this
.
onHeaderClick
}
this
.
renderIcon
(
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
[
"
FluentOrText
"
]
{
message
:
title
}
)
isCollapsible
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
collapsed
?
"
newtab
-
section
-
expand
-
section
-
label
"
:
"
newtab
-
section
-
collapse
-
section
-
label
"
className
:
collapsible
-
arrow
icon
{
collapsed
?
"
icon
-
arrowhead
-
forward
-
small
"
:
"
icon
-
arrowhead
-
down
-
small
"
}
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
learn
-
more
-
link
-
wrapper
"
}
learnMore
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
span
"
{
className
:
"
learn
-
more
-
link
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
[
"
FluentOrText
"
]
{
message
:
learnMore
.
link
.
message
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
a
"
{
href
:
learnMore
.
link
.
href
}
)
)
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__
[
"
ContextMenuButton
"
]
{
tooltip
:
"
newtab
-
menu
-
section
-
tooltip
"
onUpdate
:
this
.
onMenuUpdate
refFunction
:
this
.
setContextMenuButtonRef
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__
[
"
SectionMenu
"
]
{
id
:
id
extraOptions
:
extraMenuOptions
eventSource
:
eventSource
showPrefName
:
showPrefName
privacyNoticeURL
:
privacyNoticeURL
collapsed
:
collapsed
isFixed
:
isFixed
isFirst
:
isFirst
isLast
:
isLast
dispatch
:
dispatch
isWebExtension
:
isWebExtension
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_1__
[
"
ErrorBoundary
"
]
{
className
:
"
section
-
body
-
fallback
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
section
-
body
{
isAnimating
?
"
animating
"
:
"
"
}
onTransitionEnd
:
this
.
onTransitionEnd
ref
:
this
.
onBodyMount
style
:
bodyStyle
}
this
.
props
.
children
)
)
)
;
}
}
CollapsibleSection
.
defaultProps
=
{
document
:
global
.
document
|
|
{
addEventListener
:
(
)
=
>
{
}
removeEventListener
:
(
)
=
>
{
}
visibilityState
:
"
hidden
"
}
Prefs
:
{
values
:
{
}
}
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
47
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ErrorBoundaryFallback
"
function
(
)
{
return
ErrorBoundaryFallback
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ErrorBoundary
"
function
(
)
{
return
ErrorBoundary
;
}
)
;
/
*
harmony
import
*
/
var
content_src_components_A11yLinkButton_A11yLinkButton__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
48
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
ErrorBoundaryFallback
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
windowObj
=
this
.
props
.
windowObj
|
|
window
;
this
.
onClick
=
this
.
onClick
.
bind
(
this
)
;
}
/
*
*
*
Since
we
only
get
here
if
part
of
the
page
has
crashed
do
a
*
forced
reload
to
give
us
the
best
chance
at
recovering
.
*
/
onClick
(
)
{
this
.
windowObj
.
location
.
reload
(
true
)
;
}
render
(
)
{
const
defaultClass
=
"
as
-
error
-
fallback
"
;
let
className
;
if
(
"
className
"
in
this
.
props
)
{
className
=
{
this
.
props
.
className
}
{
defaultClass
}
;
}
else
{
className
=
defaultClass
;
}
/
/
"
A11yLinkButton
"
to
force
normal
link
styling
stuff
(
eg
cursor
on
hover
)
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
className
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
error
-
fallback
-
info
"
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
content_src_components_A11yLinkButton_A11yLinkButton__WEBPACK_IMPORTED_MODULE_0__
[
"
A11yLinkButton
"
]
{
className
:
"
reload
-
button
"
onClick
:
this
.
onClick
"
data
-
l10n
-
id
"
:
"
newtab
-
error
-
fallback
-
refresh
-
link
"
}
)
)
)
;
}
}
ErrorBoundaryFallback
.
defaultProps
=
{
className
:
"
as
-
error
-
fallback
"
}
;
class
ErrorBoundary
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
hasError
:
false
}
;
}
componentDidCatch
(
error
info
)
{
this
.
setState
(
{
hasError
:
true
}
)
;
}
render
(
)
{
if
(
!
this
.
state
.
hasError
)
{
return
this
.
props
.
children
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
this
.
props
.
FallbackComponent
{
className
:
this
.
props
.
className
}
)
;
}
}
ErrorBoundary
.
defaultProps
=
{
FallbackComponent
:
ErrorBoundaryFallback
}
;
/
*
*
*
/
}
)
/
*
48
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
A11yLinkButton
"
function
(
)
{
return
A11yLinkButton
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
function
A11yLinkButton
(
props
)
{
/
/
function
for
merging
classes
if
necessary
let
className
=
"
a11y
-
link
-
button
"
;
if
(
props
.
className
)
{
className
+
=
{
props
.
className
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
_extends
(
{
type
:
"
button
"
}
props
{
className
:
className
}
)
props
.
children
)
;
}
/
*
*
*
/
}
)
/
*
49
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FluentOrText
"
function
(
)
{
return
FluentOrText
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
Set
text
on
a
child
element
/
component
depending
on
if
the
message
is
already
*
translated
plain
text
or
a
fluent
id
with
optional
args
.
*
/
class
FluentOrText
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
/
/
Ensure
we
have
a
single
child
to
attach
attributes
const
{
children
message
}
=
this
.
props
;
const
child
=
children
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
Children
.
only
(
children
)
:
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
null
)
;
/
/
For
a
string
message
just
use
it
as
the
child
'
s
text
let
grandChildren
=
message
;
let
extraProps
;
/
/
Convert
a
message
object
to
set
desired
fluent
-
dom
attributes
if
(
typeof
message
=
=
=
"
object
"
)
{
const
args
=
message
.
args
|
|
message
.
values
;
extraProps
=
{
"
data
-
l10n
-
args
"
:
args
&
&
JSON
.
stringify
(
args
)
"
data
-
l10n
-
id
"
:
message
.
id
|
|
message
.
string_id
}
;
/
/
Use
original
children
potentially
with
data
-
l10n
-
name
attributes
grandChildren
=
child
.
props
.
children
;
}
/
/
Add
the
message
to
the
child
via
fluent
attributes
or
text
node
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
cloneElement
(
child
extraProps
grandChildren
)
;
}
}
/
*
*
*
/
}
)
/
*
50
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_SectionMenu
"
function
(
)
{
return
_SectionMenu
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SectionMenu
"
function
(
)
{
return
SectionMenu
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
37
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
harmony
import
*
/
var
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
51
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
DEFAULT_SECTION_MENU_OPTIONS
=
[
"
MoveUp
"
"
MoveDown
"
"
Separator
"
"
RemoveSection
"
"
CheckCollapsed
"
"
Separator
"
"
ManageSection
"
]
;
const
WEBEXT_SECTION_MENU_OPTIONS
=
[
"
MoveUp
"
"
MoveDown
"
"
Separator
"
"
CheckCollapsed
"
"
Separator
"
"
ManageWebExtension
"
]
;
class
_SectionMenu
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
PureComponent
{
handleAddWhileCollapsed
(
)
{
const
{
action
userEvent
}
=
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__
[
"
SectionMenuOptions
"
]
.
ExpandSection
(
this
.
props
)
;
this
.
props
.
dispatch
(
action
)
;
if
(
userEvent
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
source
:
this
.
props
.
source
}
)
)
;
}
}
getOptions
(
)
{
const
{
props
}
=
this
;
const
propOptions
=
props
.
isWebExtension
?
[
.
.
.
WEBEXT_SECTION_MENU_OPTIONS
]
:
[
.
.
.
DEFAULT_SECTION_MENU_OPTIONS
]
;
/
/
Remove
the
move
related
options
if
the
section
is
fixed
if
(
props
.
isFixed
)
{
propOptions
.
splice
(
propOptions
.
indexOf
(
"
MoveUp
"
)
3
)
;
}
/
/
Prepend
custom
options
and
a
separator
if
(
props
.
extraOptions
)
{
propOptions
.
splice
(
0
0
.
.
.
props
.
extraOptions
"
Separator
"
)
;
}
/
/
Insert
privacy
notice
before
the
last
option
(
"
ManageSection
"
)
if
(
props
.
privacyNoticeURL
)
{
propOptions
.
splice
(
-
1
0
"
PrivacyNotice
"
)
;
}
const
options
=
propOptions
.
map
(
o
=
>
content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__
[
"
SectionMenuOptions
"
]
[
o
]
(
props
)
)
.
map
(
option
=
>
{
const
{
action
id
type
userEvent
}
=
option
;
if
(
!
type
&
&
id
)
{
option
.
onClick
=
(
)
=
>
{
const
hasAddEvent
=
userEvent
=
=
=
"
MENU_ADD_TOPSITE
"
|
|
userEvent
=
=
=
"
MENU_ADD_SEARCH
"
;
if
(
props
.
collapsed
&
&
hasAddEvent
)
{
this
.
handleAddWhileCollapsed
(
)
;
}
props
.
dispatch
(
action
)
;
if
(
userEvent
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
userEvent
source
:
props
.
source
}
)
)
;
}
}
;
}
return
option
;
}
)
;
/
/
This
is
for
accessibility
to
support
making
each
item
tabbable
.
/
/
We
want
to
know
which
item
is
the
first
and
which
item
/
/
is
the
last
so
we
can
close
the
context
menu
accordingly
.
options
[
0
]
.
first
=
true
;
options
[
options
.
length
-
1
]
.
last
=
true
;
return
options
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__
[
"
ContextMenu
"
]
{
onUpdate
:
this
.
props
.
onUpdate
options
:
this
.
getOptions
(
)
keyboardAccess
:
this
.
props
.
keyboardAccess
}
)
;
}
}
const
SectionMenu
=
_SectionMenu
;
/
*
*
*
/
}
)
/
*
51
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SectionMenuOptions
"
function
(
)
{
return
SectionMenuOptions
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
List
of
functions
that
return
items
that
can
be
included
as
menu
options
in
a
*
SectionMenu
.
All
functions
take
the
section
as
the
only
parameter
.
*
/
const
SectionMenuOptions
=
{
Separator
:
(
)
=
>
(
{
type
:
"
separator
"
}
)
MoveUp
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
move
-
up
"
icon
:
"
arrowhead
-
up
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SECTION_MOVE
data
:
{
id
:
section
.
id
direction
:
-
1
}
}
)
userEvent
:
"
MENU_MOVE_UP
"
disabled
:
!
!
section
.
isFirst
}
)
MoveDown
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
move
-
down
"
icon
:
"
arrowhead
-
down
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SECTION_MOVE
data
:
{
id
:
section
.
id
direction
:
+
1
}
}
)
userEvent
:
"
MENU_MOVE_DOWN
"
disabled
:
!
!
section
.
isLast
}
)
RemoveSection
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
remove
-
section
"
icon
:
"
dismiss
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
SetPref
(
section
.
showPrefName
false
)
userEvent
:
"
MENU_REMOVE
"
}
)
CollapseSection
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
collapse
-
section
"
icon
:
"
minimize
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_SECTION_PREFS
data
:
{
id
:
section
.
id
value
:
{
collapsed
:
true
}
}
}
)
userEvent
:
"
MENU_COLLAPSE
"
}
)
ExpandSection
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
expand
-
section
"
icon
:
"
maximize
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_SECTION_PREFS
data
:
{
id
:
section
.
id
value
:
{
collapsed
:
false
}
}
}
)
userEvent
:
"
MENU_EXPAND
"
}
)
ManageSection
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
manage
-
section
"
icon
:
"
settings
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SETTINGS_OPEN
}
)
userEvent
:
"
MENU_MANAGE
"
}
)
ManageWebExtension
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
manage
-
webext
"
icon
:
"
settings
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_WEBEXT_SETTINGS
data
:
section
.
id
}
)
}
)
AddTopSite
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
add
-
topsite
"
icon
:
"
add
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
:
-
1
}
}
userEvent
:
"
MENU_ADD_TOPSITE
"
}
)
AddSearchShortcut
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
add
-
search
-
engine
"
icon
:
"
search
"
action
:
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
}
userEvent
:
"
MENU_ADD_SEARCH
"
}
)
PrivacyNotice
:
section
=
>
(
{
id
:
"
newtab
-
section
-
menu
-
privacy
-
notice
"
icon
:
"
info
"
action
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
{
url
:
section
.
privacyNoticeURL
}
}
)
userEvent
:
"
MENU_PRIVACY_NOTICE
"
}
)
CheckCollapsed
:
section
=
>
section
.
collapsed
?
SectionMenuOptions
.
ExpandSection
(
section
)
:
SectionMenuOptions
.
CollapseSection
(
section
)
}
;
/
*
*
*
/
}
)
/
*
52
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSDismiss
"
function
(
)
{
return
DSDismiss
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
38
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSDismiss
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onDismissClick
=
this
.
onDismissClick
.
bind
(
this
)
;
this
.
onHover
=
this
.
onHover
.
bind
(
this
)
;
this
.
offHover
=
this
.
offHover
.
bind
(
this
)
;
this
.
state
=
{
hovering
:
false
}
;
}
onDismissClick
(
)
{
const
index
=
0
;
const
source
=
"
DISCOVERY_STREAM
"
;
const
blockUrlOption
=
content_src_lib_link_menu_options__WEBPACK_IMPORTED_MODULE_2__
[
"
LinkMenuOptions
"
]
.
BlockUrl
(
this
.
props
.
data
index
source
)
;
const
{
action
impression
userEvent
}
=
blockUrlOption
;
this
.
props
.
dispatch
(
action
)
;
const
userEventData
=
Object
.
assign
(
{
event
:
userEvent
source
action_position
:
index
}
this
.
props
.
data
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
userEventData
)
)
;
if
(
impression
&
&
this
.
props
.
shouldSendImpressionStats
)
{
this
.
props
.
dispatch
(
impression
)
;
}
}
onHover
(
)
{
this
.
setState
(
{
hovering
:
true
}
)
;
}
offHover
(
)
{
this
.
setState
(
{
hovering
:
false
}
)
;
}
render
(
)
{
let
className
=
ds
-
dismiss
{
this
.
state
.
hovering
?
hovering
:
}
{
this
.
props
.
extraClasses
?
{
this
.
props
.
extraClasses
}
:
}
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
className
}
this
.
props
.
children
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
ds
-
dismiss
-
button
"
onHover
:
this
.
onHover
onClick
:
this
.
onDismissClick
onMouseEnter
:
this
.
onHover
onMouseLeave
:
this
.
offHover
"
aria
-
label
"
:
"
dismiss
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
dismiss
"
}
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
53
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSMessage
"
function
(
)
{
return
DSMessage
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
41
)
;
/
*
harmony
import
*
/
var
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
49
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSMessage
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
message
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
header
"
{
className
:
"
title
"
}
this
.
props
.
icon
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
glyph
"
style
:
{
backgroundImage
:
url
(
{
this
.
props
.
icon
}
)
}
}
)
this
.
props
.
title
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
title
-
text
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
[
"
FluentOrText
"
]
{
message
:
this
.
props
.
title
}
)
)
this
.
props
.
link_text
&
&
this
.
props
.
link_url
&
&
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_1__
[
"
SafeAnchor
"
]
{
className
:
"
link
"
url
:
this
.
props
.
link_url
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
[
"
FluentOrText
"
]
{
message
:
this
.
props
.
link_text
}
)
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
54
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSPrivacyModal
"
function
(
)
{
return
DSPrivacyModal
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
21
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSPrivacyModal
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
closeModal
=
this
.
closeModal
.
bind
(
this
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
onLinkClick
(
event
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
CLICK_PRIVACY_INFO
"
source
:
"
DS_PRIVACY_MODAL
"
}
)
)
;
}
closeModal
(
)
{
this
.
props
.
dispatch
(
{
type
:
HIDE_PRIVACY_INFO
data
:
{
}
}
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
content_src_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_2__
[
"
ModalOverlayWrapper
"
]
{
onClose
:
this
.
closeModal
innerClassName
:
"
ds
-
privacy
-
modal
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
privacy
-
notice
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
h3
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
privacy
-
modal
-
header
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
p
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
privacy
-
modal
-
paragraph
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
a
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
privacy
-
modal
-
link
"
onClick
:
this
.
onLinkClick
href
:
"
https
:
/
/
www
.
mozilla
.
org
/
en
-
US
/
privacy
/
firefox
/
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
type
:
"
submit
"
onClick
:
this
.
closeModal
"
data
-
l10n
-
id
"
:
"
newtab
-
privacy
-
modal
-
button
-
done
"
}
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
55
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DSTextPromo
"
function
(
)
{
return
DSTextPromo
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
34
)
;
/
*
harmony
import
*
/
var
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
40
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
41
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
DSTextPromo
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
onLinkClick
(
)
{
if
(
this
.
props
.
dispatch
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
type
.
toUpperCase
(
)
action_position
:
this
.
props
.
pos
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
type
.
toUpperCase
(
)
click
:
0
tiles
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
.
.
.
(
this
.
props
.
shim
&
&
this
.
props
.
shim
.
click
?
{
shim
:
this
.
props
.
shim
.
click
}
:
{
}
)
}
]
}
)
)
;
}
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
text
-
promo
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_1__
[
"
DSImage
"
]
{
alt_text
:
this
.
props
.
alt_text
source
:
this
.
props
.
image
rawSource
:
this
.
props
.
raw_image_src
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
text
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
h3
"
null
{
this
.
props
.
header
}
\
u2003
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_4__
[
"
SafeAnchor
"
]
{
className
:
"
ds
-
chevron
-
link
"
dispatch
:
this
.
props
.
dispatch
onLinkClick
:
this
.
onLinkClick
url
:
this
.
props
.
cta_url
}
this
.
props
.
cta_text
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
p
"
{
className
:
"
subtitle
"
}
this
.
props
.
subtitle
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_2__
[
"
ImpressionStats
"
]
{
flightId
:
this
.
props
.
flightId
rows
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
shim
:
this
.
props
.
shim
&
&
this
.
props
.
shim
.
impression
}
]
dispatch
:
this
.
props
.
dispatch
source
:
this
.
props
.
type
}
)
)
;
}
}
/
*
*
*
/
}
)
/
*
56
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Hero
"
function
(
)
{
return
Hero
;
}
)
;
/
*
harmony
import
*
/
var
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
33
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
45
)
;
/
*
harmony
import
*
/
var
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
34
)
;
/
*
harmony
import
*
/
var
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
35
)
;
/
*
harmony
import
*
/
var
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
40
)
;
/
*
harmony
import
*
/
var
_List_List_jsx__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
57
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_7___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_7__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
41
)
;
/
*
harmony
import
*
/
var
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
42
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Hero
extends
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
onLinkClick
(
event
)
{
if
(
this
.
props
.
dispatch
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
type
.
toUpperCase
(
)
action_position
:
this
.
heroRec
.
pos
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
type
.
toUpperCase
(
)
click
:
0
tiles
:
[
{
id
:
this
.
heroRec
.
id
pos
:
this
.
heroRec
.
pos
.
.
.
(
this
.
heroRec
.
shim
&
&
this
.
heroRec
.
shim
.
click
?
{
shim
:
this
.
heroRec
.
shim
.
click
}
:
{
}
)
}
]
}
)
)
;
}
}
renderHero
(
)
{
let
[
heroRec
.
.
.
otherRecs
]
=
this
.
props
.
data
.
recommendations
.
slice
(
0
this
.
props
.
items
)
;
this
.
heroRec
=
heroRec
;
const
cards
=
[
]
;
for
(
let
index
=
0
;
index
<
this
.
props
.
items
-
1
;
index
+
+
)
{
const
rec
=
otherRecs
[
index
]
;
cards
.
push
(
!
rec
|
|
rec
.
placeholder
?
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
[
"
PlaceholderDSCard
"
]
{
key
:
dscard
-
{
index
}
}
)
:
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
[
"
DSCard
"
]
{
flightId
:
rec
.
flight_id
key
:
dscard
-
{
rec
.
id
}
image_src
:
rec
.
image_src
raw_image_src
:
rec
.
raw_image_src
title
:
rec
.
title
url
:
rec
.
url
id
:
rec
.
id
shim
:
rec
.
shim
pos
:
rec
.
pos
type
:
this
.
props
.
type
dispatch
:
this
.
props
.
dispatch
context
:
rec
.
context
context_type
:
rec
.
context_type
source
:
rec
.
domain
pocket_id
:
rec
.
pocket_id
bookmarkGuid
:
rec
.
bookmarkGuid
engagement
:
rec
.
engagement
}
)
)
;
}
let
heroCard
=
null
;
if
(
!
heroRec
|
|
heroRec
.
placeholder
)
{
heroCard
=
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSCard_DSCard_jsx__WEBPACK_IMPORTED_MODULE_0__
[
"
PlaceholderDSCard
"
]
null
)
;
}
else
{
heroCard
=
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
hero
-
item
"
key
:
dscard
-
{
heroRec
.
id
}
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_8__
[
"
SafeAnchor
"
]
{
className
:
"
wrapper
"
dispatch
:
this
.
props
.
dispatch
onLinkClick
:
this
.
onLinkClick
url
:
heroRec
.
url
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
img
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_3__
[
"
DSImage
"
]
{
extraClassNames
:
"
img
"
source
:
heroRec
.
image_src
rawSource
:
heroRec
.
raw_image_src
}
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
meta
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
header
-
and
-
excerpt
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
p
"
{
className
:
"
source
clamp
"
}
heroRec
.
domain
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
header
"
{
className
:
"
clamp
"
}
heroRec
.
title
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
p
"
{
className
:
"
excerpt
clamp
"
}
heroRec
.
excerpt
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_9__
[
"
DSContextFooter
"
]
{
context
:
heroRec
.
context
context_type
:
heroRec
.
context_type
engagement
:
heroRec
.
engagement
}
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_5__
[
"
ImpressionStats
"
]
{
flightId
:
heroRec
.
flight_id
rows
:
[
{
id
:
heroRec
.
id
pos
:
heroRec
.
pos
.
.
.
(
heroRec
.
shim
&
&
heroRec
.
shim
.
impression
?
{
shim
:
heroRec
.
shim
.
impression
}
:
{
}
)
}
]
dispatch
:
this
.
props
.
dispatch
source
:
this
.
props
.
type
}
)
)
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_4__
[
"
DSLinkMenu
"
]
{
id
:
heroRec
.
id
index
:
heroRec
.
pos
dispatch
:
this
.
props
.
dispatch
url
:
heroRec
.
url
title
:
heroRec
.
title
source
:
heroRec
.
domain
type
:
this
.
props
.
type
pocket_id
:
heroRec
.
pocket_id
shim
:
heroRec
.
shim
bookmarkGuid
:
heroRec
.
bookmarkGuid
flightId
:
heroRec
.
flight_id
}
)
)
;
}
let
list
=
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_List_List_jsx__WEBPACK_IMPORTED_MODULE_6__
[
"
List
"
]
{
recStartingPoint
:
1
data
:
this
.
props
.
data
feed
:
this
.
props
.
feed
hasImages
:
true
hasBorders
:
this
.
props
.
border
=
=
=
border
items
:
this
.
props
.
items
-
1
type
:
Hero
}
)
;
return
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
ds
-
hero
ds
-
hero
-
{
this
.
props
.
border
}
}
heroCard
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
{
this
.
props
.
subComponentType
}
}
this
.
props
.
subComponentType
=
=
=
cards
?
cards
:
list
)
)
;
}
render
(
)
{
const
{
data
}
=
this
.
props
;
/
/
Handle
a
render
before
feed
has
been
fetched
by
displaying
nothing
if
(
!
data
|
|
!
data
.
recommendations
)
{
return
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
null
)
;
}
/
/
Handle
the
case
where
a
user
has
dismissed
all
recommendations
const
isEmpty
=
data
.
recommendations
.
length
=
=
=
0
;
return
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
header
"
}
this
.
props
.
title
)
isEmpty
?
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
hero
empty
"
}
react__WEBPACK_IMPORTED_MODULE_7___default
.
a
.
createElement
(
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_2__
[
"
DSEmptyState
"
]
{
status
:
data
.
status
dispatch
:
this
.
props
.
dispatch
feed
:
this
.
props
.
feed
}
)
)
:
this
.
renderHero
(
)
)
;
}
}
Hero
.
defaultProps
=
{
data
:
{
}
border
:
border
items
:
1
/
/
Number
of
stories
to
display
}
;
/
*
*
*
/
}
)
/
*
57
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ListItem
"
function
(
)
{
return
ListItem
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
PlaceholderListItem
"
function
(
)
{
return
PlaceholderListItem
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_List
"
function
(
)
{
return
_List
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
List
"
function
(
)
{
return
List
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
45
)
;
/
*
harmony
import
*
/
var
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
34
)
;
/
*
harmony
import
*
/
var
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
35
)
;
/
*
harmony
import
*
/
var
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
40
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
41
)
;
/
*
harmony
import
*
/
var
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
42
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
note
exported
for
testing
only
*
/
class
ListItem
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
/
/
TODO
performance
:
get
feeds
to
send
appropriately
sized
images
rather
/
/
than
waiting
longer
and
scaling
down
on
client
?
constructor
(
props
)
{
super
(
props
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
onLinkClick
(
event
)
{
if
(
this
.
props
.
dispatch
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
type
.
toUpperCase
(
)
action_position
:
this
.
props
.
pos
value
:
{
card_type
:
this
.
props
.
flightId
?
"
spoc
"
:
"
organic
"
}
}
)
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
type
.
toUpperCase
(
)
click
:
0
tiles
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
.
.
.
(
this
.
props
.
shim
&
&
this
.
props
.
shim
.
click
?
{
shim
:
this
.
props
.
shim
.
click
}
:
{
}
)
}
]
}
)
)
;
}
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
li
"
{
className
:
ds
-
list
-
item
{
this
.
props
.
placeholder
?
"
placeholder
"
:
"
"
}
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_7__
[
"
SafeAnchor
"
]
{
className
:
"
ds
-
list
-
item
-
link
"
dispatch
:
this
.
props
.
dispatch
onLinkClick
:
!
this
.
props
.
placeholder
?
this
.
onLinkClick
:
undefined
url
:
this
.
props
.
url
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
list
-
item
-
text
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
p
"
null
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
span
"
{
className
:
"
ds
-
list
-
item
-
info
clamp
"
}
this
.
props
.
domain
)
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
list
-
item
-
body
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
list
-
item
-
title
clamp
"
}
this
.
props
.
title
)
this
.
props
.
excerpt
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
list
-
item
-
excerpt
clamp
"
}
this
.
props
.
excerpt
)
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_DSContextFooter_DSContextFooter_jsx__WEBPACK_IMPORTED_MODULE_8__
[
"
DSContextFooter
"
]
{
context
:
this
.
props
.
context
context_type
:
this
.
props
.
context_type
engagement
:
this
.
props
.
engagement
}
)
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_DSImage_DSImage_jsx__WEBPACK_IMPORTED_MODULE_3__
[
"
DSImage
"
]
{
extraClassNames
:
"
ds
-
list
-
image
"
source
:
this
.
props
.
image_src
rawSource
:
this
.
props
.
raw_image_src
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_5__
[
"
ImpressionStats
"
]
{
flightId
:
this
.
props
.
flightId
rows
:
[
{
id
:
this
.
props
.
id
pos
:
this
.
props
.
pos
.
.
.
(
this
.
props
.
shim
&
&
this
.
props
.
shim
.
impression
?
{
shim
:
this
.
props
.
shim
.
impression
}
:
{
}
)
}
]
dispatch
:
this
.
props
.
dispatch
source
:
this
.
props
.
type
}
)
)
!
this
.
props
.
placeholder
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_DSLinkMenu_DSLinkMenu__WEBPACK_IMPORTED_MODULE_4__
[
"
DSLinkMenu
"
]
{
id
:
this
.
props
.
id
index
:
this
.
props
.
pos
dispatch
:
this
.
props
.
dispatch
url
:
this
.
props
.
url
title
:
this
.
props
.
title
source
:
this
.
props
.
source
type
:
this
.
props
.
type
pocket_id
:
this
.
props
.
pocket_id
shim
:
this
.
props
.
shim
bookmarkGuid
:
this
.
props
.
bookmarkGuid
flightId
:
this
.
props
.
flightId
}
)
)
;
}
}
const
PlaceholderListItem
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
ListItem
{
placeholder
:
true
}
)
;
/
*
*
*
note
exported
for
testing
only
*
/
function
_List
(
props
)
{
const
renderList
=
(
)
=
>
{
const
recs
=
props
.
data
.
recommendations
.
slice
(
props
.
recStartingPoint
props
.
recStartingPoint
+
props
.
items
)
;
const
recMarkup
=
[
]
;
for
(
let
index
=
0
;
index
<
props
.
items
;
index
+
+
)
{
const
rec
=
recs
[
index
]
;
recMarkup
.
push
(
!
rec
|
|
rec
.
placeholder
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
PlaceholderListItem
{
key
:
ds
-
list
-
item
-
{
index
}
}
)
:
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
ListItem
{
key
:
ds
-
list
-
item
-
{
rec
.
id
}
dispatch
:
props
.
dispatch
flightId
:
rec
.
flight_id
domain
:
rec
.
domain
excerpt
:
rec
.
excerpt
id
:
rec
.
id
shim
:
rec
.
shim
image_src
:
rec
.
image_src
raw_image_src
:
rec
.
raw_image_src
pos
:
rec
.
pos
title
:
rec
.
title
context
:
rec
.
context
context_type
:
rec
.
context_type
type
:
props
.
type
url
:
rec
.
url
pocket_id
:
rec
.
pocket_id
bookmarkGuid
:
rec
.
bookmarkGuid
engagement
:
rec
.
engagement
}
)
)
;
}
const
listStyles
=
[
"
ds
-
list
"
props
.
fullWidth
?
"
ds
-
list
-
full
-
width
"
:
"
"
props
.
hasBorders
?
"
ds
-
list
-
borders
"
:
"
"
props
.
hasImages
?
"
ds
-
list
-
images
"
:
"
"
props
.
hasNumbers
?
"
ds
-
list
-
numbers
"
:
"
"
]
;
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
ul
"
{
className
:
listStyles
.
join
(
"
"
)
}
recMarkup
)
;
}
;
const
{
data
}
=
props
;
if
(
!
data
|
|
!
data
.
recommendations
)
{
return
null
;
}
/
/
Handle
the
case
where
a
user
has
dismissed
all
recommendations
const
isEmpty
=
data
.
recommendations
.
length
=
=
=
0
;
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
null
props
.
header
&
&
props
.
header
.
title
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
header
"
}
props
.
header
.
title
)
:
null
isEmpty
?
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
list
empty
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_DSEmptyState_DSEmptyState_jsx__WEBPACK_IMPORTED_MODULE_2__
[
"
DSEmptyState
"
]
{
status
:
data
.
status
dispatch
:
props
.
dispatch
feed
:
props
.
feed
}
)
)
:
renderList
(
)
)
;
}
_List
.
defaultProps
=
{
recStartingPoint
:
0
/
/
Index
of
recommendations
to
start
displaying
from
fullWidth
:
false
/
/
Display
items
taking
up
the
whole
column
hasBorders
:
false
/
/
Display
lines
separating
each
item
hasImages
:
false
/
/
Display
images
for
each
item
hasNumbers
:
false
/
/
Display
numbers
for
each
item
items
:
6
/
/
Number
of
stories
to
display
.
TODO
:
get
from
endpoint
}
;
const
List
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
state
=
>
(
{
DiscoveryStream
:
state
.
DiscoveryStream
}
)
)
(
_List
)
;
/
*
*
*
/
}
)
/
*
58
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_Highlights
"
function
(
)
{
return
_Highlights
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Highlights
"
function
(
)
{
return
Highlights
;
}
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
59
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
_Highlights
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
render
(
)
{
const
section
=
this
.
props
.
Sections
.
find
(
s
=
>
s
.
id
=
=
=
"
highlights
"
)
;
if
(
!
section
|
|
!
section
.
enabled
)
{
return
null
;
}
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
highlights
sections
-
list
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_2__
[
"
SectionIntl
"
]
_extends
(
{
}
section
{
isFixed
:
true
}
)
)
)
;
}
}
const
Highlights
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
[
"
connect
"
]
)
(
state
=
>
(
{
Sections
:
state
.
Sections
}
)
)
(
_Highlights
)
;
/
*
*
*
/
}
)
/
*
59
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Section
"
function
(
)
{
return
Section
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SectionIntl
"
function
(
)
{
return
SectionIntl
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_Sections
"
function
(
)
{
return
_Sections
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Sections
"
function
(
)
{
return
Sections
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
60
)
;
/
*
harmony
import
*
/
var
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
46
)
;
/
*
harmony
import
*
/
var
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
62
)
;
/
*
harmony
import
*
/
var
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
49
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_5___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
)
;
/
*
harmony
import
*
/
var
content_src_components_MoreRecommendations_MoreRecommendations__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
64
)
;
/
*
harmony
import
*
/
var
content_src_components_PocketLoggedInCta_PocketLoggedInCta__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
65
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_8___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_8__
)
;
/
*
harmony
import
*
/
var
content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
66
)
;
/
*
harmony
import
*
/
var
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
67
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
const
CARDS_PER_ROW_DEFAULT
=
3
;
const
CARDS_PER_ROW_COMPACT_WIDE
=
4
;
class
Section
extends
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
PureComponent
{
get
numRows
(
)
{
const
{
rowsPref
maxRows
Prefs
}
=
this
.
props
;
return
rowsPref
?
Prefs
.
values
[
rowsPref
]
:
maxRows
;
}
_dispatchImpressionStats
(
)
{
const
{
props
}
=
this
;
let
cardsPerRow
=
CARDS_PER_ROW_DEFAULT
;
if
(
props
.
compactCards
&
&
global
.
matchMedia
(
(
min
-
width
:
1072px
)
)
.
matches
)
{
/
/
If
the
section
has
compact
cards
and
the
viewport
is
wide
enough
we
show
/
/
4
columns
instead
of
3
.
/
/
break
-
point
-
widest
=
1072px
(
from
_variables
.
scss
)
cardsPerRow
=
CARDS_PER_ROW_COMPACT_WIDE
;
}
const
maxCards
=
cardsPerRow
*
this
.
numRows
;
const
cards
=
props
.
rows
.
slice
(
0
maxCards
)
;
if
(
this
.
needsImpressionStats
(
cards
)
)
{
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
props
.
eventSource
tiles
:
cards
.
map
(
link
=
>
(
{
id
:
link
.
guid
}
)
)
}
)
)
;
this
.
impressionCardGuids
=
cards
.
map
(
link
=
>
link
.
guid
)
;
}
}
/
/
This
sends
an
event
when
a
user
sees
a
set
of
new
content
.
If
content
/
/
changes
while
the
page
is
hidden
(
i
.
e
.
preloaded
or
on
a
hidden
tab
)
/
/
only
send
the
event
if
the
page
becomes
visible
again
.
sendImpressionStatsOrAddListener
(
)
{
const
{
props
}
=
this
;
if
(
!
props
.
shouldSendImpressionStats
|
|
!
props
.
dispatch
)
{
return
;
}
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
_dispatchImpressionStats
(
)
;
}
else
{
/
/
We
should
only
ever
send
the
latest
impression
stats
ping
so
remove
any
/
/
older
listeners
.
if
(
this
.
_onVisibilityChange
)
{
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
/
/
When
the
page
becomes
visible
send
the
impression
stats
ping
if
the
section
isn
'
t
collapsed
.
this
.
_onVisibilityChange
=
(
)
=
>
{
if
(
props
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
if
(
!
this
.
props
.
pref
.
collapsed
)
{
this
.
_dispatchImpressionStats
(
)
;
}
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
;
props
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
componentWillMount
(
)
{
this
.
sendNewTabRehydrated
(
this
.
props
.
initialized
)
;
}
componentDidMount
(
)
{
if
(
this
.
props
.
rows
.
length
&
&
!
this
.
props
.
pref
.
collapsed
)
{
this
.
sendImpressionStatsOrAddListener
(
)
;
}
}
componentDidUpdate
(
prevProps
)
{
const
{
props
}
=
this
;
const
isCollapsed
=
props
.
pref
.
collapsed
;
const
wasCollapsed
=
prevProps
.
pref
.
collapsed
;
if
(
/
/
Don
'
t
send
impression
stats
for
the
empty
state
props
.
rows
.
length
&
&
(
/
/
We
only
want
to
send
impression
stats
if
the
content
of
the
cards
has
changed
/
/
and
the
section
is
not
collapsed
.
.
.
props
.
rows
!
=
=
prevProps
.
rows
&
&
!
isCollapsed
|
|
/
/
or
if
we
are
expanding
a
section
that
was
collapsed
.
wasCollapsed
&
&
!
isCollapsed
)
)
{
this
.
sendImpressionStatsOrAddListener
(
)
;
}
}
componentWillUpdate
(
nextProps
)
{
this
.
sendNewTabRehydrated
(
nextProps
.
initialized
)
;
}
componentWillUnmount
(
)
{
if
(
this
.
_onVisibilityChange
)
{
this
.
props
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
needsImpressionStats
(
cards
)
{
if
(
!
this
.
impressionCardGuids
|
|
this
.
impressionCardGuids
.
length
!
=
=
cards
.
length
)
{
return
true
;
}
for
(
let
i
=
0
;
i
<
cards
.
length
;
i
+
+
)
{
if
(
cards
[
i
]
.
guid
!
=
=
this
.
impressionCardGuids
[
i
]
)
{
return
true
;
}
}
return
false
;
}
/
/
The
NEW_TAB_REHYDRATED
event
is
used
to
inform
feeds
that
their
/
/
data
has
been
consumed
e
.
g
.
for
counting
the
number
of
tabs
that
/
/
have
rendered
that
data
.
sendNewTabRehydrated
(
initialized
)
{
if
(
initialized
&
&
!
this
.
renderNotified
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
NEW_TAB_REHYDRATED
data
:
{
}
}
)
)
;
this
.
renderNotified
=
true
;
}
}
render
(
)
{
const
{
id
eventSource
title
icon
rows
Pocket
topics
emptyState
dispatch
compactCards
read_more_endpoint
contextMenuOptions
initialized
learnMore
pref
privacyNoticeURL
isFirst
isLast
}
=
this
.
props
;
const
waitingForSpoc
=
id
=
=
=
"
topstories
"
&
&
this
.
props
.
Pocket
.
waitingForSpoc
;
const
maxCardsPerRow
=
compactCards
?
CARDS_PER_ROW_COMPACT_WIDE
:
CARDS_PER_ROW_DEFAULT
;
const
{
numRows
}
=
this
;
const
maxCards
=
maxCardsPerRow
*
numRows
;
const
maxCardsOnNarrow
=
CARDS_PER_ROW_DEFAULT
*
numRows
;
const
{
pocketCta
isUserLoggedIn
}
=
Pocket
|
|
{
}
;
const
{
useCta
}
=
pocketCta
|
|
{
}
;
/
/
Don
'
t
display
anything
until
we
have
a
definitve
result
from
Pocket
/
/
to
avoid
a
flash
of
logged
out
state
while
we
render
.
const
isPocketLoggedInDefined
=
isUserLoggedIn
=
=
=
true
|
|
isUserLoggedIn
=
=
=
false
;
const
hasTopics
=
topics
&
&
!
!
topics
.
length
;
const
shouldShowPocketCta
=
id
=
=
=
"
topstories
"
&
&
useCta
&
&
isUserLoggedIn
=
=
=
false
;
/
/
Show
topics
only
for
top
stories
and
if
it
has
loaded
with
topics
.
/
/
The
classs
.
top
-
stories
-
bottom
-
container
ensures
content
doesn
'
t
shift
as
things
load
.
const
shouldShowTopics
=
id
=
=
=
"
topstories
"
&
&
hasTopics
&
&
(
useCta
&
&
isUserLoggedIn
=
=
=
true
|
|
!
useCta
&
&
isPocketLoggedInDefined
)
;
/
/
We
use
topics
to
determine
language
support
for
read
more
.
const
shouldShowReadMore
=
read_more_endpoint
&
&
hasTopics
;
const
realRows
=
rows
.
slice
(
0
maxCards
)
;
/
/
The
empty
state
should
only
be
shown
after
we
have
initialized
and
there
is
no
content
.
/
/
Otherwise
we
should
show
placeholders
.
const
shouldShowEmptyState
=
initialized
&
&
!
rows
.
length
;
const
cards
=
[
]
;
if
(
!
shouldShowEmptyState
)
{
for
(
let
i
=
0
;
i
<
maxCards
;
i
+
+
)
{
const
link
=
realRows
[
i
]
;
/
/
On
narrow
viewports
we
only
show
3
cards
per
row
.
We
'
ll
mark
the
rest
as
/
/
.
hide
-
for
-
narrow
to
hide
in
CSS
via
media
query
.
const
className
=
i
>
=
maxCardsOnNarrow
?
"
hide
-
for
-
narrow
"
:
"
"
;
let
usePlaceholder
=
!
link
;
/
/
If
we
are
in
the
third
card
and
waiting
for
spoc
/
/
use
the
placeholder
.
if
(
!
usePlaceholder
&
&
i
=
=
=
2
&
&
waitingForSpoc
)
{
usePlaceholder
=
true
;
}
cards
.
push
(
!
usePlaceholder
?
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__
[
"
Card
"
]
{
key
:
i
index
:
i
className
:
className
dispatch
:
dispatch
link
:
link
contextMenuOptions
:
contextMenuOptions
eventSource
:
eventSource
shouldSendImpressionStats
:
this
.
props
.
shouldSendImpressionStats
isWebExtension
:
this
.
props
.
isWebExtension
}
)
:
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__
[
"
PlaceholderCard
"
]
{
key
:
i
className
:
className
}
)
)
;
}
}
const
sectionClassName
=
[
"
section
"
compactCards
?
"
compact
-
cards
"
:
"
normal
-
cards
"
]
.
join
(
"
"
)
;
/
/
<
Section
>
<
-
-
React
component
/
/
<
section
>
<
-
-
HTML5
element
return
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
[
"
ComponentPerfTimer
"
]
this
.
props
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
[
"
CollapsibleSection
"
]
{
className
:
sectionClassName
icon
:
icon
title
:
title
id
:
id
eventSource
:
eventSource
collapsed
:
this
.
props
.
pref
.
collapsed
showPrefName
:
pref
&
&
pref
.
feed
|
|
id
privacyNoticeURL
:
privacyNoticeURL
Prefs
:
this
.
props
.
Prefs
isFixed
:
this
.
props
.
isFixed
isFirst
:
isFirst
isLast
:
isLast
learnMore
:
learnMore
dispatch
:
this
.
props
.
dispatch
isWebExtension
:
this
.
props
.
isWebExtension
}
!
shouldShowEmptyState
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
ul
"
{
className
:
"
section
-
list
"
style
:
{
padding
:
0
}
}
cards
)
shouldShowEmptyState
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
empty
-
state
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
empty
-
state
"
}
emptyState
.
icon
&
&
emptyState
.
icon
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
?
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
span
"
{
className
:
"
empty
-
state
-
icon
icon
"
style
:
{
"
background
-
image
"
:
url
(
'
{
emptyState
.
icon
}
'
)
}
}
)
:
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
span
"
{
className
:
empty
-
state
-
icon
icon
icon
-
{
emptyState
.
icon
}
}
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_4__
[
"
FluentOrText
"
]
{
message
:
emptyState
.
message
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
p
"
{
className
:
"
empty
-
state
-
message
"
}
)
)
)
)
id
=
=
=
"
topstories
"
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
stories
-
bottom
-
container
"
}
shouldShowTopics
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
wrapper
-
topics
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_9__
[
"
Topics
"
]
{
topics
:
this
.
props
.
topics
}
)
)
shouldShowPocketCta
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
wrapper
-
cta
"
}
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_PocketLoggedInCta_PocketLoggedInCta__WEBPACK_IMPORTED_MODULE_7__
[
"
PocketLoggedInCta
"
]
null
)
)
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
wrapper
-
more
-
recommendations
"
}
shouldShowReadMore
&
&
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_MoreRecommendations_MoreRecommendations__WEBPACK_IMPORTED_MODULE_6__
[
"
MoreRecommendations
"
]
{
read_more_endpoint
:
read_more_endpoint
}
)
)
)
)
)
;
}
}
Section
.
defaultProps
=
{
document
:
global
.
document
rows
:
[
]
emptyState
:
{
}
pref
:
{
}
title
:
"
"
}
;
const
SectionIntl
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
[
"
connect
"
]
)
(
state
=
>
(
{
Prefs
:
state
.
Prefs
Pocket
:
state
.
Pocket
}
)
)
(
Section
)
;
class
_Sections
extends
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
PureComponent
{
renderSections
(
)
{
const
sections
=
[
]
;
const
enabledSections
=
this
.
props
.
Sections
.
filter
(
section
=
>
section
.
enabled
)
;
const
{
sectionOrder
"
feeds
.
topsites
"
:
showTopSites
}
=
this
.
props
.
Prefs
.
values
;
/
/
Enabled
sections
doesn
'
t
include
Top
Sites
so
we
add
it
if
enabled
.
const
expectedCount
=
enabledSections
.
length
+
~
~
showTopSites
;
for
(
const
sectionId
of
sectionOrder
.
split
(
"
"
)
)
{
const
commonProps
=
{
key
:
sectionId
isFirst
:
sections
.
length
=
=
=
0
isLast
:
sections
.
length
=
=
=
expectedCount
-
1
}
;
if
(
sectionId
=
=
=
"
topsites
"
&
&
showTopSites
)
{
sections
.
push
(
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_10__
[
"
TopSites
"
]
commonProps
)
)
;
}
else
{
const
section
=
enabledSections
.
find
(
s
=
>
s
.
id
=
=
=
sectionId
)
;
if
(
section
)
{
sections
.
push
(
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
SectionIntl
_extends
(
{
}
section
commonProps
)
)
)
;
}
}
}
return
sections
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_8___default
.
a
.
createElement
(
"
div
"
{
className
:
"
sections
-
list
"
}
this
.
renderSections
(
)
)
;
}
}
const
Sections
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_5__
[
"
connect
"
]
)
(
state
=
>
(
{
Sections
:
state
.
Sections
Prefs
:
state
.
Prefs
}
)
)
(
_Sections
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
60
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_Card
"
function
(
)
{
return
_Card
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Card
"
function
(
)
{
return
Card
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
PlaceholderCard
"
function
(
)
{
return
PlaceholderCard
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_types__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
43
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
39
)
;
/
*
harmony
import
*
/
var
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
36
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_5___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_5__
)
;
/
*
harmony
import
*
/
var
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
61
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Keep
track
of
pending
image
loads
to
only
request
once
const
gImageLoading
=
new
Map
(
)
;
/
*
*
*
Card
component
.
*
Cards
are
found
within
a
Section
component
and
contain
information
about
a
link
such
*
as
preview
image
page
title
page
description
and
some
context
about
if
the
page
*
was
visited
bookmarked
trending
etc
.
.
.
*
Each
Section
can
make
an
unordered
list
of
Cards
which
will
create
one
instane
of
*
this
class
.
Each
card
will
then
get
a
context
menu
which
reflects
the
actions
that
*
can
be
done
on
this
Card
.
*
/
class
_Card
extends
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
activeCard
:
null
imageLoaded
:
false
cardImage
:
null
}
;
this
.
onMenuButtonUpdate
=
this
.
onMenuButtonUpdate
.
bind
(
this
)
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
}
/
*
*
*
Helper
to
conditionally
load
an
image
and
update
state
when
it
loads
.
*
/
async
maybeLoadImage
(
)
{
/
/
No
need
to
load
if
it
'
s
already
loaded
or
no
image
const
{
cardImage
}
=
this
.
state
;
if
(
!
cardImage
)
{
return
;
}
const
imageUrl
=
cardImage
.
url
;
if
(
!
this
.
state
.
imageLoaded
)
{
/
/
Initialize
a
promise
to
share
a
load
across
multiple
card
updates
if
(
!
gImageLoading
.
has
(
imageUrl
)
)
{
const
loaderPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
const
loader
=
new
Image
(
)
;
loader
.
addEventListener
(
"
load
"
resolve
)
;
loader
.
addEventListener
(
"
error
"
reject
)
;
loader
.
src
=
imageUrl
;
}
)
;
/
/
Save
and
remove
the
promise
only
while
it
'
s
pending
gImageLoading
.
set
(
imageUrl
loaderPromise
)
;
loaderPromise
.
catch
(
ex
=
>
ex
)
.
then
(
(
)
=
>
gImageLoading
.
delete
(
imageUrl
)
)
.
catch
(
)
;
}
/
/
Wait
for
the
image
whether
just
started
loading
or
reused
promise
await
gImageLoading
.
get
(
imageUrl
)
;
/
/
Only
update
state
if
we
'
re
still
waiting
to
load
the
original
image
if
(
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
this
.
state
.
cardImage
this
.
props
.
link
.
image
)
&
&
!
this
.
state
.
imageLoaded
)
{
this
.
setState
(
{
imageLoaded
:
true
}
)
;
}
}
}
/
*
*
*
Helper
to
obtain
the
next
state
based
on
nextProps
and
prevState
.
*
*
NOTE
:
Rename
this
method
to
getDerivedStateFromProps
when
we
update
React
*
to
>
=
16
.
3
.
We
will
need
to
update
tests
as
well
.
We
cannot
rename
this
*
method
to
getDerivedStateFromProps
now
because
there
is
a
mismatch
in
*
the
React
version
that
we
are
using
for
both
testing
and
production
.
*
(
i
.
e
.
react
-
test
-
render
=
>
"
16
.
3
.
2
"
react
=
>
"
16
.
2
.
0
"
)
.
*
*
See
https
:
/
/
github
.
com
/
airbnb
/
enzyme
/
blob
/
master
/
packages
/
enzyme
-
adapter
-
react
-
16
/
package
.
json
#
L43
.
*
/
static
getNextStateFromProps
(
nextProps
prevState
)
{
const
{
image
}
=
nextProps
.
link
;
const
imageInState
=
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
prevState
.
cardImage
image
)
;
let
nextState
=
null
;
/
/
Image
is
updating
.
if
(
!
imageInState
&
&
nextProps
.
link
)
{
nextState
=
{
imageLoaded
:
false
}
;
}
if
(
imageInState
)
{
return
nextState
;
}
/
/
Since
image
was
updated
attempt
to
revoke
old
image
blob
URL
if
it
exists
.
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
prevState
.
cardImage
)
;
nextState
=
nextState
|
|
{
}
;
nextState
.
cardImage
=
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
[
"
ScreenshotUtils
"
]
.
createLocalImageObject
(
image
)
;
return
nextState
;
}
onMenuButtonUpdate
(
isOpen
)
{
if
(
isOpen
)
{
this
.
setState
(
{
activeCard
:
this
.
props
.
index
}
)
;
}
else
{
this
.
setState
(
{
activeCard
:
null
}
)
;
}
}
/
*
*
*
Report
to
telemetry
additional
information
about
the
item
.
*
/
_getTelemetryInfo
(
)
{
/
/
Filter
out
"
history
"
type
for
being
the
default
if
(
this
.
props
.
link
.
type
!
=
=
"
history
"
)
{
return
{
value
:
{
card_type
:
this
.
props
.
link
.
type
}
}
;
}
return
null
;
}
onLinkClick
(
event
)
{
event
.
preventDefault
(
)
;
if
(
this
.
props
.
link
.
type
=
=
=
"
download
"
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SHOW_DOWNLOAD_FILE
data
:
this
.
props
.
link
}
)
)
;
}
else
{
const
{
altKey
button
ctrlKey
metaKey
shiftKey
}
=
event
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
Object
.
assign
(
this
.
props
.
link
{
event
:
{
altKey
button
ctrlKey
metaKey
shiftKey
}
}
)
}
)
)
;
}
if
(
this
.
props
.
isWebExtension
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
WebExtEvent
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
WEBEXT_CLICK
{
source
:
this
.
props
.
eventSource
url
:
this
.
props
.
link
.
url
action_position
:
this
.
props
.
index
}
)
)
;
}
else
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
:
"
CLICK
"
source
:
this
.
props
.
eventSource
action_position
:
this
.
props
.
index
}
this
.
_getTelemetryInfo
(
)
)
)
)
;
if
(
this
.
props
.
shouldSendImpressionStats
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
this
.
props
.
eventSource
click
:
0
tiles
:
[
{
id
:
this
.
props
.
link
.
guid
pos
:
this
.
props
.
index
}
]
}
)
)
;
}
}
}
componentDidMount
(
)
{
this
.
maybeLoadImage
(
)
;
}
componentDidUpdate
(
)
{
this
.
maybeLoadImage
(
)
;
}
/
/
NOTE
:
Remove
this
function
when
we
update
React
to
>
=
16
.
3
since
React
will
/
/
call
getDerivedStateFromProps
automatically
.
We
will
also
need
to
/
/
rename
getNextStateFromProps
to
getDerivedStateFromProps
.
componentWillMount
(
)
{
const
nextState
=
_Card
.
getNextStateFromProps
(
this
.
props
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
/
/
NOTE
:
Remove
this
function
when
we
update
React
to
>
=
16
.
3
since
React
will
/
/
call
getDerivedStateFromProps
automatically
.
We
will
also
need
to
/
/
rename
getNextStateFromProps
to
getDerivedStateFromProps
.
componentWillReceiveProps
(
nextProps
)
{
const
nextState
=
_Card
.
getNextStateFromProps
(
nextProps
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillUnmount
(
)
{
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_6__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
this
.
state
.
cardImage
)
;
}
render
(
)
{
const
{
index
className
link
dispatch
contextMenuOptions
eventSource
shouldSendImpressionStats
}
=
this
.
props
;
const
{
props
}
=
this
;
const
title
=
link
.
title
|
|
link
.
hostname
;
const
isContextMenuOpen
=
this
.
state
.
activeCard
=
=
=
index
;
/
/
Display
"
now
"
as
"
trending
"
until
we
have
new
strings
#
3402
const
{
icon
fluentID
}
=
_types__WEBPACK_IMPORTED_MODULE_1__
[
"
cardContextTypes
"
]
[
link
.
type
=
=
=
"
now
"
?
"
trending
"
:
link
.
type
]
|
|
{
}
;
const
hasImage
=
this
.
state
.
cardImage
|
|
link
.
hasImage
;
const
imageStyle
=
{
backgroundImage
:
this
.
state
.
cardImage
?
url
(
{
this
.
state
.
cardImage
.
url
}
)
:
"
none
"
}
;
const
outerClassName
=
[
"
card
-
outer
"
className
isContextMenuOpen
&
&
"
active
"
props
.
placeholder
&
&
"
placeholder
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
li
"
{
className
:
outerClassName
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
a
"
{
href
:
link
.
type
=
=
=
"
pocket
"
?
link
.
open_url
:
link
.
url
onClick
:
!
props
.
placeholder
?
this
.
onLinkClick
:
undefined
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
"
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
preview
-
image
-
outer
"
}
hasImage
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
card
-
preview
-
image
{
this
.
state
.
imageLoaded
?
"
loaded
"
:
"
"
}
style
:
imageStyle
}
)
)
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
details
"
}
link
.
type
=
=
=
"
download
"
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
host
-
name
alternate
"
"
data
-
l10n
-
id
"
:
"
newtab
-
menu
-
show
-
file
"
}
)
link
.
hostname
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
host
-
name
"
}
link
.
hostname
.
slice
(
0
100
)
link
.
type
=
=
=
"
download
"
&
&
\
u2014
{
link
.
description
}
)
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
[
"
card
-
text
"
icon
?
"
"
:
"
no
-
context
"
link
.
description
?
"
"
:
"
no
-
description
"
link
.
hostname
?
"
"
:
"
no
-
host
-
name
"
]
.
join
(
"
"
)
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
h4
"
{
className
:
"
card
-
title
"
dir
:
"
auto
"
}
link
.
title
)
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
p
"
{
className
:
"
card
-
description
"
dir
:
"
auto
"
}
link
.
description
)
)
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
"
}
icon
&
&
!
link
.
context
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
span
"
{
"
aria
-
haspopup
"
:
"
true
"
className
:
card
-
context
-
icon
icon
icon
-
{
icon
}
}
)
link
.
icon
&
&
link
.
context
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
span
"
{
"
aria
-
haspopup
"
:
"
true
"
className
:
"
card
-
context
-
icon
icon
"
style
:
{
backgroundImage
:
url
(
'
{
link
.
icon
}
'
)
}
}
)
fluentID
&
&
!
link
.
context
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
-
label
"
"
data
-
l10n
-
id
"
:
fluentID
}
)
link
.
context
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
"
div
"
{
className
:
"
card
-
context
-
label
"
}
link
.
context
)
)
)
)
)
!
props
.
placeholder
&
&
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_3__
[
"
ContextMenuButton
"
]
{
tooltip
:
"
newtab
-
menu
-
content
-
tooltip
"
tooltipArgs
:
{
title
}
onUpdate
:
this
.
onMenuButtonUpdate
}
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_4__
[
"
LinkMenu
"
]
{
dispatch
:
dispatch
index
:
index
source
:
eventSource
options
:
link
.
contextMenuOptions
|
|
contextMenuOptions
site
:
link
siteInfo
:
this
.
_getTelemetryInfo
(
)
shouldSendImpressionStats
:
shouldSendImpressionStats
}
)
)
)
;
}
}
_Card
.
defaultProps
=
{
link
:
{
}
}
;
const
Card
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_2__
[
"
connect
"
]
)
(
state
=
>
(
{
platform
:
state
.
Prefs
.
values
.
platform
}
)
)
(
_Card
)
;
const
PlaceholderCard
=
props
=
>
react__WEBPACK_IMPORTED_MODULE_5___default
.
a
.
createElement
(
Card
{
placeholder
:
true
className
:
props
.
className
}
)
;
/
*
*
*
/
}
)
/
*
61
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ScreenshotUtils
"
function
(
)
{
return
ScreenshotUtils
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
List
of
helper
functions
for
screenshot
-
based
images
.
*
*
There
are
two
kinds
of
images
:
*
1
.
Remote
Image
:
This
is
the
image
from
the
main
process
and
it
refers
to
*
the
image
in
the
React
props
.
This
can
either
be
an
object
with
the
data
*
and
path
properties
if
it
is
a
blob
or
a
string
if
it
is
a
normal
image
.
*
2
.
Local
Image
:
This
is
the
image
object
in
the
content
process
and
it
refers
*
to
the
image
*
object
*
in
the
React
component
'
s
state
.
All
local
image
*
objects
have
the
url
property
and
an
additional
property
path
if
they
*
are
blobs
.
*
/
const
ScreenshotUtils
=
{
isBlob
(
isLocal
image
)
{
return
!
!
(
image
&
&
image
.
path
&
&
(
!
isLocal
&
&
image
.
data
|
|
isLocal
&
&
image
.
url
)
)
;
}
/
/
This
should
always
be
called
with
a
remote
image
and
not
a
local
image
.
createLocalImageObject
(
remoteImage
)
{
if
(
!
remoteImage
)
{
return
null
;
}
if
(
this
.
isBlob
(
false
remoteImage
)
)
{
return
{
url
:
global
.
URL
.
createObjectURL
(
remoteImage
.
data
)
path
:
remoteImage
.
path
}
;
}
return
{
url
:
remoteImage
}
;
}
/
/
Revokes
the
object
URL
of
the
image
if
the
local
image
is
a
blob
.
/
/
This
should
always
be
called
with
a
local
image
and
not
a
remote
image
.
maybeRevokeBlobObjectURL
(
localImage
)
{
if
(
this
.
isBlob
(
true
localImage
)
)
{
global
.
URL
.
revokeObjectURL
(
localImage
.
url
)
;
}
}
/
/
Checks
if
remoteImage
and
localImage
are
the
same
.
isRemoteImageLocal
(
localImage
remoteImage
)
{
/
/
Both
remoteImage
and
localImage
are
present
.
if
(
remoteImage
&
&
localImage
)
{
return
this
.
isBlob
(
false
remoteImage
)
?
localImage
.
path
=
=
=
remoteImage
.
path
:
localImage
.
url
=
=
=
remoteImage
;
}
/
/
This
will
only
handle
the
remaining
three
possible
outcomes
.
/
/
(
i
.
e
.
everything
except
when
both
image
and
localImage
are
present
)
return
!
remoteImage
&
&
!
localImage
;
}
}
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
62
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ComponentPerfTimer
"
function
(
)
{
return
ComponentPerfTimer
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
63
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Currently
record
only
a
fixed
set
of
sections
.
This
will
prevent
data
/
/
from
custom
sections
from
showing
up
or
from
topstories
.
const
RECORDED_SECTIONS
=
[
"
highlights
"
"
topsites
"
]
;
class
ComponentPerfTimer
extends
react__WEBPACK_IMPORTED_MODULE_2___default
.
a
.
Component
{
constructor
(
props
)
{
super
(
props
)
;
/
/
Just
for
test
dependency
injection
:
this
.
perfSvc
=
this
.
props
.
perfSvc
|
|
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
perfService
"
]
;
this
.
_sendBadStateEvent
=
this
.
_sendBadStateEvent
.
bind
(
this
)
;
this
.
_sendPaintedEvent
=
this
.
_sendPaintedEvent
.
bind
(
this
)
;
this
.
_reportMissingData
=
false
;
this
.
_timestampHandled
=
false
;
this
.
_recordedFirstRender
=
false
;
}
componentDidMount
(
)
{
if
(
!
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
return
;
}
this
.
_maybeSendPaintedEvent
(
)
;
}
componentDidUpdate
(
)
{
if
(
!
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
return
;
}
this
.
_maybeSendPaintedEvent
(
)
;
}
/
*
*
*
Call
the
given
callback
after
the
upcoming
frame
paints
.
*
*
note
Both
setTimeout
and
requestAnimationFrame
are
throttled
when
the
page
*
is
hidden
so
this
callback
may
get
called
up
to
a
second
or
so
after
the
*
requestAnimationFrame
"
paint
"
for
hidden
tabs
.
*
*
Newtabs
hidden
while
loading
will
presumably
be
fairly
rare
(
other
than
*
preloaded
tabs
which
we
will
be
filtering
out
on
the
server
side
)
so
such
*
cases
should
get
lost
in
the
noise
.
*
*
If
we
decide
that
it
'
s
important
to
find
out
when
something
that
'
s
hidden
*
has
"
painted
"
however
another
option
is
to
post
a
message
to
this
window
.
*
That
should
happen
even
faster
than
setTimeout
and
at
least
as
of
this
*
writing
it
'
s
not
throttled
in
hidden
windows
in
Firefox
.
*
*
param
{
Function
}
callback
*
*
returns
void
*
/
_afterFramePaint
(
callback
)
{
requestAnimationFrame
(
(
)
=
>
setTimeout
(
callback
0
)
)
;
}
_maybeSendBadStateEvent
(
)
{
/
/
Follow
up
bugs
:
/
/
https
:
/
/
github
.
com
/
mozilla
/
activity
-
stream
/
issues
/
3691
if
(
!
this
.
props
.
initialized
)
{
/
/
Remember
to
report
back
when
data
is
available
.
this
.
_reportMissingData
=
true
;
}
else
if
(
this
.
_reportMissingData
)
{
this
.
_reportMissingData
=
false
;
/
/
Report
how
long
it
took
for
component
to
become
initialized
.
this
.
_sendBadStateEvent
(
)
;
}
}
_maybeSendPaintedEvent
(
)
{
/
/
If
we
'
ve
already
handled
a
timestamp
don
'
t
do
it
again
.
if
(
this
.
_timestampHandled
|
|
!
this
.
props
.
initialized
)
{
return
;
}
/
/
And
if
we
haven
'
t
we
'
re
doing
so
now
so
remember
that
.
Even
if
/
/
something
goes
wrong
in
the
callback
we
can
'
t
try
again
as
we
'
d
be
/
/
sending
back
the
wrong
data
and
we
have
to
do
it
here
so
that
other
/
/
calls
to
this
method
while
waiting
for
the
next
frame
won
'
t
also
try
to
/
/
handle
it
.
this
.
_timestampHandled
=
true
;
this
.
_afterFramePaint
(
this
.
_sendPaintedEvent
)
;
}
/
*
*
*
Triggered
by
call
to
render
.
Only
first
call
goes
through
due
to
*
_recordedFirstRender
.
*
/
_ensureFirstRenderTsRecorded
(
)
{
/
/
Used
as
t0
for
recording
how
long
component
took
to
initialize
.
if
(
!
this
.
_recordedFirstRender
)
{
this
.
_recordedFirstRender
=
true
;
/
/
topsites_first_render_ts
highlights_first_render_ts
.
const
key
=
{
this
.
props
.
id
}
_first_render_ts
;
this
.
perfSvc
.
mark
(
key
)
;
}
}
/
*
*
*
Creates
TELEMETRY_UNDESIRED_EVENT
with
timestamp
in
ms
*
of
how
much
longer
the
data
took
to
be
ready
for
display
than
it
would
*
have
been
the
ideal
case
.
*
https
:
/
/
github
.
com
/
mozilla
/
ping
-
centre
/
issues
/
98
*
/
_sendBadStateEvent
(
)
{
/
/
highlights_data_ready_ts
topsites_data_ready_ts
.
const
dataReadyKey
=
{
this
.
props
.
id
}
_data_ready_ts
;
this
.
perfSvc
.
mark
(
dataReadyKey
)
;
try
{
const
firstRenderKey
=
{
this
.
props
.
id
}
_first_render_ts
;
/
/
value
has
to
be
Int32
.
const
value
=
parseInt
(
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
dataReadyKey
)
-
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
firstRenderKey
)
10
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
/
/
highlights_data_late_by_ms
topsites_data_late_by_ms
.
data
:
{
[
{
this
.
props
.
id
}
_data_late_by_ms
]
:
value
}
}
)
)
;
}
catch
(
ex
)
{
/
/
If
this
failed
it
'
s
likely
because
the
privacy
.
resistFingerprinting
/
/
pref
is
true
.
}
}
_sendPaintedEvent
(
)
{
/
/
Record
first_painted
event
but
only
send
if
topsites
.
if
(
this
.
props
.
id
!
=
=
"
topsites
"
)
{
return
;
}
/
/
topsites_first_painted_ts
.
const
key
=
{
this
.
props
.
id
}
_first_painted_ts
;
this
.
perfSvc
.
mark
(
key
)
;
try
{
const
data
=
{
}
;
data
[
key
]
=
this
.
perfSvc
.
getMostRecentAbsMarkStartByName
(
key
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
}
)
)
;
}
catch
(
ex
)
{
/
/
If
this
failed
it
'
s
likely
because
the
privacy
.
resistFingerprinting
/
/
pref
is
true
.
We
should
at
least
not
blow
up
and
should
continue
/
/
to
set
this
.
_timestampHandled
to
avoid
going
through
this
again
.
}
}
render
(
)
{
if
(
RECORDED_SECTIONS
.
includes
(
this
.
props
.
id
)
)
{
this
.
_ensureFirstRenderTsRecorded
(
)
;
this
.
_maybeSendBadStateEvent
(
)
;
}
return
this
.
props
.
children
;
}
}
/
*
*
*
/
}
)
/
*
63
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_PerfService
"
function
(
)
{
return
_PerfService
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
perfService
"
function
(
)
{
return
perfService
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
if
(
typeof
ChromeUtils
!
=
=
"
undefined
"
)
{
/
/
Use
a
var
here
instead
of
let
outside
to
avoid
creating
a
locally
scoped
/
/
variable
that
hides
the
global
which
we
modify
for
testing
.
/
/
eslint
-
disable
-
next
-
line
no
-
var
vars
-
on
-
top
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
}
let
usablePerfObj
;
/
*
istanbul
ignore
else
*
/
/
/
eslint
-
disable
-
next
-
line
block
-
scoped
-
var
if
(
typeof
Services
!
=
=
"
undefined
"
)
{
/
/
Borrow
the
high
-
resolution
timer
from
the
hidden
window
.
.
.
.
/
/
eslint
-
disable
-
next
-
line
block
-
scoped
-
var
usablePerfObj
=
Services
.
appShell
.
hiddenDOMWindow
.
performance
;
}
else
{
/
/
we
must
be
running
in
content
space
/
/
eslint
-
disable
-
next
-
line
no
-
undef
usablePerfObj
=
performance
;
}
function
_PerfService
(
options
)
{
/
/
For
testing
so
that
we
can
use
a
fake
Window
.
performance
object
with
/
/
known
state
.
if
(
options
&
&
options
.
performanceObj
)
{
this
.
_perf
=
options
.
performanceObj
;
}
else
{
this
.
_perf
=
usablePerfObj
;
}
}
_PerfService
.
prototype
=
{
/
*
*
*
Calls
the
underlying
mark
(
)
method
on
the
appropriate
Window
.
performance
*
object
to
add
a
mark
with
the
given
name
to
the
appropriate
performance
*
timeline
.
*
*
param
{
String
}
name
the
name
to
give
the
current
mark
*
return
{
void
}
*
/
mark
:
function
mark
(
str
)
{
this
.
_perf
.
mark
(
str
)
;
}
/
*
*
*
Calls
the
underlying
getEntriesByName
on
the
appropriate
Window
.
performance
*
object
.
*
*
param
{
String
}
name
*
param
{
String
}
type
eg
"
mark
"
*
return
{
Array
}
Performance
*
objects
*
/
getEntriesByName
:
function
getEntriesByName
(
name
type
)
{
return
this
.
_perf
.
getEntriesByName
(
name
type
)
;
}
/
*
*
*
The
timeOrigin
property
from
the
appropriate
performance
object
.
*
Used
to
ensure
that
timestamps
from
the
add
-
on
code
and
the
content
code
*
are
comparable
.
*
*
note
If
this
is
called
from
a
context
without
a
window
*
(
eg
a
JSM
in
chrome
)
it
will
return
the
timeOrigin
of
the
XUL
hidden
*
window
which
appears
to
be
the
first
created
window
(
and
thus
*
timeOrigin
)
in
the
browser
.
Note
also
however
there
is
also
a
private
*
hidden
window
presumably
for
private
browsing
which
appears
to
be
*
created
dynamically
later
.
Exactly
how
/
when
that
shows
up
needs
to
be
*
investigated
.
*
*
return
{
Number
}
A
double
of
milliseconds
with
a
precision
of
0
.
5us
.
*
/
get
timeOrigin
(
)
{
return
this
.
_perf
.
timeOrigin
;
}
/
*
*
*
Returns
the
"
absolute
"
version
of
performance
.
now
(
)
i
.
e
.
one
that
*
should
(
[
bug
1401406
]
(
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1401406
)
*
be
comparable
across
both
chrome
and
content
.
*
*
return
{
Number
}
*
/
absNow
:
function
absNow
(
)
{
return
this
.
timeOrigin
+
this
.
_perf
.
now
(
)
;
}
/
*
*
*
This
returns
the
absolute
startTime
from
the
most
recent
performance
.
mark
(
)
*
with
the
given
name
.
*
*
param
{
String
}
name
the
name
to
lookup
the
start
time
for
*
*
return
{
Number
}
the
returned
start
time
as
a
DOMHighResTimeStamp
*
*
throws
{
Error
}
"
No
Marks
with
the
name
.
.
.
"
if
none
are
available
*
*
note
Always
surround
calls
to
this
by
try
/
catch
.
Otherwise
your
code
*
may
fail
when
the
privacy
.
resistFingerprinting
pref
is
true
.
When
*
this
pref
is
set
all
attempts
to
get
marks
will
likely
fail
which
will
*
cause
this
method
to
throw
.
*
*
See
[
bug
1369303
]
(
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1369303
)
*
for
more
info
.
*
/
getMostRecentAbsMarkStartByName
(
name
)
{
let
entries
=
this
.
getEntriesByName
(
name
"
mark
"
)
;
if
(
!
entries
.
length
)
{
throw
new
Error
(
No
marks
with
the
name
{
name
}
)
;
}
let
mostRecentEntry
=
entries
[
entries
.
length
-
1
]
;
return
this
.
_perf
.
timeOrigin
+
mostRecentEntry
.
startTime
;
}
}
;
var
perfService
=
new
_PerfService
(
)
;
/
*
*
*
/
}
)
/
*
64
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
MoreRecommendations
"
function
(
)
{
return
MoreRecommendations
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
MoreRecommendations
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
read_more_endpoint
}
=
this
.
props
;
if
(
read_more_endpoint
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
a
"
{
className
:
"
more
-
recommendations
"
href
:
read_more_endpoint
"
data
-
l10n
-
id
"
:
"
newtab
-
pocket
-
more
-
recommendations
"
}
)
;
}
return
null
;
}
}
/
*
*
*
/
}
)
/
*
65
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_PocketLoggedInCta
"
function
(
)
{
return
_PocketLoggedInCta
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
PocketLoggedInCta
"
function
(
)
{
return
PocketLoggedInCta
;
}
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
_PocketLoggedInCta
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
render
(
)
{
const
{
pocketCta
}
=
this
.
props
.
Pocket
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
className
:
"
pocket
-
logged
-
in
-
cta
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
className
:
"
pocket
-
cta
-
button
"
href
:
pocketCta
.
ctaUrl
?
pocketCta
.
ctaUrl
:
"
https
:
/
/
getpocket
.
com
/
"
}
pocketCta
.
ctaButton
?
pocketCta
.
ctaButton
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
pocket
-
cta
-
button
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
a
"
{
href
:
pocketCta
.
ctaUrl
?
pocketCta
.
ctaUrl
:
"
https
:
/
/
getpocket
.
com
/
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
className
:
"
cta
-
text
"
}
pocketCta
.
ctaText
?
pocketCta
.
ctaText
:
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
pocket
-
cta
-
text
"
}
)
)
)
)
;
}
}
const
PocketLoggedInCta
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
[
"
connect
"
]
)
(
state
=
>
(
{
Pocket
:
state
.
Pocket
}
)
)
(
_PocketLoggedInCta
)
;
/
*
*
*
/
}
)
/
*
66
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Topic
"
function
(
)
{
return
Topic
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Topics
"
function
(
)
{
return
Topics
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Topic
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
url
name
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
a
"
{
key
:
name
href
:
url
}
name
)
)
;
}
}
class
Topics
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
topics
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
className
:
"
topics
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
"
newtab
-
pocket
-
read
-
more
"
}
)
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
ul
"
null
topics
&
&
topics
.
map
(
t
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
Topic
{
key
:
t
.
name
url
:
t
.
url
name
:
t
.
name
}
)
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
67
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_TopSites
"
function
(
)
{
return
_TopSites
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSites
"
function
(
)
{
return
TopSites
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
68
)
;
/
*
harmony
import
*
/
var
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
46
)
;
/
*
harmony
import
*
/
var
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
62
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
21
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_6___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_6__
)
;
/
*
harmony
import
*
/
var
_SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
69
)
;
/
*
harmony
import
*
/
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__
=
__webpack_require__
(
81
)
;
/
*
harmony
import
*
/
var
_TopSiteForm__WEBPACK_IMPORTED_MODULE_9__
=
__webpack_require__
(
83
)
;
/
*
harmony
import
*
/
var
_TopSite__WEBPACK_IMPORTED_MODULE_10__
=
__webpack_require__
(
70
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
function
topSiteIconType
(
link
)
{
if
(
link
.
customScreenshotURL
)
{
return
"
custom_screenshot
"
;
}
if
(
link
.
tippyTopIcon
|
|
link
.
faviconRef
=
=
=
"
tippytop
"
)
{
return
"
tippytop
"
;
}
if
(
link
.
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_RICH_FAVICON_SIZE
"
]
)
{
return
"
rich_icon
"
;
}
if
(
link
.
screenshot
&
&
link
.
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_CORNER_FAVICON_SIZE
"
]
)
{
return
"
screenshot_with_icon
"
;
}
if
(
link
.
screenshot
)
{
return
"
screenshot
"
;
}
return
"
no_image
"
;
}
/
*
*
*
Iterates
through
TopSites
and
counts
types
of
images
.
*
param
acc
Accumulator
for
reducer
.
*
param
topsite
Entry
in
TopSites
.
*
/
function
countTopSitesIconsTypes
(
topSites
)
{
const
countTopSitesTypes
=
(
acc
link
)
=
>
{
acc
[
topSiteIconType
(
link
)
]
+
+
;
return
acc
;
}
;
return
topSites
.
reduce
(
countTopSitesTypes
{
custom_screenshot
:
0
screenshot_with_icon
:
0
screenshot
:
0
tippytop
:
0
rich_icon
:
0
no_image
:
0
}
)
;
}
class
_TopSites
extends
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onEditFormClose
=
this
.
onEditFormClose
.
bind
(
this
)
;
this
.
onSearchShortcutsFormClose
=
this
.
onSearchShortcutsFormClose
.
bind
(
this
)
;
}
/
*
*
*
Dispatch
session
statistics
about
the
quality
of
TopSites
icons
and
pinned
count
.
*
/
_dispatchTopSitesStats
(
)
{
const
topSites
=
this
.
_getVisibleTopSites
(
)
.
filter
(
topSite
=
>
topSite
!
=
=
null
&
&
topSite
!
=
=
undefined
)
;
const
topSitesIconsStats
=
countTopSitesIconsTypes
(
topSites
)
;
const
topSitesPinned
=
topSites
.
filter
(
site
=
>
!
!
site
.
isPinned
)
.
length
;
const
searchShortcuts
=
topSites
.
filter
(
site
=
>
!
!
site
.
searchTopSite
)
.
length
;
/
/
Dispatch
telemetry
event
with
the
count
of
TopSites
images
types
.
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
:
{
topsites_icon_stats
:
topSitesIconsStats
topsites_pinned
:
topSitesPinned
topsites_search_shortcuts
:
searchShortcuts
}
}
)
)
;
}
/
*
*
*
Return
the
TopSites
that
are
visible
based
on
prefs
and
window
width
.
*
/
_getVisibleTopSites
(
)
{
/
/
We
hide
2
sites
per
row
when
not
in
the
wide
layout
.
let
sitesPerRow
=
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
;
/
/
break
-
point
-
widest
=
1072px
(
from
_variables
.
scss
)
if
(
!
global
.
matchMedia
(
(
min
-
width
:
1072px
)
)
.
matches
)
{
sitesPerRow
-
=
2
;
}
return
this
.
props
.
TopSites
.
rows
.
slice
(
0
this
.
props
.
TopSitesRows
*
sitesPerRow
)
;
}
componentDidUpdate
(
)
{
this
.
_dispatchTopSitesStats
(
)
;
}
componentDidMount
(
)
{
this
.
_dispatchTopSitesStats
(
)
;
}
onEditFormClose
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
TOP_SITES_EDIT_CLOSE
"
}
)
)
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_CANCEL_EDIT
}
)
;
}
onSearchShortcutsFormClose
(
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_CLOSE
"
}
)
)
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
editForm
showSearchShortcutsForm
}
=
props
.
TopSites
;
const
extraMenuOptions
=
[
"
AddTopSite
"
]
;
if
(
props
.
Prefs
.
values
[
"
improvesearch
.
topSiteSearchShortcuts
"
]
)
{
extraMenuOptions
.
push
(
"
AddSearchShortcut
"
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__
[
"
ComponentPerfTimer
"
]
{
id
:
"
topsites
"
initialized
:
props
.
TopSites
.
initialized
dispatch
:
props
.
dispatch
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__
[
"
CollapsibleSection
"
]
{
className
:
"
top
-
sites
"
icon
:
"
topsites
"
id
:
"
topsites
"
title
:
this
.
props
.
title
|
|
{
id
:
"
newtab
-
section
-
header
-
topsites
"
}
extraMenuOptions
:
extraMenuOptions
showPrefName
:
"
feeds
.
topsites
"
eventSource
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
collapsed
:
props
.
TopSites
.
pref
?
props
.
TopSites
.
pref
.
collapsed
:
undefined
isFixed
:
props
.
isFixed
isFirst
:
props
.
isFirst
isLast
:
props
.
isLast
dispatch
:
props
.
dispatch
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_TopSite__WEBPACK_IMPORTED_MODULE_10__
[
"
TopSiteList
"
]
{
TopSites
:
props
.
TopSites
TopSitesRows
:
props
.
TopSitesRows
dispatch
:
props
.
dispatch
topSiteIconType
:
topSiteIconType
}
)
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
topsites
-
wrapper
"
}
editForm
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
topsites
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__
[
"
ModalOverlayWrapper
"
]
{
unstyled
:
true
onClose
:
this
.
onEditFormClose
innerClassName
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_TopSiteForm__WEBPACK_IMPORTED_MODULE_9__
[
"
TopSiteForm
"
]
_extends
(
{
site
:
props
.
TopSites
.
rows
[
editForm
.
index
]
onClose
:
this
.
onEditFormClose
dispatch
:
this
.
props
.
dispatch
}
editForm
)
)
)
)
showSearchShortcutsForm
&
&
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
"
div
"
{
className
:
"
edit
-
search
-
shortcuts
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__
[
"
ModalOverlayWrapper
"
]
{
unstyled
:
true
onClose
:
this
.
onSearchShortcutsFormClose
innerClassName
:
"
modal
"
}
react__WEBPACK_IMPORTED_MODULE_6___default
.
a
.
createElement
(
_SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__
[
"
SearchShortcutsForm
"
]
{
TopSites
:
props
.
TopSites
onClose
:
this
.
onSearchShortcutsFormClose
dispatch
:
this
.
props
.
dispatch
}
)
)
)
)
)
)
;
}
}
const
TopSites
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_4__
[
"
connect
"
]
)
(
(
state
props
)
=
>
(
{
/
/
For
SPOC
Experiment
only
take
TopSites
from
DiscoveryStream
TopSites
that
takes
in
SPOC
Data
TopSites
:
props
.
TopSitesWithSpoc
|
|
state
.
TopSites
Prefs
:
state
.
Prefs
TopSitesRows
:
state
.
Prefs
.
values
.
topSitesRows
}
)
)
(
_TopSites
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
68
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_SOURCE
"
function
(
)
{
return
TOP_SITES_SOURCE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_CONTEXT_MENU_OPTIONS
"
function
(
)
{
return
TOP_SITES_CONTEXT_MENU_OPTIONS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_SPOC_CONTEXT_MENU_OPTIONS
"
function
(
)
{
return
TOP_SITES_SPOC_CONTEXT_MENU_OPTIONS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
"
function
(
)
{
return
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
MIN_RICH_FAVICON_SIZE
"
function
(
)
{
return
MIN_RICH_FAVICON_SIZE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
MIN_CORNER_FAVICON_SIZE
"
function
(
)
{
return
MIN_CORNER_FAVICON_SIZE
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
TOP_SITES_SOURCE
=
"
TOP_SITES
"
;
const
TOP_SITES_CONTEXT_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
EditTopSite
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
"
DeleteUrl
"
]
;
const
TOP_SITES_SPOC_CONTEXT_MENU_OPTIONS
=
[
"
PinSpocTopSite
"
"
Separator
"
"
OpenInNewWindow
"
"
OpenInPrivateWindow
"
"
Separator
"
"
BlockUrl
"
"
ShowPrivacyInfo
"
]
;
/
/
the
special
top
site
for
search
shortcut
experiment
can
only
have
the
option
to
unpin
(
which
removes
)
the
topsite
const
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
=
[
"
CheckPinTopSite
"
"
Separator
"
"
BlockUrl
"
]
;
/
/
minimum
size
necessary
to
show
a
rich
icon
instead
of
a
screenshot
const
MIN_RICH_FAVICON_SIZE
=
96
;
/
/
minimum
size
necessary
to
show
any
icon
in
the
top
left
corner
with
a
screenshot
const
MIN_CORNER_FAVICON_SIZE
=
16
;
/
*
*
*
/
}
)
/
*
69
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SelectableSearchShortcut
"
function
(
)
{
return
SelectableSearchShortcut
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SearchShortcutsForm
"
function
(
)
{
return
SearchShortcutsForm
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
68
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SelectableSearchShortcut
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
render
(
)
{
const
{
shortcut
selected
}
=
this
.
props
;
const
imageStyle
=
{
backgroundImage
:
url
(
"
{
shortcut
.
tippyTopIcon
}
"
)
}
;
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
outer
search
-
shortcut
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
id
:
shortcut
.
keyword
name
:
shortcut
.
keyword
checked
:
selected
onChange
:
this
.
props
.
onChange
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
shortcut
.
keyword
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
inner
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
null
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
tile
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
rich
-
icon
"
style
:
imageStyle
"
data
-
fallback
"
:
"
"
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
search
-
topsite
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
title
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
span
"
{
dir
:
"
auto
"
}
shortcut
.
keyword
)
)
)
)
)
)
;
}
}
class
SearchShortcutsForm
extends
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleChange
=
this
.
handleChange
.
bind
(
this
)
;
this
.
onCancelButtonClick
=
this
.
onCancelButtonClick
.
bind
(
this
)
;
this
.
onSaveButtonClick
=
this
.
onSaveButtonClick
.
bind
(
this
)
;
/
/
clone
the
shortcuts
and
add
them
to
the
state
so
we
can
add
isSelected
property
const
shortcuts
=
[
]
;
const
{
rows
searchShortcuts
}
=
props
.
TopSites
;
searchShortcuts
.
forEach
(
shortcut
=
>
{
shortcuts
.
push
(
{
.
.
.
shortcut
isSelected
:
!
!
rows
.
find
(
row
=
>
row
&
&
row
.
isPinned
&
&
row
.
searchTopSite
&
&
row
.
label
=
=
=
shortcut
.
keyword
)
}
)
;
}
)
;
this
.
state
=
{
shortcuts
}
;
}
handleChange
(
event
)
{
const
{
target
}
=
event
;
const
{
name
checked
}
=
target
;
this
.
setState
(
prevState
=
>
{
const
shortcuts
=
prevState
.
shortcuts
.
slice
(
)
;
let
shortcut
=
shortcuts
.
find
(
(
{
keyword
}
)
=
>
keyword
=
=
=
name
)
;
shortcut
.
isSelected
=
checked
;
return
{
shortcuts
}
;
}
)
;
}
onCancelButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
this
.
props
.
onClose
(
)
;
}
onSaveButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
/
/
Check
if
there
were
any
changes
and
act
accordingly
const
{
rows
}
=
this
.
props
.
TopSites
;
const
pinQueue
=
[
]
;
const
unpinQueue
=
[
]
;
this
.
state
.
shortcuts
.
forEach
(
shortcut
=
>
{
const
alreadyPinned
=
rows
.
find
(
row
=
>
row
&
&
row
.
isPinned
&
&
row
.
searchTopSite
&
&
row
.
label
=
=
=
shortcut
.
keyword
)
;
if
(
shortcut
.
isSelected
&
&
!
alreadyPinned
)
{
pinQueue
.
push
(
this
.
_searchTopSite
(
shortcut
)
)
;
}
else
if
(
!
shortcut
.
isSelected
&
&
alreadyPinned
)
{
unpinQueue
.
push
(
{
url
:
alreadyPinned
.
url
searchVendor
:
shortcut
.
shortURL
}
)
;
}
}
)
;
/
/
Tell
the
feed
to
do
the
work
.
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
UPDATE_PINNED_SEARCH_SHORTCUTS
data
:
{
addedShortcuts
:
pinQueue
deletedShortcuts
:
unpinQueue
}
}
)
)
;
/
/
Send
the
Telemetry
pings
.
pinQueue
.
forEach
(
shortcut
=
>
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_ADD
"
value
:
{
search_vendor
:
shortcut
.
searchVendor
}
}
)
)
;
}
)
;
unpinQueue
.
forEach
(
shortcut
=
>
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_SOURCE
"
]
event
:
"
SEARCH_EDIT_DELETE
"
value
:
{
search_vendor
:
shortcut
.
searchVendor
}
}
)
)
;
}
)
;
this
.
props
.
onClose
(
)
;
}
_searchTopSite
(
shortcut
)
{
return
{
url
:
shortcut
.
url
searchTopSite
:
true
label
:
shortcut
.
keyword
searchVendor
:
shortcut
.
shortURL
}
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
form
"
{
className
:
"
topsite
-
form
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
shortcuts
-
container
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
grey
-
title
"
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
add
-
search
-
engine
-
header
"
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
div
"
null
this
.
state
.
shortcuts
.
map
(
shortcut
=
>
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
SelectableSearchShortcut
{
key
:
shortcut
.
keyword
shortcut
:
shortcut
selected
:
shortcut
.
isSelected
onChange
:
this
.
handleChange
}
)
)
)
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
cancel
"
type
:
"
button
"
onClick
:
this
.
onCancelButtonClick
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
cancel
-
button
"
}
)
react__WEBPACK_IMPORTED_MODULE_1___default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
type
:
"
submit
"
onClick
:
this
.
onSaveButtonClick
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
save
-
button
"
}
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
70
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteLink
"
function
(
)
{
return
TopSiteLink
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSite
"
function
(
)
{
return
TopSite
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSitePlaceholder
"
function
(
)
{
return
TopSitePlaceholder
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteList
"
function
(
)
{
return
TopSiteList
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
68
)
;
/
*
harmony
import
*
/
var
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
36
)
;
/
*
harmony
import
*
/
var
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
40
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_4___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_4__
)
;
/
*
harmony
import
*
/
var
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
61
)
;
/
*
harmony
import
*
/
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_6__
=
__webpack_require__
(
81
)
;
/
*
harmony
import
*
/
var
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_7__
=
__webpack_require__
(
39
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
SPOC_TYPE
=
"
SPOC
"
;
class
TopSiteLink
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
screenshotImage
:
null
}
;
this
.
onDragEvent
=
this
.
onDragEvent
.
bind
(
this
)
;
this
.
onKeyPress
=
this
.
onKeyPress
.
bind
(
this
)
;
}
/
*
*
Helper
to
determine
whether
the
drop
zone
should
allow
a
drop
.
We
only
allow
*
dropping
top
sites
for
now
.
*
/
_allowDrop
(
e
)
{
return
e
.
dataTransfer
.
types
.
includes
(
"
text
/
topsite
-
index
"
)
;
}
onDragEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
click
"
:
/
/
Stop
any
link
clicks
if
we
started
any
dragging
if
(
this
.
dragged
)
{
event
.
preventDefault
(
)
;
}
break
;
case
"
dragstart
"
:
this
.
dragged
=
true
;
event
.
dataTransfer
.
effectAllowed
=
"
move
"
;
event
.
dataTransfer
.
setData
(
"
text
/
topsite
-
index
"
this
.
props
.
index
)
;
event
.
target
.
blur
(
)
;
this
.
props
.
onDragEvent
(
event
this
.
props
.
index
this
.
props
.
link
this
.
props
.
title
)
;
break
;
case
"
dragend
"
:
this
.
props
.
onDragEvent
(
event
)
;
break
;
case
"
dragenter
"
:
case
"
dragover
"
:
case
"
drop
"
:
if
(
this
.
_allowDrop
(
event
)
)
{
event
.
preventDefault
(
)
;
this
.
props
.
onDragEvent
(
event
this
.
props
.
index
)
;
}
break
;
case
"
mousedown
"
:
/
/
Block
the
scroll
wheel
from
appearing
for
middle
clicks
on
search
top
sites
if
(
event
.
button
=
=
=
1
&
&
this
.
props
.
link
.
searchTopSite
)
{
event
.
preventDefault
(
)
;
}
/
/
Reset
at
the
first
mouse
event
of
a
potential
drag
this
.
dragged
=
false
;
break
;
}
}
/
*
*
*
Helper
to
obtain
the
next
state
based
on
nextProps
and
prevState
.
*
*
NOTE
:
Rename
this
method
to
getDerivedStateFromProps
when
we
update
React
*
to
>
=
16
.
3
.
We
will
need
to
update
tests
as
well
.
We
cannot
rename
this
*
method
to
getDerivedStateFromProps
now
because
there
is
a
mismatch
in
*
the
React
version
that
we
are
using
for
both
testing
and
production
.
*
(
i
.
e
.
react
-
test
-
render
=
>
"
16
.
3
.
2
"
react
=
>
"
16
.
2
.
0
"
)
.
*
*
See
https
:
/
/
github
.
com
/
airbnb
/
enzyme
/
blob
/
master
/
packages
/
enzyme
-
adapter
-
react
-
16
/
package
.
json
#
L43
.
*
/
static
getNextStateFromProps
(
nextProps
prevState
)
{
const
{
screenshot
}
=
nextProps
.
link
;
const
imageInState
=
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
isRemoteImageLocal
(
prevState
.
screenshotImage
screenshot
)
;
if
(
imageInState
)
{
return
null
;
}
/
/
Since
image
was
updated
attempt
to
revoke
old
image
blob
URL
if
it
exists
.
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
prevState
.
screenshotImage
)
;
return
{
screenshotImage
:
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
createLocalImageObject
(
screenshot
)
}
;
}
/
/
NOTE
:
Remove
this
function
when
we
update
React
to
>
=
16
.
3
since
React
will
/
/
call
getDerivedStateFromProps
automatically
.
We
will
also
need
to
/
/
rename
getNextStateFromProps
to
getDerivedStateFromProps
.
componentWillMount
(
)
{
const
nextState
=
TopSiteLink
.
getNextStateFromProps
(
this
.
props
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
/
/
NOTE
:
Remove
this
function
when
we
update
React
to
>
=
16
.
3
since
React
will
/
/
call
getDerivedStateFromProps
automatically
.
We
will
also
need
to
/
/
rename
getNextStateFromProps
to
getDerivedStateFromProps
.
componentWillReceiveProps
(
nextProps
)
{
const
nextState
=
TopSiteLink
.
getNextStateFromProps
(
nextProps
this
.
state
)
;
if
(
nextState
)
{
this
.
setState
(
nextState
)
;
}
}
componentWillUnmount
(
)
{
content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_5__
[
"
ScreenshotUtils
"
]
.
maybeRevokeBlobObjectURL
(
this
.
state
.
screenshotImage
)
;
}
onKeyPress
(
event
)
{
/
/
If
we
have
tabbed
to
a
search
shortcut
top
site
and
we
click
'
enter
'
/
/
we
should
execute
the
onClick
function
.
This
needs
to
be
added
because
/
/
search
top
sites
are
anchor
tags
without
an
href
.
See
bug
1483135
if
(
this
.
props
.
link
.
searchTopSite
&
&
event
.
key
=
=
=
"
Enter
"
)
{
this
.
props
.
onClick
(
event
)
;
}
}
render
(
)
{
const
{
children
className
defaultStyle
isDraggable
link
onClick
title
}
=
this
.
props
;
const
topSiteOuterClassName
=
top
-
site
-
outer
{
className
?
{
className
}
:
"
"
}
{
link
.
isDragged
?
"
dragged
"
:
"
"
}
{
link
.
searchTopSite
?
"
search
-
shortcut
"
:
"
"
}
;
const
{
tippyTopIcon
faviconSize
}
=
link
;
const
[
letterFallback
]
=
title
;
let
imageClassName
;
let
imageStyle
;
let
showSmallFavicon
=
false
;
let
smallFaviconStyle
;
let
smallFaviconFallback
;
let
hasScreenshotImage
=
this
.
state
.
screenshotImage
&
&
this
.
state
.
screenshotImage
.
url
;
if
(
defaultStyle
)
{
/
/
force
no
styles
(
letter
fallback
)
even
if
the
link
has
imagery
smallFaviconFallback
=
false
;
}
else
if
(
link
.
searchTopSite
)
{
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
url
(
{
tippyTopIcon
}
)
}
;
smallFaviconStyle
=
{
backgroundImage
:
url
(
{
tippyTopIcon
}
)
}
;
}
else
if
(
link
.
customScreenshotURL
)
{
/
/
assume
high
quality
custom
screenshot
and
use
rich
icon
styles
and
class
names
/
/
TopSite
spoc
experiment
only
const
spocImgURL
=
link
.
type
=
=
=
SPOC_TYPE
?
link
.
customScreenshotURL
:
"
"
;
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
hasScreenshotImage
?
url
(
{
this
.
state
.
screenshotImage
.
url
}
)
:
url
(
{
spocImgURL
}
)
}
;
}
else
if
(
tippyTopIcon
|
|
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_RICH_FAVICON_SIZE
"
]
)
{
/
/
styles
and
class
names
for
top
sites
with
rich
icons
imageClassName
=
"
top
-
site
-
icon
rich
-
icon
"
;
imageStyle
=
{
backgroundColor
:
link
.
backgroundColor
backgroundImage
:
url
(
{
tippyTopIcon
|
|
link
.
favicon
}
)
}
;
}
else
{
/
/
styles
and
class
names
for
top
sites
with
screenshot
+
small
icon
in
top
left
corner
imageClassName
=
screenshot
{
hasScreenshotImage
?
"
active
"
:
"
"
}
;
imageStyle
=
{
backgroundImage
:
hasScreenshotImage
?
url
(
{
this
.
state
.
screenshotImage
.
url
}
)
:
"
none
"
}
;
/
/
only
show
a
favicon
in
top
left
if
it
'
s
greater
than
16x16
if
(
faviconSize
>
=
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
MIN_CORNER_FAVICON_SIZE
"
]
)
{
showSmallFavicon
=
true
;
smallFaviconStyle
=
{
backgroundImage
:
url
(
{
link
.
favicon
}
)
}
;
}
else
if
(
hasScreenshotImage
)
{
/
/
Don
'
t
show
a
small
favicon
if
there
is
no
screenshot
because
that
/
/
would
result
in
two
fallback
icons
showSmallFavicon
=
true
;
smallFaviconFallback
=
true
;
}
}
let
draggableProps
=
{
}
;
if
(
isDraggable
)
{
draggableProps
=
{
onClick
:
this
.
onDragEvent
onDragEnd
:
this
.
onDragEvent
onDragStart
:
this
.
onDragEvent
onMouseDown
:
this
.
onDragEvent
}
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
li
"
_extends
(
{
className
:
topSiteOuterClassName
onDrop
:
this
.
onDragEvent
onDragOver
:
this
.
onDragEvent
onDragEnter
:
this
.
onDragEvent
onDragLeave
:
this
.
onDragEvent
}
draggableProps
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
inner
"
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
a
"
{
className
:
"
top
-
site
-
button
"
href
:
link
.
searchTopSite
?
undefined
:
link
.
url
tabIndex
:
"
0
"
onKeyPress
:
this
.
onKeyPress
onClick
:
onClick
draggable
:
true
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
tile
"
"
aria
-
hidden
"
:
true
"
data
-
fallback
"
:
letterFallback
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
imageClassName
style
:
imageStyle
}
)
link
.
searchTopSite
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
search
-
topsite
"
}
)
showSmallFavicon
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
top
-
site
-
icon
default
-
icon
"
"
data
-
fallback
"
:
smallFaviconFallback
&
&
letterFallback
style
:
smallFaviconStyle
}
)
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
title
{
link
.
isPinned
?
"
pinned
"
:
"
"
}
}
link
.
isPinned
&
&
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
{
className
:
"
icon
icon
-
pin
-
small
"
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
dir
:
"
auto
"
}
title
)
)
link
.
type
=
=
=
SPOC_TYPE
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
span
"
{
className
:
"
top
-
site
-
spoc
-
label
"
}
"
Sponsored
"
)
:
null
)
children
link
.
type
=
=
=
SPOC_TYPE
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
_DiscoveryStreamImpressionStats_ImpressionStats__WEBPACK_IMPORTED_MODULE_3__
[
"
ImpressionStats
"
]
{
flightId
:
link
.
flightId
rows
:
[
{
id
:
link
.
id
pos
:
link
.
pos
shim
:
link
.
shim
&
&
link
.
shim
.
impression
}
]
dispatch
:
this
.
props
.
dispatch
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
}
)
:
null
)
)
;
}
}
TopSiteLink
.
defaultProps
=
{
title
:
"
"
link
:
{
}
isDraggable
:
true
}
;
class
TopSite
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
showContextMenu
:
false
}
;
this
.
onLinkClick
=
this
.
onLinkClick
.
bind
(
this
)
;
this
.
onMenuUpdate
=
this
.
onMenuUpdate
.
bind
(
this
)
;
}
/
*
*
*
Report
to
telemetry
additional
information
about
the
item
.
*
/
_getTelemetryInfo
(
)
{
const
value
=
{
icon_type
:
this
.
props
.
link
.
iconType
}
;
/
/
Filter
out
"
not_pinned
"
type
for
being
the
default
if
(
this
.
props
.
link
.
isPinned
)
{
value
.
card_type
=
"
pinned
"
;
}
if
(
this
.
props
.
link
.
searchTopSite
)
{
/
/
Set
the
card_type
as
"
search
"
regardless
of
its
pinning
status
value
.
card_type
=
"
search
"
;
value
.
search_vendor
=
this
.
props
.
link
.
hostname
;
}
if
(
this
.
props
.
link
.
type
=
=
=
SPOC_TYPE
)
{
value
.
card_type
=
"
spoc
"
;
}
return
{
value
}
;
}
userEvent
(
event
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
Object
.
assign
(
{
event
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
action_position
:
this
.
props
.
index
}
this
.
_getTelemetryInfo
(
)
)
)
)
;
}
onLinkClick
(
event
)
{
this
.
userEvent
(
"
CLICK
"
)
;
/
/
Specially
handle
a
top
site
link
click
for
"
typed
"
frecency
bonus
as
/
/
specified
as
a
property
on
the
link
.
event
.
preventDefault
(
)
;
const
{
altKey
button
ctrlKey
metaKey
shiftKey
}
=
event
;
if
(
!
this
.
props
.
link
.
searchTopSite
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
OPEN_LINK
data
:
Object
.
assign
(
this
.
props
.
link
{
event
:
{
altKey
button
ctrlKey
metaKey
shiftKey
}
}
)
}
)
)
;
/
/
Fire
off
a
spoc
specific
impression
.
if
(
this
.
props
.
link
.
type
=
=
=
SPOC_TYPE
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
ImpressionStats
(
{
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
click
:
0
tiles
:
[
{
id
:
this
.
props
.
link
.
id
pos
:
this
.
props
.
link
.
pos
shim
:
this
.
props
.
link
.
shim
&
&
this
.
props
.
link
.
shim
.
click
}
]
}
)
)
;
}
}
else
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
FILL_SEARCH_TERM
data
:
{
label
:
this
.
props
.
link
.
label
}
}
)
)
;
}
}
onMenuUpdate
(
isOpen
)
{
if
(
isOpen
)
{
this
.
props
.
onActivate
(
this
.
props
.
index
)
;
}
else
{
this
.
props
.
onActivate
(
)
;
}
}
render
(
)
{
const
{
props
}
=
this
;
const
{
link
}
=
props
;
const
isContextMenuOpen
=
props
.
activeIndex
=
=
=
props
.
index
;
const
title
=
link
.
label
|
|
link
.
hostname
;
const
menuOptions
=
link
.
type
!
=
=
SPOC_TYPE
?
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_CONTEXT_MENU_OPTIONS
"
]
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SPOC_CONTEXT_MENU_OPTIONS
"
]
;
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSiteLink
_extends
(
{
}
props
{
onClick
:
this
.
onLinkClick
onDragEvent
:
this
.
props
.
onDragEvent
className
:
{
props
.
className
|
|
"
"
}
{
isContextMenuOpen
?
"
active
"
:
"
"
}
title
:
title
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_7__
[
"
ContextMenuButton
"
]
{
tooltip
:
"
newtab
-
menu
-
content
-
tooltip
"
tooltipArgs
:
{
title
}
onUpdate
:
this
.
onMenuUpdate
}
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_2__
[
"
LinkMenu
"
]
{
dispatch
:
props
.
dispatch
index
:
props
.
index
onUpdate
:
this
.
onMenuUpdate
options
:
link
.
searchTopSite
?
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS
"
]
:
menuOptions
site
:
link
shouldSendImpressionStats
:
link
.
type
=
=
=
SPOC_TYPE
siteInfo
:
this
.
_getTelemetryInfo
(
)
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
}
)
)
)
)
;
}
}
TopSite
.
defaultProps
=
{
link
:
{
}
onActivate
(
)
{
}
}
;
class
TopSitePlaceholder
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onEditButtonClick
=
this
.
onEditButtonClick
.
bind
(
this
)
;
}
onEditButtonClick
(
)
{
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
data
:
{
index
:
this
.
props
.
index
}
}
)
;
}
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSiteLink
_extends
(
{
}
this
.
props
{
className
:
placeholder
{
this
.
props
.
className
|
|
"
"
}
isDraggable
:
false
}
)
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
button
"
{
"
aria
-
haspopup
"
:
"
true
"
className
:
"
context
-
menu
-
button
edit
-
button
icon
"
"
data
-
l10n
-
id
"
:
"
newtab
-
menu
-
topsites
-
placeholder
-
tooltip
"
onClick
:
this
.
onEditButtonClick
}
)
)
;
}
}
class
TopSiteList
extends
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
PureComponent
{
static
get
DEFAULT_STATE
(
)
{
return
{
activeIndex
:
null
draggedIndex
:
null
draggedSite
:
null
draggedTitle
:
null
topSitesPreview
:
null
}
;
}
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
TopSiteList
.
DEFAULT_STATE
;
this
.
onDragEvent
=
this
.
onDragEvent
.
bind
(
this
)
;
this
.
onActivate
=
this
.
onActivate
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
this
.
state
.
draggedSite
)
{
const
prevTopSites
=
this
.
props
.
TopSites
&
&
this
.
props
.
TopSites
.
rows
;
const
newTopSites
=
nextProps
.
TopSites
&
&
nextProps
.
TopSites
.
rows
;
if
(
prevTopSites
&
&
prevTopSites
[
this
.
state
.
draggedIndex
]
&
&
prevTopSites
[
this
.
state
.
draggedIndex
]
.
url
=
=
=
this
.
state
.
draggedSite
.
url
&
&
(
!
newTopSites
[
this
.
state
.
draggedIndex
]
|
|
newTopSites
[
this
.
state
.
draggedIndex
]
.
url
!
=
=
this
.
state
.
draggedSite
.
url
)
)
{
/
/
We
got
the
new
order
from
the
redux
store
via
props
.
We
can
clear
state
now
.
this
.
setState
(
TopSiteList
.
DEFAULT_STATE
)
;
}
}
}
userEvent
(
event
index
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
source
:
_TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__
[
"
TOP_SITES_SOURCE
"
]
action_position
:
index
}
)
)
;
}
onDragEvent
(
event
index
link
title
)
{
switch
(
event
.
type
)
{
case
"
dragstart
"
:
this
.
dropped
=
false
;
this
.
setState
(
{
draggedIndex
:
index
draggedSite
:
link
draggedTitle
:
title
activeIndex
:
null
}
)
;
this
.
userEvent
(
"
DRAG
"
index
)
;
break
;
case
"
dragend
"
:
if
(
!
this
.
dropped
)
{
/
/
If
there
was
no
drop
event
reset
the
state
to
the
default
.
this
.
setState
(
TopSiteList
.
DEFAULT_STATE
)
;
}
break
;
case
"
dragenter
"
:
if
(
index
=
=
=
this
.
state
.
draggedIndex
)
{
this
.
setState
(
{
topSitesPreview
:
null
}
)
;
}
else
{
this
.
setState
(
{
topSitesPreview
:
this
.
_makeTopSitesPreview
(
index
)
}
)
;
}
break
;
case
"
drop
"
:
if
(
index
!
=
=
this
.
state
.
draggedIndex
)
{
this
.
dropped
=
true
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
TOP_SITES_INSERT
data
:
{
site
:
{
url
:
this
.
state
.
draggedSite
.
url
label
:
this
.
state
.
draggedTitle
customScreenshotURL
:
this
.
state
.
draggedSite
.
customScreenshotURL
/
/
Only
if
the
search
topsites
experiment
is
enabled
.
.
.
(
this
.
state
.
draggedSite
.
searchTopSite
&
&
{
searchTopSite
:
true
}
)
}
index
draggedFromIndex
:
this
.
state
.
draggedIndex
}
}
)
)
;
this
.
userEvent
(
"
DROP
"
index
)
;
}
break
;
}
}
_getTopSites
(
)
{
/
/
Make
a
copy
of
the
sites
to
truncate
or
extend
to
desired
length
let
topSites
=
this
.
props
.
TopSites
.
rows
.
slice
(
)
;
topSites
.
length
=
this
.
props
.
TopSitesRows
*
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_6__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
;
return
topSites
;
}
/
*
*
*
Make
a
preview
of
the
topsites
that
will
be
the
result
of
dropping
the
currently
*
dragged
site
at
the
specified
index
.
*
/
_makeTopSitesPreview
(
index
)
{
const
topSites
=
this
.
_getTopSites
(
)
;
topSites
[
this
.
state
.
draggedIndex
]
=
null
;
const
pinnedOnly
=
topSites
.
map
(
site
=
>
site
&
&
site
.
isPinned
?
site
:
null
)
;
const
unpinned
=
topSites
.
filter
(
site
=
>
site
&
&
!
site
.
isPinned
)
;
const
siteToInsert
=
Object
.
assign
(
{
}
this
.
state
.
draggedSite
{
isPinned
:
true
isDragged
:
true
}
)
;
if
(
!
pinnedOnly
[
index
]
)
{
pinnedOnly
[
index
]
=
siteToInsert
;
}
else
{
/
/
Find
the
hole
to
shift
the
pinned
site
(
s
)
towards
.
We
shift
towards
the
/
/
hole
left
by
the
site
being
dragged
.
let
holeIndex
=
index
;
const
indexStep
=
index
>
this
.
state
.
draggedIndex
?
-
1
:
1
;
while
(
pinnedOnly
[
holeIndex
]
)
{
holeIndex
+
=
indexStep
;
}
/
/
Shift
towards
the
hole
.
const
shiftingStep
=
index
>
this
.
state
.
draggedIndex
?
1
:
-
1
;
while
(
holeIndex
!
=
=
index
)
{
const
nextIndex
=
holeIndex
+
shiftingStep
;
pinnedOnly
[
holeIndex
]
=
pinnedOnly
[
nextIndex
]
;
holeIndex
=
nextIndex
;
}
pinnedOnly
[
index
]
=
siteToInsert
;
}
/
/
Fill
in
the
remaining
holes
with
unpinned
sites
.
const
preview
=
pinnedOnly
;
for
(
let
i
=
0
;
i
<
preview
.
length
;
i
+
+
)
{
if
(
!
preview
[
i
]
)
{
preview
[
i
]
=
unpinned
.
shift
(
)
|
|
null
;
}
}
return
preview
;
}
onActivate
(
index
)
{
this
.
setState
(
{
activeIndex
:
index
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
topSites
=
this
.
state
.
topSitesPreview
|
|
this
.
_getTopSites
(
)
;
const
topSitesUI
=
[
]
;
const
commonProps
=
{
onDragEvent
:
this
.
onDragEvent
dispatch
:
props
.
dispatch
}
;
/
/
We
assign
a
key
to
each
placeholder
slot
.
We
need
it
to
be
independent
/
/
of
the
slot
index
(
i
below
)
so
that
the
keys
used
stay
the
same
during
/
/
drag
and
drop
reordering
and
the
underlying
DOM
nodes
are
reused
.
/
/
This
mostly
(
only
?
)
affects
linux
so
be
sure
to
test
on
linux
before
changing
.
let
holeIndex
=
0
;
/
/
On
narrow
viewports
we
only
show
6
sites
per
row
.
We
'
ll
mark
the
rest
as
/
/
.
hide
-
for
-
narrow
to
hide
in
CSS
via
media
query
.
const
maxNarrowVisibleIndex
=
props
.
TopSitesRows
*
6
;
for
(
let
i
=
0
l
=
topSites
.
length
;
i
<
l
;
i
+
+
)
{
const
link
=
topSites
[
i
]
&
&
Object
.
assign
(
{
}
topSites
[
i
]
{
iconType
:
this
.
props
.
topSiteIconType
(
topSites
[
i
]
)
}
)
;
const
slotProps
=
{
key
:
link
?
link
.
url
:
holeIndex
+
+
index
:
i
}
;
if
(
i
>
=
maxNarrowVisibleIndex
)
{
slotProps
.
className
=
"
hide
-
for
-
narrow
"
;
}
topSitesUI
.
push
(
!
link
?
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSitePlaceholder
_extends
(
{
}
slotProps
commonProps
)
)
:
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
TopSite
_extends
(
{
link
:
link
activeIndex
:
this
.
state
.
activeIndex
onActivate
:
this
.
onActivate
}
slotProps
commonProps
)
)
)
;
}
return
react__WEBPACK_IMPORTED_MODULE_4___default
.
a
.
createElement
(
"
ul
"
{
className
:
top
-
sites
-
list
{
this
.
state
.
draggedSite
?
"
dnd
-
active
"
:
"
"
}
}
topSitesUI
)
;
}
}
/
*
*
*
/
}
)
/
*
71
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
HorizontalRule
"
function
(
)
{
return
HorizontalRule
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
HorizontalRule
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
hr
"
{
className
:
"
ds
-
hr
"
}
)
;
}
}
/
*
*
*
/
}
)
/
*
72
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Topic
"
function
(
)
{
return
Topic
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Navigation
"
function
(
)
{
return
Navigation
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
41
)
;
/
*
harmony
import
*
/
var
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
49
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Topic
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
url
name
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
li
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
_SafeAnchor_SafeAnchor__WEBPACK_IMPORTED_MODULE_1__
[
"
SafeAnchor
"
]
{
key
:
name
url
:
url
}
name
)
)
;
}
}
class
Navigation
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
links
}
=
this
.
props
|
|
[
]
;
const
{
alignment
}
=
this
.
props
|
|
"
centered
"
;
const
header
=
this
.
props
.
header
|
|
{
}
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
ds
-
navigation
ds
-
navigation
-
{
alignment
}
}
header
.
title
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__
[
"
FluentOrText
"
]
{
message
:
header
.
title
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
header
"
}
)
)
:
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
null
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
ul
"
null
links
&
&
links
.
map
(
t
=
>
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
Topic
{
key
:
t
.
name
url
:
t
.
url
name
:
t
.
name
}
)
)
)
)
)
;
}
}
/
*
*
*
/
}
)
/
*
73
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SectionTitle
"
function
(
)
{
return
SectionTitle
;
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SectionTitle
extends
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
PureComponent
{
render
(
)
{
const
{
header
:
{
title
subtitle
}
}
=
this
.
props
;
return
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
ds
-
section
-
title
"
}
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
title
"
}
title
)
subtitle
?
react__WEBPACK_IMPORTED_MODULE_0___default
.
a
.
createElement
(
"
div
"
{
className
:
"
subtitle
"
}
subtitle
)
:
null
)
;
}
}
/
*
*
*
/
}
)
/
*
74
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
selectLayoutRender
"
function
(
)
{
return
selectLayoutRender
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
selectLayoutRender
=
(
{
state
=
{
}
prefs
=
{
}
rollCache
=
[
]
lang
=
"
"
}
)
=
>
{
const
{
layout
feeds
spocs
}
=
state
;
let
spocIndexMap
=
{
}
;
let
bufferRollCache
=
[
]
;
/
/
Records
the
chosen
and
unchosen
spocs
by
the
probability
selection
.
let
chosenSpocs
=
new
Set
(
)
;
let
unchosenSpocs
=
new
Set
(
)
;
function
rollForSpocs
(
data
spocsConfig
spocsData
placementName
)
{
if
(
!
spocIndexMap
[
placementName
]
&
&
spocIndexMap
[
placementName
]
!
=
=
0
)
{
spocIndexMap
[
placementName
]
=
0
;
}
const
results
=
[
.
.
.
data
]
;
for
(
let
position
of
spocsConfig
.
positions
)
{
const
spoc
=
spocsData
[
spocIndexMap
[
placementName
]
]
;
if
(
!
spoc
)
{
break
;
}
/
/
Cache
random
number
for
a
position
let
rickRoll
;
if
(
!
rollCache
.
length
)
{
rickRoll
=
Math
.
random
(
)
;
bufferRollCache
.
push
(
rickRoll
)
;
}
else
{
rickRoll
=
rollCache
.
shift
(
)
;
bufferRollCache
.
push
(
rickRoll
)
;
}
if
(
rickRoll
<
=
spocsConfig
.
probability
)
{
spocIndexMap
[
placementName
]
+
+
;
if
(
!
spocs
.
blocked
.
includes
(
spoc
.
url
)
)
{
results
.
splice
(
position
.
index
0
spoc
)
;
chosenSpocs
.
add
(
spoc
)
;
}
}
else
{
unchosenSpocs
.
add
(
spoc
)
;
}
}
return
results
;
}
const
positions
=
{
}
;
const
DS_COMPONENTS
=
[
"
Message
"
"
TextPromo
"
"
SectionTitle
"
"
Navigation
"
"
CardGrid
"
"
Hero
"
"
HorizontalRule
"
"
List
"
]
;
const
filterArray
=
[
]
;
if
(
!
prefs
[
"
feeds
.
topsites
"
]
)
{
filterArray
.
push
(
"
TopSites
"
)
;
}
if
(
!
lang
.
startsWith
(
"
en
-
"
)
)
{
filterArray
.
push
(
"
Navigation
"
)
;
}
if
(
!
prefs
[
"
feeds
.
section
.
topstories
"
]
)
{
filterArray
.
push
(
.
.
.
DS_COMPONENTS
)
;
}
const
placeholderComponent
=
component
=
>
{
if
(
!
component
.
feed
)
{
/
/
TODO
we
now
need
a
placeholder
for
topsites
and
textPromo
.
return
{
.
.
.
component
data
:
{
spocs
:
[
]
}
}
;
}
const
data
=
{
recommendations
:
[
]
}
;
let
items
=
0
;
if
(
component
.
properties
&
&
component
.
properties
.
items
)
{
items
=
component
.
properties
.
items
;
}
for
(
let
i
=
0
;
i
<
items
;
i
+
+
)
{
data
.
recommendations
.
push
(
{
placeholder
:
true
}
)
;
}
return
{
.
.
.
component
data
}
;
}
;
/
/
TODO
update
devtools
to
show
placements
const
handleSpocs
=
(
data
component
)
=
>
{
let
result
=
[
.
.
.
data
]
;
/
/
Do
we
ever
expect
to
possibly
have
a
spoc
.
if
(
component
.
spocs
&
&
component
.
spocs
.
positions
&
&
component
.
spocs
.
positions
.
length
)
{
const
placement
=
component
.
placement
|
|
{
}
;
const
placementName
=
placement
.
name
|
|
"
spocs
"
;
const
spocsData
=
spocs
.
data
[
placementName
]
;
/
/
We
expect
a
spoc
spocs
are
loaded
and
the
server
returned
spocs
.
if
(
spocs
.
loaded
&
&
spocsData
&
&
spocsData
.
length
)
{
result
=
rollForSpocs
(
result
component
.
spocs
spocsData
placementName
)
;
}
}
return
result
;
}
;
const
handleComponent
=
component
=
>
{
return
{
.
.
.
component
data
:
{
spocs
:
handleSpocs
(
[
]
component
)
}
}
;
}
;
const
handleComponentWithFeed
=
component
=
>
{
positions
[
component
.
type
]
=
positions
[
component
.
type
]
|
|
0
;
let
data
=
{
recommendations
:
[
]
}
;
const
feed
=
feeds
.
data
[
component
.
feed
.
url
]
;
if
(
feed
&
&
feed
.
data
)
{
data
=
{
.
.
.
feed
.
data
recommendations
:
[
.
.
.
(
feed
.
data
.
recommendations
|
|
[
]
)
]
}
;
}
if
(
component
&
&
component
.
properties
&
&
component
.
properties
.
offset
)
{
data
=
{
.
.
.
data
recommendations
:
data
.
recommendations
.
slice
(
component
.
properties
.
offset
)
}
;
}
data
=
{
.
.
.
data
recommendations
:
handleSpocs
(
data
.
recommendations
component
)
}
;
let
items
=
0
;
if
(
component
.
properties
&
&
component
.
properties
.
items
)
{
items
=
Math
.
min
(
component
.
properties
.
items
data
.
recommendations
.
length
)
;
}
/
/
loop
through
a
component
items
/
/
Store
the
items
position
sequentially
for
multiple
components
of
the
same
type
.
/
/
Example
:
A
second
card
grid
starts
pos
offset
from
the
last
card
grid
.
for
(
let
i
=
0
;
i
<
items
;
i
+
+
)
{
data
.
recommendations
[
i
]
=
{
.
.
.
data
.
recommendations
[
i
]
pos
:
positions
[
component
.
type
]
+
+
}
;
}
return
{
.
.
.
component
data
}
;
}
;
const
renderLayout
=
(
)
=
>
{
const
renderedLayoutArray
=
[
]
;
for
(
const
row
of
layout
.
filter
(
r
=
>
r
.
components
.
filter
(
c
=
>
!
filterArray
.
includes
(
c
.
type
)
)
.
length
)
)
{
let
components
=
[
]
;
renderedLayoutArray
.
push
(
{
.
.
.
row
components
}
)
;
for
(
const
component
of
row
.
components
.
filter
(
c
=
>
!
filterArray
.
includes
(
c
.
type
)
)
)
{
const
spocsConfig
=
component
.
spocs
;
if
(
spocsConfig
|
|
component
.
feed
)
{
/
/
TODO
make
sure
this
still
works
for
different
loading
cases
.
if
(
component
.
feed
&
&
!
feeds
.
data
[
component
.
feed
.
url
]
|
|
spocsConfig
&
&
spocsConfig
.
positions
&
&
spocsConfig
.
positions
.
length
&
&
!
spocs
.
loaded
)
{
components
.
push
(
placeholderComponent
(
component
)
)
;
return
renderedLayoutArray
;
}
if
(
component
.
feed
)
{
components
.
push
(
handleComponentWithFeed
(
component
)
)
;
}
else
{
components
.
push
(
handleComponent
(
component
)
)
;
}
}
else
{
components
.
push
(
component
)
;
}
}
}
return
renderedLayoutArray
;
}
;
const
layoutRender
=
renderLayout
(
)
;
/
/
If
empty
fill
rollCache
with
random
probability
values
from
bufferRollCache
if
(
!
rollCache
.
length
)
{
rollCache
.
push
(
.
.
.
bufferRollCache
)
;
}
/
/
Generate
the
payload
for
the
SPOCS
Fill
ping
.
Note
that
a
SPOC
could
be
rejected
/
/
by
the
probability_selection
first
then
gets
chosen
for
the
next
position
.
For
/
/
all
other
SPOCS
that
never
went
through
the
probabilistic
selection
its
reason
will
/
/
be
"
out_of_position
"
.
let
spocsFill
=
[
]
;
if
(
spocs
.
loaded
&
&
feeds
.
loaded
&
&
spocs
.
data
.
spocs
)
{
const
chosenSpocsFill
=
[
.
.
.
chosenSpocs
]
.
map
(
spoc
=
>
(
{
id
:
spoc
.
id
reason
:
"
n
/
a
"
displayed
:
1
full_recalc
:
0
}
)
)
;
const
unchosenSpocsFill
=
[
.
.
.
unchosenSpocs
]
.
filter
(
spoc
=
>
!
chosenSpocs
.
has
(
spoc
)
)
.
map
(
spoc
=
>
(
{
id
:
spoc
.
id
reason
:
"
probability_selection
"
displayed
:
0
full_recalc
:
0
}
)
)
;
const
outOfPositionSpocsFill
=
spocs
.
data
.
spocs
.
slice
(
spocIndexMap
.
spocs
)
.
filter
(
spoc
=
>
!
unchosenSpocs
.
has
(
spoc
)
)
.
map
(
spoc
=
>
(
{
id
:
spoc
.
id
reason
:
"
out_of_position
"
displayed
:
0
full_recalc
:
0
}
)
)
;
spocsFill
=
[
.
.
.
chosenSpocsFill
.
.
.
unchosenSpocsFill
.
.
.
outOfPositionSpocsFill
]
;
}
return
{
spocsFill
layoutRender
}
;
}
;
/
*
*
*
/
}
)
/
*
75
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_TopSites
"
function
(
)
{
return
_TopSites
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSites
"
function
(
)
{
return
TopSites
;
}
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
harmony
import
*
/
var
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
67
)
;
/
*
harmony
import
*
/
var
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
81
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
_TopSites
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
/
/
Find
a
SPOC
that
doesn
'
t
already
exist
in
User
'
s
TopSites
getFirstAvailableSpoc
(
topSites
data
)
{
const
{
spocs
}
=
data
;
if
(
!
spocs
|
|
spocs
.
length
=
=
=
0
)
{
return
null
;
}
const
userTopSites
=
new
Set
(
topSites
.
map
(
topSite
=
>
topSite
&
&
topSite
.
url
)
)
;
/
/
We
"
clean
urls
"
with
http
in
TopSiteForm
.
jsx
/
/
Spoc
domains
are
in
the
format
'
sponsorname
.
com
'
return
spocs
.
find
(
spoc
=
>
!
userTopSites
.
has
(
spoc
.
url
)
&
&
!
userTopSites
.
has
(
http
:
/
/
{
spoc
.
domain
}
)
&
&
!
userTopSites
.
has
(
https
:
/
/
{
spoc
.
domain
}
)
&
&
!
userTopSites
.
has
(
http
:
/
/
www
.
{
spoc
.
domain
}
)
&
&
!
userTopSites
.
has
(
https
:
/
/
www
.
{
spoc
.
domain
}
)
)
;
}
/
/
Find
the
first
empty
or
unpinned
index
we
can
place
the
SPOC
in
.
/
/
Return
-
1
if
no
available
index
and
we
should
push
it
at
the
end
.
getFirstAvailableIndex
(
topSites
promoAlignment
)
{
if
(
promoAlignment
=
=
=
"
left
"
)
{
return
topSites
.
findIndex
(
topSite
=
>
!
topSite
|
|
!
topSite
.
isPinned
)
;
}
/
/
The
row
isn
'
t
full
so
we
can
push
it
to
the
end
of
the
row
.
if
(
topSites
.
length
<
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
)
{
return
-
1
;
}
/
/
If
the
row
is
full
we
can
check
the
row
first
for
unpinned
topsites
to
replace
.
/
/
Else
we
can
check
after
the
row
.
This
behavior
is
how
unpinned
topsites
move
while
drag
and
drop
.
let
endOfRow
=
common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_2__
[
"
TOP_SITES_MAX_SITES_PER_ROW
"
]
-
1
;
for
(
let
i
=
endOfRow
;
i
>
=
0
;
i
-
-
)
{
if
(
!
topSites
[
i
]
|
|
!
topSites
[
i
]
.
isPinned
)
{
return
i
;
}
}
for
(
let
i
=
endOfRow
+
1
;
i
<
topSites
.
length
;
i
+
+
)
{
if
(
!
topSites
[
i
]
|
|
!
topSites
[
i
]
.
isPinned
)
{
return
i
;
}
}
return
-
1
;
}
insertSpocContent
(
TopSites
data
promoAlignment
)
{
if
(
!
TopSites
.
rows
|
|
TopSites
.
rows
.
length
=
=
=
0
|
|
!
data
.
spocs
|
|
data
.
spocs
.
length
=
=
=
0
)
{
return
null
;
}
let
topSites
=
[
.
.
.
TopSites
.
rows
]
;
const
topSiteSpoc
=
this
.
getFirstAvailableSpoc
(
topSites
data
)
;
if
(
!
topSiteSpoc
)
{
return
null
;
}
const
link
=
{
customScreenshotURL
:
topSiteSpoc
.
image_src
type
:
"
SPOC
"
label
:
topSiteSpoc
.
sponsor
title
:
topSiteSpoc
.
sponsor
url
:
topSiteSpoc
.
url
flightId
:
topSiteSpoc
.
flight_id
id
:
topSiteSpoc
.
id
guid
:
topSiteSpoc
.
id
shim
:
topSiteSpoc
.
shim
/
/
For
now
we
are
assuming
position
based
on
intended
position
.
/
/
Actual
position
can
shift
based
on
other
content
.
/
/
We
also
hard
code
left
and
right
to
be
0
and
7
.
/
/
We
send
the
intended
postion
in
the
ping
.
pos
:
promoAlignment
=
=
=
"
left
"
?
0
:
7
}
;
const
firstAvailableIndex
=
this
.
getFirstAvailableIndex
(
topSites
promoAlignment
)
;
if
(
firstAvailableIndex
=
=
=
-
1
)
{
topSites
.
push
(
link
)
;
}
else
{
/
/
Normal
insertion
will
not
work
since
pinned
topsites
are
in
their
correct
index
already
/
/
Similar
logic
is
done
to
handle
drag
and
drop
with
pinned
topsites
in
TopSite
.
jsx
let
shiftedTopSite
=
topSites
[
firstAvailableIndex
]
;
let
index
=
firstAvailableIndex
+
1
;
/
/
Shift
unpinned
topsites
to
the
right
by
finding
the
next
unpinned
topsite
to
replace
while
(
shiftedTopSite
)
{
if
(
index
=
=
=
topSites
.
length
)
{
topSites
.
push
(
shiftedTopSite
)
;
shiftedTopSite
=
null
;
}
else
if
(
topSites
[
index
]
&
&
topSites
[
index
]
.
isPinned
)
{
index
+
=
1
;
}
else
{
const
nextTopSite
=
topSites
[
index
]
;
topSites
[
index
]
=
shiftedTopSite
;
shiftedTopSite
=
nextTopSite
;
index
+
=
1
;
}
}
topSites
[
firstAvailableIndex
]
=
link
;
}
return
{
.
.
.
TopSites
rows
:
topSites
}
;
}
render
(
)
{
const
{
header
=
{
}
data
promoAlignment
TopSites
}
=
this
.
props
;
const
TopSitesWithSpoc
=
TopSites
&
&
data
&
&
promoAlignment
?
this
.
insertSpocContent
(
TopSites
data
promoAlignment
)
:
null
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
ds
-
top
-
sites
{
TopSitesWithSpoc
?
"
top
-
sites
-
spoc
"
:
"
"
}
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_1__
[
"
TopSites
"
]
{
isFixed
:
true
title
:
header
.
title
TopSitesWithSpoc
:
TopSitesWithSpoc
}
)
)
;
}
}
const
TopSites
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_0__
[
"
connect
"
]
)
(
state
=
>
(
{
TopSites
:
state
.
TopSites
}
)
)
(
_TopSites
)
;
/
*
*
*
/
}
)
/
*
76
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
_Search
"
function
(
)
{
return
_Search
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Search
"
function
(
)
{
return
Search
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
28
)
;
/
*
harmony
import
*
/
var
react_redux__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
11
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
9
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_3___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_3__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
globals
ContentSearchUIController
*
/
class
_Search
extends
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onSearchClick
=
this
.
onSearchClick
.
bind
(
this
)
;
this
.
onSearchHandoffClick
=
this
.
onSearchHandoffClick
.
bind
(
this
)
;
this
.
onSearchHandoffPaste
=
this
.
onSearchHandoffPaste
.
bind
(
this
)
;
this
.
onSearchHandoffDrop
=
this
.
onSearchHandoffDrop
.
bind
(
this
)
;
this
.
onInputMount
=
this
.
onInputMount
.
bind
(
this
)
;
this
.
onSearchHandoffButtonMount
=
this
.
onSearchHandoffButtonMount
.
bind
(
this
)
;
}
handleEvent
(
event
)
{
/
/
Also
track
search
events
with
our
own
telemetry
if
(
event
.
detail
.
type
=
=
=
"
Search
"
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SEARCH
"
}
)
)
;
}
}
onSearchClick
(
event
)
{
window
.
gContentSearchController
.
search
(
event
)
;
}
doSearchHandoff
(
text
)
{
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
OnlyToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
HANDOFF_SEARCH_TO_AWESOMEBAR
data
:
{
text
}
}
)
)
;
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
FAKE_FOCUS_SEARCH
}
)
;
this
.
props
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
UserEvent
(
{
event
:
"
SEARCH_HANDOFF
"
}
)
)
;
if
(
text
)
{
this
.
props
.
dispatch
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
HIDE_SEARCH
}
)
;
}
}
onSearchHandoffClick
(
event
)
{
/
/
When
search
hand
-
off
is
enabled
we
render
a
big
button
that
is
styled
to
/
/
look
like
a
search
textbox
.
If
the
button
is
clicked
we
style
/
/
the
button
as
if
it
was
a
focused
search
box
and
show
a
fake
cursor
but
/
/
really
focus
the
awesomebar
without
the
focus
styles
(
"
hidden
focus
"
)
.
event
.
preventDefault
(
)
;
this
.
doSearchHandoff
(
)
;
}
onSearchHandoffPaste
(
event
)
{
event
.
preventDefault
(
)
;
this
.
doSearchHandoff
(
event
.
clipboardData
.
getData
(
"
Text
"
)
)
;
}
onSearchHandoffDrop
(
event
)
{
event
.
preventDefault
(
)
;
let
text
=
event
.
dataTransfer
.
getData
(
"
text
"
)
;
if
(
text
)
{
this
.
doSearchHandoff
(
text
)
;
}
}
componentWillUnmount
(
)
{
delete
window
.
gContentSearchController
;
}
onInputMount
(
input
)
{
if
(
input
)
{
/
/
The
"
healthReportKey
"
and
needs
to
be
"
newtab
"
or
"
abouthome
"
so
that
/
/
BrowserUsageTelemetry
.
jsm
knows
to
handle
events
with
this
name
and
/
/
can
add
the
appropriate
telemetry
probes
for
search
.
Without
the
correct
/
/
name
certain
tests
like
browser_UsageTelemetry_content
.
js
will
fail
/
/
(
See
github
ticket
#
2348
for
more
details
)
const
healthReportKey
=
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__
[
"
IS_NEWTAB
"
]
?
"
newtab
"
:
"
abouthome
"
;
/
/
The
"
searchSource
"
needs
to
be
"
newtab
"
or
"
homepage
"
and
is
sent
with
/
/
the
search
data
and
acts
as
context
for
the
search
request
(
See
/
/
nsISearchEngine
.
getSubmission
)
.
It
is
necessary
so
that
search
engine
/
/
plugins
can
correctly
atribute
referrals
.
(
See
github
ticket
#
3321
for
/
/
more
details
)
const
searchSource
=
content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__
[
"
IS_NEWTAB
"
]
?
"
newtab
"
:
"
homepage
"
;
/
/
gContentSearchController
needs
to
exist
as
a
global
so
that
tests
for
/
/
the
existing
about
:
home
can
find
it
;
and
so
it
allows
these
tests
to
pass
.
/
/
In
the
future
when
activity
stream
is
default
about
:
home
this
can
be
renamed
window
.
gContentSearchController
=
new
ContentSearchUIController
(
input
input
.
parentNode
healthReportKey
searchSource
)
;
addEventListener
(
"
ContentSearchClient
"
this
)
;
}
else
{
window
.
gContentSearchController
=
null
;
removeEventListener
(
"
ContentSearchClient
"
this
)
;
}
}
onSearchHandoffButtonMount
(
button
)
{
/
/
Keep
a
reference
to
the
button
for
use
during
"
paste
"
event
handling
.
this
.
_searchHandoffButton
=
button
;
}
/
*
*
Do
not
change
the
ID
on
the
input
field
as
legacy
newtab
code
*
specifically
looks
for
the
id
'
newtab
-
search
-
text
'
on
input
fields
*
in
order
to
execute
searches
in
various
tests
*
/
render
(
)
{
const
wrapperClassName
=
[
"
search
-
wrapper
"
this
.
props
.
hide
&
&
"
search
-
hidden
"
this
.
props
.
fakeFocus
&
&
"
fake
-
focus
"
]
.
filter
(
v
=
>
v
)
.
join
(
"
"
)
;
return
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
wrapperClassName
}
this
.
props
.
showLogo
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
logo
-
and
-
wordmark
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
logo
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
wordmark
"
}
)
)
!
this
.
props
.
handoffEnabled
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
inner
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
id
:
"
newtab
-
search
-
text
"
"
data
-
l10n
-
id
"
:
"
newtab
-
search
-
box
-
search
-
the
-
web
-
input
"
maxLength
:
"
256
"
ref
:
this
.
onInputMount
type
:
"
search
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
id
:
"
searchSubmit
"
className
:
"
search
-
button
"
"
data
-
l10n
-
id
"
:
"
newtab
-
search
-
box
-
search
-
button
"
onClick
:
this
.
onSearchClick
}
)
)
this
.
props
.
handoffEnabled
&
&
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
search
-
inner
-
wrapper
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
button
"
{
className
:
"
search
-
handoff
-
button
"
"
data
-
l10n
-
id
"
:
"
newtab
-
search
-
box
-
search
-
the
-
web
-
input
"
ref
:
this
.
onSearchHandoffButtonMount
onClick
:
this
.
onSearchHandoffClick
tabIndex
:
"
-
1
"
}
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fake
-
textbox
"
"
data
-
l10n
-
id
"
:
"
newtab
-
search
-
box
-
search
-
the
-
web
-
text
"
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
type
:
"
search
"
className
:
"
fake
-
editable
"
tabIndex
:
"
-
1
"
"
aria
-
hidden
"
:
"
true
"
onDrop
:
this
.
onSearchHandoffDrop
onPaste
:
this
.
onSearchHandoffPaste
}
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
div
"
{
className
:
"
fake
-
caret
"
}
)
)
react__WEBPACK_IMPORTED_MODULE_3___default
.
a
.
createElement
(
"
input
"
{
type
:
"
search
"
style
:
{
display
:
"
none
"
}
ref
:
this
.
onInputMount
}
)
)
)
;
}
}
const
Search
=
Object
(
react_redux__WEBPACK_IMPORTED_MODULE_1__
[
"
connect
"
]
)
(
)
(
_Search
)
;
/
*
*
*
/
}
)
/
*
77
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
WEBPACK
VAR
INJECTION
*
/
(
function
(
global
)
{
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
DetectUserSessionStart
"
function
(
)
{
return
DetectUserSessionStart
;
}
)
;
/
*
harmony
import
*
/
var
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
harmony
import
*
/
var
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
63
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
VISIBLE
=
"
visible
"
;
const
VISIBILITY_CHANGE_EVENT
=
"
visibilitychange
"
;
class
DetectUserSessionStart
{
constructor
(
store
options
=
{
}
)
{
this
.
_store
=
store
;
/
/
Overrides
for
testing
this
.
document
=
options
.
document
|
|
global
.
document
;
this
.
_perfService
=
options
.
perfService
|
|
common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__
[
"
perfService
"
]
;
this
.
_onVisibilityChange
=
this
.
_onVisibilityChange
.
bind
(
this
)
;
}
/
*
*
*
sendEventOrAddListener
-
Notify
immediately
if
the
page
is
already
visible
*
or
else
set
up
a
listener
for
when
visibility
changes
.
*
This
is
needed
for
accurate
session
tracking
for
telemetry
*
because
tabs
are
pre
-
loaded
.
*
/
sendEventOrAddListener
(
)
{
if
(
this
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
/
/
If
the
document
is
already
visible
to
the
user
send
a
notification
/
/
immediately
that
a
session
has
started
.
this
.
_sendEvent
(
)
;
}
else
{
/
/
If
the
document
is
not
visible
listen
for
when
it
does
become
visible
.
this
.
document
.
addEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
/
*
*
*
_sendEvent
-
Sends
a
message
to
the
main
process
to
indicate
the
current
*
tab
is
now
visible
to
the
user
includes
the
*
visibility_event_rcvd_ts
time
in
ms
from
the
UNIX
epoch
.
*
/
_sendEvent
(
)
{
this
.
_perfService
.
mark
(
"
visibility_event_rcvd_ts
"
)
;
try
{
let
visibility_event_rcvd_ts
=
this
.
_perfService
.
getMostRecentAbsMarkStartByName
(
"
visibility_event_rcvd_ts
"
)
;
this
.
_store
.
dispatch
(
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__
[
"
actionTypes
"
]
.
SAVE_SESSION_PERF_DATA
data
:
{
visibility_event_rcvd_ts
}
}
)
)
;
}
catch
(
ex
)
{
/
/
If
this
failed
it
'
s
likely
because
the
privacy
.
resistFingerprinting
/
/
pref
is
true
.
We
should
at
least
not
blow
up
.
}
}
/
*
*
*
_onVisibilityChange
-
If
the
visibility
has
changed
to
visible
sends
a
notification
*
and
removes
the
event
listener
.
This
should
only
be
called
once
per
tab
.
*
/
_onVisibilityChange
(
)
{
if
(
this
.
document
.
visibilityState
=
=
=
VISIBLE
)
{
this
.
_sendEvent
(
)
;
this
.
document
.
removeEventListener
(
VISIBILITY_CHANGE_EVENT
this
.
_onVisibilityChange
)
;
}
}
}
/
*
WEBPACK
VAR
INJECTION
*
/
}
.
call
(
this
__webpack_require__
(
1
)
)
)
/
*
*
*
/
}
)
/
*
78
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
EXTERNAL
MODULE
:
external
"
React
"
var
external_React_
=
__webpack_require__
(
9
)
;
/
/
EXTERNAL
MODULE
:
external
"
PropTypes
"
var
external_PropTypes_
=
__webpack_require__
(
10
)
;
var
external_PropTypes_default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
external_PropTypes_
)
;
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
sequence
/
src
/
map_sync
.
js
/
*
*
Synchronously
map
an
identifier
or
an
array
of
identifiers
to
the
best
*
FluentBundle
instance
(
s
)
.
*
*
param
{
Iterable
}
iterable
*
param
{
string
|
Array
<
string
>
}
ids
*
returns
{
FluentBundle
|
Array
<
FluentBundle
>
}
*
/
function
mapBundleSync
(
iterable
ids
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
return
getBundleForId
(
iterable
ids
)
;
}
return
ids
.
map
(
id
=
>
getBundleForId
(
iterable
id
)
)
;
}
/
*
*
Find
the
best
FluentBundle
with
the
translation
for
id
.
*
/
function
getBundleForId
(
iterable
id
)
{
for
(
const
bundle
of
iterable
)
{
if
(
bundle
.
hasMessage
(
id
)
)
{
return
bundle
;
}
}
return
null
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
sequence
/
src
/
map_async
.
js
/
*
*
Asynchronously
map
an
identifier
or
an
array
of
identifiers
to
the
best
*
FluentBundle
instance
(
s
)
.
*
*
param
{
AsyncIterable
}
iterable
*
param
{
string
|
Array
<
string
>
}
ids
*
returns
{
Promise
<
FluentBundle
|
Array
<
FluentBundle
>
>
}
*
/
async
function
mapBundleAsync
(
iterable
ids
)
{
if
(
!
Array
.
isArray
(
ids
)
)
{
for
await
(
const
bundle
of
iterable
)
{
if
(
bundle
.
hasMessage
(
ids
)
)
{
return
bundle
;
}
}
}
let
remainingCount
=
ids
.
length
;
const
foundBundles
=
new
Array
(
remainingCount
)
.
fill
(
null
)
;
for
await
(
const
bundle
of
iterable
)
{
for
(
const
[
index
id
]
of
ids
.
entries
(
)
)
{
if
(
!
foundBundles
[
index
]
&
&
bundle
.
hasMessage
(
id
)
)
{
foundBundles
[
index
]
=
bundle
;
remainingCount
-
-
;
}
/
/
Return
early
when
all
ids
have
been
mapped
to
contexts
.
if
(
remainingCount
=
=
=
0
)
{
return
foundBundles
;
}
}
}
return
foundBundles
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
sequence
/
src
/
index
.
js
/
*
*
module
fluent
-
sequence
*
overview
Manage
ordered
sequences
of
FluentBundles
.
*
/
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
cached
-
iterable
/
src
/
cached_iterable
.
mjs
/
*
*
Base
CachedIterable
class
.
*
/
class
CachedIterable
extends
Array
{
/
*
*
*
Create
a
CachedIterable
instance
from
an
iterable
or
if
another
*
instance
of
CachedIterable
is
passed
return
it
without
any
*
modifications
.
*
*
param
{
Iterable
}
iterable
*
returns
{
CachedIterable
}
*
/
static
from
(
iterable
)
{
if
(
iterable
instanceof
this
)
{
return
iterable
;
}
return
new
this
(
iterable
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
cached
-
iterable
/
src
/
cached_sync_iterable
.
mjs
/
*
*
CachedSyncIterable
caches
the
elements
yielded
by
an
iterable
.
*
*
It
can
be
used
to
iterate
over
an
iterable
many
times
without
depleting
the
*
iterable
.
*
/
class
cached_sync_iterable_CachedSyncIterable
extends
CachedIterable
{
/
*
*
*
Create
an
CachedSyncIterable
instance
.
*
*
param
{
Iterable
}
iterable
*
returns
{
CachedSyncIterable
}
*
/
constructor
(
iterable
)
{
super
(
)
;
if
(
Symbol
.
iterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
iterator
]
(
)
;
}
else
{
throw
new
TypeError
(
"
Argument
must
implement
the
iteration
protocol
.
"
)
;
}
}
[
Symbol
.
iterator
]
(
)
{
const
cached
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
if
(
cached
.
length
<
=
cur
)
{
cached
.
push
(
cached
.
iterator
.
next
(
)
)
;
}
return
cached
[
cur
+
+
]
;
}
}
;
}
/
*
*
*
This
method
allows
user
to
consume
the
next
element
from
the
iterator
*
into
the
cache
.
*
*
param
{
number
}
count
-
number
of
elements
to
consume
*
/
touchNext
(
count
=
1
)
{
let
idx
=
0
;
while
(
idx
+
+
<
count
)
{
const
last
=
this
[
this
.
length
-
1
]
;
if
(
last
&
&
last
.
done
)
{
break
;
}
this
.
push
(
this
.
iterator
.
next
(
)
)
;
}
/
/
Return
the
last
cached
{
value
done
}
object
to
allow
the
calling
/
/
code
to
decide
if
it
needs
to
call
touchNext
again
.
return
this
[
this
.
length
-
1
]
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
cached
-
iterable
/
src
/
cached_async_iterable
.
mjs
/
*
*
CachedAsyncIterable
caches
the
elements
yielded
by
an
async
iterable
.
*
*
It
can
be
used
to
iterate
over
an
iterable
many
times
without
depleting
the
*
iterable
.
*
/
class
cached_async_iterable_CachedAsyncIterable
extends
CachedIterable
{
/
*
*
*
Create
an
CachedAsyncIterable
instance
.
*
*
param
{
Iterable
}
iterable
*
returns
{
CachedAsyncIterable
}
*
/
constructor
(
iterable
)
{
super
(
)
;
if
(
Symbol
.
asyncIterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
asyncIterator
]
(
)
;
}
else
if
(
Symbol
.
iterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
iterator
]
(
)
;
}
else
{
throw
new
TypeError
(
"
Argument
must
implement
the
iteration
protocol
.
"
)
;
}
}
/
*
*
*
Synchronous
iterator
over
the
cached
elements
.
*
*
Return
a
generator
object
implementing
the
iterator
protocol
over
the
*
cached
elements
of
the
original
(
async
or
sync
)
iterable
.
*
/
[
Symbol
.
iterator
]
(
)
{
const
cached
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
if
(
cached
.
length
=
=
=
cur
)
{
return
{
value
:
undefined
done
:
true
}
;
}
return
cached
[
cur
+
+
]
;
}
}
;
}
/
*
*
*
Asynchronous
iterator
caching
the
yielded
elements
.
*
*
Elements
yielded
by
the
original
iterable
will
be
cached
and
available
*
synchronously
.
Returns
an
async
generator
object
implementing
the
*
iterator
protocol
over
the
elements
of
the
original
(
async
or
sync
)
*
iterable
.
*
/
[
Symbol
.
asyncIterator
]
(
)
{
const
cached
=
this
;
let
cur
=
0
;
return
{
async
next
(
)
{
if
(
cached
.
length
<
=
cur
)
{
cached
.
push
(
await
cached
.
iterator
.
next
(
)
)
;
}
return
cached
[
cur
+
+
]
;
}
}
;
}
/
*
*
*
This
method
allows
user
to
consume
the
next
element
from
the
iterator
*
into
the
cache
.
*
*
param
{
number
}
count
-
number
of
elements
to
consume
*
/
async
touchNext
(
count
=
1
)
{
let
idx
=
0
;
while
(
idx
+
+
<
count
)
{
const
last
=
this
[
this
.
length
-
1
]
;
if
(
last
&
&
last
.
done
)
{
break
;
}
this
.
push
(
await
this
.
iterator
.
next
(
)
)
;
}
/
/
Return
the
last
cached
{
value
done
}
object
to
allow
the
calling
/
/
code
to
decide
if
it
needs
to
call
touchNext
again
.
return
this
[
this
.
length
-
1
]
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
cached
-
iterable
/
src
/
index
.
mjs
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
localization
.
js
/
*
*
ReactLocalization
handles
translation
formatting
and
fallback
.
*
*
The
current
negotiated
fallback
chain
of
languages
is
stored
in
the
*
ReactLocalization
instance
in
form
of
an
iterable
of
FluentBundle
*
instances
.
This
iterable
is
used
to
find
the
best
existing
translation
for
*
a
given
identifier
.
*
*
Localized
components
must
subscribe
to
the
changes
of
the
*
ReactLocalization
'
s
fallback
chain
.
When
the
fallback
chain
changes
(
the
*
bundles
iterable
is
set
anew
)
all
subscribed
compontent
must
relocalize
.
*
*
The
ReactLocalization
class
instances
are
exposed
to
Localized
elements
*
via
the
LocalizationProvider
component
.
*
/
class
localization_ReactLocalization
{
constructor
(
bundles
)
{
this
.
bundles
=
cached_sync_iterable_CachedSyncIterable
.
from
(
bundles
)
;
this
.
subs
=
new
Set
(
)
;
}
/
*
*
Subscribe
a
Localized
component
to
changes
of
bundles
.
*
/
subscribe
(
comp
)
{
this
.
subs
.
add
(
comp
)
;
}
/
*
*
Unsubscribe
a
Localized
component
from
bundles
changes
.
*
/
unsubscribe
(
comp
)
{
this
.
subs
.
delete
(
comp
)
;
}
/
*
*
Set
a
new
bundles
iterable
and
trigger
the
retranslation
.
*
/
setBundles
(
bundles
)
{
this
.
bundles
=
cached_sync_iterable_CachedSyncIterable
.
from
(
bundles
)
;
/
/
Update
all
subscribed
Localized
components
.
this
.
subs
.
forEach
(
comp
=
>
comp
.
relocalize
(
)
)
;
}
getBundle
(
id
)
{
return
mapBundleSync
(
this
.
bundles
id
)
;
}
/
*
*
Find
a
translation
by
id
and
format
it
to
a
string
using
args
.
*
/
getString
(
id
args
fallback
)
{
const
bundle
=
this
.
getBundle
(
id
)
;
if
(
bundle
=
=
=
null
)
{
return
fallback
|
|
id
;
}
const
msg
=
bundle
.
getMessage
(
id
)
;
return
bundle
.
format
(
msg
args
)
;
}
}
function
isReactLocalization
(
props
propName
)
{
const
prop
=
props
[
propName
]
;
if
(
prop
instanceof
localization_ReactLocalization
)
{
return
null
;
}
return
new
Error
(
The
{
propName
}
context
field
must
be
an
instance
of
ReactLocalization
.
)
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
markup
.
js
/
*
eslint
-
env
browser
*
/
let
cachedParseMarkup
;
/
/
We
use
a
function
creator
to
make
the
reference
to
document
lazy
.
At
the
/
/
same
time
it
'
s
eager
enough
to
throw
in
<
LocalizationProvider
>
as
soon
as
/
/
it
'
s
first
mounted
which
reduces
the
risk
of
this
error
making
it
to
the
/
/
runtime
without
developers
noticing
it
in
development
.
function
createParseMarkup
(
)
{
if
(
typeof
document
=
=
=
"
undefined
"
)
{
/
/
We
can
'
t
use
<
template
>
to
sanitize
translations
.
throw
new
Error
(
"
document
is
undefined
.
Without
it
translations
cannot
"
+
"
be
safely
sanitized
.
Consult
the
documentation
at
"
+
"
https
:
/
/
github
.
com
/
projectfluent
/
fluent
.
js
/
wiki
/
React
-
Overlays
.
"
)
;
}
if
(
!
cachedParseMarkup
)
{
const
template
=
document
.
createElement
(
"
template
"
)
;
cachedParseMarkup
=
function
parseMarkup
(
str
)
{
template
.
innerHTML
=
str
;
return
Array
.
from
(
template
.
content
.
childNodes
)
;
}
;
}
return
cachedParseMarkup
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
provider
.
js
/
*
*
The
Provider
component
for
the
ReactLocalization
class
.
*
*
Exposes
a
ReactLocalization
instance
to
all
descendants
via
React
'
s
*
context
feature
.
It
makes
translations
available
to
all
localizable
*
elements
in
the
descendant
'
s
render
tree
without
the
need
to
pass
them
*
explicitly
.
*
*
<
LocalizationProvider
bundles
=
{
}
>
*
*
<
/
LocalizationProvider
>
*
*
The
LocalizationProvider
component
takes
one
prop
:
bundles
.
It
should
*
be
an
iterable
of
FluentBundle
instances
in
order
of
the
user
'
s
*
preferred
languages
.
The
FluentBundle
instances
will
be
used
by
*
ReactLocalization
to
format
translations
.
If
a
translation
is
missing
in
*
one
instance
ReactLocalization
will
fall
back
to
the
next
one
.
*
/
class
provider_LocalizationProvider
extends
external_React_
[
"
Component
"
]
{
constructor
(
props
)
{
super
(
props
)
;
const
{
bundles
parseMarkup
}
=
props
;
if
(
bundles
=
=
=
undefined
)
{
throw
new
Error
(
"
LocalizationProvider
must
receive
the
bundles
prop
.
"
)
;
}
if
(
!
bundles
[
Symbol
.
iterator
]
)
{
throw
new
Error
(
"
The
bundles
prop
must
be
an
iterable
.
"
)
;
}
this
.
l10n
=
new
localization_ReactLocalization
(
bundles
)
;
this
.
parseMarkup
=
parseMarkup
|
|
createParseMarkup
(
)
;
}
getChildContext
(
)
{
return
{
l10n
:
this
.
l10n
parseMarkup
:
this
.
parseMarkup
}
;
}
componentWillReceiveProps
(
next
)
{
const
{
bundles
}
=
next
;
if
(
bundles
!
=
=
this
.
props
.
bundles
)
{
this
.
l10n
.
setBundles
(
bundles
)
;
}
}
render
(
)
{
return
external_React_
[
"
Children
"
]
.
only
(
this
.
props
.
children
)
;
}
}
provider_LocalizationProvider
.
childContextTypes
=
{
l10n
:
isReactLocalization
parseMarkup
:
external_PropTypes_default
.
a
.
func
}
;
provider_LocalizationProvider
.
propTypes
=
{
children
:
external_PropTypes_default
.
a
.
element
.
isRequired
bundles
:
isIterable
parseMarkup
:
external_PropTypes_default
.
a
.
func
}
;
function
isIterable
(
props
propName
componentName
)
{
const
prop
=
props
[
propName
]
;
if
(
Symbol
.
iterator
in
Object
(
prop
)
)
{
return
null
;
}
return
new
Error
(
The
{
propName
}
prop
supplied
to
{
componentName
}
must
be
an
iterable
.
)
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
with_localization
.
js
function
withLocalization
(
Inner
)
{
class
WithLocalization
extends
external_React_
[
"
Component
"
]
{
componentDidMount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
subscribe
(
this
)
;
}
}
componentWillUnmount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
unsubscribe
(
this
)
;
}
}
/
*
*
Rerender
this
component
in
a
new
language
.
*
/
relocalize
(
)
{
/
/
When
the
ReactLocalization
'
s
fallback
chain
changes
update
the
/
/
component
.
this
.
forceUpdate
(
)
;
}
/
*
*
Find
a
translation
by
id
and
format
it
to
a
string
using
args
.
*
/
getString
(
id
args
fallback
)
{
const
{
l10n
}
=
this
.
context
;
if
(
!
l10n
)
{
return
fallback
|
|
id
;
}
return
l10n
.
getString
(
id
args
fallback
)
;
}
render
(
)
{
return
Object
(
external_React_
[
"
createElement
"
]
)
(
Inner
Object
.
assign
(
/
/
getString
needs
to
be
re
-
bound
on
updates
to
trigger
a
re
-
render
{
getString
:
(
.
.
.
args
)
=
>
this
.
getString
(
.
.
.
args
)
}
this
.
props
)
)
;
}
}
WithLocalization
.
displayName
=
WithLocalization
(
{
displayName
(
Inner
)
}
)
;
WithLocalization
.
contextTypes
=
{
l10n
:
isReactLocalization
}
;
return
WithLocalization
;
}
function
displayName
(
component
)
{
return
component
.
displayName
|
|
component
.
name
|
|
"
Component
"
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
vendor
/
omittedCloseTags
.
js
/
*
*
*
Copyright
(
c
)
2013
-
present
Facebook
Inc
.
*
*
This
source
code
is
licensed
under
the
MIT
license
found
in
the
*
LICENSE
file
in
this
directory
.
*
/
/
/
For
HTML
certain
tags
should
omit
their
close
tag
.
We
keep
a
whitelist
for
/
/
those
special
-
case
tags
.
var
omittedCloseTags
=
{
area
:
true
base
:
true
br
:
true
col
:
true
embed
:
true
hr
:
true
img
:
true
input
:
true
keygen
:
true
link
:
true
meta
:
true
param
:
true
source
:
true
track
:
true
wbr
:
true
/
/
NOTE
:
menuitem
'
s
close
tag
should
be
omitted
but
that
causes
problems
.
}
;
/
*
harmony
default
export
*
/
var
vendor_omittedCloseTags
=
(
omittedCloseTags
)
;
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
vendor
/
voidElementTags
.
js
/
*
*
*
Copyright
(
c
)
2013
-
present
Facebook
Inc
.
*
*
This
source
code
is
licensed
under
the
MIT
license
found
in
the
*
LICENSE
file
in
this
directory
.
*
/
/
/
For
HTML
certain
tags
cannot
have
children
.
This
has
the
same
purpose
as
/
/
omittedCloseTags
except
that
menuitem
should
still
have
its
closing
tag
.
var
voidElementTags
=
{
menuitem
:
true
.
.
.
vendor_omittedCloseTags
}
;
/
*
harmony
default
export
*
/
var
vendor_voidElementTags
=
(
voidElementTags
)
;
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
localized
.
js
/
/
Match
the
opening
angle
bracket
(
<
)
in
HTML
tags
and
HTML
entities
like
/
/
&
amp
;
&
#
0038
;
&
#
x0026
;
.
const
reMarkup
=
/
<
|
&
#
?
\
w
+
;
/
;
/
*
*
Prepare
props
passed
to
Localized
for
formatting
.
*
/
function
toArguments
(
props
)
{
const
args
=
{
}
;
const
elems
=
{
}
;
for
(
const
[
propname
propval
]
of
Object
.
entries
(
props
)
)
{
if
(
propname
.
startsWith
(
"
"
)
)
{
const
name
=
propname
.
substr
(
1
)
;
args
[
name
]
=
propval
;
}
else
if
(
Object
(
external_React_
[
"
isValidElement
"
]
)
(
propval
)
)
{
/
/
We
'
ll
try
to
match
localNames
of
elements
found
in
the
translation
with
/
/
names
of
elements
passed
as
props
.
localNames
are
always
lowercase
.
const
name
=
propname
.
toLowerCase
(
)
;
elems
[
name
]
=
propval
;
}
}
return
[
args
elems
]
;
}
/
*
*
The
Localized
class
renders
its
child
with
translated
props
and
children
.
*
*
<
Localized
id
=
"
hello
-
world
"
>
*
<
p
>
{
'
Hello
world
!
'
}
<
/
p
>
*
<
/
Localized
>
*
*
The
id
prop
should
be
the
unique
identifier
of
the
translation
.
Any
*
attributes
found
in
the
translation
will
be
applied
to
the
wrapped
element
.
*
*
Arguments
to
the
translation
can
be
passed
as
-
prefixed
props
on
*
Localized
.
*
*
<
Localized
id
=
"
hello
-
world
"
username
=
{
name
}
>
*
<
p
>
{
'
Hello
{
username
}
!
'
}
<
/
p
>
*
<
/
Localized
>
*
*
It
'
s
recommended
that
the
contents
of
the
wrapped
component
be
a
string
*
expression
.
The
string
will
be
used
as
the
ultimate
fallback
if
no
*
translation
is
available
.
It
also
makes
it
easy
to
grep
for
strings
in
the
*
source
code
.
*
/
class
localized_Localized
extends
external_React_
[
"
Component
"
]
{
componentDidMount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
subscribe
(
this
)
;
}
}
componentWillUnmount
(
)
{
const
{
l10n
}
=
this
.
context
;
if
(
l10n
)
{
l10n
.
unsubscribe
(
this
)
;
}
}
/
*
*
Rerender
this
component
in
a
new
language
.
*
/
relocalize
(
)
{
/
/
When
the
ReactLocalization
'
s
fallback
chain
changes
update
the
/
/
component
.
this
.
forceUpdate
(
)
;
}
render
(
)
{
const
{
l10n
parseMarkup
}
=
this
.
context
;
const
{
id
attrs
children
:
elem
}
=
this
.
props
;
/
/
Validate
that
the
child
element
isn
'
t
an
array
if
(
Array
.
isArray
(
elem
)
)
{
throw
new
Error
(
"
<
Localized
/
>
expected
to
receive
a
single
"
+
"
React
node
child
"
)
;
}
if
(
!
l10n
)
{
/
/
Use
the
wrapped
component
as
fallback
.
return
elem
;
}
const
bundle
=
l10n
.
getBundle
(
id
)
;
if
(
bundle
=
=
=
null
)
{
/
/
Use
the
wrapped
component
as
fallback
.
return
elem
;
}
const
msg
=
bundle
.
getMessage
(
id
)
;
const
[
args
elems
]
=
toArguments
(
this
.
props
)
;
const
messageValue
=
bundle
.
format
(
msg
args
)
;
/
/
Check
if
the
fallback
is
a
valid
element
-
-
if
not
then
it
'
s
not
/
/
markup
(
e
.
g
.
nothing
or
a
fallback
string
)
so
just
use
the
/
/
formatted
message
value
if
(
!
Object
(
external_React_
[
"
isValidElement
"
]
)
(
elem
)
)
{
return
messageValue
;
}
/
/
The
default
is
to
forbid
all
message
attributes
.
If
the
attrs
prop
exists
/
/
on
the
Localized
instance
only
set
message
attributes
which
have
been
/
/
explicitly
allowed
by
the
developer
.
if
(
attrs
&
&
msg
.
attrs
)
{
var
localizedProps
=
{
}
;
for
(
const
[
name
allowed
]
of
Object
.
entries
(
attrs
)
)
{
if
(
allowed
&
&
msg
.
attrs
.
hasOwnProperty
(
name
)
)
{
localizedProps
[
name
]
=
bundle
.
format
(
msg
.
attrs
[
name
]
args
)
;
}
}
}
/
/
If
the
wrapped
component
is
a
known
void
element
explicitly
dismiss
the
/
/
message
value
and
do
not
pass
it
to
cloneElement
in
order
to
avoid
the
/
/
"
void
element
tags
must
neither
have
children
nor
use
/
/
dangerouslySetInnerHTML
"
error
.
if
(
elem
.
type
in
vendor_voidElementTags
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
)
;
}
/
/
If
the
message
has
a
null
value
we
'
re
only
interested
in
its
attributes
.
/
/
Do
not
pass
the
null
value
to
cloneElement
as
it
would
nuke
all
children
/
/
of
the
wrapped
component
.
if
(
messageValue
=
=
=
null
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
)
;
}
/
/
If
the
message
value
doesn
'
t
contain
any
markup
nor
any
HTML
entities
/
/
insert
it
as
the
only
child
of
the
wrapped
component
.
if
(
!
reMarkup
.
test
(
messageValue
)
)
{
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
messageValue
)
;
}
/
/
If
the
message
contains
markup
parse
it
and
try
to
match
the
children
/
/
found
in
the
translation
with
the
props
passed
to
this
Localized
.
const
translationNodes
=
parseMarkup
(
messageValue
)
;
const
translatedChildren
=
translationNodes
.
map
(
childNode
=
>
{
if
(
childNode
.
nodeType
=
=
=
childNode
.
TEXT_NODE
)
{
return
childNode
.
textContent
;
}
/
/
If
the
child
is
not
expected
just
take
its
textContent
.
if
(
!
elems
.
hasOwnProperty
(
childNode
.
localName
)
)
{
return
childNode
.
textContent
;
}
const
sourceChild
=
elems
[
childNode
.
localName
]
;
/
/
If
the
element
passed
as
a
prop
to
<
Localized
>
is
a
known
void
element
/
/
explicitly
dismiss
any
textContent
which
might
have
accidentally
been
/
/
defined
in
the
translation
to
prevent
the
"
void
element
tags
must
not
/
/
have
children
"
error
.
if
(
sourceChild
.
type
in
vendor_voidElementTags
)
{
return
sourceChild
;
}
/
/
TODO
Protect
contents
of
elements
wrapped
in
<
Localized
>
/
/
https
:
/
/
github
.
com
/
projectfluent
/
fluent
.
js
/
issues
/
184
/
/
TODO
Control
localizable
attributes
on
elements
passed
as
props
/
/
https
:
/
/
github
.
com
/
projectfluent
/
fluent
.
js
/
issues
/
185
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
sourceChild
null
childNode
.
textContent
)
;
}
)
;
return
Object
(
external_React_
[
"
cloneElement
"
]
)
(
elem
localizedProps
.
.
.
translatedChildren
)
;
}
}
localized_Localized
.
contextTypes
=
{
l10n
:
isReactLocalization
parseMarkup
:
external_PropTypes_default
.
a
.
func
}
;
localized_Localized
.
propTypes
=
{
children
:
external_PropTypes_default
.
a
.
node
}
;
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
index
.
js
/
*
concated
harmony
reexport
LocalizationProvider
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
LocalizationProvider
"
function
(
)
{
return
provider_LocalizationProvider
;
}
)
;
/
*
concated
harmony
reexport
withLocalization
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
withLocalization
"
function
(
)
{
return
withLocalization
;
}
)
;
/
*
concated
harmony
reexport
Localized
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
Localized
"
function
(
)
{
return
localized_Localized
;
}
)
;
/
*
concated
harmony
reexport
ReactLocalization
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
ReactLocalization
"
function
(
)
{
return
localization_ReactLocalization
;
}
)
;
/
*
concated
harmony
reexport
isReactLocalization
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
isReactLocalization
"
function
(
)
{
return
isReactLocalization
;
}
)
;
/
*
*
module
fluent
-
react
*
overview
*
*
fluent
-
react
provides
React
bindings
for
Fluent
.
It
takes
advantage
of
*
React
'
s
Components
system
and
the
virtual
DOM
.
Translations
are
exposed
to
*
components
via
the
provider
pattern
.
*
*
<
LocalizationProvider
bundles
=
{
}
>
*
<
Localized
id
=
"
hello
-
world
"
>
*
<
p
>
{
'
Hello
world
!
'
}
<
/
p
>
*
<
/
Localized
>
*
<
/
LocalizationProvider
>
*
*
Consult
the
documentation
of
the
LocalizationProvider
and
the
Localized
*
components
for
more
information
.
*
/
/
*
*
*
/
}
)
/
*
79
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
EXTERNAL
MODULE
:
external
"
React
"
var
external_React_
=
__webpack_require__
(
9
)
;
var
external_React_default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
external_React_
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
EOYSnippet
/
EOYSnippet
.
schema
.
json
var
EOYSnippet_schema
=
__webpack_require__
(
13
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
components
/
Button
/
Button
.
jsx
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
ALLOWED_STYLE_TAGS
=
[
"
color
"
"
backgroundColor
"
]
;
const
Button
=
props
=
>
{
const
style
=
{
}
;
/
/
Add
allowed
style
tags
from
props
e
.
g
.
props
.
color
becomes
style
=
{
color
:
props
.
color
}
for
(
const
tag
of
ALLOWED_STYLE_TAGS
)
{
if
(
typeof
props
[
tag
]
!
=
=
"
undefined
"
)
{
style
[
tag
]
=
props
[
tag
]
;
}
}
/
/
remove
border
if
bg
is
set
to
something
custom
if
(
style
.
backgroundColor
)
{
style
.
border
=
"
0
"
;
}
return
external_React_default
.
a
.
createElement
(
"
button
"
{
onClick
:
props
.
onClick
className
:
props
.
className
|
|
"
ASRouterButton
secondary
"
style
:
style
}
props
.
children
)
;
}
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
components
/
ConditionalWrapper
/
ConditionalWrapper
.
jsx
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
lifted
from
https
:
/
/
gist
.
github
.
com
/
kitze
/
23d82bb9eb0baabfd03a6a720b1d637f
const
ConditionalWrapper
=
(
{
condition
wrap
children
}
)
=
>
condition
?
wrap
(
children
)
:
children
;
/
*
harmony
default
export
*
/
var
ConditionalWrapper_ConditionalWrapper
=
(
ConditionalWrapper
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
components
/
RichText
/
RichText
.
jsx
var
RichText
=
__webpack_require__
(
14
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
template
-
utils
.
js
var
template_utils
=
__webpack_require__
(
15
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SimpleSnippet
/
SimpleSnippet
.
schema
.
json
var
SimpleSnippet_schema
=
__webpack_require__
(
16
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
components
/
SnippetBase
/
SnippetBase
.
jsx
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SnippetBase_SnippetBase
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onBlockClicked
=
this
.
onBlockClicked
.
bind
(
this
)
;
this
.
onDismissClicked
=
this
.
onDismissClicked
.
bind
(
this
)
;
this
.
setBlockButtonRef
=
this
.
setBlockButtonRef
.
bind
(
this
)
;
this
.
onBlockButtonMouseEnter
=
this
.
onBlockButtonMouseEnter
.
bind
(
this
)
;
this
.
onBlockButtonMouseLeave
=
this
.
onBlockButtonMouseLeave
.
bind
(
this
)
;
this
.
state
=
{
blockButtonHover
:
false
}
;
}
componentDidMount
(
)
{
if
(
this
.
blockButtonRef
)
{
this
.
blockButtonRef
.
addEventListener
(
"
mouseenter
"
this
.
onBlockButtonMouseEnter
)
;
this
.
blockButtonRef
.
addEventListener
(
"
mouseleave
"
this
.
onBlockButtonMouseLeave
)
;
}
}
componentWillUnmount
(
)
{
if
(
this
.
blockButtonRef
)
{
this
.
blockButtonRef
.
removeEventListener
(
"
mouseenter
"
this
.
onBlockButtonMouseEnter
)
;
this
.
blockButtonRef
.
removeEventListener
(
"
mouseleave
"
this
.
onBlockButtonMouseLeave
)
;
}
}
setBlockButtonRef
(
element
)
{
this
.
blockButtonRef
=
element
;
}
onBlockButtonMouseEnter
(
)
{
this
.
setState
(
{
blockButtonHover
:
true
}
)
;
}
onBlockButtonMouseLeave
(
)
{
this
.
setState
(
{
blockButtonHover
:
false
}
)
;
}
onBlockClicked
(
)
{
if
(
this
.
props
.
provider
!
=
=
"
preview
"
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
BLOCK
"
id
:
this
.
props
.
UISurface
}
)
;
}
this
.
props
.
onBlock
(
)
;
}
onDismissClicked
(
)
{
if
(
this
.
props
.
provider
!
=
=
"
preview
"
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
DISMISS
"
id
:
this
.
props
.
UISurface
}
)
;
}
this
.
props
.
onDismiss
(
)
;
}
renderDismissButton
(
)
{
if
(
this
.
props
.
footerDismiss
)
{
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
footer
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
footer
-
content
"
}
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
onDismissClicked
}
this
.
props
.
content
.
scene2_dismiss_button_text
)
)
)
;
}
const
label
=
this
.
props
.
content
.
block_button_text
|
|
SimpleSnippet_schema
.
properties
.
block_button_text
.
default
;
return
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
blockButton
"
title
:
label
"
aria
-
label
"
:
label
onClick
:
this
.
onBlockClicked
ref
:
this
.
setBlockButtonRef
}
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
blockButtonHover
}
=
this
.
state
;
const
containerClassName
=
SnippetBaseContainer
{
props
.
className
?
{
props
.
className
}
:
"
"
}
{
blockButtonHover
?
"
active
"
:
"
"
}
;
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
containerClassName
style
:
this
.
props
.
textStyle
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
innerWrapper
"
}
props
.
children
)
this
.
renderDismissButton
(
)
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SimpleSnippet
/
SimpleSnippet
.
jsx
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
DEFAULT_ICON_PATH
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
/
/
Alt
text
placeholder
in
case
the
prop
from
the
server
isn
'
t
available
const
ICON_ALT_TEXT
=
"
"
;
class
SimpleSnippet_SimpleSnippet
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onButtonClick
=
this
.
onButtonClick
.
bind
(
this
)
;
}
onButtonClick
(
)
{
if
(
this
.
props
.
provider
!
=
=
"
preview
"
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
id
:
this
.
props
.
UISurface
}
)
;
}
const
{
button_url
}
=
this
.
props
.
content
;
/
/
If
button_url
is
defined
handle
it
as
OPEN_URL
action
const
type
=
this
.
props
.
content
.
button_action
|
|
button_url
&
&
"
OPEN_URL
"
;
this
.
props
.
onAction
(
{
type
data
:
{
args
:
this
.
props
.
content
.
button_action_args
|
|
button_url
}
}
)
;
if
(
!
this
.
props
.
content
.
do_not_autoblock
)
{
this
.
props
.
onBlock
(
)
;
}
}
_shouldRenderButton
(
)
{
return
this
.
props
.
content
.
button_action
|
|
this
.
props
.
onButtonClick
|
|
this
.
props
.
content
.
button_url
;
}
renderTitle
(
)
{
const
{
title
}
=
this
.
props
.
content
;
return
title
?
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
title
{
this
.
_shouldRenderButton
(
)
?
"
title
-
inline
"
:
"
"
}
}
this
.
renderTitleIcon
(
)
"
"
title
)
:
null
;
}
renderTitleIcon
(
)
{
const
titleIconLight
=
Object
(
template_utils
[
"
safeURI
"
]
)
(
this
.
props
.
content
.
title_icon
)
;
const
titleIconDark
=
Object
(
template_utils
[
"
safeURI
"
]
)
(
this
.
props
.
content
.
title_icon_dark_theme
|
|
this
.
props
.
content
.
title_icon
)
;
if
(
!
titleIconLight
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
external_React_default
.
a
.
Fragment
null
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
titleIcon
icon
-
light
-
theme
"
style
:
{
backgroundImage
:
url
(
"
{
titleIconLight
}
"
)
}
}
)
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
titleIcon
icon
-
dark
-
theme
"
style
:
{
backgroundImage
:
url
(
"
{
titleIconDark
}
"
)
}
}
)
)
;
}
renderButton
(
)
{
const
{
props
}
=
this
;
if
(
!
this
.
_shouldRenderButton
(
)
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
Button
{
onClick
:
props
.
onButtonClick
|
|
this
.
onButtonClick
color
:
props
.
content
.
button_color
backgroundColor
:
props
.
content
.
button_background_color
}
props
.
content
.
button_label
)
;
}
renderText
(
)
{
const
{
props
}
=
this
;
return
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
{
text
:
props
.
content
.
text
customElements
:
this
.
props
.
customElements
localization_id
:
"
text
"
links
:
props
.
content
.
links
sendClick
:
props
.
sendClick
}
)
;
}
wrapSectionHeader
(
url
)
{
return
function
(
children
)
{
return
external_React_default
.
a
.
createElement
(
"
a
"
{
href
:
url
}
children
)
;
}
;
}
wrapSnippetContent
(
children
)
{
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
innerContentWrapper
"
}
children
)
;
}
renderSectionHeader
(
)
{
const
{
props
}
=
this
;
/
/
an
icon
and
text
must
be
specified
to
render
the
section
header
if
(
props
.
content
.
section_title_icon
&
&
props
.
content
.
section_title_text
)
{
const
sectionTitleIconLight
=
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
section_title_icon
)
;
const
sectionTitleIconDark
=
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
section_title_icon_dark_theme
|
|
props
.
content
.
section_title_icon
)
;
const
sectionTitleURL
=
props
.
content
.
section_title_url
;
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
section
-
header
"
}
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
"
}
external_React_default
.
a
.
createElement
(
ConditionalWrapper_ConditionalWrapper
{
condition
:
sectionTitleURL
wrap
:
this
.
wrapSectionHeader
(
sectionTitleURL
)
}
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
light
-
theme
"
style
:
{
backgroundImage
:
url
(
"
{
sectionTitleIconLight
}
"
)
}
}
)
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
dark
-
theme
"
style
:
{
backgroundImage
:
url
(
"
{
sectionTitleIconDark
}
"
)
}
}
)
external_React_default
.
a
.
createElement
(
"
span
"
{
className
:
"
section
-
title
-
text
"
}
props
.
content
.
section_title_text
)
)
)
)
;
}
return
null
;
}
render
(
)
{
const
{
props
}
=
this
;
const
sectionHeader
=
this
.
renderSectionHeader
(
)
;
let
className
=
"
SimpleSnippet
"
;
if
(
props
.
className
)
{
className
+
=
{
props
.
className
}
;
}
if
(
props
.
content
.
tall
)
{
className
+
=
"
tall
"
;
}
if
(
sectionHeader
)
{
className
+
=
"
has
-
section
-
header
"
;
}
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
snippet
-
hover
-
wrapper
"
}
external_React_default
.
a
.
createElement
(
SnippetBase_SnippetBase
_extends
(
{
}
props
{
className
:
className
textStyle
:
this
.
props
.
textStyle
}
)
sectionHeader
external_React_default
.
a
.
createElement
(
ConditionalWrapper_ConditionalWrapper
{
condition
:
sectionHeader
wrap
:
this
.
wrapSnippetContent
}
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
icon
)
|
|
DEFAULT_ICON_PATH
className
:
"
icon
icon
-
light
-
theme
"
alt
:
props
.
content
.
icon_alt_text
|
|
ICON_ALT_TEXT
}
)
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
icon_dark_theme
|
|
props
.
content
.
icon
)
|
|
DEFAULT_ICON_PATH
className
:
"
icon
icon
-
dark
-
theme
"
alt
:
props
.
content
.
icon_alt_text
|
|
ICON_ALT_TEXT
}
)
external_React_default
.
a
.
createElement
(
"
div
"
null
this
.
renderTitle
(
)
"
"
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
body
"
}
this
.
renderText
(
)
)
this
.
props
.
extraContent
)
external_React_default
.
a
.
createElement
(
"
div
"
null
this
.
renderButton
(
)
)
)
)
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
EOYSnippet
/
EOYSnippet
.
jsx
function
EOYSnippet_extends
(
)
{
EOYSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
EOYSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
EOYSnippet_EOYSnippetBase
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleSubmit
=
this
.
handleSubmit
.
bind
(
this
)
;
}
/
*
*
*
setFrequencyValue
-
frequency
form
parameter
value
should
be
monthly
*
if
monthly
-
checkbox
is
selected
or
single
otherwise
*
/
setFrequencyValue
(
)
{
const
frequencyCheckbox
=
this
.
refs
.
form
.
querySelector
(
"
#
monthly
-
checkbox
"
)
;
if
(
frequencyCheckbox
.
checked
)
{
this
.
refs
.
form
.
querySelector
(
"
[
name
=
'
frequency
'
]
"
)
.
value
=
"
monthly
"
;
}
}
handleSubmit
(
event
)
{
event
.
preventDefault
(
)
;
this
.
setFrequencyValue
(
)
;
this
.
refs
.
form
.
submit
(
)
;
if
(
!
this
.
props
.
content
.
do_not_autoblock
)
{
this
.
props
.
onBlock
(
)
;
}
}
renderDonations
(
)
{
const
fieldNames
=
[
"
first
"
"
second
"
"
third
"
"
fourth
"
]
;
const
numberFormat
=
new
Intl
.
NumberFormat
(
this
.
props
.
content
.
locale
|
|
navigator
.
language
{
style
:
"
currency
"
currency
:
this
.
props
.
content
.
currency_code
minimumFractionDigits
:
0
}
)
;
/
/
Default
to
second
button
const
{
selected_button
}
=
this
.
props
.
content
;
const
btnStyle
=
{
color
:
this
.
props
.
content
.
button_color
backgroundColor
:
this
.
props
.
content
.
button_background_color
}
;
const
donationURLParams
=
[
]
;
const
paramsStartIndex
=
this
.
props
.
content
.
donation_form_url
.
indexOf
(
"
?
"
)
;
for
(
const
entry
of
new
URLSearchParams
(
this
.
props
.
content
.
donation_form_url
.
slice
(
paramsStartIndex
)
)
.
entries
(
)
)
{
donationURLParams
.
push
(
entry
)
;
}
return
external_React_default
.
a
.
createElement
(
"
form
"
{
className
:
"
EOYSnippetForm
"
action
:
this
.
props
.
content
.
donation_form_url
method
:
this
.
props
.
form_method
onSubmit
:
this
.
handleSubmit
ref
:
"
form
"
}
donationURLParams
.
map
(
(
[
key
value
]
idx
)
=
>
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
hidden
"
name
:
key
value
:
value
key
:
idx
}
)
)
fieldNames
.
map
(
(
field
idx
)
=
>
{
const
button_name
=
donation_amount_
{
field
}
;
const
amount
=
this
.
props
.
content
[
button_name
]
;
return
external_React_default
.
a
.
createElement
(
external_React_default
.
a
.
Fragment
{
key
:
idx
}
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
radio
"
name
:
"
amount
"
value
:
amount
id
:
field
defaultChecked
:
button_name
=
=
=
selected_button
}
)
external_React_default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
field
className
:
"
donation
-
amount
"
}
numberFormat
.
format
(
amount
)
)
)
;
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
monthly
-
checkbox
-
container
"
}
external_React_default
.
a
.
createElement
(
"
input
"
{
id
:
"
monthly
-
checkbox
"
type
:
"
checkbox
"
}
)
external_React_default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
"
monthly
-
checkbox
"
}
this
.
props
.
content
.
monthly_checkbox_label_text
)
)
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
hidden
"
name
:
"
frequency
"
value
:
"
single
"
}
)
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
hidden
"
name
:
"
currency
"
value
:
this
.
props
.
content
.
currency_code
}
)
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
hidden
"
name
:
"
presets
"
value
:
fieldNames
.
map
(
field
=
>
this
.
props
.
content
[
donation_amount_
{
field
}
]
)
}
)
external_React_default
.
a
.
createElement
(
"
button
"
{
style
:
btnStyle
type
:
"
submit
"
className
:
"
ASRouterButton
primary
donation
-
form
-
url
"
}
this
.
props
.
content
.
button_label
)
)
;
}
render
(
)
{
const
textStyle
=
{
color
:
this
.
props
.
content
.
text_color
backgroundColor
:
this
.
props
.
content
.
background_color
}
;
const
customElement
=
external_React_default
.
a
.
createElement
(
"
em
"
{
style
:
{
backgroundColor
:
this
.
props
.
content
.
highlight_color
}
}
)
;
return
external_React_default
.
a
.
createElement
(
SimpleSnippet_SimpleSnippet
EOYSnippet_extends
(
{
}
this
.
props
{
className
:
this
.
props
.
content
.
test
customElements
:
{
em
:
customElement
}
textStyle
:
textStyle
extraContent
:
this
.
renderDonations
(
)
}
)
)
;
}
}
const
EOYSnippet
=
props
=
>
{
const
extendedContent
=
{
monthly_checkbox_label_text
:
EOYSnippet_schema
.
properties
.
monthly_checkbox_label_text
.
default
locale
:
EOYSnippet_schema
.
properties
.
locale
.
default
currency_code
:
EOYSnippet_schema
.
properties
.
currency_code
.
default
selected_button
:
EOYSnippet_schema
.
properties
.
selected_button
.
default
.
.
.
props
.
content
}
;
return
external_React_default
.
a
.
createElement
(
EOYSnippet_EOYSnippetBase
EOYSnippet_extends
(
{
}
props
{
content
:
extendedContent
form_method
:
"
GET
"
}
)
)
;
}
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FXASignupSnippet
/
FXASignupSnippet
.
schema
.
json
var
FXASignupSnippet_schema
=
__webpack_require__
(
17
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SubmitFormSnippet
/
SubmitFormSnippet
.
jsx
function
SubmitFormSnippet_extends
(
)
{
SubmitFormSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
SubmitFormSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Alt
text
placeholder
in
case
the
prop
from
the
server
isn
'
t
available
const
SubmitFormSnippet_ICON_ALT_TEXT
=
"
"
;
class
SubmitFormSnippet_SubmitFormSnippet
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
expandSnippet
=
this
.
expandSnippet
.
bind
(
this
)
;
this
.
handleSubmit
=
this
.
handleSubmit
.
bind
(
this
)
;
this
.
handleSubmitAttempt
=
this
.
handleSubmitAttempt
.
bind
(
this
)
;
this
.
onInputChange
=
this
.
onInputChange
.
bind
(
this
)
;
this
.
state
=
{
expanded
:
false
submitAttempted
:
false
signupSubmitted
:
false
signupSuccess
:
false
disableForm
:
false
}
;
}
handleSubmitAttempt
(
)
{
if
(
!
this
.
state
.
submitAttempted
)
{
this
.
setState
(
{
submitAttempted
:
true
}
)
;
}
}
async
handleSubmit
(
event
)
{
let
json
;
if
(
this
.
state
.
disableForm
)
{
return
;
}
event
.
preventDefault
(
)
;
this
.
setState
(
{
disableForm
:
true
}
)
;
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
event_context
:
"
conversion
-
subscribe
-
activation
"
id
:
"
NEWTAB_FOOTER_BAR_CONTENT
"
}
)
;
if
(
this
.
props
.
form_method
.
toUpperCase
(
)
=
=
=
"
GET
"
)
{
this
.
props
.
onBlock
(
{
preventDismiss
:
true
}
)
;
this
.
refs
.
form
.
submit
(
)
;
return
;
}
const
{
url
formData
}
=
this
.
props
.
processFormData
?
this
.
props
.
processFormData
(
this
.
refs
.
mainInput
this
.
props
)
:
{
url
:
this
.
refs
.
form
.
action
formData
:
new
FormData
(
this
.
refs
.
form
)
}
;
try
{
const
fetchRequest
=
new
Request
(
url
{
body
:
formData
method
:
"
POST
"
credentials
:
"
omit
"
}
)
;
const
response
=
await
fetch
(
fetchRequest
)
;
/
/
eslint
-
disable
-
line
fetch
-
options
/
no
-
fetch
-
credentials
json
=
await
response
.
json
(
)
;
}
catch
(
err
)
{
console
.
log
(
err
)
;
/
/
eslint
-
disable
-
line
no
-
console
}
if
(
json
&
&
json
.
status
=
=
=
"
ok
"
)
{
this
.
setState
(
{
signupSuccess
:
true
signupSubmitted
:
true
}
)
;
if
(
!
this
.
props
.
content
.
do_not_autoblock
)
{
this
.
props
.
onBlock
(
{
preventDismiss
:
true
}
)
;
}
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
event_context
:
"
subscribe
-
success
"
id
:
"
NEWTAB_FOOTER_BAR_CONTENT
"
}
)
;
}
else
{
/
/
eslint
-
disable
-
next
-
line
no
-
console
console
.
error
(
"
There
was
a
problem
submitting
the
form
"
json
|
|
"
[
No
JSON
response
]
"
)
;
this
.
setState
(
{
signupSuccess
:
false
signupSubmitted
:
true
}
)
;
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
event_context
:
"
subscribe
-
error
"
id
:
"
NEWTAB_FOOTER_BAR_CONTENT
"
}
)
;
}
this
.
setState
(
{
disableForm
:
false
}
)
;
}
expandSnippet
(
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
event_context
:
"
scene1
-
button
-
learn
-
more
"
id
:
this
.
props
.
UISurface
}
)
;
this
.
setState
(
{
expanded
:
true
signupSuccess
:
false
signupSubmitted
:
false
}
)
;
}
renderHiddenFormInputs
(
)
{
const
{
hidden_inputs
}
=
this
.
props
.
content
;
if
(
!
hidden_inputs
)
{
return
null
;
}
return
Object
.
keys
(
hidden_inputs
)
.
map
(
(
key
idx
)
=
>
external_React_default
.
a
.
createElement
(
"
input
"
{
key
:
idx
type
:
"
hidden
"
name
:
key
value
:
hidden_inputs
[
key
]
}
)
)
;
}
renderDisclaimer
(
)
{
const
{
content
}
=
this
.
props
;
if
(
!
content
.
scene2_disclaimer_html
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
disclaimerText
"
}
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
{
text
:
content
.
scene2_disclaimer_html
localization_id
:
"
disclaimer_html
"
links
:
content
.
links
doNotAutoBlock
:
true
openNewWindow
:
true
sendClick
:
this
.
props
.
sendClick
}
)
)
;
}
renderFormPrivacyNotice
(
)
{
const
{
content
}
=
this
.
props
;
if
(
!
content
.
scene2_privacy_html
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
privacyNotice
"
}
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
id
:
"
id_privacy
"
name
:
"
privacy
"
required
:
"
required
"
}
)
external_React_default
.
a
.
createElement
(
"
label
"
{
htmlFor
:
"
id_privacy
"
}
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
{
text
:
content
.
scene2_privacy_html
localization_id
:
"
privacy_html
"
links
:
content
.
links
doNotAutoBlock
:
true
openNewWindow
:
true
sendClick
:
this
.
props
.
sendClick
}
)
)
)
;
}
renderSignupSubmitted
(
)
{
const
{
content
}
=
this
.
props
;
const
isSuccess
=
this
.
state
.
signupSuccess
;
const
successTitle
=
isSuccess
&
&
content
.
success_title
;
const
bodyText
=
isSuccess
?
{
success_text
:
content
.
success_text
}
:
{
error_text
:
content
.
error_text
}
;
const
retryButtonText
=
content
.
retry_button_label
;
return
external_React_default
.
a
.
createElement
(
SnippetBase_SnippetBase
this
.
props
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
submissionStatus
"
}
successTitle
?
external_React_default
.
a
.
createElement
(
"
h2
"
{
className
:
"
submitStatusTitle
"
}
successTitle
)
:
null
external_React_default
.
a
.
createElement
(
"
p
"
null
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
SubmitFormSnippet_extends
(
{
}
bodyText
{
localization_id
:
isSuccess
?
"
success_text
"
:
"
error_text
"
}
)
)
isSuccess
?
null
:
external_React_default
.
a
.
createElement
(
Button
{
onClick
:
this
.
expandSnippet
}
retryButtonText
)
)
)
)
;
}
onInputChange
(
event
)
{
if
(
!
this
.
props
.
validateInput
)
{
return
;
}
const
hasError
=
this
.
props
.
validateInput
(
event
.
target
.
value
this
.
props
.
content
)
;
event
.
target
.
setCustomValidity
(
hasError
)
;
}
renderInput
(
)
{
const
placholder
=
this
.
props
.
content
.
scene2_email_placeholder_text
|
|
this
.
props
.
content
.
scene2_input_placeholder
;
return
external_React_default
.
a
.
createElement
(
"
input
"
{
ref
:
"
mainInput
"
type
:
this
.
props
.
inputType
|
|
"
email
"
className
:
mainInput
{
this
.
state
.
submitAttempted
?
"
"
:
"
clean
"
}
name
:
"
email
"
required
:
true
placeholder
:
placholder
onChange
:
this
.
props
.
validateInput
?
this
.
onInputChange
:
null
}
)
;
}
renderSignupView
(
)
{
const
{
content
}
=
this
.
props
;
const
containerClass
=
SubmitFormSnippet
{
this
.
props
.
className
}
;
return
external_React_default
.
a
.
createElement
(
SnippetBase_SnippetBase
SubmitFormSnippet_extends
(
{
}
this
.
props
{
className
:
containerClass
footerDismiss
:
true
}
)
content
.
scene2_icon
?
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
scene2Icon
"
}
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
content
.
scene2_icon
)
className
:
"
icon
-
light
-
theme
"
alt
:
content
.
scene2_icon_alt_text
|
|
SubmitFormSnippet_ICON_ALT_TEXT
}
)
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
content
.
scene2_icon_dark_theme
|
|
content
.
scene2_icon
)
className
:
"
icon
-
dark
-
theme
"
alt
:
content
.
scene2_icon_alt_text
|
|
SubmitFormSnippet_ICON_ALT_TEXT
}
)
)
:
null
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
message
"
}
external_React_default
.
a
.
createElement
(
"
p
"
null
content
.
scene2_title
&
&
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
scene2Title
"
}
content
.
scene2_title
)
"
"
content
.
scene2_text
&
&
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
{
scene2_text
:
content
.
scene2_text
localization_id
:
"
scene2_text
"
}
)
)
)
external_React_default
.
a
.
createElement
(
"
form
"
{
action
:
this
.
props
.
form_action
method
:
this
.
props
.
form_method
onSubmit
:
this
.
handleSubmit
ref
:
"
form
"
}
this
.
renderHiddenFormInputs
(
)
external_React_default
.
a
.
createElement
(
"
div
"
null
this
.
renderInput
(
)
external_React_default
.
a
.
createElement
(
"
button
"
{
type
:
"
submit
"
className
:
"
ASRouterButton
primary
"
onClick
:
this
.
handleSubmitAttempt
ref
:
"
formSubmitBtn
"
}
content
.
scene2_button_label
)
)
this
.
renderFormPrivacyNotice
(
)
|
|
this
.
renderDisclaimer
(
)
)
)
;
}
getFirstSceneContent
(
)
{
return
Object
.
keys
(
this
.
props
.
content
)
.
filter
(
key
=
>
key
.
includes
(
"
scene1
"
)
)
.
reduce
(
(
acc
key
)
=
>
{
acc
[
key
.
substr
(
7
)
]
=
this
.
props
.
content
[
key
]
;
return
acc
;
}
{
}
)
;
}
render
(
)
{
const
content
=
{
.
.
.
this
.
props
.
content
.
.
.
this
.
getFirstSceneContent
(
)
}
;
if
(
this
.
state
.
signupSubmitted
)
{
return
this
.
renderSignupSubmitted
(
)
;
}
if
(
this
.
state
.
expanded
)
{
return
this
.
renderSignupView
(
)
;
}
return
external_React_default
.
a
.
createElement
(
SimpleSnippet_SimpleSnippet
SubmitFormSnippet_extends
(
{
}
this
.
props
{
content
:
content
onButtonClick
:
this
.
expandSnippet
}
)
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FXASignupSnippet
/
FXASignupSnippet
.
jsx
function
FXASignupSnippet_extends
(
)
{
FXASignupSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
FXASignupSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
FXASignupSnippet
=
props
=
>
{
const
userAgent
=
window
.
navigator
.
userAgent
.
match
(
/
Firefox
\
/
(
[
0
-
9
]
+
)
\
.
/
)
;
const
firefox_version
=
userAgent
?
parseInt
(
userAgent
[
1
]
10
)
:
0
;
const
extendedContent
=
{
scene1_button_label
:
FXASignupSnippet_schema
.
properties
.
scene1_button_label
.
default
retry_button_label
:
FXASignupSnippet_schema
.
properties
.
retry_button_label
.
default
scene2_email_placeholder_text
:
FXASignupSnippet_schema
.
properties
.
scene2_email_placeholder_text
.
default
scene2_button_label
:
FXASignupSnippet_schema
.
properties
.
scene2_button_label
.
default
scene2_dismiss_button_text
:
FXASignupSnippet_schema
.
properties
.
scene2_dismiss_button_text
.
default
.
.
.
props
.
content
hidden_inputs
:
{
action
:
"
email
"
context
:
"
fx_desktop_v3
"
entrypoint
:
"
snippets
"
utm_source
:
"
snippet
"
utm_content
:
firefox_version
utm_campaign
:
props
.
content
.
utm_campaign
utm_term
:
props
.
content
.
utm_term
.
.
.
props
.
content
.
hidden_inputs
}
}
;
return
external_React_default
.
a
.
createElement
(
SubmitFormSnippet_SubmitFormSnippet
FXASignupSnippet_extends
(
{
}
props
{
content
:
extendedContent
form_action
:
"
https
:
/
/
accounts
.
firefox
.
com
/
"
form_method
:
"
GET
"
}
)
)
;
}
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
NewsletterSnippet
/
NewsletterSnippet
.
schema
.
json
var
NewsletterSnippet_schema
=
__webpack_require__
(
18
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
NewsletterSnippet
/
NewsletterSnippet
.
jsx
function
NewsletterSnippet_extends
(
)
{
NewsletterSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
NewsletterSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
NewsletterSnippet
=
props
=
>
{
const
extendedContent
=
{
scene1_button_label
:
NewsletterSnippet_schema
.
properties
.
scene1_button_label
.
default
retry_button_label
:
NewsletterSnippet_schema
.
properties
.
retry_button_label
.
default
scene2_email_placeholder_text
:
NewsletterSnippet_schema
.
properties
.
scene2_email_placeholder_text
.
default
scene2_button_label
:
NewsletterSnippet_schema
.
properties
.
scene2_button_label
.
default
scene2_dismiss_button_text
:
NewsletterSnippet_schema
.
properties
.
scene2_dismiss_button_text
.
default
scene2_newsletter
:
NewsletterSnippet_schema
.
properties
.
scene2_newsletter
.
default
.
.
.
props
.
content
hidden_inputs
:
{
newsletters
:
props
.
content
.
scene2_newsletter
|
|
NewsletterSnippet_schema
.
properties
.
scene2_newsletter
.
default
fmt
:
NewsletterSnippet_schema
.
properties
.
hidden_inputs
.
properties
.
fmt
.
default
lang
:
props
.
content
.
locale
|
|
NewsletterSnippet_schema
.
properties
.
locale
.
default
source_url
:
https
:
/
/
snippets
.
mozilla
.
com
/
show
/
{
props
.
id
}
.
.
.
props
.
content
.
hidden_inputs
}
}
;
return
external_React_default
.
a
.
createElement
(
SubmitFormSnippet_SubmitFormSnippet
NewsletterSnippet_extends
(
{
}
props
{
content
:
extendedContent
form_action
:
"
https
:
/
/
basket
.
mozilla
.
org
/
subscribe
.
json
"
form_method
:
"
POST
"
}
)
)
;
}
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SendToDeviceSnippet
/
isEmailOrPhoneNumber
.
js
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
Checks
if
a
given
string
is
an
email
or
phone
number
or
neither
*
param
{
string
}
val
The
user
input
*
param
{
ASRMessageContent
}
content
.
content
property
on
ASR
message
*
returns
{
"
email
"
|
"
phone
"
|
"
"
}
The
type
of
the
input
*
/
function
isEmailOrPhoneNumber
(
val
content
)
{
const
{
locale
}
=
content
;
/
/
http
:
/
/
emailregex
.
com
/
const
email_re
=
/
^
(
(
[
^
<
>
(
)
[
\
]
\
\
.
;
:
\
s
"
]
+
(
\
.
[
^
<
>
(
)
[
\
]
\
\
.
;
:
\
s
"
]
+
)
*
)
|
(
"
.
+
"
)
)
(
(
\
[
[
0
-
9
]
{
1
3
}
\
.
[
0
-
9
]
{
1
3
}
\
.
[
0
-
9
]
{
1
3
}
\
.
[
0
-
9
]
{
1
3
}
]
)
|
(
(
[
a
-
zA
-
Z
\
-
0
-
9
]
+
\
.
)
+
[
a
-
zA
-
Z
]
{
2
}
)
)
/
;
const
check_email
=
email_re
.
test
(
val
)
;
let
check_phone
;
/
/
depends
on
locale
switch
(
locale
)
{
case
"
en
-
US
"
:
case
"
en
-
CA
"
:
/
/
allow
10
-
11
digits
in
case
user
wants
to
enter
country
code
check_phone
=
val
.
length
>
=
10
&
&
val
.
length
<
=
11
&
&
!
isNaN
(
val
)
;
break
;
case
"
de
"
:
/
/
allow
between
2
and
12
digits
for
german
phone
numbers
check_phone
=
val
.
length
>
=
2
&
&
val
.
length
<
=
12
&
&
!
isNaN
(
val
)
;
break
;
/
/
this
case
should
never
be
hit
but
good
to
have
a
fallback
just
in
case
default
:
check_phone
=
!
isNaN
(
val
)
;
break
;
}
if
(
check_email
)
{
return
"
email
"
;
}
else
if
(
check_phone
)
{
return
"
phone
"
;
}
return
"
"
;
}
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SendToDeviceSnippet
/
SendToDeviceSnippet
.
schema
.
json
var
SendToDeviceSnippet_schema
=
__webpack_require__
(
19
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SendToDeviceSnippet
/
SendToDeviceSnippet
.
jsx
function
SendToDeviceSnippet_extends
(
)
{
SendToDeviceSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
SendToDeviceSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
function
validateInput
(
value
content
)
{
const
type
=
isEmailOrPhoneNumber
(
value
content
)
;
return
type
?
"
"
:
"
Must
be
an
email
or
a
phone
number
.
"
;
}
function
processFormData
(
input
message
)
{
const
{
content
}
=
message
;
const
type
=
content
.
include_sms
?
isEmailOrPhoneNumber
(
input
.
value
content
)
:
"
email
"
;
const
formData
=
new
FormData
(
)
;
let
url
;
if
(
type
=
=
=
"
phone
"
)
{
url
=
"
https
:
/
/
basket
.
mozilla
.
org
/
news
/
subscribe_sms
/
"
;
formData
.
append
(
"
mobile_number
"
input
.
value
)
;
formData
.
append
(
"
msg_name
"
content
.
message_id_sms
)
;
formData
.
append
(
"
country
"
content
.
country
)
;
}
else
if
(
type
=
=
=
"
email
"
)
{
url
=
"
https
:
/
/
basket
.
mozilla
.
org
/
news
/
subscribe
/
"
;
formData
.
append
(
"
email
"
input
.
value
)
;
formData
.
append
(
"
newsletters
"
content
.
message_id_email
)
;
formData
.
append
(
"
source_url
"
encodeURIComponent
(
https
:
/
/
snippets
.
mozilla
.
com
/
show
/
{
message
.
id
}
)
)
;
}
formData
.
append
(
"
lang
"
content
.
locale
)
;
return
{
formData
url
}
;
}
function
addDefaultValues
(
props
)
{
return
{
.
.
.
props
content
:
{
scene1_button_label
:
SendToDeviceSnippet_schema
.
properties
.
scene1_button_label
.
default
retry_button_label
:
SendToDeviceSnippet_schema
.
properties
.
retry_button_label
.
default
scene2_dismiss_button_text
:
SendToDeviceSnippet_schema
.
properties
.
scene2_dismiss_button_text
.
default
scene2_button_label
:
SendToDeviceSnippet_schema
.
properties
.
scene2_button_label
.
default
scene2_input_placeholder
:
SendToDeviceSnippet_schema
.
properties
.
scene2_input_placeholder
.
default
locale
:
SendToDeviceSnippet_schema
.
properties
.
locale
.
default
country
:
SendToDeviceSnippet_schema
.
properties
.
country
.
default
message_id_email
:
"
"
include_sms
:
SendToDeviceSnippet_schema
.
properties
.
include_sms
.
default
.
.
.
props
.
content
}
}
;
}
const
SendToDeviceSnippet
=
props
=
>
{
const
propsWithDefaults
=
addDefaultValues
(
props
)
;
return
external_React_default
.
a
.
createElement
(
SubmitFormSnippet_SubmitFormSnippet
SendToDeviceSnippet_extends
(
{
}
propsWithDefaults
{
form_method
:
"
POST
"
className
:
"
send_to_device_snippet
"
inputType
:
propsWithDefaults
.
content
.
include_sms
?
"
text
"
:
"
email
"
validateInput
:
propsWithDefaults
.
content
.
include_sms
?
validateInput
:
null
processFormData
:
processFormData
}
)
)
;
}
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
SimpleBelowSearchSnippet
/
SimpleBelowSearchSnippet
.
jsx
function
SimpleBelowSearchSnippet_extends
(
)
{
SimpleBelowSearchSnippet_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
SimpleBelowSearchSnippet_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
SimpleBelowSearchSnippet_DEFAULT_ICON_PATH
=
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
;
/
/
Alt
text
placeholder
in
case
the
prop
from
the
server
isn
'
t
available
const
SimpleBelowSearchSnippet_ICON_ALT_TEXT
=
"
"
;
class
SimpleBelowSearchSnippet_SimpleBelowSearchSnippet
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onButtonClick
=
this
.
onButtonClick
.
bind
(
this
)
;
}
renderText
(
)
{
const
{
props
}
=
this
;
return
props
.
content
.
text
?
external_React_default
.
a
.
createElement
(
RichText
[
"
RichText
"
]
{
text
:
props
.
content
.
text
customElements
:
this
.
props
.
customElements
localization_id
:
"
text
"
links
:
props
.
content
.
links
sendClick
:
props
.
sendClick
}
)
:
null
;
}
renderTitle
(
)
{
const
{
title
}
=
this
.
props
.
content
;
return
title
?
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
title
title
-
inline
"
}
title
external_React_default
.
a
.
createElement
(
"
br
"
null
)
)
:
null
;
}
async
onButtonClick
(
)
{
if
(
this
.
props
.
provider
!
=
=
"
preview
"
)
{
this
.
props
.
sendUserActionTelemetry
(
{
event
:
"
CLICK_BUTTON
"
id
:
this
.
props
.
UISurface
}
)
;
}
const
{
button_url
}
=
this
.
props
.
content
;
/
/
If
button_url
is
defined
handle
it
as
OPEN_URL
action
const
type
=
this
.
props
.
content
.
button_action
|
|
button_url
&
&
"
OPEN_URL
"
;
await
this
.
props
.
onAction
(
{
type
data
:
{
args
:
this
.
props
.
content
.
button_action_args
|
|
button_url
}
}
)
;
if
(
!
this
.
props
.
content
.
do_not_autoblock
)
{
this
.
props
.
onBlock
(
)
;
}
}
_shouldRenderButton
(
)
{
return
this
.
props
.
content
.
button_action
|
|
this
.
props
.
onButtonClick
|
|
this
.
props
.
content
.
button_url
;
}
renderButton
(
)
{
const
{
props
}
=
this
;
if
(
!
this
.
_shouldRenderButton
(
)
)
{
return
null
;
}
return
external_React_default
.
a
.
createElement
(
Button
{
onClick
:
props
.
onButtonClick
|
|
this
.
onButtonClick
color
:
props
.
content
.
button_color
backgroundColor
:
props
.
content
.
button_background_color
}
props
.
content
.
button_label
)
;
}
render
(
)
{
const
{
props
}
=
this
;
let
className
=
"
SimpleBelowSearchSnippet
"
;
let
containerName
=
"
below
-
search
-
snippet
"
;
if
(
props
.
className
)
{
className
+
=
{
props
.
className
}
;
}
if
(
this
.
_shouldRenderButton
(
)
)
{
className
+
=
"
withButton
"
;
containerName
+
=
"
withButton
"
;
}
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
containerName
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
snippet
-
hover
-
wrapper
"
}
external_React_default
.
a
.
createElement
(
SnippetBase_SnippetBase
SimpleBelowSearchSnippet_extends
(
{
}
props
{
className
:
className
textStyle
:
this
.
props
.
textStyle
}
)
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
icon
)
|
|
SimpleBelowSearchSnippet_DEFAULT_ICON_PATH
className
:
"
icon
icon
-
light
-
theme
"
alt
:
props
.
content
.
icon_alt_text
|
|
SimpleBelowSearchSnippet_ICON_ALT_TEXT
}
)
external_React_default
.
a
.
createElement
(
"
img
"
{
src
:
Object
(
template_utils
[
"
safeURI
"
]
)
(
props
.
content
.
icon_dark_theme
|
|
props
.
content
.
icon
)
|
|
SimpleBelowSearchSnippet_DEFAULT_ICON_PATH
className
:
"
icon
icon
-
dark
-
theme
"
alt
:
props
.
content
.
icon_alt_text
|
|
SimpleBelowSearchSnippet_ICON_ALT_TEXT
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
textContainer
"
}
this
.
renderTitle
(
)
external_React_default
.
a
.
createElement
(
"
p
"
{
className
:
"
body
"
}
this
.
renderText
(
)
)
this
.
props
.
extraContent
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
buttonContainer
"
}
this
.
renderButton
(
)
)
)
)
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
template
-
manifest
.
jsx
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
SnippetsTemplates
"
function
(
)
{
return
SnippetsTemplates
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Key
names
matching
schema
name
of
templates
const
SnippetsTemplates
=
{
simple_snippet
:
SimpleSnippet_SimpleSnippet
newsletter_snippet
:
NewsletterSnippet
fxa_signup_snippet
:
FXASignupSnippet
send_to_device_snippet
:
SendToDeviceSnippet
eoy_snippet
:
EOYSnippet
simple_below_search_snippet
:
SimpleBelowSearchSnippet_SimpleBelowSearchSnippet
}
;
/
*
*
*
/
}
)
/
*
80
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
types
.
js
/
*
global
Intl
*
/
/
*
*
*
The
FluentType
class
is
the
base
of
Fluent
'
s
type
system
.
*
*
Fluent
types
wrap
JavaScript
values
and
store
additional
configuration
for
*
them
which
can
then
be
used
in
the
toString
method
together
with
a
proper
*
Intl
formatter
.
*
/
class
FluentType
{
/
*
*
*
Create
an
FluentType
instance
.
*
*
param
{
Any
}
value
-
JavaScript
value
to
wrap
.
*
param
{
Object
}
opts
-
Configuration
.
*
returns
{
FluentType
}
*
/
constructor
(
value
opts
)
{
this
.
value
=
value
;
this
.
opts
=
opts
;
}
/
*
*
*
Unwrap
the
raw
value
stored
by
this
FluentType
.
*
*
returns
{
Any
}
*
/
valueOf
(
)
{
return
this
.
value
;
}
/
*
*
*
Format
this
instance
of
FluentType
to
a
string
.
*
*
Formatted
values
are
suitable
for
use
outside
of
the
FluentBundle
.
*
This
method
can
use
Intl
formatters
memoized
by
the
FluentBundle
*
instance
passed
as
an
argument
.
*
*
param
{
FluentBundle
}
[
bundle
]
*
returns
{
string
}
*
/
toString
(
)
{
throw
new
Error
(
"
Subclasses
of
FluentType
must
implement
toString
.
"
)
;
}
}
class
FluentNone
extends
FluentType
{
toString
(
)
{
return
this
.
value
|
|
"
?
?
?
"
;
}
}
class
FluentNumber
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
parseFloat
(
value
)
opts
)
;
}
toString
(
bundle
)
{
try
{
const
nf
=
bundle
.
_memoizeIntlObject
(
Intl
.
NumberFormat
this
.
opts
)
;
return
nf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
/
/
XXX
Report
the
error
.
return
this
.
value
;
}
}
}
class
FluentDateTime
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
new
Date
(
value
)
opts
)
;
}
toString
(
bundle
)
{
try
{
const
dtf
=
bundle
.
_memoizeIntlObject
(
Intl
.
DateTimeFormat
this
.
opts
)
;
return
dtf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
/
/
XXX
Report
the
error
.
return
this
.
value
;
}
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
builtins
.
js
/
*
*
*
overview
*
*
The
FTL
resolver
ships
with
a
number
of
functions
built
-
in
.
*
*
Each
function
take
two
arguments
:
*
-
args
-
an
array
of
positional
args
*
-
opts
-
an
object
of
key
-
value
args
*
*
Arguments
to
functions
are
guaranteed
to
already
be
instances
of
*
FluentType
.
Functions
must
return
FluentType
objects
as
well
.
*
/
/
*
harmony
default
export
*
/
var
builtins
=
(
{
"
NUMBER
"
:
(
[
arg
]
opts
)
=
>
new
FluentNumber
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
"
DATETIME
"
:
(
[
arg
]
opts
)
=
>
new
FluentDateTime
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
}
)
;
function
merge
(
argopts
opts
)
{
return
Object
.
assign
(
{
}
argopts
values
(
opts
)
)
;
}
function
values
(
opts
)
{
const
unwrapped
=
{
}
;
for
(
const
[
name
opt
]
of
Object
.
entries
(
opts
)
)
{
unwrapped
[
name
]
=
opt
.
valueOf
(
)
;
}
return
unwrapped
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
resolver
.
js
/
*
global
Intl
*
/
/
*
*
*
overview
*
*
The
role
of
the
Fluent
resolver
is
to
format
a
translation
object
to
an
*
instance
of
FluentType
or
an
array
of
instances
.
*
*
Translations
can
contain
references
to
other
messages
or
variables
*
conditional
logic
in
form
of
select
expressions
traits
which
describe
their
*
grammatical
features
and
can
use
Fluent
builtins
which
make
use
of
the
*
Intl
formatters
to
format
numbers
dates
lists
and
more
into
the
*
bundle
'
s
language
.
See
the
documentation
of
the
Fluent
syntax
for
more
*
information
.
*
*
In
case
of
errors
the
resolver
will
try
to
salvage
as
much
of
the
*
translation
as
possible
.
In
rare
situations
where
the
resolver
didn
'
t
know
*
how
to
recover
from
an
error
it
will
return
an
instance
of
FluentNone
.
*
*
All
expressions
resolve
to
an
instance
of
FluentType
.
The
caller
should
*
use
the
toString
method
to
convert
the
instance
to
a
native
value
.
*
*
All
functions
in
this
file
pass
around
a
special
object
called
scope
.
*
This
object
stores
a
set
of
elements
used
by
all
resolve
functions
:
*
*
*
{
FluentBundle
}
bundle
*
bundle
for
which
the
given
resolution
is
happening
*
*
{
Object
}
args
*
list
of
developer
provided
arguments
that
can
be
used
*
*
{
Array
}
errors
*
list
of
errors
collected
while
resolving
*
*
{
WeakSet
}
dirty
*
Set
of
patterns
already
encountered
during
this
resolution
.
*
This
is
used
to
prevent
cyclic
resolutions
.
*
/
/
/
Prevent
expansion
of
too
long
placeables
.
const
MAX_PLACEABLE_LENGTH
=
2500
;
/
/
Unicode
bidi
isolation
characters
.
const
FSI
=
"
\
u2068
"
;
const
PDI
=
"
\
u2069
"
;
/
/
Helper
:
match
a
variant
key
to
the
given
selector
.
function
resolver_match
(
bundle
selector
key
)
{
if
(
key
=
=
=
selector
)
{
/
/
Both
are
strings
.
return
true
;
}
/
/
XXX
Consider
comparing
options
too
e
.
g
.
minimumFractionDigits
.
if
(
key
instanceof
FluentNumber
&
&
selector
instanceof
FluentNumber
&
&
key
.
value
=
=
=
selector
.
value
)
{
return
true
;
}
if
(
selector
instanceof
FluentNumber
&
&
typeof
key
=
=
=
"
string
"
)
{
let
category
=
bundle
.
_memoizeIntlObject
(
Intl
.
PluralRules
selector
.
opts
)
.
select
(
selector
.
value
)
;
if
(
key
=
=
=
category
)
{
return
true
;
}
}
return
false
;
}
/
/
Helper
:
resolve
the
default
variant
from
a
list
of
variants
.
function
getDefault
(
scope
variants
star
)
{
if
(
variants
[
star
]
)
{
return
Type
(
scope
variants
[
star
]
)
;
}
scope
.
errors
.
push
(
new
RangeError
(
"
No
default
"
)
)
;
return
new
FluentNone
(
)
;
}
/
/
Helper
:
resolve
arguments
to
a
call
expression
.
function
getArguments
(
scope
args
)
{
const
positional
=
[
]
;
const
named
=
{
}
;
for
(
const
arg
of
args
)
{
if
(
arg
.
type
=
=
=
"
narg
"
)
{
named
[
arg
.
name
]
=
Type
(
scope
arg
.
value
)
;
}
else
{
positional
.
push
(
Type
(
scope
arg
)
)
;
}
}
return
[
positional
named
]
;
}
/
/
Resolve
an
expression
to
a
Fluent
type
.
function
Type
(
scope
expr
)
{
/
/
A
fast
-
path
for
strings
which
are
the
most
common
case
.
Since
they
/
/
natively
have
the
toString
method
they
can
be
used
as
if
they
were
/
/
a
FluentType
instance
without
incurring
the
cost
of
creating
one
.
if
(
typeof
expr
=
=
=
"
string
"
)
{
return
scope
.
bundle
.
_transform
(
expr
)
;
}
/
/
A
fast
-
path
for
FluentNone
which
doesn
'
t
require
any
additional
logic
.
if
(
expr
instanceof
FluentNone
)
{
return
expr
;
}
/
/
The
Runtime
AST
(
Entries
)
encodes
patterns
(
complex
strings
with
/
/
placeables
)
as
Arrays
.
if
(
Array
.
isArray
(
expr
)
)
{
return
Pattern
(
scope
expr
)
;
}
switch
(
expr
.
type
)
{
case
"
str
"
:
return
expr
.
value
;
case
"
num
"
:
return
new
FluentNumber
(
expr
.
value
{
minimumFractionDigits
:
expr
.
precision
}
)
;
case
"
var
"
:
return
VariableReference
(
scope
expr
)
;
case
"
mesg
"
:
return
MessageReference
(
scope
expr
)
;
case
"
term
"
:
return
TermReference
(
scope
expr
)
;
case
"
func
"
:
return
FunctionReference
(
scope
expr
)
;
case
"
select
"
:
return
SelectExpression
(
scope
expr
)
;
case
undefined
:
{
/
/
If
it
'
s
a
node
with
a
value
resolve
the
value
.
if
(
expr
.
value
!
=
=
null
&
&
expr
.
value
!
=
=
undefined
)
{
return
Type
(
scope
expr
.
value
)
;
}
scope
.
errors
.
push
(
new
RangeError
(
"
No
value
"
)
)
;
return
new
FluentNone
(
)
;
}
default
:
return
new
FluentNone
(
)
;
}
}
/
/
Resolve
a
reference
to
a
variable
.
function
VariableReference
(
scope
{
name
}
)
{
if
(
!
scope
.
args
|
|
!
scope
.
args
.
hasOwnProperty
(
name
)
)
{
if
(
scope
.
insideTermReference
=
=
=
false
)
{
scope
.
errors
.
push
(
new
ReferenceError
(
Unknown
variable
:
{
name
}
)
)
;
}
return
new
FluentNone
(
{
name
}
)
;
}
const
arg
=
scope
.
args
[
name
]
;
/
/
Return
early
if
the
argument
already
is
an
instance
of
FluentType
.
if
(
arg
instanceof
FluentType
)
{
return
arg
;
}
/
/
Convert
the
argument
to
a
Fluent
type
.
switch
(
typeof
arg
)
{
case
"
string
"
:
return
arg
;
case
"
number
"
:
return
new
FluentNumber
(
arg
)
;
case
"
object
"
:
if
(
arg
instanceof
Date
)
{
return
new
FluentDateTime
(
arg
)
;
}
default
:
scope
.
errors
.
push
(
new
TypeError
(
Unsupported
variable
type
:
{
name
}
{
typeof
arg
}
)
)
;
return
new
FluentNone
(
{
name
}
)
;
}
}
/
/
Resolve
a
reference
to
another
message
.
function
MessageReference
(
scope
{
name
attr
}
)
{
const
message
=
scope
.
bundle
.
_messages
.
get
(
name
)
;
if
(
!
message
)
{
const
err
=
new
ReferenceError
(
Unknown
message
:
{
name
}
)
;
scope
.
errors
.
push
(
err
)
;
return
new
FluentNone
(
name
)
;
}
if
(
attr
)
{
const
attribute
=
message
.
attrs
&
&
message
.
attrs
[
attr
]
;
if
(
attribute
)
{
return
Type
(
scope
attribute
)
;
}
scope
.
errors
.
push
(
new
ReferenceError
(
Unknown
attribute
:
{
attr
}
)
)
;
return
Type
(
scope
message
)
;
}
return
Type
(
scope
message
)
;
}
/
/
Resolve
a
call
to
a
Term
with
key
-
value
arguments
.
function
TermReference
(
scope
{
name
attr
args
}
)
{
const
id
=
-
{
name
}
;
const
term
=
scope
.
bundle
.
_terms
.
get
(
id
)
;
if
(
!
term
)
{
const
err
=
new
ReferenceError
(
Unknown
term
:
{
id
}
)
;
scope
.
errors
.
push
(
err
)
;
return
new
FluentNone
(
id
)
;
}
/
/
Every
TermReference
has
its
own
args
.
const
[
keyargs
]
=
getArguments
(
scope
args
)
;
const
local
=
{
.
.
.
scope
args
:
keyargs
insideTermReference
:
true
}
;
if
(
attr
)
{
const
attribute
=
term
.
attrs
&
&
term
.
attrs
[
attr
]
;
if
(
attribute
)
{
return
Type
(
local
attribute
)
;
}
scope
.
errors
.
push
(
new
ReferenceError
(
Unknown
attribute
:
{
attr
}
)
)
;
return
Type
(
local
term
)
;
}
return
Type
(
local
term
)
;
}
/
/
Resolve
a
call
to
a
Function
with
positional
and
key
-
value
arguments
.
function
FunctionReference
(
scope
{
name
args
}
)
{
/
/
Some
functions
are
built
-
in
.
Others
may
be
provided
by
the
runtime
via
/
/
the
FluentBundle
constructor
.
const
func
=
scope
.
bundle
.
_functions
[
name
]
|
|
builtins
[
name
]
;
if
(
!
func
)
{
scope
.
errors
.
push
(
new
ReferenceError
(
Unknown
function
:
{
name
}
(
)
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
if
(
typeof
func
!
=
=
"
function
"
)
{
scope
.
errors
.
push
(
new
TypeError
(
Function
{
name
}
(
)
is
not
callable
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
try
{
return
func
(
.
.
.
getArguments
(
scope
args
)
)
;
}
catch
(
e
)
{
/
/
XXX
Report
errors
.
return
new
FluentNone
(
)
;
}
}
/
/
Resolve
a
select
expression
to
the
member
object
.
function
SelectExpression
(
scope
{
selector
variants
star
}
)
{
let
sel
=
Type
(
scope
selector
)
;
if
(
sel
instanceof
FluentNone
)
{
const
variant
=
getDefault
(
scope
variants
star
)
;
return
Type
(
scope
variant
)
;
}
/
/
Match
the
selector
against
keys
of
each
variant
in
order
.
for
(
const
variant
of
variants
)
{
const
key
=
Type
(
scope
variant
.
key
)
;
if
(
resolver_match
(
scope
.
bundle
sel
key
)
)
{
return
Type
(
scope
variant
)
;
}
}
const
variant
=
getDefault
(
scope
variants
star
)
;
return
Type
(
scope
variant
)
;
}
/
/
Resolve
a
pattern
(
a
complex
string
with
placeables
)
.
function
Pattern
(
scope
ptn
)
{
if
(
scope
.
dirty
.
has
(
ptn
)
)
{
scope
.
errors
.
push
(
new
RangeError
(
"
Cyclic
reference
"
)
)
;
return
new
FluentNone
(
)
;
}
/
/
Tag
the
pattern
as
dirty
for
the
purpose
of
the
current
resolution
.
scope
.
dirty
.
add
(
ptn
)
;
const
result
=
[
]
;
/
/
Wrap
interpolations
with
Directional
Isolate
Formatting
characters
/
/
only
when
the
pattern
has
more
than
one
element
.
const
useIsolating
=
scope
.
bundle
.
_useIsolating
&
&
ptn
.
length
>
1
;
for
(
const
elem
of
ptn
)
{
if
(
typeof
elem
=
=
=
"
string
"
)
{
result
.
push
(
scope
.
bundle
.
_transform
(
elem
)
)
;
continue
;
}
const
part
=
Type
(
scope
elem
)
.
toString
(
scope
.
bundle
)
;
if
(
useIsolating
)
{
result
.
push
(
FSI
)
;
}
if
(
part
.
length
>
MAX_PLACEABLE_LENGTH
)
{
scope
.
errors
.
push
(
new
RangeError
(
"
Too
many
characters
in
placeable
"
+
(
{
part
.
length
}
max
allowed
is
{
MAX_PLACEABLE_LENGTH
}
)
)
)
;
result
.
push
(
part
.
slice
(
MAX_PLACEABLE_LENGTH
)
)
;
}
else
{
result
.
push
(
part
)
;
}
if
(
useIsolating
)
{
result
.
push
(
PDI
)
;
}
}
scope
.
dirty
.
delete
(
ptn
)
;
return
result
.
join
(
"
"
)
;
}
/
*
*
*
Format
a
translation
into
a
string
.
*
*
param
{
FluentBundle
}
bundle
*
A
FluentBundle
instance
which
will
be
used
to
resolve
the
*
contextual
information
of
the
message
.
*
param
{
Object
}
args
*
List
of
arguments
provided
by
the
developer
which
can
be
accessed
*
from
the
message
.
*
param
{
Object
}
message
*
An
object
with
the
Message
to
be
resolved
.
*
param
{
Array
}
errors
*
An
error
array
that
any
encountered
errors
will
be
appended
to
.
*
returns
{
FluentType
}
*
/
function
resolve
(
bundle
args
message
errors
=
[
]
)
{
const
scope
=
{
bundle
args
errors
dirty
:
new
WeakSet
(
)
/
/
TermReferences
are
resolved
in
a
new
scope
.
insideTermReference
:
false
}
;
return
Type
(
scope
message
)
.
toString
(
bundle
)
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
error
.
js
class
FluentError
extends
Error
{
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
resource
.
js
/
/
This
regex
is
used
to
iterate
through
the
beginnings
of
messages
and
terms
.
/
/
With
the
/
m
flag
the
^
matches
at
the
beginning
of
every
line
.
const
RE_MESSAGE_START
=
/
^
(
-
?
[
a
-
zA
-
Z
]
[
\
w
-
]
*
)
*
=
*
/
mg
;
/
/
Both
Attributes
and
Variants
are
parsed
in
while
loops
.
These
regexes
are
/
/
used
to
break
out
of
them
.
const
RE_ATTRIBUTE_START
=
/
\
.
(
[
a
-
zA
-
Z
]
[
\
w
-
]
*
)
*
=
*
/
y
;
const
RE_VARIANT_START
=
/
\
*
?
\
[
/
y
;
const
RE_NUMBER_LITERAL
=
/
(
-
?
[
0
-
9
]
+
(
?
:
\
.
(
[
0
-
9
]
+
)
)
?
)
/
y
;
const
RE_IDENTIFIER
=
/
(
[
a
-
zA
-
Z
]
[
\
w
-
]
*
)
/
y
;
const
RE_REFERENCE
=
/
(
[
-
]
)
?
(
[
a
-
zA
-
Z
]
[
\
w
-
]
*
)
(
?
:
\
.
(
[
a
-
zA
-
Z
]
[
\
w
-
]
*
)
)
?
/
y
;
const
RE_FUNCTION_NAME
=
/
^
[
A
-
Z
]
[
A
-
Z0
-
9_
-
]
*
/
;
/
/
A
"
run
"
is
a
sequence
of
text
or
string
literal
characters
which
don
'
t
/
/
require
any
special
handling
.
For
TextElements
such
special
characters
are
:
{
/
/
(
starts
a
placeable
)
and
line
breaks
which
require
additional
logic
to
check
/
/
if
the
next
line
is
indented
.
For
StringLiterals
they
are
:
\
(
starts
an
/
/
escape
sequence
)
"
(
ends
the
literal
)
and
line
breaks
which
are
not
allowed
/
/
in
StringLiterals
.
Note
that
string
runs
may
be
empty
;
text
runs
may
not
.
const
RE_TEXT_RUN
=
/
(
[
^
{
}
\
n
\
r
]
+
)
/
y
;
const
RE_STRING_RUN
=
/
(
[
^
\
\
"
\
n
\
r
]
*
)
/
y
;
/
/
Escape
sequences
.
const
RE_STRING_ESCAPE
=
/
\
\
(
[
\
\
"
]
)
/
y
;
const
RE_UNICODE_ESCAPE
=
/
\
\
u
(
[
a
-
fA
-
F0
-
9
]
{
4
}
)
|
\
\
U
(
[
a
-
fA
-
F0
-
9
]
{
6
}
)
/
y
;
/
/
Used
for
trimming
TextElements
and
indents
.
const
RE_LEADING_NEWLINES
=
/
^
\
n
+
/
;
const
RE_TRAILING_SPACES
=
/
+
/
;
/
/
Used
in
makeIndent
to
strip
spaces
from
blank
lines
and
normalize
CRLF
to
LF
.
const
RE_BLANK_LINES
=
/
*
\
r
?
\
n
/
g
;
/
/
Used
in
makeIndent
to
measure
the
indentation
.
const
RE_INDENT
=
/
(
*
)
/
;
/
/
Common
tokens
.
const
TOKEN_BRACE_OPEN
=
/
{
\
s
*
/
y
;
const
TOKEN_BRACE_CLOSE
=
/
\
s
*
}
/
y
;
const
TOKEN_BRACKET_OPEN
=
/
\
[
\
s
*
/
y
;
const
TOKEN_BRACKET_CLOSE
=
/
\
s
*
]
*
/
y
;
const
TOKEN_PAREN_OPEN
=
/
\
s
*
\
(
\
s
*
/
y
;
const
TOKEN_ARROW
=
/
\
s
*
-
>
\
s
*
/
y
;
const
TOKEN_COLON
=
/
\
s
*
:
\
s
*
/
y
;
/
/
Note
the
optional
comma
.
As
a
deviation
from
the
Fluent
EBNF
the
parser
/
/
doesn
'
t
enforce
commas
between
call
arguments
.
const
TOKEN_COMMA
=
/
\
s
*
?
\
s
*
/
y
;
const
TOKEN_BLANK
=
/
\
s
+
/
y
;
/
/
Maximum
number
of
placeables
in
a
single
Pattern
to
protect
against
Quadratic
/
/
Blowup
attacks
.
See
https
:
/
/
msdn
.
microsoft
.
com
/
en
-
us
/
magazine
/
ee335713
.
aspx
.
const
MAX_PLACEABLES
=
100
;
/
*
*
*
Fluent
Resource
is
a
structure
storing
a
map
of
parsed
localization
entries
.
*
/
class
resource_FluentResource
extends
Map
{
/
*
*
*
Create
a
new
FluentResource
from
Fluent
code
.
*
/
static
fromString
(
source
)
{
RE_MESSAGE_START
.
lastIndex
=
0
;
let
resource
=
new
this
(
)
;
let
cursor
=
0
;
/
/
Iterate
over
the
beginnings
of
messages
and
terms
to
efficiently
skip
/
/
comments
and
recover
from
errors
.
while
(
true
)
{
let
next
=
RE_MESSAGE_START
.
exec
(
source
)
;
if
(
next
=
=
=
null
)
{
break
;
}
cursor
=
RE_MESSAGE_START
.
lastIndex
;
try
{
resource
.
set
(
next
[
1
]
parseMessage
(
)
)
;
}
catch
(
err
)
{
if
(
err
instanceof
FluentError
)
{
/
/
Don
'
t
report
any
Fluent
syntax
errors
.
Skip
directly
to
the
/
/
beginning
of
the
next
message
or
term
.
continue
;
}
throw
err
;
}
}
return
resource
;
/
/
The
parser
implementation
is
inlined
below
for
performance
reasons
.
/
/
The
parser
focuses
on
minimizing
the
number
of
false
negatives
at
the
/
/
expense
of
increasing
the
risk
of
false
positives
.
In
other
words
it
/
/
aims
at
parsing
valid
Fluent
messages
with
a
success
rate
of
100
%
but
it
/
/
may
also
parse
a
few
invalid
messages
which
the
reference
parser
would
/
/
reject
.
The
parser
doesn
'
t
perform
any
validation
and
may
produce
entries
/
/
which
wouldn
'
t
make
sense
in
the
real
world
.
For
best
results
users
are
/
/
advised
to
validate
translations
with
the
fluent
-
syntax
parser
/
/
pre
-
runtime
.
/
/
The
parser
makes
an
extensive
use
of
sticky
regexes
which
can
be
anchored
/
/
to
any
offset
of
the
source
string
without
slicing
it
.
Errors
are
thrown
/
/
to
bail
out
of
parsing
of
ill
-
formed
messages
.
function
test
(
re
)
{
re
.
lastIndex
=
cursor
;
return
re
.
test
(
source
)
;
}
/
/
Advance
the
cursor
by
the
char
if
it
matches
.
May
be
used
as
a
predicate
/
/
(
was
the
match
found
?
)
or
if
errorClass
is
passed
as
an
assertion
.
function
consumeChar
(
char
errorClass
)
{
if
(
source
[
cursor
]
=
=
=
char
)
{
cursor
+
+
;
return
true
;
}
if
(
errorClass
)
{
throw
new
errorClass
(
Expected
{
char
}
)
;
}
return
false
;
}
/
/
Advance
the
cursor
by
the
token
if
it
matches
.
May
be
used
as
a
predicate
/
/
(
was
the
match
found
?
)
or
if
errorClass
is
passed
as
an
assertion
.
function
consumeToken
(
re
errorClass
)
{
if
(
test
(
re
)
)
{
cursor
=
re
.
lastIndex
;
return
true
;
}
if
(
errorClass
)
{
throw
new
errorClass
(
Expected
{
re
.
toString
(
)
}
)
;
}
return
false
;
}
/
/
Execute
a
regex
advance
the
cursor
and
return
all
capture
groups
.
function
match
(
re
)
{
re
.
lastIndex
=
cursor
;
let
result
=
re
.
exec
(
source
)
;
if
(
result
=
=
=
null
)
{
throw
new
FluentError
(
Expected
{
re
.
toString
(
)
}
)
;
}
cursor
=
re
.
lastIndex
;
return
result
;
}
/
/
Execute
a
regex
advance
the
cursor
and
return
the
capture
group
.
function
match1
(
re
)
{
return
match
(
re
)
[
1
]
;
}
function
parseMessage
(
)
{
let
value
=
parsePattern
(
)
;
let
attrs
=
parseAttributes
(
)
;
if
(
attrs
=
=
=
null
)
{
if
(
value
=
=
=
null
)
{
throw
new
FluentError
(
"
Expected
message
value
or
attributes
"
)
;
}
return
value
;
}
return
{
value
attrs
}
;
}
function
parseAttributes
(
)
{
let
attrs
=
{
}
;
while
(
test
(
RE_ATTRIBUTE_START
)
)
{
let
name
=
match1
(
RE_ATTRIBUTE_START
)
;
let
value
=
parsePattern
(
)
;
if
(
value
=
=
=
null
)
{
throw
new
FluentError
(
"
Expected
attribute
value
"
)
;
}
attrs
[
name
]
=
value
;
}
return
Object
.
keys
(
attrs
)
.
length
>
0
?
attrs
:
null
;
}
function
parsePattern
(
)
{
/
/
First
try
to
parse
any
simple
text
on
the
same
line
as
the
id
.
if
(
test
(
RE_TEXT_RUN
)
)
{
var
first
=
match1
(
RE_TEXT_RUN
)
;
}
/
/
If
there
'
s
a
placeable
on
the
first
line
parse
a
complex
pattern
.
if
(
source
[
cursor
]
=
=
=
"
{
"
|
|
source
[
cursor
]
=
=
=
"
}
"
)
{
/
/
Re
-
use
the
text
parsed
above
if
possible
.
return
parsePatternElements
(
first
?
[
first
]
:
[
]
Infinity
)
;
}
/
/
RE_TEXT_VALUE
stops
at
newlines
.
Only
continue
parsing
the
pattern
if
/
/
what
comes
after
the
newline
is
indented
.
let
indent
=
parseIndent
(
)
;
if
(
indent
)
{
if
(
first
)
{
/
/
If
there
'
s
text
on
the
first
line
the
blank
block
is
part
of
the
/
/
translation
content
in
its
entirety
.
return
parsePatternElements
(
[
first
indent
]
indent
.
length
)
;
}
/
/
Otherwise
we
'
re
dealing
with
a
block
pattern
i
.
e
.
a
pattern
which
/
/
starts
on
a
new
line
.
Discrad
the
leading
newlines
but
keep
the
/
/
inline
indent
;
it
will
be
used
by
the
dedentation
logic
.
indent
.
value
=
trim
(
indent
.
value
RE_LEADING_NEWLINES
)
;
return
parsePatternElements
(
[
indent
]
indent
.
length
)
;
}
if
(
first
)
{
/
/
It
was
just
a
simple
inline
text
after
all
.
return
trim
(
first
RE_TRAILING_SPACES
)
;
}
return
null
;
}
/
/
Parse
a
complex
pattern
as
an
array
of
elements
.
function
parsePatternElements
(
elements
=
[
]
commonIndent
)
{
let
placeableCount
=
0
;
while
(
true
)
{
if
(
test
(
RE_TEXT_RUN
)
)
{
elements
.
push
(
match1
(
RE_TEXT_RUN
)
)
;
continue
;
}
if
(
source
[
cursor
]
=
=
=
"
{
"
)
{
if
(
+
+
placeableCount
>
MAX_PLACEABLES
)
{
throw
new
FluentError
(
"
Too
many
placeables
"
)
;
}
elements
.
push
(
parsePlaceable
(
)
)
;
continue
;
}
if
(
source
[
cursor
]
=
=
=
"
}
"
)
{
throw
new
FluentError
(
"
Unbalanced
closing
brace
"
)
;
}
let
indent
=
parseIndent
(
)
;
if
(
indent
)
{
elements
.
push
(
indent
)
;
commonIndent
=
Math
.
min
(
commonIndent
indent
.
length
)
;
continue
;
}
break
;
}
let
lastIndex
=
elements
.
length
-
1
;
/
/
Trim
the
trailing
spaces
in
the
last
element
if
it
'
s
a
TextElement
.
if
(
typeof
elements
[
lastIndex
]
=
=
=
"
string
"
)
{
elements
[
lastIndex
]
=
trim
(
elements
[
lastIndex
]
RE_TRAILING_SPACES
)
;
}
let
baked
=
[
]
;
for
(
let
element
of
elements
)
{
if
(
element
.
type
=
=
=
"
indent
"
)
{
/
/
Dedent
indented
lines
by
the
maximum
common
indent
.
element
=
element
.
value
.
slice
(
0
element
.
value
.
length
-
commonIndent
)
;
}
else
if
(
element
.
type
=
=
=
"
str
"
)
{
/
/
Optimize
StringLiterals
into
their
value
.
element
=
element
.
value
;
}
if
(
element
)
{
baked
.
push
(
element
)
;
}
}
return
baked
;
}
function
parsePlaceable
(
)
{
consumeToken
(
TOKEN_BRACE_OPEN
FluentError
)
;
let
selector
=
parseInlineExpression
(
)
;
if
(
consumeToken
(
TOKEN_BRACE_CLOSE
)
)
{
return
selector
;
}
if
(
consumeToken
(
TOKEN_ARROW
)
)
{
let
variants
=
parseVariants
(
)
;
consumeToken
(
TOKEN_BRACE_CLOSE
FluentError
)
;
return
{
type
:
"
select
"
selector
.
.
.
variants
}
;
}
throw
new
FluentError
(
"
Unclosed
placeable
"
)
;
}
function
parseInlineExpression
(
)
{
if
(
source
[
cursor
]
=
=
=
"
{
"
)
{
/
/
It
'
s
a
nested
placeable
.
return
parsePlaceable
(
)
;
}
if
(
test
(
RE_REFERENCE
)
)
{
let
[
sigil
name
attr
=
null
]
=
match
(
RE_REFERENCE
)
;
if
(
sigil
=
=
=
"
"
)
{
return
{
type
:
"
var
"
name
}
;
}
if
(
consumeToken
(
TOKEN_PAREN_OPEN
)
)
{
let
args
=
parseArguments
(
)
;
if
(
sigil
=
=
=
"
-
"
)
{
/
/
A
parameterized
term
:
-
term
(
.
.
.
)
.
return
{
type
:
"
term
"
name
attr
args
}
;
}
if
(
RE_FUNCTION_NAME
.
test
(
name
)
)
{
return
{
type
:
"
func
"
name
args
}
;
}
throw
new
FluentError
(
"
Function
names
must
be
all
upper
-
case
"
)
;
}
if
(
sigil
=
=
=
"
-
"
)
{
/
/
A
non
-
parameterized
term
:
-
term
.
return
{
type
:
"
term
"
name
attr
args
:
[
]
}
;
}
return
{
type
:
"
mesg
"
name
attr
}
;
}
return
parseLiteral
(
)
;
}
function
parseArguments
(
)
{
let
args
=
[
]
;
while
(
true
)
{
switch
(
source
[
cursor
]
)
{
case
"
)
"
:
/
/
End
of
the
argument
list
.
cursor
+
+
;
return
args
;
case
undefined
:
/
/
EOF
throw
new
FluentError
(
"
Unclosed
argument
list
"
)
;
}
args
.
push
(
parseArgument
(
)
)
;
/
/
Commas
between
arguments
are
treated
as
whitespace
.
consumeToken
(
TOKEN_COMMA
)
;
}
}
function
parseArgument
(
)
{
let
expr
=
parseInlineExpression
(
)
;
if
(
expr
.
type
!
=
=
"
mesg
"
)
{
return
expr
;
}
if
(
consumeToken
(
TOKEN_COLON
)
)
{
/
/
The
reference
is
the
beginning
of
a
named
argument
.
return
{
type
:
"
narg
"
name
:
expr
.
name
value
:
parseLiteral
(
)
}
;
}
/
/
It
'
s
a
regular
message
reference
.
return
expr
;
}
function
parseVariants
(
)
{
let
variants
=
[
]
;
let
count
=
0
;
let
star
;
while
(
test
(
RE_VARIANT_START
)
)
{
if
(
consumeChar
(
"
*
"
)
)
{
star
=
count
;
}
let
key
=
parseVariantKey
(
)
;
let
value
=
parsePattern
(
)
;
if
(
value
=
=
=
null
)
{
throw
new
FluentError
(
"
Expected
variant
value
"
)
;
}
variants
[
count
+
+
]
=
{
key
value
}
;
}
if
(
count
=
=
=
0
)
{
return
null
;
}
if
(
star
=
=
=
undefined
)
{
throw
new
FluentError
(
"
Expected
default
variant
"
)
;
}
return
{
variants
star
}
;
}
function
parseVariantKey
(
)
{
consumeToken
(
TOKEN_BRACKET_OPEN
FluentError
)
;
let
key
=
test
(
RE_NUMBER_LITERAL
)
?
parseNumberLiteral
(
)
:
match1
(
RE_IDENTIFIER
)
;
consumeToken
(
TOKEN_BRACKET_CLOSE
FluentError
)
;
return
key
;
}
function
parseLiteral
(
)
{
if
(
test
(
RE_NUMBER_LITERAL
)
)
{
return
parseNumberLiteral
(
)
;
}
if
(
source
[
cursor
]
=
=
=
"
\
"
"
)
{
return
parseStringLiteral
(
)
;
}
throw
new
FluentError
(
"
Invalid
expression
"
)
;
}
function
parseNumberLiteral
(
)
{
let
[
value
fraction
=
"
"
]
=
match
(
RE_NUMBER_LITERAL
)
;
let
precision
=
fraction
.
length
;
return
{
type
:
"
num
"
value
:
parseFloat
(
value
)
precision
}
;
}
function
parseStringLiteral
(
)
{
consumeChar
(
"
\
"
"
FluentError
)
;
let
value
=
"
"
;
while
(
true
)
{
value
+
=
match1
(
RE_STRING_RUN
)
;
if
(
source
[
cursor
]
=
=
=
"
\
\
"
)
{
value
+
=
parseEscapeSequence
(
)
;
continue
;
}
if
(
consumeChar
(
"
\
"
"
)
)
{
return
{
type
:
"
str
"
value
}
;
}
/
/
We
'
ve
reached
an
EOL
of
EOF
.
throw
new
FluentError
(
"
Unclosed
string
literal
"
)
;
}
}
/
/
Unescape
known
escape
sequences
.
function
parseEscapeSequence
(
)
{
if
(
test
(
RE_STRING_ESCAPE
)
)
{
return
match1
(
RE_STRING_ESCAPE
)
;
}
if
(
test
(
RE_UNICODE_ESCAPE
)
)
{
let
[
codepoint4
codepoint6
]
=
match
(
RE_UNICODE_ESCAPE
)
;
let
codepoint
=
parseInt
(
codepoint4
|
|
codepoint6
16
)
;
return
codepoint
<
=
0xD7FF
|
|
0xE000
<
=
codepoint
/
/
It
'
s
a
Unicode
scalar
value
.
?
String
.
fromCodePoint
(
codepoint
)
/
/
Lonely
surrogates
can
cause
trouble
when
the
parsing
result
is
/
/
saved
using
UTF
-
8
.
Use
U
+
FFFD
REPLACEMENT
CHARACTER
instead
.
:
"
"
;
}
throw
new
FluentError
(
"
Unknown
escape
sequence
"
)
;
}
/
/
Parse
blank
space
.
Return
it
if
it
looks
like
indent
before
a
pattern
/
/
line
.
Skip
it
othwerwise
.
function
parseIndent
(
)
{
let
start
=
cursor
;
consumeToken
(
TOKEN_BLANK
)
;
/
/
Check
the
first
non
-
blank
character
after
the
indent
.
switch
(
source
[
cursor
]
)
{
case
"
.
"
:
case
"
[
"
:
case
"
*
"
:
case
"
}
"
:
case
undefined
:
/
/
EOF
/
/
A
special
character
.
End
the
Pattern
.
return
false
;
case
"
{
"
:
/
/
Placeables
don
'
t
require
indentation
(
in
EBNF
:
block
-
placeable
)
.
/
/
Continue
the
Pattern
.
return
makeIndent
(
source
.
slice
(
start
cursor
)
)
;
}
/
/
If
the
first
character
on
the
line
is
not
one
of
the
special
characters
/
/
listed
above
it
'
s
a
regular
text
character
.
Check
if
there
'
s
at
least
/
/
one
space
of
indent
before
it
.
if
(
source
[
cursor
-
1
]
=
=
=
"
"
)
{
/
/
It
'
s
an
indented
text
character
(
in
EBNF
:
indented
-
char
)
.
Continue
/
/
the
Pattern
.
return
makeIndent
(
source
.
slice
(
start
cursor
)
)
;
}
/
/
A
not
-
indented
text
character
is
likely
the
identifier
of
the
next
/
/
message
.
End
the
Pattern
.
return
false
;
}
/
/
Trim
blanks
in
text
according
to
the
given
regex
.
function
trim
(
text
re
)
{
return
text
.
replace
(
re
"
"
)
;
}
/
/
Normalize
a
blank
block
and
extract
the
indent
details
.
function
makeIndent
(
blank
)
{
let
value
=
blank
.
replace
(
RE_BLANK_LINES
"
\
n
"
)
;
let
length
=
RE_INDENT
.
exec
(
blank
)
[
1
]
.
length
;
return
{
type
:
"
indent
"
value
length
}
;
}
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
bundle
.
js
/
*
*
*
Message
bundles
are
single
-
language
stores
of
translations
.
They
are
*
responsible
for
parsing
translation
resources
in
the
Fluent
syntax
and
can
*
format
translation
units
(
entities
)
to
strings
.
*
*
Always
use
FluentBundle
.
format
to
retrieve
translation
units
from
a
*
bundle
.
Translations
can
contain
references
to
other
entities
or
variables
*
conditional
logic
in
form
of
select
expressions
traits
which
describe
their
*
grammatical
features
and
can
use
Fluent
builtins
which
make
use
of
the
*
Intl
formatters
to
format
numbers
dates
lists
and
more
into
the
*
bundle
'
s
language
.
See
the
documentation
of
the
Fluent
syntax
for
more
*
information
.
*
/
class
bundle_FluentBundle
{
/
*
*
*
Create
an
instance
of
FluentBundle
.
*
*
The
locales
argument
is
used
to
instantiate
Intl
formatters
used
by
*
translations
.
The
options
object
can
be
used
to
configure
the
bundle
.
*
*
Examples
:
*
*
const
bundle
=
new
FluentBundle
(
locales
)
;
*
*
const
bundle
=
new
FluentBundle
(
locales
{
useIsolating
:
false
}
)
;
*
*
const
bundle
=
new
FluentBundle
(
locales
{
*
useIsolating
:
true
*
functions
:
{
*
NODE_ENV
:
(
)
=
>
process
.
env
.
NODE_ENV
*
}
*
}
)
;
*
*
Available
options
:
*
*
-
functions
-
an
object
of
additional
functions
available
to
*
translations
as
builtins
.
*
*
-
useIsolating
-
boolean
specifying
whether
to
use
Unicode
isolation
*
marks
(
FSI
PDI
)
for
bidi
interpolations
.
*
Default
:
true
*
*
-
transform
-
a
function
used
to
transform
string
parts
of
patterns
.
*
*
param
{
string
|
Array
<
string
>
}
locales
-
Locale
or
locales
of
the
bundle
*
param
{
Object
}
[
options
]
*
returns
{
FluentBundle
}
*
/
constructor
(
locales
{
functions
=
{
}
useIsolating
=
true
transform
=
v
=
>
v
}
=
{
}
)
{
this
.
locales
=
Array
.
isArray
(
locales
)
?
locales
:
[
locales
]
;
this
.
_terms
=
new
Map
(
)
;
this
.
_messages
=
new
Map
(
)
;
this
.
_functions
=
functions
;
this
.
_useIsolating
=
useIsolating
;
this
.
_transform
=
transform
;
this
.
_intls
=
new
WeakMap
(
)
;
}
/
*
*
Return
an
iterator
over
public
[
id
message
]
pairs
.
*
*
returns
{
Iterator
}
*
/
get
messages
(
)
{
return
this
.
_messages
[
Symbol
.
iterator
]
(
)
;
}
/
*
*
Check
if
a
message
is
present
in
the
bundle
.
*
*
param
{
string
}
id
-
The
identifier
of
the
message
to
check
.
*
returns
{
bool
}
*
/
hasMessage
(
id
)
{
return
this
.
_messages
.
has
(
id
)
;
}
/
*
*
Return
the
internal
representation
of
a
message
.
*
*
The
internal
representation
should
only
be
used
as
an
argument
to
*
FluentBundle
.
format
.
*
*
param
{
string
}
id
-
The
identifier
of
the
message
to
check
.
*
returns
{
Any
}
*
/
getMessage
(
id
)
{
return
this
.
_messages
.
get
(
id
)
;
}
/
*
*
*
Add
a
translation
resource
to
the
bundle
.
*
*
The
translation
resource
must
use
the
Fluent
syntax
.
It
will
be
parsed
by
*
the
bundle
and
each
translation
unit
(
message
)
will
be
available
in
the
*
bundle
by
its
identifier
.
*
*
bundle
.
addMessages
(
'
foo
=
Foo
'
)
;
*
bundle
.
getMessage
(
'
foo
'
)
;
*
*
/
/
Returns
a
raw
representation
of
the
'
foo
'
message
.
*
*
bundle
.
addMessages
(
'
bar
=
Bar
'
)
;
*
bundle
.
addMessages
(
'
bar
=
Newbar
'
{
allowOverrides
:
true
}
)
;
*
bundle
.
getMessage
(
'
bar
'
)
;
*
*
/
/
Returns
a
raw
representation
of
the
'
bar
'
message
:
Newbar
.
*
*
Parsed
entities
should
be
formatted
with
the
format
method
in
case
they
*
contain
logic
(
references
select
expressions
etc
.
)
.
*
*
Available
options
:
*
*
-
allowOverrides
-
boolean
specifying
whether
it
'
s
allowed
to
override
*
an
existing
message
or
term
with
a
new
value
.
*
Default
:
false
*
*
param
{
string
}
source
-
Text
resource
with
translations
.
*
param
{
Object
}
[
options
]
*
returns
{
Array
<
Error
>
}
*
/
addMessages
(
source
options
)
{
const
res
=
resource_FluentResource
.
fromString
(
source
)
;
return
this
.
addResource
(
res
options
)
;
}
/
*
*
*
Add
a
translation
resource
to
the
bundle
.
*
*
The
translation
resource
must
be
an
instance
of
FluentResource
*
e
.
g
.
parsed
by
FluentResource
.
fromString
.
*
*
let
res
=
FluentResource
.
fromString
(
"
foo
=
Foo
"
)
;
*
bundle
.
addResource
(
res
)
;
*
bundle
.
getMessage
(
'
foo
'
)
;
*
*
/
/
Returns
a
raw
representation
of
the
'
foo
'
message
.
*
*
let
res
=
FluentResource
.
fromString
(
"
bar
=
Bar
"
)
;
*
bundle
.
addResource
(
res
)
;
*
res
=
FluentResource
.
fromString
(
"
bar
=
Newbar
"
)
;
*
bundle
.
addResource
(
res
{
allowOverrides
:
true
}
)
;
*
bundle
.
getMessage
(
'
bar
'
)
;
*
*
/
/
Returns
a
raw
representation
of
the
'
bar
'
message
:
Newbar
.
*
*
Parsed
entities
should
be
formatted
with
the
format
method
in
case
they
*
contain
logic
(
references
select
expressions
etc
.
)
.
*
*
Available
options
:
*
*
-
allowOverrides
-
boolean
specifying
whether
it
'
s
allowed
to
override
*
an
existing
message
or
term
with
a
new
value
.
*
Default
:
false
*
*
param
{
FluentResource
}
res
-
FluentResource
object
.
*
param
{
Object
}
[
options
]
*
returns
{
Array
<
Error
>
}
*
/
addResource
(
res
{
allowOverrides
=
false
}
=
{
}
)
{
const
errors
=
[
]
;
for
(
const
[
id
value
]
of
res
)
{
if
(
id
.
startsWith
(
"
-
"
)
)
{
/
/
Identifiers
starting
with
a
dash
(
-
)
define
terms
.
Terms
are
private
/
/
and
cannot
be
retrieved
from
FluentBundle
.
if
(
allowOverrides
=
=
=
false
&
&
this
.
_terms
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
term
:
"
{
id
}
"
)
;
continue
;
}
this
.
_terms
.
set
(
id
value
)
;
}
else
{
if
(
allowOverrides
=
=
=
false
&
&
this
.
_messages
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
message
:
"
{
id
}
"
)
;
continue
;
}
this
.
_messages
.
set
(
id
value
)
;
}
}
return
errors
;
}
/
*
*
*
Format
a
message
to
a
string
or
null
.
*
*
Format
a
raw
message
from
the
bundle
into
a
string
(
or
a
null
if
it
has
*
a
null
value
)
.
args
will
be
used
to
resolve
references
to
variables
*
passed
as
arguments
to
the
translation
.
*
*
In
case
of
errors
format
will
try
to
salvage
as
much
of
the
translation
*
as
possible
and
will
still
return
a
string
.
For
performance
reasons
the
*
encountered
errors
are
not
returned
but
instead
are
appended
to
the
*
errors
array
passed
as
the
third
argument
.
*
*
const
errors
=
[
]
;
*
bundle
.
addMessages
(
'
hello
=
Hello
{
name
}
!
'
)
;
*
const
hello
=
bundle
.
getMessage
(
'
hello
'
)
;
*
bundle
.
format
(
hello
{
name
:
'
Jane
'
}
errors
)
;
*
*
/
/
Returns
'
Hello
Jane
!
'
and
errors
is
empty
.
*
*
bundle
.
format
(
hello
undefined
errors
)
;
*
*
/
/
Returns
'
Hello
name
!
'
and
errors
is
now
:
*
*
[
<
ReferenceError
:
Unknown
variable
:
name
>
]
*
*
param
{
Object
|
string
}
message
*
param
{
Object
|
undefined
}
args
*
param
{
Array
}
errors
*
returns
{
?
string
}
*
/
format
(
message
args
errors
)
{
/
/
optimize
entities
which
are
simple
strings
with
no
attributes
if
(
typeof
message
=
=
=
"
string
"
)
{
return
this
.
_transform
(
message
)
;
}
/
/
optimize
entities
with
null
values
if
(
message
=
=
=
null
|
|
message
.
value
=
=
=
null
)
{
return
null
;
}
/
/
optimize
simple
-
string
entities
with
attributes
if
(
typeof
message
.
value
=
=
=
"
string
"
)
{
return
this
.
_transform
(
message
.
value
)
;
}
return
resolve
(
this
args
message
errors
)
;
}
_memoizeIntlObject
(
ctor
opts
)
{
const
cache
=
this
.
_intls
.
get
(
ctor
)
|
|
{
}
;
const
id
=
JSON
.
stringify
(
opts
)
;
if
(
!
cache
[
id
]
)
{
cache
[
id
]
=
new
ctor
(
this
.
locales
opts
)
;
this
.
_intls
.
set
(
ctor
cache
)
;
}
return
cache
[
id
]
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
util
.
js
function
nonBlank
(
line
)
{
return
!
/
^
\
s
*
/
.
test
(
line
)
;
}
function
countIndent
(
line
)
{
const
[
indent
]
=
line
.
match
(
/
^
\
s
*
/
)
;
return
indent
.
length
;
}
/
*
*
*
Template
literal
tag
for
dedenting
FTL
code
.
*
*
Strip
the
common
indent
of
non
-
blank
lines
.
Remove
blank
lines
.
*
*
param
{
Array
<
string
>
}
strings
*
/
function
ftl
(
strings
)
{
const
[
code
]
=
strings
;
const
lines
=
code
.
split
(
"
\
n
"
)
.
filter
(
nonBlank
)
;
const
indents
=
lines
.
map
(
countIndent
)
;
const
common
=
Math
.
min
(
.
.
.
indents
)
;
const
indent
=
new
RegExp
(
^
\
\
s
{
{
common
}
}
)
;
return
lines
.
map
(
line
=
>
line
.
replace
(
indent
"
"
)
)
.
join
(
"
\
n
"
)
;
}
/
/
CONCATENATED
MODULE
:
.
/
node_modules
/
fluent
/
src
/
index
.
js
/
*
*
module
fluent
*
overview
*
*
fluent
is
a
JavaScript
implementation
of
Project
Fluent
a
localization
*
framework
designed
to
unleash
the
expressive
power
of
the
natural
language
.
*
*
/
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
rich
-
text
-
strings
.
js
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
RICH_TEXT_KEYS
"
function
(
)
{
return
RICH_TEXT_KEYS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
generateBundles
"
function
(
)
{
return
generateBundles
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
*
Properties
that
allow
rich
text
MUST
be
added
to
this
list
.
*
key
:
the
localization_id
that
should
be
used
*
value
:
a
property
or
array
of
properties
on
the
message
.
content
object
*
/
const
RICH_TEXT_CONFIG
=
{
text
:
[
"
text
"
"
scene1_text
"
]
success_text
:
"
success_text
"
error_text
:
"
error_text
"
scene2_text
:
"
scene2_text
"
amo_html
:
"
amo_html
"
privacy_html
:
"
scene2_privacy_html
"
disclaimer_html
:
"
scene2_disclaimer_html
"
}
;
const
RICH_TEXT_KEYS
=
Object
.
keys
(
RICH_TEXT_CONFIG
)
;
/
*
*
*
Generates
an
array
of
messages
suitable
for
fluent
'
s
localization
provider
*
including
all
needed
strings
for
rich
text
.
*
param
{
object
}
content
A
.
content
object
from
an
ASR
message
(
i
.
e
.
message
.
content
)
*
returns
{
FluentBundle
[
]
}
A
array
containing
the
fluent
message
context
*
/
function
generateBundles
(
content
)
{
const
bundle
=
new
bundle_FluentBundle
(
"
en
-
US
"
)
;
RICH_TEXT_KEYS
.
forEach
(
key
=
>
{
const
attrs
=
RICH_TEXT_CONFIG
[
key
]
;
const
attrsToTry
=
Array
.
isArray
(
attrs
)
?
[
.
.
.
attrs
]
:
[
attrs
]
;
let
string
=
"
"
;
while
(
!
string
&
&
attrsToTry
.
length
)
{
const
attr
=
attrsToTry
.
pop
(
)
;
string
=
content
[
attr
]
;
}
bundle
.
addMessages
(
{
key
}
=
{
string
}
)
;
}
)
;
return
[
bundle
]
;
}
/
*
*
*
/
}
)
/
*
81
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
EXTERNAL
MODULE
:
.
/
common
/
Actions
.
jsm
var
Actions
=
__webpack_require__
(
2
)
;
/
/
CONCATENATED
MODULE
:
.
/
common
/
Dedupe
.
jsm
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Dedupe
{
constructor
(
createKey
)
{
this
.
createKey
=
createKey
|
|
this
.
defaultCreateKey
;
}
defaultCreateKey
(
item
)
{
return
item
;
}
/
*
*
*
Dedupe
any
number
of
grouped
elements
favoring
those
from
earlier
groups
.
*
*
param
{
Array
}
groups
Contains
an
arbitrary
number
of
arrays
of
elements
.
*
returns
{
Array
}
A
matching
array
of
each
provided
group
deduped
.
*
/
group
(
.
.
.
groups
)
{
const
globalKeys
=
new
Set
(
)
;
const
result
=
[
]
;
for
(
const
values
of
groups
)
{
const
valueMap
=
new
Map
(
)
;
for
(
const
value
of
values
)
{
const
key
=
this
.
createKey
(
value
)
;
if
(
!
globalKeys
.
has
(
key
)
&
&
!
valueMap
.
has
(
key
)
)
{
valueMap
.
set
(
key
value
)
;
}
}
result
.
push
(
valueMap
)
;
valueMap
.
forEach
(
(
value
key
)
=
>
globalKeys
.
add
(
key
)
)
;
}
return
result
.
map
(
m
=
>
Array
.
from
(
m
.
values
(
)
)
)
;
}
}
/
/
CONCATENATED
MODULE
:
.
/
common
/
Reducers
.
jsm
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_DEFAULT_ROWS
"
function
(
)
{
return
TOP_SITES_DEFAULT_ROWS
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TOP_SITES_MAX_SITES_PER_ROW
"
function
(
)
{
return
TOP_SITES_MAX_SITES_PER_ROW
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
INITIAL_STATE
"
function
(
)
{
return
INITIAL_STATE
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
insertPinned
"
function
(
)
{
return
insertPinned
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
reducers
"
function
(
)
{
return
reducers
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
TOP_SITES_DEFAULT_ROWS
=
1
;
const
TOP_SITES_MAX_SITES_PER_ROW
=
8
;
const
dedupe
=
new
Dedupe
(
site
=
>
site
&
&
site
.
url
)
;
const
INITIAL_STATE
=
{
App
:
{
/
/
Have
we
received
real
data
from
the
app
yet
?
initialized
:
false
}
ASRouter
:
{
initialized
:
false
}
Snippets
:
{
initialized
:
false
}
TopSites
:
{
/
/
Have
we
received
real
data
from
history
yet
?
initialized
:
false
/
/
The
history
(
and
possibly
default
)
links
rows
:
[
]
/
/
Used
in
content
only
to
dispatch
action
to
TopSiteForm
.
editForm
:
null
/
/
Used
in
content
only
to
open
the
SearchShortcutsForm
modal
.
showSearchShortcutsForm
:
false
/
/
The
list
of
available
search
shortcuts
.
searchShortcuts
:
[
]
}
Prefs
:
{
initialized
:
false
values
:
{
}
}
Dialog
:
{
visible
:
false
data
:
{
}
}
Sections
:
[
]
Pocket
:
{
isUserLoggedIn
:
null
pocketCta
:
{
}
waitingForSpoc
:
true
}
/
/
This
is
the
new
pocket
configurable
layout
state
.
DiscoveryStream
:
{
/
/
This
is
a
JSON
-
parsed
copy
of
the
discoverystream
.
config
pref
value
.
config
:
{
enabled
:
false
layout_endpoint
:
"
"
}
layout
:
[
]
lastUpdated
:
null
isPrivacyInfoModalVisible
:
false
feeds
:
{
data
:
{
/
/
"
https
:
/
/
foo
.
com
/
feed1
"
:
{
lastUpdated
:
123
data
:
[
]
}
}
loaded
:
false
}
spocs
:
{
spocs_endpoint
:
"
"
spocs_per_domain
:
1
lastUpdated
:
null
data
:
{
}
/
/
{
spocs
:
[
]
}
loaded
:
false
frequency_caps
:
[
]
blocked
:
[
]
placements
:
[
]
}
}
Search
:
{
/
/
When
search
hand
-
off
is
enabled
we
render
a
big
button
that
is
styled
to
/
/
look
like
a
search
textbox
.
If
the
button
is
clicked
we
style
/
/
the
button
as
if
it
was
a
focused
search
box
and
show
a
fake
cursor
but
/
/
really
focus
the
awesomebar
without
the
focus
styles
(
"
hidden
focus
"
)
.
fakeFocus
:
false
/
/
Hide
the
search
box
after
handing
off
to
AwesomeBar
and
user
starts
typing
.
hide
:
false
}
}
;
function
App
(
prevState
=
INITIAL_STATE
.
App
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
INIT
:
return
Object
.
assign
(
{
}
prevState
action
.
data
|
|
{
}
{
initialized
:
true
}
)
;
default
:
return
prevState
;
}
}
function
ASRouter
(
prevState
=
INITIAL_STATE
.
ASRouter
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
AS_ROUTER_INITIALIZED
:
return
{
.
.
.
action
.
data
initialized
:
true
}
;
default
:
return
prevState
;
}
}
/
*
*
*
insertPinned
-
Inserts
pinned
links
in
their
specified
slots
*
*
param
{
array
}
a
list
of
links
*
param
{
array
}
a
list
of
pinned
links
*
return
{
array
}
resulting
list
of
links
with
pinned
links
inserted
*
/
function
insertPinned
(
links
pinned
)
{
/
/
Remove
any
pinned
links
const
pinnedUrls
=
pinned
.
map
(
link
=
>
link
&
&
link
.
url
)
;
let
newLinks
=
links
.
filter
(
link
=
>
link
?
!
pinnedUrls
.
includes
(
link
.
url
)
:
false
)
;
newLinks
=
newLinks
.
map
(
link
=
>
{
if
(
link
&
&
link
.
isPinned
)
{
delete
link
.
isPinned
;
delete
link
.
pinIndex
;
}
return
link
;
}
)
;
/
/
Then
insert
them
in
their
specified
location
pinned
.
forEach
(
(
val
index
)
=
>
{
if
(
!
val
)
{
return
;
}
let
link
=
Object
.
assign
(
{
}
val
{
isPinned
:
true
pinIndex
:
index
}
)
;
if
(
index
>
newLinks
.
length
)
{
newLinks
[
index
]
=
link
;
}
else
{
newLinks
.
splice
(
index
0
link
)
;
}
}
)
;
return
newLinks
;
}
function
TopSites
(
prevState
=
INITIAL_STATE
.
TopSites
action
)
{
let
hasMatch
;
let
newRows
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_UPDATED
:
if
(
!
action
.
data
|
|
!
action
.
data
.
links
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
rows
:
action
.
data
.
links
}
action
.
data
.
pref
?
{
pref
:
action
.
data
.
pref
}
:
{
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_PREFS_UPDATED
:
return
Object
.
assign
(
{
}
prevState
{
pref
:
action
.
data
.
pref
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_EDIT
:
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
action
.
data
.
index
previewResponse
:
null
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_CANCEL_EDIT
:
return
Object
.
assign
(
{
}
prevState
{
editForm
:
null
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
:
return
Object
.
assign
(
{
}
prevState
{
showSearchShortcutsForm
:
true
}
)
;
case
Actions
[
"
actionTypes
"
]
.
TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
:
return
Object
.
assign
(
{
}
prevState
{
showSearchShortcutsForm
:
false
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_RESPONSE
:
if
(
!
prevState
.
editForm
|
|
action
.
data
.
url
!
=
=
prevState
.
editForm
.
previewUrl
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
action
.
data
.
preview
previewUrl
:
action
.
data
.
url
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST
:
if
(
!
prevState
.
editForm
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
null
previewUrl
:
action
.
data
.
url
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST_CANCEL
:
if
(
!
prevState
.
editForm
)
{
return
prevState
;
}
return
Object
.
assign
(
{
}
prevState
{
editForm
:
{
index
:
prevState
.
editForm
.
index
previewResponse
:
null
}
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SCREENSHOT_UPDATED
:
newRows
=
prevState
.
rows
.
map
(
row
=
>
{
if
(
row
&
&
row
.
url
=
=
=
action
.
data
.
url
)
{
hasMatch
=
true
;
return
Object
.
assign
(
{
}
row
{
screenshot
:
action
.
data
.
screenshot
}
)
;
}
return
row
;
}
)
;
return
hasMatch
?
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
:
prevState
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_ADDED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
map
(
site
=
>
{
if
(
site
&
&
site
.
url
=
=
=
action
.
data
.
url
)
{
const
{
bookmarkGuid
bookmarkTitle
dateAdded
}
=
action
.
data
;
return
Object
.
assign
(
{
}
site
{
bookmarkGuid
bookmarkTitle
bookmarkDateCreated
:
dateAdded
}
)
;
}
return
site
;
}
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_REMOVED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
map
(
site
=
>
{
if
(
site
&
&
site
.
url
=
=
=
action
.
data
.
url
)
{
const
newSite
=
Object
.
assign
(
{
}
site
)
;
delete
newSite
.
bookmarkGuid
;
delete
newSite
.
bookmarkTitle
;
delete
newSite
.
bookmarkDateCreated
;
return
newSite
;
}
return
site
;
}
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_DELETED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
newRows
=
prevState
.
rows
.
filter
(
site
=
>
action
.
data
.
url
!
=
=
site
.
url
)
;
return
Object
.
assign
(
{
}
prevState
{
rows
:
newRows
}
)
;
case
Actions
[
"
actionTypes
"
]
.
UPDATE_SEARCH_SHORTCUTS
:
return
{
.
.
.
prevState
searchShortcuts
:
action
.
data
.
searchShortcuts
}
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_PREVIEW_MODE
:
return
{
.
.
.
prevState
rows
:
[
]
}
;
default
:
return
prevState
;
}
}
function
Dialog
(
prevState
=
INITIAL_STATE
.
Dialog
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
DIALOG_OPEN
:
return
Object
.
assign
(
{
}
prevState
{
visible
:
true
data
:
action
.
data
}
)
;
case
Actions
[
"
actionTypes
"
]
.
DIALOG_CANCEL
:
return
Object
.
assign
(
{
}
prevState
{
visible
:
false
}
)
;
case
Actions
[
"
actionTypes
"
]
.
DELETE_HISTORY_URL
:
return
Object
.
assign
(
{
}
INITIAL_STATE
.
Dialog
)
;
default
:
return
prevState
;
}
}
function
Prefs
(
prevState
=
INITIAL_STATE
.
Prefs
action
)
{
let
newValues
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
PREFS_INITIAL_VALUES
:
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
values
:
action
.
data
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PREF_CHANGED
:
newValues
=
Object
.
assign
(
{
}
prevState
.
values
)
;
newValues
[
action
.
data
.
name
]
=
action
.
data
.
value
;
return
Object
.
assign
(
{
}
prevState
{
values
:
newValues
}
)
;
default
:
return
prevState
;
}
}
function
Sections
(
prevState
=
INITIAL_STATE
.
Sections
action
)
{
let
hasMatch
;
let
newState
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
SECTION_DEREGISTER
:
return
prevState
.
filter
(
section
=
>
section
.
id
!
=
=
action
.
data
)
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_REGISTER
:
/
/
If
section
exists
in
prevState
update
it
newState
=
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
)
{
hasMatch
=
true
;
return
Object
.
assign
(
{
}
section
action
.
data
)
;
}
return
section
;
}
)
;
/
/
Otherwise
append
it
if
(
!
hasMatch
)
{
const
initialized
=
!
!
(
action
.
data
.
rows
&
&
!
!
action
.
data
.
rows
.
length
)
;
const
section
=
Object
.
assign
(
{
title
:
"
"
rows
:
[
]
enabled
:
false
}
action
.
data
{
initialized
}
)
;
newState
.
push
(
section
)
;
}
return
newState
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_UPDATE
:
newState
=
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
)
{
/
/
If
the
action
is
updating
rows
we
should
consider
initialized
to
be
true
.
/
/
This
can
be
overridden
if
initialized
is
defined
in
the
action
.
data
const
initialized
=
action
.
data
.
rows
?
{
initialized
:
true
}
:
{
}
;
/
/
Make
sure
pinned
cards
stay
at
their
current
position
when
rows
are
updated
.
/
/
Disabling
a
section
(
SECTION_UPDATE
with
empty
rows
)
does
not
retain
pinned
cards
.
if
(
action
.
data
.
rows
&
&
!
!
action
.
data
.
rows
.
length
&
&
section
.
rows
.
find
(
card
=
>
card
.
pinned
)
)
{
const
rows
=
Array
.
from
(
action
.
data
.
rows
)
;
section
.
rows
.
forEach
(
(
card
index
)
=
>
{
if
(
card
.
pinned
)
{
/
/
Only
add
it
if
it
'
s
not
already
there
.
if
(
rows
[
index
]
.
guid
!
=
=
card
.
guid
)
{
rows
.
splice
(
index
0
card
)
;
}
}
}
)
;
return
Object
.
assign
(
{
}
section
initialized
Object
.
assign
(
{
}
action
.
data
{
rows
}
)
)
;
}
return
Object
.
assign
(
{
}
section
initialized
action
.
data
)
;
}
return
section
;
}
)
;
if
(
!
action
.
data
.
dedupeConfigurations
)
{
return
newState
;
}
action
.
data
.
dedupeConfigurations
.
forEach
(
dedupeConf
=
>
{
newState
=
newState
.
map
(
section
=
>
{
if
(
section
.
id
=
=
=
dedupeConf
.
id
)
{
const
dedupedRows
=
dedupeConf
.
dedupeFrom
.
reduce
(
(
rows
dedupeSectionId
)
=
>
{
const
dedupeSection
=
newState
.
find
(
s
=
>
s
.
id
=
=
=
dedupeSectionId
)
;
const
[
newRows
]
=
dedupe
.
group
(
dedupeSection
.
rows
rows
)
;
return
newRows
;
}
section
.
rows
)
;
return
Object
.
assign
(
{
}
section
{
rows
:
dedupedRows
}
)
;
}
return
section
;
}
)
;
}
)
;
return
newState
;
case
Actions
[
"
actionTypes
"
]
.
SECTION_UPDATE_CARD
:
return
prevState
.
map
(
section
=
>
{
if
(
section
&
&
section
.
id
=
=
=
action
.
data
.
id
&
&
section
.
rows
)
{
const
newRows
=
section
.
rows
.
map
(
card
=
>
{
if
(
card
.
url
=
=
=
action
.
data
.
url
)
{
return
Object
.
assign
(
{
}
card
action
.
data
.
options
)
;
}
return
card
;
}
)
;
return
Object
.
assign
(
{
}
section
{
rows
:
newRows
}
)
;
}
return
section
;
}
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_ADDED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
/
/
find
the
item
within
the
rows
that
is
attempted
to
be
bookmarked
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
{
bookmarkGuid
bookmarkTitle
dateAdded
}
=
action
.
data
;
return
Object
.
assign
(
{
}
item
{
bookmarkGuid
bookmarkTitle
bookmarkDateCreated
:
dateAdded
type
:
"
bookmark
"
}
)
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_SAVED_TO_POCKET
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
return
Object
.
assign
(
{
}
item
{
open_url
:
action
.
data
.
open_url
pocket_id
:
action
.
data
.
pocket_id
title
:
action
.
data
.
title
type
:
"
pocket
"
}
)
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_REMOVED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
map
(
item
=
>
{
/
/
find
the
bookmark
within
the
rows
that
is
attempted
to
be
removed
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
newSite
=
Object
.
assign
(
{
}
item
)
;
delete
newSite
.
bookmarkGuid
;
delete
newSite
.
bookmarkTitle
;
delete
newSite
.
bookmarkDateCreated
;
if
(
!
newSite
.
type
|
|
newSite
.
type
=
=
=
"
bookmark
"
)
{
newSite
.
type
=
"
history
"
;
}
return
newSite
;
}
return
item
;
}
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_DELETED
:
case
Actions
[
"
actionTypes
"
]
.
PLACES_LINK_BLOCKED
:
if
(
!
action
.
data
)
{
return
prevState
;
}
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
filter
(
site
=
>
site
.
url
!
=
=
action
.
data
.
url
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
DELETE_FROM_POCKET
:
case
Actions
[
"
actionTypes
"
]
.
ARCHIVE_FROM_POCKET
:
return
prevState
.
map
(
section
=
>
Object
.
assign
(
{
}
section
{
rows
:
section
.
rows
.
filter
(
site
=
>
site
.
pocket_id
!
=
=
action
.
data
.
pocket_id
)
}
)
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_PREVIEW_MODE
:
return
prevState
.
map
(
section
=
>
(
{
.
.
.
section
rows
:
[
]
}
)
)
;
default
:
return
prevState
;
}
}
function
Snippets
(
prevState
=
INITIAL_STATE
.
Snippets
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_DATA
:
return
Object
.
assign
(
{
}
prevState
{
initialized
:
true
}
action
.
data
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPET_BLOCKED
:
return
Object
.
assign
(
{
}
prevState
{
blockList
:
prevState
.
blockList
.
concat
(
action
.
data
)
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_BLOCKLIST_CLEARED
:
return
Object
.
assign
(
{
}
prevState
{
blockList
:
[
]
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SNIPPETS_RESET
:
return
INITIAL_STATE
.
Snippets
;
default
:
return
prevState
;
}
}
function
Pocket
(
prevState
=
INITIAL_STATE
.
Pocket
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
POCKET_WAITING_FOR_SPOC
:
return
{
.
.
.
prevState
waitingForSpoc
:
action
.
data
}
;
case
Actions
[
"
actionTypes
"
]
.
POCKET_LOGGED_IN
:
return
{
.
.
.
prevState
isUserLoggedIn
:
!
!
action
.
data
}
;
case
Actions
[
"
actionTypes
"
]
.
POCKET_CTA
:
return
{
.
.
.
prevState
pocketCta
:
{
ctaButton
:
action
.
data
.
cta_button
ctaText
:
action
.
data
.
cta_text
ctaUrl
:
action
.
data
.
cta_url
useCta
:
action
.
data
.
use_cta
}
}
;
default
:
return
prevState
;
}
}
function
DiscoveryStream
(
prevState
=
INITIAL_STATE
.
DiscoveryStream
action
)
{
/
/
Return
if
action
data
is
empty
or
spocs
or
feeds
data
is
not
loaded
const
isNotReady
=
(
)
=
>
!
action
.
data
|
|
!
prevState
.
spocs
.
loaded
|
|
!
prevState
.
feeds
.
loaded
;
const
handlePlacements
=
handleSites
=
>
{
const
{
data
placements
}
=
prevState
.
spocs
;
const
result
=
{
}
;
const
forPlacement
=
placement
=
>
{
const
placementSpocs
=
data
[
placement
.
name
]
;
if
(
!
placementSpocs
|
|
!
placementSpocs
.
length
)
{
return
;
}
result
[
placement
.
name
]
=
handleSites
(
placementSpocs
)
;
}
;
if
(
!
placements
|
|
!
placements
.
length
)
{
[
{
name
:
"
spocs
"
}
]
.
forEach
(
forPlacement
)
;
}
else
{
placements
.
forEach
(
forPlacement
)
;
}
return
result
;
}
;
const
nextState
=
handleSites
=
>
(
{
.
.
.
prevState
spocs
:
{
.
.
.
prevState
.
spocs
data
:
handlePlacements
(
handleSites
)
}
feeds
:
{
.
.
.
prevState
.
feeds
data
:
Object
.
keys
(
prevState
.
feeds
.
data
)
.
reduce
(
(
accumulator
feed_url
)
=
>
{
accumulator
[
feed_url
]
=
{
data
:
{
.
.
.
prevState
.
feeds
.
data
[
feed_url
]
.
data
recommendations
:
handleSites
(
prevState
.
feeds
.
data
[
feed_url
]
.
data
.
recommendations
)
}
}
;
return
accumulator
;
}
{
}
)
}
}
)
;
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_CONFIG_CHANGE
:
/
/
Fall
through
to
a
separate
action
is
so
it
doesn
'
t
trigger
a
listener
update
on
init
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_CONFIG_SETUP
:
return
{
.
.
.
prevState
config
:
action
.
data
|
|
{
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_LAYOUT_UPDATE
:
return
{
.
.
.
prevState
lastUpdated
:
action
.
data
.
lastUpdated
|
|
null
layout
:
action
.
data
.
layout
|
|
[
]
}
;
case
Actions
[
"
actionTypes
"
]
.
HIDE_PRIVACY_INFO
:
return
{
.
.
.
prevState
isPrivacyInfoModalVisible
:
false
}
;
case
Actions
[
"
actionTypes
"
]
.
SHOW_PRIVACY_INFO
:
return
{
.
.
.
prevState
isPrivacyInfoModalVisible
:
true
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_LAYOUT_RESET
:
return
{
.
.
.
INITIAL_STATE
.
DiscoveryStream
config
:
prevState
.
config
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_FEEDS_UPDATE
:
return
{
.
.
.
prevState
feeds
:
{
.
.
.
prevState
.
feeds
loaded
:
true
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_FEED_UPDATE
:
const
newData
=
{
}
;
newData
[
action
.
data
.
url
]
=
action
.
data
.
feed
;
return
{
.
.
.
prevState
feeds
:
{
.
.
.
prevState
.
feeds
data
:
{
.
.
.
prevState
.
feeds
.
data
.
.
.
newData
}
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOCS_CAPS
:
return
{
.
.
.
prevState
spocs
:
{
.
.
.
prevState
.
spocs
frequency_caps
:
[
.
.
.
prevState
.
spocs
.
frequency_caps
.
.
.
action
.
data
]
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOCS_ENDPOINT
:
return
{
.
.
.
prevState
spocs
:
{
.
.
.
INITIAL_STATE
.
DiscoveryStream
.
spocs
spocs_endpoint
:
action
.
data
.
url
|
|
INITIAL_STATE
.
DiscoveryStream
.
spocs
.
spocs_endpoint
spocs_per_domain
:
action
.
data
.
spocs_per_domain
|
|
INITIAL_STATE
.
DiscoveryStream
.
spocs
.
spocs_per_domain
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOCS_PLACEMENTS
:
return
{
.
.
.
prevState
spocs
:
{
.
.
.
prevState
.
spocs
placements
:
action
.
data
.
placements
|
|
INITIAL_STATE
.
DiscoveryStream
.
spocs
.
placements
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOCS_UPDATE
:
if
(
action
.
data
)
{
return
{
.
.
.
prevState
spocs
:
{
.
.
.
prevState
.
spocs
lastUpdated
:
action
.
data
.
lastUpdated
data
:
action
.
data
.
spocs
loaded
:
true
}
}
;
}
return
prevState
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_SPOC_BLOCKED
:
return
{
.
.
.
prevState
spocs
:
{
.
.
.
prevState
.
spocs
blocked
:
[
.
.
.
prevState
.
spocs
.
blocked
action
.
data
.
url
]
}
}
;
case
Actions
[
"
actionTypes
"
]
.
DISCOVERY_STREAM_LINK_BLOCKED
:
return
isNotReady
(
)
?
prevState
:
nextState
(
items
=
>
items
.
filter
(
item
=
>
item
.
url
!
=
=
action
.
data
.
url
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_SAVED_TO_POCKET
:
const
addPocketInfo
=
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
return
Object
.
assign
(
{
}
item
{
open_url
:
action
.
data
.
open_url
pocket_id
:
action
.
data
.
pocket_id
context_type
:
"
pocket
"
}
)
;
}
return
item
;
}
;
return
isNotReady
(
)
?
prevState
:
nextState
(
items
=
>
items
.
map
(
addPocketInfo
)
)
;
case
Actions
[
"
actionTypes
"
]
.
DELETE_FROM_POCKET
:
case
Actions
[
"
actionTypes
"
]
.
ARCHIVE_FROM_POCKET
:
return
isNotReady
(
)
?
prevState
:
nextState
(
items
=
>
items
.
filter
(
item
=
>
item
.
pocket_id
!
=
=
action
.
data
.
pocket_id
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_ADDED
:
const
updateBookmarkInfo
=
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
{
bookmarkGuid
bookmarkTitle
dateAdded
}
=
action
.
data
;
return
Object
.
assign
(
{
}
item
{
bookmarkGuid
bookmarkTitle
bookmarkDateCreated
:
dateAdded
context_type
:
"
bookmark
"
}
)
;
}
return
item
;
}
;
return
isNotReady
(
)
?
prevState
:
nextState
(
items
=
>
items
.
map
(
updateBookmarkInfo
)
)
;
case
Actions
[
"
actionTypes
"
]
.
PLACES_BOOKMARK_REMOVED
:
const
removeBookmarkInfo
=
item
=
>
{
if
(
item
.
url
=
=
=
action
.
data
.
url
)
{
const
newSite
=
Object
.
assign
(
{
}
item
)
;
delete
newSite
.
bookmarkGuid
;
delete
newSite
.
bookmarkTitle
;
delete
newSite
.
bookmarkDateCreated
;
if
(
!
newSite
.
context_type
|
|
newSite
.
context_type
=
=
=
"
bookmark
"
)
{
newSite
.
context_type
=
"
removedBookmark
"
;
}
return
newSite
;
}
return
item
;
}
;
return
isNotReady
(
)
?
prevState
:
nextState
(
items
=
>
items
.
map
(
removeBookmarkInfo
)
)
;
default
:
return
prevState
;
}
}
function
Search
(
prevState
=
INITIAL_STATE
.
Search
action
)
{
switch
(
action
.
type
)
{
case
Actions
[
"
actionTypes
"
]
.
HIDE_SEARCH
:
return
Object
.
assign
(
{
.
.
.
prevState
hide
:
true
}
)
;
case
Actions
[
"
actionTypes
"
]
.
FAKE_FOCUS_SEARCH
:
return
Object
.
assign
(
{
.
.
.
prevState
fakeFocus
:
true
}
)
;
case
Actions
[
"
actionTypes
"
]
.
SHOW_SEARCH
:
return
Object
.
assign
(
{
.
.
.
prevState
hide
:
false
fakeFocus
:
false
}
)
;
default
:
return
prevState
;
}
}
var
reducers
=
{
TopSites
App
ASRouter
Snippets
Prefs
Dialog
Sections
Pocket
DiscoveryStream
Search
}
;
/
*
*
*
/
}
)
/
*
82
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
EXTERNAL
MODULE
:
external
"
React
"
var
external_React_
=
__webpack_require__
(
9
)
;
var
external_React_default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
external_React_
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
Trailhead
/
Trailhead
.
jsx
var
Trailhead
=
__webpack_require__
(
20
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
ReturnToAMO
/
ReturnToAMO
.
jsx
var
ReturnToAMO
=
__webpack_require__
(
24
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FullPageInterrupt
/
FullPageInterrupt
.
jsx
var
FullPageInterrupt
=
__webpack_require__
(
25
)
;
/
/
EXTERNAL
MODULE
:
.
/
node_modules
/
fluent
-
react
/
src
/
index
.
js
+
14
modules
var
src
=
__webpack_require__
(
78
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
rich
-
text
-
strings
.
js
+
8
modules
var
rich_text_strings
=
__webpack_require__
(
80
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FirstRun
/
Interrupt
.
jsx
function
_extends
(
)
{
_extends
=
Object
.
assign
|
|
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
Interrupt_Interrupt
extends
external_React_default
.
a
.
PureComponent
{
render
(
)
{
const
{
cards
onDismiss
onNextScene
message
sendUserActionTelemetry
executeAction
dispatch
fxaEndpoint
UTMTerm
flowParams
}
=
this
.
props
;
switch
(
message
.
template
)
{
case
"
return_to_amo_overlay
"
:
return
external_React_default
.
a
.
createElement
(
src
[
"
LocalizationProvider
"
]
{
bundles
:
Object
(
rich_text_strings
[
"
generateBundles
"
]
)
(
{
amo_html
:
message
.
content
.
text
}
)
}
external_React_default
.
a
.
createElement
(
ReturnToAMO
[
"
ReturnToAMO
"
]
_extends
(
{
}
message
{
document
:
this
.
props
.
document
UISurface
:
"
NEWTAB_OVERLAY
"
onBlock
:
onDismiss
onAction
:
executeAction
sendUserActionTelemetry
:
sendUserActionTelemetry
}
)
)
)
;
case
"
full_page_interrupt
"
:
return
external_React_default
.
a
.
createElement
(
FullPageInterrupt
[
"
FullPageInterrupt
"
]
{
document
:
this
.
props
.
document
cards
:
cards
message
:
message
onBlock
:
onDismiss
onAction
:
executeAction
dispatch
:
dispatch
fxaEndpoint
:
fxaEndpoint
sendUserActionTelemetry
:
sendUserActionTelemetry
UTMTerm
:
UTMTerm
flowParams
:
flowParams
onBlockById
:
this
.
props
.
onBlockById
}
)
;
case
"
trailhead
"
:
return
external_React_default
.
a
.
createElement
(
Trailhead
[
"
Trailhead
"
]
{
document
:
this
.
props
.
document
message
:
message
onNextScene
:
onNextScene
onAction
:
executeAction
sendUserActionTelemetry
:
sendUserActionTelemetry
dispatch
:
dispatch
fxaEndpoint
:
fxaEndpoint
UTMTerm
:
UTMTerm
flowParams
:
flowParams
}
)
;
default
:
throw
new
Error
(
{
message
.
template
}
is
not
a
valid
FirstRun
message
)
;
}
}
}
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FirstRun
/
Triplets
.
jsx
var
Triplets
=
__webpack_require__
(
27
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FirstRun
/
addUtmParams
.
js
var
addUtmParams
=
__webpack_require__
(
23
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
asrouter
/
templates
/
FirstRun
/
FirstRun
.
jsx
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FLUENT_FILES
"
function
(
)
{
return
FLUENT_FILES
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
helpers
"
function
(
)
{
return
helpers
;
}
)
;
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
FirstRun
"
function
(
)
{
return
FirstRun_FirstRun
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
/
Note
:
should
match
the
transition
time
on
.
trailheadCards
in
_Trailhead
.
scss
const
TRANSITION_LENGTH
=
500
;
const
FLUENT_FILES
=
[
"
branding
/
brand
.
ftl
"
"
browser
/
branding
/
brandings
.
ftl
"
"
browser
/
branding
/
sync
-
brand
.
ftl
"
"
browser
/
newtab
/
onboarding
.
ftl
"
]
;
const
helpers
=
{
selectInterruptAndTriplets
(
message
=
{
}
interruptCleared
)
{
const
hasInterrupt
=
interruptCleared
=
=
=
true
?
false
:
Boolean
(
message
.
content
)
;
const
hasTriplets
=
Boolean
(
message
.
bundle
&
&
message
.
bundle
.
length
)
;
/
/
Allow
1
)
falsy
to
not
render
a
header
2
)
default
welcome
3
)
custom
header
const
tripletsHeaderId
=
message
.
tripletsHeaderId
=
=
=
undefined
?
"
onboarding
-
welcome
-
header
"
:
message
.
tripletsHeaderId
;
let
UTMTerm
=
message
.
utm_term
|
|
"
"
;
UTMTerm
=
message
.
utm_term
&
&
message
.
trailheadTriplet
?
{
message
.
utm_term
}
-
{
message
.
trailheadTriplet
}
:
UTMTerm
;
return
{
hasTriplets
hasInterrupt
interrupt
:
hasInterrupt
?
message
:
null
triplets
:
hasTriplets
?
message
.
bundle
:
null
tripletsHeaderId
UTMTerm
}
;
}
addFluent
(
document
)
{
FLUENT_FILES
.
forEach
(
file
=
>
{
const
link
=
document
.
head
.
appendChild
(
document
.
createElement
(
"
link
"
)
)
;
link
.
href
=
file
;
link
.
rel
=
"
localization
"
;
}
)
;
}
}
;
class
FirstRun_FirstRun
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
didLoadFlowParams
=
false
;
this
.
state
=
{
prevMessage
:
undefined
hasInterrupt
:
false
hasTriplets
:
false
interrupt
:
undefined
triplets
:
undefined
tripletsHeaderId
:
"
"
isInterruptVisible
:
false
isTripletsContainerVisible
:
false
isTripletsContentVisible
:
false
UTMTerm
:
"
"
flowParams
:
undefined
}
;
this
.
closeInterrupt
=
this
.
closeInterrupt
.
bind
(
this
)
;
this
.
closeTriplets
=
this
.
closeTriplets
.
bind
(
this
)
;
helpers
.
addFluent
(
this
.
props
.
document
)
;
/
/
Update
utm
campaign
parameters
by
appending
channel
for
/
/
differentiating
campaign
in
amplitude
if
(
this
.
props
.
appUpdateChannel
)
{
addUtmParams
[
"
BASE_PARAMS
"
]
.
utm_campaign
+
=
-
{
this
.
props
.
appUpdateChannel
}
;
}
}
static
getDerivedStateFromProps
(
props
state
)
{
const
{
message
interruptCleared
}
=
props
;
const
cardIds
=
message
&
&
message
.
bundle
&
&
message
.
bundle
.
map
(
card
=
>
card
.
id
)
.
join
(
"
"
)
;
if
(
interruptCleared
!
=
=
state
.
prevInterruptCleared
|
|
message
&
&
message
.
id
!
=
=
state
.
prevMessageId
|
|
cardIds
!
=
=
state
.
prevCardIds
)
{
const
{
hasTriplets
hasInterrupt
interrupt
triplets
tripletsHeaderId
UTMTerm
}
=
helpers
.
selectInterruptAndTriplets
(
message
interruptCleared
)
;
return
{
prevMessageId
:
message
.
id
prevInterruptCleared
:
interruptCleared
prevCardIds
:
cardIds
hasInterrupt
hasTriplets
interrupt
triplets
tripletsHeaderId
isInterruptVisible
:
hasInterrupt
isTripletsContainerVisible
:
hasTriplets
isTripletsContentVisible
:
!
(
hasInterrupt
|
|
!
hasTriplets
)
UTMTerm
}
;
}
return
null
;
}
async
fetchFlowParams
(
)
{
const
{
fxaEndpoint
fetchFlowParams
}
=
this
.
props
;
const
{
UTMTerm
}
=
this
.
state
;
if
(
fxaEndpoint
&
&
UTMTerm
&
&
!
this
.
didLoadFlowParams
)
{
this
.
didLoadFlowParams
=
true
;
const
flowParams
=
await
fetchFlowParams
(
{
.
.
.
addUtmParams
[
"
BASE_PARAMS
"
]
entrypoint
:
"
activity
-
stream
-
firstrun
"
form_type
:
"
email
"
utm_term
:
UTMTerm
}
)
;
this
.
setState
(
{
flowParams
}
)
;
}
}
removeHideMain
(
)
{
if
(
!
this
.
state
.
hasInterrupt
)
{
/
/
We
need
to
remove
hide
-
main
since
we
should
show
it
underneath
everything
that
has
rendered
this
.
props
.
document
.
body
.
classList
.
remove
(
"
hide
-
main
"
"
welcome
"
)
;
}
}
componentDidMount
(
)
{
this
.
fetchFlowParams
(
)
;
this
.
removeHideMain
(
)
;
}
componentDidUpdate
(
)
{
/
/
In
case
we
didn
'
t
have
FXA
info
immediately
try
again
when
we
receive
it
.
this
.
fetchFlowParams
(
)
;
this
.
removeHideMain
(
)
;
}
closeInterrupt
(
)
{
this
.
setState
(
prevState
=
>
(
{
isInterruptVisible
:
false
isTripletsContainerVisible
:
prevState
.
hasTriplets
isTripletsContentVisible
:
prevState
.
hasTriplets
}
)
)
;
}
closeTriplets
(
)
{
this
.
setState
(
{
isTripletsContainerVisible
:
false
}
)
;
/
/
Closing
triplets
should
prevent
any
future
extended
triplets
from
showing
up
setTimeout
(
(
)
=
>
{
this
.
props
.
onBlockById
(
"
EXTENDED_TRIPLETS_1
"
)
;
}
TRANSITION_LENGTH
)
;
}
render
(
)
{
const
{
props
}
=
this
;
const
{
sendUserActionTelemetry
fxaEndpoint
dispatch
executeAction
}
=
props
;
const
{
interrupt
triplets
tripletsHeaderId
isInterruptVisible
isTripletsContainerVisible
isTripletsContentVisible
hasTriplets
UTMTerm
flowParams
}
=
this
.
state
;
return
external_React_default
.
a
.
createElement
(
external_React_default
.
a
.
Fragment
null
isInterruptVisible
?
external_React_default
.
a
.
createElement
(
Interrupt_Interrupt
{
document
:
props
.
document
cards
:
triplets
message
:
interrupt
onNextScene
:
this
.
closeInterrupt
UTMTerm
:
UTMTerm
sendUserActionTelemetry
:
sendUserActionTelemetry
executeAction
:
executeAction
dispatch
:
dispatch
flowParams
:
flowParams
onDismiss
:
this
.
closeInterrupt
fxaEndpoint
:
fxaEndpoint
onBlockById
:
props
.
onBlockById
}
)
:
null
hasTriplets
?
external_React_default
.
a
.
createElement
(
Triplets
[
"
Triplets
"
]
{
document
:
props
.
document
cards
:
triplets
headerId
:
tripletsHeaderId
showCardPanel
:
isTripletsContainerVisible
showContent
:
isTripletsContentVisible
hideContainer
:
this
.
closeTriplets
sendUserActionTelemetry
:
sendUserActionTelemetry
UTMTerm
:
{
UTMTerm
}
-
card
flowParams
:
flowParams
onAction
:
executeAction
onBlockById
:
props
.
onBlockById
}
)
:
null
)
;
}
}
/
*
*
*
/
}
)
/
*
83
*
/
/
*
*
*
/
(
function
(
module
__webpack_exports__
__webpack_require__
)
{
"
use
strict
"
;
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
/
EXTERNAL
MODULE
:
.
/
common
/
Actions
.
jsm
var
Actions
=
__webpack_require__
(
2
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
components
/
A11yLinkButton
/
A11yLinkButton
.
jsx
var
A11yLinkButton
=
__webpack_require__
(
48
)
;
/
/
EXTERNAL
MODULE
:
external
"
React
"
var
external_React_
=
__webpack_require__
(
9
)
;
var
external_React_default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
external_React_
)
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
components
/
TopSites
/
TopSitesConstants
.
js
var
TopSitesConstants
=
__webpack_require__
(
68
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
components
/
TopSites
/
TopSiteFormInput
.
jsx
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
TopSiteFormInput_TopSiteFormInput
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
this
.
state
=
{
validationError
:
this
.
props
.
validationError
}
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
this
.
onMount
=
this
.
onMount
.
bind
(
this
)
;
this
.
onClearIconPress
=
this
.
onClearIconPress
.
bind
(
this
)
;
}
componentWillReceiveProps
(
nextProps
)
{
if
(
nextProps
.
shouldFocus
&
&
!
this
.
props
.
shouldFocus
)
{
this
.
input
.
focus
(
)
;
}
if
(
nextProps
.
validationError
&
&
!
this
.
props
.
validationError
)
{
this
.
setState
(
{
validationError
:
true
}
)
;
}
/
/
If
the
component
is
in
an
error
state
but
the
value
was
cleared
by
the
parent
if
(
this
.
state
.
validationError
&
&
!
nextProps
.
value
)
{
this
.
setState
(
{
validationError
:
false
}
)
;
}
}
onClearIconPress
(
event
)
{
/
/
If
there
is
input
in
the
URL
or
custom
image
URL
fields
/
/
and
we
hit
'
enter
'
while
tabbed
over
the
clear
icon
/
/
we
should
execute
the
function
to
clear
the
field
.
if
(
event
.
key
=
=
=
"
Enter
"
)
{
this
.
props
.
onClear
(
)
;
}
}
onChange
(
ev
)
{
if
(
this
.
state
.
validationError
)
{
this
.
setState
(
{
validationError
:
false
}
)
;
}
this
.
props
.
onChange
(
ev
)
;
}
onMount
(
input
)
{
this
.
input
=
input
;
}
renderLoadingOrCloseButton
(
)
{
const
showClearButton
=
this
.
props
.
value
&
&
this
.
props
.
onClear
;
if
(
this
.
props
.
loading
)
{
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
loading
-
container
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
loading
-
animation
"
}
)
)
;
}
else
if
(
showClearButton
)
{
return
external_React_default
.
a
.
createElement
(
"
button
"
{
type
:
"
button
"
className
:
"
icon
icon
-
clear
-
input
icon
-
button
-
style
"
onClick
:
this
.
props
.
onClear
onKeyPress
:
this
.
onClearIconPress
}
)
;
}
return
null
;
}
render
(
)
{
const
{
typeUrl
}
=
this
.
props
;
const
{
validationError
}
=
this
.
state
;
return
external_React_default
.
a
.
createElement
(
"
label
"
null
external_React_default
.
a
.
createElement
(
"
span
"
{
"
data
-
l10n
-
id
"
:
this
.
props
.
titleId
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
field
{
typeUrl
?
"
url
"
:
"
"
}
{
validationError
?
"
invalid
"
:
"
"
}
}
external_React_default
.
a
.
createElement
(
"
input
"
{
type
:
"
text
"
value
:
this
.
props
.
value
ref
:
this
.
onMount
onChange
:
this
.
onChange
"
data
-
l10n
-
id
"
:
this
.
props
.
placeholderId
/
/
Set
focus
on
error
if
the
url
field
is
valid
or
when
the
input
is
first
rendered
and
is
empty
/
/
eslint
-
disable
-
next
-
line
jsx
-
a11y
/
no
-
autofocus
autoFocus
:
this
.
props
.
shouldFocus
disabled
:
this
.
props
.
loading
}
)
this
.
renderLoadingOrCloseButton
(
)
validationError
&
&
external_React_default
.
a
.
createElement
(
"
aside
"
{
className
:
"
error
-
tooltip
"
"
data
-
l10n
-
id
"
:
this
.
props
.
errorMessageId
}
)
)
)
;
}
}
TopSiteFormInput_TopSiteFormInput
.
defaultProps
=
{
showClearButton
:
false
value
:
"
"
validationError
:
false
}
;
/
/
EXTERNAL
MODULE
:
.
/
content
-
src
/
components
/
TopSites
/
TopSite
.
jsx
var
TopSite
=
__webpack_require__
(
70
)
;
/
/
CONCATENATED
MODULE
:
.
/
content
-
src
/
components
/
TopSites
/
TopSiteForm
.
jsx
/
*
harmony
export
(
binding
)
*
/
__webpack_require__
.
d
(
__webpack_exports__
"
TopSiteForm
"
function
(
)
{
return
TopSiteForm_TopSiteForm
;
}
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
TopSiteForm_TopSiteForm
extends
external_React_default
.
a
.
PureComponent
{
constructor
(
props
)
{
super
(
props
)
;
const
{
site
}
=
props
;
this
.
state
=
{
label
:
site
?
site
.
label
|
|
site
.
hostname
:
"
"
url
:
site
?
site
.
url
:
"
"
validationError
:
false
customScreenshotUrl
:
site
?
site
.
customScreenshotURL
:
"
"
showCustomScreenshotForm
:
site
?
site
.
customScreenshotURL
:
false
}
;
this
.
onClearScreenshotInput
=
this
.
onClearScreenshotInput
.
bind
(
this
)
;
this
.
onLabelChange
=
this
.
onLabelChange
.
bind
(
this
)
;
this
.
onUrlChange
=
this
.
onUrlChange
.
bind
(
this
)
;
this
.
onCancelButtonClick
=
this
.
onCancelButtonClick
.
bind
(
this
)
;
this
.
onClearUrlClick
=
this
.
onClearUrlClick
.
bind
(
this
)
;
this
.
onDoneButtonClick
=
this
.
onDoneButtonClick
.
bind
(
this
)
;
this
.
onCustomScreenshotUrlChange
=
this
.
onCustomScreenshotUrlChange
.
bind
(
this
)
;
this
.
onPreviewButtonClick
=
this
.
onPreviewButtonClick
.
bind
(
this
)
;
this
.
onEnableScreenshotUrlForm
=
this
.
onEnableScreenshotUrlForm
.
bind
(
this
)
;
this
.
validateUrl
=
this
.
validateUrl
.
bind
(
this
)
;
}
onLabelChange
(
event
)
{
this
.
setState
(
{
label
:
event
.
target
.
value
}
)
;
}
onUrlChange
(
event
)
{
this
.
setState
(
{
url
:
event
.
target
.
value
validationError
:
false
}
)
;
}
onClearUrlClick
(
)
{
this
.
setState
(
{
url
:
"
"
validationError
:
false
}
)
;
}
onEnableScreenshotUrlForm
(
)
{
this
.
setState
(
{
showCustomScreenshotForm
:
true
}
)
;
}
_updateCustomScreenshotInput
(
customScreenshotUrl
)
{
this
.
setState
(
{
customScreenshotUrl
validationError
:
false
}
)
;
this
.
props
.
dispatch
(
{
type
:
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST_CANCEL
}
)
;
}
onCustomScreenshotUrlChange
(
event
)
{
this
.
_updateCustomScreenshotInput
(
event
.
target
.
value
)
;
}
onClearScreenshotInput
(
)
{
this
.
_updateCustomScreenshotInput
(
"
"
)
;
}
onCancelButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
this
.
props
.
onClose
(
)
;
}
onDoneButtonClick
(
ev
)
{
ev
.
preventDefault
(
)
;
if
(
this
.
validateForm
(
)
)
{
const
site
=
{
url
:
this
.
cleanUrl
(
this
.
state
.
url
)
}
;
const
{
index
}
=
this
.
props
;
if
(
this
.
state
.
label
!
=
=
"
"
)
{
site
.
label
=
this
.
state
.
label
;
}
if
(
this
.
state
.
customScreenshotUrl
)
{
site
.
customScreenshotURL
=
this
.
cleanUrl
(
this
.
state
.
customScreenshotUrl
)
;
}
else
if
(
this
.
props
.
site
&
&
this
.
props
.
site
.
customScreenshotURL
)
{
/
/
Used
to
flag
that
previously
cached
screenshot
should
be
removed
site
.
customScreenshotURL
=
null
;
}
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
TOP_SITES_PIN
data
:
{
site
index
}
}
)
)
;
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
TopSitesConstants
[
"
TOP_SITES_SOURCE
"
]
event
:
"
TOP_SITES_EDIT
"
action_position
:
index
}
)
)
;
this
.
props
.
onClose
(
)
;
}
}
onPreviewButtonClick
(
event
)
{
event
.
preventDefault
(
)
;
if
(
this
.
validateForm
(
)
)
{
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
AlsoToMain
(
{
type
:
Actions
[
"
actionTypes
"
]
.
PREVIEW_REQUEST
data
:
{
url
:
this
.
cleanUrl
(
this
.
state
.
customScreenshotUrl
)
}
}
)
)
;
this
.
props
.
dispatch
(
Actions
[
"
actionCreators
"
]
.
UserEvent
(
{
source
:
TopSitesConstants
[
"
TOP_SITES_SOURCE
"
]
event
:
"
PREVIEW_REQUEST
"
}
)
)
;
}
}
cleanUrl
(
url
)
{
/
/
If
we
are
missing
a
protocol
prepend
http
:
/
/
if
(
!
url
.
startsWith
(
"
http
:
"
)
&
&
!
url
.
startsWith
(
"
https
:
"
)
)
{
return
http
:
/
/
{
url
}
;
}
return
url
;
}
_tryParseUrl
(
url
)
{
try
{
return
new
URL
(
url
)
;
}
catch
(
e
)
{
return
null
;
}
}
validateUrl
(
url
)
{
const
validProtocols
=
[
"
http
:
"
"
https
:
"
]
;
const
urlObj
=
this
.
_tryParseUrl
(
url
)
|
|
this
.
_tryParseUrl
(
this
.
cleanUrl
(
url
)
)
;
return
urlObj
&
&
validProtocols
.
includes
(
urlObj
.
protocol
)
;
}
validateCustomScreenshotUrl
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
return
!
customScreenshotUrl
|
|
this
.
validateUrl
(
customScreenshotUrl
)
;
}
validateForm
(
)
{
const
validate
=
this
.
validateUrl
(
this
.
state
.
url
)
&
&
this
.
validateCustomScreenshotUrl
(
)
;
if
(
!
validate
)
{
this
.
setState
(
{
validationError
:
true
}
)
;
}
return
validate
;
}
_renderCustomScreenshotInput
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
const
requestFailed
=
this
.
props
.
previewResponse
=
=
=
"
"
;
const
validationError
=
this
.
state
.
validationError
&
&
!
this
.
validateCustomScreenshotUrl
(
)
|
|
requestFailed
;
/
/
Set
focus
on
error
if
the
url
field
is
valid
or
when
the
input
is
first
rendered
and
is
empty
const
shouldFocus
=
validationError
&
&
this
.
validateUrl
(
this
.
state
.
url
)
|
|
!
customScreenshotUrl
;
const
isLoading
=
this
.
props
.
previewResponse
=
=
=
null
&
&
customScreenshotUrl
&
&
this
.
props
.
previewUrl
=
=
=
this
.
cleanUrl
(
customScreenshotUrl
)
;
if
(
!
this
.
state
.
showCustomScreenshotForm
)
{
return
external_React_default
.
a
.
createElement
(
A11yLinkButton
[
"
A11yLinkButton
"
]
{
onClick
:
this
.
onEnableScreenshotUrlForm
className
:
"
enable
-
custom
-
image
-
input
"
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
use
-
image
-
link
"
}
)
;
}
return
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
custom
-
image
-
input
-
container
"
}
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
errorMessageId
:
requestFailed
?
"
newtab
-
topsites
-
image
-
validation
"
:
"
newtab
-
topsites
-
url
-
validation
"
loading
:
isLoading
onChange
:
this
.
onCustomScreenshotUrlChange
onClear
:
this
.
onClearScreenshotInput
shouldFocus
:
shouldFocus
typeUrl
:
true
value
:
customScreenshotUrl
validationError
:
validationError
titleId
:
"
newtab
-
topsites
-
image
-
url
-
label
"
placeholderId
:
"
newtab
-
topsites
-
url
-
input
"
}
)
)
;
}
render
(
)
{
const
{
customScreenshotUrl
}
=
this
.
state
;
const
requestFailed
=
this
.
props
.
previewResponse
=
=
=
"
"
;
/
/
For
UI
purposes
editing
without
an
existing
link
is
"
add
"
const
showAsAdd
=
!
this
.
props
.
site
;
const
previous
=
this
.
props
.
site
&
&
this
.
props
.
site
.
customScreenshotURL
|
|
"
"
;
const
changed
=
customScreenshotUrl
&
&
this
.
cleanUrl
(
customScreenshotUrl
)
!
=
=
previous
;
/
/
Preview
mode
if
changes
were
made
to
the
custom
screenshot
URL
and
no
preview
was
received
yet
/
/
or
the
request
failed
const
previewMode
=
changed
&
&
!
this
.
props
.
previewResponse
;
const
previewLink
=
Object
.
assign
(
{
}
this
.
props
.
site
)
;
if
(
this
.
props
.
previewResponse
)
{
previewLink
.
screenshot
=
this
.
props
.
previewResponse
;
previewLink
.
customScreenshotURL
=
this
.
props
.
previewUrl
;
}
/
/
Handles
the
form
submit
so
an
enter
press
performs
the
correct
action
const
onSubmit
=
previewMode
?
this
.
onPreviewButtonClick
:
this
.
onDoneButtonClick
;
return
external_React_default
.
a
.
createElement
(
"
form
"
{
className
:
"
topsite
-
form
"
onSubmit
:
onSubmit
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
form
-
input
-
container
"
}
external_React_default
.
a
.
createElement
(
"
h3
"
{
className
:
"
section
-
title
grey
-
title
"
"
data
-
l10n
-
id
"
:
showAsAdd
?
"
newtab
-
topsites
-
add
-
topsites
-
header
"
:
"
newtab
-
topsites
-
edit
-
topsites
-
header
"
}
)
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
fields
-
and
-
preview
"
}
external_React_default
.
a
.
createElement
(
"
div
"
{
className
:
"
form
-
wrapper
"
}
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
onChange
:
this
.
onLabelChange
value
:
this
.
state
.
label
titleId
:
"
newtab
-
topsites
-
title
-
label
"
placeholderId
:
"
newtab
-
topsites
-
title
-
input
"
}
)
external_React_default
.
a
.
createElement
(
TopSiteFormInput_TopSiteFormInput
{
onChange
:
this
.
onUrlChange
shouldFocus
:
this
.
state
.
validationError
&
&
!
this
.
validateUrl
(
this
.
state
.
url
)
value
:
this
.
state
.
url
onClear
:
this
.
onClearUrlClick
validationError
:
this
.
state
.
validationError
&
&
!
this
.
validateUrl
(
this
.
state
.
url
)
titleId
:
"
newtab
-
topsites
-
url
-
label
"
typeUrl
:
true
placeholderId
:
"
newtab
-
topsites
-
url
-
input
"
errorMessageId
:
"
newtab
-
topsites
-
url
-
validation
"
}
)
this
.
_renderCustomScreenshotInput
(
)
)
external_React_default
.
a
.
createElement
(
TopSite
[
"
TopSiteLink
"
]
{
link
:
previewLink
defaultStyle
:
requestFailed
title
:
this
.
state
.
label
}
)
)
)
external_React_default
.
a
.
createElement
(
"
section
"
{
className
:
"
actions
"
}
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
cancel
"
type
:
"
button
"
onClick
:
this
.
onCancelButtonClick
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
cancel
-
button
"
}
)
previewMode
?
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
preview
"
type
:
"
submit
"
"
data
-
l10n
-
id
"
:
"
newtab
-
topsites
-
preview
-
button
"
}
)
:
external_React_default
.
a
.
createElement
(
"
button
"
{
className
:
"
done
"
type
:
"
submit
"
"
data
-
l10n
-
id
"
:
showAsAdd
?
"
newtab
-
topsites
-
add
-
button
"
:
"
newtab
-
topsites
-
save
-
button
"
}
)
)
)
;
}
}
TopSiteForm_TopSiteForm
.
defaultProps
=
{
site
:
null
index
:
-
1
}
;
/
*
*
*
/
}
)
/
*
*
*
*
*
*
/
]
)
;
/
/
#
sourceMappingURL
=
data
:
application
/
json
;
charset
=
utf
-
8
;
base64

/
XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IEJhc2UgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9CYXNlL0Jhc2VcIjtcbmltcG9ydCB7IERldGVjdFVzZXJTZXNzaW9uU3RhcnQgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL2RldGVjdC11c2VyLXNlc3Npb24tc3RhcnRcIjtcbmltcG9ydCB7IGluaXRTdG9yZSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvaW5pdC1zdG9yZVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyByZWR1Y2VycyB9IGZyb20gXCJjb21tb24vUmVkdWNlcnMuanNtXCI7XG5cbmNvbnN0IHN0b3JlID0gaW5pdFN0b3JlKHJlZHVjZXJzKTtcblxubmV3IERldGVjdFVzZXJTZXNzaW9uU3RhcnQoc3RvcmUpLnNlbmRFdmVudE9yQWRkTGlzdGVuZXIoKTtcblxuc3RvcmUuZGlzcGF0Y2goYWMuQWxzb1RvTWFpbih7IHR5cGU6IGF0Lk5FV19UQUJfU1RBVEVfUkVRVUVTVCB9KSk7XG5cblJlYWN0RE9NLmh5ZHJhdGUoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxCYXNlXG4gICAgICBpc0ZpcnN0cnVuPXtnbG9iYWwuZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9PT0gXCJhYm91dDp3ZWxjb21lXCJ9XG4gICAgICBsb2NhbGU9e2dsb2JhbC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZ31cbiAgICAgIHN0cmluZ3M9e2dsb2JhbC5nQWN0aXZpdHlTdHJlYW1TdHJpbmdzfVxuICAgIC8
+
XG4gIDwvUHJvdmlkZXI
+
LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbik7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnRoaXMuTUFJTl9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOk1haW5cIjtcbnRoaXMuQ09OVEVOVF9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOkNvbnRlbnRcIjtcbnRoaXMuUFJFTE9BRF9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOlByZWxvYWRlZEJyb3dzZXJcIjtcbnRoaXMuVUlfQ09ERSA9IDE7XG50aGlzLkJBQ0tHUk9VTkRfUFJPQ0VTUyA9IDI7XG5cbi8qKlxuICogZ2xvYmFsSW1wb3J0Q29udGV4dCAtIEFyZSB3ZSBpbiBVSSBjb2RlIChpLmUuIHJlYWN0LCBhIGRvbSkgb3Igc29tZSBraW5kIG9mIGJhY2tncm91bmQgcHJvY2Vzcz9cbiAqICAgICAgICAgICAgICAgICAgICAgICBVc2UgdGhpcyBpbiBhY3Rpb24gY3JlYXRvcnMgaWYgeW91IG5lZWQgZGlmZmVyZW50IGxvZ2ljXG4gKiAgICAgICAgICAgICAgICAgICAgICAgZm9yIHVpL2JhY2tncm91bmQgcHJvY2Vzc2VzLlxuICovXG5jb25zdCBnbG9iYWxJbXBvcnRDb250ZXh0ID1cbiAgdHlwZW9mIFdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA
/
IEJBQ0tHUk9VTkRfUFJPQ0VTUyA6IFVJX0NPREU7XG4vLyBFeHBvcnQgZm9yIHRlc3RzXG50aGlzLmdsb2JhbEltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0O1xuXG4vLyBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgYXZvaWRzIGFjY2lkZW50YWwgZGlmZmVyaW5nIGtleS92YWx1ZSBwYWlyczpcbi8vIHtcbi8vICAgSU5JVDogXCJJTklUXCIsXG4vLyAgIFVOSU5JVDogXCJVTklOSVRcIlxuLy8gfVxuY29uc3QgYWN0aW9uVHlwZXMgPSB7fTtcbmZvciAoY29uc3QgdHlwZSBvZiBbXG4gIFwiQURET05TX0lORk9fUkVRVUVTVFwiLFxuICBcIkFERE9OU19JTkZPX1JFU1BPTlNFXCIsXG4gIFwiQVJDSElWRV9GUk9NX1BPQ0tFVFwiLFxuICBcIkFTX1JPVVRFUl9JTklUSUFMSVpFRFwiLFxuICBcIkFTX1JPVVRFUl9QUkVGX0NIQU5HRURcIixcbiAgXCJBU19ST1VURVJfVEFSR0VUSU5HX1VQREFURVwiLFxuICBcIkFTX1JPVVRFUl9URUxFTUVUUllfVVNFUl9FVkVOVFwiLFxuICBcIkJMT0NLX1VSTFwiLFxuICBcIkJPT0tNQVJLX1VSTFwiLFxuICBcIkNMRUFSX1BSRUZcIixcbiAgXCJDT1BZX0RPV05MT0FEX0xJTktcIixcbiAgXCJERUxFVEVfQk9PS01BUktfQllfSURcIixcbiAgXCJERUxFVEVfRlJPTV9QT0NLRVRcIixcbiAgXCJERUxFVEVfSElTVE9SWV9VUkxcIixcbiAgXCJESUFMT0dfQ0FOQ0VMXCIsXG4gIFwiRElBTE9HX09QRU5cIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0NPTkZJR19DSEFOR0VcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0NPTkZJR19SRVNFVF9ERUZBVUxUU1wiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVFVQXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9DT05GSUdfU0VUX1ZBTFVFXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9GRUVEU19VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0ZFRURfVVBEQVRFXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9JTVBSRVNTSU9OX1NUQVRTXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9MQVlPVVRfUkVTRVRcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0xBWU9VVF9VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0xJTktfQkxPQ0tFRFwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fTE9BREVEX0NPTlRFTlRcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1JFVFJZX0ZFRURcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0NBUFNcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0VORFBPSU5UXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9TUE9DU19GSUxMXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9TUE9DU19QTEFDRU1FTlRTXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9TUE9DU19VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NfQkxPQ0tFRFwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ19JTVBSRVNTSU9OXCIsXG4gIFwiRE9XTkxPQURfQ0hBTkdFRFwiLFxuICBcIkZBS0VfRk9DVVNfU0VBUkNIXCIsXG4gIFwiRklMTF9TRUFSQ0hfVEVSTVwiLFxuICBcIkhBTkRPRkZfU0VBUkNIX1RPX0FXRVNPTUVCQVJcIixcbiAgXCJISURFX1BSSVZBQ1lfSU5GT1wiLFxuICBcIkhJREVfU0VBUkNIXCIsXG4gIFwiSU5JVFwiLFxuICBcIk5FV19UQUJfSU5JVFwiLFxuICBcIk5FV19UQUJfSU5JVElBTF9TVEFURVwiLFxuICBcIk5FV19UQUJfTE9BRFwiLFxuICBcIk5FV19UQUJfUkVIWURSQVRFRFwiLFxuICBcIk5FV19UQUJfU1RBVEVfUkVRVUVTVFwiLFxuICBcIk5FV19UQUJfVU5MT0FEXCIsXG4gIFwiT1BFTl9ET1dOTE9BRF9GSUxFXCIsXG4gIFwiT1BFTl9MSU5LXCIsXG4gIFwiT1BFTl9ORVdfV0lORE9XXCIsXG4gIFwiT1BFTl9QUklWQVRFX1dJTkRPV1wiLFxuICBcIk9QRU5fV0VCRVhUX1NFVFRJTkdTXCIsXG4gIFwiUExBQ0VTX0JPT0tNQVJLX0FEREVEXCIsXG4gIFwiUExBQ0VTX0JPT0tNQVJLX1JFTU9WRURcIixcbiAgXCJQTEFDRVNfSElTVE9SWV9DTEVBUkVEXCIsXG4gIFwiUExBQ0VTX0xJTktTX0NIQU5HRURcIixcbiAgXCJQTEFDRVNfTElOS19CTE9DS0VEXCIsXG4gIFwiUExBQ0VTX0xJTktfREVMRVRFRFwiLFxuICBcIlBMQUNFU19TQVZFRF9UT19QT0NLRVRcIixcbiAgXCJQT0NLRVRfQ1RBXCIsXG4gIFwiUE9DS0VUX0xJTktfREVMRVRFRF9PUl9BUkNISVZFRFwiLFxuICBcIlBPQ0tFVF9MT0dHRURfSU5cIixcbiAgXCJQT0NLRVRfV0FJVElOR19GT1JfU1BPQ1wiLFxuICBcIlBSRUZTX0lOSVRJQUxfVkFMVUVTXCIsXG4gIFwiUFJFRl9DSEFOR0VEXCIsXG4gIFwiUFJFVklFV19SRVFVRVNUXCIsXG4gIFwiUFJFVklFV19SRVFVRVNUX0NBTkNFTFwiLFxuICBcIlBSRVZJRVdfUkVTUE9OU0VcIixcbiAgXCJSRU1PVkVfRE9XTkxPQURfRklMRVwiLFxuICBcIlJJQ0hfSUNPTl9NSVNTSU5HXCIsXG4gIFwiU0FWRV9TRVNTSU9OX1BFUkZfREFUQVwiLFxuICBcIlNBVkVfVE9fUE9DS0VUXCIsXG4gIFwiU0NSRUVOU0hPVF9VUERBVEVEXCIsXG4gIFwiU0VDVElPTl9ERVJFR0lTVEVSXCIsXG4gIFwiU0VDVElPTl9ESVNBQkxFXCIsXG4gIFwiU0VDVElPTl9FTkFCTEVcIixcbiAgXCJTRUNUSU9OX01PVkVcIixcbiAgXCJTRUNUSU9OX09QVElPTlNfQ0hBTkdFRFwiLFxuICBcIlNFQ1RJT05fUkVHSVNURVJcIixcbiAgXCJTRUNUSU9OX1VQREFURVwiLFxuICBcIlNFQ1RJT05fVVBEQVRFX0NBUkRcIixcbiAgXCJTRVRUSU5HU19DTE9TRVwiLFxuICBcIlNFVFRJTkdTX09QRU5cIixcbiAgXCJTRVRfUFJFRlwiLFxuICBcIlNIT1dfRE9XTkxPQURfRklMRVwiLFxuICBcIlNIT1dfRklSRUZPWF9BQ0NPVU5UU1wiLFxuICBcIlNIT1dfUFJJVkFDWV9JTkZPXCIsXG4gIFwiU0hPV19TRUFSQ0hcIixcbiAgXCJTS0lQUEVEX1NJR05JTlwiLFxuICBcIlNOSVBQRVRTX0JMT0NLTElTVF9DTEVBUkVEXCIsXG4gIFwiU05JUFBFVFNfQkxPQ0tMSVNUX1VQREFURURcIixcbiAgXCJTTklQUEVUU19EQVRBXCIsXG4gIFwiU05JUFBFVFNfUFJFVklFV19NT0RFXCIsXG4gIFwiU05JUFBFVFNfUkVTRVRcIixcbiAgXCJTTklQUEVUX0JMT0NLRURcIixcbiAgXCJTVUJNSVRfRU1BSUxcIixcbiAgXCJTVUJNSVRfU0lHTklOXCIsXG4gIFwiU1lTVEVNX1RJQ0tcIixcbiAgXCJURUxFTUVUUllfSU1QUkVTU0lPTl9TVEFUU1wiLFxuICBcIlRFTEVNRVRSWV9QRVJGT1JNQU5DRV9FVkVOVFwiLFxuICBcIlRFTEVNRVRSWV9VTkRFU0lSRURfRVZFTlRcIixcbiAgXCJURUxFTUVUUllfVVNFUl9FVkVOVFwiLFxuICBcIlRPUF9TSVRFU19DQU5DRUxfRURJVFwiLFxuICBcIlRPUF9TSVRFU19DTE9TRV9TRUFSQ0hfU0hPUlRDVVRTX01PREFMXCIsXG4gIFwiVE9QX1NJVEVTX0VESVRcIixcbiAgXCJUT1BfU0lURVNfSU5TRVJUXCIsXG4gIFwiVE9QX1NJVEVTX09QRU5fU0VBUkNIX1NIT1JUQ1VUU19NT0RBTFwiLFxuICBcIlRPUF9TSVRFU19QSU5cIixcbiAgXCJUT1BfU0lURVNfUFJFRlNfVVBEQVRFRFwiLFxuICBcIlRPUF9TSVRFU19VTlBJTlwiLFxuICBcIlRPUF9TSVRFU19VUERBVEVEXCIsXG4gIFwiVE9UQUxfQk9PS01BUktTX1JFUVVFU1RcIixcbiAgXCJUT1RBTF9CT09LTUFSS1NfUkVTUE9OU0VcIixcbiAgXCJUUkFJTEhFQURfRU5ST0xMX0VWRU5UXCIsXG4gIFwiVU5JTklUXCIsXG4gIFwiVVBEQVRFX1BJTk5FRF9TRUFSQ0hfU0hPUlRDVVRTXCIsXG4gIFwiVVBEQVRFX1NFQVJDSF9TSE9SVENVVFNcIixcbiAgXCJVUERBVEVfU0VDVElPTl9QUkVGU1wiLFxuICBcIldFQkVYVF9DTElDS1wiLFxuICBcIldFQkVYVF9ESVNNSVNTXCIsXG5dKSB7XG4gIGFjdGlvblR5cGVzW3R5cGVdID0gdHlwZTtcbn1cblxuLy8gVGhlc2UgYXJlIGFjY2VwdGFibGUgYWN0aW9ucyBmb3IgQVMgUm91dGVyIG1lc3NhZ2VzIHRvIGhhdmUuIFRoZXkgY2FuIHNob3cgdXBcbi8vIGFzIGNhbGwtdG8tYWN0aW9uIGJ1dHRvbnMgaW4gc25pcHBldHMsIG9uYm9hcmRpbmcgdG91ciwgZXRjLlxuY29uc3QgQVNSb3V0ZXJBY3Rpb25zID0ge307XG5mb3IgKGNvbnN0IHR5cGUgb2YgW1xuICBcIkhJR0hMSUdIVF9GRUFUVVJFXCIsXG4gIFwiSU5TVEFMTF9BRERPTl9GUk9NX1VSTFwiLFxuICBcIk9QRU5fQVBQTElDQVRJT05TX01FTlVcIixcbiAgXCJPUEVOX1BSSVZBVEVfQlJPV1NFUl9XSU5ET1dcIixcbiAgXCJPUEVOX1VSTFwiLFxuICBcIk9QRU5fQUJPVVRfUEFHRVwiLFxuICBcIk9QRU5fUFJFRkVSRU5DRVNfUEFHRVwiLFxuICBcIlNIT1dfRklSRUZPWF9BQ0NPVU5UU1wiLFxuICBcIlBJTl9DVVJSRU5UX1RBQlwiLFxuICBcIkVOQUJMRV9GSVJFRk9YX01PTklUT1JcIixcbiAgXCJPUEVOX1BST1RFQ1RJT05fUEFORUxcIixcbiAgXCJPUEVOX1BST1RFQ1RJT05fUkVQT1JUXCIsXG4gIFwiRElTQUJMRV9TVFBfRE9PUkhBTkdFUlNcIixcbiAgXCJTSE9XX01JR1JBVElPTl9XSVpBUkRcIixcbl0pIHtcbiAgQVNSb3V0ZXJBY3Rpb25zW3R5cGVdID0gdHlwZTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBjcmVhdGluZyByb3V0ZWQgYWN0aW9ucyBiZXR3ZWVuIGNvbnRlbnQgYW5kIG1haW5cbi8vIE5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGNvbnN1bWVyc1xuZnVuY3Rpb24gX1JvdXRlTWVzc2FnZShhY3Rpb24sIG9wdGlvbnMpIHtcbiAgY29uc3QgbWV0YSA9IGFjdGlvbi5tZXRhID8geyAuLi5hY3Rpb24ubWV0YSB9IDoge307XG4gIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5mcm9tIHx8ICFvcHRpb25zLnRvKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJSb3V0ZWQgTWVzc2FnZXMgbXVzdCBoYXZlIG9wdGlvbnMgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIsIGFuZCBtdXN0IGF0IGxlYXN0IGluY2x1ZGUgYSAuZnJvbSBhbmQgLnRvIHByb3BlcnR5LlwiXG4gICAgKTtcbiAgfVxuICAvLyBGb3IgZWFjaCBvZiB0aGVzZSBmaWVsZHMsIGlmIHRoZXkgYXJlIHBhc3NlZCBhcyBhbiBvcHRpb24sXG4gIC8vIGFkZCB0aGVtIHRvIHRoZSBhY3Rpb24uIElmIHRoZXkgYXJlIG5vdCBkZWZpbmVkLCByZW1vdmUgdGhlbS5cbiAgW1wiZnJvbVwiLCBcInRvXCIsIFwidG9UYXJnZXRcIiwgXCJmcm9tVGFyZ2V0XCIsIFwic2tpcE1haW5cIiwgXCJza2lwTG9jYWxcIl0uZm9yRWFjaChcbiAgICBvID0
+
IHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tvXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBtZXRhW29dID0gb3B0aW9uc1tvXTtcbiAgICAgIH0gZWxzZSBpZiAobWV0YVtvXSkge1xuICAgICAgICBkZWxldGUgbWV0YVtvXTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiB7IC4uLmFjdGlvbiwgbWV0YSB9O1xufVxuXG4vKipcbiAqIEFsc29Ub01haW4gLSBDcmVhdGVzIGEgbWVzc2FnZSB0aGF0IHdpbGwgYmUgZGlzcGF0Y2hlZCBsb2NhbGx5IGFuZCBhbHNvIHNlbnQgdG8gdGhlIE1haW4gcHJvY2Vzcy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGFjdGlvbiBBbnkgcmVkdXggYWN0aW9uIChyZXF1aXJlZClcbiAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtICB7Ym9vbH0gICBza2lwTG9jYWwgVXNlZCBieSBPbmx5VG9NYWluIHRvIHNraXAgdGhlIG1haW4gcmVkdWNlclxuICogQHBhcmFtICB7c3RyaW5nfSBmcm9tVGFyZ2V0IFRoZSBpZCBvZiB0aGUgY29udGVudCBwb3J0IGZyb20gd2hpY2ggdGhlIGFjdGlvbiBvcmlnaW5hdGVkLiAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbiB3aXRoIGFkZGVkIC5tZXRhIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gQWxzb1RvTWFpbihhY3Rpb24sIGZyb21UYXJnZXQsIHNraXBMb2NhbCkge1xuICByZXR1cm4gX1JvdXRlTWVzc2FnZShhY3Rpb24sIHtcbiAgICBmcm9tOiBDT05URU5UX01FU1NBR0VfVFlQRSxcbiAgICB0bzogTUFJTl9NRVNTQUdFX1RZUEUsXG4gICAgZnJvbVRhcmdldCxcbiAgICBza2lwTG9jYWwsXG4gIH0pO1xufVxuXG4vKipcbiAqIE9ubHlUb01haW4gLSBDcmVhdGVzIGEgbWVzc2FnZSB0aGF0IHdpbGwgYmUgc2VudCB0byB0aGUgTWFpbiBwcm9jZXNzIGFuZCBza2lwIHRoZSBsb2NhbCByZWR1Y2VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYWN0aW9uIEFueSByZWR1eCBhY3Rpb24gKHJlcXVpcmVkKVxuICogQHBhcmFtICB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGZyb21UYXJnZXQgVGhlIGlkIG9mIHRoZSBjb250ZW50IHBvcnQgZnJvbSB3aGljaCB0aGUgYWN0aW9uIG9yaWdpbmF0ZWQuIChvcHRpb25hbClcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uIHdpdGggYWRkZWQgLm1ldGEgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBPbmx5VG9NYWluKGFjdGlvbiwgZnJvbVRhcmdldCkge1xuICByZXR1cm4gQWxzb1RvTWFpbihhY3Rpb24sIGZyb21UYXJnZXQsIHRydWUpO1xufVxuXG4vKipcbiAqIEJyb2FkY2FzdFRvQ29udGVudCAtIENyZWF0ZXMgYSBtZXNzYWdlIHRoYXQgd2lsbCBiZSBkaXNwYXRjaGVkIHRvIG1haW4gYW5kIHNlbnQgdG8gQUxMIGNvbnRlbnQgcHJvY2Vzc2VzLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYWN0aW9uIEFueSByZWR1eCBhY3Rpb24gKHJlcXVpcmVkKVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24gd2l0aCBhZGRlZCAubWV0YSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIEJyb2FkY2FzdFRvQ29udGVudChhY3Rpb24pIHtcbiAgcmV0dXJuIF9Sb3V0ZU1lc3NhZ2UoYWN0aW9uLCB7XG4gICAgZnJvbTogTUFJTl9NRVNTQUdFX1RZUEUsXG4gICAgdG86IENPTlRFTlRfTUVTU0FHRV9UWVBFLFxuICB9KTtcbn1cblxuLyoqXG4gKiBBbHNvVG9PbmVDb250ZW50IC0gQ3JlYXRlcyBhIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHdpbGwgYmUgZGlzcGF0Y2hlZCB0byB0aGUgbWFpbiBzdG9yZVxuICogICAgICAgICAgICAgICAgICAgIGFuZCBhbHNvIHNlbnQgdG8gYSBwYXJ0aWN1bGFyIENvbnRlbnQgcHJvY2Vzcy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGFjdGlvbiBBbnkgcmVkdXggYWN0aW9uIChyZXF1aXJlZClcbiAqIEBwYXJhbSAge3N0cmluZ30gdGFyZ2V0IFRoZSBpZCBvZiBhIGNvbnRlbnQgcG9ydFxuICogQHBhcmFtICB7Ym9vbH0gc2tpcE1haW4gVXNlZCBieSBPbmx5VG9PbmVDb250ZW50IHRvIHNraXAgdGhlIG1haW4gcHJvY2Vzc1xuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24gd2l0aCBhZGRlZCAubWV0YSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIEFsc29Ub09uZUNvbnRlbnQoYWN0aW9uLCB0YXJnZXQsIHNraXBNYWluKSB7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJZb3UgbXVzdCBwcm92aWRlIGEgdGFyZ2V0IElEIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIEFsc29Ub09uZUNvbnRlbnQuIElmIHlvdSB3YW50IHRvIHNlbmQgdG8gYWxsIGNvbnRlbnQgcHJvY2Vzc2VzLCB1c2UgQnJvYWRjYXN0VG9Db250ZW50XCJcbiAgICApO1xuICB9XG4gIHJldHVybiBfUm91dGVNZXNzYWdlKGFjdGlvbiwge1xuICAgIGZyb206IE1BSU5fTUVTU0FHRV9UWVBFLFxuICAgIHRvOiBDT05URU5UX01FU1NBR0VfVFlQRSxcbiAgICB0b1RhcmdldDogdGFyZ2V0LFxuICAgIHNraXBNYWluLFxuICB9KTtcbn1cblxuLyoqXG4gKiBPbmx5VG9PbmVDb250ZW50IC0gQ3JlYXRlcyBhIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHNlbnQgdG8gYSBwYXJ0aWN1bGFyIENvbnRlbnQgcHJvY2Vzc1xuICogICAgICAgICAgICAgICAgICAgIGFuZCBza2lwIHRoZSBtYWluIHJlZHVjZXIuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBhY3Rpb24gQW55IHJlZHV4IGFjdGlvbiAocmVxdWlyZWQpXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRhcmdldCBUaGUgaWQgb2YgYSBjb250ZW50IHBvcnRcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uIHdpdGggYWRkZWQgLm1ldGEgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBPbmx5VG9PbmVDb250ZW50KGFjdGlvbiwgdGFyZ2V0KSB7XG4gIHJldHVybiBBbHNvVG9PbmVDb250ZW50KGFjdGlvbiwgdGFyZ2V0LCB0cnVlKTtcbn1cblxuLyoqXG4gKiBBbHNvVG9QcmVsb2FkZWQgLSBDcmVhdGVzIGEgbWVzc2FnZSB0aGF0IGRpc3BhdGNoZWQgdG8gdGhlIG1haW4gcmVkdWNlciBhbmQgYWxzbyBzZW50IHRvIHRoZSBwcmVsb2FkZWQgdGFiLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYWN0aW9uIEFueSByZWR1eCBhY3Rpb24gKHJlcXVpcmVkKVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24gd2l0aCBhZGRlZCAubWV0YSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIEFsc29Ub1ByZWxvYWRlZChhY3Rpb24pIHtcbiAgcmV0dXJuIF9Sb3V0ZU1lc3NhZ2UoYWN0aW9uLCB7XG4gICAgZnJvbTogTUFJTl9NRVNTQUdFX1RZUEUsXG4gICAgdG86IFBSRUxPQURfTUVTU0FHRV9UWVBFLFxuICB9KTtcbn1cblxuLyoqXG4gKiBVc2VyRXZlbnQgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYSB1c2VyIGFjdGlvbi4gVGhpcyBzaG91bGQgb25seVxuICogICAgICAgICAgICAgICAgICAgYmUgc2VudCBmcm9tIHRoZSBVSSBkdXJpbmcgYSB1c2VyIHNlc3Npb24uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIEZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSBwaW5nIChzb3VyY2UsIGV0Yy4pXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIEFsc29Ub01haW4gYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFVzZXJFdmVudChkYXRhKSB7XG4gIHJldHVybiBBbHNvVG9NYWluKHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5URUxFTUVUUllfVVNFUl9FVkVOVCxcbiAgICBkYXRhLFxuICB9KTtcbn1cblxuLyoqXG4gKiBBU1JvdXRlclVzZXJFdmVudCAtIEEgdGVsZW1ldHJ5IHBpbmcgaW5kaWNhdGluZyBhIHVzZXIgYWN0aW9uIGZyb20gQVMgcm91dGVyLiBUaGlzIHNob3VsZCBvbmx5XG4gKiAgICAgICAgICAgICAgICAgICAgIGJlIHNlbnQgZnJvbSB0aGUgVUkgZHVyaW5nIGEgdXNlciBzZXNzaW9uLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZyAoc291cmNlLCBldGMuKVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBBbHNvVG9NYWluIGFjdGlvblxuICovXG5mdW5jdGlvbiBBU1JvdXRlclVzZXJFdmVudChkYXRhKSB7XG4gIHJldHVybiBBbHNvVG9NYWluKHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5BU19ST1VURVJfVEVMRU1FVFJZX1VTRVJfRVZFTlQsXG4gICAgZGF0YSxcbiAgfSk7XG59XG5cbi8qKlxuICogRGlzY292ZXJ5U3RyZWFtU3BvY3NGaWxsIC0gQSB0ZWxlbWV0cnkgcGluZyBpbmRpY2F0aW5nIGEgU1BPQ1MgRmlsbCBldmVudC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgRmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHBpbmcgKHNwb2NfZmlsbHMsIGV0Yy4pXG4gKiBAcGFyYW0gIHtpbnR9IGltcG9ydENvbnRleHQgKEZvciB0ZXN0aW5nKSBPdmVycmlkZSB0aGUgaW1wb3J0IGNvbnRleHQgZm9yIHRlc3RpbmcuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIEFsc29Ub01haW4gYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIERpc2NvdmVyeVN0cmVhbVNwb2NzRmlsbChkYXRhLCBpbXBvcnRDb250ZXh0ID0gZ2xvYmFsSW1wb3J0Q29udGV4dCkge1xuICBjb25zdCBhY3Rpb24gPSB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuRElTQ09WRVJZX1NUUkVBTV9TUE9DU19GSUxMLFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG4vKipcbiAqIFVuZGVzaXJlZEV2ZW50IC0gQSB0ZWxlbWV0cnkgcGluZyBpbmRpY2F0aW5nIGFuIHVuZGVzaXJlZCBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgRmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHBpbmcgKHZhbHVlLCBldGMuKVxuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24uIEZvciBVSSBjb2RlLCBhIEFsc29Ub01haW4gYWN0aW9uLlxuICovXG5mdW5jdGlvbiBVbmRlc2lyZWRFdmVudChkYXRhLCBpbXBvcnRDb250ZXh0ID0gZ2xvYmFsSW1wb3J0Q29udGV4dCkge1xuICBjb25zdCBhY3Rpb24gPSB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuVEVMRU1FVFJZX1VOREVTSVJFRF9FVkVOVCxcbiAgICBkYXRhLFxuICB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA
/
IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuLyoqXG4gKiBQZXJmRXZlbnQgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYSBwZXJmb3JtYW5jZS1yZWxhdGVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZyAodmFsdWUsIGV0Yy4pXG4gKiBAcGFyYW0gIHtpbnR9IGltcG9ydENvbnRleHQgKEZvciB0ZXN0aW5nKSBPdmVycmlkZSB0aGUgaW1wb3J0IGNvbnRleHQgZm9yIHRlc3RpbmcuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbi4gRm9yIFVJIGNvZGUsIGEgQWxzb1RvTWFpbiBhY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIFBlcmZFdmVudChkYXRhLCBpbXBvcnRDb250ZXh0ID0gZ2xvYmFsSW1wb3J0Q29udGV4dCkge1xuICBjb25zdCBhY3Rpb24gPSB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuVEVMRU1FVFJZX1BFUkZPUk1BTkNFX0VWRU5ULFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG4vKipcbiAqIEltcHJlc3Npb25TdGF0cyAtIEEgdGVsZW1ldHJ5IHBpbmcgaW5kaWNhdGluZyBhbiBpbXByZXNzaW9uIHN0YXRzLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZ1xuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogI3JldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24uIEZvciBVSSBjb2RlLCBhIEFsc29Ub01haW4gYWN0aW9uLlxuICovXG5mdW5jdGlvbiBJbXByZXNzaW9uU3RhdHMoZGF0YSwgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHQpIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLlRFTEVNRVRSWV9JTVBSRVNTSU9OX1NUQVRTLFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG4vKipcbiAqIERpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cyAtIEEgdGVsZW1ldHJ5IHBpbmcgaW5kaWNhdGluZyBhbiBpbXByZXNzaW9uIHN0YXRzIGluIERpc2NvdmVyeSBTdHJlYW0uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIEZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSBwaW5nXG4gKiBAcGFyYW0gIHtpbnR9IGltcG9ydENvbnRleHQgKEZvciB0ZXN0aW5nKSBPdmVycmlkZSB0aGUgaW1wb3J0IGNvbnRleHQgZm9yIHRlc3RpbmcuXG4gKiAjcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbi4gRm9yIFVJIGNvZGUsIGEgQWxzb1RvTWFpbiBhY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIERpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cyhcbiAgZGF0YSxcbiAgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHRcbikge1xuICBjb25zdCBhY3Rpb24gPSB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuRElTQ09WRVJZX1NUUkVBTV9JTVBSRVNTSU9OX1NUQVRTLFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG4vKipcbiAqIERpc2NvdmVyeVN0cmVhbUxvYWRlZENvbnRlbnQgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYSBjb250ZW50IGdldHMgbG9hZGVkIGluIERpc2NvdmVyeSBTdHJlYW0uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIEZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSBwaW5nXG4gKiBAcGFyYW0gIHtpbnR9IGltcG9ydENvbnRleHQgKEZvciB0ZXN0aW5nKSBPdmVycmlkZSB0aGUgaW1wb3J0IGNvbnRleHQgZm9yIHRlc3RpbmcuXG4gKiAjcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbi4gRm9yIFVJIGNvZGUsIGEgQWxzb1RvTWFpbiBhY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIERpc2NvdmVyeVN0cmVhbUxvYWRlZENvbnRlbnQoXG4gIGRhdGEsXG4gIGltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0XG4pIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkRJU0NPVkVSWV9TVFJFQU1fTE9BREVEX0NPTlRFTlQsXG4gICAgZGF0YSxcbiAgfTtcbiAgcmV0dXJuIGltcG9ydENvbnRleHQgPT09IFVJX0NPREUgPyBBbHNvVG9NYWluKGFjdGlvbikgOiBhY3Rpb247XG59XG5cbmZ1bmN0aW9uIFNldFByZWYobmFtZSwgdmFsdWUsIGltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0KSB7XG4gIGNvbnN0IGFjdGlvbiA9IHsgdHlwZTogYWN0aW9uVHlwZXMuU0VUX1BSRUYsIGRhdGE6IHsgbmFtZSwgdmFsdWUgfSB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA
/
IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuZnVuY3Rpb24gV2ViRXh0RXZlbnQodHlwZSwgZGF0YSwgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHQpIHtcbiAgaWYgKCFkYXRhIHx8ICFkYXRhLnNvdXJjZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdXZWJFeHRFdmVudCBhY3Rpb25zIHNob3VsZCBpbmNsdWRlIGEgcHJvcGVydHkgXCJzb3VyY2VcIiwgdGhlIGlkIG9mIHRoZSB3ZWJleHRlbnNpb24gdGhhdCBzaG91bGQgcmVjZWl2ZSB0aGUgZXZlbnQuJ1xuICAgICk7XG4gIH1cbiAgY29uc3QgYWN0aW9uID0geyB0eXBlLCBkYXRhIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG50aGlzLmFjdGlvblR5cGVzID0gYWN0aW9uVHlwZXM7XG50aGlzLkFTUm91dGVyQWN0aW9ucyA9IEFTUm91dGVyQWN0aW9ucztcblxudGhpcy5hY3Rpb25DcmVhdG9ycyA9IHtcbiAgQnJvYWRjYXN0VG9Db250ZW50LFxuICBVc2VyRXZlbnQsXG4gIEFTUm91dGVyVXNlckV2ZW50LFxuICBVbmRlc2lyZWRFdmVudCxcbiAgUGVyZkV2ZW50LFxuICBJbXByZXNzaW9uU3RhdHMsXG4gIEFsc29Ub09uZUNvbnRlbnQsXG4gIE9ubHlUb09uZUNvbnRlbnQsXG4gIEFsc29Ub01haW4sXG4gIE9ubHlUb01haW4sXG4gIEFsc29Ub1ByZWxvYWRlZCxcbiAgU2V0UHJlZixcbiAgV2ViRXh0RXZlbnQsXG4gIERpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cyxcbiAgRGlzY292ZXJ5U3RyZWFtTG9hZGVkQ29udGVudCxcbiAgRGlzY292ZXJ5U3RyZWFtU3BvY3NGaWxsLFxufTtcblxuLy8gVGhlc2UgYXJlIGhlbHBlcnMgdG8gdGVzdCBmb3IgY2VydGFpbiBraW5kcyBvZiBhY3Rpb25zXG50aGlzLmFjdGlvblV0aWxzID0ge1xuICBpc1NlbmRUb01haW4oYWN0aW9uKSB7XG4gICAgaWYgKCFhY3Rpb24ubWV0YSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgYWN0aW9uLm1ldGEudG8gPT09IE1BSU5fTUVTU0FHRV9UWVBFICYmXG4gICAgICBhY3Rpb24ubWV0YS5mcm9tID09PSBDT05URU5UX01FU1NBR0VfVFlQRVxuICAgICk7XG4gIH0sXG4gIGlzQnJvYWRjYXN0VG9Db250ZW50KGFjdGlvbikge1xuICAgIGlmICghYWN0aW9uLm1ldGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbi5tZXRhLnRvID09PSBDT05URU5UX01FU1NBR0VfVFlQRSAmJiAhYWN0aW9uLm1ldGEudG9UYXJnZXQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzU2VuZFRvT25lQ29udGVudChhY3Rpb24pIHtcbiAgICBpZiAoIWFjdGlvbi5tZXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChhY3Rpb24ubWV0YS50byA9PT0gQ09OVEVOVF9NRVNTQUdFX1RZUEUgJiYgYWN0aW9uLm1ldGEudG9UYXJnZXQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzU2VuZFRvUHJlbG9hZGVkKGFjdGlvbikge1xuICAgIGlmICghYWN0aW9uLm1ldGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGFjdGlvbi5tZXRhLnRvID09PSBQUkVMT0FEX01FU1NBR0VfVFlQRSAmJlxuICAgICAgYWN0aW9uLm1ldGEuZnJvbSA9PT0gTUFJTl9NRVNTQUdFX1RZUEVcbiAgICApO1xuICB9LFxuICBpc0Zyb21NYWluKGFjdGlvbikge1xuICAgIGlmICghYWN0aW9uLm1ldGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGFjdGlvbi5tZXRhLmZyb20gPT09IE1BSU5fTUVTU0FHRV9UWVBFICYmXG4gICAgICBhY3Rpb24ubWV0YS50byA9PT0gQ09OVEVOVF9NRVNTQUdFX1RZUEVcbiAgICApO1xuICB9LFxuICBnZXRQb3J0SWRPZlNlbmRlcihhY3Rpb24pIHtcbiAgICByZXR1cm4gKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLmZyb21UYXJnZXQpIHx8IG51bGw7XG4gIH0sXG4gIF9Sb3V0ZU1lc3NhZ2UsXG59O1xuXG5jb25zdCBFWFBPUlRFRF9TWU1CT0xTID0gW1xuICBcImFjdGlvblR5cGVzXCIsXG4gIFwiYWN0aW9uQ3JlYXRvcnNcIixcbiAgXCJhY3Rpb25VdGlsc1wiLFxuICBcIkFTUm91dGVyQWN0aW9uc1wiLFxuICBcImdsb2JhbEltcG9ydENvbnRleHRcIixcbiAgXCJVSV9DT0RFXCIsXG4gIFwiQkFDS0dST1VORF9QUk9DRVNTXCIsXG4gIFwiTUFJTl9NRVNTQUdFX1RZUEVcIixcbiAgXCJDT05URU5UX01FU1NBR0VfVFlQRVwiLFxuICBcIlBSRUxPQURfTUVTU0FHRV9UWVBFXCIsXG5dO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgQVNSb3V0ZXJBZG1pbiB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0FTUm91dGVyQWRtaW4vQVNSb3V0ZXJBZG1pblwiO1xuaW1wb3J0IHsgQVNSb3V0ZXJVSVN1cmZhY2UgfSBmcm9tIFwiLi4vLi4vYXNyb3V0ZXIvYXNyb3V0ZXItY29udGVudFwiO1xuaW1wb3J0IHsgQ29uZmlybURpYWxvZyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbmZpcm1EaWFsb2cvQ29uZmlybURpYWxvZ1wiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgRGlzY292ZXJ5U3RyZWFtQmFzZSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUJhc2UvRGlzY292ZXJ5U3RyZWFtQmFzZVwiO1xuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Vycm9yQm91bmRhcnkvRXJyb3JCb3VuZGFyeVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2VhcmNoIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaFwiO1xuaW1wb3J0IHsgU2VjdGlvbnMgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9TZWN0aW9ucy9TZWN0aW9uc1wiO1xuXG5jb25zdCBQcmVmc0J1dHRvbiA9IHByb3BzID0
+
IChcbiAgPGRpdiBjbGFzc05hbWU9XCJwcmVmcy1idXR0b25cIj5cbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tc2V0dGluZ3NcIlxuICAgICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1zZXR0aW5ncy1idXR0b25cIlxuICAgIC8
+
XG4gIDwvZGl2PlxuKTtcblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdpbGwgbm90IGJlIGNvbnRpbnVvdXNseSB0cmlnZ2VyZWQgd2hlbiBjYWxsZWQuIFRoZVxuLy8gZnVuY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQgaWYgY2FsbGVkIGFnYWluIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0KSB7XG4gIGxldCB0aW1lcjtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHdha2VVcCA9ICgpID0
+
IHtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICB9O1xuXG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KHdha2VVcCwgd2FpdCk7XG4gICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIF9CYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pc0ZpcnN0cnVuKSB7XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwid2VsY29tZVwiLCBcImhpZGUtbWFpblwiKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVRoZW1lKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgIHRoaXMudXBkYXRlVGhlbWUoKTtcbiAgfVxuXG4gIHVwZGF0ZVRoZW1lKCkge1xuICAgIGNvbnN0IGJvZHlDbGFzc05hbWUgPSBbXG4gICAgICBcImFjdGl2aXR5LXN0cmVhbVwiLFxuICAgICAgLy8gSWYgd2Ugc2tpcHBlZCB0aGUgYWJvdXQ6d2VsY29tZSBvdmVybGF5IGFuZCByZW1vdmVkIHRoZSBDU1MgY2xhc3Nlc1xuICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBhZGQgdGhlbSBiYWNrIHRvIHRoZSBBY3Rpdml0eSBTdHJlYW0gdmlld1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJ3ZWxjb21lXCIpID8gXCJ3ZWxjb21lXCIgOiBcIlwiLFxuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRlLW1haW5cIikgPyBcImhpZGUtbWFpblwiIDogXCJcIixcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaW5saW5lLW9uYm9hcmRpbmdcIilcbiAgICAgICAgPyBcImlubGluZS1vbmJvYXJkaW5nXCJcbiAgICAgICAgOiBcIlwiLFxuICAgIF1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuICAgIGdsb2JhbC5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGJvZHlDbGFzc05hbWU7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IEFwcCB9ID0gcHJvcHM7XG4gICAgY29uc3QgaXNEZXZ0b29sc0VuYWJsZWQgPSBwcm9wcy5QcmVmcy52YWx1ZXNbXCJhc3JvdXRlci5kZXZ0b29sc0VuYWJsZWRcIl07XG5cbiAgICBpZiAoIUFwcC5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvckJvdW5kYXJ5IGNsYXNzTmFtZT1cImJhc2UtY29udGVudC1mYWxsYmFja1wiPlxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICAgPEJhc2VDb250ZW50IHsuLi50aGlzLnByb3BzfSAvPlxuICAgICAgICAgIHtpc0RldnRvb2xzRW5hYmxlZCA
/
IDxBU1JvdXRlckFkbWluIC8
+
IDogbnVsbH1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlQ29udGVudCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9wZW5QcmVmZXJlbmNlcyA9IHRoaXMub3BlblByZWZlcmVuY2VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbldpbmRvd1Njcm9sbCA9IGRlYm91bmNlKHRoaXMub25XaW5kb3dTY3JvbGwuYmluZCh0aGlzKSwgNSk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgZml4ZWRTZWFyY2g6IGZhbHNlIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uV2luZG93U2Nyb2xsKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25XaW5kb3dTY3JvbGwpO1xuICB9XG5cbiAgb25XaW5kb3dTY3JvbGwoKSB7XG4gICAgY29uc3QgU0NST0xMX1RIUkVTSE9MRCA9IDM0O1xuICAgIGlmIChnbG9iYWwuc2Nyb2xsWSA
+
IFNDUk9MTF9USFJFU0hPTEQgJiYgIXRoaXMuc3RhdGUuZml4ZWRTZWFyY2gpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBmaXhlZFNlYXJjaDogdHJ1ZSB9KTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5zY3JvbGxZIDw9IFNDUk9MTF9USFJFU0hPTEQgJiYgdGhpcy5zdGF0ZS5maXhlZFNlYXJjaCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZpeGVkU2VhcmNoOiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cblxuICBvcGVuUHJlZmVyZW5jZXMoKSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuU0VUVElOR1NfT1BFTiB9KSk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhYy5Vc2VyRXZlbnQoeyBldmVudDogXCJPUEVOX05FV1RBQl9QUkVGU1wiIH0pKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgQXBwIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGluaXRpYWxpemVkIH0gPSBBcHA7XG4gICAgY29uc3QgcHJlZnMgPSBwcm9wcy5QcmVmcy52YWx1ZXM7XG5cbiAgICBjb25zdCBpc0Rpc2NvdmVyeVN0cmVhbSA9XG4gICAgICBwcm9wcy5EaXNjb3ZlcnlTdHJlYW0uY29uZmlnICYmIHByb3BzLkRpc2NvdmVyeVN0cmVhbS5jb25maWcuZW5hYmxlZDtcbiAgICBsZXQgZmlsdGVyZWRTZWN0aW9ucyA9IHByb3BzLlNlY3Rpb25zO1xuXG4gICAgLy8gRmlsdGVyIG91dCBoaWdobGlnaHRzIGZvciBEU1xuICAgIGlmIChpc0Rpc2NvdmVyeVN0cmVhbSkge1xuICAgICAgZmlsdGVyZWRTZWN0aW9ucyA9IGZpbHRlcmVkU2VjdGlvbnMuZmlsdGVyKFxuICAgICAgICBzZWN0aW9uID0
+
IHNlY3Rpb24uaWQgIT09IFwiaGlnaGxpZ2h0c1wiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBub1NlY3Rpb25zRW5hYmxlZCA9XG4gICAgICAhcHJlZnNbXCJmZWVkcy50b3BzaXRlc1wiXSAmJlxuICAgICAgZmlsdGVyZWRTZWN0aW9ucy5maWx0ZXIoc2VjdGlvbiA9PiBzZWN0aW9uLmVuYWJsZWQpLmxlbmd0aCA9PT0gMDtcbiAgICBjb25zdCBzZWFyY2hIYW5kb2ZmRW5hYmxlZCA9IHByZWZzW1wiaW1wcm92ZXNlYXJjaC5oYW5kb2ZmVG9Bd2Vzb21lYmFyXCJdO1xuXG4gICAgY29uc3Qgb3V0ZXJDbGFzc05hbWUgPSBbXG4gICAgICBcIm91dGVyLXdyYXBwZXJcIixcbiAgICAgIGlzRGlzY292ZXJ5U3RyZWFtICYmIFwiZHMtb3V0ZXItd3JhcHBlci1zZWFyY2gtYWxpZ25tZW50XCIsXG4gICAgICBpc0Rpc2NvdmVyeVN0cmVhbSAmJiBcImRzLW91dGVyLXdyYXBwZXItYnJlYWtwb2ludC1vdmVycmlkZVwiLFxuICAgICAgcHJlZnMuc2hvd1NlYXJjaCAmJlxuICAgICAgICB0aGlzLnN0YXRlLmZpeGVkU2VhcmNoICYmXG4gICAgICAgICFub1NlY3Rpb25zRW5hYmxlZCAmJlxuICAgICAgICBcImZpeGVkLXNlYXJjaFwiLFxuICAgICAgcHJlZnMuc2hvd1NlYXJjaCAmJiBub1NlY3Rpb25zRW5hYmxlZCAmJiBcIm9ubHktc2VhcmNoXCIsXG4gICAgXVxuICAgICAgLmZpbHRlcih2ID0
+
IHYpXG4gICAgICAuam9pbihcIiBcIik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e291dGVyQ2xhc3NOYW1lfT5cbiAgICAgICAgICA8bWFpbj5cbiAgICAgICAgICAgIHtwcmVmcy5zaG93U2VhcmNoICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJub24tY29sbGFwc2libGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICAgICAgICAgICAgPFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICBzaG93TG9nbz17bm9TZWN0aW9uc0VuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIGhhbmRvZmZFbmFibGVkPXtzZWFyY2hIYW5kb2ZmRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzLlNlYXJjaH1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8QVNSb3V0ZXJVSVN1cmZhY2VcbiAgICAgICAgICAgICAgYXBwVXBkYXRlQ2hhbm5lbD17dGhpcy5wcm9wcy5QcmVmcy52YWx1ZXMuYXBwVXBkYXRlQ2hhbm5lbH1cbiAgICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e3RoaXMucHJvcHMuUHJlZnMudmFsdWVzLmZ4YV9lbmRwb2ludH1cbiAgICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bib2R5LXdyYXBwZXIke2luaXRpYWxpemVkID8gXCIgb25cIiA6IFwiXCJ9YH0
+
XG4gICAgICAgICAgICAgIHtpc0Rpc2NvdmVyeVN0cmVhbSA
/
IChcbiAgICAgICAgICAgICAgICA8RXJyb3JCb3VuZGFyeSBjbGFzc05hbWU9XCJib3JkZXJsZXNzLWVycm9yXCI
+
XG4gICAgICAgICAgICAgICAgICA8RGlzY292ZXJ5U3RyZWFtQmFzZSAvPlxuICAgICAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8U2VjdGlvbnMgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPFByZWZzQnV0dG9uIG9uQ2xpY2s9e3RoaXMub3BlblByZWZlcmVuY2VzfSAvPlxuICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICA8Q29uZmlybURpYWxvZyAvPlxuICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBCYXNlID0gY29ubmVjdChzdGF0ZSA9PiAoe1xuICBBcHA6IHN0YXRlLkFwcCxcbiAgUHJlZnM6IHN0YXRlLlByZWZzLFxuICBTZWN0aW9uczogc3RhdGUuU2VjdGlvbnMsXG4gIERpc2NvdmVyeVN0cmVhbTogc3RhdGUuRGlzY292ZXJ5U3RyZWFtLFxuICBTZWFyY2g6IHN0YXRlLlNlYXJjaCxcbn0pKShfQmFzZSk7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBBU1JvdXRlclV0aWxzIH0gZnJvbSBcIi4uLy4uL2Fzcm91dGVyL2Fzcm91dGVyLWNvbnRlbnRcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IE1vZGFsT3ZlcmxheSB9IGZyb20gXCIuLi8uLi9hc3JvdXRlci9jb21wb25lbnRzL01vZGFsT3ZlcmxheS9Nb2RhbE92ZXJsYXlcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNpbXBsZUhhc2hSb3V0ZXIgfSBmcm9tIFwiLi9TaW1wbGVIYXNoUm91dGVyXCI7XG5cbmNvbnN0IFJvdyA9IHByb3BzID0
+
IChcbiAgPHRyIGNsYXNzTmFtZT1cIm1lc3NhZ2UtaXRlbVwiIHsuLi5wcm9wc30
+
XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L3RyPlxuKTtcblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lKHRpbWVzdGFtcCkge1xuICBpZiAoIXRpbWVzdGFtcCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gdGltZXN0YW1wKSAvIDEwMDApO1xuICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHRpbWVzdGFtcCkgLyA2MDAwMCk7XG4gIGlmIChzZWNvbmRzIDwgMikge1xuICAgIHJldHVybiBcImp1c3Qgbm93XCI7XG4gIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwKSB7XG4gICAgcmV0dXJuIGAke3NlY29uZHN9IHNlY29uZHMgYWdvYDtcbiAgfSBlbHNlIGlmIChtaW51dGVzID09PSAxKSB7XG4gICAgcmV0dXJuIFwiMSBtaW51dGUgYWdvXCI7XG4gIH0gZWxzZSBpZiAobWludXRlcyA8IDYwMCkge1xuICAgIHJldHVybiBgJHttaW51dGVzfSBtaW51dGVzIGFnb2A7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCkudG9Mb2NhbGVTdHJpbmcoKTtcbn1cblxuY29uc3QgTEFZT1VUX1ZBUklBTlRTID0ge1xuICBiYXNpYzogXCJCYXNpYyBkZWZhdWx0IGxheW91dCAob24gYnkgZGVmYXVsdCBpbiBuaWdodGx5KVwiLFxuICBzdGFnaW5nX3Nwb2NzOiBcIkEgbGF5b3V0IHdpdGggYWxsIHNwb2NzIHNob3duXCIsXG4gIFwiZGV2LXRlc3QtYWxsXCI6XG4gICAgXCJBIGxpdHRsZSBiaXQgb2YgZXZlcnl0aGluZy4gR29vZCBsYXlvdXQgZm9yIHRlc3RpbmcgYWxsIGNvbXBvbmVudHNcIixcbiAgXCJkZXYtdGVzdC1mZWVkc1wiOiBcIlN0cmVzcyB0ZXN0aW5nIGZvciBzbG93IGZlZWRzXCIsXG59O1xuXG5leHBvcnQgY2xhc3MgVG9nZ2xlU3RvcnlCdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnN0b3J5KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5jb2xsYXBzZS9vcGVuPC9idXR0b24
+
O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVQcmVmQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLnByZWYsIGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNoZWNrZWR9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgIC8
+
e1wiIFwifVxuICAgICAgICB7dGhpcy5wcm9wcy5wcmVmfXtcIiBcIn1cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERpc2NvdmVyeVN0cmVhbUFkbWluIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucmVzdG9yZVByZWZEZWZhdWx0cyA9IHRoaXMucmVzdG9yZVByZWZEZWZhdWx0cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0Q29uZmlnVmFsdWUgPSB0aGlzLnNldENvbmZpZ1ZhbHVlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5leHBpcmVDYWNoZSA9IHRoaXMuZXhwaXJlQ2FjaGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoYW5nZUVuZHBvaW50VmFyaWFudCA9IHRoaXMuY2hhbmdlRW5kcG9pbnRWYXJpYW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN0b3J5VG9nZ2xlID0gdGhpcy5vblN0b3J5VG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRvZ2dsZWRTdG9yaWVzOiB7fSxcbiAgICB9O1xuICB9XG5cbiAgc2V0Q29uZmlnVmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgIHR5cGU6IGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVF9WQUxVRSxcbiAgICAgICAgZGF0YTogeyBuYW1lLCB2YWx1ZSB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmVzdG9yZVByZWZEZWZhdWx0cyhldmVudCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Pbmx5VG9NYWluKHtcbiAgICAgICAgdHlwZTogYXQuRElTQ09WRVJZX1NUUkVBTV9DT05GSUdfUkVTRVRfREVGQVVMVFMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBleHBpcmVDYWNoZSgpIHtcbiAgICBjb25zdCB7IGNvbmZpZyB9ID0gdGhpcy5wcm9wcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgIHR5cGU6IGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX0NIQU5HRSxcbiAgICAgICAgZGF0YTogY29uZmlnLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgY2hhbmdlRW5kcG9pbnRWYXJpYW50KGV2ZW50KSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSB0aGlzLnByb3BzLnN0YXRlLmNvbmZpZy5sYXlvdXRfZW5kcG9pbnQ7XG4gICAgaWYgKGVuZHBvaW50KSB7XG4gICAgICB0aGlzLnNldENvbmZpZ1ZhbHVlKFxuICAgICAgICBcImxheW91dF9lbmRwb2ludFwiLFxuICAgICAgICBlbmRwb2ludC5yZXBsYWNlKFxuICAgICAgICAgIC9sYXlvdXRfdmFyaWFudD0uKy8sXG4gICAgICAgICAgYGxheW91dF92YXJpYW50PSR7ZXZlbnQudGFyZ2V0LnZhbHVlfWBcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJDb21wb25lbnQod2lkdGgsIGNvbXBvbmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8dGFibGU
+
XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICA8Um93PlxuICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPlR5cGU8L3RkPlxuICAgICAgICAgICAgPHRkPntjb21wb25lbnQudHlwZX08L3RkPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIDxSb3c
+
XG4gICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI
+
V2lkdGg8L3RkPlxuICAgICAgICAgICAgPHRkPnt3aWR0aH08L3RkPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIHtjb21wb25lbnQuZmVlZCAmJiB0aGlzLnJlbmRlckZlZWQoY29tcG9uZW50LmZlZWQpfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgaXNDdXJyZW50VmFyaWFudChpZCkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5wcm9wcy5zdGF0ZS5jb25maWcubGF5b3V0X2VuZHBvaW50O1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBlbmRwb2ludCAmJiAhIWVuZHBvaW50Lm1hdGNoKGBsYXlvdXRfdmFyaWFudD0ke2lkfWApO1xuICAgIHJldHVybiBpc01hdGNoO1xuICB9XG5cbiAgcmVuZGVyRmVlZERhdGEodXJsKSB7XG4gICAgY29uc3QgeyBmZWVkcyB9ID0gdGhpcy5wcm9wcy5zdGF0ZTtcbiAgICBjb25zdCBmZWVkID0gZmVlZHMuZGF0YVt1cmxdLmRhdGE7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGg0PkZlZWQgdXJsOiB7dXJsfTwvaDQ
+
XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk
+
XG4gICAgICAgICAgICB7ZmVlZC5yZWNvbW1lbmRhdGlvbnMubWFwKHN0b3J5ID0
+
IHRoaXMucmVuZGVyU3RvcnlEYXRhKHN0b3J5KSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckZlZWRzRGF0YSgpIHtcbiAgICBjb25zdCB7IGZlZWRzIH0gPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgIHtPYmplY3Qua2V5cyhmZWVkcy5kYXRhKS5tYXAodXJsID0
+
IHRoaXMucmVuZGVyRmVlZERhdGEodXJsKSl9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTcG9jcygpIHtcbiAgICBjb25zdCB7IHNwb2NzIH0gPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgIGxldCBzcG9jc0RhdGEgPSBbXTtcbiAgICBpZiAoc3BvY3MuZGF0YSAmJiBzcG9jcy5kYXRhLnNwb2NzICYmIHNwb2NzLmRhdGEuc3BvY3MubGVuZ3RoKSB7XG4gICAgICBzcG9jc0RhdGEgPSBzcG9jcy5kYXRhLnNwb2NzO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk
+
XG4gICAgICAgICAgICA8Um93PlxuICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI
+
c3BvY3NfZW5kcG9pbnQ8L3RkPlxuICAgICAgICAgICAgICA8dGQ
+
e3Nwb2NzLnNwb2NzX2VuZHBvaW50fTwvdGQ
+
XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICAgIDxSb3c
+
XG4gICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5EYXRhIGxhc3QgZmV0Y2hlZDwvdGQ
+
XG4gICAgICAgICAgICAgIDx0ZD57cmVsYXRpdmVUaW1lKHNwb2NzLmxhc3RVcGRhdGVkKX08L3RkPlxuICAgICAgICAgICAgPC9Sb3c
+
XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGg0PlNwb2MgZGF0YTwvaDQ
+
XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk
+
e3Nwb2NzRGF0YS5tYXAoc3BvYyA9PiB0aGlzLnJlbmRlclN0b3J5RGF0YShzcG9jKSl9PC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGg0PlNwb2MgZnJlcXVlbmN5IGNhcHM8L2g0PlxuICAgICAgICA8dGFibGU
+
XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge3Nwb2NzLmZyZXF1ZW5jeV9jYXBzLm1hcChzcG9jID0
+
IHRoaXMucmVuZGVyU3RvcnlEYXRhKHNwb2MpKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgb25TdG9yeVRvZ2dsZShzdG9yeSkge1xuICAgIGNvbnN0IHsgdG9nZ2xlZFN0b3JpZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b2dnbGVkU3Rvcmllczoge1xuICAgICAgICAuLi50b2dnbGVkU3RvcmllcyxcbiAgICAgICAgW3N0b3J5LmlkXTogIXRvZ2dsZWRTdG9yaWVzW3N0b3J5LmlkXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJTdG9yeURhdGEoc3RvcnkpIHtcbiAgICBsZXQgc3RvcnlEYXRhID0gXCJcIjtcbiAgICBpZiAodGhpcy5zdGF0ZS50b2dnbGVkU3Rvcmllc1tzdG9yeS5pZF0pIHtcbiAgICAgIHN0b3J5RGF0YSA9IEpTT04uc3RyaW5naWZ5KHN0b3J5LCBudWxsLCAyKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e3N0b3J5LmlkfT5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2UtaWRcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHtzdG9yeS5pZH0gPGJyIC8
+
XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxUb2dnbGVTdG9yeUJ1dHRvbiBzdG9yeT17c3Rvcnl9IG9uQ2xpY2s9e3RoaXMub25TdG9yeVRvZ2dsZX0gLz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU
+
e3N0b3J5RGF0YX08L3ByZT5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckZlZWQoZmVlZCkge1xuICAgIGNvbnN0IHsgZmVlZHMgfSA9IHRoaXMucHJvcHMuc3RhdGU7XG4gICAgaWYgKCFmZWVkLnVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgIDxSb3c
+
XG4gICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkZlZWQgdXJsPC90ZD5cbiAgICAgICAgICA8dGQ
+
e2ZlZWQudXJsfTwvdGQ
+
XG4gICAgICAgIDwvUm93PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5EYXRhIGxhc3QgZmV0Y2hlZDwvdGQ
+
XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAge3JlbGF0aXZlVGltZShcbiAgICAgICAgICAgICAgZmVlZHMuZGF0YVtmZWVkLnVybF0gPyBmZWVkcy5kYXRhW2ZlZWQudXJsXS5sYXN0VXBkYXRlZCA6IG51bGxcbiAgICAgICAgICAgICkgfHwgXCIobm8gZGF0YSlcIn1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwcmVmVG9nZ2xlcyA9IFwiZW5hYmxlZCBoYXJkY29kZWRfbGF5b3V0IHNob3dfc3BvY3MgcGVyc29uYWxpemVkIGNvbGxhcHNpYmxlXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG4gICAgY29uc3QgeyBjb25maWcsIGxhc3RVcGRhdGVkLCBsYXlvdXQgfSA9IHRoaXMucHJvcHMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY
+
XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5yZXN0b3JlUHJlZkRlZmF1bHRzfT5cbiAgICAgICAgICBSZXN0b3JlIFByZWYgRGVmYXVsdHNcbiAgICAgICAgPC9idXR0b24
+
e1wiIFwifVxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuZXhwaXJlQ2FjaGV9PlxuICAgICAgICAgIEV4cGlyZSBDYWNoZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIHtwcmVmVG9nZ2xlcy5tYXAocHJlZiA9PiAoXG4gICAgICAgICAgICAgIDxSb3cga2V5PXtwcmVmfT5cbiAgICAgICAgICAgICAgICA8dGQ
+
XG4gICAgICAgICAgICAgICAgICA8VG9nZ2xlUHJlZkNoZWNrYm94XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2NvbmZpZ1twcmVmXX1cbiAgICAgICAgICAgICAgICAgICAgcHJlZj17cHJlZn1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuc2V0Q29uZmlnVmFsdWV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvdGQ
+
XG4gICAgICAgICAgICAgIDwvUm93PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGgzPkVuZHBvaW50IHZhcmlhbnQ8L2gzPlxuICAgICAgICA8cD5cbiAgICAgICAgICBZb3UgY2FuIGFsc28gY2hhbmdlIHRoaXMgbWFudWFsbHkgYnkgY2hhbmdpbmcgdGhpcyBwcmVmOntcIiBcIn1cbiAgICAgICAgICA8Y29kZT5icm93c2VyLm5ld3RhYnBhZ2UuYWN0aXZpdHktc3RyZWFtLmRpc2NvdmVyeXN0cmVhbS5jb25maWc8L2NvZGU
+
XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHRhYmxlXG4gICAgICAgICAgc3R5bGU9e1xuICAgICAgICAgICAgY29uZmlnLmVuYWJsZWQgJiYgIWNvbmZpZy5oYXJkY29kZWRfbGF5b3V0ID8gbnVsbCA6IHsgb3BhY2l0eTogMC41IH1cbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICA8dGJvZHk
+
XG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoTEFZT1VUX1ZBUklBTlRTKS5tYXAoaWQgPT4gKFxuICAgICAgICAgICAgICA8Um93IGtleT17aWR9PlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aWR9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuaXNDdXJyZW50VmFyaWFudChpZCl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZUVuZHBvaW50VmFyaWFudH1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI
+
e2lkfTwvdGQ
+
XG4gICAgICAgICAgICAgICAgPHRkPntMQVlPVVRfVkFSSUFOVFNbaWRdfTwvdGQ
+
XG4gICAgICAgICAgICAgIDwvUm93PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGgzPkNhY2hpbmcgaW5mbzwvaDM
+
XG4gICAgICAgIDx0YWJsZSBzdHlsZT17Y29uZmlnLmVuYWJsZWQgPyBudWxsIDogeyBvcGFjaXR5OiAwLjUgfX0
+
XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPFJvdz5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkRhdGEgbGFzdCBmZXRjaGVkPC90ZD5cbiAgICAgICAgICAgICAgPHRkPntyZWxhdGl2ZVRpbWUobGFzdFVwZGF0ZWQpIHx8IFwiKG5vIGRhdGEpXCJ9PC90ZD5cbiAgICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIDwvdGJvZHk
+
XG4gICAgICAgIDwvdGFibGU
+
XG4gICAgICAgIDxoMz5MYXlvdXQ8L2gzPlxuICAgICAgICB7bGF5b3V0Lm1hcCgocm93LCByb3dJbmRleCkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtgcm93LSR7cm93SW5kZXh9YH0
+
XG4gICAgICAgICAgICB7cm93LmNvbXBvbmVudHMubWFwKChjb21wb25lbnQsIGNvbXBvbmVudEluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDxkaXYga2V5PXtgY29tcG9uZW50LSR7Y29tcG9uZW50SW5kZXh9YH0gY2xhc3NOYW1lPVwiZHMtY29tcG9uZW50XCI
+
XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ29tcG9uZW50KHJvdy53aWR0aCwgY29tcG9uZW50KX1cbiAgICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICAgIDxoMz5GZWVkcyBEYXRhPC9oMz5cbiAgICAgICAge3RoaXMucmVuZGVyRmVlZHNEYXRhKCl9XG4gICAgICAgIDxoMz5TcG9jczwvaDM
+
XG4gICAgICAgIHt0aGlzLnJlbmRlclNwb2NzKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBU1JvdXRlckFkbWluSW5uZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbk1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRW5hYmxlZFRvZ2dsZSA9IHRoaXMuaGFuZGxlRW5hYmxlZFRvZ2dsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlVXNlclByZWZUb2dnbGUgPSB0aGlzLmhhbmRsZVVzZXJQcmVmVG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNoYW5nZU1lc3NhZ2VGaWx0ZXIgPSB0aGlzLm9uQ2hhbmdlTWVzc2FnZUZpbHRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUgPSB0aGlzLmZpbmRPdGhlckJ1bmRsZWRNZXNzYWdlc09mU2FtZVRlbXBsYXRlLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLmhhbmRsZUV4cHJlc3Npb25FdmFsID0gdGhpcy5oYW5kbGVFeHByZXNzaW9uRXZhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFuZ2VUYXJnZXRpbmdQYXJhbWV0ZXJzID0gdGhpcy5vbkNoYW5nZVRhcmdldGluZ1BhcmFtZXRlcnMuYmluZChcbiAgICAgIHRoaXNcbiAgICApO1xuICAgIHRoaXMub25DaGFuZ2VBdHRyaWJ1dGlvblBhcmFtZXRlcnMgPSB0aGlzLm9uQ2hhbmdlQXR0cmlidXRpb25QYXJhbWV0ZXJzLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0aW9uID0gdGhpcy5zZXRBdHRyaWJ1dGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Db3B5VGFyZ2V0aW5nUGFyYW1zID0gdGhpcy5vbkNvcHlUYXJnZXRpbmdQYXJhbXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUGFzdGVUYXJnZXRpbmdQYXJhbXMgPSB0aGlzLm9uUGFzdGVUYXJnZXRpbmdQYXJhbXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTmV3VGFyZ2V0aW5nUGFyYW1zID0gdGhpcy5vbk5ld1RhcmdldGluZ1BhcmFtcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtZXNzYWdlRmlsdGVyOiBcImFsbFwiLFxuICAgICAgZXZhbHVhdGlvblN0YXR1czoge30sXG4gICAgICB0cmFpbGhlYWQ6IHt9LFxuICAgICAgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVyczogbnVsbCxcbiAgICAgIG5ld1N0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnM6IG51bGwsXG4gICAgICBjb3BpZWRUb0NsaXBib2FyZDogZmFsc2UsXG4gICAgICBwYXN0ZUZyb21DbGlwYm9hcmQ6IGZhbHNlLFxuICAgICAgYXR0cmlidXRpb25QYXJhbWV0ZXJzOiB7XG4gICAgICAgIHNvdXJjZTogXCJhZGRvbnMubW96aWxsYS5vcmdcIixcbiAgICAgICAgY2FtcGFpZ246IFwibm9uLWZ4LWJ1dHRvblwiLFxuICAgICAgICBjb250ZW50OiBcImlyaWRpdW1AcGFydGljbGVjb3JlLmdpdGh1Yi5pb1wiLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgb25NZXNzYWdlKHsgZGF0YTogYWN0aW9uIH0pIHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwiQURNSU5fU0VUX1NUQVRFXCIpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoYWN0aW9uLmRhdGEpO1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLnN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIE9iamVjdC5rZXlzKGFjdGlvbi5kYXRhLnRhcmdldGluZ1BhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVyc1twYXJhbV0gPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGFjdGlvbi5kYXRhLnRhcmdldGluZ1BhcmFtZXRlcnNbcGFyYW1dLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IEFTUm91dGVyVXRpbHMuZ2V0UHJldmlld0VuZHBvaW50KCk7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIkFETUlOX0NPTk5FQ1RfU1RBVEVcIixcbiAgICAgIGRhdGE6IHsgZW5kcG9pbnQgfSxcbiAgICB9KTtcbiAgICBBU1JvdXRlclV0aWxzLmFkZExpc3RlbmVyKHRoaXMub25NZXNzYWdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIEFTUm91dGVyVXRpbHMucmVtb3ZlTGlzdGVuZXIodGhpcy5vbk1lc3NhZ2UpO1xuICB9XG5cbiAgZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5tZXNzYWdlcy5maWx0ZXIoXG4gICAgICBtc2cgPT4gbXNnLnRlbXBsYXRlID09PSB0ZW1wbGF0ZSAmJiBtc2cuYnVuZGxlZFxuICAgICk7XG4gIH1cblxuICBoYW5kbGVCbG9jayhtc2cpIHtcbiAgICBpZiAobXNnLmJ1bmRsZWQpIHtcbiAgICAgIC8vIElmIHdlIGFyZSBibG9ja2luZyBhIG1lc3NhZ2UgdGhhdCBiZWxvbmdzIHRvIGEgYnVuZGxlLCBibG9jayBhbGwgb3RoZXIgbWVzc2FnZXMgdGhhdCBhcmUgYnVuZGxlZCBvZiB0aGF0IHNhbWUgdGVtcGxhdGVcbiAgICAgIGxldCBidW5kbGUgPSB0aGlzLmZpbmRPdGhlckJ1bmRsZWRNZXNzYWdlc09mU2FtZVRlbXBsYXRlKG1zZy50ZW1wbGF0ZSk7XG4gICAgICByZXR1cm4gKCkgPT4gQVNSb3V0ZXJVdGlscy5ibG9ja0J1bmRsZShidW5kbGUpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gQVNSb3V0ZXJVdGlscy5ibG9ja0J5SWQobXNnLmlkKTtcbiAgfVxuXG4gIGhhbmRsZVVuYmxvY2sobXNnKSB7XG4gICAgaWYgKG1zZy5idW5kbGVkKSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgdW5ibG9ja2luZyBhIG1lc3NhZ2UgdGhhdCBiZWxvbmdzIHRvIGEgYnVuZGxlLCB1bmJsb2NrIGFsbCBvdGhlciBtZXNzYWdlcyB0aGF0IGFyZSBidW5kbGVkIG9mIHRoYXQgc2FtZSB0ZW1wbGF0ZVxuICAgICAgbGV0IGJ1bmRsZSA9IHRoaXMuZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUobXNnLnRlbXBsYXRlKTtcbiAgICAgIHJldHVybiAoKSA9PiBBU1JvdXRlclV0aWxzLnVuYmxvY2tCdW5kbGUoYnVuZGxlKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0
+
IEFTUm91dGVyVXRpbHMudW5ibG9ja0J5SWQobXNnLmlkKTtcbiAgfVxuXG4gIGhhbmRsZU92ZXJyaWRlKGlkKSB7XG4gICAgcmV0dXJuICgpID0
+
IEFTUm91dGVyVXRpbHMub3ZlcnJpZGVNZXNzYWdlKGlkKTtcbiAgfVxuXG4gIGV4cGlyZUNhY2hlKCkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkVYUElSRV9RVUVSWV9DQUNIRVwiIH0pO1xuICB9XG5cbiAgcmVzZXRQcmVmKCkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIlJFU0VUX1BST1ZJREVSX1BSRUZcIiB9KTtcbiAgfVxuXG4gIGhhbmRsZUV4cHJlc3Npb25FdmFsKCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycykpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW3BhcmFtXTtcbiAgICAgIGNvbnRleHRbcGFyYW1dID0gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IG51bGw7XG4gICAgfVxuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJFVkFMVUFURV9KRVhMX0VYUFJFU1NJT05cIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXhwcmVzc2lvbjogdGhpcy5yZWZzLmV4cHJlc3Npb25JbnB1dC52YWx1ZSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBvbkNoYW5nZVRhcmdldGluZ1BhcmFtZXRlcnMoZXZlbnQpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC50YXJnZXQ7XG5cbiAgICB0aGlzLnNldFN0YXRlKCh7IHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMgfSkgPT4ge1xuICAgICAgbGV0IHRhcmdldGluZ1BhcmFtZXRlcnNFcnJvciA9IG51bGw7XG4gICAgICBjb25zdCB1cGRhdGVkUGFyYW1ldGVycyA9IHsgLi4uc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyB9O1xuICAgICAgdXBkYXRlZFBhcmFtZXRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcGFyc2luZyB2YWx1ZSBvZiBwYXJhbWV0ZXIgJHtuYW1lfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgdGFyZ2V0aW5nUGFyYW1ldGVyc0Vycm9yID0geyBpZDogbmFtZSB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3BpZWRUb0NsaXBib2FyZDogZmFsc2UsXG4gICAgICAgIGV2YWx1YXRpb25TdGF0dXM6IHt9LFxuICAgICAgICBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzOiB1cGRhdGVkUGFyYW1ldGVycyxcbiAgICAgICAgdGFyZ2V0aW5nUGFyYW1ldGVyc0Vycm9yLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUVuYWJsZWRUb2dnbGUoZXZlbnQpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuc3RhdGUucHJvdmlkZXJQcmVmcy5maW5kKFxuICAgICAgcCA9PiBwLmlkID09PSBldmVudC50YXJnZXQuZGF0YXNldC5wcm92aWRlclxuICAgICk7XG4gICAgY29uc3QgdXNlclByZWZJbmZvID0gdGhpcy5zdGF0ZS51c2VyUHJlZnM7XG5cbiAgICBjb25zdCBpc1VzZXJFbmFibGVkID1cbiAgICAgIHByb3ZpZGVyLmlkIGluIHVzZXJQcmVmSW5mbyA
/
IHVzZXJQcmVmSW5mb1twcm92aWRlci5pZF0gOiB0cnVlO1xuICAgIGNvbnN0IGlzU3lzdGVtRW5hYmxlZCA9IHByb3ZpZGVyLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNFbmFibGluZyA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xuXG4gICAgaWYgKGlzRW5hYmxpbmcpIHtcbiAgICAgIGlmICghaXNVc2VyRW5hYmxlZCkge1xuICAgICAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcIlNFVF9QUk9WSURFUl9VU0VSX1BSRUZcIixcbiAgICAgICAgICBkYXRhOiB7IGlkOiBwcm92aWRlci5pZCwgdmFsdWU6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzU3lzdGVtRW5hYmxlZCkge1xuICAgICAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcIkVOQUJMRV9QUk9WSURFUlwiLFxuICAgICAgICAgIGRhdGE6IHByb3ZpZGVyLmlkLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiRElTQUJMRV9QUk9WSURFUlwiLFxuICAgICAgICBkYXRhOiBwcm92aWRlci5pZCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlRmlsdGVyOiBcImFsbFwiIH0pO1xuICB9XG5cbiAgaGFuZGxlVXNlclByZWZUb2dnbGUoZXZlbnQpIHtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICB0eXBlOiBcIlNFVF9QUk9WSURFUl9VU0VSX1BSRUZcIixcbiAgICAgIGRhdGE6IHsgaWQ6IGV2ZW50LnRhcmdldC5kYXRhc2V0LnByb3ZpZGVyLCB2YWx1ZTogZXZlbnQudGFyZ2V0LmNoZWNrZWQgfSxcbiAgICB9O1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoYWN0aW9uKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZUZpbHRlcjogXCJhbGxcIiB9KTtcbiAgfVxuXG4gIG9uQ2hhbmdlTWVzc2FnZUZpbHRlcihldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlRmlsdGVyOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICAvLyBTaW11bGF0ZSBhIGNvcHkgZXZlbnQgdGhhdCBzZXRzIHRvIGNsaXBib2FyZCBhbGwgdGFyZ2V0aW5nIHBhcmFtdGVycyBhbmQgdmFsdWVzXG4gIG9uQ29weVRhcmdldGluZ1BhcmFtcyhldmVudCkge1xuICAgIGNvbnN0IHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMgPSB7XG4gICAgICAuLi50aGlzLnN0YXRlLnN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMsXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzKSkge1xuICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIG5vdCBzZXQgdGhlIHBhcmFtZXRlciB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSBzdHJpbmdpZnlcbiAgICAgIGlmIChzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW2tleV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzZXRDbGlwYm9hcmREYXRhID0gZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YShcbiAgICAgICAgXCJ0ZXh0XCIsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMsIG51bGwsIDIpXG4gICAgICApO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgc2V0Q2xpcGJvYXJkRGF0YSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgY29waWVkVG9DbGlwYm9hcmQ6IHRydWUgfSk7XG4gICAgfTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIHNldENsaXBib2FyZERhdGEpO1xuXG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICB9XG5cbiAgLy8gQ29weSBhbGwgY2xpcGJvYXJkIGRhdGEgdG8gdGFyZ2V0aW5nIHBhcmFtZXRlcnNcbiAgb25QYXN0ZVRhcmdldGluZ1BhcmFtcyhldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoKHsgcGFzdGVGcm9tQ2xpcGJvYXJkIH0pID0
+
ICh7XG4gICAgICBwYXN0ZUZyb21DbGlwYm9hcmQ6ICFwYXN0ZUZyb21DbGlwYm9hcmQsXG4gICAgICBuZXdTdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzOiBcIlwiLFxuICAgIH0pKTtcbiAgfVxuXG4gIG9uTmV3VGFyZ2V0aW5nUGFyYW1zKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG5ld1N0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnM6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImVycm9yU3RhdGVcIik7XG4gICAgdGhpcy5yZWZzLnRhcmdldGluZ1BhcmFtc0V2YWwuaW5uZXJUZXh0ID0gXCJcIjtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclN0YXRlXCIpO1xuICAgICAgdGhpcy5yZWZzLnRhcmdldGluZ1BhcmFtc0V2YWwuaW5uZXJUZXh0ID0gZS5tZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlck1lc3NhZ2VJdGVtKG1zZykge1xuICAgIGNvbnN0IGlzQmxvY2tlZCA9XG4gICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VCbG9ja0xpc3QuaW5jbHVkZXMobXNnLmlkKSB8fFxuICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlQmxvY2tMaXN0LmluY2x1ZGVzKG1zZy5jYW1wYWlnbik7XG4gICAgY29uc3QgaW1wcmVzc2lvbnMgPSB0aGlzLnN0YXRlLm1lc3NhZ2VJbXByZXNzaW9uc1ttc2cuaWRdXG4gICAgICA
/
IHRoaXMuc3RhdGUubWVzc2FnZUltcHJlc3Npb25zW21zZy5pZF0ubGVuZ3RoXG4gICAgICA6IDA7XG5cbiAgICBsZXQgaXRlbUNsYXNzTmFtZSA9IFwibWVzc2FnZS1pdGVtXCI7XG4gICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgaXRlbUNsYXNzTmFtZSArPSBcIiBibG9ja2VkXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9e2l0ZW1DbGFzc05hbWV9IGtleT17YCR7bXNnLmlkfS0ke21zZy5wcm92aWRlcn1gfT5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2UtaWRcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHttc2cuaWR9IDxiciAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YGJ1dHRvbiAke2lzQmxvY2tlZCA
/
IFwiXCIgOiBcIiBwcmltYXJ5XCJ9YH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e1xuICAgICAgICAgICAgICBpc0Jsb2NrZWQgPyB0aGlzLmhhbmRsZVVuYmxvY2sobXNnKSA6IHRoaXMuaGFuZGxlQmxvY2sobXNnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpc0Jsb2NrZWQgPyBcIlVuYmxvY2tcIiA6IFwiQmxvY2tcIn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB7aXNCbG9ja2VkID8gbnVsbCA6IChcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVPdmVycmlkZShtc2cuaWQpfT5cbiAgICAgICAgICAgICAgU2hvd1xuICAgICAgICAgICAgPC9idXR0b24
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8YnIgLz4oe2ltcHJlc3Npb25zfSBpbXByZXNzaW9ucylcbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU
+
e0pTT04uc3RyaW5naWZ5KG1zZywgbnVsbCwgMil9PC9wcmU
+
XG4gICAgICAgIDwvdGQ
+
XG4gICAgICA8L3RyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJNZXNzYWdlcygpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUubWVzc2FnZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlc1RvU2hvdyA9XG4gICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VGaWx0ZXIgPT09IFwiYWxsXCJcbiAgICAgICAgPyB0aGlzLnN0YXRlLm1lc3NhZ2VzXG4gICAgICAgIDogdGhpcy5zdGF0ZS5tZXNzYWdlcy5maWx0ZXIoXG4gICAgICAgICAgICBtZXNzYWdlID0
+
IG1lc3NhZ2UucHJvdmlkZXIgPT09IHRoaXMuc3RhdGUubWVzc2FnZUZpbHRlclxuICAgICAgICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PnttZXNzYWdlc1RvU2hvdy5tYXAobXNnID0
+
IHRoaXMucmVuZGVyTWVzc2FnZUl0ZW0obXNnKSl9PC90Ym9keT5cbiAgICAgIDwvdGFibGU
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlck1lc3NhZ2VGaWx0ZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnByb3ZpZGVycykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8cD5cbiAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllciAqL31cbiAgICAgIFNob3cgbWVzc2FnZXMgZnJvbXtcIiBcIn1cbiAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tb25jaGFuZ2UgKi99XG4gICAgICAgIDxzZWxlY3RcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlRmlsdGVyfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlTWVzc2FnZUZpbHRlcn1cbiAgICAgICAgPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhbGxcIj5hbGwgcHJvdmlkZXJzPC9vcHRpb24
+
XG4gICAgICAgICAge3RoaXMuc3RhdGUucHJvdmlkZXJzLm1hcChwcm92aWRlciA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17cHJvdmlkZXIuaWR9IHZhbHVlPXtwcm92aWRlci5pZH0
+
XG4gICAgICAgICAgICAgIHtwcm92aWRlci5pZH1cbiAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvcD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVGFibGVIZWFkKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8dGhlYWQ
+
XG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCIgLz5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI
+
UHJvdmlkZXIgSUQ8L3RkPlxuICAgICAgICAgIDx0ZD5Tb3VyY2U8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5Db2hvcnQ8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5MYXN0IFVwZGF0ZWQ8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUHJvdmlkZXJzKCkge1xuICAgIGNvbnN0IHByb3ZpZGVyc0NvbmZpZyA9IHRoaXMuc3RhdGUucHJvdmlkZXJQcmVmcztcbiAgICBjb25zdCBwcm92aWRlckluZm8gPSB0aGlzLnN0YXRlLnByb3ZpZGVycztcbiAgICBjb25zdCB1c2VyUHJlZkluZm8gPSB0aGlzLnN0YXRlLnVzZXJQcmVmcztcblxuICAgIHJldHVybiAoXG4gICAgICA8dGFibGU
+
XG4gICAgICAgIHt0aGlzLnJlbmRlclRhYmxlSGVhZCgpfVxuICAgICAgICA8dGJvZHk
+
XG4gICAgICAgICAge3Byb3ZpZGVyc0NvbmZpZy5tYXAoKHByb3ZpZGVyLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1Rlc3RQcm92aWRlciA9IHByb3ZpZGVyLmlkLmluY2x1ZGVzKFwiX2xvY2FsX3Rlc3RpbmdcIik7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gcHJvdmlkZXJJbmZvLmZpbmQocCA9PiBwLmlkID09PSBwcm92aWRlci5pZCkgfHwge307XG4gICAgICAgICAgICBjb25zdCBpc1VzZXJFbmFibGVkID1cbiAgICAgICAgICAgICAgcHJvdmlkZXIuaWQgaW4gdXNlclByZWZJbmZvID8gdXNlclByZWZJbmZvW3Byb3ZpZGVyLmlkXSA6IHRydWU7XG4gICAgICAgICAgICBjb25zdCBpc1N5c3RlbUVuYWJsZWQgPSBpc1Rlc3RQcm92aWRlciB8fCBwcm92aWRlci5lbmFibGVkO1xuXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBcImxvY2FsXCI7XG4gICAgICAgICAgICBpZiAocHJvdmlkZXIudHlwZSA9PT0gXCJyZW1vdGVcIikge1xuICAgICAgICAgICAgICBsYWJlbCA9IChcbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgIGVuZHBvaW50IChcbiAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByb3ZpZGVyVXJsXCJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj17aW5mby51cmx9XG4gICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7aW5mby51cmx9XG4gICAgICAgICAgICAgICAgICA8L2E
+
XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm92aWRlci50eXBlID09PSBcInJlbW90ZS1zZXR0aW5nc1wiKSB7XG4gICAgICAgICAgICAgIGxhYmVsID0gYHJlbW90ZSBzZXR0aW5ncyAoJHtwcm92aWRlci5idWNrZXR9KWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZWFzb25zRGlzYWJsZWQgPSBbXTtcbiAgICAgICAgICAgIGlmICghaXNTeXN0ZW1FbmFibGVkKSB7XG4gICAgICAgICAgICAgIHJlYXNvbnNEaXNhYmxlZC5wdXNoKFwic3lzdGVtIHByZWZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzVXNlckVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgcmVhc29uc0Rpc2FibGVkLnB1c2goXCJ1c2VyIHByZWZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVhc29uc0Rpc2FibGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsYWJlbCA9IGBkaXNhYmxlZCB2aWEgJHtyZWFzb25zRGlzYWJsZWQuam9pbihcIiwgXCIpfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e2l9PlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgIHtpc1Rlc3RQcm92aWRlciA
/
IChcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICByZWFkT25seT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXByb3ZpZGVyPXtwcm92aWRlci5pZH1cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtpc1VzZXJFbmFibGVkICYmIGlzU3lzdGVtRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVFbmFibGVkVG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57cHJvdmlkZXIuaWR9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ
+
XG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Bzb3VyY2VMYWJlbCR7XG4gICAgICAgICAgICAgICAgICAgICAgaXNVc2VyRW5hYmxlZCAmJiBpc1N5c3RlbUVuYWJsZWQgPyBcIlwiIDogXCIgaXNEaXNhYmxlZFwiXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4
+
XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ
+
e3Byb3ZpZGVyLmNvaG9ydH08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT17eyB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiIH19PlxuICAgICAgICAgICAgICAgICAge2luZm8ubGFzdFVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgRGF0ZShpbmZvLmxhc3RVcGRhdGVkKS50b0xvY2FsZVN0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIDogXCJcIn1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclBhc3RlTW9kYWwoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnBhc3RlRnJvbUNsaXBib2FyZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGVycm9ycyA9XG4gICAgICB0aGlzLnJlZnMudGFyZ2V0aW5nUGFyYW1zRXZhbCAmJlxuICAgICAgdGhpcy5yZWZzLnRhcmdldGluZ1BhcmFtc0V2YWwuaW5uZXJUZXh0Lmxlbmd0aDtcbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsT3ZlcmxheVxuICAgICAgICBpbm5lclN0eWxlPVwicGFzdGVNb2RhbFwiXG4gICAgICAgIHRpdGxlPVwiTmV3IHRhcmdldGluZyBwYXJhbWV0ZXJzXCJcbiAgICAgICAgYnV0dG9uX2xhYmVsPXtlcnJvcnMgPyBcIkNhbmNlbFwiIDogXCJEb25lXCJ9XG4gICAgICAgIG9uRGlzbWlzc0J1bmRsZT17dGhpcy5vblBhc3RlVGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uYm9hcmRpbmdNZXNzYWdlXCI
+
XG4gICAgICAgICAgPHA
+
XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25OZXdUYXJnZXRpbmdQYXJhbXN9XG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5ld1N0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnN9XG4gICAgICAgICAgICAgIHJvd3M9XCIyMFwiXG4gICAgICAgICAgICAgIGNvbHM9XCI2MFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCByZWY9XCJ0YXJnZXRpbmdQYXJhbXNFdmFsXCIgLz5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L01vZGFsT3ZlcmxheT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVGFyZ2V0aW5nUGFyYW1ldGVycygpIHtcbiAgICAvLyBUaGVyZSB3YXMgbm8gZXJyb3IgYW5kIHRoZSByZXN1bHQgaXMgdHJ1dGh5XG4gICAgY29uc3Qgc3VjY2VzcyA9XG4gICAgICB0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMuc3VjY2VzcyAmJlxuICAgICAgISF0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMucmVzdWx0O1xuICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMucmVzdWx0LCBudWxsLCAyKSB8fFxuICAgICAgXCIoRW1wdHkgcmVzdWx0KVwiO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGgyPkV2YWx1YXRlIEpFWEwgZXhwcmVzc2lvbjwvaDI
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgIHJlZj1cImV4cHJlc3Npb25JbnB1dFwiXG4gICAgICAgICAgICAgICAgICByb3dzPVwiMTBcIlxuICAgICAgICAgICAgICAgICAgY29scz1cIjYwXCJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRXZhbHVhdGUgSkVYTCBleHByZXNzaW9ucyBhbmQgbW9jayBwYXJhbWV0ZXJzIGJ5IGNoYW5naW5nIHRoZWlyIHZhbHVlcyBiZWxvd1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBTdGF0dXM6e1wiIFwifVxuICAgICAgICAgICAgICAgIDxzcGFuIHJlZj1cImV2YWx1YXRpb25TdGF0dXNcIj5cbiAgICAgICAgICAgICAgICAgIHtzdWNjZXNzID8gXCLinIVcIiA6IFwi4p2MXCJ9LCBSZXN1bHQ6IHtyZXN1bHR9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L3A
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQVNSb3V0ZXJCdXR0b24gc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUV4cHJlc3Npb25FdmFsfVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAgRXZhbHVhdGVcbiAgICAgICAgICAgICAgPC9idXR0b24
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8aDI
+
TW9kaWZ5IHRhcmdldGluZyBwYXJhbWV0ZXJzPC9oMj5cbiAgICAgICAgICAgIDwvdGQ
+
XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI
+
XG4gICAgICAgICAgICA8dGQ
+
XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJBU1JvdXRlckJ1dHRvbiBzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Db3B5VGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmNvcGllZFRvQ2xpcGJvYXJkfVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuY29waWVkVG9DbGlwYm9hcmRcbiAgICAgICAgICAgICAgICAgID8gXCJQYXJhbWV0ZXJzIGNvcGllZCFcIlxuICAgICAgICAgICAgICAgICAgOiBcIkNvcHkgcGFyYW1ldGVyc1wifVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkFTUm91dGVyQnV0dG9uIHNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblBhc3RlVGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLnBhc3RlRnJvbUNsaXBib2FyZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFBhc3RlIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgPC9idXR0b24
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAge3RoaXMuc3RhdGUuc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzKS5tYXAoXG4gICAgICAgICAgICAgIChwYXJhbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW3BhcmFtXTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvclN0YXRlID1cbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudGFyZ2V0aW5nUGFyYW1ldGVyc0Vycm9yICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRhcmdldGluZ1BhcmFtZXRlcnNFcnJvci5pZCA9PT0gcGFyYW07XG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gZXJyb3JTdGF0ZSA
/
IFwiZXJyb3JTdGF0ZVwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dENvbXAgPVxuICAgICAgICAgICAgICAgICAgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkgPiAzMCA
/
IChcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT17cGFyYW19XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIHJvd3M9XCIxMFwiXG4gICAgICAgICAgICAgICAgICAgICAgY29scz1cIjYwXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVRhcmdldGluZ1BhcmFtZXRlcnN9XG4gICAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtwYXJhbX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2VUYXJnZXRpbmdQYXJhbWV0ZXJzfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8dHIga2V5PXtpfT5cbiAgICAgICAgICAgICAgICAgICAgPHRkPntwYXJhbX08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ
+
e2lucHV0Q29tcH08L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgb25DaGFuZ2VBdHRyaWJ1dGlvblBhcmFtZXRlcnMoZXZlbnQpIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBldmVudC50YXJnZXQ7XG5cbiAgICB0aGlzLnNldFN0YXRlKCh7IGF0dHJpYnV0aW9uUGFyYW1ldGVycyB9KSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVkUGFyYW1ldGVycyA9IHsgLi4uYXR0cmlidXRpb25QYXJhbWV0ZXJzIH07XG4gICAgICB1cGRhdGVkUGFyYW1ldGVyc1tuYW1lXSA9IHZhbHVlO1xuXG4gICAgICByZXR1cm4geyBhdHRyaWJ1dGlvblBhcmFtZXRlcnM6IHVwZGF0ZWRQYXJhbWV0ZXJzIH07XG4gICAgfSk7XG4gIH1cblxuICBzZXRBdHRyaWJ1dGlvbihlKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIkZPUkNFX0FUVFJJQlVUSU9OXCIsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycyxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclBvY2tldFN0b3J5KHN0b3J5KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e3N0b3J5Lmd1aWR9PlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWVzc2FnZS1pZFwiPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAge3N0b3J5Lmd1aWR9IDxiciAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU
+
e0pTT04uc3RyaW5naWZ5KHN0b3J5LCBudWxsLCAyKX08L3ByZT5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclBvY2tldFN0b3JpZXMoKSB7XG4gICAgY29uc3QgeyByb3dzIH0gPVxuICAgICAgdGhpcy5wcm9wcy5TZWN0aW9ucy5maW5kKFNlY3Rpb24gPT4gU2VjdGlvbi5pZCA9PT0gXCJ0b3BzdG9yaWVzXCIpIHx8IHt9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHtyb3dzICYmIHJvd3MubWFwKHN0b3J5ID0
+
IHRoaXMucmVuZGVyUG9ja2V0U3Rvcnkoc3RvcnkpKX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckRpc2NvdmVyeVN0cmVhbSgpIHtcbiAgICBjb25zdCB7IGNvbmZpZyB9ID0gdGhpcy5wcm9wcy5EaXNjb3ZlcnlTdHJlYW07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkVuYWJsZWQ8L3RkPlxuICAgICAgICAgICAgICA8dGQ
+
e2NvbmZpZy5lbmFibGVkID8gXCJ5ZXNcIiA6IFwibm9cIn08L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkVuZHBvaW50PC90ZD5cbiAgICAgICAgICAgICAgPHRkPntjb25maWcuZW5kcG9pbnQgfHwgXCIoZW1wdHkpXCJ9PC90ZD5cbiAgICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBdHRyaWJ1dGlvblBhcmFtZXJzKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI
+
IEF0dHJpYnV0aW9uIFBhcmFtZXRlcnMgPC9oMj5cbiAgICAgICAgPHA
+
XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICAgIFRoaXMgZm9yY2VzIHRoZSBicm93c2VyIHRvIHNldCBzb21lIGF0dHJpYnV0aW9uIHBhcmFtZXRlcnMsIHVzZWZ1bCBmb3JcbiAgICAgICAgICB0ZXN0aW5nIHRoZSBSZXR1cm4gVG8gQU1PIGZlYXR1cmUuIENsaWNraW5nIG9uICdGb3JjZSBBdHRyaWJ1dGlvbicsXG4gICAgICAgICAgd2l0aCB0aGUgZGVmYXVsdCB2YWx1ZXMgaW4gZWFjaCBmaWVsZCwgd2lsbCBkZW1vIHRoZSBSZXR1cm4gVG8gQU1PXG4gICAgICAgICAgZmxvdyB3aXRoIHRoZSBhZGRvbiBjYWxsZWQgJ0lyaWRpdW0gZm9yIFlvdXR1YmUnLiBJZiB5b3Ugd2lzaCB0byB0cnlcbiAgICAgICAgICBkaWZmZXJlbnQgYXR0cmlidXRpb24gcGFyYW1ldGVycywgZW50ZXIgdGhlbSBpbiB0aGUgdGV4dCBib3hlcy4gSWYgeW91XG4gICAgICAgICAgd2lzaCB0byB0cnkgYSBkaWZmZXJlbnQgYWRkb24gd2l0aCB0aGUgUmV0dXJuIFRvIEFNTyBmbG93LCBtYWtlIHN1cmVcbiAgICAgICAgICB0aGUgJ2NvbnRlbnQnIHRleHQgYm94IGhhcyB0aGUgYWRkb24gR1VJRCwgdGhlbiBjbGljayAnRm9yY2VcbiAgICAgICAgICBBdHRyaWJ1dGlvbicuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGI
+
IFNvdXJjZSA8L2I
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwic291cmNlXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImFkZG9ucy5tb3ppbGxhLm9yZ1wiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYXR0cmlidXRpb25QYXJhbWV0ZXJzLnNvdXJjZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUF0dHJpYnV0aW9uUGFyYW1ldGVyc31cbiAgICAgICAgICAgICAgLz57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8Yj4gQ2FtcGFpZ24gPC9iPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImNhbXBhaWduXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIm5vbi1meC1idXR0b25cIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycy5jYW1wYWlnbn1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUF0dHJpYnV0aW9uUGFyYW1ldGVyc31cbiAgICAgICAgICAgICAgLz57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8Yj4gQ29udGVudCA8L2I
+
XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJpcmlkaXVtQHBhcnRpY2xlY29yZS5naXRodWIuaW9cIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycy5jb250ZW50fVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlQXR0cmlidXRpb25QYXJhbWV0ZXJzfVxuICAgICAgICAgICAgICAvPntcIiBcIn1cbiAgICAgICAgICAgIDwvdGQ
+
XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI
+
XG4gICAgICAgICAgICA8dGQ
+
XG4gICAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkFTUm91dGVyQnV0dG9uIHByaW1hcnkgYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNldEF0dHJpYnV0aW9ufVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAgICAgIEZvcmNlIEF0dHJpYnV0aW9ue1wiIFwifVxuICAgICAgICAgICAgICA8L2J1dHRvbj57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI
+
XG4gICAgICAgIDwvdGFibGU
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRXJyb3JNZXNzYWdlKHsgaWQsIGVycm9ycyB9KSB7XG4gICAgY29uc3QgcHJvdmlkZXJJZCA9IDx0ZCByb3dTcGFuPXtlcnJvcnMubGVuZ3RofT57aWR9PC90ZD47XG4gICAgLy8gLnJldmVyc2UoKSBzbyB0aGF0IHRoZSBsYXN0IGVycm9yIChtb3N0IHJlY2VudCkgaXMgZmlyc3RcbiAgICByZXR1cm4gZXJyb3JzXG4gICAgICAubWFwKCh7IGVycm9yLCB0aW1lc3RhbXAgfSwgY2VsbEtleSkgPT4gKFxuICAgICAgICA8dHIga2V5PXtjZWxsS2V5fT5cbiAgICAgICAgICB7Y2VsbEtleSA9PT0gZXJyb3JzLmxlbmd0aCAtIDEgPyBwcm92aWRlcklkIDogbnVsbH1cbiAgICAgICAgICA8dGQ
+
e2Vycm9yLm1lc3NhZ2V9PC90ZD5cbiAgICAgICAgICA8dGQ
+
e3JlbGF0aXZlVGltZSh0aW1lc3RhbXApfTwvdGQ
+
XG4gICAgICAgIDwvdHI
+
XG4gICAgICApKVxuICAgICAgLnJldmVyc2UoKTtcbiAgfVxuXG4gIHJlbmRlckVycm9ycygpIHtcbiAgICBjb25zdCBwcm92aWRlcnNXaXRoRXJyb3JzID1cbiAgICAgIHRoaXMuc3RhdGUucHJvdmlkZXJzICYmXG4gICAgICB0aGlzLnN0YXRlLnByb3ZpZGVycy5maWx0ZXIocCA9PiBwLmVycm9ycyAmJiBwLmVycm9ycy5sZW5ndGgpO1xuXG4gICAgaWYgKHByb3ZpZGVyc1dpdGhFcnJvcnMgJiYgcHJvdmlkZXJzV2l0aEVycm9ycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJlcnJvclJlcG9ydGluZ1wiPlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPlByb3ZpZGVyIElEPC90aD5cbiAgICAgICAgICAgICAgPHRoPk1lc3NhZ2U8L3RoPlxuICAgICAgICAgICAgICA8dGg
+
VGltZXN0YW1wPC90aD5cbiAgICAgICAgICAgIDwvdHI
+
XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICA8dGJvZHk
+
e3Byb3ZpZGVyc1dpdGhFcnJvcnMubWFwKHRoaXMucmVuZGVyRXJyb3JNZXNzYWdlKX08L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPHA
+
Tm8gZXJyb3JzPC9wPjtcbiAgfVxuXG4gIHJlbmRlclRyYWlsaGVhZEluZm8oKSB7XG4gICAgY29uc3QgeyB0cmFpbGhlYWRJbnRlcnJ1cHQsIHRyYWlsaGVhZFRyaXBsZXQgfSA9IHRoaXMuc3RhdGUudHJhaWxoZWFkO1xuICAgIHJldHVybiAoXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwibWluaW1hbC10YWJsZVwiPlxuICAgICAgICA8dGJvZHk
+
XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPkludGVycnVwdCBicmFuY2g8L3RkPlxuICAgICAgICAgICAgPHRkPnt0cmFpbGhlYWRJbnRlcnJ1cHR9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5UcmlwbGV0IGJyYW5jaDwvdGQ
+
XG4gICAgICAgICAgICA8dGQ
+
e3RyYWlsaGVhZFRyaXBsZXR9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgZ2V0U2VjdGlvbigpIHtcbiAgICBjb25zdCBbc2VjdGlvbl0gPSB0aGlzLnByb3BzLmxvY2F0aW9uLnJvdXRlcztcbiAgICBzd2l0Y2ggKHNlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJ0YXJnZXRpbmdcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICAgICA8aDI
+
VGFyZ2V0aW5nIFV0aWxpdGllczwvaDI
+
XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuZXhwaXJlQ2FjaGV9PlxuICAgICAgICAgICAgICBFeHBpcmUgQ2FjaGVcbiAgICAgICAgICAgIDwvYnV0dG9uPntcIiBcIn1cbiAgICAgICAgICAgIChUaGlzIGV4cGlyZXMgdGhlIGNhY2hlIGluIEFTUiBUYXJnZXRpbmcgZm9yIGJvb2ttYXJrcyBhbmQgdG9wXG4gICAgICAgICAgICBzaXRlcylcbiAgICAgICAgICAgIHt0aGlzLnJlbmRlclRhcmdldGluZ1BhcmFtZXRlcnMoKX1cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlckF0dHJpYnV0aW9uUGFyYW1lcnMoKX1cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApO1xuICAgICAgY2FzZSBcInBvY2tldFwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxoMj5Qb2NrZXQ8L2gyPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyUG9ja2V0U3RvcmllcygpfVxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwiZHNcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICAgICA8aDI
+
RGlzY292ZXJ5IFN0cmVhbTwvaDI
+
XG4gICAgICAgICAgICA8RGlzY292ZXJ5U3RyZWFtQWRtaW5cbiAgICAgICAgICAgICAgc3RhdGU9e3RoaXMucHJvcHMuRGlzY292ZXJ5U3RyZWFtfVxuICAgICAgICAgICAgICBvdGhlclByZWZzPXt0aGlzLnByb3BzLlByZWZzLnZhbHVlc31cbiAgICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwiZXJyb3JzXCI6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPGgyPkFTUm91dGVyIEVycm9yczwvaDI
+
XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJFcnJvcnMoKX1cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgICAgICA8aDI
+
XG4gICAgICAgICAgICAgIE1lc3NhZ2UgUHJvdmlkZXJze1wiIFwifVxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJSZXN0b3JlIGFsbCBwcm92aWRlciBzZXR0aW5ncyB0aGF0IHNoaXAgd2l0aCBGaXJlZm94XCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucmVzZXRQcmVmfVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAgUmVzdG9yZSBkZWZhdWx0IHByZWZzXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnByb3ZpZGVycyA
/
IHRoaXMucmVuZGVyUHJvdmlkZXJzKCkgOiBudWxsfVxuICAgICAgICAgICAgPGgyPlRyYWlsaGVhZDwvaDI
+
XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJUcmFpbGhlYWRJbmZvKCl9XG4gICAgICAgICAgICA8aDI
+
TWVzc2FnZXM8L2gyPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyTWVzc2FnZUZpbHRlcigpfVxuICAgICAgICAgICAge3RoaXMucmVuZGVyTWVzc2FnZXMoKX1cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlclBhc3RlTW9kYWwoKX1cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2Bhc3JvdXRlci1hZG1pbiAke1xuICAgICAgICAgIHRoaXMucHJvcHMuY29sbGFwc2VkID8gXCJjb2xsYXBzZWRcIiA6IFwiZXhwYW5kZWRcIlxuICAgICAgICB9YH1cbiAgICAgID5cbiAgICAgICAgPGFzaWRlIGNsYXNzTmFtZT1cInNpZGViYXJcIj5cbiAgICAgICAgICA8dWw
+
XG4gICAgICAgICAgICA8bGk
+
XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIjZGV2dG9vbHNcIj5HZW5lcmFsPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGEgaHJlZj1cIiNkZXZ0b29scy10YXJnZXRpbmdcIj5UYXJnZXRpbmc8L2E
+
XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiI2RldnRvb2xzLXBvY2tldFwiPlBvY2tldDwvYT5cbiAgICAgICAgICAgIDwvbGk
+
XG4gICAgICAgICAgICA8bGk
+
XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIjZGV2dG9vbHMtZHNcIj5EaXNjb3ZlcnkgU3RyZWFtPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGEgaHJlZj1cIiNkZXZ0b29scy1lcnJvcnNcIj5FcnJvcnM8L2E
+
XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw
+
XG4gICAgICAgIDwvYXNpZGU
+
XG4gICAgICAgIDxtYWluIGNsYXNzTmFtZT1cIm1haW4tcGFuZWxcIj5cbiAgICAgICAgICA8aDE
+
QVMgUm91dGVyIEFkbWluPC9oMT5cblxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhlbHBMaW5rXCI
+
XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGljb24tc21hbGwtc3BhY2VyIGljb24taW5mb1wiIC8
+
e1wiIFwifVxuICAgICAgICAgICAgPHNwYW4
+
XG4gICAgICAgICAgICAgIE5lZWQgaGVscCB1c2luZyB0aGVzZSB0b29scz8gQ2hlY2sgb3V0IG91cntcIiBcIn1cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJibGFua1wiXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2FjdGl2aXR5LXN0cmVhbS9ibG9iL21hc3Rlci9jb250ZW50LXNyYy9hc3JvdXRlci9kb2NzL2RlYnVnZ2luZy1kb2NzLm1kXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvcD5cblxuICAgICAgICAgIHt0aGlzLmdldFNlY3Rpb24oKX1cbiAgICAgICAgPC9tYWluPlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sbGFwc2VUb2dnbGUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNvbGxhcHNlVG9nZ2xlID0gdGhpcy5vbkNvbGxhcHNlVG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgY29sbGFwc2VkOiBmYWxzZSB9O1xuICB9XG5cbiAgZ2V0IHJlbmRlckFkbWluKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChcbiAgICAgIHByb3BzLmxvY2F0aW9uLmhhc2ggJiZcbiAgICAgIChwcm9wcy5sb2NhdGlvbi5oYXNoLnN0YXJ0c1dpdGgoXCIjYXNyb3V0ZXJcIikgfHxcbiAgICAgICAgcHJvcHMubG9jYXRpb24uaGFzaC5zdGFydHNXaXRoKFwiI2RldnRvb2xzXCIpKVxuICAgICk7XG4gIH1cblxuICBvbkNvbGxhcHNlVG9nZ2xlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoeyBjb2xsYXBzZWQ6ICFzdGF0ZS5jb2xsYXBzZWQgfSkpO1xuICB9XG5cbiAgc2V0Qm9keUNsYXNzKCkge1xuICAgIGlmICh0aGlzLnJlbmRlckFkbWluICYmICF0aGlzLnN0YXRlLmNvbGxhcHNlZCkge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcIm5vLXNjcm9sbFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIm5vLXNjcm9sbFwiKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldEJvZHlDbGFzcygpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuc2V0Qm9keUNsYXNzKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibm8tc2Nyb2xsXCIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyByZW5kZXJBZG1pbiB9ID0gdGhpcztcbiAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHRoaXMuc3RhdGUuY29sbGFwc2VkIHx8ICFyZW5kZXJBZG1pbjtcbiAgICBjb25zdCBsYWJlbCA9IGAke2lzQ29sbGFwc2VkID8gXCJFeHBhbmRcIiA6IFwiQ29sbGFwc2VcIn0gZGV2dG9vbHNgO1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgIDxhXG4gICAgICAgICAgaHJlZj1cIiNkZXZ0b29sc1wiXG4gICAgICAgICAgdGl0bGU9e2xhYmVsfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGNsYXNzTmFtZT17YGFzcm91dGVyLXRvZ2dsZSAke1xuICAgICAgICAgICAgaXNDb2xsYXBzZWQgPyBcImNvbGxhcHNlZFwiIDogXCJleHBhbmRlZFwiXG4gICAgICAgICAgfWB9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5yZW5kZXJBZG1pbiA
/
IHRoaXMub25Db2xsYXBzZVRvZ2dsZSA6IG51bGx9XG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGljb24tZGV2dG9vbHNcIiAvPlxuICAgICAgICA8L2E
+
XG4gICAgICAgIHtyZW5kZXJBZG1pbiA
/
IChcbiAgICAgICAgICA8QVNSb3V0ZXJBZG1pbklubmVyIHsuLi5wcm9wc30gY29sbGFwc2VkPXt0aGlzLnN0YXRlLmNvbGxhcHNlZH0gLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgX0FTUm91dGVyQWRtaW4gPSBwcm9wcyA9PiAoXG4gIDxTaW1wbGVIYXNoUm91dGVyPlxuICAgIDxDb2xsYXBzZVRvZ2dsZSB7Li4ucHJvcHN9IC8
+
XG4gIDwvU2ltcGxlSGFzaFJvdXRlcj5cbik7XG5cbmV4cG9ydCBjb25zdCBBU1JvdXRlckFkbWluID0gY29ubmVjdChzdGF0ZSA9PiAoe1xuICBTZWN0aW9uczogc3RhdGUuU2VjdGlvbnMsXG4gIERpc2NvdmVyeVN0cmVhbTogc3RhdGUuRGlzY292ZXJ5U3RyZWFtLFxuICBQcmVmczogc3RhdGUuUHJlZnMsXG59KSkoX0FTUm91dGVyQWRtaW4pO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHtcbiAgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsXG4gIGFjdGlvblR5cGVzIGFzIGF0LFxuICBBU1JvdXRlckFjdGlvbnMgYXMgcmEsXG59IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IE9VVEdPSU5HX01FU1NBR0VfTkFNRSBhcyBBU19HRU5FUkFMX09VVEdPSU5HX01FU1NBR0VfTkFNRSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvaW5pdC1zdG9yZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVCdW5kbGVzIH0gZnJvbSBcIi4vcmljaC10ZXh0LXN0cmluZ3NcIjtcbmltcG9ydCB7IEltcHJlc3Npb25zV3JhcHBlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvSW1wcmVzc2lvbnNXcmFwcGVyL0ltcHJlc3Npb25zV3JhcHBlclwiO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uUHJvdmlkZXIgfSBmcm9tIFwiZmx1ZW50LXJlYWN0XCI7XG5pbXBvcnQgeyBORVdUQUJfREFSS19USEVNRSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgU25pcHBldHNUZW1wbGF0ZXMgfSBmcm9tIFwiLi90ZW1wbGF0ZXMvdGVtcGxhdGUtbWFuaWZlc3RcIjtcbmltcG9ydCB7IEZpcnN0UnVuIH0gZnJvbSBcIi4vdGVtcGxhdGVzL0ZpcnN0UnVuL0ZpcnN0UnVuXCI7XG5cbmNvbnN0IElOQ09NSU5HX01FU1NBR0VfTkFNRSA9IFwiQVNSb3V0ZXI6cGFyZW50LXRvLWNoaWxkXCI7XG5jb25zdCBPVVRHT0lOR19NRVNTQUdFX05BTUUgPSBcIkFTUm91dGVyOmNoaWxkLXRvLXBhcmVudFwiO1xuY29uc3QgVEVNUExBVEVTX0FCT1ZFX1BBR0UgPSBbXG4gIFwidHJhaWxoZWFkXCIsXG4gIFwiZnVsbF9wYWdlX2ludGVycnVwdFwiLFxuICBcInJldHVybl90b19hbW9fb3ZlcmxheVwiLFxuICBcImV4dGVuZGVkX3RyaXBsZXRzXCIsXG5dO1xuY29uc3QgRklSU1RfUlVOX1RFTVBMQVRFUyA9IFRFTVBMQVRFU19BQk9WRV9QQUdFO1xuY29uc3QgVEVNUExBVEVTX0JFTE9XX1NFQVJDSCA9IFtcInNpbXBsZV9iZWxvd19zZWFyY2hfc25pcHBldFwiXTtcblxuZXhwb3J0IGNvbnN0IEFTUm91dGVyVXRpbHMgPSB7XG4gIGFkZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgaWYgKGdsb2JhbC5SUE1BZGRNZXNzYWdlTGlzdGVuZXIpIHtcbiAgICAgIGdsb2JhbC5SUE1BZGRNZXNzYWdlTGlzdGVuZXIoSU5DT01JTkdfTUVTU0FHRV9OQU1FLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIGlmIChnbG9iYWwuUlBNUmVtb3ZlTWVzc2FnZUxpc3RlbmVyKSB7XG4gICAgICBnbG9iYWwuUlBNUmVtb3ZlTWVzc2FnZUxpc3RlbmVyKElOQ09NSU5HX01FU1NBR0VfTkFNRSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgc2VuZE1lc3NhZ2UoYWN0aW9uKSB7XG4gICAgaWYgKGdsb2JhbC5SUE1TZW5kQXN5bmNNZXNzYWdlKSB7XG4gICAgICBnbG9iYWwuUlBNU2VuZEFzeW5jTWVzc2FnZShPVVRHT0lOR19NRVNTQUdFX05BTUUsIGFjdGlvbik7XG4gICAgfVxuICB9LFxuICBibG9ja0J5SWQoaWQsIG9wdGlvbnMpIHtcbiAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwiQkxPQ0tfTUVTU0FHRV9CWV9JRFwiLFxuICAgICAgZGF0YTogeyBpZCwgLi4ub3B0aW9ucyB9LFxuICAgIH0pO1xuICB9LFxuICBkaXNtaXNzQnlJZChpZCkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkRJU01JU1NfTUVTU0FHRV9CWV9JRFwiLCBkYXRhOiB7IGlkIH0gfSk7XG4gIH0sXG4gIGV4ZWN1dGVBY3Rpb24oYnV0dG9uX2FjdGlvbikge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJVU0VSX0FDVElPTlwiLFxuICAgICAgZGF0YTogYnV0dG9uX2FjdGlvbixcbiAgICB9KTtcbiAgfSxcbiAgdW5ibG9ja0J5SWQoaWQpIHtcbiAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHsgdHlwZTogXCJVTkJMT0NLX01FU1NBR0VfQllfSURcIiwgZGF0YTogeyBpZCB9IH0pO1xuICB9LFxuICB1bmJsb2NrQnVuZGxlKGJ1bmRsZSkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIlVOQkxPQ0tfQlVORExFXCIsIGRhdGE6IHsgYnVuZGxlIH0gfSk7XG4gIH0sXG4gIG92ZXJyaWRlTWVzc2FnZShpZCkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIk9WRVJSSURFX01FU1NBR0VcIiwgZGF0YTogeyBpZCB9IH0pO1xuICB9LFxuICBzZW5kVGVsZW1ldHJ5KHBpbmcpIHtcbiAgICBpZiAoZ2xvYmFsLlJQTVNlbmRBc3luY01lc3NhZ2UpIHtcbiAgICAgIGNvbnN0IHBheWxvYWQgPSBhYy5BU1JvdXRlclVzZXJFdmVudChwaW5nKTtcbiAgICAgIGdsb2JhbC5SUE1TZW5kQXN5bmNNZXNzYWdlKEFTX0dFTkVSQUxfT1VUR09JTkdfTUVTU0FHRV9OQU1FLCBwYXlsb2FkKTtcbiAgICB9XG4gIH0sXG4gIGdldFByZXZpZXdFbmRwb2ludCgpIHtcbiAgICBpZiAoZ2xvYmFsLmxvY2F0aW9uICYmIGdsb2JhbC5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKFwiZW5kcG9pbnRcIikpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgICAgIGdsb2JhbC5sb2NhdGlvbi5ocmVmLnNsaWNlKGdsb2JhbC5sb2NhdGlvbi5ocmVmLmluZGV4T2YoXCJlbmRwb2ludFwiKSlcbiAgICAgICk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlbmRwb2ludCA9IG5ldyBVUkwocGFyYW1zLmdldChcImVuZHBvaW50XCIpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1cmw6IGVuZHBvaW50LmhyZWYsXG4gICAgICAgICAgc25pcHBldElkOiBwYXJhbXMuZ2V0KFwic25pcHBldElkXCIpLFxuICAgICAgICAgIHRoZW1lOiB0aGlzLmdldFByZXZpZXdUaGVtZSgpLFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgZ2V0UHJldmlld1RoZW1lKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKFxuICAgICAgZ2xvYmFsLmxvY2F0aW9uLmhyZWYuc2xpY2UoZ2xvYmFsLmxvY2F0aW9uLmhyZWYuaW5kZXhPZihcInRoZW1lXCIpKVxuICAgICkuZ2V0KFwidGhlbWVcIik7XG4gIH0sXG59O1xuXG4vLyBOb3RlOiBuZXh0UHJvcHMvcHJldlByb3BzIHJlZmVyIHRvIHByb3BzIHBhc3NlZCB0byA8SW1wcmVzc2lvbnNXcmFwcGVyIC8
+
LCBub3QgPEFTUm91dGVyVUlTdXJmYWNlIC8
+
XG5mdW5jdGlvbiBzaG91bGRTZW5kSW1wcmVzc2lvbk9uVXBkYXRlKG5leHRQcm9wcywgcHJldlByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgbmV4dFByb3BzLm1lc3NhZ2UuaWQgJiZcbiAgICAoIXByZXZQcm9wcy5tZXNzYWdlIHx8IHByZXZQcm9wcy5tZXNzYWdlLmlkICE9PSBuZXh0UHJvcHMubWVzc2FnZS5pZClcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEFTUm91dGVyVUlTdXJmYWNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25NZXNzYWdlRnJvbVBhcmVudCA9IHRoaXMub25NZXNzYWdlRnJvbVBhcmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZENsaWNrID0gdGhpcy5zZW5kQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLnNlbmRJbXByZXNzaW9uID0gdGhpcy5zZW5kSW1wcmVzc2lvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkgPSB0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblVzZXJBY3Rpb24gPSB0aGlzLm9uVXNlckFjdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZmV0Y2hGbG93UGFyYW1zID0gdGhpcy5mZXRjaEZsb3dQYXJhbXMuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7IG1lc3NhZ2U6IHt9LCBpbnRlcnJ1cHRDbGVhcmVkOiBmYWxzZSB9O1xuICAgIGlmIChwcm9wcy5kb2N1bWVudCkge1xuICAgICAgdGhpcy5oZWFkZXJQb3J0YWwgPSBwcm9wcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgICAgXCJoZWFkZXItYXNyb3V0ZXItY29udGFpbmVyXCJcbiAgICAgICk7XG4gICAgICB0aGlzLmZvb3RlclBvcnRhbCA9IHByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICBcImZvb3Rlci1hc3JvdXRlci1jb250YWluZXJcIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmZXRjaEZsb3dQYXJhbXMocGFyYW1zID0ge30pIHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgY29uc3QgeyBmeGFFbmRwb2ludCwgZGlzcGF0Y2ggfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFmeGFFbmRwb2ludCkge1xuICAgICAgY29uc3QgZXJyID1cbiAgICAgICAgXCJUcmllZCB0byBmZXRjaCBmbG93IHBhcmFtcyBiZWZvcmUgZnhhRW5kcG9pbnQgcHJlZiB3YXMgcmVhZHlcIjtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwoZnhhRW5kcG9pbnQpO1xuICAgICAgdXJsT2JqLnBhdGhuYW1lID0gXCJtZXRyaWNzLWZsb3dcIjtcbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB1cmxPYmouc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHBhcmFtc1trZXldKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmxPYmoudG9TdHJpbmcoKSwgeyBjcmVkZW50aWFsczogXCJvbWl0XCIgfSk7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VJZCwgZmxvd0lkLCBmbG93QmVnaW5UaW1lIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIHJlc3VsdCA9IHsgZGV2aWNlSWQsIGZsb3dJZCwgZmxvd0JlZ2luVGltZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vbi0yMDAgcmVzcG9uc2VcIiwgcmVzcG9uc2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgICB0eXBlOiBhdC5URUxFTUVUUllfVU5ERVNJUkVEX0VWRU5ULFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBldmVudDogXCJGWEFfTUVUUklDU19GRVRDSF9FUlJPUlwiLFxuICAgICAgICAgICAgICB2YWx1ZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICBkaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuVEVMRU1FVFJZX1VOREVTSVJFRF9FVkVOVCxcbiAgICAgICAgICBkYXRhOiB7IGV2ZW50OiBcIkZYQV9NRVRSSUNTX0VSUk9SXCIgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeShleHRyYVByb3BzID0ge30pIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gYCR7bWVzc2FnZS5wcm92aWRlcn1fdXNlcl9ldmVudGA7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kVGVsZW1ldHJ5KHtcbiAgICAgIG1lc3NhZ2VfaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICBzb3VyY2U6IGV4dHJhUHJvcHMuaWQsXG4gICAgICBhY3Rpb246IGV2ZW50VHlwZSxcbiAgICAgIC4uLmV4dHJhUHJvcHMsXG4gICAgfSk7XG4gIH1cblxuICBzZW5kSW1wcmVzc2lvbihleHRyYVByb3BzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUubWVzc2FnZS5wcm92aWRlciA9PT0gXCJwcmV2aWV3XCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHsgdHlwZTogXCJJTVBSRVNTSU9OXCIsIGRhdGE6IHRoaXMuc3RhdGUubWVzc2FnZSB9KTtcbiAgICB0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHsgZXZlbnQ6IFwiSU1QUkVTU0lPTlwiLCAuLi5leHRyYVByb3BzIH0pO1xuICB9XG5cbiAgLy8gSWYgbGluayBoYXMgYSBgbWV0cmljYCBkYXRhIGF0dHJpYnV0ZSBzZW5kIGl0IGFzIHBhcnQgb2YgdGhlIGBldmVudF9jb250ZXh0YFxuICAvLyB0ZWxlbWV0cnkgZmllbGQgd2hpY2ggY2FuIGhhdmUgYXJiaXRyYXJ5IHZhbHVlcy5cbiAgLy8gVXNlZCBmb3Igcm91dGVyIG1lc3NhZ2VzIHdpdGggbGlua3MgYXMgcGFydCBvZiB0aGUgY29udGVudC5cbiAgc2VuZENsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgbWV0cmljID0ge1xuICAgICAgZXZlbnRfY29udGV4dDogZXZlbnQudGFyZ2V0LmRhdGFzZXQubWV0cmljLFxuICAgICAgLy8gVXNlZCBmb3IgdGhlIGBzb3VyY2VgIG9mIHRoZSBldmVudC4gTmVlZGVkIHRvIGRpZmZlcmVudGlhdGVcbiAgICAgIC8vIGZyb20gb3RoZXIgc25pcHBldCBvciBvbmJvYXJkaW5nIGV2ZW50cyB0aGF0IG1heSBvY2N1ci5cbiAgICAgIGlkOiBcIk5FV1RBQl9GT09URVJfQkFSX0NPTlRFTlRcIixcbiAgICB9O1xuICAgIGNvbnN0IGFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFjdGlvbixcbiAgICAgIGRhdGE6IHsgYXJnczogZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXJncyB9LFxuICAgIH07XG4gICAgaWYgKGFjdGlvbi50eXBlKSB7XG4gICAgICBBU1JvdXRlclV0aWxzLmV4ZWN1dGVBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXRoaXMuc3RhdGUubWVzc2FnZS5jb250ZW50LmRvX25vdF9hdXRvYmxvY2sgJiZcbiAgICAgICFldmVudC50YXJnZXQuZGF0YXNldC5kb19ub3RfYXV0b2Jsb2NrXG4gICAgKSB7XG4gICAgICBBU1JvdXRlclV0aWxzLmJsb2NrQnlJZCh0aGlzLnN0YXRlLm1lc3NhZ2UuaWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5tZXNzYWdlLnByb3ZpZGVyICE9PSBcInByZXZpZXdcIikge1xuICAgICAgdGhpcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7IGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLCAuLi5tZXRyaWMgfSk7XG4gICAgfVxuICB9XG5cbiAgb25CbG9ja0J5SWQoaWQpIHtcbiAgICByZXR1cm4gb3B0aW9ucyA9PiBBU1JvdXRlclV0aWxzLmJsb2NrQnlJZChpZCwgb3B0aW9ucyk7XG4gIH1cblxuICBvbkRpc21pc3NCeUlkKGlkKSB7XG4gICAgcmV0dXJuICgpID0
+
IEFTUm91dGVyVXRpbHMuZGlzbWlzc0J5SWQoaWQpO1xuICB9XG5cbiAgY2xlYXJNZXNzYWdlKGlkKSB7XG4gICAgLy8gUmVxdWVzdCBuZXcgc2V0IG9mIGR5bmFtaWMgdHJpcGxldCBjYXJkcyB3aGVuIGNsaWNrIG9uIGEgY2FyZCBDVEEgY2xlYXJcbiAgICAvLyBtZXNzYWdlIGFuZCAnaWQnIG1hdGNoZXMgb25lIG9mIHRoZSBjYXJkcyBpbiBtZXNzYWdlIGJ1bmRsZVxuICAgIGlmIChcbiAgICAgIHRoaXMuc3RhdGUubWVzc2FnZSAmJlxuICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlLmJ1bmRsZSAmJlxuICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlLmJ1bmRsZS5maW5kKGNhcmQgPT4gY2FyZC5pZCA9PT0gaWQpXG4gICAgKSB7XG4gICAgICB0aGlzLnJlcXVlc3RNZXNzYWdlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlkID09PSB0aGlzLnN0YXRlLm1lc3NhZ2UuaWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiB7fSB9KTtcbiAgICAgIC8vIFJlbW92ZSBhbnkgc3R5bGVzIHJlbGF0ZWQgdG8gdGhlIFJUQU1PIG1lc3NhZ2VcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIndlbGNvbWVcIiwgXCJoaWRlLW1haW5cIiwgXCJhbW9cIik7XG4gICAgfVxuICB9XG5cbiAgb25NZXNzYWdlRnJvbVBhcmVudCh7IGRhdGE6IGFjdGlvbiB9KSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSBcIlNFVF9NRVNTQUdFXCI6XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiBhY3Rpb24uZGF0YSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ0xFQVJfSU5URVJSVVBUXCI6XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbnRlcnJ1cHRDbGVhcmVkOiB0cnVlIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJDTEVBUl9NRVNTQUdFXCI6XG4gICAgICAgIHRoaXMuY2xlYXJNZXNzYWdlKGFjdGlvbi5kYXRhLmlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ0xFQVJfUFJPVklERVJcIjpcbiAgICAgICAgaWYgKGFjdGlvbi5kYXRhLmlkID09PSB0aGlzLnN0YXRlLm1lc3NhZ2UucHJvdmlkZXIpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZToge30gfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ0xFQVJfQUxMXCI6XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiB7fSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQVNfUk9VVEVSX1RBUkdFVElOR19VUERBVEVcIjpcbiAgICAgICAgYWN0aW9uLmRhdGEuZm9yRWFjaChpZCA9PiB0aGlzLmNsZWFyTWVzc2FnZShpZCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXF1ZXN0TWVzc2FnZShlbmRwb2ludCkge1xuICAgIC8vIElmIHdlIGFyZSBsb2FkaW5nIGFib3V0OndlbGNvbWUgd2Ugd2FudCB0byB0cmlnZ2VyIHRoZSBvbmJvYXJkaW5nIG1lc3NhZ2VzXG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudCAmJlxuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5sb2NhdGlvbi5ocmVmID09PSBcImFib3V0OndlbGNvbWVcIlxuICAgICkge1xuICAgICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiVFJJR0dFUlwiLFxuICAgICAgICBkYXRhOiB7IHRyaWdnZXI6IHsgaWQ6IFwiZmlyc3RSdW5cIiB9IH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiTkVXVEFCX01FU1NBR0VfUkVRVUVTVFwiLFxuICAgICAgICBkYXRhOiB7IGVuZHBvaW50IH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBBU1JvdXRlclV0aWxzLmdldFByZXZpZXdFbmRwb2ludCgpO1xuICAgIGlmIChlbmRwb2ludCAmJiBlbmRwb2ludC50aGVtZSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgIGdsb2JhbC53aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiTGlnaHR3ZWlnaHRUaGVtZTpTZXRcIiwge1xuICAgICAgICAgIGRldGFpbDogeyBkYXRhOiBORVdUQUJfREFSS19USEVNRSB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgQVNSb3V0ZXJVdGlscy5hZGRMaXN0ZW5lcih0aGlzLm9uTWVzc2FnZUZyb21QYXJlbnQpO1xuICAgIHRoaXMucmVxdWVzdE1lc3NhZ2UoZW5kcG9pbnQpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5yZW1vdmVMaXN0ZW5lcih0aGlzLm9uTWVzc2FnZUZyb21QYXJlbnQpO1xuICB9XG5cbiAgYXN5bmMgZ2V0TW9uaXRvclVybCh7IHVybCwgZmxvd1JlcXVlc3RQYXJhbXMgPSB7fSB9KSB7XG4gICAgY29uc3QgZmxvd1ZhbHVlcyA9IGF3YWl0IHRoaXMuZmV0Y2hGbG93UGFyYW1zKGZsb3dSZXF1ZXN0UGFyYW1zKTtcblxuICAgIC8vIE5vdGUgdGhhdCBmbG93UGFyYW1zIGFyZSBhY3R1YWxseSBhZGRlZCBkeW5hbWljYWxseSBvbiB0aGUgcGFnZVxuICAgIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsKTtcbiAgICBbXCJkZXZpY2VJZFwiLCBcImZsb3dJZFwiLCBcImZsb3dCZWdpblRpbWVcIl0uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGtleSBpbiBmbG93VmFsdWVzKSB7XG4gICAgICAgIHVybE9iai5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgZmxvd1ZhbHVlc1trZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cmxPYmoudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGFzeW5jIG9uVXNlckFjdGlvbihhY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGhhbmRsZWQgbG9jYWxseSBiZWNhdXNlIGl0c1xuICAgICAgY2FzZSByYS5FTkFCTEVfRklSRUZPWF9NT05JVE9SOlxuICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLmdldE1vbml0b3JVcmwoYWN0aW9uLmRhdGEuYXJncyk7XG4gICAgICAgIEFTUm91dGVyVXRpbHMuZXhlY3V0ZUFjdGlvbih7IHR5cGU6IHJhLk9QRU5fVVJMLCBkYXRhOiB7IGFyZ3M6IHVybCB9IH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIEFTUm91dGVyVXRpbHMuZXhlY3V0ZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclNuaXBwZXRzKCkge1xuICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIVNuaXBwZXRzVGVtcGxhdGVzW21lc3NhZ2UudGVtcGxhdGVdKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgU25pcHBldENvbXBvbmVudCA9IFNuaXBwZXRzVGVtcGxhdGVzW21lc3NhZ2UudGVtcGxhdGVdO1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5zdGF0ZS5tZXNzYWdlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxJbXByZXNzaW9uc1dyYXBwZXJcbiAgICAgICAgaWQ9XCJORVdUQUJfRk9PVEVSX0JBUlwiXG4gICAgICAgIG1lc3NhZ2U9e3RoaXMuc3RhdGUubWVzc2FnZX1cbiAgICAgICAgc2VuZEltcHJlc3Npb249e3RoaXMuc2VuZEltcHJlc3Npb259XG4gICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGU9e3Nob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGV9XG4gICAgICAgIC8vIFRoaXMgaGVscHMgd2l0aCB0ZXN0aW5nXG4gICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgPlxuICAgICAgICA8TG9jYWxpemF0aW9uUHJvdmlkZXIgYnVuZGxlcz17Z2VuZXJhdGVCdW5kbGVzKGNvbnRlbnQpfT5cbiAgICAgICAgICA8U25pcHBldENvbXBvbmVudFxuICAgICAgICAgICAgey4uLnRoaXMuc3RhdGUubWVzc2FnZX1cbiAgICAgICAgICAgIFVJU3VyZmFjZT1cIk5FV1RBQl9GT09URVJfQkFSXCJcbiAgICAgICAgICAgIG9uQmxvY2s9e3RoaXMub25CbG9ja0J5SWQodGhpcy5zdGF0ZS5tZXNzYWdlLmlkKX1cbiAgICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5vbkRpc21pc3NCeUlkKHRoaXMuc3RhdGUubWVzc2FnZS5pZCl9XG4gICAgICAgICAgICBvbkFjdGlvbj17dGhpcy5vblVzZXJBY3Rpb259XG4gICAgICAgICAgICBzZW5kQ2xpY2s9e3RoaXMuc2VuZENsaWNrfVxuICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3RoaXMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Mb2NhbGl6YXRpb25Qcm92aWRlcj5cbiAgICAgIDwvSW1wcmVzc2lvbnNXcmFwcGVyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJQcmV2aWV3QmFubmVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLm1lc3NhZ2UucHJvdmlkZXIgIT09IFwicHJldmlld1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbmlwcGV0cy1wcmV2aWV3LWJhbm5lclwiPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGljb24tc21hbGwtc3BhY2VyIGljb24taW5mb1wiIC8
+
XG4gICAgICAgIDxzcGFuPlByZXZpZXcgUHVycG9zZXMgT25seTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJGaXJzdFJ1bigpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKEZJUlNUX1JVTl9URU1QTEFURVMuaW5jbHVkZXMobWVzc2FnZS50ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxJbXByZXNzaW9uc1dyYXBwZXJcbiAgICAgICAgICBpZD1cIkZJUlNUX1JVTlwiXG4gICAgICAgICAgbWVzc2FnZT17dGhpcy5zdGF0ZS5tZXNzYWdlfVxuICAgICAgICAgIHNlbmRJbXByZXNzaW9uPXt0aGlzLnNlbmRJbXByZXNzaW9ufVxuICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGU9e3Nob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGV9XG4gICAgICAgICAgLy8gVGhpcyBoZWxwcyB3aXRoIHRlc3RpbmdcbiAgICAgICAgICBkb2N1bWVudD17dGhpcy5wcm9wcy5kb2N1bWVudH1cbiAgICAgICAgPlxuICAgICAgICAgIDxGaXJzdFJ1blxuICAgICAgICAgICAgZG9jdW1lbnQ9e3RoaXMucHJvcHMuZG9jdW1lbnR9XG4gICAgICAgICAgICBpbnRlcnJ1cHRDbGVhcmVkPXt0aGlzLnN0YXRlLmludGVycnVwdENsZWFyZWR9XG4gICAgICAgICAgICBtZXNzYWdlPXttZXNzYWdlfVxuICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3RoaXMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnl9XG4gICAgICAgICAgICBleGVjdXRlQWN0aW9uPXtBU1JvdXRlclV0aWxzLmV4ZWN1dGVBY3Rpb259XG4gICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIG9uQmxvY2tCeUlkPXtBU1JvdXRlclV0aWxzLmJsb2NrQnlJZH1cbiAgICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5vbkRpc21pc3NCeUlkKHRoaXMuc3RhdGUubWVzc2FnZS5pZCl9XG4gICAgICAgICAgICBmeGFFbmRwb2ludD17dGhpcy5wcm9wcy5meGFFbmRwb2ludH1cbiAgICAgICAgICAgIGFwcFVwZGF0ZUNoYW5uZWw9e3RoaXMucHJvcHMuYXBwVXBkYXRlQ2hhbm5lbH1cbiAgICAgICAgICAgIGZldGNoRmxvd1BhcmFtcz17dGhpcy5mZXRjaEZsb3dQYXJhbXN9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JbXByZXNzaW9uc1dyYXBwZXI
+
XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFtZXNzYWdlLmlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkUmVuZGVyQmVsb3dTZWFyY2ggPSBURU1QTEFURVNfQkVMT1dfU0VBUkNILmluY2x1ZGVzKFxuICAgICAgbWVzc2FnZS50ZW1wbGF0ZVxuICAgICk7XG4gICAgY29uc3Qgc2hvdWxkUmVuZGVySW5IZWFkZXIgPSBURU1QTEFURVNfQUJPVkVfUEFHRS5pbmNsdWRlcyhcbiAgICAgIG1lc3NhZ2UudGVtcGxhdGVcbiAgICApO1xuXG4gICAgcmV0dXJuIHNob3VsZFJlbmRlckJlbG93U2VhcmNoID8gKFxuICAgICAgLy8gUmVuZGVyIHNwZWNpYWwgYmVsb3cgc2VhcmNoIHNuaXBwZXRzIGluIHBsYWNlO1xuICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZWxvdy1zZWFyY2gtc25pcHBldC13cmFwcGVyXCI
+
XG4gICAgICAgIHt0aGlzLnJlbmRlclNuaXBwZXRzKCl9XG4gICAgICA8L2Rpdj5cbiAgICApIDogKFxuICAgICAgLy8gRm9yIG9uYm9hcmRpbmcsIHJlZ3VsYXIgc25pcHBldHMgZXRjLiB3ZSBzaG91bGQgcmVuZGVyXG4gICAgICAvLyBldmVyeXRoaW5nIGluIG91ciBmb290ZXIgY29udGFpbmVyLlxuICAgICAgUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlclByZXZpZXdCYW5uZXIoKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJGaXJzdFJ1bigpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlclNuaXBwZXRzKCl9XG4gICAgICAgIDwvPixcbiAgICAgICAgc2hvdWxkUmVuZGVySW5IZWFkZXIgPyB0aGlzLmhlYWRlclBvcnRhbCA6IHRoaXMuZm9vdGVyUG9ydGFsXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5BU1JvdXRlclVJU3VyZmFjZS5kZWZhdWx0UHJvcHMgPSB7IGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQgfTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbi8qIGVzbGludC1lbnYgbW96aWxsYS9mcmFtZS1zY3JpcHQgKi9cblxuaW1wb3J0IHtcbiAgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsXG4gIGFjdGlvblR5cGVzIGFzIGF0LFxuICBhY3Rpb25VdGlscyBhcyBhdSxcbn0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMsIGNyZWF0ZVN0b3JlIH0gZnJvbSBcInJlZHV4XCI7XG5cbmV4cG9ydCBjb25zdCBNRVJHRV9TVE9SRV9BQ1RJT04gPSBcIk5FV19UQUJfSU5JVElBTF9TVEFURVwiO1xuZXhwb3J0IGNvbnN0IE9VVEdPSU5HX01FU1NBR0VfTkFNRSA9IFwiQWN0aXZpdHlTdHJlYW06Q29udGVudFRvTWFpblwiO1xuZXhwb3J0IGNvbnN0IElOQ09NSU5HX01FU1NBR0VfTkFNRSA9IFwiQWN0aXZpdHlTdHJlYW06TWFpblRvQ29udGVudFwiO1xuZXhwb3J0IGNvbnN0IEVBUkxZX1FVRVVFRF9BQ1RJT05TID0gW2F0LlNBVkVfU0VTU0lPTl9QRVJGX0RBVEFdO1xuXG4vKipcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSByZWR1Y2VyIHRoYXQsIG9uIE1FUkdFX1NUT1JFIGFjdGlvbixcbiAqIHdpbGwgcmV0dXJuIHRoZSBhY3Rpb24uZGF0YSBvYmplY3QgbWVyZ2VkIGludG8gdGhlIHByZXZpb3VzIHN0YXRlLlxuICpcbiAqIEZvciBhbGwgb3RoZXIgYWN0aW9ucywgaXQgbWVyZWx5IGNhbGxzIG1haW5SZWR1Y2VyLlxuICpcbiAqIEJlY2F1c2Ugd2Ugd2FudCB0aGlzIHRvIG1lcmdlIHRoZSBlbnRpcmUgc3RhdGUgb2JqZWN0LCBpdCdzIHdyaXR0ZW4gYXMgYVxuICogaGlnaGVyIG9yZGVyIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBtYWluIHJlZHVjZXIgKGl0c2VsZiBvZnRlbiBhIGNhbGwgdG9cbiAqIGNvbWJpbmVSZWR1Y2VycykgYXMgYSBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtICB7ZnVuY3Rpb259IG1haW5SZWR1Y2VyIHJlZHVjZXIgdG8gY2FsbCBpZiBhY3Rpb24gIT0gTUVSR0VfU1RPUkVfQUNUSU9OXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gICAgICAgICAgICAgYSByZWR1Y2VyIHRoYXQsIG9uIE1FUkdFX1NUT1JFX0FDVElPTiBhY3Rpb24sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCByZXR1cm4gdGhlIGFjdGlvbi5kYXRhIG9iamVjdCBtZXJnZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBwcmV2aW91cyBzdGF0ZSwgYW5kIHRoZSByZXN1bHRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBjYWxsaW5nIG1haW5SZWR1Y2VyIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VTdGF0ZVJlZHVjZXIobWFpblJlZHVjZXIpIHtcbiAgcmV0dXJuIChwcmV2U3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gTUVSR0VfU1RPUkVfQUNUSU9OKSB7XG4gICAgICByZXR1cm4geyAuLi5wcmV2U3RhdGUsIC4uLmFjdGlvbi5kYXRhIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1haW5SZWR1Y2VyKHByZXZTdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBtZXNzYWdlTWlkZGxld2FyZSAtIE1pZGRsZXdhcmUgdGhhdCBsb29rcyBmb3IgU2VudFRvTWFpbiB0eXBlIGFjdGlvbnMsIGFuZCBzZW5kcyB0aGVtIGlmIG5lY2Vzc2FyeVxuICovXG5jb25zdCBtZXNzYWdlTWlkZGxld2FyZSA9IHN0b3JlID0
+
IG5leHQgPT4gYWN0aW9uID0
+
IHtcbiAgY29uc3Qgc2tpcExvY2FsID0gYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEuc2tpcExvY2FsO1xuICBpZiAoYXUuaXNTZW5kVG9NYWluKGFjdGlvbikpIHtcbiAgICBSUE1TZW5kQXN5bmNNZXNzYWdlKE9VVEdPSU5HX01FU1NBR0VfTkFNRSwgYWN0aW9uKTtcbiAgfVxuICBpZiAoIXNraXBMb2NhbCkge1xuICAgIG5leHQoYWN0aW9uKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJlaHlkcmF0aW9uTWlkZGxld2FyZSA9IHN0b3JlID0
+
IG5leHQgPT4gYWN0aW9uID0
+
IHtcbiAgaWYgKHN0b3JlLl9kaWRSZWh5ZHJhdGUpIHtcbiAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICB9XG5cbiAgY29uc3QgaXNNZXJnZVN0b3JlQWN0aW9uID0gYWN0aW9uLnR5cGUgPT09IE1FUkdFX1NUT1JFX0FDVElPTjtcbiAgY29uc3QgaXNSZWh5ZHJhdGlvblJlcXVlc3QgPSBhY3Rpb24udHlwZSA9PT0gYXQuTkVXX1RBQl9TVEFURV9SRVFVRVNUO1xuXG4gIGlmIChpc1JlaHlkcmF0aW9uUmVxdWVzdCkge1xuICAgIHN0b3JlLl9kaWRSZXF1ZXN0SW5pdGlhbFN0YXRlID0gdHJ1ZTtcbiAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICB9XG5cbiAgaWYgKGlzTWVyZ2VTdG9yZUFjdGlvbikge1xuICAgIHN0b3JlLl9kaWRSZWh5ZHJhdGUgPSB0cnVlO1xuICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gIH1cblxuICAvLyBJZiBpbml0IGhhcHBlbmVkIGFmdGVyIG91ciByZXF1ZXN0IHdhcyBtYWRlLCB3ZSBuZWVkIHRvIHJlLXJlcXVlc3RcbiAgaWYgKHN0b3JlLl9kaWRSZXF1ZXN0SW5pdGlhbFN0YXRlICYmIGFjdGlvbi50eXBlID09PSBhdC5JTklUKSB7XG4gICAgcmV0dXJuIG5leHQoYWMuQWxzb1RvTWFpbih7IHR5cGU6IGF0Lk5FV19UQUJfU1RBVEVfUkVRVUVTVCB9KSk7XG4gIH1cblxuICBpZiAoXG4gICAgYXUuaXNCcm9hZGNhc3RUb0NvbnRlbnQoYWN0aW9uKSB8fFxuICAgIGF1LmlzU2VuZFRvT25lQ29udGVudChhY3Rpb24pIHx8XG4gICAgYXUuaXNTZW5kVG9QcmVsb2FkZWQoYWN0aW9uKVxuICApIHtcbiAgICAvLyBOb3RlIHRoYXQgYWN0aW9ucyByZWNlaXZlZCBiZWZvcmUgZGlkUmVoeWRyYXRlIHdpbGwgbm90IGJlIGRpc3BhdGNoZWRcbiAgICAvLyBiZWNhdXNlIHRoaXMgY291bGQgbmVnYXRpdmVseSBhZmZlY3QgcHJlbG9hZGluZyBhbmQgdGhlIHRoZSBzdGF0ZVxuICAgIC8vIHdpbGwgYmUgcmVwbGFjZWQgYnkgcmVoeWRyYXRpb24gYW55d2F5LlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbn07XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIHF1ZXVlcyB1cCBhbGwgdGhlIEVBUkxZX1FVRVVFRF9BQ1RJT05TIHVudGlsIGl0IHJlY2VpdmVzXG4gKiB0aGUgZmlyc3QgYWN0aW9uIGZyb20gbWFpbi4gVGhpcyBpcyB1c2VmdWwgZm9yIHRob3NlIGFjdGlvbnMgZm9yIG1haW4gd2hpY2hcbiAqIHJlcXVpcmUgaGlnaGVyIHJlbGlhYmlsaXR5LCBpLmUuIHRoZSBhY3Rpb24gd2lsbCBub3QgYmUgbG9zdCBpbiB0aGUgY2FzZVxuICogdGhhdCBpdCBnZXRzIHNlbnQgYmVmb3JlIHRoZSBtYWluIGlzIHJlYWR5IHRvIHJlY2VpdmUgaXQuIENvbnZlcnNlbHksIGFueVxuICogYWN0aW9ucyBhbGxvd2VkIGVhcmx5IGFyZSBhY2NlcHRlZCB0byBiZSBpZ25vcmFibGUgb3IgcmUtc2VuZGFibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBxdWV1ZUVhcmx5TWVzc2FnZU1pZGRsZXdhcmUgPSBzdG9yZSA9PiBuZXh0ID0
+
IGFjdGlvbiA9PiB7XG4gIGlmIChzdG9yZS5fcmVjZWl2ZWRGcm9tTWFpbikge1xuICAgIG5leHQoYWN0aW9uKTtcbiAgfSBlbHNlIGlmIChhdS5pc0Zyb21NYWluKGFjdGlvbikpIHtcbiAgICBuZXh0KGFjdGlvbik7XG4gICAgc3RvcmUuX3JlY2VpdmVkRnJvbU1haW4gPSB0cnVlO1xuICAgIC8vIFNlbmRpbmcgb3V0IGFsbCB0aGUgZWFybHkgYWN0aW9ucyBhcyBtYWluIGlzIHJlYWR5IG5vd1xuICAgIGlmIChzdG9yZS5fZWFybHlBY3Rpb25RdWV1ZSkge1xuICAgICAgc3RvcmUuX2Vhcmx5QWN0aW9uUXVldWUuZm9yRWFjaChuZXh0KTtcbiAgICAgIHN0b3JlLl9lYXJseUFjdGlvblF1ZXVlID0gW107XG4gICAgfVxuICB9IGVsc2UgaWYgKEVBUkxZX1FVRVVFRF9BQ1RJT05TLmluY2x1ZGVzKGFjdGlvbi50eXBlKSkge1xuICAgIHN0b3JlLl9lYXJseUFjdGlvblF1ZXVlID0gc3RvcmUuX2Vhcmx5QWN0aW9uUXVldWUgfHwgW107XG4gICAgc3RvcmUuX2Vhcmx5QWN0aW9uUXVldWUucHVzaChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIExldCBhbnkgb3RoZXIgdHlwZSBvZiBhY3Rpb24gZ28gdGhyb3VnaFxuICAgIG5leHQoYWN0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiBpbml0U3RvcmUgLSBDcmVhdGUgYSBzdG9yZSBhbmQgbGlzdGVuIGZvciBpbmNvbWluZyBhY3Rpb25zXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3QgY29udGFpbmluZyBSZWR1eCByZWR1Y2Vyc1xuICogQHBhcmFtICB7b2JqZWN0fSBpbnRpYWxTdGF0ZSAob3B0aW9uYWwpIFRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBzdG9yZSwgaWYgZGVzaXJlZFxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICBBIHJlZHV4IHN0b3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0U3RvcmUocmVkdWNlcnMpIHtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICBtZXJnZVN0YXRlUmVkdWNlcihjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpKSxcbiAgICBnbG9iYWwuUlBNQWRkTWVzc2FnZUxpc3RlbmVyICYmXG4gICAgICBhcHBseU1pZGRsZXdhcmUoXG4gICAgICAgIHJlaHlkcmF0aW9uTWlkZGxld2FyZSxcbiAgICAgICAgcXVldWVFYXJseU1lc3NhZ2VNaWRkbGV3YXJlLFxuICAgICAgICBtZXNzYWdlTWlkZGxld2FyZVxuICAgICAgKVxuICApO1xuXG4gIHN0b3JlLl9kaWRSZWh5ZHJhdGUgPSBmYWxzZTtcbiAgc3RvcmUuX2RpZFJlcXVlc3RJbml0aWFsU3RhdGUgPSBmYWxzZTtcblxuICBpZiAoZ2xvYmFsLlJQTUFkZE1lc3NhZ2VMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5SUE1BZGRNZXNzYWdlTGlzdGVuZXIoSU5DT01JTkdfTUVTU0FHRV9OQU1FLCBtc2cgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2gobXNnLmRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNvbnRlbnQgbXNnOlwiLCBtc2csIFwiRGlzcGF0Y2ggZXJyb3I6IFwiLCBleCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBkdW1wKFxuICAgICAgICAgIGBDb250ZW50IG1zZzogJHtKU09OLnN0cmluZ2lmeShtc2cpfVxcbkRpc3BhdGNoIGVycm9yOiAke2V4fVxcbiR7XG4gICAgICAgICAgICBleC5zdGFja1xuICAgICAgICAgIH1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RvcmU7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlZHV4OyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IFZJU0lCTEUgPSBcInZpc2libGVcIjtcbmV4cG9ydCBjb25zdCBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuXG4vKipcbiAqIENvbXBvbmVudCB3cmFwcGVyIHVzZWQgdG8gc2VuZCB0ZWxlbWV0cnkgcGluZ3Mgb24gZXZlcnkgaW1wcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEltcHJlc3Npb25zV3JhcHBlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAvLyBUaGlzIHNlbmRzIGFuIGV2ZW50IHdoZW4gYSB1c2VyIHNlZXMgYSBzZXQgb2YgbmV3IGNvbnRlbnQuIElmIGNvbnRlbnRcbiAgLy8gY2hhbmdlcyB3aGlsZSB0aGUgcGFnZSBpcyBoaWRkZW4gKGkuZS4gcHJlbG9hZGVkIG9yIG9uIGEgaGlkZGVuIHRhYiksXG4gIC8vIG9ubHkgc2VuZCB0aGUgZXZlbnQgaWYgdGhlIHBhZ2UgYmVjb21lcyB2aXNpYmxlIGFnYWluLlxuICBzZW5kSW1wcmVzc2lvbk9yQWRkTGlzdGVuZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFKSB7XG4gICAgICB0aGlzLnByb3BzLnNlbmRJbXByZXNzaW9uKHsgaWQ6IHRoaXMucHJvcHMuaWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNob3VsZCBvbmx5IGV2ZXIgc2VuZCB0aGUgbGF0ZXN0IGltcHJlc3Npb24gc3RhdHMgcGluZywgc28gcmVtb3ZlIGFueVxuICAgICAgLy8gb2xkZXIgbGlzdGVuZXJzLlxuICAgICAgaWYgKHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgICB0aGlzLnByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gdGhlIHBhZ2UgYmVjb21lcyB2aXNpYmxlLCBzZW5kIHRoZSBpbXByZXNzaW9uIHN0YXRzIHBpbmcgaWYgdGhlIHNlY3Rpb24gaXNuJ3QgY29sbGFwc2VkLlxuICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnNlbmRJbXByZXNzaW9uKHsgaWQ6IHRoaXMucHJvcHMuaWQgfSk7XG4gICAgICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zZW5kT25Nb3VudCkge1xuICAgICAgdGhpcy5zZW5kSW1wcmVzc2lvbk9yQWRkTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25PblVwZGF0ZSh0aGlzLnByb3BzLCBwcmV2UHJvcHMpKSB7XG4gICAgICB0aGlzLnNlbmRJbXByZXNzaW9uT3JBZGRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuXG5JbXByZXNzaW9uc1dyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBkb2N1bWVudDogZ2xvYmFsLmRvY3VtZW50LFxuICBzZW5kT25Nb3VudDogdHJ1ZSxcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsIm1vZHVsZS5leHBvcnRzID0gUHJvcFR5cGVzOyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBjb25zdCBJU19ORVdUQUIgPVxuICBnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmRvY3VtZW50LmRvY3VtZW50VVJJID09PSBcImFib3V0Om5ld3RhYlwiO1xuZXhwb3J0IGNvbnN0IE5FV1RBQl9EQVJLX1RIRU1FID0ge1xuICBudHBfYmFja2dyb3VuZDoge1xuICAgIHI6IDQyLFxuICAgIGc6IDQyLFxuICAgIGI6IDQ2LFxuICAgIGE6IDEsXG4gIH0sXG4gIG50cF90ZXh0OiB7XG4gICAgcjogMjQ5LFxuICAgIGc6IDI0OSxcbiAgICBiOiAyNTAsXG4gICAgYTogMSxcbiAgfSxcbiAgc2lkZWJhcjoge1xuICAgIHI6IDU2LFxuICAgIGc6IDU2LFxuICAgIGI6IDYxLFxuICAgIGE6IDEsXG4gIH0sXG4gIHNpZGViYXJfdGV4dDoge1xuICAgIHI6IDI0OSxcbiAgICBnOiAyNDksXG4gICAgYjogMjUwLFxuICAgIGE6IDEsXG4gIH0sXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTsiLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBMb2NhbGl6ZWQgfSBmcm9tIFwiZmx1ZW50LXJlYWN0XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSSUNIX1RFWFRfS0VZUyB9IGZyb20gXCIuLi8uLi9yaWNoLXRleHQtc3RyaW5nc1wiO1xuaW1wb3J0IHsgc2FmZVVSSSB9IGZyb20gXCIuLi8uLi90ZW1wbGF0ZS11dGlsc1wiO1xuXG4vLyBFbGVtZW50cyBhbGxvd2VkIGluIHNuaXBwZXQgY29udGVudFxuY29uc3QgQUxMT1dFRF9UQUdTID0ge1xuICBiOiA8YiAvPixcbiAgaTogPGkgLz4sXG4gIHU6IDx1IC8
+
LFxuICBzdHJvbmc6IDxzdHJvbmcgLz4sXG4gIGVtOiA8ZW0gLz4sXG4gIGJyOiA8YnIgLz4sXG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBvYmplY3QgKHRhZyBuYW1lOiB7dXJsfSkgaW50byAodGFnIG5hbWU6IGFuY2hvcikgd2hlcmUgdGhlIHVybFxuICogaXMgdXNlZCBhcyBocmVmLCBpbiBvcmRlciB0byByZW5kZXIgbGlua3MgaW5zaWRlIGEgRmx1ZW50LkxvY2FsaXplZCBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TGlua3MoXG4gIGxpbmtzLFxuICBzZW5kQ2xpY2ssXG4gIGRvTm90QXV0b0Jsb2NrLFxuICBvcGVuTmV3V2luZG93ID0gZmFsc2Vcbikge1xuICBpZiAobGlua3MpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobGlua3MpLnJlZHVjZSgoYWNjLCBsaW5rVGFnKSA9PiB7XG4gICAgICBjb25zdCB7IGFjdGlvbiB9ID0gbGlua3NbbGlua1RhZ107XG4gICAgICAvLyBTZXR0aW5nIHRoZSB2YWx1ZSB0byBmYWxzZSB3aWxsIG5vdCBpbmNsdWRlIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIGFuY2hvclxuICAgICAgY29uc3QgdXJsID0gYWN0aW9uID8gZmFsc2UgOiBzYWZlVVJJKGxpbmtzW2xpbmtUYWddLnVybCk7XG5cbiAgICAgIGFjY1tsaW5rVGFnXSA9IChcbiAgICAgICAgLy8gZXNsaW50IHdhcyBnZXR0aW5nIGEgZmFsc2UgcG9zaXRpdmUgY2F1c2VkIGJ5IHRoZSBkeW5hbWljIGluamVjdGlvblxuICAgICAgICAvLyBvZiBjb250ZW50LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgICAgIDxhXG4gICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgIHRhcmdldD17b3Blbk5ld1dpbmRvdyA
/
IFwiX2JsYW5rXCIgOiBcIlwifVxuICAgICAgICAgIGRhdGEtbWV0cmljPXtsaW5rc1tsaW5rVGFnXS5tZXRyaWN9XG4gICAgICAgICAgZGF0YS1hY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICBkYXRhLWFyZ3M9e2xpbmtzW2xpbmtUYWddLmFyZ3N9XG4gICAgICAgICAgZGF0YS1kb19ub3RfYXV0b2Jsb2NrPXtkb05vdEF1dG9CbG9ja31cbiAgICAgICAgICBvbkNsaWNrPXtzZW5kQ2xpY2t9XG4gICAgICAgIC8
+
XG4gICAgICApO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBNZXNzYWdlIHdyYXBwZXIgdXNlZCB0byBzYW5pdGl6ZSBtYXJrdXAgYW5kIHJlbmRlciBIVE1MLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUmljaFRleHQocHJvcHMpIHtcbiAgaWYgKCFSSUNIX1RFWFRfS0VZUy5pbmNsdWRlcyhwcm9wcy5sb2NhbGl6YXRpb25faWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEFTUm91dGVyOiAke1xuICAgICAgICBwcm9wcy5sb2NhbGl6YXRpb25faWRcbiAgICAgIH0gaXMgbm90IGEgdmFsaWQgcmljaCB0ZXh0IHByb3BlcnR5LiBJZiB5b3Ugd2FudCBpdCB0byBiZSBwcm9jZXNzZWQsIHlvdSBuZWVkIHRvIGFkZCBpdCB0byBhc3JvdXRlci9yaWNoLXRleHQtc3RyaW5ncy5qc2BcbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPExvY2FsaXplZFxuICAgICAgaWQ9e3Byb3BzLmxvY2FsaXphdGlvbl9pZH1cbiAgICAgIHsuLi5BTExPV0VEX1RBR1N9XG4gICAgICB7Li4ucHJvcHMuY3VzdG9tRWxlbWVudHN9XG4gICAgICB7Li4uY29udmVydExpbmtzKFxuICAgICAgICBwcm9wcy5saW5rcyxcbiAgICAgICAgcHJvcHMuc2VuZENsaWNrLFxuICAgICAgICBwcm9wcy5kb05vdEF1dG9CbG9jayxcbiAgICAgICAgcHJvcHMub3Blbk5ld1dpbmRvd1xuICAgICAgKX1cbiAgICA
+
XG4gICAgICA8c3Bhbj57cHJvcHMudGV4dH08L3NwYW4
+
XG4gICAgPC9Mb2NhbGl6ZWQ
+
XG4gICk7XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2FmZVVSSSh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCB7IHByb3RvY29sIH0gPSBuZXcgVVJMKHVybCk7XG4gIGNvbnN0IGlzQWxsb3dlZCA9IFtcbiAgICBcImh0dHA6XCIsXG4gICAgXCJodHRwczpcIixcbiAgICBcImRhdGE6XCIsXG4gICAgXCJyZXNvdXJjZTpcIixcbiAgICBcImNocm9tZTpcIixcbiAgXS5pbmNsdWRlcyhwcm90b2NvbCk7XG4gIGlmICghaXNBbGxvd2VkKSB7XG4gICAgY29uc29sZS53YXJuKGBUaGUgcHJvdG9jb2wgJHtwcm90b2NvbH0gaXMgbm90IGFsbG93ZWQgZm9yIHRlbXBsYXRlIFVSTHMuYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG4gIHJldHVybiBpc0FsbG93ZWQgPyB1cmwgOiBcIlwiO1xufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBNb2RhbE92ZXJsYXlXcmFwcGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTW9kYWxPdmVybGF5L01vZGFsT3ZlcmxheVwiO1xuaW1wb3J0IHsgRnhBU2lnbnVwRm9ybSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0Z4QVNpZ251cEZvcm0vRnhBU2lnbnVwRm9ybVwiO1xuaW1wb3J0IHsgYWRkVXRtUGFyYW1zIH0gZnJvbSBcIi4uL0ZpcnN0UnVuL2FkZFV0bVBhcmFtc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBGcm9tIHJlc291cmNlOi8vZGV2dG9vbHMvY2xpZW50L3NoYXJlZC9mb2N1cy5qc1xuY29uc3QgRk9DVVNBQkxFX1NFTEVDVE9SID0gW1xuICBcImFbaHJlZl06bm90KFt0YWJpbmRleD0nLTEnXSlcIixcbiAgXCJidXR0b246bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gIFwiaWZyYW1lOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gIFwiaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gIFwic2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PSctMSddKVwiLFxuICBcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PSctMSddKVwiLFxuICBcIlt0YWJpbmRleF06bm90KFt0YWJpbmRleD0nLTEnXSlcIixcbl0uam9pbihcIiwgXCIpO1xuXG5leHBvcnQgY2xhc3MgVHJhaWxoZWFkIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuY2xvc2VNb2RhbCA9IHRoaXMuY2xvc2VNb2RhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TdGFydEJsdXIgPSB0aGlzLm9uU3RhcnRCbHVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBnZXQgZGlhbG9nKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJhaWxoZWFkRGlhbG9nXCIpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gV2UgbmVlZCB0byByZW1vdmUgaGlkZS1tYWluIHNpbmNlIHdlIHNob3VsZCBzaG93IGl0IHVuZGVybmVhdGggZXZlcnl0aGluZyB0aGF0IGhhcyByZW5kZXJlZFxuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZS1tYWluXCIpO1xuXG4gICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHBhZ2UgaXMgXCJoaWRkZW5cIiB0byBzY3JlZW4gcmVhZGVycyB3aGVuIHRoZSBtb2RhbCBpcyBvcGVuXG4gICAgdGhpcy5wcm9wcy5kb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuICAgICAgLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgfVxuXG4gIG9uU3RhcnRCbHVyKGV2ZW50KSB7XG4gICAgLy8gTWFrZSBzdXJlIGZvY3VzIHN0YXlzIHdpdGhpbiB0aGUgZGlhbG9nIHdoZW4gdGFiYmluZyBmcm9tIHRoZSBidXR0b25cbiAgICBjb25zdCB7IGRpYWxvZyB9ID0gdGhpcztcbiAgICBpZiAoXG4gICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ICYmXG4gICAgICAhKFxuICAgICAgICBkaWFsb2cuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZXZlbnQucmVsYXRlZFRhcmdldCkgJlxuICAgICAgICBkaWFsb2cuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZXG4gICAgICApXG4gICAgKSB7XG4gICAgICBkaWFsb2cucXVlcnlTZWxlY3RvcihGT0NVU0FCTEVfU0VMRUNUT1IpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2VNb2RhbChldikge1xuICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmNsb3NlTW9kYWwpO1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwid2VsY29tZVwiKTtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKTtcbiAgICB0aGlzLnByb3BzLm9uTmV4dFNjZW5lKCk7XG5cbiAgICAvLyBJZiBjbG9zZU1vZGFsKCkgd2FzIHRyaWdnZXJlZCBieSBhIHZpc2liaWxpdHljaGFuZ2UgZXZlbnQsIHRoZSB1c2VyIGFjdHVhbGx5XG4gICAgLy8gc3VibWl0dGVkIHRoZSBlbWFpbCBmb3JtIHNvIHdlIGRvbid0IHNlbmQgYSBTS0lQUEVEX1NJR05JTiBwaW5nLlxuICAgIGlmICghZXYgfHwgZXYudHlwZSAhPT0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCIpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7IGV2ZW50OiBcIlNLSVBQRURfU0lHTklOXCIsIC4uLnRoaXMuX2dldEZvcm1JbmZvKCkgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQnVnIDExOTA4ODIgLSBGb2N1cyBpbiBhIGRpc2FwcGVhcmluZyBkaWFsb2cgY29uZnVzZXMgc2NyZWVuIHJlYWRlcnNcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCB0byB0ZWxlbWV0cnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZm9ybSBzdWJtaXNzaW9uLlxuICAgKi9cbiAgX2dldEZvcm1JbmZvKCkge1xuICAgIGNvbnN0IHZhbHVlID0geyBoYXNfZmxvd19wYXJhbXM6ICEhdGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dJZC5sZW5ndGggfTtcbiAgICByZXR1cm4geyB2YWx1ZSB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBVVE1UZXJtIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGNvbnRlbnQgfSA9IHByb3BzLm1lc3NhZ2U7XG4gICAgY29uc3QgaW5uZXJDbGFzc05hbWUgPSBbXCJ0cmFpbGhlYWRcIiwgY29udGVudCAmJiBjb250ZW50LmNsYXNzTmFtZV1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbE92ZXJsYXlXcmFwcGVyXG4gICAgICAgIGlubmVyQ2xhc3NOYW1lPXtpbm5lckNsYXNzTmFtZX1cbiAgICAgICAgb25DbG9zZT17dGhpcy5jbG9zZU1vZGFsfVxuICAgICAgICBpZD1cInRyYWlsaGVhZERpYWxvZ1wiXG4gICAgICAgIGhlYWRlcklkPVwidHJhaWxoZWFkSGVhZGVyXCJcbiAgICAgICAgaGFzRGlzbWlzc0ljb249e3RydWV9XG4gICAgICA
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhaWxoZWFkSW5uZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYWlsaGVhZENvbnRlbnRcIj5cbiAgICAgICAgICAgIDxoMSBkYXRhLWwxMG4taWQ9e2NvbnRlbnQudGl0bGUuc3RyaW5nX2lkfSBpZD1cInRyYWlsaGVhZEhlYWRlclwiIC8
+
XG4gICAgICAgICAgICB7Y29udGVudC5zdWJ0aXRsZSAmJiAoXG4gICAgICAgICAgICAgIDxwIGRhdGEtbDEwbi1pZD17Y29udGVudC5zdWJ0aXRsZS5zdHJpbmdfaWR9IC8
+
XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInRyYWlsaGVhZEJlbmVmaXRzXCI
+
XG4gICAgICAgICAgICAgIHtjb250ZW50LmJlbmVmaXRzLm1hcChpdGVtID0
+
IChcbiAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLmlkfSBjbGFzc05hbWU9e2l0ZW0uaWR9PlxuICAgICAgICAgICAgICAgICAgPGgyIGRhdGEtbDEwbi1pZD17aXRlbS50aXRsZS5zdHJpbmdfaWR9IC8
+
XG4gICAgICAgICAgICAgICAgICA8cCBkYXRhLWwxMG4taWQ9e2l0ZW0udGV4dC5zdHJpbmdfaWR9IC8
+
XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhaWxoZWFkTGVhcm5cIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQubGVhcm4udGV4dC5zdHJpbmdfaWR9XG4gICAgICAgICAgICAgIGhyZWY9e2FkZFV0bVBhcmFtcyhjb250ZW50LmxlYXJuLnVybCwgVVRNVGVybSl9XG4gICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYWlsaGVhZC1qb2luLWZvcm1cIj5cbiAgICAgICAgICAgIDxGeEFTaWdudXBGb3JtXG4gICAgICAgICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgICAgICAgICBjb250ZW50PXtjb250ZW50fVxuICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e3RoaXMucHJvcHMuZnhhRW5kcG9pbnR9XG4gICAgICAgICAgICAgIFVUTVRlcm09e1VUTVRlcm19XG4gICAgICAgICAgICAgIGZsb3dQYXJhbXM9e3RoaXMucHJvcHMuZmxvd1BhcmFtc31cbiAgICAgICAgICAgICAgb25DbG9zZT17dGhpcy5jbG9zZU1vZGFsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY
+
XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInRyYWlsaGVhZFN0YXJ0XCJcbiAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuc2tpcEJ1dHRvbi5zdHJpbmdfaWR9XG4gICAgICAgICAgb25CbHVyPXt0aGlzLm9uU3RhcnRCbHVyfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2xvc2VNb2RhbH1cbiAgICAgICAgLz5cbiAgICAgIDwvTW9kYWxPdmVybGF5V3JhcHBlcj5cbiAgICApO1xuICB9XG59XG5cblRyYWlsaGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGZsb3dQYXJhbXM6IHsgZGV2aWNlSWQ6IFwiXCIsIGZsb3dJZDogXCJcIiwgZmxvd0JlZ2luVGltZTogXCJcIiB9LFxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIE1vZGFsT3ZlcmxheVdyYXBwZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLy8gVGhlIGludGVuZGVkIGJlaGF2aW91ciBpcyB0byBsaXN0ZW4gZm9yIGFuIGVzY2FwZSBrZXlcbiAgLy8gYnV0IG5vdCBmb3IgYSBjbGljazsgc2VlIEJ1ZyAxNTgyMjQyXG4gIG9uS2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMucHJvcHMub25DbG9zZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24pO1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwibW9kYWwtb3BlblwiKTtcbiAgICB0aGlzLmhlYWRlciA9IHRoaXMucHJvcHMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICBcImhlYWRlci1hc3JvdXRlci1jb250YWluZXJcIlxuICAgICk7XG5cbiAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1zY3JvbGxcIik7XG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKS5jbGFzc0xpc3QuYWRkKFwibW9kYWwtaGVpZ2h0XCIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24pO1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWwtb3BlblwiKTtcblxuICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsLXNjcm9sbFwiKTtcbiAgICAgIHRoaXMucHJvcHMuZG9jdW1lbnRcbiAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsLWhlaWdodFwiKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBsZXQgY2xhc3NOYW1lID0gcHJvcHMudW5zdHlsZWQgPyBcIlwiIDogXCJtb2RhbE92ZXJsYXlJbm5lciBhY3RpdmVcIjtcbiAgICBpZiAocHJvcHMuaW5uZXJDbGFzc05hbWUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBgICR7cHJvcHMuaW5uZXJDbGFzc05hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsT3ZlcmxheU91dGVyIGFjdGl2ZVwiXG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cbiAgICAgICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT17cHJvcHMuaGVhZGVySWR9XG4gICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgIHJvbGU9XCJkaWFsb2dcIlxuICAgICAgICA
+
XG4gICAgICAgICAge3Byb3BzLmhhc0Rpc21pc3NJY29uICYmIChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLWRpc21pc3NcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy5vbkNsb3NlfVxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLWNhcmRzLWRpc21pc3NcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cblxuTW9kYWxPdmVybGF5V3JhcHBlci5kZWZhdWx0UHJvcHMgPSB7IGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQgfTtcblxuZXhwb3J0IGNsYXNzIE1vZGFsT3ZlcmxheSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0aXRsZSwgYnV0dG9uX2xhYmVsIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxPdmVybGF5V3JhcHBlciBvbkNsb3NlPXt0aGlzLnByb3BzLm9uRGlzbWlzc0J1bmRsZX0
+
XG4gICAgICAgIDxoMj4ge3RpdGxlfSA8L2gyPlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b24gcHJpbWFyeSBtb2RhbEJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uRGlzbWlzc0J1bmRsZX1cbiAgICAgICAgICA
+
XG4gICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICB7YnV0dG9uX2xhYmVsfXtcIiBcIn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L01vZGFsT3ZlcmxheVdyYXBwZXI
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQge1xuICBhZGRVdG1QYXJhbXMsXG4gIEJBU0VfUEFSQU1TLFxufSBmcm9tIFwiLi4vLi4vdGVtcGxhdGVzL0ZpcnN0UnVuL2FkZFV0bVBhcmFtc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgRnhBU2lnbnVwRm9ybSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uU3VibWl0ID0gdGhpcy5vblN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25JbnB1dENoYW5nZSA9IHRoaXMub25JbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25JbnB1dEludmFsaWQgPSB0aGlzLm9uSW5wdXRJbnZhbGlkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTaWduSW4gPSB0aGlzLmhhbmRsZVNpZ25Jbi5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVtYWlsSW5wdXQ6IFwiXCIsXG4gICAgfTtcbiAgfVxuXG4gIGdldCBlbWFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRCeUlkKFwiZnhhU2lnbnVwRm9ybVwiKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPWVtYWlsXVwiKTtcbiAgfVxuXG4gIG9uU3VibWl0KGV2ZW50KSB7XG4gICAgbGV0IHVzZXJFdmVudCA9IFwiU1VCTUlUX0VNQUlMXCI7XG4gICAgY29uc3QgeyBlbWFpbCB9ID0gZXZlbnQudGFyZ2V0LmVsZW1lbnRzO1xuICAgIGlmIChlbWFpbC5kaXNhYmxlZCkge1xuICAgICAgdXNlckV2ZW50ID0gXCJTVUJNSVRfU0lHTklOXCI7XG4gICAgfSBlbHNlIGlmICghZW1haWwudmFsdWUubGVuZ3RoKSB7XG4gICAgICBlbWFpbC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICBlbWFpbC5jaGVja1ZhbGlkaXR5KCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlcG9ydCB0byB0ZWxlbWV0cnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZm9ybSBzdWJtaXNzaW9uLlxuICAgIGNvbnN0IHZhbHVlID0geyBoYXNfZmxvd19wYXJhbXM6ICEhdGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dJZC5sZW5ndGggfTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGFjLlVzZXJFdmVudCh7IGV2ZW50OiB1c2VyRXZlbnQsIHZhbHVlIH0pKTtcblxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnByb3BzLm9uQ2xvc2UpO1xuICB9XG5cbiAgaGFuZGxlU2lnbkluKGV2ZW50KSB7XG4gICAgLy8gU2V0IGRpc2FibGVkIHRvIHByZXZlbnQgZW1haWwgZnJvbSBhcHBlYXJpbmcgaW4gdXJsIHJlc3VsdGluZyBpbiB0aGUgd3JvbmcgcGFnZVxuICAgIHRoaXMuZW1haWwuZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBmb2N1cyBpbiB0aGUgZW1haWwgaW5wdXQgYm94XG4gICAgaWYgKHRoaXMuZW1haWwpIHtcbiAgICAgIHRoaXMuZW1haWwuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBvbklucHV0Q2hhbmdlKGUpIHtcbiAgICBsZXQgZXJyb3IgPSBlLnRhcmdldC5wcmV2aW91c1NpYmxpbmc7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVtYWlsSW5wdXQ6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgIGVycm9yLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImludmFsaWRcIik7XG4gIH1cblxuICBvbklucHV0SW52YWxpZChlKSB7XG4gICAgbGV0IGVycm9yID0gZS50YXJnZXQucHJldmlvdXNTaWJsaW5nO1xuICAgIGVycm9yLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcImludmFsaWRcIik7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBPdmVycmlkZSBidWlsdC1pbiBmb3JtIHZhbGlkYXRpb24gcG9wdXBcbiAgICBlLnRhcmdldC5mb2N1cygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29udGVudCwgVVRNVGVybSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBpZD1cImZ4YVNpZ251cEZvcm1cIlxuICAgICAgICByb2xlPVwiZ3JvdXBcIlxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJqb2luRm9ybUhlYWRlclwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJqb2luRm9ybUJvZHlcIlxuICAgICAgICBjbGFzc05hbWU9XCJmeGFTaWdudXBGb3JtXCJcbiAgICAgID5cbiAgICAgICAgPGgzIGlkPVwiam9pbkZvcm1IZWFkZXJcIiBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuZm9ybS50aXRsZS5zdHJpbmdfaWR9IC8
+
XG4gICAgICAgIDxwIGlkPVwiam9pbkZvcm1Cb2R5XCIgZGF0YS1sMTBuLWlkPXtjb250ZW50LmZvcm0udGV4dC5zdHJpbmdfaWR9IC8
+
XG4gICAgICAgIDxmb3JtXG4gICAgICAgICAgbWV0aG9kPVwiZ2V0XCJcbiAgICAgICAgICBhY3Rpb249e3RoaXMucHJvcHMuZnhhRW5kcG9pbnR9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYWN0aW9uXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiZW1haWxcIiAvPlxuICAgICAgICAgIDxpbnB1dCBuYW1lPVwiY29udGV4dFwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cImZ4X2Rlc2t0b3BfdjNcIiAvPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgbmFtZT1cImVudHJ5cG9pbnRcIlxuICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICB2YWx1ZT1cImFjdGl2aXR5LXN0cmVhbS1maXJzdHJ1blwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXQgbmFtZT1cInV0bV9zb3VyY2VcIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJhY3Rpdml0eS1zdHJlYW1cIiAvPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgbmFtZT1cInV0bV9jYW1wYWlnblwiXG4gICAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICAgIHZhbHVlPXtCQVNFX1BBUkFNUy51dG1fY2FtcGFpZ259XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXQgbmFtZT1cInV0bV90ZXJtXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPXtVVE1UZXJtfSAvPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgbmFtZT1cImRldmljZV9pZFwiXG4gICAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZsb3dQYXJhbXMuZGV2aWNlSWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIG5hbWU9XCJmbG93X2lkXCJcbiAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuZmxvd1BhcmFtcy5mbG93SWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIG5hbWU9XCJmbG93X2JlZ2luX3RpbWVcIlxuICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dCZWdpblRpbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXQgbmFtZT1cInN0eWxlXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwidHJhaWxoZWFkXCIgLz5cbiAgICAgICAgICA8cFxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1qb2luLWZvcm0tZW1haWwtZXJyb3JcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZXJyb3JcIlxuICAgICAgICAgIC8
+
XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuZm9ybS5lbWFpbC5zdHJpbmdfaWR9XG4gICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIG9uSW52YWxpZD17dGhpcy5vbklucHV0SW52YWxpZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmeGEtdGVybXNcIiBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLWpvaW4tZm9ybS1sZWdhbFwiPlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLW5hbWU9XCJ0ZXJtc1wiXG4gICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICBocmVmPXthZGRVdG1QYXJhbXMoXG4gICAgICAgICAgICAgICAgXCJodHRwczovL2FjY291bnRzLmZpcmVmb3guY29tL2xlZ2FsL3Rlcm1zXCIsXG4gICAgICAgICAgICAgICAgVVRNVGVybVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1uYW1lPVwicHJpdmFjeVwiXG4gICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICBocmVmPXthZGRVdG1QYXJhbXMoXG4gICAgICAgICAgICAgICAgXCJodHRwczovL2FjY291bnRzLmZpcmVmb3guY29tL2xlZ2FsL3ByaXZhY3lcIixcbiAgICAgICAgICAgICAgICBVVE1UZXJtXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8YnV0dG9uIGRhdGEtbDEwbi1pZD17Y29udGVudC5mb3JtLmJ1dHRvbi5zdHJpbmdfaWR9IHR5cGU9XCJzdWJtaXRcIiAvPlxuICAgICAgICAgIHt0aGlzLnByb3BzLnNob3dTaWduSW5MaW5rICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnhhLXNpZ25pblwiPlxuICAgICAgICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLWpvaW4tZm9ybS1zaWduaW4tbGFiZWxcIiAvPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1qb2luLWZvcm0tc2lnbmluXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVNpZ25Jbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuRnhBU2lnbnVwRm9ybS5kZWZhdWx0UHJvcHMgPSB7IGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQgfTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbi8qKlxuICogQkFTRV9QQVJBTVMga2V5cy92YWx1ZXMgY2FuIGJlIG1vZGlmaWVkIGZyb20gb3V0c2lkZSB0aGlzIGZpbGVcbiAqL1xuZXhwb3J0IGNvbnN0IEJBU0VfUEFSQU1TID0ge1xuICB1dG1fc291cmNlOiBcImFjdGl2aXR5LXN0cmVhbVwiLFxuICB1dG1fY2FtcGFpZ246IFwiZmlyc3RydW5cIixcbiAgdXRtX21lZGl1bTogXCJyZWZlcnJhbFwiLFxufTtcblxuLyoqXG4gKiBUYWtlcyBpbiBhIHVybCBhcyBhIHN0cmluZyBvciBVUkwgb2JqZWN0IGFuZCByZXR1cm5zIGEgVVJMIG9iamVjdCB3aXRoIHRoZVxuICogdXRtXyogcGFyYW1ldGVycyBhZGRlZCB0byBpdC4gSWYgYSBVUkwgb2JqZWN0IGlzIHBhc3NlZCBpbiwgdGhlIHBhcmFlbWV0ZXJzXG4gKiBhcmUgYWRkZWQgdG8gaXQgKHRoZSByZXR1cm4gdmFsdWUgY2FuIGJlIGlnbm9yZWQgaW4gdGhhdCBjYXNlIGFzIGl0J3MgdGhlXG4gKiBzYW1lIG9iamVjdCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRVdG1QYXJhbXModXJsLCB1dG1UZXJtKSB7XG4gIGxldCByZXR1cm5VcmwgPSB1cmw7XG4gIGlmICh0eXBlb2YgcmV0dXJuVXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuVXJsID0gbmV3IFVSTCh1cmwpO1xuICB9XG4gIE9iamVjdC5rZXlzKEJBU0VfUEFSQU1TKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgcmV0dXJuVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBCQVNFX1BBUkFNU1trZXldKTtcbiAgfSk7XG4gIHJldHVyblVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwidXRtX3Rlcm1cIiwgdXRtVGVybSk7XG4gIHJldHVybiByZXR1cm5Vcmw7XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1JpY2hUZXh0L1JpY2hUZXh0XCI7XG5cbi8vIEFsdCB0ZXh0IGlmIGF2YWlsYWJsZTsgaW4gdGhlIGZ1dHVyZSB0aGlzIHNob3VsZCBjb21lIGZyb20gdGhlIHNlcnZlci4gU2VlIGJ1ZyAxNTUxNzExXG5jb25zdCBJQ09OX0FMVF9URVhUID0gXCJcIjtcblxuZXhwb3J0IGNsYXNzIFJldHVyblRvQU1PIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DbGlja0FkZEV4dGVuc2lvbiA9IHRoaXMub25DbGlja0FkZEV4dGVuc2lvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25CbG9ja0J1dHRvbiA9IHRoaXMub25CbG9ja0J1dHRvbi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGdsb2JhbC5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJhbW9cIik7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgIGV2ZW50OiBcIklNUFJFU1NJT05cIixcbiAgICAgIGlkOiB0aGlzLnByb3BzLlVJU3VyZmFjZSxcbiAgICB9KTtcbiAgICAvLyBIaWRlIHRoZSBwYWdlIGNvbnRlbnQgZnJvbSBzY3JlZW4gcmVhZGVycyB3aGlsZSB0aGUgbW9kYWwgaXMgb3BlblxuICAgIHRoaXMucHJvcHMuZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbiAgICAgIC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gIH1cblxuICBvbkNsaWNrQWRkRXh0ZW5zaW9uKCkge1xuICAgIHRoaXMucHJvcHMub25BY3Rpb24odGhpcy5wcm9wcy5jb250ZW50LnByaW1hcnlfYnV0dG9uLmFjdGlvbik7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJJTlNUQUxMXCIsXG4gICAgICBpZDogdGhpcy5wcm9wcy5VSVN1cmZhY2UsXG4gICAgfSk7XG4gIH1cblxuICBvbkJsb2NrQnV0dG9uKCkge1xuICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIndlbGNvbWVcIiwgXCJoaWRlLW1haW5cIiwgXCJhbW9cIik7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJCTE9DS1wiLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgIH0pO1xuICAgIC8vIFJlLWVuYWJsZSB0aGUgZG9jdW1lbnQgZm9yIHNjcmVlbiByZWFkZXJzXG4gICAgdGhpcy5wcm9wcy5kb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuICAgICAgLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIik7XG4gIH1cblxuICByZW5kZXJUZXh0KCkge1xuICAgIGNvbnN0IGN1c3RvbUVsZW1lbnQgPSAoXG4gICAgICA8aW1nXG4gICAgICAgIHNyYz17dGhpcy5wcm9wcy5jb250ZW50LmFkZG9uX2ljb259XG4gICAgICAgIHdpZHRoPVwiMjBweFwiXG4gICAgICAgIGhlaWdodD1cIjIwcHhcIlxuICAgICAgICBhbHQ9e0lDT05fQUxUX1RFWFR9XG4gICAgICAvPlxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSaWNoVGV4dFxuICAgICAgICBjdXN0b21FbGVtZW50cz17eyBpY29uOiBjdXN0b21FbGVtZW50IH19XG4gICAgICAgIGFtb19odG1sPXt0aGlzLnByb3BzLmNvbnRlbnQudGV4dH1cbiAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwiYW1vX2h0bWxcIlxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJSZXR1cm5Ub0FNT092ZXJsYXlcIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDI
+
IHtjb250ZW50LmhlYWRlcn0gPC9oMj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlJldHVyblRvQU1PQ29udGFpbmVyXCI
+
XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlJldHVyblRvQU1PQWRkb25Db250ZW50c1wiPlxuICAgICAgICAgICAgICA8cD4ge2NvbnRlbnQudGl0bGV9IDwvcD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJSZXR1cm5Ub0FNT1RleHRcIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ge3RoaXMucmVuZGVyVGV4dCgpfSA8L3NwYW4
+
XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrQWRkRXh0ZW5zaW9ufVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInB1ZmZ5IGJsdWUgUmV0dXJuVG9BTU9BZGRFeHRlbnNpb25cIlxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24gaWNvbi1hZGRcIiAvPntcIiBcIn1cbiAgICAgICAgICAgICAgICB7Y29udGVudC5wcmltYXJ5X2J1dHRvbi5sYWJlbH17XCIgXCJ9XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlJldHVyblRvQU1PSWNvblwiIC8
+
XG4gICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkJsb2NrQnV0dG9ufVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZGVmYXVsdCBncmV5IFJldHVyblRvQU1PR2V0U3RhcnRlZFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAge2NvbnRlbnQuc2Vjb25kYXJ5X2J1dHRvbi5sYWJlbH17XCIgXCJ9XG4gICAgICAgICAgPC9idXR0b24
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWRkVXRtUGFyYW1zIH0gZnJvbSBcIi4uL0ZpcnN0UnVuL2FkZFV0bVBhcmFtc1wiO1xuaW1wb3J0IHsgRnhBU2lnbnVwRm9ybSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0Z4QVNpZ251cEZvcm0vRnhBU2lnbnVwRm9ybVwiO1xuaW1wb3J0IHsgT25ib2FyZGluZ0NhcmQgfSBmcm9tIFwiLi4vLi4vdGVtcGxhdGVzL09uYm9hcmRpbmdNZXNzYWdlL09uYm9hcmRpbmdNZXNzYWdlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjb25zdCBGeEFjY291bnRzID0gKHtcbiAgZG9jdW1lbnQsXG4gIGNvbnRlbnQsXG4gIGRpc3BhdGNoLFxuICBmeGFFbmRwb2ludCxcbiAgZmxvd1BhcmFtcyxcbiAgcmVtb3ZlT3ZlcmxheSxcbiAgdXJsLFxuICBVVE1UZXJtLFxufSkgPT4gKFxuICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPVwiZnVsbHBhZ2UtbGVmdC1zZWN0aW9uXCJcbiAgICAgIGFyaWEtbGFiZWxsZWRieT1cImZ1bGxwYWdlLWxlZnQtdGl0bGVcIlxuICAgICAgYXJpYS1kZXNjcmliZWRieT1cImZ1bGxwYWdlLWxlZnQtY29udGVudFwiXG4gICAgPlxuICAgICAgPGgxXG4gICAgICAgIGlkPVwiZnVsbHBhZ2UtbGVmdC10aXRsZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cImZ1bGxwYWdlLWxlZnQtdGl0bGVcIlxuICAgICAgICBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLXdlbGNvbWUtYm9keVwiXG4gICAgICAvPlxuICAgICAgPHBcbiAgICAgICAgaWQ9XCJmdWxscGFnZS1sZWZ0LWNvbnRlbnRcIlxuICAgICAgICBjbGFzc05hbWU9XCJmdWxscGFnZS1sZWZ0LWNvbnRlbnRcIlxuICAgICAgICBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLWJlbmVmaXQtcHJvZHVjdHMtdGV4dFwiXG4gICAgICAvPlxuICAgICAgPHBcbiAgICAgICAgY2xhc3NOYW1lPVwiZnVsbHBhZ2UtbGVmdC1jb250ZW50XCJcbiAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1iZW5lZml0LXByaXZhY3ktdGV4dFwiXG4gICAgICAvPlxuICAgICAgPGFcbiAgICAgICAgY2xhc3NOYW1lPVwiZnVsbHBhZ2UtbGVmdC1saW5rXCJcbiAgICAgICAgaHJlZj17YWRkVXRtUGFyYW1zKHVybCwgVVRNVGVybSl9XG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLXdlbGNvbWUtbGVhcm4tbW9yZVwiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxscGFnZS1pY29uIGZ4LXN5c3RlbXMtaWNvbnNcIiAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbHBhZ2UtZm9ybVwiPlxuICAgICAgPEZ4QVNpZ251cEZvcm1cbiAgICAgICAgZG9jdW1lbnQ9e2RvY3VtZW50fVxuICAgICAgICBjb250ZW50PXtjb250ZW50fVxuICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgIGZ4YUVuZHBvaW50PXtmeGFFbmRwb2ludH1cbiAgICAgICAgVVRNVGVybT17VVRNVGVybX1cbiAgICAgICAgZmxvd1BhcmFtcz17Zmxvd1BhcmFtc31cbiAgICAgICAgb25DbG9zZT17cmVtb3ZlT3ZlcmxheX1cbiAgICAgICAgc2hvd1NpZ25Jbkxpbms9e3RydWV9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcblxuZXhwb3J0IGNvbnN0IEZ4Q2FyZHMgPSAoeyBjYXJkcywgb25DYXJkQWN0aW9uLCBzZW5kVXNlckFjdGlvblRlbGVtZXRyeSB9KSA9PiAoXG4gIDxSZWFjdC5GcmFnbWVudD5cbiAgICB7Y2FyZHMubWFwKGNhcmQgPT4gKFxuICAgICAgPE9uYm9hcmRpbmdDYXJkXG4gICAgICAgIGtleT17Y2FyZC5pZH1cbiAgICAgICAgbWVzc2FnZT17Y2FyZH1cbiAgICAgICAgY2xhc3NOYW1lPVwidHJhaWxoZWFkQ2FyZFwiXG4gICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXtzZW5kVXNlckFjdGlvblRlbGVtZXRyeX1cbiAgICAgICAgb25BY3Rpb249e29uQ2FyZEFjdGlvbn1cbiAgICAgICAgVUlTdXJmYWNlPVwiVFJBSUxIRUFEXCJcbiAgICAgICAgey4uLmNhcmR9XG4gICAgICAvPlxuICAgICkpfVxuICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcblxuZXhwb3J0IGNsYXNzIEZ1bGxQYWdlSW50ZXJydXB0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucmVtb3ZlT3ZlcmxheSA9IHRoaXMucmVtb3ZlT3ZlcmxheS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DYXJkQWN0aW9uID0gdGhpcy5vbkNhcmRBY3Rpb24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwidHJhaWxoZWFkLWZ1bGxwYWdlXCIpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gSGlkZSB0aGUgcGFnZSBjb250ZW50IGZyb20gc2NyZWVuIHJlYWRlcnMgd2hpbGUgdGhlIGZ1bGwgcGFnZSBpbnRlcnJ1cHQgaXMgb3BlblxuICAgIHRoaXMucHJvcHMuZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbiAgICAgIC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gIH1cblxuICByZW1vdmVPdmVybGF5KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnJlbW92ZU92ZXJsYXkpO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtbWFpblwiLCBcInRyYWlsaGVhZC1mdWxscGFnZVwiKTtcbiAgICAvLyBSZS1lbmFibGUgdGhlIGRvY3VtZW50IGZvciBzY3JlZW4gcmVhZGVyc1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbiAgICAgIC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcImZhbHNlXCIpO1xuXG4gICAgdGhpcy5wcm9wcy5vbkJsb2NrKCk7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwid2VsY29tZVwiKTtcbiAgfVxuXG4gIG9uQ2FyZEFjdGlvbihhY3Rpb24sIG1lc3NhZ2UpIHtcbiAgICBsZXQgYWN0aW9uVXBkYXRlcyA9IHt9O1xuICAgIGNvbnN0IHsgZmxvd1BhcmFtcywgVVRNVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJPUEVOX1VSTFwiKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChhY3Rpb24uZGF0YS5hcmdzKTtcbiAgICAgIGFkZFV0bVBhcmFtcyh1cmwsIFVUTVRlcm0pO1xuXG4gICAgICBpZiAoYWN0aW9uLmFkZEZsb3dQYXJhbXMpIHtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJkZXZpY2VfaWRcIiwgZmxvd1BhcmFtcy5kZXZpY2VJZCk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZmxvd19pZFwiLCBmbG93UGFyYW1zLmZsb3dJZCk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZmxvd19iZWdpbl90aW1lXCIsIGZsb3dQYXJhbXMuZmxvd0JlZ2luVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvblVwZGF0ZXMgPSB7IGRhdGE6IHsgLi4uYWN0aW9uLmRhdGEsIGFyZ3M6IHVybC50b1N0cmluZygpIH0gfTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uQWN0aW9uKHsgLi4uYWN0aW9uLCAuLi5hY3Rpb25VcGRhdGVzIH0pO1xuICAgIC8vIE9ubHkgYmxvY2sgaWYgbWVzc2FnZSBpcyBpbiBkeW5hbWljIHRyaXBsZXRzIGV4cGVyaW1lbnRcbiAgICBpZiAobWVzc2FnZS5ibG9ja09uQ2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25CbG9ja0J5SWQobWVzc2FnZS5pZCwgeyBwcmVsb2FkZWRPbmx5OiB0cnVlIH0pO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZU92ZXJsYXkoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gcHJvcHMubWVzc2FnZTtcbiAgICBjb25zdCBjYXJkcyA9IChcbiAgICAgIDxGeENhcmRzXG4gICAgICAgIGNhcmRzPXtwcm9wcy5jYXJkc31cbiAgICAgICAgb25DYXJkQWN0aW9uPXt0aGlzLm9uQ2FyZEFjdGlvbn1cbiAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3Byb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgY29uc3QgYWNjb3VudHMgPSAoXG4gICAgICA8RnhBY2NvdW50c1xuICAgICAgICBkb2N1bWVudD17cHJvcHMuZG9jdW1lbnR9XG4gICAgICAgIGNvbnRlbnQ9e2NvbnRlbnR9XG4gICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgZnhhRW5kcG9pbnQ9e3Byb3BzLmZ4YUVuZHBvaW50fVxuICAgICAgICBmbG93UGFyYW1zPXtwcm9wcy5mbG93UGFyYW1zfVxuICAgICAgICByZW1vdmVPdmVybGF5PXt0aGlzLnJlbW92ZU92ZXJsYXl9XG4gICAgICAgIHVybD17Y29udGVudC5sZWFybi51cmx9XG4gICAgICAgIFVUTVRlcm09e3Byb3BzLlVUTVRlcm19XG4gICAgICAvPlxuICAgICk7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHNob3cgYWNjb3VudHMgc2VjdGlvbiBvbiB0b3AgYW5kXG4gICAgLy8gY2FyZHMgc2VjdGlvbiBpbiBib3R0b20gaGFsZiBvZiB0aGUgZnVsbCBwYWdlIGludGVycnVwdFxuICAgIGNvbnN0IGNhcmRzRmlyc3QgPSBjb250ZW50ICYmIGNvbnRlbnQuY2xhc3NOYW1lID09PSBcImZ1bGxQYWdlQ2FyZHNBdFRvcFwiO1xuICAgIGNvbnN0IGZpcnN0Q29udGFpbmVyQ2xhc3NOYW1lID0gW1xuICAgICAgXCJjb250YWluZXJcIixcbiAgICAgIGNvbnRlbnQgJiYgY29udGVudC5jbGFzc05hbWUsXG4gICAgXS5qb2luKFwiIFwiKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxscGFnZS13cmFwcGVyXCI
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbHBhZ2UtaWNvbiBicmFuZC1sb2dvXCIgLz5cbiAgICAgICAgPGgxXG4gICAgICAgICAgY2xhc3NOYW1lPVwid2VsY29tZS10aXRsZVwiXG4gICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy13ZWxjb21lLWhlYWRlclwiXG4gICAgICAgIC8
+
XG4gICAgICAgIDxoMlxuICAgICAgICAgIGNsYXNzTmFtZT1cIndlbGNvbWUtc3VidGl0bGVcIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctZnVsbHBhZ2Utd2VsY29tZS1zdWJoZWFkZXJcIlxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Zmlyc3RDb250YWluZXJDbGFzc05hbWV9PlxuICAgICAgICAgIHtjYXJkc0ZpcnN0ID8gY2FyZHMgOiBhY2NvdW50c31cbiAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VjdGlvbi1kaXZpZGVyXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj57Y2FyZHNGaXJzdCA
/
IGFjY291bnRzIDogY2FyZHN9PC9kaXY
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkZ1bGxQYWdlSW50ZXJydXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgZmxvd1BhcmFtczogeyBkZXZpY2VJZDogXCJcIiwgZmxvd0lkOiBcIlwiLCBmbG93QmVnaW5UaW1lOiBcIlwiIH0sXG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgT25ib2FyZGluZ0NhcmQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgcGluZyA9IHtcbiAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgbWVzc2FnZV9pZDogcHJvcHMuaWQsXG4gICAgICBpZDogcHJvcHMuVUlTdXJmYWNlLFxuICAgIH07XG4gICAgcHJvcHMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkocGluZyk7XG4gICAgcHJvcHMub25BY3Rpb24ocHJvcHMuY29udGVudC5wcmltYXJ5X2J1dHRvbi5hY3Rpb24sIHByb3BzLm1lc3NhZ2UpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCBcIm9uYm9hcmRpbmdNZXNzYWdlXCI7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YG9uYm9hcmRpbmdNZXNzYWdlSW1hZ2UgJHtjb250ZW50Lmljb259YH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvbmJvYXJkaW5nQ29udGVudFwiPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGgyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm9uYm9hcmRpbmdUaXRsZVwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17Y29udGVudC50aXRsZS5zdHJpbmdfaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib25ib2FyZGluZ1RleHRcIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQudGV4dC5zdHJpbmdfaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJvbmJvYXJkaW5nQnV0dG9uQ29udGFpbmVyXCI
+
XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17Y29udGVudC5wcmltYXJ5X2J1dHRvbi5sYWJlbC5zdHJpbmdfaWR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBvbmJvYXJkaW5nQnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3NwYW4
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgT25ib2FyZGluZ0NhcmQgfSBmcm9tIFwiLi4vLi4vdGVtcGxhdGVzL09uYm9hcmRpbmdNZXNzYWdlL09uYm9hcmRpbmdNZXNzYWdlXCI7XG5pbXBvcnQgeyBhZGRVdG1QYXJhbXMgfSBmcm9tIFwiLi9hZGRVdG1QYXJhbXNcIjtcblxuZXhwb3J0IGNsYXNzIFRyaXBsZXRzIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DYXJkQWN0aW9uID0gdGhpcy5vbkNhcmRBY3Rpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSGlkZUNvbnRhaW5lciA9IHRoaXMub25IaWRlQ29udGFpbmVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgZ2xvYmFsLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImlubGluZS1vbmJvYXJkaW5nXCIpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJpbmxpbmUtb25ib2FyZGluZ1wiKTtcbiAgfVxuXG4gIG9uQ2FyZEFjdGlvbihhY3Rpb24sIG1lc3NhZ2UpIHtcbiAgICBsZXQgYWN0aW9uVXBkYXRlcyA9IHt9O1xuICAgIGNvbnN0IHsgZmxvd1BhcmFtcywgVVRNVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJPUEVOX1VSTFwiKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChhY3Rpb24uZGF0YS5hcmdzKTtcbiAgICAgIGFkZFV0bVBhcmFtcyh1cmwsIFVUTVRlcm0pO1xuXG4gICAgICBpZiAoYWN0aW9uLmFkZEZsb3dQYXJhbXMpIHtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJkZXZpY2VfaWRcIiwgZmxvd1BhcmFtcy5kZXZpY2VJZCk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZmxvd19pZFwiLCBmbG93UGFyYW1zLmZsb3dJZCk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZmxvd19iZWdpbl90aW1lXCIsIGZsb3dQYXJhbXMuZmxvd0JlZ2luVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvblVwZGF0ZXMgPSB7IGRhdGE6IHsgLi4uYWN0aW9uLmRhdGEsIGFyZ3M6IHVybC50b1N0cmluZygpIH0gfTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uQWN0aW9uKHsgLi4uYWN0aW9uLCAuLi5hY3Rpb25VcGRhdGVzIH0pO1xuICAgIC8vIE9ubHkgYmxvY2sgaWYgbWVzc2FnZSBpcyBpbiBkeW5hbWljIHRyaXBsZXRzIGV4cGVyaW1lbnRcbiAgICBpZiAobWVzc2FnZS5ibG9ja09uQ2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25CbG9ja0J5SWQobWVzc2FnZS5pZCwgeyBwcmVsb2FkZWRPbmx5OiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uSGlkZUNvbnRhaW5lcigpIHtcbiAgICBjb25zdCB7IHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5LCBjYXJkcywgaGlkZUNvbnRhaW5lciB9ID0gdGhpcy5wcm9wcztcbiAgICBoaWRlQ29udGFpbmVyKCk7XG4gICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkoe1xuICAgICAgZXZlbnQ6IFwiRElTTUlTU1wiLFxuICAgICAgaWQ6IFwib25ib2FyZGluZy1jYXJkc1wiLFxuICAgICAgbWVzc2FnZV9pZDogY2FyZHMubWFwKG0gPT4gbS5pZCkuam9pbihcIixcIiksXG4gICAgICBhY3Rpb246IFwib25ib2FyZGluZ191c2VyX2V2ZW50XCIsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2FyZHMsXG4gICAgICBoZWFkZXJJZCxcbiAgICAgIHNob3dDYXJkUGFuZWwsXG4gICAgICBzaG93Q29udGVudCxcbiAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YHRyYWlsaGVhZENhcmRzICR7c2hvd0NhcmRQYW5lbCA
/
IFwiZXhwYW5kZWRcIiA6IFwiY29sbGFwc2VkXCJ9YH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFpbGhlYWRDYXJkc0lubmVyXCIgYXJpYS1oaWRkZW49eyFzaG93Q29udGVudH0
+
XG4gICAgICAgICAge2hlYWRlcklkICYmIDxoMSBkYXRhLWwxMG4taWQ9e2hlYWRlcklkfSAvPn1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHRyYWlsaGVhZENhcmRHcmlkJHtzaG93Q29udGVudCA
/
IFwiIHNob3dcIiA6IFwiXCJ9YH0
+
XG4gICAgICAgICAgICB7Y2FyZHMubWFwKGNhcmQgPT4gKFxuICAgICAgICAgICAgICA8T25ib2FyZGluZ0NhcmRcbiAgICAgICAgICAgICAgICBrZXk9e2NhcmQuaWR9XG4gICAgICAgICAgICAgICAgbWVzc2FnZT17Y2FyZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0cmFpbGhlYWRDYXJkXCJcbiAgICAgICAgICAgICAgICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeT17c2VuZFVzZXJBY3Rpb25UZWxlbWV0cnl9XG4gICAgICAgICAgICAgICAgb25BY3Rpb249e3RoaXMub25DYXJkQWN0aW9ufVxuICAgICAgICAgICAgICAgIFVJU3VyZmFjZT1cIlRSQUlMSEVBRFwiXG4gICAgICAgICAgICAgICAgey4uLmNhcmR9XG4gICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7c2hvd0NhcmRQYW5lbCAmJiAoXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1kaXNtaXNzXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkhpZGVDb250YWluZXJ9XG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctY2FyZHMtZGlzbWlzc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlZHV4OyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUhhc2hSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkhhc2hDaGFuZ2UgPSB0aGlzLm9uSGFzaENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGhhc2g6IGdsb2JhbC5sb2NhdGlvbi5oYXNoIH07XG4gIH1cblxuICBvbkhhc2hDaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc2g6IGdsb2JhbC5sb2NhdGlvbi5oYXNoIH0pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCB0aGlzLm9uSGFzaENoYW5nZSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgdGhpcy5vbkhhc2hDaGFuZ2UpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IFssIC4uLnJvdXRlc10gPSB0aGlzLnN0YXRlLmhhc2guc3BsaXQoXCItXCIpO1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbiwge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogdGhpcy5zdGF0ZS5oYXNoLFxuICAgICAgICByb3V0ZXMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogQ29uZmlybURpYWxvZyBjb21wb25lbnQuXG4gKiBPbmUgcHJpbWFyeSBhY3Rpb24gYnV0dG9uLCBvbmUgY2FuY2VsIGJ1dHRvbi5cbiAqXG4gKiBDb250ZW50IGRpc3BsYXllZCBpcyBjb250cm9sbGVkIGJ5IGBkYXRhYCBwcm9wIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMuXG4gKiBFeGFtcGxlOlxuICogZGF0YToge1xuICogICAvLyBBbnkgc29ydCBvZiBkYXRhIG5lZWRlZCB0byBiZSBwYXNzZWQgYXJvdW5kIGJ5IGFjdGlvbnMuXG4gKiAgIHBheWxvYWQ6IHNpdGUudXJsLFxuICogICAvLyBQcmltYXJ5IGJ1dHRvbiBBbHNvVG9NYWluIGFjdGlvbi5cbiAqICAgYWN0aW9uOiBcIkRFTEVURV9ISVNUT1JZX1VSTFwiLFxuICogICAvLyBQcmltYXJ5IGJ1dHRvbiBVU2VyRXZlbnQgYWN0aW9uLlxuICogICB1c2VyRXZlbnQ6IFwiREVMRVRFXCIsXG4gKiAgIC8vIEFycmF5IG9mIGxvY2FsZSBpZHMgdG8gZGlzcGxheS5cbiAqICAgbWVzc2FnZV9ib2R5OiBbXCJjb25maXJtX2hpc3RvcnlfZGVsZXRlX3AxXCIsIFwiY29uZmlybV9oaXN0b3J5X2RlbGV0ZV9ub3RpY2VfcDJcIl0sXG4gKiAgIC8vIFRleHQgZm9yIHByaW1hcnkgYnV0dG9uLlxuICogICBjb25maXJtX2J1dHRvbl9zdHJpbmdfaWQ6IFwibWVudV9hY3Rpb25fZGVsZXRlXCJcbiAqIH0sXG4gKi9cbmV4cG9ydCBjbGFzcyBfQ29uZmlybURpYWxvZyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl9oYW5kbGVDYW5jZWxCdG4gPSB0aGlzLl9oYW5kbGVDYW5jZWxCdG4uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVDb25maXJtQnRuID0gdGhpcy5faGFuZGxlQ29uZmlybUJ0bi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgX2hhbmRsZUNhbmNlbEJ0bigpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuRElBTE9HX0NBTkNFTCB9KTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgZXZlbnQ6IGFjdGlvblR5cGVzLkRJQUxPR19DQU5DRUwsXG4gICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy5kYXRhLmV2ZW50U291cmNlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgX2hhbmRsZUNvbmZpcm1CdG4oKSB7XG4gICAgdGhpcy5wcm9wcy5kYXRhLm9uQ29uZmlybS5mb3JFYWNoKHRoaXMucHJvcHMuZGlzcGF0Y2gpO1xuICB9XG5cbiAgX3JlbmRlck1vZGFsTWVzc2FnZSgpIHtcbiAgICBjb25zdCBtZXNzYWdlX2JvZHkgPSB0aGlzLnByb3BzLmRhdGEuYm9keV9zdHJpbmdfaWQ7XG5cbiAgICBpZiAoIW1lc3NhZ2VfYm9keSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuPlxuICAgICAgICB7bWVzc2FnZV9ib2R5Lm1hcChtc2cgPT4gKFxuICAgICAgICAgIDxwIGtleT17bXNnfSBkYXRhLWwxMG4taWQ9e21zZ30gLz5cbiAgICAgICAgKSl9XG4gICAgICA8L3NwYW4
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMudmlzaWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybWF0aW9uLWRpYWxvZ1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtb3ZlcmxheVwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy5faGFuZGxlQ2FuY2VsQnRufVxuICAgICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCI
+
XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibW9kYWwtbWVzc2FnZVwiPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuZGF0YS5pY29uICYmIChcbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BpY29uIGljb24tc3BhY2VyIGljb24tJHt0aGlzLnByb3BzLmRhdGEuaWNvbn1gfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHt0aGlzLl9yZW5kZXJNb2RhbE1lc3NhZ2UoKX1cbiAgICAgICAgICA8L3NlY3Rpb24
+
XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9oYW5kbGVDYW5jZWxCdG59XG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17dGhpcy5wcm9wcy5kYXRhLmNhbmNlbF9idXR0b25fc3RyaW5nX2lkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZG9uZVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX2hhbmRsZUNvbmZpcm1CdG59XG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17dGhpcy5wcm9wcy5kYXRhLmNvbmZpcm1fYnV0dG9uX3N0cmluZ19pZH1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IENvbmZpcm1EaWFsb2cgPSBjb25uZWN0KHN0YXRlID0
+
IHN0YXRlLkRpYWxvZykoX0NvbmZpcm1EaWFsb2cpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBDYXJkR3JpZCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvQ2FyZEdyaWQvQ2FyZEdyaWRcIjtcbmltcG9ydCB7IENvbGxhcHNpYmxlU2VjdGlvbiB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbGxhcHNpYmxlU2VjdGlvbi9Db2xsYXBzaWJsZVNlY3Rpb25cIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IERTRGlzbWlzcyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvRFNEaXNtaXNzL0RTRGlzbWlzc1wiO1xuaW1wb3J0IHsgRFNNZXNzYWdlIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9EU01lc3NhZ2UvRFNNZXNzYWdlXCI7XG5pbXBvcnQgeyBEU1ByaXZhY3lNb2RhbCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvRFNQcml2YWN5TW9kYWwvRFNQcml2YWN5TW9kYWxcIjtcbmltcG9ydCB7IERTVGV4dFByb21vIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9EU1RleHRQcm9tby9EU1RleHRQcm9tb1wiO1xuaW1wb3J0IHsgSGVybyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvSGVyby9IZXJvXCI7XG5pbXBvcnQgeyBIaWdobGlnaHRzIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9IaWdobGlnaHRzL0hpZ2hsaWdodHNcIjtcbmltcG9ydCB7IEhvcml6b250YWxSdWxlIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9Ib3Jpem9udGFsUnVsZS9Ib3Jpem9udGFsUnVsZVwiO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvTGlzdC9MaXN0XCI7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdmlnYXRpb25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNlY3Rpb25UaXRsZSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvU2VjdGlvblRpdGxlL1NlY3Rpb25UaXRsZVwiO1xuaW1wb3J0IHsgc2VsZWN0TGF5b3V0UmVuZGVyIH0gZnJvbSBcImNvbnRlbnQtc3JjL2xpYi9zZWxlY3RMYXlvdXRSZW5kZXJcIjtcbmltcG9ydCB7IFRvcFNpdGVzIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlc1wiO1xuXG5jb25zdCBBTExPV0VEX0NTU19VUkxfUFJFRklYRVMgPSBbXG4gIFwiY2hyb21lOi8vXCIsXG4gIFwicmVzb3VyY2U6Ly9cIixcbiAgXCJodHRwczovL2ltZy1nZXRwb2NrZXQuY2RuLm1vemlsbGEubmV0L1wiLFxuXTtcbmNvbnN0IERVTU1ZX0NTU19TRUxFQ1RPUiA9IFwiRFVNTVkjQ1NTLlNFTEVDVE9SXCI7XG5sZXQgcm9sbENhY2hlID0gW107IC8vIENhY2hlIG9mIHJhbmRvbSBwcm9iYWJpbGl0eSB2YWx1ZXMgZm9yIGEgc3BvYyBwb3NpdGlvblxuXG4vKipcbiAqIFZhbGlkYXRlIGEgQ1NTIGRlY2xhcmF0aW9uLiBUaGUgdmFsdWVzIGFyZSBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgYnkgQ1NTT00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FsbG93ZWRDU1MocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEJ1ZyAxNDU0ODIzOiBJTlRFUk5BTCBwcm9wZXJ0aWVzLCBlLmcuLCAtbW96LWNvbnRleHQtcHJvcGVydGllcywgYXJlXG4gIC8vIGV4cG9zZWQgYnV0IHRoZWlyIHZhbHVlcyBhcmVuJ3QgcmVzdWx0aW5nIGluIGdldHRpbmcgbm90aGluZy4gRm9ydHVuYXRlbHksXG4gIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgdmFsaWRhdGluZyB0aGUgdmFsdWVzIG9mIHRoZSBjdXJyZW50IHNldCBvZiBwcm9wZXJ0aWVzLlxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIGFsbCB1cmxzIGFyZSBvZiB0aGUgYWxsb3dlZCBwcm90b2NvbHMvcHJlZml4ZXNcbiAgY29uc3QgdXJscyA9IHZhbHVlLm1hdGNoKC91cmxcXChcIlteXCJdK1wiXFwpL2cpO1xuICByZXR1cm4gKFxuICAgICF1cmxzIHx8XG4gICAgdXJscy5ldmVyeSh1cmwgPT5cbiAgICAgIEFMTE9XRURfQ1NTX1VSTF9QUkVGSVhFUy5zb21lKHByZWZpeCA9PiB1cmwuc2xpY2UoNSkuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIF9EaXNjb3ZlcnlTdHJlYW1CYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25TdHlsZU1vdW50ID0gdGhpcy5vblN0eWxlTW91bnQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uU3R5bGVNb3VudChzdHlsZSkge1xuICAgIC8vIFVubW91bnRpbmcgc3R5bGUgZ2V0cyByaWQgb2Ygb2xkIHN0eWxlcywgc28gbm90aGluZyBlbHNlIHRvIGRvXG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc2hlZXQgfSA9IHN0eWxlO1xuICAgIGNvbnN0IHN0eWxlcyA9IEpTT04ucGFyc2Uoc3R5bGUuZGF0YXNldC5zdHlsZXMpO1xuICAgIHN0eWxlcy5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgoY29tcG9uZW50LCBjb21wb25lbnRJbmRleCkgPT4ge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIHdpdGhvdXQgb3B0aW9uYWwgc3R5bGVzIG92ZXJyaWRlc1xuICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbXBvbmVudCkuZm9yRWFjaCgoW3NlbGVjdG9ycywgZGVjbGFyYXRpb25zXSkgPT4ge1xuICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBkdW1teSBydWxlIHRvIHZhbGlkYXRlIGRlY2xhcmF0aW9ucyBhbmQgc2VsZWN0b3JzXG4gICAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShgJHtEVU1NWV9DU1NfU0VMRUNUT1J9IHt9YCk7XG4gICAgICAgICAgY29uc3QgW3J1bGVdID0gc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgICAgICAvLyBWYWxpZGF0ZSBkZWNsYXJhdGlvbnMgYW5kIHJlbW92ZSBhbnkgb2ZmZW5kZXJzLiBDU1NPTSBzaWxlbnRseVxuICAgICAgICAgIC8vIGRpc2NhcmRzIGludmFsaWQgZW50cmllcywgc28gaGVyZSB3ZSBhcHBseSBleHRyYSByZXN0cmljdGlvbnMuXG4gICAgICAgICAgcnVsZS5zdHlsZSA9IGRlY2xhcmF0aW9ucztcbiAgICAgICAgICBbLi4ucnVsZS5zdHlsZV0uZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJ1bGUuc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRDU1MocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBCYWQgQ1NTIGRlY2xhcmF0aW9uICR7cHJvcGVydHl9OiAke3ZhbHVlfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgcnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTZXQgdGhlIGFjdHVhbCBkZXNpcmVkIHNlbGVjdG9ycyBzY29wZWQgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAgIGNvbnN0IHByZWZpeCA9IGAuZHMtbGF5b3V0ID4gLmRzLWNvbHVtbjpudGgtY2hpbGQoJHtyb3dJbmRleCArXG4gICAgICAgICAgICAxfSkgLmRzLWNvbHVtbi1ncmlkID4gOm50aC1jaGlsZCgke2NvbXBvbmVudEluZGV4ICsgMX0pYDtcbiAgICAgICAgICAvLyBOQjogU3BsaXR0aW5nIG9uIFwiLFwiIGRvZXNuJ3Qgd29yayB3aXRoIHN0cmluZ3Mgd2l0aCBjb21tYXMsIGJ1dFxuICAgICAgICAgIC8vIHdlJ3JlIG9rYXkgd2l0aCBub3Qgc3VwcG9ydGluZyB0aG9zZSBzZWxlY3RvcnNcbiAgICAgICAgICBydWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yc1xuICAgICAgICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgc2VsZWN0b3IgPT5cbiAgICAgICAgICAgICAgICBwcmVmaXggK1xuICAgICAgICAgICAgICAgIC8vIEFzc3VtZSA6cHNldWRvLWNsYXNzZXMgYXJlIGZvciBjb21wb25lbnQgaW5zdGVhZCBvZiBkZXNjZW5kYW50XG4gICAgICAgICAgICAgICAgKHNlbGVjdG9yWzBdID09PSBcIjpcIiA
/
IFwiXCIgOiBcIiBcIikgK1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuam9pbihcIixcIik7XG5cbiAgICAgICAgICAvLyBDU1NPTSBzaWxlbnRseSBpZ25vcmVzIGJhZCBzZWxlY3RvcnMsIHNvIHdlJ2xsIGJlIG5vaXN5IGluc3RlYWRcbiAgICAgICAgICBpZiAocnVsZS5zZWxlY3RvclRleHQgPT09IERVTU1ZX0NTU19TRUxFQ1RPUikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQmFkIENTUyBzZWxlY3RvciAke3NlbGVjdG9yc31gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCwgZW1iZWRXaWR0aCkge1xuICAgIGNvbnN0IEVOR0FHRU1FTlRfTEFCRUxfRU5BQkxFRCA9IHRoaXMucHJvcHMuUHJlZnMudmFsdWVzW1xuICAgICAgYGRpc2NvdmVyeXN0cmVhbS5lbmdhZ2VtZW50TGFiZWxFbmFibGVkYFxuICAgIF07XG5cbiAgICBzd2l0Y2ggKGNvbXBvbmVudC50eXBlKSB7XG4gICAgICBjYXNlIFwiSGlnaGxpZ2h0c1wiOlxuICAgICAgICByZXR1cm4gPEhpZ2hsaWdodHMgLz47XG4gICAgICBjYXNlIFwiVG9wU2l0ZXNcIjpcbiAgICAgICAgbGV0IHByb21vQWxpZ25tZW50O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY29tcG9uZW50LnNwb2NzICYmXG4gICAgICAgICAgY29tcG9uZW50LnNwb2NzLnBvc2l0aW9ucyAmJlxuICAgICAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnMubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgIHByb21vQWxpZ25tZW50ID1cbiAgICAgICAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnNbMF0uaW5kZXggPT09IDAgPyBcImxlZnRcIiA6IFwicmlnaHRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUb3BTaXRlc1xuICAgICAgICAgICAgaGVhZGVyPXtjb21wb25lbnQuaGVhZGVyfVxuICAgICAgICAgICAgZGF0YT17Y29tcG9uZW50LmRhdGF9XG4gICAgICAgICAgICBwcm9tb0FsaWdubWVudD17cHJvbW9BbGlnbm1lbnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJUZXh0UHJvbW9cIjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFjb21wb25lbnQuZGF0YSB8fFxuICAgICAgICAgICFjb21wb25lbnQuZGF0YS5zcG9jcyB8fFxuICAgICAgICAgICFjb21wb25lbnQuZGF0YS5zcG9jc1swXVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBHcmFiIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSBhcyB3ZSBvbmx5IGhhdmUgMSBzcG9jIHBvc2l0aW9uLlxuICAgICAgICBjb25zdCBbc3BvY10gPSBjb21wb25lbnQuZGF0YS5zcG9jcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGltYWdlX3NyYyxcbiAgICAgICAgICByYXdfaW1hZ2Vfc3JjLFxuICAgICAgICAgIGFsdF90ZXh0LFxuICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGN0YSxcbiAgICAgICAgICBmbGlnaHRfaWQsXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgc2hpbSxcbiAgICAgICAgfSA9IHNwb2M7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RFNEaXNtaXNzXG4gICAgICAgICAgICBkYXRhPXt7XG4gICAgICAgICAgICAgIHVybDogc3BvYy51cmwsXG4gICAgICAgICAgICAgIGd1aWQ6IHNwb2MuaWQsXG4gICAgICAgICAgICAgIHNoaW06IHNwb2Muc2hpbSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uU3RhdHM9e3RydWV9XG4gICAgICAgICAgICBleHRyYUNsYXNzZXM9e2Bkcy1kaXNtaXNzLWRzLXRleHQtcHJvbW9gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxEU1RleHRQcm9tb1xuICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgaW1hZ2U9e2ltYWdlX3NyY31cbiAgICAgICAgICAgICAgcmF3X2ltYWdlX3NyYz17cmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAgICAgYWx0X3RleHQ9e2FsdF90ZXh0IHx8IHRpdGxlfVxuICAgICAgICAgICAgICBoZWFkZXI9e3RpdGxlfVxuICAgICAgICAgICAgICBjdGFfdGV4dD17Y3RhfVxuICAgICAgICAgICAgICBjdGFfdXJsPXt1cmx9XG4gICAgICAgICAgICAgIHN1YnRpdGxlPXtjb250ZXh0fVxuICAgICAgICAgICAgICBmbGlnaHRJZD17ZmxpZ2h0X2lkfVxuICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgIHBvcz17MH1cbiAgICAgICAgICAgICAgc2hpbT17c2hpbX1cbiAgICAgICAgICAgICAgdHlwZT17Y29tcG9uZW50LnR5cGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRFNEaXNtaXNzPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcIk1lc3NhZ2VcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RFNNZXNzYWdlXG4gICAgICAgICAgICB0aXRsZT17Y29tcG9uZW50LmhlYWRlciAmJiBjb21wb25lbnQuaGVhZGVyLnRpdGxlfVxuICAgICAgICAgICAgc3VidGl0bGU9e2NvbXBvbmVudC5oZWFkZXIgJiYgY29tcG9uZW50LmhlYWRlci5zdWJ0aXRsZX1cbiAgICAgICAgICAgIGxpbmtfdGV4dD17Y29tcG9uZW50LmhlYWRlciAmJiBjb21wb25lbnQuaGVhZGVyLmxpbmtfdGV4dH1cbiAgICAgICAgICAgIGxpbmtfdXJsPXtjb21wb25lbnQuaGVhZGVyICYmIGNvbXBvbmVudC5oZWFkZXIubGlua191cmx9XG4gICAgICAgICAgICBpY29uPXtjb21wb25lbnQuaGVhZGVyICYmIGNvbXBvbmVudC5oZWFkZXIuaWNvbn1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcIlNlY3Rpb25UaXRsZVwiOlxuICAgICAgICByZXR1cm4gPFNlY3Rpb25UaXRsZSBoZWFkZXI9e2NvbXBvbmVudC5oZWFkZXJ9IC8
+
O1xuICAgICAgY2FzZSBcIk5hdmlnYXRpb25cIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TmF2aWdhdGlvblxuICAgICAgICAgICAgbGlua3M9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmxpbmtzfVxuICAgICAgICAgICAgYWxpZ25tZW50PXtjb21wb25lbnQucHJvcGVydGllcy5hbGlnbm1lbnR9XG4gICAgICAgICAgICBoZWFkZXI9e2NvbXBvbmVudC5oZWFkZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJDYXJkR3JpZFwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxDYXJkR3JpZFxuICAgICAgICAgICAgdGl0bGU9e2NvbXBvbmVudC5oZWFkZXIgJiYgY29tcG9uZW50LmhlYWRlci50aXRsZX1cbiAgICAgICAgICAgIGRhdGE9e2NvbXBvbmVudC5kYXRhfVxuICAgICAgICAgICAgZmVlZD17Y29tcG9uZW50LmZlZWR9XG4gICAgICAgICAgICBib3JkZXI9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmJvcmRlcn1cbiAgICAgICAgICAgIHR5cGU9e2NvbXBvbmVudC50eXBlfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBpdGVtcz17Y29tcG9uZW50LnByb3BlcnRpZXMuaXRlbXN9XG4gICAgICAgICAgICBjdGFfdmFyaWFudD17Y29tcG9uZW50LmN0YV92YXJpYW50fVxuICAgICAgICAgICAgZGlzcGxheV9lbmdhZ2VtZW50X2xhYmVscz17RU5HQUdFTUVOVF9MQUJFTF9FTkFCTEVEfVxuICAgICAgICAgIC8
+
XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwiSGVyb1wiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxIZXJvXG4gICAgICAgICAgICBzdWJDb21wb25lbnRUeXBlPXtlbWJlZFdpZHRoID49IDkgPyBgY2FyZHNgIDogYGxpc3RgfVxuICAgICAgICAgICAgZmVlZD17Y29tcG9uZW50LmZlZWR9XG4gICAgICAgICAgICB0aXRsZT17Y29tcG9uZW50LmhlYWRlciAmJiBjb21wb25lbnQuaGVhZGVyLnRpdGxlfVxuICAgICAgICAgICAgZGF0YT17Y29tcG9uZW50LmRhdGF9XG4gICAgICAgICAgICBib3JkZXI9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmJvcmRlcn1cbiAgICAgICAgICAgIHR5cGU9e2NvbXBvbmVudC50eXBlfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBpdGVtcz17Y29tcG9uZW50LnByb3BlcnRpZXMuaXRlbXN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJIb3Jpem9udGFsUnVsZVwiOlxuICAgICAgICByZXR1cm4gPEhvcml6b250YWxSdWxlIC8
+
O1xuICAgICAgY2FzZSBcIkxpc3RcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlzdFxuICAgICAgICAgICAgZGF0YT17Y29tcG9uZW50LmRhdGF9XG4gICAgICAgICAgICBmZWVkPXtjb21wb25lbnQuZmVlZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aD17Y29tcG9uZW50LnByb3BlcnRpZXMuZnVsbF93aWR0aH1cbiAgICAgICAgICAgIGhhc0JvcmRlcnM9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmJvcmRlciA9PT0gXCJib3JkZXJcIn1cbiAgICAgICAgICAgIGhhc0ltYWdlcz17Y29tcG9uZW50LnByb3BlcnRpZXMuaGFzX2ltYWdlc31cbiAgICAgICAgICAgIGhhc051bWJlcnM9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmhhc19udW1iZXJzfVxuICAgICAgICAgICAgaXRlbXM9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zfVxuICAgICAgICAgICAgdHlwZT17Y29tcG9uZW50LnR5cGV9XG4gICAgICAgICAgICBoZWFkZXI9e2NvbXBvbmVudC5oZWFkZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiA8ZGl2Pntjb21wb25lbnQudHlwZX08L2Rpdj47XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU3R5bGVzKHN0eWxlcykge1xuICAgIC8vIFVzZSBqc29uIHN0cmluZyBhcyBib3RoIHRoZSBrZXkgYW5kIHN0eWxlcyB0byByZW5kZXIgc28gUmVhY3Qga25vd3Mgd2hlblxuICAgIC8vIHRvIHVubW91bnQgYW5kIG1vdW50IGEgbmV3IGluc3RhbmNlIGZvciBuZXcgc3R5bGVzLlxuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShzdHlsZXMpO1xuICAgIHJldHVybiA8c3R5bGUga2V5PXtqc29ufSBkYXRhLXN0eWxlcz17anNvbn0gcmVmPXt0aGlzLm9uU3R5bGVNb3VudH0gLz47XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG9sZFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuRGlzY292ZXJ5U3RyZWFtLmxheW91dCAhPT0gb2xkUHJvcHMuRGlzY292ZXJ5U3RyZWFtLmxheW91dCkge1xuICAgICAgcm9sbENhY2hlID0gW107XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIFNlbGVjdCBsYXlvdXQgcmVuZGVyIGRhdGEgYnkgYWRkaW5nIHNwb2NzIGFuZCBwb3NpdGlvbiB0byByZWNvbW1lbmRhdGlvbnNcbiAgICBjb25zdCB7IGxheW91dFJlbmRlciwgc3BvY3NGaWxsIH0gPSBzZWxlY3RMYXlvdXRSZW5kZXIoe1xuICAgICAgc3RhdGU6IHRoaXMucHJvcHMuRGlzY292ZXJ5U3RyZWFtLFxuICAgICAgcHJlZnM6IHRoaXMucHJvcHMuUHJlZnMudmFsdWVzLFxuICAgICAgcm9sbENhY2hlLFxuICAgICAgbGFuZzogdGhpcy5wcm9wcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyxcbiAgICB9KTtcbiAgICBjb25zdCB7IGNvbmZpZywgc3BvY3MsIGZlZWRzIH0gPSB0aGlzLnByb3BzLkRpc2NvdmVyeVN0cmVhbTtcblxuICAgIC8vIFNlbmQgU1BPQ1MgRmlsbCBpZiBhbnkuIE5vdGUgdGhhdCBpdCBzaG91bGQgbm90IHNlbmQgaXQgYWdhaW4gaWYgdGhlIHNhbWVcbiAgICAvLyBwYWdlIGdldHMgcmUtcmVuZGVyZWQgYnkgc3RhdGUgY2hhbmdlcy5cbiAgICBpZiAoXG4gICAgICBzcG9jcy5sb2FkZWQgJiZcbiAgICAgIGZlZWRzLmxvYWRlZCAmJlxuICAgICAgc3BvY3NGaWxsLmxlbmd0aCAmJlxuICAgICAgIXRoaXMuX3Nwb2NzRmlsbFNlbnRcbiAgICApIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkRpc2NvdmVyeVN0cmVhbVNwb2NzRmlsbCh7IHNwb2NfZmlsbHM6IHNwb2NzRmlsbCB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3Nwb2NzRmlsbFNlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFsbG93IHJlbmRlcmluZyB3aXRob3V0IGV4dHJhY3Rpbmcgc3BlY2lhbCBjb21wb25lbnRzXG4gICAgaWYgKCFjb25maWcuY29sbGFwc2libGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckxheW91dChsYXlvdXRSZW5kZXIpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBvbmVudCBvZiBhIHR5cGUgYW5kIHJlbW92ZSBpdCBmcm9tIGxheW91dFxuICAgIGNvbnN0IGV4dHJhY3RDb21wb25lbnQgPSB0eXBlID0
+
IHtcbiAgICAgIGZvciAoY29uc3QgW3Jvd0luZGV4LCByb3ddIG9mIE9iamVjdC5lbnRyaWVzKGxheW91dFJlbmRlcikpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIGNvbXBvbmVudF0gb2YgT2JqZWN0LmVudHJpZXMocm93LmNvbXBvbmVudHMpKSB7XG4gICAgICAgICAgaWYgKGNvbXBvbmVudC50eXBlID09PSB0eXBlKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJvdyBpZiBpdCB3YXMgdGhlIG9ubHkgY29tcG9uZW50IG9yIHRoZSBzaW5nbGUgaXRlbVxuICAgICAgICAgICAgaWYgKHJvdy5jb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICBsYXlvdXRSZW5kZXIuc3BsaWNlKHJvd0luZGV4LCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJvdy5jb21wb25lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8vIEdldCBcInRvcHN0b3JpZXNcIiBTZWN0aW9uIHN0YXRlIGZvciBkZWZhdWx0IHZhbHVlc1xuICAgIGNvbnN0IHRvcFN0b3JpZXMgPSB0aGlzLnByb3BzLlNlY3Rpb25zLmZpbmQocyA9PiBzLmlkID09PSBcInRvcHN0b3JpZXNcIik7XG5cbiAgICBpZiAoIXRvcFN0b3JpZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgVG9wU2l0ZXMgdG8gcmVuZGVyIGJlZm9yZSB0aGUgcmVzdCBhbmQgTWVzc2FnZSB0byB1c2UgZm9yIGhlYWRlclxuICAgIGNvbnN0IHRvcFNpdGVzID0gZXh0cmFjdENvbXBvbmVudChcIlRvcFNpdGVzXCIpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBleHRyYWN0Q29tcG9uZW50KFwiTWVzc2FnZVwiKSB8fCB7XG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgbGlua190ZXh0OiB0b3BTdG9yaWVzLmxlYXJuTW9yZS5saW5rLm1lc3NhZ2UsXG4gICAgICAgIGxpbmtfdXJsOiB0b3BTdG9yaWVzLmxlYXJuTW9yZS5saW5rLmhyZWYsXG4gICAgICAgIHRpdGxlOiB0b3BTdG9yaWVzLnRpdGxlLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgLy8gUmVuZGVyIGEgRFMtc3R5bGUgVG9wU2l0ZXMgdGhlbiB0aGUgcmVzdCBpZiBhbnkgaW4gYSBjb2xsYXBzaWJsZSBzZWN0aW9uXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge3RoaXMucHJvcHMuRGlzY292ZXJ5U3RyZWFtLmlzUHJpdmFjeUluZm9Nb2RhbFZpc2libGUgJiYgKFxuICAgICAgICAgIDxEU1ByaXZhY3lNb2RhbCBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH0gLz5cbiAgICAgICAgKX1cbiAgICAgICAge3RvcFNpdGVzICYmXG4gICAgICAgICAgdGhpcy5yZW5kZXJMYXlvdXQoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB3aWR0aDogMTIsXG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFt0b3BTaXRlc10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pfVxuICAgICAgICB7ISFsYXlvdXRSZW5kZXIubGVuZ3RoICYmIChcbiAgICAgICAgICA8Q29sbGFwc2libGVTZWN0aW9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJkcy1sYXlvdXRcIlxuICAgICAgICAgICAgY29sbGFwc2VkPXt0b3BTdG9yaWVzLnByZWYuY29sbGFwc2VkfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBpY29uPXt0b3BTdG9yaWVzLmljb259XG4gICAgICAgICAgICBpZD17dG9wU3Rvcmllcy5pZH1cbiAgICAgICAgICAgIGlzRml4ZWQ9e3RydWV9XG4gICAgICAgICAgICBsZWFybk1vcmU9e3tcbiAgICAgICAgICAgICAgbGluazoge1xuICAgICAgICAgICAgICAgIGhyZWY6IG1lc3NhZ2UuaGVhZGVyLmxpbmtfdXJsLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UuaGVhZGVyLmxpbmtfdGV4dCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBwcml2YWN5Tm90aWNlVVJMPXt0b3BTdG9yaWVzLnByaXZhY3lOb3RpY2VVUkx9XG4gICAgICAgICAgICBzaG93UHJlZk5hbWU9e3RvcFN0b3JpZXMucHJlZi5mZWVkfVxuICAgICAgICAgICAgdGl0bGU9e21lc3NhZ2UuaGVhZGVyLnRpdGxlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlckxheW91dChsYXlvdXRSZW5kZXIpfVxuICAgICAgICAgIDwvQ29sbGFwc2libGVTZWN0aW9uPlxuICAgICAgICApfVxuICAgICAgICB7dGhpcy5yZW5kZXJMYXlvdXQoW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMixcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFt7IHR5cGU6IFwiSGlnaGxpZ2h0c1wiIH1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0pfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTGF5b3V0KGxheW91dFJlbmRlcikge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpc2NvdmVyeS1zdHJlYW0gZHMtbGF5b3V0XCI
+
XG4gICAgICAgIHtsYXlvdXRSZW5kZXIubWFwKChyb3csIHJvd0luZGV4KSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtgcm93LSR7cm93SW5kZXh9YH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YGRzLWNvbHVtbiBkcy1jb2x1bW4tJHtyb3cud2lkdGh9YH1cbiAgICAgICAgICA
+
XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWNvbHVtbi1ncmlkXCI
+
XG4gICAgICAgICAgICAgIHtyb3cuY29tcG9uZW50cy5tYXAoKGNvbXBvbmVudCwgY29tcG9uZW50SW5kZXgpID0
+
IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0eWxlc1tyb3dJbmRleF0gPSBbXG4gICAgICAgICAgICAgICAgICAuLi4oc3R5bGVzW3Jvd0luZGV4XSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICBjb21wb25lbnQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtgY29tcG9uZW50LSR7Y29tcG9uZW50SW5kZXh9YH0
+
XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNvbXBvbmVudChjb21wb25lbnQsIHJvdy53aWR0aCl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgICAge3RoaXMucmVuZGVyU3R5bGVzKHN0eWxlcyl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBEaXNjb3ZlcnlTdHJlYW1CYXNlID0gY29ubmVjdChzdGF0ZSA9PiAoe1xuICBEaXNjb3ZlcnlTdHJlYW06IHN0YXRlLkRpc2NvdmVyeVN0cmVhbSxcbiAgUHJlZnM6IHN0YXRlLlByZWZzLFxuICBTZWN0aW9uczogc3RhdGUuU2VjdGlvbnMsXG4gIGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQsXG59KSkoX0Rpc2NvdmVyeVN0cmVhbUJhc2UpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgRFNDYXJkLCBQbGFjZWhvbGRlckRTQ2FyZCB9IGZyb20gXCIuLi9EU0NhcmQvRFNDYXJkLmpzeFwiO1xuaW1wb3J0IHsgRFNFbXB0eVN0YXRlIH0gZnJvbSBcIi4uL0RTRW1wdHlTdGF0ZS9EU0VtcHR5U3RhdGUuanN4XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBDYXJkR3JpZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXJDYXJkcygpIHtcbiAgICBjb25zdCByZWNzID0gdGhpcy5wcm9wcy5kYXRhLnJlY29tbWVuZGF0aW9ucy5zbGljZSgwLCB0aGlzLnByb3BzLml0ZW1zKTtcbiAgICBjb25zdCBjYXJkcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMucHJvcHMuaXRlbXM7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHJlYyA9IHJlY3NbaW5kZXhdO1xuICAgICAgY2FyZHMucHVzaChcbiAgICAgICAgIXJlYyB8fCByZWMucGxhY2Vob2xkZXIgPyAoXG4gICAgICAgICAgPFBsYWNlaG9sZGVyRFNDYXJkIGtleT17YGRzY2FyZC0ke2luZGV4fWB9IC8
+
XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPERTQ2FyZFxuICAgICAgICAgICAga2V5PXtgZHNjYXJkLSR7cmVjLmlkfWB9XG4gICAgICAgICAgICBwb3M9e3JlYy5wb3N9XG4gICAgICAgICAgICBmbGlnaHRJZD17cmVjLmZsaWdodF9pZH1cbiAgICAgICAgICAgIGltYWdlX3NyYz17cmVjLmltYWdlX3NyY31cbiAgICAgICAgICAgIHJhd19pbWFnZV9zcmM9e3JlYy5yYXdfaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgdGl0bGU9e3JlYy50aXRsZX1cbiAgICAgICAgICAgIGV4Y2VycHQ9e3JlYy5leGNlcnB0fVxuICAgICAgICAgICAgdXJsPXtyZWMudXJsfVxuICAgICAgICAgICAgaWQ9e3JlYy5pZH1cbiAgICAgICAgICAgIHNoaW09e3JlYy5zaGltfVxuICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlfVxuICAgICAgICAgICAgY29udGV4dD17cmVjLmNvbnRleHR9XG4gICAgICAgICAgICBzcG9uc29yPXtyZWMuc3BvbnNvcn1cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgc291cmNlPXtyZWMuZG9tYWlufVxuICAgICAgICAgICAgcG9ja2V0X2lkPXtyZWMucG9ja2V0X2lkfVxuICAgICAgICAgICAgY29udGV4dF90eXBlPXtyZWMuY29udGV4dF90eXBlfVxuICAgICAgICAgICAgYm9va21hcmtHdWlkPXtyZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgICAgZW5nYWdlbWVudD17cmVjLmVuZ2FnZW1lbnR9XG4gICAgICAgICAgICBkaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzPXt0aGlzLnByb3BzLmRpc3BsYXlfZW5nYWdlbWVudF9sYWJlbHN9XG4gICAgICAgICAgICBjdGE9e3JlYy5jdGF9XG4gICAgICAgICAgICBjdGFfdmFyaWFudD17dGhpcy5wcm9wcy5jdGFfdmFyaWFudH1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBkaXZpc2liaWxpdHkgPSBgYDtcblxuICAgIGlmICh0aGlzLnByb3BzLml0ZW1zICUgNCA9PT0gMCkge1xuICAgICAgZGl2aXNpYmlsaXR5ID0gYGRpdmlzaWJsZS1ieS00YDtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuaXRlbXMgJSAzID09PSAwKSB7XG4gICAgICBkaXZpc2liaWxpdHkgPSBgZGl2aXNpYmxlLWJ5LTNgO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YGRzLWNhcmQtZ3JpZCBkcy1jYXJkLWdyaWQtJHtcbiAgICAgICAgICB0aGlzLnByb3BzLmJvcmRlclxuICAgICAgICB9IGRzLWNhcmQtZ3JpZC0ke2RpdmlzaWJpbGl0eX1gfVxuICAgICAgPlxuICAgICAgICB7Y2FyZHN9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIEhhbmRsZSBhIHJlbmRlciBiZWZvcmUgZmVlZCBoYXMgYmVlbiBmZXRjaGVkIGJ5IGRpc3BsYXlpbmcgbm90aGluZ1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgdXNlciBoYXMgZGlzbWlzc2VkIGFsbCByZWNvbW1lbmRhdGlvbnNcbiAgICBjb25zdCBpc0VtcHR5ID0gZGF0YS5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09PSAwO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY
+
XG4gICAgICAgIHt0aGlzLnByb3BzLnRpdGxlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWhlYWRlclwiPnt0aGlzLnByb3BzLnRpdGxlfTwvZGl2PlxuICAgICAgICApfVxuICAgICAgICB7aXNFbXB0eSA
/
IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWNhcmQtZ3JpZCBlbXB0eVwiPlxuICAgICAgICAgICAgPERTRW1wdHlTdGF0ZVxuICAgICAgICAgICAgICBzdGF0dXM9e2RhdGEuc3RhdHVzfVxuICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgZmVlZD17dGhpcy5wcm9wcy5mZWVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICB0aGlzLnJlbmRlckNhcmRzKClcbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuQ2FyZEdyaWQuZGVmYXVsdFByb3BzID0ge1xuICBib3JkZXI6IGBib3JkZXJgLFxuICBpdGVtczogNCwgLy8gTnVtYmVyIG9mIHN0b3JpZXMgdG8gZGlzcGxheVxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgRFNJbWFnZSB9IGZyb20gXCIuLi9EU0ltYWdlL0RTSW1hZ2UuanN4XCI7XG5pbXBvcnQgeyBEU0xpbmtNZW51IH0gZnJvbSBcIi4uL0RTTGlua01lbnUvRFNMaW5rTWVudVwiO1xuaW1wb3J0IHsgSW1wcmVzc2lvblN0YXRzIH0gZnJvbSBcIi4uLy4uL0Rpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cy9JbXByZXNzaW9uU3RhdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5pbXBvcnQgeyBEU0NvbnRleHRGb290ZXIgfSBmcm9tIFwiLi4vRFNDb250ZXh0Rm9vdGVyL0RTQ29udGV4dEZvb3Rlci5qc3hcIjtcblxuLy8gRGVmYXVsdCBNZXRhIHRoYXQgZGlzcGxheXMgQ1RBIGFzIGxpbmsgaWYgY3RhX3ZhcmlhbnQgaW4gbGF5b3V0IGlzIHNldCBhcyBcImxpbmtcIlxuZXhwb3J0IGNvbnN0IERlZmF1bHRNZXRhID0gKHtcbiAgZGlzcGxheV9lbmdhZ2VtZW50X2xhYmVscyxcbiAgc291cmNlLFxuICB0aXRsZSxcbiAgZXhjZXJwdCxcbiAgY29udGV4dCxcbiAgY29udGV4dF90eXBlLFxuICBjdGEsXG4gIGVuZ2FnZW1lbnQsXG4gIGN0YV92YXJpYW50LFxufSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm8td3JhcFwiPlxuICAgICAgPHAgY2xhc3NOYW1lPVwic291cmNlIGNsYW1wXCI
+
e3NvdXJjZX08L3A
+
XG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cInRpdGxlIGNsYW1wXCI
+
e3RpdGxlfTwvaGVhZGVyPlxuICAgICAge2V4Y2VycHQgJiYgPHAgY2xhc3NOYW1lPVwiZXhjZXJwdCBjbGFtcFwiPntleGNlcnB0fTwvcD59XG4gICAgICB7Y3RhX3ZhcmlhbnQgPT09IFwibGlua1wiICYmIGN0YSAmJiAoXG4gICAgICAgIDxkaXYgcm9sZT1cImxpbmtcIiBjbGFzc05hbWU9XCJjdGEtbGluayBpY29uIGljb24tYXJyb3dcIiB0YWJJbmRleD1cIjBcIj5cbiAgICAgICAgICB7Y3RhfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY
+
XG4gICAgPERTQ29udGV4dEZvb3RlclxuICAgICAgY29udGV4dF90eXBlPXtjb250ZXh0X3R5cGV9XG4gICAgICBjb250ZXh0PXtjb250ZXh0fVxuICAgICAgZGlzcGxheV9lbmdhZ2VtZW50X2xhYmVscz17ZGlzcGxheV9lbmdhZ2VtZW50X2xhYmVsc31cbiAgICAgIGVuZ2FnZW1lbnQ9e2VuZ2FnZW1lbnR9XG4gICAgLz5cbiAgPC9kaXY
+
XG4pO1xuXG5leHBvcnQgY29uc3QgQ1RBQnV0dG9uTWV0YSA9ICh7XG4gIGRpc3BsYXlfZW5nYWdlbWVudF9sYWJlbHMsXG4gIHNvdXJjZSxcbiAgdGl0bGUsXG4gIGV4Y2VycHQsXG4gIGNvbnRleHQsXG4gIGNvbnRleHRfdHlwZSxcbiAgY3RhLFxuICBlbmdhZ2VtZW50LFxuICBzcG9uc29yLFxufSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm8td3JhcFwiPlxuICAgICAgPHAgY2xhc3NOYW1lPVwic291cmNlIGNsYW1wXCI
+
XG4gICAgICAgIHtzcG9uc29yID8gc3BvbnNvciA6IHNvdXJjZX1cbiAgICAgICAge2NvbnRleHQgJiYgYCDCtyBTcG9uc29yZWRgfVxuICAgICAgPC9wPlxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJ0aXRsZSBjbGFtcFwiPnt0aXRsZX08L2hlYWRlcj5cbiAgICAgIHtleGNlcnB0ICYmIDxwIGNsYXNzTmFtZT1cImV4Y2VycHQgY2xhbXBcIj57ZXhjZXJwdH08L3A
+
fVxuICAgIDwvZGl2PlxuICAgIHtjb250ZXh0ICYmIGN0YSAmJiA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvbiBjdGEtYnV0dG9uXCI
+
e2N0YX08L2J1dHRvbj59XG4gICAgeyFjb250ZXh0ICYmIChcbiAgICAgIDxEU0NvbnRleHRGb290ZXJcbiAgICAgICAgY29udGV4dF90eXBlPXtjb250ZXh0X3R5cGV9XG4gICAgICAgIGNvbnRleHQ9e2NvbnRleHR9XG4gICAgICAgIGRpc3BsYXlfZW5nYWdlbWVudF9sYWJlbHM9e2Rpc3BsYXlfZW5nYWdlbWVudF9sYWJlbHN9XG4gICAgICAgIGVuZ2FnZW1lbnQ9e2VuZ2FnZW1lbnR9XG4gICAgICAvPlxuICAgICl9XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGNsYXNzIERTQ2FyZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMub25MaW5rQ2xpY2sgPSB0aGlzLm9uTGlua0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRQbGFjZWhvbGRlclJlZiA9IGVsZW1lbnQgPT4ge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlckVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH07XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNTZWVuOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgb25MaW5rQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNwYXRjaCkge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgICBldmVudDogXCJDTElDS1wiLFxuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgYWN0aW9uX3Bvc2l0aW9uOiB0aGlzLnByb3BzLnBvcyxcbiAgICAgICAgICB2YWx1ZTogeyBjYXJkX3R5cGU6IHRoaXMucHJvcHMuZmxpZ2h0SWQgPyBcInNwb2NcIiA6IFwib3JnYW5pY1wiIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgdGlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgIC4uLih0aGlzLnByb3BzLnNoaW0gJiYgdGhpcy5wcm9wcy5zaGltLmNsaWNrXG4gICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMucHJvcHMuc2hpbS5jbGljayB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG9uU2VlbihlbnRyaWVzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllcy5maW5kKGUgPT4gZS5pc0ludGVyc2VjdGluZyk7XG5cbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9wIG9ic2VydmluZyBzaW5jZSBlbGVtZW50IGhhcyBiZWVuIHNlZW5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNTZWVuOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbklkbGVDYWxsYmFjaygpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNTZWVuKSB7XG4gICAgICBpZiAodGhpcy5vYnNlcnZlciAmJiB0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCkge1xuICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNTZWVuOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5pZGxlQ2FsbGJhY2tJZCA9IHRoaXMucHJvcHMud2luZG93T2JqLnJlcXVlc3RJZGxlQ2FsbGJhY2soXG4gICAgICB0aGlzLm9uSWRsZUNhbGxiYWNrLmJpbmQodGhpcylcbiAgICApO1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCkge1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih0aGlzLm9uU2Vlbi5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gUmVtb3ZlIG9ic2VydmVyIG9uIHVubW91bnRcbiAgICBpZiAodGhpcy5vYnNlcnZlciAmJiB0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCkge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pZGxlQ2FsbGJhY2tJZCkge1xuICAgICAgdGhpcy5wcm9wcy53aW5kb3dPYmouY2FuY2VsSWRsZUNhbGxiYWNrKHRoaXMuaWRsZUNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCAhdGhpcy5zdGF0ZS5pc1NlZW4pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtY2FyZCBwbGFjZWhvbGRlclwiIHJlZj17dGhpcy5zZXRQbGFjZWhvbGRlclJlZn0gLz5cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGlzQnV0dG9uQ1RBID0gdGhpcy5wcm9wcy5jdGFfdmFyaWFudCA9PT0gXCJidXR0b25cIjtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWNhcmRcIj5cbiAgICAgICAgPFNhZmVBbmNob3JcbiAgICAgICAgICBjbGFzc05hbWU9XCJkcy1jYXJkLWxpbmtcIlxuICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgIG9uTGlua0NsaWNrPXshdGhpcy5wcm9wcy5wbGFjZWhvbGRlciA
/
IHRoaXMub25MaW5rQ2xpY2sgOiB1bmRlZmluZWR9XG4gICAgICAgICAgdXJsPXt0aGlzLnByb3BzLnVybH1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1nLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxEU0ltYWdlXG4gICAgICAgICAgICAgIGV4dHJhQ2xhc3NOYW1lcz1cImltZ1wiXG4gICAgICAgICAgICAgIHNvdXJjZT17dGhpcy5wcm9wcy5pbWFnZV9zcmN9XG4gICAgICAgICAgICAgIHJhd1NvdXJjZT17dGhpcy5wcm9wcy5yYXdfaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7aXNCdXR0b25DVEEgPyAoXG4gICAgICAgICAgICA8Q1RBQnV0dG9uTWV0YVxuICAgICAgICAgICAgICBkaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzPXt0aGlzLnByb3BzLmRpc3BsYXlfZW5nYWdlbWVudF9sYWJlbHN9XG4gICAgICAgICAgICAgIHNvdXJjZT17dGhpcy5wcm9wcy5zb3VyY2V9XG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfVxuICAgICAgICAgICAgICBleGNlcnB0PXt0aGlzLnByb3BzLmV4Y2VycHR9XG4gICAgICAgICAgICAgIGNvbnRleHQ9e3RoaXMucHJvcHMuY29udGV4dH1cbiAgICAgICAgICAgICAgY29udGV4dF90eXBlPXt0aGlzLnByb3BzLmNvbnRleHRfdHlwZX1cbiAgICAgICAgICAgICAgZW5nYWdlbWVudD17dGhpcy5wcm9wcy5lbmdhZ2VtZW50fVxuICAgICAgICAgICAgICBjdGE9e3RoaXMucHJvcHMuY3RhfVxuICAgICAgICAgICAgICBzcG9uc29yPXt0aGlzLnByb3BzLnNwb25zb3J9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8RGVmYXVsdE1ldGFcbiAgICAgICAgICAgICAgZGlzcGxheV9lbmdhZ2VtZW50X2xhYmVscz17dGhpcy5wcm9wcy5kaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzfVxuICAgICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMuc291cmNlfVxuICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgICAgZXhjZXJwdD17dGhpcy5wcm9wcy5leGNlcnB0fVxuICAgICAgICAgICAgICBjb250ZXh0PXt0aGlzLnByb3BzLmNvbnRleHR9XG4gICAgICAgICAgICAgIGVuZ2FnZW1lbnQ9e3RoaXMucHJvcHMuZW5nYWdlbWVudH1cbiAgICAgICAgICAgICAgY29udGV4dF90eXBlPXt0aGlzLnByb3BzLmNvbnRleHRfdHlwZX1cbiAgICAgICAgICAgICAgY3RhPXt0aGlzLnByb3BzLmN0YX1cbiAgICAgICAgICAgICAgY3RhX3ZhcmlhbnQ9e3RoaXMucHJvcHMuY3RhX3ZhcmlhbnR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPEltcHJlc3Npb25TdGF0c1xuICAgICAgICAgICAgZmxpZ2h0SWQ9e3RoaXMucHJvcHMuZmxpZ2h0SWR9XG4gICAgICAgICAgICByb3dzPXtbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5wcm9wcy5pZCxcbiAgICAgICAgICAgICAgICBwb3M6IHRoaXMucHJvcHMucG9zLFxuICAgICAgICAgICAgICAgIC4uLih0aGlzLnByb3BzLnNoaW0gJiYgdGhpcy5wcm9wcy5zaGltLmltcHJlc3Npb25cbiAgICAgICAgICAgICAgICAgID8geyBzaGltOiB0aGlzLnByb3BzLnNoaW0uaW1wcmVzc2lvbiB9XG4gICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIHNvdXJjZT17dGhpcy5wcm9wcy50eXBlfVxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvU2FmZUFuY2hvcj5cbiAgICAgICAgPERTTGlua01lbnVcbiAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICBpbmRleD17dGhpcy5wcm9wcy5wb3N9XG4gICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgdXJsPXt0aGlzLnByb3BzLnVybH1cbiAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cbiAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMuc291cmNlfVxuICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICBwb2NrZXRfaWQ9e3RoaXMucHJvcHMucG9ja2V0X2lkfVxuICAgICAgICAgIHNoaW09e3RoaXMucHJvcHMuc2hpbX1cbiAgICAgICAgICBib29rbWFya0d1aWQ9e3RoaXMucHJvcHMuYm9va21hcmtHdWlkfVxuICAgICAgICAgIGZsaWdodElkPXt0aGlzLnByb3BzLmZsaWdodElkfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5EU0NhcmQuZGVmYXVsdFByb3BzID0ge1xuICB3aW5kb3dPYmo6IHdpbmRvdywgLy8gQWRkZWQgdG8gc3VwcG9ydCB1bml0IHRlc3RzXG59O1xuXG5leHBvcnQgY29uc3QgUGxhY2Vob2xkZXJEU0NhcmQgPSBwcm9wcyA9PiA8RFNDYXJkIHBsYWNlaG9sZGVyPXt0cnVlfSAvPjtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmV4cG9ydCBjbGFzcyBEU0ltYWdlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5vbk9wdGltaXplZEltYWdlRXJyb3IgPSB0aGlzLm9uT3B0aW1pemVkSW1hZ2VFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Ob25PcHRpbWl6ZWRJbWFnZUVycm9yID0gdGhpcy5vbk5vbk9wdGltaXplZEltYWdlRXJyb3IuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1NlZW46IGZhbHNlLFxuICAgICAgb3B0aW1pemVkSW1hZ2VGYWlsZWQ6IGZhbHNlLFxuICAgICAgdXNlVHJhbnNpdGlvbjogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIG9uU2VlbihlbnRyaWVzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllcy5maW5kKGUgPT4gZS5pc0ludGVyc2VjdGluZyk7XG5cbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpbWl6ZSkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLy8gVGh1bWJvciBkb2Vzbid0IGhhbmRsZSBzdWJwaXhlbHMgYW5kIGp1c3QgZXJyb3JzIG91dCwgc28gcm91bmRpbmcuLi5cbiAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoOiBNYXRoLnJvdW5kKGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdC53aWR0aCksXG4gICAgICAgICAgICBjb250YWluZXJIZWlnaHQ6IE1hdGgucm91bmQoZW50cnkuYm91bmRpbmdDbGllbnRSZWN0LmhlaWdodCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1NlZW46IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0b3Agb2JzZXJ2aW5nIHNpbmNlIGVsZW1lbnQgaGFzIGJlZW4gc2VlblxuICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25JZGxlQ2FsbGJhY2soKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzU2Vlbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHVzZVRyYW5zaXRpb246IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZWZvcm1hdEltYWdlVVJMKHVybCwgd2lkdGgsIGhlaWdodCkge1xuICAgIC8vIENoYW5nZSB0aGUgaW1hZ2UgVVJMIHRvIHJlcXVlc3QgYSBzaXplIHRhaWxvcmVkIGZvciB0aGUgcGFyZW50IGNvbnRhaW5lciB3aWR0aFxuICAgIC8vIEFsc286IGZvcmNlIEpQRUcsIHF1YWxpdHkgNjAsIG5vIHVwc2NhbGluZywgbm8gRVhJRiBkYXRhXG4gICAgLy8gVXNlcyBUaHVtYm9yOiBodHRwczovL3RodW1ib3IucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L3VzYWdlLmh0bWxcbiAgICByZXR1cm4gYGh0dHBzOi8vaW1nLWdldHBvY2tldC5jZG4ubW96aWxsYS5uZXQvJHt3aWR0aH14JHtoZWlnaHR9L2ZpbHRlcnM6Zm9ybWF0KGpwZWcpOnF1YWxpdHkoNjApOm5vX3Vwc2NhbGUoKTpzdHJpcF9leGlmKCkvJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICB1cmxcbiAgICApfWA7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmlkbGVDYWxsYmFja0lkID0gdGhpcy5wcm9wcy53aW5kb3dPYmoucmVxdWVzdElkbGVDYWxsYmFjayhcbiAgICAgIHRoaXMub25JZGxlQ2FsbGJhY2suYmluZCh0aGlzKVxuICAgICk7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih0aGlzLm9uU2Vlbi5iaW5kKHRoaXMpLCB7XG4gICAgICAvLyBBc3N1bWUgYW4gaW1hZ2Ugd2lsbCBiZSBldmVudHVhbGx5IHNlZW4gaWYgaXQgaXMgd2l0aGluXG4gICAgICAvLyBoYWxmIHRoZSBhdmVyYWdlIERlc2t0b3AgdmVydGljYWwgc2NyZWVuIHNpemU6XG4gICAgICAvLyBodHRwOi8vZ3Muc3RhdGNvdW50ZXIuY29tL3NjcmVlbi1yZXNvbHV0aW9uLXN0YXRzL2Rlc2t0b3Avbm9ydGgtYW1lcmljYVxuICAgICAgcm9vdE1hcmdpbjogYDU0MHB4YCxcbiAgICB9KTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoUmVhY3RET00uZmluZERPTU5vZGUodGhpcykpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gUmVtb3ZlIG9ic2VydmVyIG9uIHVubW91bnRcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoUmVhY3RET00uZmluZERPTU5vZGUodGhpcykpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pZGxlQ2FsbGJhY2tJZCkge1xuICAgICAgdGhpcy5wcm9wcy53aW5kb3dPYmouY2FuY2VsSWRsZUNhbGxiYWNrKHRoaXMuaWRsZUNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgY2xhc3NOYW1lcyA9IGBkcy1pbWFnZVxuICAgICAgJHt0aGlzLnByb3BzLmV4dHJhQ2xhc3NOYW1lcyA
/
IGAgJHt0aGlzLnByb3BzLmV4dHJhQ2xhc3NOYW1lc31gIDogYGB9XG4gICAgICAke3RoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS51c2VUcmFuc2l0aW9uID8gYCB1c2UtdHJhbnNpdGlvbmAgOiBgYH1cbiAgICAgICR7dGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLmlzU2VlbiA
/
IGAgbG9hZGVkYCA6IGBgfVxuICAgIGA7XG5cbiAgICBsZXQgaW1nO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5pc1NlZW4pIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5wcm9wcy5vcHRpbWl6ZSAmJlxuICAgICAgICB0aGlzLnByb3BzLnJhd1NvdXJjZSAmJlxuICAgICAgICAhdGhpcy5zdGF0ZS5vcHRpbWl6ZWRJbWFnZUZhaWxlZFxuICAgICAgKSB7XG4gICAgICAgIGxldCBzb3VyY2U7XG4gICAgICAgIGxldCBzb3VyY2UyeDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLmNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgbGV0IGJhc2VTb3VyY2UgPSB0aGlzLnByb3BzLnJhd1NvdXJjZTtcblxuICAgICAgICAgIHNvdXJjZSA9IHRoaXMucmVmb3JtYXRJbWFnZVVSTChcbiAgICAgICAgICAgIGJhc2VTb3VyY2UsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmNvbnRhaW5lcldpZHRoLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250YWluZXJIZWlnaHRcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgc291cmNlMnggPSB0aGlzLnJlZm9ybWF0SW1hZ2VVUkwoXG4gICAgICAgICAgICBiYXNlU291cmNlLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250YWluZXJXaWR0aCAqIDIsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmNvbnRhaW5lckhlaWdodCAqIDJcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaW1nID0gKFxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBhbHQ9e3RoaXMucHJvcHMuYWx0X3RleHR9XG4gICAgICAgICAgICAgIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgICAgICAgb25FcnJvcj17dGhpcy5vbk9wdGltaXplZEltYWdlRXJyb3J9XG4gICAgICAgICAgICAgIHNyYz17c291cmNlfVxuICAgICAgICAgICAgICBzcmNTZXQ9e2Ake3NvdXJjZTJ4fSAyeGB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUubm9uT3B0aW1pemVkSW1hZ2VGYWlsZWQpIHtcbiAgICAgICAgaW1nID0gKFxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGFsdD17dGhpcy5wcm9wcy5hbHRfdGV4dH1cbiAgICAgICAgICAgIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgICAgIG9uRXJyb3I9e3RoaXMub25Ob25PcHRpbWl6ZWRJbWFnZUVycm9yfVxuICAgICAgICAgICAgc3JjPXt0aGlzLnByb3BzLnNvdXJjZX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBpbWcgZWxlbWVudCBpZiBib3RoIHNvdXJjZXMgZmFpbC4gUmVuZGVyIGEgcGxhY2Vob2xkZXIgaW5zdGVhZC5cbiAgICAgICAgaW1nID0gPGRpdiBjbGFzc05hbWU9XCJicm9rZW4taW1hZ2VcIiAvPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gPHBpY3R1cmUgY2xhc3NOYW1lPXtjbGFzc05hbWVzfT57aW1nfTwvcGljdHVyZT47XG4gIH1cblxuICBvbk9wdGltaXplZEltYWdlRXJyb3IoKSB7XG4gICAgLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSByZS1yZW5kZXIgYW5kIHRoZSB1bm9wdGltaXplZCA0NTBweCBpbWFnZSB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFja1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb3B0aW1pemVkSW1hZ2VGYWlsZWQ6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBvbk5vbk9wdGltaXplZEltYWdlRXJyb3IoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBub25PcHRpbWl6ZWRJbWFnZUZhaWxlZDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxufVxuXG5EU0ltYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgc291cmNlOiBudWxsLCAvLyBUaGUgY3VycmVudCBzb3VyY2Ugc3R5bGUgZnJvbSBQb2NrZXQgQVBJIChhbHdheXMgNDUwcHgpXG4gIHJhd1NvdXJjZTogbnVsbCwgLy8gVW5hZHVsdGVyYXRlZCBpbWFnZSBVUkwgdG8gZmlsdGVyIHRocm91Z2ggVGh1bWJvclxuICBleHRyYUNsYXNzTmFtZXM6IG51bGwsIC8vIEFkZGl0aW9uYWwgY2xhc3NuYW1lcyB0byBhcHBlbmQgdG8gY29tcG9uZW50XG4gIG9wdGltaXplOiB0cnVlLCAvLyBNZWFzdXJlIHBhcmVudCBjb250YWluZXIgdG8gcmVxdWVzdCBleGFjdCBzaXplc1xuICBhbHRfdGV4dDogbnVsbCxcbiAgd2luZG93T2JqOiB3aW5kb3csIC8vIEFkZGVkIHRvIHN1cHBvcnQgdW5pdCB0ZXN0c1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IExpbmtNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvTGlua01lbnUvTGlua01lbnVcIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIERTTGlua01lbnUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbk1lbnVVcGRhdGUgPSB0aGlzLm9uTWVudVVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25NZW51U2hvdyA9IHRoaXMub25NZW51U2hvdy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29udGV4dE1lbnVCdXR0b25SZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgfVxuXG4gIG9uTWVudVVwZGF0ZShzaG93Q29udGV4dE1lbnUpIHtcbiAgICBpZiAoIXNob3dDb250ZXh0TWVudSkge1xuICAgICAgY29uc3QgZHNMaW5rTWVudUhvc3REaXYgPSB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmLmN1cnJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgIGRzTGlua01lbnVIb3N0RGl2LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiLCBcImxhc3QtaXRlbVwiKTtcbiAgICB9XG4gIH1cblxuICBuZXh0QW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT5cbiAgICAgIHRoaXMucHJvcHMud2luZG93T2JqLnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBvbk1lbnVTaG93KCkge1xuICAgIGNvbnN0IGRzTGlua01lbnVIb3N0RGl2ID0gdGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZi5jdXJyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgLy8gV2FpdCBmb3IgbmV4dCBmcmFtZSBiZWZvcmUgY29tcHV0aW5nIHNjcm9sbE1heFggdG8gYWxsb3cgZmx1ZW50IG1lbnUgc3RyaW5ncyB0byBiZSB2aXNpYmxlXG4gICAgYXdhaXQgdGhpcy5uZXh0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICBpZiAodGhpcy5wcm9wcy53aW5kb3dPYmouc2Nyb2xsTWF4WCA
+
IDApIHtcbiAgICAgIGRzTGlua01lbnVIb3N0RGl2LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxhc3QtaXRlbVwiKTtcbiAgICB9XG4gICAgZHNMaW5rTWVudUhvc3REaXYucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW5kZXgsIGRpc3BhdGNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IFRPUF9TVE9SSUVTX0NPTlRFWFRfTUVOVV9PUFRJT05TID0gW1xuICAgICAgXCJDaGVja0Jvb2ttYXJrT3JBcmNoaXZlXCIsXG4gICAgICBcIkNoZWNrU2F2ZWRUb1BvY2tldFwiLFxuICAgICAgXCJTZXBhcmF0b3JcIixcbiAgICAgIFwiT3BlbkluTmV3V2luZG93XCIsXG4gICAgICBcIk9wZW5JblByaXZhdGVXaW5kb3dcIixcbiAgICAgIFwiU2VwYXJhdG9yXCIsXG4gICAgICBcIkJsb2NrVXJsXCIsXG4gICAgICAuLi4odGhpcy5wcm9wcy5mbGlnaHRJZCA
/
IFtcIlNob3dQcml2YWN5SW5mb1wiXSA6IFtdKSxcbiAgICBdO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLnByb3BzLnR5cGUgfHwgXCJESVNDT1ZFUllfU1RSRUFNXCI7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLnByb3BzLnRpdGxlIHx8IHRoaXMucHJvcHMuc291cmNlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY
+
XG4gICAgICAgIDxDb250ZXh0TWVudUJ1dHRvblxuICAgICAgICAgIHJlZkZ1bmN0aW9uPXt0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmfVxuICAgICAgICAgIHRvb2x0aXA9e1wibmV3dGFiLW1lbnUtY29udGVudC10b29sdGlwXCJ9XG4gICAgICAgICAgdG9vbHRpcEFyZ3M9e3sgdGl0bGUgfX1cbiAgICAgICAgICBvblVwZGF0ZT17dGhpcy5vbk1lbnVVcGRhdGV9XG4gICAgICAgID5cbiAgICAgICAgICA8TGlua01lbnVcbiAgICAgICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cbiAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgIHNvdXJjZT17dHlwZS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgb25TaG93PXt0aGlzLm9uTWVudVNob3d9XG4gICAgICAgICAgICBvcHRpb25zPXtUT1BfU1RPUklFU19DT05URVhUX01FTlVfT1BUSU9OU31cbiAgICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uU3RhdHM9e3RydWV9XG4gICAgICAgICAgICBzaXRlPXt7XG4gICAgICAgICAgICAgIHJlZmVycmVyOiBcImh0dHBzOi8vZ2V0cG9ja2V0LmNvbS9yZWNvbW1lbmRhdGlvbnNcIixcbiAgICAgICAgICAgICAgdGl0bGU6IHRoaXMucHJvcHMudGl0bGUsXG4gICAgICAgICAgICAgIHR5cGU6IHRoaXMucHJvcHMudHlwZSxcbiAgICAgICAgICAgICAgdXJsOiB0aGlzLnByb3BzLnVybCxcbiAgICAgICAgICAgICAgZ3VpZDogdGhpcy5wcm9wcy5pZCxcbiAgICAgICAgICAgICAgcG9ja2V0X2lkOiB0aGlzLnByb3BzLnBvY2tldF9pZCxcbiAgICAgICAgICAgICAgc2hpbTogdGhpcy5wcm9wcy5zaGltLFxuICAgICAgICAgICAgICBib29rbWFya0d1aWQ6IHRoaXMucHJvcHMuYm9va21hcmtHdWlkLFxuICAgICAgICAgICAgICBmbGlnaHRfaWQ6IHRoaXMucHJvcHMuZmxpZ2h0SWQsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvQ29udGV4dE1lbnVCdXR0b24
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkRTTGlua01lbnUuZGVmYXVsdFByb3BzID0ge1xuICB3aW5kb3dPYmo6IHdpbmRvdywgLy8gQWRkZWQgdG8gc3VwcG9ydCB1bml0IHRlc3RzXG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBDb250ZXh0TWVudSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbnRleHRNZW51L0NvbnRleHRNZW51XCI7XG5pbXBvcnQgeyBMaW5rTWVudU9wdGlvbnMgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL2xpbmstbWVudS1vcHRpb25zXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IERFRkFVTFRfU0lURV9NRU5VX09QVElPTlMgPSBbXG4gIFwiQ2hlY2tQaW5Ub3BTaXRlXCIsXG4gIFwiRWRpdFRvcFNpdGVcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJPcGVuSW5OZXdXaW5kb3dcIixcbiAgXCJPcGVuSW5Qcml2YXRlV2luZG93XCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiQmxvY2tVcmxcIixcbl07XG5cbmV4cG9ydCBjbGFzcyBfTGlua01lbnUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgZ2V0T3B0aW9ucygpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpdGUsXG4gICAgICBpbmRleCxcbiAgICAgIHNvdXJjZSxcbiAgICAgIGlzUHJpdmF0ZUJyb3dzaW5nRW5hYmxlZCxcbiAgICAgIHNpdGVJbmZvLFxuICAgICAgcGxhdGZvcm0sXG4gICAgfSA9IHByb3BzO1xuXG4gICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSBvZiBkZWZhdWx0IHNpdGVcbiAgICBjb25zdCBwcm9wT3B0aW9ucyA9XG4gICAgICAhc2l0ZS5pc0RlZmF1bHQgfHwgc2l0ZS5zZWFyY2hUb3BTaXRlXG4gICAgICAgID8gcHJvcHMub3B0aW9uc1xuICAgICAgICA6IERFRkFVTFRfU0lURV9NRU5VX09QVElPTlM7XG5cbiAgICBjb25zdCBvcHRpb25zID0gcHJvcE9wdGlvbnNcbiAgICAgIC5tYXAobyA9PlxuICAgICAgICBMaW5rTWVudU9wdGlvbnNbb10oXG4gICAgICAgICAgc2l0ZSxcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgaXNQcml2YXRlQnJvd3NpbmdFbmFibGVkLFxuICAgICAgICAgIHNpdGVJbmZvLFxuICAgICAgICAgIHBsYXRmb3JtXG4gICAgICAgIClcbiAgICAgIClcbiAgICAgIC5tYXAob3B0aW9uID0
+
IHtcbiAgICAgICAgY29uc3QgeyBhY3Rpb24sIGltcHJlc3Npb24sIGlkLCB0eXBlLCB1c2VyRXZlbnQgfSA9IG9wdGlvbjtcbiAgICAgICAgaWYgKCF0eXBlICYmIGlkKSB7XG4gICAgICAgICAgb3B0aW9uLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBwcm9wcy5kaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHVzZXJFdmVudCkge1xuICAgICAgICAgICAgICBjb25zdCB1c2VyRXZlbnREYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBldmVudDogdXNlckV2ZW50LFxuICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uX3Bvc2l0aW9uOiBpbmRleCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNpdGVJbmZvXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHByb3BzLmRpc3BhdGNoKGFjLlVzZXJFdmVudCh1c2VyRXZlbnREYXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW1wcmVzc2lvbiAmJiBwcm9wcy5zaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzKSB7XG4gICAgICAgICAgICAgIHByb3BzLmRpc3BhdGNoKGltcHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgIH0pO1xuXG4gICAgLy8gVGhpcyBpcyBmb3IgYWNjZXNzaWJpbGl0eSB0byBzdXBwb3J0IG1ha2luZyBlYWNoIGl0ZW0gdGFiYmFibGUuXG4gICAgLy8gV2Ugd2FudCB0byBrbm93IHdoaWNoIGl0ZW0gaXMgdGhlIGZpcnN0IGFuZCB3aGljaCBpdGVtXG4gICAgLy8gaXMgdGhlIGxhc3QsIHNvIHdlIGNhbiBjbG9zZSB0aGUgY29udGV4dCBtZW51IGFjY29yZGluZ2x5LlxuICAgIG9wdGlvbnNbMF0uZmlyc3QgPSB0cnVlO1xuICAgIG9wdGlvbnNbb3B0aW9ucy5sZW5ndGggLSAxXS5sYXN0ID0gdHJ1ZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRleHRNZW51XG4gICAgICAgIG9uVXBkYXRlPXt0aGlzLnByb3BzLm9uVXBkYXRlfVxuICAgICAgICBvblNob3c9e3RoaXMucHJvcHMub25TaG93fVxuICAgICAgICBvcHRpb25zPXt0aGlzLmdldE9wdGlvbnMoKX1cbiAgICAgICAga2V5Ym9hcmRBY2Nlc3M9e3RoaXMucHJvcHMua2V5Ym9hcmRBY2Nlc3N9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgZ2V0U3RhdGUgPSBzdGF0ZSA9PiAoe1xuICBpc1ByaXZhdGVCcm93c2luZ0VuYWJsZWQ6IHN0YXRlLlByZWZzLnZhbHVlcy5pc1ByaXZhdGVCcm93c2luZ0VuYWJsZWQsXG4gIHBsYXRmb3JtOiBzdGF0ZS5QcmVmcy52YWx1ZXMucGxhdGZvcm0sXG59KTtcbmV4cG9ydCBjb25zdCBMaW5rTWVudSA9IGNvbm5lY3QoZ2V0U3RhdGUpKF9MaW5rTWVudSk7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhpZGVDb250ZXh0ID0gdGhpcy5oaWRlQ29udGV4dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TaG93ID0gdGhpcy5vblNob3cuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhpZGVDb250ZXh0KCkge1xuICAgIHRoaXMucHJvcHMub25VcGRhdGUoZmFsc2UpO1xuICB9XG5cbiAgb25TaG93KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2hvdykge1xuICAgICAgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm9uU2hvdygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhpZGVDb250ZXh0KTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oaWRlQ29udGV4dCk7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgLy8gRWF0IGFsbCBjbGlja3Mgb24gdGhlIGNvbnRleHQgbWVudSBzbyB0aGV5IGRvbid0IGJ1YmJsZSB1cCB0byB3aW5kb3cuXG4gICAgLy8gVGhpcyBwcmV2ZW50cyB0aGUgY29udGV4dCBtZW51IGZyb20gY2xvc2luZyB3aGVuIGNsaWNraW5nIGRpc2FibGVkIGl0ZW1zXG4gICAgLy8gb3IgdGhlIHNlcGFyYXRvcnMuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgLy8gRGlzYWJsaW5nIGZvY3VzIG9uIHRoZSBtZW51IHNwYW4gYWxsb3dzIHRoZSBmaXJzdCB0YWIgdG8gZm9jdXMgb24gdGhlIGZpcnN0IG1lbnUgaXRlbSBpbnN0ZWFkIG9mIHRoZSB3cmFwcGVyLlxuICAgIHJldHVybiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvaW50ZXJhY3RpdmUtc3VwcG9ydHMtZm9jdXNcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudVwiPlxuICAgICAgICA8dWxcbiAgICAgICAgICByb2xlPVwibWVudVwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudS1saXN0XCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnByb3BzLm9wdGlvbnMubWFwKChvcHRpb24sIGkpID0
+
XG4gICAgICAgICAgICBvcHRpb24udHlwZSA9PT0gXCJzZXBhcmF0b3JcIiA
/
IChcbiAgICAgICAgICAgICAgPGxpIGtleT17aX0gY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgcm9sZT1cInNlcGFyYXRvclwiIC8
+
XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICBvcHRpb24udHlwZSAhPT0gXCJlbXB0eVwiICYmIChcbiAgICAgICAgICAgICAgICA8Q29udGV4dE1lbnVJdGVtXG4gICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICBvcHRpb249e29wdGlvbn1cbiAgICAgICAgICAgICAgICAgIGhpZGVDb250ZXh0PXt0aGlzLmhpZGVDb250ZXh0fVxuICAgICAgICAgICAgICAgICAga2V5Ym9hcmRBY2Nlc3M9e3RoaXMucHJvcHMua2V5Ym9hcmRBY2Nlc3N9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICl9XG4gICAgICAgIDwvdWw
+
XG4gICAgICA8L3NwYW4
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVJdGVtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25LZXlEb3duID0gdGhpcy5vbktleURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uS2V5VXAgPSB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLmZvY3VzRmlyc3QgPSB0aGlzLmZvY3VzRmlyc3QuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5wcm9wcy5oaWRlQ29udGV4dCgpO1xuICAgIHRoaXMucHJvcHMub3B0aW9uLm9uQ2xpY2soKTtcbiAgfVxuXG4gIC8vIEZvY3VzIHRoZSBmaXJzdCBtZW51IGl0ZW0gaWYgdGhlIG1lbnUgd2FzIGFjY2Vzc2VkIHZpYSB0aGUga2V5Ym9hcmQuXG4gIGZvY3VzRmlyc3QoYnV0dG9uKSB7XG4gICAgaWYgKHRoaXMucHJvcHMua2V5Ym9hcmRBY2Nlc3MgJiYgYnV0dG9uKSB7XG4gICAgICBidXR0b24uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHNlbGVjdHMgdGhlIGNvcnJlY3Qgbm9kZSBiYXNlZCBvbiB0aGUga2V5IHByZXNzZWRcbiAgZm9jdXNTaWJsaW5nKHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgY29uc3QgY2xvc2VzdFNpYmxpbmdTZWxlY3RvciA9XG4gICAgICBrZXkgPT09IFwiQXJyb3dVcFwiID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIjtcbiAgICBpZiAoIXBhcmVudFtjbG9zZXN0U2libGluZ1NlbGVjdG9yXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyZW50W2Nsb3Nlc3RTaWJsaW5nU2VsZWN0b3JdLmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgICBwYXJlbnRbY2xvc2VzdFNpYmxpbmdTZWxlY3Rvcl0uZmlyc3RFbGVtZW50Q2hpbGQuZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50W2Nsb3Nlc3RTaWJsaW5nU2VsZWN0b3JdW1xuICAgICAgICBjbG9zZXN0U2libGluZ1NlbGVjdG9yXG4gICAgICBdLmZpcnN0RWxlbWVudENoaWxkLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgY29uc3QgeyBvcHRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgIGNhc2UgXCJUYWJcIjpcbiAgICAgICAgLy8gdGFiIGdvZXMgZG93biBpbiBjb250ZXh0IG1lbnUsIHNoaWZ0ICsgdGFiIGdvZXMgdXAgaW4gY29udGV4dCBtZW51XG4gICAgICAgIC8vIGlmIHdlJ3JlIG9uIHRoZSBsYXN0IGl0ZW0sIG9uZSBtb3JlIHRhYiB3aWxsIGNsb3NlIHRoZSBjb250ZXh0IG1lbnVcbiAgICAgICAgLy8gc2ltaWxhcmx5LCBpZiB3ZSdyZSBvbiB0aGUgZmlyc3QgaXRlbSwgb25lIG1vcmUgc2hpZnQgKyB0YWIgd2lsbCBjbG9zZSBpdFxuICAgICAgICBpZiAoXG4gICAgICAgICAgKGV2ZW50LnNoaWZ0S2V5ICYmIG9wdGlvbi5maXJzdCkgfHxcbiAgICAgICAgICAoIWV2ZW50LnNoaWZ0S2V5ICYmIG9wdGlvbi5sYXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmZvY3VzU2libGluZyhldmVudC50YXJnZXQsIGV2ZW50LmtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIG9wdGlvbi5vbkNsaWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFByZXZlbnRzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNwYWNlYmFyXG4gIC8vIHNjcm9sbGluZyB0aGUgcGFnZSAmIGF1dG8tdHJpZ2dlcmluZyBidXR0b25zLlxuICBvbktleVVwKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgb3B0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8bGkgcm9sZT1cInByZXNlbnRhdGlvblwiIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudS1pdGVtXCI
+
XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9e29wdGlvbi5kaXNhYmxlZCA
/
IFwiZGlzYWJsZWRcIiA6IFwiXCJ9XG4gICAgICAgICAgcm9sZT1cIm1lbnVpdGVtXCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cbiAgICAgICAgICBvbktleVVwPXt0aGlzLm9uS2V5VXB9XG4gICAgICAgICAgcmVmPXtvcHRpb24uZmlyc3QgPyB0aGlzLmZvY3VzRmlyc3QgOiBudWxsfVxuICAgICAgICA
+
XG4gICAgICAgICAge29wdGlvbi5pY29uICYmIChcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGljb24gaWNvbi1zcGFjZXIgaWNvbi0ke29wdGlvbi5pY29ufWB9IC8
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9e29wdGlvbi5zdHJpbmdfaWQgfHwgb3B0aW9uLmlkfSAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuXG5jb25zdCBfT3BlbkluUHJpdmF0ZVdpbmRvdyA9IHNpdGUgPT4gKHtcbiAgaWQ6IFwibmV3dGFiLW1lbnUtb3Blbi1uZXctcHJpdmF0ZS13aW5kb3dcIixcbiAgaWNvbjogXCJuZXctd2luZG93LXByaXZhdGVcIixcbiAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICB0eXBlOiBhdC5PUEVOX1BSSVZBVEVfV0lORE9XLFxuICAgIGRhdGE6IHsgdXJsOiBzaXRlLnVybCwgcmVmZXJyZXI6IHNpdGUucmVmZXJyZXIgfSxcbiAgfSksXG4gIHVzZXJFdmVudDogXCJPUEVOX1BSSVZBVEVfV0lORE9XXCIsXG59KTtcblxuLyoqXG4gKiBMaXN0IG9mIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBpdGVtcyB0aGF0IGNhbiBiZSBpbmNsdWRlZCBhcyBtZW51IG9wdGlvbnMgaW4gYVxuICogTGlua01lbnUuIEFsbCBmdW5jdGlvbnMgdGFrZSB0aGUgc2l0ZSBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLCBhbmQgb3B0aW9uYWxseVxuICogdGhlIGluZGV4IG9mIHRoZSBzaXRlLlxuICovXG5leHBvcnQgY29uc3QgTGlua01lbnVPcHRpb25zID0ge1xuICBTZXBhcmF0b3I6ICgpID0
+
ICh7IHR5cGU6IFwic2VwYXJhdG9yXCIgfSksXG4gIEVtcHR5SXRlbTogKCkgPT4gKHsgdHlwZTogXCJlbXB0eVwiIH0pLFxuICBTaG93UHJpdmFjeUluZm86IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1zaG93LXByaXZhY3ktaW5mb1wiLFxuICAgIGljb246IFwiaW5mb1wiLFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogYXQuU0hPV19QUklWQUNZX0lORk8sXG4gICAgfSxcbiAgICB1c2VyRXZlbnQ6IFwiU0hPV19QUklWQUNZX0lORk9cIixcbiAgfSksXG4gIFJlbW92ZUJvb2ttYXJrOiBzaXRlID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtcmVtb3ZlLWJvb2ttYXJrXCIsXG4gICAgaWNvbjogXCJib29rbWFyay1hZGRlZFwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5ERUxFVEVfQk9PS01BUktfQllfSUQsXG4gICAgICBkYXRhOiBzaXRlLmJvb2ttYXJrR3VpZCxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiQk9PS01BUktfREVMRVRFXCIsXG4gIH0pLFxuICBBZGRCb29rbWFyazogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWJvb2ttYXJrXCIsXG4gICAgaWNvbjogXCJib29rbWFyay1ob2xsb3dcIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuQk9PS01BUktfVVJMLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUudXJsLCB0aXRsZTogc2l0ZS50aXRsZSwgdHlwZTogc2l0ZS50eXBlIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIkJPT0tNQVJLX0FERFwiLFxuICB9KSxcbiAgT3BlbkluTmV3V2luZG93OiBzaXRlID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtb3Blbi1uZXctd2luZG93XCIsXG4gICAgaWNvbjogXCJuZXctd2luZG93XCIsXG4gICAgYWN0aW9uOiBhYy5BbHNvVG9NYWluKHtcbiAgICAgIHR5cGU6IGF0Lk9QRU5fTkVXX1dJTkRPVyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcmVmZXJyZXI6IHNpdGUucmVmZXJyZXIsXG4gICAgICAgIHR5cGVkQm9udXM6IHNpdGUudHlwZWRCb251cyxcbiAgICAgICAgdXJsOiBzaXRlLnVybCxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIk9QRU5fTkVXX1dJTkRPV1wiLFxuICB9KSxcbiAgLy8gVGhpcyBibG9ja3MgdGhlIHVybCBmb3IgcmVndWxhciBzdG9yaWVzLFxuICAvLyBidXQgYWxzbyBzZW5kcyBhIG1lc3NhZ2UgdG8gRGlzY292ZXJ5U3RyZWFtIHdpdGggZmxpZ2h0X2lkLlxuICAvLyBJZiBEaXNjb3ZlcnlTdHJlYW0gc2VlcyB0aGlzIG1lc3NhZ2UgZm9yIGEgZmxpZ2h0X2lkXG4gIC8vIGl0IGFsc28gYmxvY2tzIGl0IG9uIHRoZSBmbGlnaHRfaWQuXG4gIEJsb2NrVXJsOiAoc2l0ZSwgaW5kZXgsIGV2ZW50U291cmNlKSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWRpc21pc3NcIixcbiAgICBpY29uOiBcImRpc21pc3NcIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuQkxPQ0tfVVJMLFxuICAgICAgZGF0YToge1xuICAgICAgICB1cmw6IHNpdGUub3Blbl91cmwgfHwgc2l0ZS51cmwsXG4gICAgICAgIHBvY2tldF9pZDogc2l0ZS5wb2NrZXRfaWQsXG4gICAgICAgIC4uLihzaXRlLmZsaWdodF9pZCA
/
IHsgZmxpZ2h0X2lkOiBzaXRlLmZsaWdodF9pZCB9IDoge30pLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBpbXByZXNzaW9uOiBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgc291cmNlOiBldmVudFNvdXJjZSxcbiAgICAgIGJsb2NrOiAwLFxuICAgICAgdGlsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiBzaXRlLmd1aWQsXG4gICAgICAgICAgcG9zOiBpbmRleCxcbiAgICAgICAgICAuLi4oc2l0ZS5zaGltICYmIHNpdGUuc2hpbS5kZWxldGUgPyB7IHNoaW06IHNpdGUuc2hpbS5kZWxldGUgfSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIkJMT0NLXCIsXG4gIH0pLFxuXG4gIC8vIFRoaXMgaXMgYW4gb3B0aW9uIGZvciB3ZWIgZXh0ZW50aW9ucyB3aGljaCB3aWxsIHJlc3VsdCBpbiByZW1vdmUgaXRlbXMgZnJvbVxuICAvLyBtZW1vcnkgYW5kIG5vdGlmeSB0aGUgd2ViIGV4dGVuaW9uLCByYXRoZXIgdGhhbiB1c2luZyB0aGUgYnVpbHQtaW4gYmxvY2sgbGlzdC5cbiAgV2ViRXh0RGlzbWlzczogKHNpdGUsIGluZGV4LCBldmVudFNvdXJjZSkgPT4gKHtcbiAgICBpZDogXCJtZW51X2FjdGlvbl93ZWJleHRfZGlzbWlzc1wiLFxuICAgIHN0cmluZ19pZDogXCJuZXd0YWItbWVudS1kaXNtaXNzXCIsXG4gICAgaWNvbjogXCJkaXNtaXNzXCIsXG4gICAgYWN0aW9uOiBhYy5XZWJFeHRFdmVudChhdC5XRUJFWFRfRElTTUlTUywge1xuICAgICAgc291cmNlOiBldmVudFNvdXJjZSxcbiAgICAgIHVybDogc2l0ZS51cmwsXG4gICAgICBhY3Rpb25fcG9zaXRpb246IGluZGV4LFxuICAgIH0pLFxuICB9KSxcbiAgRGVsZXRlVXJsOiAoc2l0ZSwgaW5kZXgsIGV2ZW50U291cmNlLCBpc0VuYWJsZWQsIHNpdGVJbmZvKSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWRlbGV0ZS1oaXN0b3J5XCIsXG4gICAgaWNvbjogXCJkZWxldGVcIixcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IGF0LkRJQUxPR19PUEVOLFxuICAgICAgZGF0YToge1xuICAgICAgICBvbkNvbmZpcm06IFtcbiAgICAgICAgICBhYy5BbHNvVG9NYWluKHtcbiAgICAgICAgICAgIHR5cGU6IGF0LkRFTEVURV9ISVNUT1JZX1VSTCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgdXJsOiBzaXRlLnVybCxcbiAgICAgICAgICAgICAgcG9ja2V0X2lkOiBzaXRlLnBvY2tldF9pZCxcbiAgICAgICAgICAgICAgZm9yY2VCbG9jazogc2l0ZS5ib29rbWFya0d1aWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFjLlVzZXJFdmVudChcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgIHsgZXZlbnQ6IFwiREVMRVRFXCIsIHNvdXJjZTogZXZlbnRTb3VyY2UsIGFjdGlvbl9wb3NpdGlvbjogaW5kZXggfSxcbiAgICAgICAgICAgICAgc2l0ZUluZm9cbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICBdLFxuICAgICAgICBldmVudFNvdXJjZSxcbiAgICAgICAgYm9keV9zdHJpbmdfaWQ6IFtcbiAgICAgICAgICBcIm5ld3RhYi1jb25maXJtLWRlbGV0ZS1oaXN0b3J5LXAxXCIsXG4gICAgICAgICAgXCJuZXd0YWItY29uZmlybS1kZWxldGUtaGlzdG9yeS1wMlwiLFxuICAgICAgICBdLFxuICAgICAgICBjb25maXJtX2J1dHRvbl9zdHJpbmdfaWQ6IFwibmV3dGFiLXRvcHNpdGVzLWRlbGV0ZS1oaXN0b3J5LWJ1dHRvblwiLFxuICAgICAgICBjYW5jZWxfYnV0dG9uX3N0cmluZ19pZDogXCJuZXd0YWItdG9wc2l0ZXMtY2FuY2VsLWJ1dHRvblwiLFxuICAgICAgICBpY29uOiBcIm1vZGFsLWRlbGV0ZVwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHVzZXJFdmVudDogXCJESUFMT0dfT1BFTlwiLFxuICB9KSxcbiAgU2hvd0ZpbGU6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1zaG93LWZpbGVcIixcbiAgICBpY29uOiBcInNlYXJjaFwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5TSE9XX0RPV05MT0FEX0ZJTEUsXG4gICAgICBkYXRhOiB7IHVybDogc2l0ZS51cmwgfSxcbiAgICB9KSxcbiAgfSksXG4gIE9wZW5GaWxlOiBzaXRlID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtb3Blbi1maWxlXCIsXG4gICAgaWNvbjogXCJvcGVuLWZpbGVcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuT1BFTl9ET1dOTE9BRF9GSUxFLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUudXJsIH0sXG4gICAgfSksXG4gIH0pLFxuICBDb3B5RG93bmxvYWRMaW5rOiBzaXRlID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtY29weS1kb3dubG9hZC1saW5rXCIsXG4gICAgaWNvbjogXCJjb3B5XCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LkNPUFlfRE9XTkxPQURfTElOSyxcbiAgICAgIGRhdGE6IHsgdXJsOiBzaXRlLnVybCB9LFxuICAgIH0pLFxuICB9KSxcbiAgR29Ub0Rvd25sb2FkUGFnZTogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWdvLXRvLWRvd25sb2FkLXBhZ2VcIixcbiAgICBpY29uOiBcImRvd25sb2FkXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0Lk9QRU5fTElOSyxcbiAgICAgIGRhdGE6IHsgdXJsOiBzaXRlLnJlZmVycmVyIH0sXG4gICAgfSksXG4gICAgZGlzYWJsZWQ6ICFzaXRlLnJlZmVycmVyLFxuICB9KSxcbiAgUmVtb3ZlRG93bmxvYWQ6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1yZW1vdmUtZG93bmxvYWRcIixcbiAgICBpY29uOiBcImRlbGV0ZVwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5SRU1PVkVfRE9XTkxPQURfRklMRSxcbiAgICAgIGRhdGE6IHsgdXJsOiBzaXRlLnVybCB9LFxuICAgIH0pLFxuICB9KSxcbiAgUGluU3BvY1RvcFNpdGU6IChzaXRlLCBpbmRleCkgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1waW5cIixcbiAgICBpY29uOiBcInBpblwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5UT1BfU0lURVNfUElOLFxuICAgICAgZGF0YToge1xuICAgICAgICBzaXRlLFxuICAgICAgICBpbmRleCxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIlBJTlwiLFxuICB9KSxcbiAgUGluVG9wU2l0ZTogKHsgdXJsLCBzZWFyY2hUb3BTaXRlLCBsYWJlbCB9LCBpbmRleCkgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1waW5cIixcbiAgICBpY29uOiBcInBpblwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5UT1BfU0lURVNfUElOLFxuICAgICAgZGF0YToge1xuICAgICAgICBzaXRlOiB7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIC4uLihzZWFyY2hUb3BTaXRlICYmIHsgc2VhcmNoVG9wU2l0ZSwgbGFiZWwgfSksXG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiUElOXCIsXG4gIH0pLFxuICBVbnBpblRvcFNpdGU6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS11bnBpblwiLFxuICAgIGljb246IFwidW5waW5cIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuVE9QX1NJVEVTX1VOUElOLFxuICAgICAgZGF0YTogeyBzaXRlOiB7IHVybDogc2l0ZS51cmwgfSB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJVTlBJTlwiLFxuICB9KSxcbiAgU2F2ZVRvUG9ja2V0OiAoc2l0ZSwgaW5kZXgsIGV2ZW50U291cmNlKSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LXNhdmUtdG8tcG9ja2V0XCIsXG4gICAgaWNvbjogXCJwb2NrZXQtc2F2ZVwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5TQVZFX1RPX1BPQ0tFVCxcbiAgICAgIGRhdGE6IHsgc2l0ZTogeyB1cmw6IHNpdGUudXJsLCB0aXRsZTogc2l0ZS50aXRsZSB9IH0sXG4gICAgfSksXG4gICAgaW1wcmVzc2lvbjogYWMuSW1wcmVzc2lvblN0YXRzKHtcbiAgICAgIHNvdXJjZTogZXZlbnRTb3VyY2UsXG4gICAgICBwb2NrZXQ6IDAsXG4gICAgICB0aWxlczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IHNpdGUuZ3VpZCxcbiAgICAgICAgICBwb3M6IGluZGV4LFxuICAgICAgICAgIC4uLihzaXRlLnNoaW0gJiYgc2l0ZS5zaGltLnNhdmUgPyB7IHNoaW06IHNpdGUuc2hpbS5zYXZlIH0gOiB7fSksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJTQVZFX1RPX1BPQ0tFVFwiLFxuICB9KSxcbiAgRGVsZXRlRnJvbVBvY2tldDogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWRlbGV0ZS1wb2NrZXRcIixcbiAgICBpY29uOiBcInBvY2tldC1kZWxldGVcIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuREVMRVRFX0ZST01fUE9DS0VULFxuICAgICAgZGF0YTogeyBwb2NrZXRfaWQ6IHNpdGUucG9ja2V0X2lkIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIkRFTEVURV9GUk9NX1BPQ0tFVFwiLFxuICB9KSxcbiAgQXJjaGl2ZUZyb21Qb2NrZXQ6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1hcmNoaXZlLXBvY2tldFwiLFxuICAgIGljb246IFwicG9ja2V0LWFyY2hpdmVcIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuQVJDSElWRV9GUk9NX1BPQ0tFVCxcbiAgICAgIGRhdGE6IHsgcG9ja2V0X2lkOiBzaXRlLnBvY2tldF9pZCB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJBUkNISVZFX0ZST01fUE9DS0VUXCIsXG4gIH0pLFxuICBFZGl0VG9wU2l0ZTogKHNpdGUsIGluZGV4KSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWVkaXQtdG9wc2l0ZXNcIixcbiAgICBpY29uOiBcImVkaXRcIixcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IGF0LlRPUF9TSVRFU19FRElULFxuICAgICAgZGF0YTogeyBpbmRleCB9LFxuICAgIH0sXG4gIH0pLFxuICBDaGVja0Jvb2ttYXJrOiBzaXRlID0
+
XG4gICAgc2l0ZS5ib29rbWFya0d1aWRcbiAgICAgID8gTGlua01lbnVPcHRpb25zLlJlbW92ZUJvb2ttYXJrKHNpdGUpXG4gICAgICA6IExpbmtNZW51T3B0aW9ucy5BZGRCb29rbWFyayhzaXRlKSxcbiAgQ2hlY2tQaW5Ub3BTaXRlOiAoc2l0ZSwgaW5kZXgpID0
+
XG4gICAgc2l0ZS5pc1Bpbm5lZFxuICAgICAgPyBMaW5rTWVudU9wdGlvbnMuVW5waW5Ub3BTaXRlKHNpdGUpXG4gICAgICA6IExpbmtNZW51T3B0aW9ucy5QaW5Ub3BTaXRlKHNpdGUsIGluZGV4KSxcbiAgQ2hlY2tTYXZlZFRvUG9ja2V0OiAoc2l0ZSwgaW5kZXgpID0
+
XG4gICAgc2l0ZS5wb2NrZXRfaWRcbiAgICAgID8gTGlua01lbnVPcHRpb25zLkRlbGV0ZUZyb21Qb2NrZXQoc2l0ZSlcbiAgICAgIDogTGlua01lbnVPcHRpb25zLlNhdmVUb1BvY2tldChzaXRlLCBpbmRleCksXG4gIENoZWNrQm9va21hcmtPckFyY2hpdmU6IHNpdGUgPT5cbiAgICBzaXRlLnBvY2tldF9pZFxuICAgICAgPyBMaW5rTWVudU9wdGlvbnMuQXJjaGl2ZUZyb21Qb2NrZXQoc2l0ZSlcbiAgICAgIDogTGlua01lbnVPcHRpb25zLkNoZWNrQm9va21hcmsoc2l0ZSksXG4gIE9wZW5JblByaXZhdGVXaW5kb3c6IChzaXRlLCBpbmRleCwgZXZlbnRTb3VyY2UsIGlzRW5hYmxlZCkgPT5cbiAgICBpc0VuYWJsZWQgPyBfT3BlbkluUHJpdmF0ZVdpbmRvdyhzaXRlKSA6IExpbmtNZW51T3B0aW9ucy5FbXB0eUl0ZW0oKSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudUJ1dHRvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd0NvbnRleHRNZW51OiBmYWxzZSxcbiAgICAgIGNvbnRleHRNZW51S2V5Ym9hcmQ6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25VcGRhdGUgPSB0aGlzLm9uVXBkYXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICBvcGVuQ29udGV4dE1lbnUoaXNLZXlCb2FyZCwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93Q29udGV4dE1lbnU6IHRydWUsXG4gICAgICBjb250ZXh0TWVudUtleWJvYXJkOiBpc0tleUJvYXJkLFxuICAgIH0pO1xuICB9XG5cbiAgb25DbGljayhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5vcGVuQ29udGV4dE1lbnUoZmFsc2UsIGV2ZW50KTtcbiAgfVxuXG4gIG9uS2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiIFwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5vcGVuQ29udGV4dE1lbnUodHJ1ZSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIG9uVXBkYXRlKHNob3dDb250ZXh0TWVudSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uVXBkYXRlKHNob3dDb250ZXh0TWVudSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93Q29udGV4dE1lbnUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0b29sdGlwQXJncywgdG9vbHRpcCwgY2hpbGRyZW4sIHJlZkZ1bmN0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc2hvd0NvbnRleHRNZW51LCBjb250ZXh0TWVudUtleWJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcbiAgICAgICAgICBkYXRhLWwxMG4taWQ9e3Rvb2x0aXB9XG4gICAgICAgICAgZGF0YS1sMTBuLWFyZ3M9e3Rvb2x0aXBBcmdzID8gSlNPTi5zdHJpbmdpZnkodG9vbHRpcEFyZ3MpIDogbnVsbH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJjb250ZXh0LW1lbnUtYnV0dG9uIGljb25cIlxuICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vbktleURvd259XG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgIHJlZj17cmVmRnVuY3Rpb259XG4gICAgICAgIC8
+
XG4gICAgICAgIHtzaG93Q29udGV4dE1lbnVcbiAgICAgICAgICA
/
IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICAgICAgICBrZXlib2FyZEFjY2VzczogY29udGV4dE1lbnVLZXlib2FyZCxcbiAgICAgICAgICAgICAgb25VcGRhdGU6IHRoaXMub25VcGRhdGUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogbnVsbH1cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBWSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG5jb25zdCBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuXG4vLyBQZXIgYW5hbHl0aWNhbCByZXF1aXJlbWVudCwgd2Ugc2V0IHRoZSBtaW5pbWFsIGludGVyc2VjdGlvbiByYXRpbyB0b1xuLy8gMC41LCBhbmQgYW4gaW1wcmVzc2lvbiBpcyBpZGVudGlmaWVkIHdoZW4gdGhlIHdyYXBwZWQgaXRlbSBoYXMgYXQgbGVhc3Rcbi8vIDUwJSB2aXNpYmlsaXR5LlxuLy9cbi8vIFRoaXMgY29uc3RhbnQgaXMgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdFxuZXhwb3J0IGNvbnN0IElOVEVSU0VDVElPTl9SQVRJTyA9IDAuNTtcblxuLyoqXG4gKiBJbXByZXNzaW9uIHdyYXBwZXIgZm9yIERpc2NvdmVyeSBTdHJlYW0gcmVsYXRlZCBSZWFjdCBjb21wb25lbnRzLlxuICpcbiAqIEl0IG1ha3NlcyB1c2Ugb2YgdGhlIEludGVyc2VjdGlvbiBPYnNlcnZlciBBUEkgdG8gZGV0ZWN0IHRoZSB2aXNpYmlsaXR5LFxuICogYW5kIHJlbGllcyBvbiBwYWdlIHZpc2liaWxpdHkgdG8gZW5zdXJlIHRoZSBpbXByZXNzaW9uIGlzIHJlcG9ydGVkXG4gKiBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB2aXNpYmxlIG9uIHRoZSBwYWdlLlxuICpcbiAqIE5vdGU6XG4gKiAgICogVGhpcyB3cmFwcGVyIHVzZWQgdG8gYmUgdXNlZCBlaXRoZXIgYXQgdGhlIGluZGl2aWR1YWwgY2FyZCBsZXZlbCxcbiAqICAgICBvciBieSB0aGUgY2FyZCBjb250YWluZXIgY29tcG9uZW50cy5cbiAqICAgICBJdCBpcyBub3cgb25seSB1c2VkIGZvciBpbmRpdmlkdWFsIGNhcmQgbGV2ZWwuXG4gKiAgICogRWFjaCBpbXByZXNzaW9uIHdpbGwgYmUgc2VudCBvbmx5IG9uY2UgYXMgc29vbiBhcyB0aGUgZGVzaXJlZFxuICogICAgIHZpc2liaWxpdHkgaXMgZGV0ZWN0ZWRcbiAqICAgKiBCYXRjaGluZyBpcyBub3QgeWV0IGltcGxlbWVudGVkLCBoZW5jZSBpdCBtaWdodCBzZW5kIG11bHRpcGxlXG4gKiAgICAgaW1wcmVzc2lvbiBwaW5ncyBzZXBhcmF0ZWx5XG4gKi9cbmV4cG9ydCBjbGFzcyBJbXByZXNzaW9uU3RhdHMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGdpdmVuIGNhcmRzIGFyZSB0aGUgc2FtZSBhcyB0aG9zZSBpbiB0aGUgbGFzdCBpbXByZXNzaW9uIHBpbmcuXG4gIC8vIElmIHNvLCBpdCBzaG91bGQgbm90IHNlbmQgdGhlIHNhbWUgaW1wcmVzc2lvbiBwaW5nIGFnYWluLlxuICBfbmVlZHNJbXByZXNzaW9uU3RhdHMoY2FyZHMpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzIHx8XG4gICAgICB0aGlzLmltcHJlc3Npb25DYXJkR3VpZHMubGVuZ3RoICE9PSBjYXJkcy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjYXJkc1tpXS5pZCAhPT0gdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9kaXNwYXRjaEltcHJlc3Npb25TdGF0cygpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNhcmRzID0gcHJvcHMucm93cztcblxuICAgIGlmICh0aGlzLnByb3BzLmZsaWdodElkKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Pbmx5VG9NYWluKHtcbiAgICAgICAgICB0eXBlOiBhdC5ESVNDT1ZFUllfU1RSRUFNX1NQT0NfSU1QUkVTU0lPTixcbiAgICAgICAgICBkYXRhOiB7IGZsaWdodElkOiB0aGlzLnByb3BzLmZsaWdodElkIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9uZWVkc0ltcHJlc3Npb25TdGF0cyhjYXJkcykpIHtcbiAgICAgIHByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5EaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgdGlsZXM6IGNhcmRzLm1hcChsaW5rID0
+
ICh7XG4gICAgICAgICAgICBpZDogbGluay5pZCxcbiAgICAgICAgICAgIHBvczogbGluay5wb3MsXG4gICAgICAgICAgICAuLi4obGluay5zaGltID8geyBzaGltOiBsaW5rLnNoaW0gfSA6IHt9KSxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzID0gY2FyZHMubWFwKGxpbmsgPT4gbGluay5pZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGdpdmVuIGNhcmRzIGFyZSB0aGUgc2FtZSBhcyB0aG9zZSBpbiB0aGUgbGFzdCBsb2FkZWQgY29udGVudCBwaW5nLlxuICAvLyBJZiBzbywgaXQgc2hvdWxkIG5vdCBzZW5kIHRoZSBzYW1lIGxvYWRlZCBjb250ZW50IHBpbmcgYWdhaW4uXG4gIF9uZWVkc0xvYWRlZENvbnRlbnQoY2FyZHMpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5sb2FkZWRDb250ZW50R3VpZHMgfHxcbiAgICAgIHRoaXMubG9hZGVkQ29udGVudEd1aWRzLmxlbmd0aCAhPT0gY2FyZHMubGVuZ3RoXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY2FyZHNbaV0uaWQgIT09IHRoaXMubG9hZGVkQ29udGVudEd1aWRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9kaXNwYXRjaExvYWRlZENvbnRlbnQoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCBjYXJkcyA9IHByb3BzLnJvd3M7XG5cbiAgICBpZiAodGhpcy5fbmVlZHNMb2FkZWRDb250ZW50KGNhcmRzKSkge1xuICAgICAgcHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkRpc2NvdmVyeVN0cmVhbUxvYWRlZENvbnRlbnQoe1xuICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgdGlsZXM6IGNhcmRzLm1hcChsaW5rID0
+
ICh7IGlkOiBsaW5rLmlkLCBwb3M6IGxpbmsucG9zIH0pKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLmxvYWRlZENvbnRlbnRHdWlkcyA9IGNhcmRzLm1hcChsaW5rID0
+
IGxpbmsuaWQpO1xuICAgIH1cbiAgfVxuXG4gIHNldEltcHJlc3Npb25PYnNlcnZlck9yQWRkTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGlmICghcHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFKSB7XG4gICAgICAvLyBTZW5kIHRoZSBsb2FkZWQgY29udGVudCBwaW5nIG9uY2UgdGhlIHBhZ2UgaXMgdmlzaWJsZS5cbiAgICAgIHRoaXMuX2Rpc3BhdGNoTG9hZGVkQ29udGVudCgpO1xuICAgICAgdGhpcy5zZXRJbXByZXNzaW9uT2JzZXJ2ZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugc2hvdWxkIG9ubHkgZXZlciBzZW5kIHRoZSBsYXRlc3QgaW1wcmVzc2lvbiBzdGF0cyBwaW5nLCBzbyByZW1vdmUgYW55XG4gICAgICAvLyBvbGRlciBsaXN0ZW5lcnMuXG4gICAgICBpZiAodGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlKSB7XG4gICAgICAgIHByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0
+
IHtcbiAgICAgICAgaWYgKHByb3BzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gVklTSUJMRSkge1xuICAgICAgICAgIC8vIFNlbmQgdGhlIGxvYWRlZCBjb250ZW50IHBpbmcgb25jZSB0aGUgcGFnZSBpcyB2aXNpYmxlLlxuICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoTG9hZGVkQ29udGVudCgpO1xuICAgICAgICAgIHRoaXMuc2V0SW1wcmVzc2lvbk9ic2VydmVyKCk7XG4gICAgICAgICAgcHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhbiBpbXByZXNzaW9uIG9ic2VydmVyIGZvciB0aGUgd3JhcHBlZCBjb21wb25lbnQuIEl0IG1ha2VzIHVzZSBvZlxuICAgKiB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyIEFQSSB0byBkZXRlY3QgaWYgdGhlIHdyYXBwZWQgY29tcG9uZW50IGlzXG4gICAqIHZpc2libGUgd2l0aCBhIGRlc2lyZWQgcmF0aW8sIGFuZCBvbmx5IHNlbmRzIGltcHJlc3Npb24gaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKlxuICAgKiBTZWUgbW9yZSBkZXRhaWxzIGFib3V0IEludGVyc2VjdGlvbiBPYnNlcnZlciBBUEkgYXQ6XG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25fT2JzZXJ2ZXJfQVBJXG4gICAqL1xuICBzZXRJbXByZXNzaW9uT2JzZXJ2ZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGlmICghcHJvcHMucm93cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVJbnRlcnNlY3QgPSBlbnRyaWVzID0
+
IHtcbiAgICAgIGlmIChcbiAgICAgICAgZW50cmllcy5zb21lKFxuICAgICAgICAgIGVudHJ5ID0
+
XG4gICAgICAgICAgICBlbnRyeS5pc0ludGVyc2VjdGluZyAmJlxuICAgICAgICAgICAgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPj0gSU5URVJTRUNUSU9OX1JBVElPXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEltcHJlc3Npb25TdGF0cygpO1xuICAgICAgICB0aGlzLmltcHJlc3Npb25PYnNlcnZlci51bm9ic2VydmUodGhpcy5yZWZzLmltcHJlc3Npb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvcHRpb25zID0geyB0aHJlc2hvbGQ6IElOVEVSU0VDVElPTl9SQVRJTyB9O1xuICAgIHRoaXMuaW1wcmVzc2lvbk9ic2VydmVyID0gbmV3IHByb3BzLkludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgdGhpcy5faGFuZGxlSW50ZXJzZWN0LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgdGhpcy5pbXByZXNzaW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnJlZnMuaW1wcmVzc2lvbik7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5yb3dzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRJbXByZXNzaW9uT2JzZXJ2ZXJPckFkZExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX2hhbmRsZUludGVyc2VjdCAmJiB0aGlzLmltcHJlc3Npb25PYnNlcnZlcikge1xuICAgICAgdGhpcy5pbXByZXNzaW9uT2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMucmVmcy5pbXByZXNzaW9uKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiByZWY9e1wiaW1wcmVzc2lvblwifSBjbGFzc05hbWU9XCJpbXByZXNzaW9uLW9ic2VydmVyXCI
+
XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5JbXByZXNzaW9uU3RhdHMuZGVmYXVsdFByb3BzID0ge1xuICBJbnRlcnNlY3Rpb25PYnNlcnZlcjogZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyLFxuICBkb2N1bWVudDogZ2xvYmFsLmRvY3VtZW50LFxuICByb3dzOiBbXSxcbiAgc291cmNlOiBcIlwiLFxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIFNhZmVBbmNob3IgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgLy8gVXNlIGRpc3BhdGNoIGluc3RlYWQgb2Ygbm9ybWFsIGxpbmsgY2xpY2sgYmVoYXZpb3IgdG8gaW5jbHVkZSByZWZlcnJlclxuICAgIGlmICh0aGlzLnByb3BzLmRpc3BhdGNoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgeyBhbHRLZXksIGJ1dHRvbiwgY3RybEtleSwgbWV0YUtleSwgc2hpZnRLZXkgfSA9IGV2ZW50O1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuT1BFTl9MSU5LLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGV2ZW50OiB7IGFsdEtleSwgYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5LCBzaGlmdEtleSB9LFxuICAgICAgICAgICAgcmVmZXJyZXI6IFwiaHR0cHM6Ly9nZXRwb2NrZXQuY29tL3JlY29tbWVuZGF0aW9uc1wiLFxuICAgICAgICAgICAgLy8gVXNlIHRoZSBhbmNob3IncyB1cmwsIHdoaWNoIGNvdWxkIGhhdmUgYmVlbiBjbGVhbmVkIHVwXG4gICAgICAgICAgICB1cmw6IGV2ZW50LmN1cnJlbnRUYXJnZXQuaHJlZixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQcm9wYWdhdGUgZXZlbnQgaWYgdGhlcmUncyBhIGhhbmRsZXJcbiAgICBpZiAodGhpcy5wcm9wcy5vbkxpbmtDbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkxpbmtDbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgc2FmZVVSSSh1cmwpIHtcbiAgICBsZXQgcHJvdG9jb2wgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm90b2NvbCA9IG5ldyBVUkwodXJsKS5wcm90b2NvbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0FsbG93ZWQgPSBbXCJodHRwOlwiLCBcImh0dHBzOlwiXS5pbmNsdWRlcyhwcm90b2NvbCk7XG4gICAgaWYgKCFpc0FsbG93ZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgJHt1cmx9IGlzIG5vdCBhbGxvd2VkIGZvciBhbmNob3IgdGFyZ2V0cy5gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHVybCwgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8YSBocmVmPXt0aGlzLnNhZmVVUkkodXJsKX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uQ2xpY2s9e3RoaXMub25DbGlja30
+
XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGNhcmRDb250ZXh0VHlwZXMgfSBmcm9tIFwiLi4vLi4vQ2FyZC90eXBlcy5qc1wiO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSBcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLy8gQW5pbWF0aW9uIHRpbWUgaXMgbWlycm9yZWQgaW4gRFNDb250ZXh0Rm9vdGVyLnNjc3NcbmNvbnN0IEFOSU1BVElPTl9EVVJBVElPTiA9IDMwMDA7XG5cbmV4cG9ydCBjb25zdCBTdGF0dXNNZXNzYWdlID0gKHsgaWNvbiwgZmx1ZW50SUQgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cInN0YXR1cy1tZXNzYWdlXCI
+
XG4gICAgPHNwYW5cbiAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcbiAgICAgIGNsYXNzTmFtZT17YHN0b3J5LWJhZGdlLWljb24gaWNvbiBpY29uLSR7aWNvbn1gfVxuICAgIC8
+
XG4gICAgPGRpdiBjbGFzc05hbWU9XCJzdG9yeS1jb250ZXh0LWxhYmVsXCIgZGF0YS1sMTBuLWlkPXtmbHVlbnRJRH0gLz5cbiAgPC9kaXY
+
XG4pO1xuXG5leHBvcnQgY2xhc3MgRFNDb250ZXh0Rm9vdGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICAvLyBkaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzIGlzIGJhc2VkIG9uIHByZWYgYGJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZGlzY292ZXJ5c3RyZWFtLmVuZ2FnZW1lbnRMYWJlbEVuYWJsZWRgXG4gICAgY29uc3Qge1xuICAgICAgY29udGV4dCxcbiAgICAgIGNvbnRleHRfdHlwZSxcbiAgICAgIGVuZ2FnZW1lbnQsXG4gICAgICBkaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaWNvbiwgZmx1ZW50SUQgfSA9IGNhcmRDb250ZXh0VHlwZXNbY29udGV4dF90eXBlXSB8fCB7fTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0b3J5LWZvb3RlclwiPlxuICAgICAgICB7Y29udGV4dCAmJiA8cCBjbGFzc05hbWU9XCJzdG9yeS1zcG9uc29yZWQtbGFiZWwgY2xhbXBcIj57Y29udGV4dH08L3A
+
fVxuICAgICAgICA8VHJhbnNpdGlvbkdyb3VwIGNvbXBvbmVudD17bnVsbH0
+
XG4gICAgICAgICAgeyFjb250ZXh0ICYmXG4gICAgICAgICAgICAoY29udGV4dF90eXBlIHx8IChkaXNwbGF5X2VuZ2FnZW1lbnRfbGFiZWxzICYmIGVuZ2FnZW1lbnQpKSAmJiAoXG4gICAgICAgICAgICAgIDxDU1NUcmFuc2l0aW9uXG4gICAgICAgICAgICAgICAga2V5PXtmbHVlbnRJRH1cbiAgICAgICAgICAgICAgICB0aW1lb3V0PXtBTklNQVRJT05fRFVSQVRJT059XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcz1cInN0b3J5LWFuaW1hdGVcIlxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAge2VuZ2FnZW1lbnQgJiYgIWNvbnRleHRfdHlwZSA
/
IChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Rvcnktdmlldy1jb3VudFwiPntlbmdhZ2VtZW50fTwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8U3RhdHVzTWVzc2FnZSBpY29uPXtpY29ufSBmbHVlbnRJRD17Zmx1ZW50SUR9IC8
+
XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9UcmFuc2l0aW9uR3JvdXA
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5leHBvcnQgY29uc3QgY2FyZENvbnRleHRUeXBlcyA9IHtcbiAgaGlzdG9yeToge1xuICAgIGZsdWVudElEOiBcIm5ld3RhYi1sYWJlbC12aXNpdGVkXCIsXG4gICAgaWNvbjogXCJoaXN0b3J5LWl0ZW1cIixcbiAgfSxcbiAgcmVtb3ZlZEJvb2ttYXJrOiB7XG4gICAgZmx1ZW50SUQ6IFwibmV3dGFiLWxhYmVsLXJlbW92ZWQtYm9va21hcmtcIixcbiAgICBpY29uOiBcImJvb2ttYXJrLXJlbW92ZWRcIixcbiAgfSxcbiAgYm9va21hcms6IHtcbiAgICBmbHVlbnRJRDogXCJuZXd0YWItbGFiZWwtYm9va21hcmtlZFwiLFxuICAgIGljb246IFwiYm9va21hcmstYWRkZWRcIixcbiAgfSxcbiAgdHJlbmRpbmc6IHtcbiAgICBmbHVlbnRJRDogXCJuZXd0YWItbGFiZWwtcmVjb21tZW5kZWRcIixcbiAgICBpY29uOiBcInRyZW5kaW5nXCIsXG4gIH0sXG4gIHBvY2tldDoge1xuICAgIGZsdWVudElEOiBcIm5ld3RhYi1sYWJlbC1zYXZlZFwiLFxuICAgIGljb246IFwicG9ja2V0XCIsXG4gIH0sXG4gIGRvd25sb2FkOiB7XG4gICAgZmx1ZW50SUQ6IFwibmV3dGFiLWxhYmVsLWRvd25sb2FkXCIsXG4gICAgaWNvbjogXCJkb3dubG9hZFwiLFxuICB9LFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uR3JvdXA7IiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgRFNFbXB0eVN0YXRlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25SZXNldCA9IHRoaXMub25SZXNldC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgfVxuXG4gIG9uUmVzZXQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2ggJiYgdGhpcy5wcm9wcy5mZWVkKSB7XG4gICAgICBjb25zdCB7IGZlZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IHVybCB9ID0gZmVlZDtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBhdC5ESVNDT1ZFUllfU1RSRUFNX0ZFRURfVVBEQVRFLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZmVlZDoge1xuICAgICAgICAgICAgLi4uZmVlZCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgLi4uZmVlZC5kYXRhLFxuICAgICAgICAgICAgICBzdGF0dXM6IFwid2FpdGluZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVybCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2FpdGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB3YWl0aW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9LCAzMDApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuRElTQ09WRVJZX1NUUkVBTV9SRVRSWV9GRUVELCBkYXRhOiB7IGZlZWQgfSB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJCdXR0b24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSBcIndhaXRpbmdcIiB8fCB0aGlzLnN0YXRlLndhaXRpbmcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0cnktYWdhaW4tYnV0dG9uIHdhaXRpbmdcIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWxvYWRpbmdcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9XCJ0cnktYWdhaW4tYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2V0fVxuICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItZGlzY292ZXJ5LWVtcHR5LXNlY3Rpb24tdG9wc3Rvcmllcy10cnktYWdhaW4tYnV0dG9uXCJcbiAgICAgIC8
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclN0YXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gXCJ3YWl0aW5nXCIgfHwgdGhpcy5wcm9wcy5zdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICA8aDIgZGF0YS1sMTBuLWlkPVwibmV3dGFiLWRpc2NvdmVyeS1lbXB0eS1zZWN0aW9uLXRvcHN0b3JpZXMtdGltZWQtb3V0XCIgLz5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJCdXR0b24oKX1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGgyIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWhlYWRlclwiIC8
+
XG4gICAgICAgIDxwIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWNvbnRlbnRcIiAvPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb24tZW1wdHktc3RhdGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbXB0eS1zdGF0ZS1tZXNzYWdlXCI
+
e3RoaXMucmVuZGVyU3RhdGUoKX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0Vycm9yQm91bmRhcnkvRXJyb3JCb3VuZGFyeVwiO1xuaW1wb3J0IHsgRmx1ZW50T3JUZXh0IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRmx1ZW50T3JUZXh0L0ZsdWVudE9yVGV4dFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2VjdGlvbk1lbnUgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9TZWN0aW9uTWVudS9TZWN0aW9uTWVudVwiO1xuaW1wb3J0IHsgU2VjdGlvbk1lbnVPcHRpb25zIH0gZnJvbSBcImNvbnRlbnQtc3JjL2xpYi9zZWN0aW9uLW1lbnUtb3B0aW9uc1wiO1xuaW1wb3J0IHsgQ29udGV4dE1lbnVCdXR0b24gfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Db250ZXh0TWVudS9Db250ZXh0TWVudUJ1dHRvblwiO1xuXG5jb25zdCBWSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG5jb25zdCBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29sbGFwc2libGVTZWN0aW9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25Cb2R5TW91bnQgPSB0aGlzLm9uQm9keU1vdW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkhlYWRlckNsaWNrID0gdGhpcy5vbkhlYWRlckNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbktleVByZXNzID0gdGhpcy5vbktleVByZXNzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblRyYW5zaXRpb25FbmQgPSB0aGlzLm9uVHJhbnNpdGlvbkVuZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZW5hYmxlT3JEaXNhYmxlQW5pbWF0aW9uID0gdGhpcy5lbmFibGVPckRpc2FibGVBbmltYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlRW50ZXIgPSB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlRW50ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlTGVhdmUgPSB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlTGVhdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTWVudVVwZGF0ZSA9IHRoaXMub25NZW51VXBkYXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVuYWJsZUFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgIGlzQW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIG1lbnVCdXR0b25Ib3ZlcjogZmFsc2UsXG4gICAgICBzaG93Q29udGV4dE1lbnU6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5zZXRDb250ZXh0TWVudUJ1dHRvblJlZiA9IHRoaXMuc2V0Q29udGV4dE1lbnVCdXR0b25SZWYuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgIHRoaXMuZW5hYmxlT3JEaXNhYmxlQW5pbWF0aW9uXG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWJvdXQgdG8gZ28gZnJvbSBleHBhbmRlZCB0byBjb2xsYXBzZWRcbiAgICBpZiAoIXRoaXMucHJvcHMuY29sbGFwc2VkICYmIG5leHRQcm9wcy5jb2xsYXBzZWQpIHtcbiAgICAgIC8vIFRoaXMgbmV4dCBsaW5lIGZvcmNlcyBhIGxheW91dCBmbHVzaCBvZiB0aGUgc2VjdGlvbiBib2R5LCB3aGljaCBoYXMgYVxuICAgICAgLy8gbWF4LWhlaWdodCBzdHlsZSBzZXQsIHNvIHRoYXQgdGhlIHVwY29taW5nIGNvbGxhcHNlIGFuaW1hdGlvbiBjYW5cbiAgICAgIC8vIGFuaW1hdGUgZnJvbSB0aGF0IGhlaWdodCB0byB0aGUgY29sbGFwc2VkIGhlaWdodC4gV2l0aG91dCB0aGlzLCB0aGVcbiAgICAgIC8vIHVwZGF0ZSBpcyBjb2FsZXNjZWQgYW5kIHRoZXJlJ3Mgbm8gYW5pbWF0aW9uIGZyb20gbm8tbWF4LWhlaWdodCB0byAwLlxuICAgICAgdGhpcy5zZWN0aW9uQm9keS5zY3JvbGxIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgfVxuICB9XG5cbiAgc2V0Q29udGV4dE1lbnVCdXR0b25SZWYoZWxlbWVudCkge1xuICAgIHRoaXMuY29udGV4dE1lbnVCdXR0b25SZWYgPSBlbGVtZW50O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZi5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJtb3VzZWVudGVyXCIsXG4gICAgICB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlRW50ZXJcbiAgICApO1xuICAgIHRoaXMuY29udGV4dE1lbnVCdXR0b25SZWYuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwibW91c2VsZWF2ZVwiLFxuICAgICAgdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUxlYXZlXG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgdGhpcy5lbmFibGVPckRpc2FibGVBbmltYXRpb25cbiAgICApO1xuICAgIHRoaXMuY29udGV4dE1lbnVCdXR0b25SZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwibW91c2VlbnRlclwiLFxuICAgICAgdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUVudGVyXG4gICAgKTtcbiAgICB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcIm1vdXNlbGVhdmVcIixcbiAgICAgIHRoaXMub25NZW51QnV0dG9uTW91c2VMZWF2ZVxuICAgICk7XG4gIH1cblxuICBlbmFibGVPckRpc2FibGVBbmltYXRpb24oKSB7XG4gICAgLy8gT25seSBhbmltYXRlIHRoZSBjb2xsYXBzZS9leHBhbmQgZm9yIHZpc2libGUgdGFicy5cbiAgICBjb25zdCB2aXNpYmxlID0gdGhpcy5wcm9wcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEU7XG4gICAgaWYgKHRoaXMuc3RhdGUuZW5hYmxlQW5pbWF0aW9uICE9PSB2aXNpYmxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZW5hYmxlQW5pbWF0aW9uOiB2aXNpYmxlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uQm9keU1vdW50KG5vZGUpIHtcbiAgICB0aGlzLnNlY3Rpb25Cb2R5ID0gbm9kZTtcbiAgfVxuXG4gIG9uSGVhZGVyQ2xpY2soKSB7XG4gICAgLy8gSWYgdGhpcy5zZWN0aW9uQm9keSBpcyB1bnNldCwgaXQgbWVhbnMgdGhhdCB3ZSdyZSBpbiBzb21lIHNvcnQgb2YgZXJyb3JcbiAgICAvLyBzdGF0ZSwgcHJvYmFibHkgZGlzcGxheWluZyB0aGUgZXJyb3IgZmFsbGJhY2ssIHNvIHdlIHdvbid0IGJlIGFibGUgdG9cbiAgICAvLyBjb21wdXRlIHRoZSBoZWlnaHQsIGFuZCB3ZSBkb24ndCB3YW50IHRvIHBlcnNpc3QgdGhlIHByZWZlcmVuY2UuXG4gICAgLy8gSWYgcHJvcHMuY29sbGFwc2VkIGlzIHVuZGVmaW5lZCBoYW5kbGVyIHNob3VsZG4ndCBkbyBhbnl0aGluZy5cbiAgICBpZiAoIXRoaXMuc2VjdGlvbkJvZHkgfHwgdGhpcy5wcm9wcy5jb2xsYXBzZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIGJvZHkgc28gbWF4LWhlaWdodCB0cmFuc2l0aW9ucyBjYW4gd29ya1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNBbmltYXRpbmc6IHRydWUsXG4gICAgICBtYXhIZWlnaHQ6IGAke3RoaXMuX2dldFNlY3Rpb25Cb2R5SGVpZ2h0KCl9cHhgLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgYWN0aW9uLCB1c2VyRXZlbnQgfSA9IFNlY3Rpb25NZW51T3B0aW9ucy5DaGVja0NvbGxhcHNlZCh0aGlzLnByb3BzKTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgIGV2ZW50OiB1c2VyRXZlbnQsXG4gICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy5zb3VyY2UsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBvbktleVByZXNzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm9uSGVhZGVyQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0U2VjdGlvbkJvZHlIZWlnaHQoKSB7XG4gICAgY29uc3QgZGl2ID0gdGhpcy5zZWN0aW9uQm9keTtcbiAgICBpZiAoZGl2LnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBJZiB0aGUgZGl2IGlzbid0IGRpc3BsYXllZCwgd2UgY2FuJ3QgZ2V0IGl0J3MgaGVpZ2h0LiBTbyB3ZSBkaXNwbGF5IGl0XG4gICAgICAvLyB0byBnZXQgdGhlIGhlaWdodCAoaXQgZG9lc24ndCBzaG93IHVwIGJlY2F1c2UgbWF4LWhlaWdodCBpcyBzZXQgdG8gMHB4XG4gICAgICAvLyBpbiBDU1MpLiBXZSBkb24ndCB1bmRvIHRoaXMgYmVjYXVzZSB3ZSBhcmUgYWJvdXQgdG8gZXhwYW5kIHRoZSBzZWN0aW9uLlxuICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxuICAgIHJldHVybiBkaXYuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgb25UcmFuc2l0aW9uRW5kKGV2ZW50KSB7XG4gICAgLy8gT25seSB1cGRhdGUgdGhlIGFuaW1hdGluZyBzdGF0ZSBmb3Igb3VyIG93biB0cmFuc2l0aW9uIChub3QgYSBjaGlsZCdzKVxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0FuaW1hdGluZzogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySWNvbigpIHtcbiAgICBjb25zdCB7IGljb24gfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGljb24gJiYgaWNvbi5zdGFydHNXaXRoKFwibW96LWV4dGVuc2lvbjovL1wiKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tc21hbGwtc3BhY2VyXCJcbiAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7aWNvbn0nKWAgfX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8c3BhblxuICAgICAgICBjbGFzc05hbWU9e2BpY29uIGljb24tc21hbGwtc3BhY2VyIGljb24tJHtpY29uIHx8IFwid2ViZXh0ZW5zaW9uXCJ9YH1cbiAgICAgIC8
+
XG4gICAgKTtcbiAgfVxuXG4gIG9uTWVudUJ1dHRvbk1vdXNlRW50ZXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1lbnVCdXR0b25Ib3ZlcjogdHJ1ZSB9KTtcbiAgfVxuXG4gIG9uTWVudUJ1dHRvbk1vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1lbnVCdXR0b25Ib3ZlcjogZmFsc2UgfSk7XG4gIH1cblxuICBvbk1lbnVVcGRhdGUoc2hvd0NvbnRleHRNZW51KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dDb250ZXh0TWVudSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpc0NvbGxhcHNpYmxlID0gdGhpcy5wcm9wcy5jb2xsYXBzZWQgIT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7XG4gICAgICBlbmFibGVBbmltYXRpb24sXG4gICAgICBpc0FuaW1hdGluZyxcbiAgICAgIG1heEhlaWdodCxcbiAgICAgIG1lbnVCdXR0b25Ib3ZlcixcbiAgICAgIHNob3dDb250ZXh0TWVudSxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIGV2ZW50U291cmNlLFxuICAgICAgY29sbGFwc2VkLFxuICAgICAgbGVhcm5Nb3JlLFxuICAgICAgdGl0bGUsXG4gICAgICBleHRyYU1lbnVPcHRpb25zLFxuICAgICAgc2hvd1ByZWZOYW1lLFxuICAgICAgcHJpdmFjeU5vdGljZVVSTCxcbiAgICAgIGRpc3BhdGNoLFxuICAgICAgaXNGaXhlZCxcbiAgICAgIGlzRmlyc3QsXG4gICAgICBpc0xhc3QsXG4gICAgICBpc1dlYkV4dGVuc2lvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBhY3RpdmUgPSBtZW51QnV0dG9uSG92ZXIgfHwgc2hvd0NvbnRleHRNZW51O1xuICAgIGxldCBib2R5U3R5bGU7XG4gICAgaWYgKGlzQW5pbWF0aW5nICYmICFjb2xsYXBzZWQpIHtcbiAgICAgIGJvZHlTdHlsZSA9IHsgbWF4SGVpZ2h0IH07XG4gICAgfSBlbHNlIGlmICghaXNBbmltYXRpbmcgJiYgY29sbGFwc2VkKSB7XG4gICAgICBib2R5U3R5bGUgPSB7IGRpc3BsYXk6IFwibm9uZVwiIH07XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvblxuICAgICAgICBjbGFzc05hbWU9e2Bjb2xsYXBzaWJsZS1zZWN0aW9uICR7dGhpcy5wcm9wcy5jbGFzc05hbWV9JHtcbiAgICAgICAgICBlbmFibGVBbmltYXRpb24gPyBcIiBhbmltYXRpb24tZW5hYmxlZFwiIDogXCJcIlxuICAgICAgICB9JHtjb2xsYXBzZWQgPyBcIiBjb2xsYXBzZWRcIiA6IFwiXCJ9JHthY3RpdmUgPyBcIiBhY3RpdmVcIiA6IFwiXCJ9YH1cbiAgICAgICAgYXJpYS1leHBhbmRlZD17IWNvbGxhcHNlZH1cbiAgICAgICAgLy8gTm90ZTogZGF0YS1zZWN0aW9uLWlkIGlzIHVzZWQgZm9yIHdlYiBleHRlbnNpb24gYXBpIHRlc3RzIGluIG1vemlsbGEgY2VudHJhbFxuICAgICAgICBkYXRhLXNlY3Rpb24taWQ9e2lkfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb24tdG9wLWJhclwiPlxuICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJzZWN0aW9uLXRpdGxlXCI
+
XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjbGljay10YXJnZXQtY29udGFpbmVyXCI
+
XG4gICAgICAgICAgICAgIHsvKiBDbGljay10YXJnZXRzIHRoYXQgdG9nZ2xlIGEgY29sbGFwc2libGUgc2VjdGlvbiBzaG91bGQgaGF2ZSBhbiBhcmlhLWV4cGFuZGVkIGF0dHJpYnV0ZTsgc2VlIGJ1ZyAxNTUzMjM0ICovfVxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNsaWNrLXRhcmdldFwiXG4gICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9XCIwXCJcbiAgICAgICAgICAgICAgICBvbktleVByZXNzPXt0aGlzLm9uS2V5UHJlc3N9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkhlYWRlckNsaWNrfVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVySWNvbigpfVxuICAgICAgICAgICAgICAgIDxGbHVlbnRPclRleHQgbWVzc2FnZT17dGl0bGV9IC8
+
XG4gICAgICAgICAgICAgICAge2lzQ29sbGFwc2libGUgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJuZXd0YWItc2VjdGlvbi1leHBhbmQtc2VjdGlvbi1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwibmV3dGFiLXNlY3Rpb24tY29sbGFwc2Utc2VjdGlvbi1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgY29sbGFwc2libGUtYXJyb3cgaWNvbiAke1xuICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcImljb24tYXJyb3doZWFkLWZvcndhcmQtc21hbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcImljb24tYXJyb3doZWFkLWRvd24tc21hbGxcIlxuICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsZWFybi1tb3JlLWxpbmstd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIHtsZWFybk1vcmUgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGVhcm4tbW9yZS1saW5rXCI
+
XG4gICAgICAgICAgICAgICAgICAgIDxGbHVlbnRPclRleHQgbWVzc2FnZT17bGVhcm5Nb3JlLmxpbmsubWVzc2FnZX0
+
XG4gICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17bGVhcm5Nb3JlLmxpbmsuaHJlZn0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9GbHVlbnRPclRleHQ
+
XG4gICAgICAgICAgICAgICAgICA8L3NwYW4
+
XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvaDM
+
XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxDb250ZXh0TWVudUJ1dHRvblxuICAgICAgICAgICAgICB0b29sdGlwPVwibmV3dGFiLW1lbnUtc2VjdGlvbi10b29sdGlwXCJcbiAgICAgICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51VXBkYXRlfVxuICAgICAgICAgICAgICByZWZGdW5jdGlvbj17dGhpcy5zZXRDb250ZXh0TWVudUJ1dHRvblJlZn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFNlY3Rpb25NZW51XG4gICAgICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgICAgIGV4dHJhT3B0aW9ucz17ZXh0cmFNZW51T3B0aW9uc31cbiAgICAgICAgICAgICAgICBldmVudFNvdXJjZT17ZXZlbnRTb3VyY2V9XG4gICAgICAgICAgICAgICAgc2hvd1ByZWZOYW1lPXtzaG93UHJlZk5hbWV9XG4gICAgICAgICAgICAgICAgcHJpdmFjeU5vdGljZVVSTD17cHJpdmFjeU5vdGljZVVSTH1cbiAgICAgICAgICAgICAgICBjb2xsYXBzZWQ9e2NvbGxhcHNlZH1cbiAgICAgICAgICAgICAgICBpc0ZpeGVkPXtpc0ZpeGVkfVxuICAgICAgICAgICAgICAgIGlzRmlyc3Q9e2lzRmlyc3R9XG4gICAgICAgICAgICAgICAgaXNMYXN0PXtpc0xhc3R9XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgICAgIGlzV2ViRXh0ZW5zaW9uPXtpc1dlYkV4dGVuc2lvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29udGV4dE1lbnVCdXR0b24
+
XG4gICAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8RXJyb3JCb3VuZGFyeSBjbGFzc05hbWU9XCJzZWN0aW9uLWJvZHktZmFsbGJhY2tcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BzZWN0aW9uLWJvZHkke2lzQW5pbWF0aW5nID8gXCIgYW5pbWF0aW5nXCIgOiBcIlwifWB9XG4gICAgICAgICAgICBvblRyYW5zaXRpb25FbmQ9e3RoaXMub25UcmFuc2l0aW9uRW5kfVxuICAgICAgICAgICAgcmVmPXt0aGlzLm9uQm9keU1vdW50fVxuICAgICAgICAgICAgc3R5bGU9e2JvZHlTdHlsZX1cbiAgICAgICAgICA
+
XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cbn1cblxuQ29sbGFwc2libGVTZWN0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCB8fCB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogKCkgPT4ge30sXG4gICAgdmlzaWJpbGl0eVN0YXRlOiBcImhpZGRlblwiLFxuICB9LFxuICBQcmVmczogeyB2YWx1ZXM6IHt9IH0sXG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgQTExeUxpbmtCdXR0b24gfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9BMTF5TGlua0J1dHRvbi9BMTF5TGlua0J1dHRvblwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgRXJyb3JCb3VuZGFyeUZhbGxiYWNrIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMud2luZG93T2JqID0gdGhpcy5wcm9wcy53aW5kb3dPYmogfHwgd2luZG93O1xuICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbmNlIHdlIG9ubHkgZ2V0IGhlcmUgaWYgcGFydCBvZiB0aGUgcGFnZSBoYXMgY3Jhc2hlZCwgZG8gYVxuICAgKiBmb3JjZWQgcmVsb2FkIHRvIGdpdmUgdXMgdGhlIGJlc3QgY2hhbmNlIGF0IHJlY292ZXJpbmcuXG4gICAqL1xuICBvbkNsaWNrKCkge1xuICAgIHRoaXMud2luZG93T2JqLmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBkZWZhdWx0Q2xhc3MgPSBcImFzLWVycm9yLWZhbGxiYWNrXCI7XG4gICAgbGV0IGNsYXNzTmFtZTtcbiAgICBpZiAoXCJjbGFzc05hbWVcIiBpbiB0aGlzLnByb3BzKSB7XG4gICAgICBjbGFzc05hbWUgPSBgJHt0aGlzLnByb3BzLmNsYXNzTmFtZX0gJHtkZWZhdWx0Q2xhc3N9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NOYW1lID0gZGVmYXVsdENsYXNzO1xuICAgIH1cblxuICAgIC8vIFwiQTExeUxpbmtCdXR0b25cIiB0byBmb3JjZSBub3JtYWwgbGluayBzdHlsaW5nIHN0dWZmIChlZyBjdXJzb3Igb24gaG92ZXIpXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICA8ZGl2IGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1lcnJvci1mYWxsYmFjay1pbmZvXCIgLz5cbiAgICAgICAgPHNwYW4
+
XG4gICAgICAgICAgPEExMXlMaW5rQnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJyZWxvYWQtYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1lcnJvci1mYWxsYmFjay1yZWZyZXNoLWxpbmtcIlxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbkVycm9yQm91bmRhcnlGYWxsYmFjay5kZWZhdWx0UHJvcHMgPSB7IGNsYXNzTmFtZTogXCJhcy1lcnJvci1mYWxsYmFja1wiIH07XG5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGhhc0Vycm9yOiBmYWxzZSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaGFzRXJyb3I6IHRydWUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhc0Vycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gPHRoaXMucHJvcHMuRmFsbGJhY2tDb21wb25lbnQgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0gLz47XG4gIH1cbn1cblxuRXJyb3JCb3VuZGFyeS5kZWZhdWx0UHJvcHMgPSB7IEZhbGxiYWNrQ29tcG9uZW50OiBFcnJvckJvdW5kYXJ5RmFsbGJhY2sgfTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEExMXlMaW5rQnV0dG9uKHByb3BzKSB7XG4gIC8vIGZ1bmN0aW9uIGZvciBtZXJnaW5nIGNsYXNzZXMsIGlmIG5lY2Vzc2FyeVxuICBsZXQgY2xhc3NOYW1lID0gXCJhMTF5LWxpbmstYnV0dG9uXCI7XG4gIGlmIChwcm9wcy5jbGFzc05hbWUpIHtcbiAgICBjbGFzc05hbWUgKz0gYCAke3Byb3BzLmNsYXNzTmFtZX1gO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgey4uLnByb3BzfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0
+
XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9idXR0b24
+
XG4gICk7XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogU2V0IHRleHQgb24gYSBjaGlsZCBlbGVtZW50L2NvbXBvbmVudCBkZXBlbmRpbmcgb24gaWYgdGhlIG1lc3NhZ2UgaXMgYWxyZWFkeVxuICogdHJhbnNsYXRlZCBwbGFpbiB0ZXh0IG9yIGEgZmx1ZW50IGlkIHdpdGggb3B0aW9uYWwgYXJncy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZsdWVudE9yVGV4dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgYSBzaW5nbGUgY2hpbGQgdG8gYXR0YWNoIGF0dHJpYnV0ZXNcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBtZXNzYWdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IDxzcGFuIC8
+
O1xuXG4gICAgLy8gRm9yIGEgc3RyaW5nIG1lc3NhZ2UsIGp1c3QgdXNlIGl0IGFzIHRoZSBjaGlsZCdzIHRleHRcbiAgICBsZXQgZ3JhbmRDaGlsZHJlbiA9IG1lc3NhZ2U7XG4gICAgbGV0IGV4dHJhUHJvcHM7XG5cbiAgICAvLyBDb252ZXJ0IGEgbWVzc2FnZSBvYmplY3QgdG8gc2V0IGRlc2lyZWQgZmx1ZW50LWRvbSBhdHRyaWJ1dGVzXG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCBhcmdzID0gbWVzc2FnZS5hcmdzIHx8IG1lc3NhZ2UudmFsdWVzO1xuICAgICAgZXh0cmFQcm9wcyA9IHtcbiAgICAgICAgXCJkYXRhLWwxMG4tYXJnc1wiOiBhcmdzICYmIEpTT04uc3RyaW5naWZ5KGFyZ3MpLFxuICAgICAgICBcImRhdGEtbDEwbi1pZFwiOiBtZXNzYWdlLmlkIHx8IG1lc3NhZ2Uuc3RyaW5nX2lkLFxuICAgICAgfTtcblxuICAgICAgLy8gVXNlIG9yaWdpbmFsIGNoaWxkcmVuIHBvdGVudGlhbGx5IHdpdGggZGF0YS1sMTBuLW5hbWUgYXR0cmlidXRlc1xuICAgICAgZ3JhbmRDaGlsZHJlbiA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgbWVzc2FnZSB0byB0aGUgY2hpbGQgdmlhIGZsdWVudCBhdHRyaWJ1dGVzIG9yIHRleHQgbm9kZVxuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGV4dHJhUHJvcHMsIGdyYW5kQ2hpbGRyZW4pO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IENvbnRleHRNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNlY3Rpb25NZW51T3B0aW9ucyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2VjdGlvbi1tZW51LW9wdGlvbnNcIjtcblxuY29uc3QgREVGQVVMVF9TRUNUSU9OX01FTlVfT1BUSU9OUyA9IFtcbiAgXCJNb3ZlVXBcIixcbiAgXCJNb3ZlRG93blwiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIlJlbW92ZVNlY3Rpb25cIixcbiAgXCJDaGVja0NvbGxhcHNlZFwiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIk1hbmFnZVNlY3Rpb25cIixcbl07XG5jb25zdCBXRUJFWFRfU0VDVElPTl9NRU5VX09QVElPTlMgPSBbXG4gIFwiTW92ZVVwXCIsXG4gIFwiTW92ZURvd25cIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJDaGVja0NvbGxhcHNlZFwiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIk1hbmFnZVdlYkV4dGVuc2lvblwiLFxuXTtcblxuZXhwb3J0IGNsYXNzIF9TZWN0aW9uTWVudSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBoYW5kbGVBZGRXaGlsZUNvbGxhcHNlZCgpIHtcbiAgICBjb25zdCB7IGFjdGlvbiwgdXNlckV2ZW50IH0gPSBTZWN0aW9uTWVudU9wdGlvbnMuRXhwYW5kU2VjdGlvbih0aGlzLnByb3BzKTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgaWYgKHVzZXJFdmVudCkge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgICBldmVudDogdXNlckV2ZW50LFxuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy5zb3VyY2UsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGdldE9wdGlvbnMoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGNvbnN0IHByb3BPcHRpb25zID0gcHJvcHMuaXNXZWJFeHRlbnNpb25cbiAgICAgID8gWy4uLldFQkVYVF9TRUNUSU9OX01FTlVfT1BUSU9OU11cbiAgICAgIDogWy4uLkRFRkFVTFRfU0VDVElPTl9NRU5VX09QVElPTlNdO1xuICAgIC8vIFJlbW92ZSB0aGUgbW92ZSByZWxhdGVkIG9wdGlvbnMgaWYgdGhlIHNlY3Rpb24gaXMgZml4ZWRcbiAgICBpZiAocHJvcHMuaXNGaXhlZCkge1xuICAgICAgcHJvcE9wdGlvbnMuc3BsaWNlKHByb3BPcHRpb25zLmluZGV4T2YoXCJNb3ZlVXBcIiksIDMpO1xuICAgIH1cbiAgICAvLyBQcmVwZW5kIGN1c3RvbSBvcHRpb25zIGFuZCBhIHNlcGFyYXRvclxuICAgIGlmIChwcm9wcy5leHRyYU9wdGlvbnMpIHtcbiAgICAgIHByb3BPcHRpb25zLnNwbGljZSgwLCAwLCAuLi5wcm9wcy5leHRyYU9wdGlvbnMsIFwiU2VwYXJhdG9yXCIpO1xuICAgIH1cbiAgICAvLyBJbnNlcnQgcHJpdmFjeSBub3RpY2UgYmVmb3JlIHRoZSBsYXN0IG9wdGlvbiAoXCJNYW5hZ2VTZWN0aW9uXCIpXG4gICAgaWYgKHByb3BzLnByaXZhY3lOb3RpY2VVUkwpIHtcbiAgICAgIHByb3BPcHRpb25zLnNwbGljZSgtMSwgMCwgXCJQcml2YWN5Tm90aWNlXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9wT3B0aW9uc1xuICAgICAgLm1hcChvID0
+
IFNlY3Rpb25NZW51T3B0aW9uc1tvXShwcm9wcykpXG4gICAgICAubWFwKG9wdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgYWN0aW9uLCBpZCwgdHlwZSwgdXNlckV2ZW50IH0gPSBvcHRpb247XG4gICAgICAgIGlmICghdHlwZSAmJiBpZCkge1xuICAgICAgICAgIG9wdGlvbi5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFzQWRkRXZlbnQgPVxuICAgICAgICAgICAgICB1c2VyRXZlbnQgPT09IFwiTUVOVV9BRERfVE9QU0lURVwiIHx8XG4gICAgICAgICAgICAgIHVzZXJFdmVudCA9PT0gXCJNRU5VX0FERF9TRUFSQ0hcIjtcblxuICAgICAgICAgICAgaWYgKHByb3BzLmNvbGxhcHNlZCAmJiBoYXNBZGRFdmVudCkge1xuICAgICAgICAgICAgICB0aGlzLmhhbmRsZUFkZFdoaWxlQ29sbGFwc2VkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb3BzLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgICAgICAgICBpZiAodXNlckV2ZW50KSB7XG4gICAgICAgICAgICAgIHByb3BzLmRpc3BhdGNoKFxuICAgICAgICAgICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgICAgICAgICBldmVudDogdXNlckV2ZW50LFxuICAgICAgICAgICAgICAgICAgc291cmNlOiBwcm9wcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgZm9yIGFjY2Vzc2liaWxpdHkgdG8gc3VwcG9ydCBtYWtpbmcgZWFjaCBpdGVtIHRhYmJhYmxlLlxuICAgIC8vIFdlIHdhbnQgdG8ga25vdyB3aGljaCBpdGVtIGlzIHRoZSBmaXJzdCBhbmQgd2hpY2ggaXRlbVxuICAgIC8vIGlzIHRoZSBsYXN0LCBzbyB3ZSBjYW4gY2xvc2UgdGhlIGNvbnRleHQgbWVudSBhY2NvcmRpbmdseS5cbiAgICBvcHRpb25zWzBdLmZpcnN0ID0gdHJ1ZTtcbiAgICBvcHRpb25zW29wdGlvbnMubGVuZ3RoIC0gMV0ubGFzdCA9IHRydWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250ZXh0TWVudVxuICAgICAgICBvblVwZGF0ZT17dGhpcy5wcm9wcy5vblVwZGF0ZX1cbiAgICAgICAgb3B0aW9ucz17dGhpcy5nZXRPcHRpb25zKCl9XG4gICAgICAgIGtleWJvYXJkQWNjZXNzPXt0aGlzLnByb3BzLmtleWJvYXJkQWNjZXNzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uTWVudSA9IF9TZWN0aW9uTWVudTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcblxuLyoqXG4gKiBMaXN0IG9mIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBpdGVtcyB0aGF0IGNhbiBiZSBpbmNsdWRlZCBhcyBtZW51IG9wdGlvbnMgaW4gYVxuICogU2VjdGlvbk1lbnUuIEFsbCBmdW5jdGlvbnMgdGFrZSB0aGUgc2VjdGlvbiBhcyB0aGUgb25seSBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWN0aW9uTWVudU9wdGlvbnMgPSB7XG4gIFNlcGFyYXRvcjogKCkgPT4gKHsgdHlwZTogXCJzZXBhcmF0b3JcIiB9KSxcbiAgTW92ZVVwOiBzZWN0aW9uID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1tb3ZlLXVwXCIsXG4gICAgaWNvbjogXCJhcnJvd2hlYWQtdXBcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuU0VDVElPTl9NT1ZFLFxuICAgICAgZGF0YTogeyBpZDogc2VjdGlvbi5pZCwgZGlyZWN0aW9uOiAtMSB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJNRU5VX01PVkVfVVBcIixcbiAgICBkaXNhYmxlZDogISFzZWN0aW9uLmlzRmlyc3QsXG4gIH0pLFxuICBNb3ZlRG93bjogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtbW92ZS1kb3duXCIsXG4gICAgaWNvbjogXCJhcnJvd2hlYWQtZG93blwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5TRUNUSU9OX01PVkUsXG4gICAgICBkYXRhOiB7IGlkOiBzZWN0aW9uLmlkLCBkaXJlY3Rpb246ICsxIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIk1FTlVfTU9WRV9ET1dOXCIsXG4gICAgZGlzYWJsZWQ6ICEhc2VjdGlvbi5pc0xhc3QsXG4gIH0pLFxuICBSZW1vdmVTZWN0aW9uOiBzZWN0aW9uID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1yZW1vdmUtc2VjdGlvblwiLFxuICAgIGljb246IFwiZGlzbWlzc1wiLFxuICAgIGFjdGlvbjogYWMuU2V0UHJlZihzZWN0aW9uLnNob3dQcmVmTmFtZSwgZmFsc2UpLFxuICAgIHVzZXJFdmVudDogXCJNRU5VX1JFTU9WRVwiLFxuICB9KSxcbiAgQ29sbGFwc2VTZWN0aW9uOiBzZWN0aW9uID0
+
ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1jb2xsYXBzZS1zZWN0aW9uXCIsXG4gICAgaWNvbjogXCJtaW5pbWl6ZVwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5VUERBVEVfU0VDVElPTl9QUkVGUyxcbiAgICAgIGRhdGE6IHsgaWQ6IHNlY3Rpb24uaWQsIHZhbHVlOiB7IGNvbGxhcHNlZDogdHJ1ZSB9IH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIk1FTlVfQ09MTEFQU0VcIixcbiAgfSksXG4gIEV4cGFuZFNlY3Rpb246IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LWV4cGFuZC1zZWN0aW9uXCIsXG4gICAgaWNvbjogXCJtYXhpbWl6ZVwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5VUERBVEVfU0VDVElPTl9QUkVGUyxcbiAgICAgIGRhdGE6IHsgaWQ6IHNlY3Rpb24uaWQsIHZhbHVlOiB7IGNvbGxhcHNlZDogZmFsc2UgfSB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJNRU5VX0VYUEFORFwiLFxuICB9KSxcbiAgTWFuYWdlU2VjdGlvbjogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtbWFuYWdlLXNlY3Rpb25cIixcbiAgICBpY29uOiBcInNldHRpbmdzXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuU0VUVElOR1NfT1BFTiB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9NQU5BR0VcIixcbiAgfSksXG4gIE1hbmFnZVdlYkV4dGVuc2lvbjogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtbWFuYWdlLXdlYmV4dFwiLFxuICAgIGljb246IFwic2V0dGluZ3NcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oeyB0eXBlOiBhdC5PUEVOX1dFQkVYVF9TRVRUSU5HUywgZGF0YTogc2VjdGlvbi5pZCB9KSxcbiAgfSksXG4gIEFkZFRvcFNpdGU6IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LWFkZC10b3BzaXRlXCIsXG4gICAgaWNvbjogXCJhZGRcIixcbiAgICBhY3Rpb246IHsgdHlwZTogYXQuVE9QX1NJVEVTX0VESVQsIGRhdGE6IHsgaW5kZXg6IC0xIH0gfSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9BRERfVE9QU0lURVwiLFxuICB9KSxcbiAgQWRkU2VhcmNoU2hvcnRjdXQ6IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LWFkZC1zZWFyY2gtZW5naW5lXCIsXG4gICAgaWNvbjogXCJzZWFyY2hcIixcbiAgICBhY3Rpb246IHsgdHlwZTogYXQuVE9QX1NJVEVTX09QRU5fU0VBUkNIX1NIT1JUQ1VUU19NT0RBTCB9LFxuICAgIHVzZXJFdmVudDogXCJNRU5VX0FERF9TRUFSQ0hcIixcbiAgfSksXG4gIFByaXZhY3lOb3RpY2U6IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LXByaXZhY3ktbm90aWNlXCIsXG4gICAgaWNvbjogXCJpbmZvXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0Lk9QRU5fTElOSyxcbiAgICAgIGRhdGE6IHsgdXJsOiBzZWN0aW9uLnByaXZhY3lOb3RpY2VVUkwgfSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9QUklWQUNZX05PVElDRVwiLFxuICB9KSxcbiAgQ2hlY2tDb2xsYXBzZWQ6IHNlY3Rpb24gPT5cbiAgICBzZWN0aW9uLmNvbGxhcHNlZFxuICAgICAgPyBTZWN0aW9uTWVudU9wdGlvbnMuRXhwYW5kU2VjdGlvbihzZWN0aW9uKVxuICAgICAgOiBTZWN0aW9uTWVudU9wdGlvbnMuQ29sbGFwc2VTZWN0aW9uKHNlY3Rpb24pLFxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGlua01lbnVPcHRpb25zIH0gZnJvbSBcImNvbnRlbnQtc3JjL2xpYi9saW5rLW1lbnUtb3B0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgRFNEaXNtaXNzIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25EaXNtaXNzQ2xpY2sgPSB0aGlzLm9uRGlzbWlzc0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkhvdmVyID0gdGhpcy5vbkhvdmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vZmZIb3ZlciA9IHRoaXMub2ZmSG92ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJpbmc6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBvbkRpc21pc3NDbGljaygpIHtcbiAgICBjb25zdCBpbmRleCA9IDA7XG4gICAgY29uc3Qgc291cmNlID0gXCJESVNDT1ZFUllfU1RSRUFNXCI7XG4gICAgY29uc3QgYmxvY2tVcmxPcHRpb24gPSBMaW5rTWVudU9wdGlvbnMuQmxvY2tVcmwoXG4gICAgICB0aGlzLnByb3BzLmRhdGEsXG4gICAgICBpbmRleCxcbiAgICAgIHNvdXJjZVxuICAgICk7XG5cbiAgICBjb25zdCB7IGFjdGlvbiwgaW1wcmVzc2lvbiwgdXNlckV2ZW50IH0gPSBibG9ja1VybE9wdGlvbjtcblxuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICBjb25zdCB1c2VyRXZlbnREYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgZXZlbnQ6IHVzZXJFdmVudCxcbiAgICAgICAgc291cmNlLFxuICAgICAgICBhY3Rpb25fcG9zaXRpb246IGluZGV4LFxuICAgICAgfSxcbiAgICAgIHRoaXMucHJvcHMuZGF0YVxuICAgICk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhYy5Vc2VyRXZlbnQodXNlckV2ZW50RGF0YSkpO1xuICAgIGlmIChpbXByZXNzaW9uICYmIHRoaXMucHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0cykge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChpbXByZXNzaW9uKTtcbiAgICB9XG4gIH1cblxuICBvbkhvdmVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaG92ZXJpbmc6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBvZmZIb3ZlcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyaW5nOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gYGRzLWRpc21pc3NcbiAgICAgICR7dGhpcy5zdGF0ZS5ob3ZlcmluZyA
/
IGAgaG92ZXJpbmdgIDogYGB9XG4gICAgICAke3RoaXMucHJvcHMuZXh0cmFDbGFzc2VzID8gYCAke3RoaXMucHJvcHMuZXh0cmFDbGFzc2VzfWAgOiBgYH1gO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImRzLWRpc21pc3MtYnV0dG9uXCJcbiAgICAgICAgICBvbkhvdmVyPXt0aGlzLm9uSG92ZXJ9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkRpc21pc3NDbGlja31cbiAgICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMub25Ib3Zlcn1cbiAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMub2ZmSG92ZXJ9XG4gICAgICAgICAgYXJpYS1sYWJlbD1cImRpc21pc3NcIlxuICAgICAgICA
+
XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbiBpY29uLWRpc21pc3NcIiAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5pbXBvcnQgeyBGbHVlbnRPclRleHQgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9GbHVlbnRPclRleHQvRmx1ZW50T3JUZXh0XCI7XG5cbmV4cG9ydCBjbGFzcyBEU01lc3NhZ2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLW1lc3NhZ2VcIj5cbiAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgIHt0aGlzLnByb3BzLmljb24gJiYgKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaFwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3RoaXMucHJvcHMuaWNvbn0pYCB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHt0aGlzLnByb3BzLnRpdGxlICYmIChcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlLXRleHRcIj5cbiAgICAgICAgICAgICAgPEZsdWVudE9yVGV4dCBtZXNzYWdlPXt0aGlzLnByb3BzLnRpdGxlfSAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMucHJvcHMubGlua190ZXh0ICYmIHRoaXMucHJvcHMubGlua191cmwgJiYgKFxuICAgICAgICAgICAgPFNhZmVBbmNob3IgY2xhc3NOYW1lPVwibGlua1wiIHVybD17dGhpcy5wcm9wcy5saW5rX3VybH0
+
XG4gICAgICAgICAgICAgIDxGbHVlbnRPclRleHQgbWVzc2FnZT17dGhpcy5wcm9wcy5saW5rX3RleHR9IC8
+
XG4gICAgICAgICAgICA8L1NhZmVBbmNob3I
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9oZWFkZXI
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IE1vZGFsT3ZlcmxheVdyYXBwZXIgfSBmcm9tIFwiY29udGVudC1zcmMvYXNyb3V0ZXIvY29tcG9uZW50cy9Nb2RhbE92ZXJsYXkvTW9kYWxPdmVybGF5XCI7XG5cbmV4cG9ydCBjbGFzcyBEU1ByaXZhY3lNb2RhbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmNsb3NlTW9kYWwgPSB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTGlua0NsaWNrID0gdGhpcy5vbkxpbmtDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25MaW5rQ2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tfUFJJVkFDWV9JTkZPXCIsXG4gICAgICAgIHNvdXJjZTogXCJEU19QUklWQUNZX01PREFMXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogYEhJREVfUFJJVkFDWV9JTkZPYCxcbiAgICAgIGRhdGE6IHt9LFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxPdmVybGF5V3JhcHBlclxuICAgICAgICBvbkNsb3NlPXt0aGlzLmNsb3NlTW9kYWx9XG4gICAgICAgIGlubmVyQ2xhc3NOYW1lPVwiZHMtcHJpdmFjeS1tb2RhbFwiXG4gICAgICA
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJpdmFjeS1ub3RpY2VcIj5cbiAgICAgICAgICA8aDMgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXByaXZhY3ktbW9kYWwtaGVhZGVyXCIgLz5cbiAgICAgICAgICA8cCBkYXRhLWwxMG4taWQ9XCJuZXd0YWItcHJpdmFjeS1tb2RhbC1wYXJhZ3JhcGhcIiAvPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItcHJpdmFjeS1tb2RhbC1saW5rXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25MaW5rQ2xpY2t9XG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvcHJpdmFjeS9maXJlZm94L1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJkb25lXCJcbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5jbG9zZU1vZGFsfVxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXByaXZhY3ktbW9kYWwtYnV0dG9uLWRvbmVcIlxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvTW9kYWxPdmVybGF5V3JhcHBlcj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IERTSW1hZ2UgfSBmcm9tIFwiLi4vRFNJbWFnZS9EU0ltYWdlLmpzeFwiO1xuaW1wb3J0IHsgSW1wcmVzc2lvblN0YXRzIH0gZnJvbSBcIi4uLy4uL0Rpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cy9JbXByZXNzaW9uU3RhdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBEU1RleHRQcm9tbyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uTGlua0NsaWNrID0gdGhpcy5vbkxpbmtDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25MaW5rQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgdGlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgIC4uLih0aGlzLnByb3BzLnNoaW0gJiYgdGhpcy5wcm9wcy5zaGltLmNsaWNrXG4gICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMucHJvcHMuc2hpbS5jbGljayB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy10ZXh0LXByb21vXCI
+
XG4gICAgICAgIDxEU0ltYWdlXG4gICAgICAgICAgYWx0X3RleHQ9e3RoaXMucHJvcHMuYWx0X3RleHR9XG4gICAgICAgICAgc291cmNlPXt0aGlzLnByb3BzLmltYWdlfVxuICAgICAgICAgIHJhd1NvdXJjZT17dGhpcy5wcm9wcy5yYXdfaW1hZ2Vfc3JjfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRcIj5cbiAgICAgICAgICA8aDM
+
XG4gICAgICAgICAgICB7YCR7dGhpcy5wcm9wcy5oZWFkZXJ9XFx1MjAwM2B9XG4gICAgICAgICAgICA8U2FmZUFuY2hvclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkcy1jaGV2cm9uLWxpbmtcIlxuICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgb25MaW5rQ2xpY2s9e3RoaXMub25MaW5rQ2xpY2t9XG4gICAgICAgICAgICAgIHVybD17dGhpcy5wcm9wcy5jdGFfdXJsfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jdGFfdGV4dH1cbiAgICAgICAgICAgIDwvU2FmZUFuY2hvcj5cbiAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YnRpdGxlXCI
+
e3RoaXMucHJvcHMuc3VidGl0bGV9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEltcHJlc3Npb25TdGF0c1xuICAgICAgICAgIGZsaWdodElkPXt0aGlzLnByb3BzLmZsaWdodElkfVxuICAgICAgICAgIHJvd3M9e1tcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgIHNoaW06IHRoaXMucHJvcHMuc2hpbSAmJiB0aGlzLnByb3BzLnNoaW0uaW1wcmVzc2lvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IERTQ2FyZCwgUGxhY2Vob2xkZXJEU0NhcmQgfSBmcm9tIFwiLi4vRFNDYXJkL0RTQ2FyZC5qc3hcIjtcbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgRFNFbXB0eVN0YXRlIH0gZnJvbSBcIi4uL0RTRW1wdHlTdGF0ZS9EU0VtcHR5U3RhdGUuanN4XCI7XG5pbXBvcnQgeyBEU0ltYWdlIH0gZnJvbSBcIi4uL0RTSW1hZ2UvRFNJbWFnZS5qc3hcIjtcbmltcG9ydCB7IERTTGlua01lbnUgfSBmcm9tIFwiLi4vRFNMaW5rTWVudS9EU0xpbmtNZW51XCI7XG5pbXBvcnQgeyBJbXByZXNzaW9uU3RhdHMgfSBmcm9tIFwiLi4vLi4vRGlzY292ZXJ5U3RyZWFtSW1wcmVzc2lvblN0YXRzL0ltcHJlc3Npb25TdGF0c1wiO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gXCIuLi9MaXN0L0xpc3QuanN4XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTYWZlQW5jaG9yIH0gZnJvbSBcIi4uL1NhZmVBbmNob3IvU2FmZUFuY2hvclwiO1xuaW1wb3J0IHsgRFNDb250ZXh0Rm9vdGVyIH0gZnJvbSBcIi4uL0RTQ29udGV4dEZvb3Rlci9EU0NvbnRleHRGb290ZXIuanN4XCI7XG5cbmV4cG9ydCBjbGFzcyBIZXJvIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25MaW5rQ2xpY2sgPSB0aGlzLm9uTGlua0NsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkxpbmtDbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc3BhdGNoKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICAgIGV2ZW50OiBcIkNMSUNLXCIsXG4gICAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLnR5cGUudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMuaGVyb1JlYy5wb3MsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgdGlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMuaGVyb1JlYy5pZCxcbiAgICAgICAgICAgICAgcG9zOiB0aGlzLmhlcm9SZWMucG9zLFxuICAgICAgICAgICAgICAuLi4odGhpcy5oZXJvUmVjLnNoaW0gJiYgdGhpcy5oZXJvUmVjLnNoaW0uY2xpY2tcbiAgICAgICAgICAgICAgICA
/
IHsgc2hpbTogdGhpcy5oZXJvUmVjLnNoaW0uY2xpY2sgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJIZXJvKCkge1xuICAgIGxldCBbaGVyb1JlYywgLi4ub3RoZXJSZWNzXSA9IHRoaXMucHJvcHMuZGF0YS5yZWNvbW1lbmRhdGlvbnMuc2xpY2UoXG4gICAgICAwLFxuICAgICAgdGhpcy5wcm9wcy5pdGVtc1xuICAgICk7XG4gICAgdGhpcy5oZXJvUmVjID0gaGVyb1JlYztcblxuICAgIGNvbnN0IGNhcmRzID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMucHJvcHMuaXRlbXMgLSAxOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCByZWMgPSBvdGhlclJlY3NbaW5kZXhdO1xuICAgICAgY2FyZHMucHVzaChcbiAgICAgICAgIXJlYyB8fCByZWMucGxhY2Vob2xkZXIgPyAoXG4gICAgICAgICAgPFBsYWNlaG9sZGVyRFNDYXJkIGtleT17YGRzY2FyZC0ke2luZGV4fWB9IC8
+
XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPERTQ2FyZFxuICAgICAgICAgICAgZmxpZ2h0SWQ9e3JlYy5mbGlnaHRfaWR9XG4gICAgICAgICAgICBrZXk9e2Bkc2NhcmQtJHtyZWMuaWR9YH1cbiAgICAgICAgICAgIGltYWdlX3NyYz17cmVjLmltYWdlX3NyY31cbiAgICAgICAgICAgIHJhd19pbWFnZV9zcmM9e3JlYy5yYXdfaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgdGl0bGU9e3JlYy50aXRsZX1cbiAgICAgICAgICAgIHVybD17cmVjLnVybH1cbiAgICAgICAgICAgIGlkPXtyZWMuaWR9XG4gICAgICAgICAgICBzaGltPXtyZWMuc2hpbX1cbiAgICAgICAgICAgIHBvcz17cmVjLnBvc31cbiAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgY29udGV4dD17cmVjLmNvbnRleHR9XG4gICAgICAgICAgICBjb250ZXh0X3R5cGU9e3JlYy5jb250ZXh0X3R5cGV9XG4gICAgICAgICAgICBzb3VyY2U9e3JlYy5kb21haW59XG4gICAgICAgICAgICBwb2NrZXRfaWQ9e3JlYy5wb2NrZXRfaWR9XG4gICAgICAgICAgICBib29rbWFya0d1aWQ9e3JlYy5ib29rbWFya0d1aWR9XG4gICAgICAgICAgICBlbmdhZ2VtZW50PXtyZWMuZW5nYWdlbWVudH1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBoZXJvQ2FyZCA9IG51bGw7XG5cbiAgICBpZiAoIWhlcm9SZWMgfHwgaGVyb1JlYy5wbGFjZWhvbGRlcikge1xuICAgICAgaGVyb0NhcmQgPSA8UGxhY2Vob2xkZXJEU0NhcmQgLz47XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlcm9DYXJkID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWhlcm8taXRlbVwiIGtleT17YGRzY2FyZC0ke2hlcm9SZWMuaWR9YH0
+
XG4gICAgICAgICAgPFNhZmVBbmNob3JcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIndyYXBwZXJcIlxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBvbkxpbmtDbGljaz17dGhpcy5vbkxpbmtDbGlja31cbiAgICAgICAgICAgIHVybD17aGVyb1JlYy51cmx9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWctd3JhcHBlclwiPlxuICAgICAgICAgICAgICA8RFNJbWFnZVxuICAgICAgICAgICAgICAgIGV4dHJhQ2xhc3NOYW1lcz1cImltZ1wiXG4gICAgICAgICAgICAgICAgc291cmNlPXtoZXJvUmVjLmltYWdlX3NyY31cbiAgICAgICAgICAgICAgICByYXdTb3VyY2U9e2hlcm9SZWMucmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRhXCI
+
XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLWFuZC1leGNlcnB0XCI
+
XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic291cmNlIGNsYW1wXCI
+
e2hlcm9SZWMuZG9tYWlufTwvcD5cbiAgICAgICAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImNsYW1wXCI
+
e2hlcm9SZWMudGl0bGV9PC9oZWFkZXI
+
XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXhjZXJwdCBjbGFtcFwiPntoZXJvUmVjLmV4Y2VycHR9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPERTQ29udGV4dEZvb3RlclxuICAgICAgICAgICAgICAgIGNvbnRleHQ9e2hlcm9SZWMuY29udGV4dH1cbiAgICAgICAgICAgICAgICBjb250ZXh0X3R5cGU9e2hlcm9SZWMuY29udGV4dF90eXBlfVxuICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnQ9e2hlcm9SZWMuZW5nYWdlbWVudH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPEltcHJlc3Npb25TdGF0c1xuICAgICAgICAgICAgICBmbGlnaHRJZD17aGVyb1JlYy5mbGlnaHRfaWR9XG4gICAgICAgICAgICAgIHJvd3M9e1tcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogaGVyb1JlYy5pZCxcbiAgICAgICAgICAgICAgICAgIHBvczogaGVyb1JlYy5wb3MsXG4gICAgICAgICAgICAgICAgICAuLi4oaGVyb1JlYy5zaGltICYmIGhlcm9SZWMuc2hpbS5pbXByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgID8geyBzaGltOiBoZXJvUmVjLnNoaW0uaW1wcmVzc2lvbiB9XG4gICAgICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgPC9TYWZlQW5jaG9yPlxuICAgICAgICAgIDxEU0xpbmtNZW51XG4gICAgICAgICAgICBpZD17aGVyb1JlYy5pZH1cbiAgICAgICAgICAgIGluZGV4PXtoZXJvUmVjLnBvc31cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgdXJsPXtoZXJvUmVjLnVybH1cbiAgICAgICAgICAgIHRpdGxlPXtoZXJvUmVjLnRpdGxlfVxuICAgICAgICAgICAgc291cmNlPXtoZXJvUmVjLmRvbWFpbn1cbiAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIHBvY2tldF9pZD17aGVyb1JlYy5wb2NrZXRfaWR9XG4gICAgICAgICAgICBzaGltPXtoZXJvUmVjLnNoaW19XG4gICAgICAgICAgICBib29rbWFya0d1aWQ9e2hlcm9SZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgICAgZmxpZ2h0SWQ9e2hlcm9SZWMuZmxpZ2h0X2lkfVxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgbGlzdCA9IChcbiAgICAgIDxMaXN0XG4gICAgICAgIHJlY1N0YXJ0aW5nUG9pbnQ9ezF9XG4gICAgICAgIGRhdGE9e3RoaXMucHJvcHMuZGF0YX1cbiAgICAgICAgZmVlZD17dGhpcy5wcm9wcy5mZWVkfVxuICAgICAgICBoYXNJbWFnZXM9e3RydWV9XG4gICAgICAgIGhhc0JvcmRlcnM9e3RoaXMucHJvcHMuYm9yZGVyID09PSBgYm9yZGVyYH1cbiAgICAgICAgaXRlbXM9e3RoaXMucHJvcHMuaXRlbXMgLSAxfVxuICAgICAgICB0eXBlPXtgSGVyb2B9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bkcy1oZXJvIGRzLWhlcm8tJHt0aGlzLnByb3BzLmJvcmRlcn1gfT5cbiAgICAgICAge2hlcm9DYXJkfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7dGhpcy5wcm9wcy5zdWJDb21wb25lbnRUeXBlfWB9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLnN1YkNvbXBvbmVudFR5cGUgPT09IGBjYXJkc2AgPyBjYXJkcyA6IGxpc3R9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBIYW5kbGUgYSByZW5kZXIgYmVmb3JlIGZlZWQgaGFzIGJlZW4gZmV0Y2hlZCBieSBkaXNwbGF5aW5nIG5vdGhpbmdcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEucmVjb21tZW5kYXRpb25zKSB7XG4gICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSB1c2VyIGhhcyBkaXNtaXNzZWQgYWxsIHJlY29tbWVuZGF0aW9uc1xuICAgIGNvbnN0IGlzRW1wdHkgPSBkYXRhLnJlY29tbWVuZGF0aW9ucy5sZW5ndGggPT09IDA7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1oZWFkZXJcIj57dGhpcy5wcm9wcy50aXRsZX08L2Rpdj5cbiAgICAgICAge2lzRW1wdHkgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1oZXJvIGVtcHR5XCI
+
XG4gICAgICAgICAgICA8RFNFbXB0eVN0YXRlXG4gICAgICAgICAgICAgIHN0YXR1cz17ZGF0YS5zdGF0dXN9XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICBmZWVkPXt0aGlzLnByb3BzLmZlZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogKFxuICAgICAgICAgIHRoaXMucmVuZGVySGVybygpXG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkhlcm8uZGVmYXVsdFByb3BzID0ge1xuICBkYXRhOiB7fSxcbiAgYm9yZGVyOiBgYm9yZGVyYCxcbiAgaXRlbXM6IDEsIC8vIE51bWJlciBvZiBzdG9yaWVzIHRvIGRpc3BsYXlcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IERTRW1wdHlTdGF0ZSB9IGZyb20gXCIuLi9EU0VtcHR5U3RhdGUvRFNFbXB0eVN0YXRlLmpzeFwiO1xuaW1wb3J0IHsgRFNJbWFnZSB9IGZyb20gXCIuLi9EU0ltYWdlL0RTSW1hZ2UuanN4XCI7XG5pbXBvcnQgeyBEU0xpbmtNZW51IH0gZnJvbSBcIi4uL0RTTGlua01lbnUvRFNMaW5rTWVudVwiO1xuaW1wb3J0IHsgSW1wcmVzc2lvblN0YXRzIH0gZnJvbSBcIi4uLy4uL0Rpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cy9JbXByZXNzaW9uU3RhdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5pbXBvcnQgeyBEU0NvbnRleHRGb290ZXIgfSBmcm9tIFwiLi4vRFNDb250ZXh0Rm9vdGVyL0RTQ29udGV4dEZvb3Rlci5qc3hcIjtcblxuLyoqXG4gKiBAbm90ZSBleHBvcnRlZCBmb3IgdGVzdGluZyBvbmx5XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXN0SXRlbSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAvLyBUT0RPIHBlcmZvcm1hbmNlOiBnZXQgZmVlZHMgdG8gc2VuZCBhcHByb3ByaWF0ZWx5IHNpemVkIGltYWdlcyByYXRoZXJcbiAgLy8gdGhhbiB3YWl0aW5nIGxvbmdlciBhbmQgc2NhbGluZyBkb3duIG9uIGNsaWVudD9cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgdmFsdWU6IHsgY2FyZF90eXBlOiB0aGlzLnByb3BzLmZsaWdodElkID8gXCJzcG9jXCIgOiBcIm9yZ2FuaWNcIiB9LFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuSW1wcmVzc2lvblN0YXRzKHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGNsaWNrOiAwLFxuICAgICAgICAgIHRpbGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxuICAgICAgICAgICAgICBwb3M6IHRoaXMucHJvcHMucG9zLFxuICAgICAgICAgICAgICAuLi4odGhpcy5wcm9wcy5zaGltICYmIHRoaXMucHJvcHMuc2hpbS5jbGlja1xuICAgICAgICAgICAgICAgID8geyBzaGltOiB0aGlzLnByb3BzLnNoaW0uY2xpY2sgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9e2Bkcy1saXN0LWl0ZW0ke1xuICAgICAgICAgIHRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyBcIiBwbGFjZWhvbGRlclwiIDogXCJcIlxuICAgICAgICB9YH1cbiAgICAgID5cbiAgICAgICAgPFNhZmVBbmNob3JcbiAgICAgICAgICBjbGFzc05hbWU9XCJkcy1saXN0LWl0ZW0tbGlua1wiXG4gICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgb25MaW5rQ2xpY2s9eyF0aGlzLnByb3BzLnBsYWNlaG9sZGVyID8gdGhpcy5vbkxpbmtDbGljayA6IHVuZGVmaW5lZH1cbiAgICAgICAgICB1cmw9e3RoaXMucHJvcHMudXJsfVxuICAgICAgICA
+
XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1saXN0LWl0ZW0tdGV4dFwiPlxuICAgICAgICAgICAgPHA
+
XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS1pbmZvIGNsYW1wXCI
+
XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZG9tYWlufVxuICAgICAgICAgICAgICA8L3NwYW4
+
XG4gICAgICAgICAgICA8L3A
+
XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS1ib2R5XCI
+
XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtbGlzdC1pdGVtLXRpdGxlIGNsYW1wXCI
+
e3RoaXMucHJvcHMudGl0bGV9PC9kaXY
+
XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4Y2VycHQgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtbGlzdC1pdGVtLWV4Y2VycHQgY2xhbXBcIj5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4Y2VycHR9XG4gICAgICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxEU0NvbnRleHRGb290ZXJcbiAgICAgICAgICAgICAgY29udGV4dD17dGhpcy5wcm9wcy5jb250ZXh0fVxuICAgICAgICAgICAgICBjb250ZXh0X3R5cGU9e3RoaXMucHJvcHMuY29udGV4dF90eXBlfVxuICAgICAgICAgICAgICBlbmdhZ2VtZW50PXt0aGlzLnByb3BzLmVuZ2FnZW1lbnR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxEU0ltYWdlXG4gICAgICAgICAgICBleHRyYUNsYXNzTmFtZXM9XCJkcy1saXN0LWltYWdlXCJcbiAgICAgICAgICAgIHNvdXJjZT17dGhpcy5wcm9wcy5pbWFnZV9zcmN9XG4gICAgICAgICAgICByYXdTb3VyY2U9e3RoaXMucHJvcHMucmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxJbXByZXNzaW9uU3RhdHNcbiAgICAgICAgICAgIGZsaWdodElkPXt0aGlzLnByb3BzLmZsaWdodElkfVxuICAgICAgICAgICAgcm93cz17W1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgICAgcG9zOiB0aGlzLnByb3BzLnBvcyxcbiAgICAgICAgICAgICAgICAuLi4odGhpcy5wcm9wcy5zaGltICYmIHRoaXMucHJvcHMuc2hpbS5pbXByZXNzaW9uXG4gICAgICAgICAgICAgICAgICA
/
IHsgc2hpbTogdGhpcy5wcm9wcy5zaGltLmltcHJlc3Npb24gfVxuICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1NhZmVBbmNob3I
+
XG4gICAgICAgIHshdGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAoXG4gICAgICAgICAgPERTTGlua01lbnVcbiAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgaW5kZXg9e3RoaXMucHJvcHMucG9zfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICB1cmw9e3RoaXMucHJvcHMudXJsfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMuc291cmNlfVxuICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlfVxuICAgICAgICAgICAgcG9ja2V0X2lkPXt0aGlzLnByb3BzLnBvY2tldF9pZH1cbiAgICAgICAgICAgIHNoaW09e3RoaXMucHJvcHMuc2hpbX1cbiAgICAgICAgICAgIGJvb2ttYXJrR3VpZD17dGhpcy5wcm9wcy5ib29rbWFya0d1aWR9XG4gICAgICAgICAgICBmbGlnaHRJZD17dGhpcy5wcm9wcy5mbGlnaHRJZH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBQbGFjZWhvbGRlckxpc3RJdGVtID0gcHJvcHMgPT4gPExpc3RJdGVtIHBsYWNlaG9sZGVyPXt0cnVlfSAvPjtcblxuLyoqXG4gKiBAbm90ZSBleHBvcnRlZCBmb3IgdGVzdGluZyBvbmx5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfTGlzdChwcm9wcykge1xuICBjb25zdCByZW5kZXJMaXN0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlY3MgPSBwcm9wcy5kYXRhLnJlY29tbWVuZGF0aW9ucy5zbGljZShcbiAgICAgIHByb3BzLnJlY1N0YXJ0aW5nUG9pbnQsXG4gICAgICBwcm9wcy5yZWNTdGFydGluZ1BvaW50ICsgcHJvcHMuaXRlbXNcbiAgICApO1xuICAgIGNvbnN0IHJlY01hcmt1cCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByb3BzLml0ZW1zOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCByZWMgPSByZWNzW2luZGV4XTtcbiAgICAgIHJlY01hcmt1cC5wdXNoKFxuICAgICAgICAhcmVjIHx8IHJlYy5wbGFjZWhvbGRlciA
/
IChcbiAgICAgICAgICA8UGxhY2Vob2xkZXJMaXN0SXRlbSBrZXk9e2Bkcy1saXN0LWl0ZW0tJHtpbmRleH1gfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxMaXN0SXRlbVxuICAgICAgICAgICAga2V5PXtgZHMtbGlzdC1pdGVtLSR7cmVjLmlkfWB9XG4gICAgICAgICAgICBkaXNwYXRjaD17cHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBmbGlnaHRJZD17cmVjLmZsaWdodF9pZH1cbiAgICAgICAgICAgIGRvbWFpbj17cmVjLmRvbWFpbn1cbiAgICAgICAgICAgIGV4Y2VycHQ9e3JlYy5leGNlcnB0fVxuICAgICAgICAgICAgaWQ9e3JlYy5pZH1cbiAgICAgICAgICAgIHNoaW09e3JlYy5zaGltfVxuICAgICAgICAgICAgaW1hZ2Vfc3JjPXtyZWMuaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgcmF3X2ltYWdlX3NyYz17cmVjLnJhd19pbWFnZV9zcmN9XG4gICAgICAgICAgICBwb3M9e3JlYy5wb3N9XG4gICAgICAgICAgICB0aXRsZT17cmVjLnRpdGxlfVxuICAgICAgICAgICAgY29udGV4dD17cmVjLmNvbnRleHR9XG4gICAgICAgICAgICBjb250ZXh0X3R5cGU9e3JlYy5jb250ZXh0X3R5cGV9XG4gICAgICAgICAgICB0eXBlPXtwcm9wcy50eXBlfVxuICAgICAgICAgICAgdXJsPXtyZWMudXJsfVxuICAgICAgICAgICAgcG9ja2V0X2lkPXtyZWMucG9ja2V0X2lkfVxuICAgICAgICAgICAgYm9va21hcmtHdWlkPXtyZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgICAgZW5nYWdlbWVudD17cmVjLmVuZ2FnZW1lbnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0U3R5bGVzID0gW1xuICAgICAgXCJkcy1saXN0XCIsXG4gICAgICBwcm9wcy5mdWxsV2lkdGggPyBcImRzLWxpc3QtZnVsbC13aWR0aFwiIDogXCJcIixcbiAgICAgIHByb3BzLmhhc0JvcmRlcnMgPyBcImRzLWxpc3QtYm9yZGVyc1wiIDogXCJcIixcbiAgICAgIHByb3BzLmhhc0ltYWdlcyA
/
IFwiZHMtbGlzdC1pbWFnZXNcIiA6IFwiXCIsXG4gICAgICBwcm9wcy5oYXNOdW1iZXJzID8gXCJkcy1saXN0LW51bWJlcnNcIiA6IFwiXCIsXG4gICAgXTtcblxuICAgIHJldHVybiA8dWwgY2xhc3NOYW1lPXtsaXN0U3R5bGVzLmpvaW4oXCIgXCIpfT57cmVjTWFya3VwfTwvdWw
+
O1xuICB9O1xuXG4gIGNvbnN0IHsgZGF0YSB9ID0gcHJvcHM7XG4gIGlmICghZGF0YSB8fCAhZGF0YS5yZWNvbW1lbmRhdGlvbnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIHVzZXIgaGFzIGRpc21pc3NlZCBhbGwgcmVjb21tZW5kYXRpb25zXG4gIGNvbnN0IGlzRW1wdHkgPSBkYXRhLnJlY29tbWVuZGF0aW9ucy5sZW5ndGggPT09IDA7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAge3Byb3BzLmhlYWRlciAmJiBwcm9wcy5oZWFkZXIudGl0bGUgPyAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtaGVhZGVyXCI
+
e3Byb3BzLmhlYWRlci50aXRsZX08L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgICAge2lzRW1wdHkgPyAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtbGlzdCBlbXB0eVwiPlxuICAgICAgICAgIDxEU0VtcHR5U3RhdGVcbiAgICAgICAgICAgIHN0YXR1cz17ZGF0YS5zdGF0dXN9XG4gICAgICAgICAgICBkaXNwYXRjaD17cHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBmZWVkPXtwcm9wcy5mZWVkfVxuICAgICAgICAgIC8
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgcmVuZGVyTGlzdCgpXG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5fTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlY1N0YXJ0aW5nUG9pbnQ6IDAsIC8vIEluZGV4IG9mIHJlY29tbWVuZGF0aW9ucyB0byBzdGFydCBkaXNwbGF5aW5nIGZyb21cbiAgZnVsbFdpZHRoOiBmYWxzZSwgLy8gRGlzcGxheSBpdGVtcyB0YWtpbmcgdXAgdGhlIHdob2xlIGNvbHVtblxuICBoYXNCb3JkZXJzOiBmYWxzZSwgLy8gRGlzcGxheSBsaW5lcyBzZXBhcmF0aW5nIGVhY2ggaXRlbVxuICBoYXNJbWFnZXM6IGZhbHNlLCAvLyBEaXNwbGF5IGltYWdlcyBmb3IgZWFjaCBpdGVtXG4gIGhhc051bWJlcnM6IGZhbHNlLCAvLyBEaXNwbGF5IG51bWJlcnMgZm9yIGVhY2ggaXRlbVxuICBpdGVtczogNiwgLy8gTnVtYmVyIG9mIHN0b3JpZXMgdG8gZGlzcGxheS4gIFRPRE86IGdldCBmcm9tIGVuZHBvaW50XG59O1xuXG5leHBvcnQgY29uc3QgTGlzdCA9IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgRGlzY292ZXJ5U3RyZWFtOiBzdGF0ZS5EaXNjb3ZlcnlTdHJlYW0sXG59KSkoX0xpc3QpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2VjdGlvbkludGwgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9TZWN0aW9ucy9TZWN0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgX0hpZ2hsaWdodHMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLnByb3BzLlNlY3Rpb25zLmZpbmQocyA9PiBzLmlkID09PSBcImhpZ2hsaWdodHNcIik7XG4gICAgaWYgKCFzZWN0aW9uIHx8ICFzZWN0aW9uLmVuYWJsZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWhpZ2hsaWdodHMgc2VjdGlvbnMtbGlzdFwiPlxuICAgICAgICA8U2VjdGlvbkludGwgey4uLnNlY3Rpb259IGlzRml4ZWQ9e3RydWV9IC8
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBIaWdobGlnaHRzID0gY29ubmVjdChzdGF0ZSA9PiAoeyBTZWN0aW9uczogc3RhdGUuU2VjdGlvbnMgfSkpKFxuICBfSGlnaGxpZ2h0c1xuKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IENhcmQsIFBsYWNlaG9sZGVyQ2FyZCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NhcmQvQ2FyZFwiO1xuaW1wb3J0IHsgQ29sbGFwc2libGVTZWN0aW9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29sbGFwc2libGVTZWN0aW9uL0NvbGxhcHNpYmxlU2VjdGlvblwiO1xuaW1wb3J0IHsgQ29tcG9uZW50UGVyZlRpbWVyIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50UGVyZlRpbWVyL0NvbXBvbmVudFBlcmZUaW1lclwiO1xuaW1wb3J0IHsgRmx1ZW50T3JUZXh0IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRmx1ZW50T3JUZXh0L0ZsdWVudE9yVGV4dFwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgTW9yZVJlY29tbWVuZGF0aW9ucyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL01vcmVSZWNvbW1lbmRhdGlvbnMvTW9yZVJlY29tbWVuZGF0aW9uc1wiO1xuaW1wb3J0IHsgUG9ja2V0TG9nZ2VkSW5DdGEgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Qb2NrZXRMb2dnZWRJbkN0YS9Qb2NrZXRMb2dnZWRJbkN0YVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVG9waWNzIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvVG9waWNzL1RvcGljc1wiO1xuaW1wb3J0IHsgVG9wU2l0ZXMgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlc1wiO1xuXG5jb25zdCBWSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG5jb25zdCBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuY29uc3QgQ0FSRFNfUEVSX1JPV19ERUZBVUxUID0gMztcbmNvbnN0IENBUkRTX1BFUl9ST1dfQ09NUEFDVF9XSURFID0gNDtcblxuZXhwb3J0IGNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgZ2V0IG51bVJvd3MoKSB7XG4gICAgY29uc3QgeyByb3dzUHJlZiwgbWF4Um93cywgUHJlZnMgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIHJvd3NQcmVmID8gUHJlZnMudmFsdWVzW3Jvd3NQcmVmXSA6IG1heFJvd3M7XG4gIH1cblxuICBfZGlzcGF0Y2hJbXByZXNzaW9uU3RhdHMoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBsZXQgY2FyZHNQZXJSb3cgPSBDQVJEU19QRVJfUk9XX0RFRkFVTFQ7XG4gICAgaWYgKFxuICAgICAgcHJvcHMuY29tcGFjdENhcmRzICYmXG4gICAgICBnbG9iYWwubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogMTA3MnB4KWApLm1hdGNoZXNcbiAgICApIHtcbiAgICAgIC8vIElmIHRoZSBzZWN0aW9uIGhhcyBjb21wYWN0IGNhcmRzIGFuZCB0aGUgdmlld3BvcnQgaXMgd2lkZSBlbm91Z2gsIHdlIHNob3dcbiAgICAgIC8vIDQgY29sdW1ucyBpbnN0ZWFkIG9mIDMuXG4gICAgICAvLyAkYnJlYWstcG9pbnQtd2lkZXN0ID0gMTA3MnB4IChmcm9tIF92YXJpYWJsZXMuc2NzcylcbiAgICAgIGNhcmRzUGVyUm93ID0gQ0FSRFNfUEVSX1JPV19DT01QQUNUX1dJREU7XG4gICAgfVxuICAgIGNvbnN0IG1heENhcmRzID0gY2FyZHNQZXJSb3cgKiB0aGlzLm51bVJvd3M7XG4gICAgY29uc3QgY2FyZHMgPSBwcm9wcy5yb3dzLnNsaWNlKDAsIG1heENhcmRzKTtcblxuICAgIGlmICh0aGlzLm5lZWRzSW1wcmVzc2lvblN0YXRzKGNhcmRzKSkge1xuICAgICAgcHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkltcHJlc3Npb25TdGF0cyh7XG4gICAgICAgICAgc291cmNlOiBwcm9wcy5ldmVudFNvdXJjZSxcbiAgICAgICAgICB0aWxlczogY2FyZHMubWFwKGxpbmsgPT4gKHsgaWQ6IGxpbmsuZ3VpZCB9KSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzID0gY2FyZHMubWFwKGxpbmsgPT4gbGluay5ndWlkKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHNlbmRzIGFuIGV2ZW50IHdoZW4gYSB1c2VyIHNlZXMgYSBzZXQgb2YgbmV3IGNvbnRlbnQuIElmIGNvbnRlbnRcbiAgLy8gY2hhbmdlcyB3aGlsZSB0aGUgcGFnZSBpcyBoaWRkZW4gKGkuZS4gcHJlbG9hZGVkIG9yIG9uIGEgaGlkZGVuIHRhYiksXG4gIC8vIG9ubHkgc2VuZCB0aGUgZXZlbnQgaWYgdGhlIHBhZ2UgYmVjb21lcyB2aXNpYmxlIGFnYWluLlxuICBzZW5kSW1wcmVzc2lvblN0YXRzT3JBZGRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuXG4gICAgaWYgKCFwcm9wcy5zaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzIHx8ICFwcm9wcy5kaXNwYXRjaCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoSW1wcmVzc2lvblN0YXRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNob3VsZCBvbmx5IGV2ZXIgc2VuZCB0aGUgbGF0ZXN0IGltcHJlc3Npb24gc3RhdHMgcGluZywgc28gcmVtb3ZlIGFueVxuICAgICAgLy8gb2xkZXIgbGlzdGVuZXJzLlxuICAgICAgaWYgKHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgICBwcm9wcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBXaGVuIHRoZSBwYWdlIGJlY29tZXMgdmlzaWJsZSwgc2VuZCB0aGUgaW1wcmVzc2lvbiBzdGF0cyBwaW5nIGlmIHRoZSBzZWN0aW9uIGlzbid0IGNvbGxhcHNlZC5cbiAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0
+
IHtcbiAgICAgICAgaWYgKHByb3BzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gVklTSUJMRSkge1xuICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5wcmVmLmNvbGxhcHNlZCkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hJbXByZXNzaW9uU3RhdHMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuc2VuZE5ld1RhYlJlaHlkcmF0ZWQodGhpcy5wcm9wcy5pbml0aWFsaXplZCk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5yb3dzLmxlbmd0aCAmJiAhdGhpcy5wcm9wcy5wcmVmLmNvbGxhcHNlZCkge1xuICAgICAgdGhpcy5zZW5kSW1wcmVzc2lvblN0YXRzT3JBZGRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlzQ29sbGFwc2VkID0gcHJvcHMucHJlZi5jb2xsYXBzZWQ7XG4gICAgY29uc3Qgd2FzQ29sbGFwc2VkID0gcHJldlByb3BzLnByZWYuY29sbGFwc2VkO1xuICAgIGlmIChcbiAgICAgIC8vIERvbid0IHNlbmQgaW1wcmVzc2lvbiBzdGF0cyBmb3IgdGhlIGVtcHR5IHN0YXRlXG4gICAgICBwcm9wcy5yb3dzLmxlbmd0aCAmJlxuICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHNlbmQgaW1wcmVzc2lvbiBzdGF0cyBpZiB0aGUgY29udGVudCBvZiB0aGUgY2FyZHMgaGFzIGNoYW5nZWRcbiAgICAgIC8vIGFuZCB0aGUgc2VjdGlvbiBpcyBub3QgY29sbGFwc2VkLi4uXG4gICAgICAoKHByb3BzLnJvd3MgIT09IHByZXZQcm9wcy5yb3dzICYmICFpc0NvbGxhcHNlZCkgfHxcbiAgICAgICAgLy8gb3IgaWYgd2UgYXJlIGV4cGFuZGluZyBhIHNlY3Rpb24gdGhhdCB3YXMgY29sbGFwc2VkLlxuICAgICAgICAod2FzQ29sbGFwc2VkICYmICFpc0NvbGxhcHNlZCkpXG4gICAgKSB7XG4gICAgICB0aGlzLnNlbmRJbXByZXNzaW9uU3RhdHNPckFkZExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNlbmROZXdUYWJSZWh5ZHJhdGVkKG5leHRQcm9wcy5pbml0aWFsaXplZCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbmVlZHNJbXByZXNzaW9uU3RhdHMoY2FyZHMpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzIHx8XG4gICAgICB0aGlzLmltcHJlc3Npb25DYXJkR3VpZHMubGVuZ3RoICE9PSBjYXJkcy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjYXJkc1tpXS5ndWlkICE9PSB0aGlzLmltcHJlc3Npb25DYXJkR3VpZHNbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGhlIE5FV19UQUJfUkVIWURSQVRFRCBldmVudCBpcyB1c2VkIHRvIGluZm9ybSBmZWVkcyB0aGF0IHRoZWlyXG4gIC8vIGRhdGEgaGFzIGJlZW4gY29uc3VtZWQgZS5nLiBmb3IgY291bnRpbmcgdGhlIG51bWJlciBvZiB0YWJzIHRoYXRcbiAgLy8gaGF2ZSByZW5kZXJlZCB0aGF0IGRhdGEuXG4gIHNlbmROZXdUYWJSZWh5ZHJhdGVkKGluaXRpYWxpemVkKSB7XG4gICAgaWYgKGluaXRpYWxpemVkICYmICF0aGlzLnJlbmRlck5vdGlmaWVkKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5BbHNvVG9NYWluKHsgdHlwZTogYXQuTkVXX1RBQl9SRUhZRFJBVEVELCBkYXRhOiB7fSB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMucmVuZGVyTm90aWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIGV2ZW50U291cmNlLFxuICAgICAgdGl0bGUsXG4gICAgICBpY29uLFxuICAgICAgcm93cyxcbiAgICAgIFBvY2tldCxcbiAgICAgIHRvcGljcyxcbiAgICAgIGVtcHR5U3RhdGUsXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIGNvbXBhY3RDYXJkcyxcbiAgICAgIHJlYWRfbW9yZV9lbmRwb2ludCxcbiAgICAgIGNvbnRleHRNZW51T3B0aW9ucyxcbiAgICAgIGluaXRpYWxpemVkLFxuICAgICAgbGVhcm5Nb3JlLFxuICAgICAgcHJlZixcbiAgICAgIHByaXZhY3lOb3RpY2VVUkwsXG4gICAgICBpc0ZpcnN0LFxuICAgICAgaXNMYXN0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgd2FpdGluZ0ZvclNwb2MgPVxuICAgICAgaWQgPT09IFwidG9wc3Rvcmllc1wiICYmIHRoaXMucHJvcHMuUG9ja2V0LndhaXRpbmdGb3JTcG9jO1xuICAgIGNvbnN0IG1heENhcmRzUGVyUm93ID0gY29tcGFjdENhcmRzXG4gICAgICA
/
IENBUkRTX1BFUl9ST1dfQ09NUEFDVF9XSURFXG4gICAgICA6IENBUkRTX1BFUl9ST1dfREVGQVVMVDtcbiAgICBjb25zdCB7IG51bVJvd3MgfSA9IHRoaXM7XG4gICAgY29uc3QgbWF4Q2FyZHMgPSBtYXhDYXJkc1BlclJvdyAqIG51bVJvd3M7XG4gICAgY29uc3QgbWF4Q2FyZHNPbk5hcnJvdyA9IENBUkRTX1BFUl9ST1dfREVGQVVMVCAqIG51bVJvd3M7XG5cbiAgICBjb25zdCB7IHBvY2tldEN0YSwgaXNVc2VyTG9nZ2VkSW4gfSA9IFBvY2tldCB8fCB7fTtcbiAgICBjb25zdCB7IHVzZUN0YSB9ID0gcG9ja2V0Q3RhIHx8IHt9O1xuXG4gICAgLy8gRG9uJ3QgZGlzcGxheSBhbnl0aGluZyB1bnRpbCB3ZSBoYXZlIGEgZGVmaW5pdHZlIHJlc3VsdCBmcm9tIFBvY2tldCxcbiAgICAvLyB0byBhdm9pZCBhIGZsYXNoIG9mIGxvZ2dlZCBvdXQgc3RhdGUgd2hpbGUgd2UgcmVuZGVyLlxuICAgIGNvbnN0IGlzUG9ja2V0TG9nZ2VkSW5EZWZpbmVkID1cbiAgICAgIGlzVXNlckxvZ2dlZEluID09PSB0cnVlIHx8IGlzVXNlckxvZ2dlZEluID09PSBmYWxzZTtcblxuICAgIGNvbnN0IGhhc1RvcGljcyA9IHRvcGljcyAmJiAhIXRvcGljcy5sZW5ndGg7XG5cbiAgICBjb25zdCBzaG91bGRTaG93UG9ja2V0Q3RhID1cbiAgICAgIGlkID09PSBcInRvcHN0b3JpZXNcIiAmJiB1c2VDdGEgJiYgaXNVc2VyTG9nZ2VkSW4gPT09IGZhbHNlO1xuXG4gICAgLy8gU2hvdyB0b3BpY3Mgb25seSBmb3IgdG9wIHN0b3JpZXMgYW5kIGlmIGl0IGhhcyBsb2FkZWQgd2l0aCB0b3BpY3MuXG4gICAgLy8gVGhlIGNsYXNzcyAudG9wLXN0b3JpZXMtYm90dG9tLWNvbnRhaW5lciBlbnN1cmVzIGNvbnRlbnQgZG9lc24ndCBzaGlmdCBhcyB0aGluZ3MgbG9hZC5cbiAgICBjb25zdCBzaG91bGRTaG93VG9waWNzID1cbiAgICAgIGlkID09PSBcInRvcHN0b3JpZXNcIiAmJlxuICAgICAgaGFzVG9waWNzICYmXG4gICAgICAoKHVzZUN0YSAmJiBpc1VzZXJMb2dnZWRJbiA9PT0gdHJ1ZSkgfHxcbiAgICAgICAgKCF1c2VDdGEgJiYgaXNQb2NrZXRMb2dnZWRJbkRlZmluZWQpKTtcblxuICAgIC8vIFdlIHVzZSB0b3BpY3MgdG8gZGV0ZXJtaW5lIGxhbmd1YWdlIHN1cHBvcnQgZm9yIHJlYWQgbW9yZS5cbiAgICBjb25zdCBzaG91bGRTaG93UmVhZE1vcmUgPSByZWFkX21vcmVfZW5kcG9pbnQgJiYgaGFzVG9waWNzO1xuXG4gICAgY29uc3QgcmVhbFJvd3MgPSByb3dzLnNsaWNlKDAsIG1heENhcmRzKTtcblxuICAgIC8vIFRoZSBlbXB0eSBzdGF0ZSBzaG91bGQgb25seSBiZSBzaG93biBhZnRlciB3ZSBoYXZlIGluaXRpYWxpemVkIGFuZCB0aGVyZSBpcyBubyBjb250ZW50LlxuICAgIC8vIE90aGVyd2lzZSwgd2Ugc2hvdWxkIHNob3cgcGxhY2Vob2xkZXJzLlxuICAgIGNvbnN0IHNob3VsZFNob3dFbXB0eVN0YXRlID0gaW5pdGlhbGl6ZWQgJiYgIXJvd3MubGVuZ3RoO1xuXG4gICAgY29uc3QgY2FyZHMgPSBbXTtcbiAgICBpZiAoIXNob3VsZFNob3dFbXB0eVN0YXRlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heENhcmRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGluayA9IHJlYWxSb3dzW2ldO1xuICAgICAgICAvLyBPbiBuYXJyb3cgdmlld3BvcnRzLCB3ZSBvbmx5IHNob3cgMyBjYXJkcyBwZXIgcm93LiBXZSdsbCBtYXJrIHRoZSByZXN0IGFzXG4gICAgICAgIC8vIC5oaWRlLWZvci1uYXJyb3cgdG8gaGlkZSBpbiBDU1MgdmlhIEBtZWRpYSBxdWVyeS5cbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gaSA
+
PSBtYXhDYXJkc09uTmFycm93ID8gXCJoaWRlLWZvci1uYXJyb3dcIiA6IFwiXCI7XG4gICAgICAgIGxldCB1c2VQbGFjZWhvbGRlciA9ICFsaW5rO1xuICAgICAgICAvLyBJZiB3ZSBhcmUgaW4gdGhlIHRoaXJkIGNhcmQgYW5kIHdhaXRpbmcgZm9yIHNwb2MsXG4gICAgICAgIC8vIHVzZSB0aGUgcGxhY2Vob2xkZXIuXG4gICAgICAgIGlmICghdXNlUGxhY2Vob2xkZXIgJiYgaSA9PT0gMiAmJiB3YWl0aW5nRm9yU3BvYykge1xuICAgICAgICAgIHVzZVBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXJkcy5wdXNoKFxuICAgICAgICAgICF1c2VQbGFjZWhvbGRlciA
/
IChcbiAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgaW5kZXg9e2l9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGxpbms9e2xpbmt9XG4gICAgICAgICAgICAgIGNvbnRleHRNZW51T3B0aW9ucz17Y29udGV4dE1lbnVPcHRpb25zfVxuICAgICAgICAgICAgICBldmVudFNvdXJjZT17ZXZlbnRTb3VyY2V9XG4gICAgICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uU3RhdHM9e3RoaXMucHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0c31cbiAgICAgICAgICAgICAgaXNXZWJFeHRlbnNpb249e3RoaXMucHJvcHMuaXNXZWJFeHRlbnNpb259XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8UGxhY2Vob2xkZXJDYXJkIGtleT17aX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8
+
XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNlY3Rpb25DbGFzc05hbWUgPSBbXG4gICAgICBcInNlY3Rpb25cIixcbiAgICAgIGNvbXBhY3RDYXJkcyA
/
IFwiY29tcGFjdC1jYXJkc1wiIDogXCJub3JtYWwtY2FyZHNcIixcbiAgICBdLmpvaW4oXCIgXCIpO1xuXG4gICAgLy8gPFNlY3Rpb24
+
IDwtLSBSZWFjdCBjb21wb25lbnRcbiAgICAvLyA8c2VjdGlvbj4gPC0tIEhUTUw1IGVsZW1lbnRcbiAgICByZXR1cm4gKFxuICAgICAgPENvbXBvbmVudFBlcmZUaW1lciB7Li4udGhpcy5wcm9wc30
+
XG4gICAgICAgIDxDb2xsYXBzaWJsZVNlY3Rpb25cbiAgICAgICAgICBjbGFzc05hbWU9e3NlY3Rpb25DbGFzc05hbWV9XG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGV2ZW50U291cmNlPXtldmVudFNvdXJjZX1cbiAgICAgICAgICBjb2xsYXBzZWQ9e3RoaXMucHJvcHMucHJlZi5jb2xsYXBzZWR9XG4gICAgICAgICAgc2hvd1ByZWZOYW1lPXsocHJlZiAmJiBwcmVmLmZlZWQpIHx8IGlkfVxuICAgICAgICAgIHByaXZhY3lOb3RpY2VVUkw9e3ByaXZhY3lOb3RpY2VVUkx9XG4gICAgICAgICAgUHJlZnM9e3RoaXMucHJvcHMuUHJlZnN9XG4gICAgICAgICAgaXNGaXhlZD17dGhpcy5wcm9wcy5pc0ZpeGVkfVxuICAgICAgICAgIGlzRmlyc3Q9e2lzRmlyc3R9XG4gICAgICAgICAgaXNMYXN0PXtpc0xhc3R9XG4gICAgICAgICAgbGVhcm5Nb3JlPXtsZWFybk1vcmV9XG4gICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgaXNXZWJFeHRlbnNpb249e3RoaXMucHJvcHMuaXNXZWJFeHRlbnNpb259XG4gICAgICAgID5cbiAgICAgICAgICB7IXNob3VsZFNob3dFbXB0eVN0YXRlICYmIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJzZWN0aW9uLWxpc3RcIiBzdHlsZT17eyBwYWRkaW5nOiAwIH19PlxuICAgICAgICAgICAgICB7Y2FyZHN9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3Nob3VsZFNob3dFbXB0eVN0YXRlICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VjdGlvbi1lbXB0eS1zdGF0ZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtcHR5LXN0YXRlXCI
+
XG4gICAgICAgICAgICAgICAge2VtcHR5U3RhdGUuaWNvbiAmJlxuICAgICAgICAgICAgICAgIGVtcHR5U3RhdGUuaWNvbi5zdGFydHNXaXRoKFwibW96LWV4dGVuc2lvbjovL1wiKSA
/
IChcbiAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVtcHR5LXN0YXRlLWljb24gaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IFwiYmFja2dyb3VuZC1pbWFnZVwiOiBgdXJsKCcke2VtcHR5U3RhdGUuaWNvbn0nKWAgfX1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGVtcHR5LXN0YXRlLWljb24gaWNvbiBpY29uLSR7ZW1wdHlTdGF0ZS5pY29ufWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPEZsdWVudE9yVGV4dCBtZXNzYWdlPXtlbXB0eVN0YXRlLm1lc3NhZ2V9PlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZW1wdHktc3RhdGUtbWVzc2FnZVwiIC8
+
XG4gICAgICAgICAgICAgICAgPC9GbHVlbnRPclRleHQ
+
XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aWQgPT09IFwidG9wc3Rvcmllc1wiICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXN0b3JpZXMtYm90dG9tLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICB7c2hvdWxkU2hvd1RvcGljcyAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyLXRvcGljc1wiPlxuICAgICAgICAgICAgICAgICAgPFRvcGljcyB0b3BpY3M9e3RoaXMucHJvcHMudG9waWNzfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgIHtzaG91bGRTaG93UG9ja2V0Q3RhICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXItY3RhXCI
+
XG4gICAgICAgICAgICAgICAgICA8UG9ja2V0TG9nZ2VkSW5DdGEgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXItbW9yZS1yZWNvbW1lbmRhdGlvbnNcIj5cbiAgICAgICAgICAgICAgICB7c2hvdWxkU2hvd1JlYWRNb3JlICYmIChcbiAgICAgICAgICAgICAgICAgIDxNb3JlUmVjb21tZW5kYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIHJlYWRfbW9yZV9lbmRwb2ludD17cmVhZF9tb3JlX2VuZHBvaW50fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQ29sbGFwc2libGVTZWN0aW9uPlxuICAgICAgPC9Db21wb25lbnRQZXJmVGltZXI
+
XG4gICAgKTtcbiAgfVxufVxuXG5TZWN0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCxcbiAgcm93czogW10sXG4gIGVtcHR5U3RhdGU6IHt9LFxuICBwcmVmOiB7fSxcbiAgdGl0bGU6IFwiXCIsXG59O1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbkludGwgPSBjb25uZWN0KHN0YXRlID0
+
ICh7XG4gIFByZWZzOiBzdGF0ZS5QcmVmcyxcbiAgUG9ja2V0OiBzdGF0ZS5Qb2NrZXQsXG59KSkoU2VjdGlvbik7XG5cbmV4cG9ydCBjbGFzcyBfU2VjdGlvbnMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyU2VjdGlvbnMoKSB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBlbmFibGVkU2VjdGlvbnMgPSB0aGlzLnByb3BzLlNlY3Rpb25zLmZpbHRlcihcbiAgICAgIHNlY3Rpb24gPT4gc2VjdGlvbi5lbmFibGVkXG4gICAgKTtcbiAgICBjb25zdCB7XG4gICAgICBzZWN0aW9uT3JkZXIsXG4gICAgICBcImZlZWRzLnRvcHNpdGVzXCI6IHNob3dUb3BTaXRlcyxcbiAgICB9ID0gdGhpcy5wcm9wcy5QcmVmcy52YWx1ZXM7XG4gICAgLy8gRW5hYmxlZCBzZWN0aW9ucyBkb2Vzbid0IGluY2x1ZGUgVG9wIFNpdGVzLCBzbyB3ZSBhZGQgaXQgaWYgZW5hYmxlZC5cbiAgICBjb25zdCBleHBlY3RlZENvdW50ID0gZW5hYmxlZFNlY3Rpb25zLmxlbmd0aCArIH5
+
c2hvd1RvcFNpdGVzO1xuXG4gICAgZm9yIChjb25zdCBzZWN0aW9uSWQgb2Ygc2VjdGlvbk9yZGVyLnNwbGl0KFwiLFwiKSkge1xuICAgICAgY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgICAgIGtleTogc2VjdGlvbklkLFxuICAgICAgICBpc0ZpcnN0OiBzZWN0aW9ucy5sZW5ndGggPT09IDAsXG4gICAgICAgIGlzTGFzdDogc2VjdGlvbnMubGVuZ3RoID09PSBleHBlY3RlZENvdW50IC0gMSxcbiAgICAgIH07XG4gICAgICBpZiAoc2VjdGlvbklkID09PSBcInRvcHNpdGVzXCIgJiYgc2hvd1RvcFNpdGVzKSB7XG4gICAgICAgIHNlY3Rpb25zLnB1c2goPFRvcFNpdGVzIHsuLi5jb21tb25Qcm9wc30gLz4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGVuYWJsZWRTZWN0aW9ucy5maW5kKHMgPT4gcy5pZCA9PT0gc2VjdGlvbklkKTtcbiAgICAgICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgICAgICBzZWN0aW9ucy5wdXNoKDxTZWN0aW9uSW50bCB7Li4uc2VjdGlvbn0gey4uLmNvbW1vblByb3BzfSAvPik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlY3Rpb25zO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb25zLWxpc3RcIj57dGhpcy5yZW5kZXJTZWN0aW9ucygpfTwvZGl2PjtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU2VjdGlvbnMgPSBjb25uZWN0KHN0YXRlID0
+
ICh7XG4gIFNlY3Rpb25zOiBzdGF0ZS5TZWN0aW9ucyxcbiAgUHJlZnM6IHN0YXRlLlByZWZzLFxufSkpKF9TZWN0aW9ucyk7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBjYXJkQ29udGV4dFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcbmltcG9ydCB7IExpbmtNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvTGlua01lbnUvTGlua01lbnVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNjcmVlbnNob3RVdGlscyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2NyZWVuc2hvdC11dGlsc1wiO1xuXG4vLyBLZWVwIHRyYWNrIG9mIHBlbmRpbmcgaW1hZ2UgbG9hZHMgdG8gb25seSByZXF1ZXN0IG9uY2VcbmNvbnN0IGdJbWFnZUxvYWRpbmcgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogQ2FyZCBjb21wb25lbnQuXG4gKiBDYXJkcyBhcmUgZm91bmQgd2l0aGluIGEgU2VjdGlvbiBjb21wb25lbnQgYW5kIGNvbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgYSBsaW5rIHN1Y2hcbiAqIGFzIHByZXZpZXcgaW1hZ2UsIHBhZ2UgdGl0bGUsIHBhZ2UgZGVzY3JpcHRpb24sIGFuZCBzb21lIGNvbnRleHQgYWJvdXQgaWYgdGhlIHBhZ2VcbiAqIHdhcyB2aXNpdGVkLCBib29rbWFya2VkLCB0cmVuZGluZyBldGMuLi5cbiAqIEVhY2ggU2VjdGlvbiBjYW4gbWFrZSBhbiB1bm9yZGVyZWQgbGlzdCBvZiBDYXJkcyB3aGljaCB3aWxsIGNyZWF0ZSBvbmUgaW5zdGFuZSBvZlxuICogdGhpcyBjbGFzcy4gRWFjaCBjYXJkIHdpbGwgdGhlbiBnZXQgYSBjb250ZXh0IG1lbnUgd2hpY2ggcmVmbGVjdHMgdGhlIGFjdGlvbnMgdGhhdFxuICogY2FuIGJlIGRvbmUgb24gdGhpcyBDYXJkLlxuICovXG5leHBvcnQgY2xhc3MgX0NhcmQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUNhcmQ6IG51bGwsXG4gICAgICBpbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICBjYXJkSW1hZ2U6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLm9uTWVudUJ1dHRvblVwZGF0ZSA9IHRoaXMub25NZW51QnV0dG9uVXBkYXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gY29uZGl0aW9uYWxseSBsb2FkIGFuIGltYWdlIGFuZCB1cGRhdGUgc3RhdGUgd2hlbiBpdCBsb2Fkcy5cbiAgICovXG4gIGFzeW5jIG1heWJlTG9hZEltYWdlKCkge1xuICAgIC8vIE5vIG5lZWQgdG8gbG9hZCBpZiBpdCdzIGFscmVhZHkgbG9hZGVkIG9yIG5vIGltYWdlXG4gICAgY29uc3QgeyBjYXJkSW1hZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjYXJkSW1hZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZVVybCA9IGNhcmRJbWFnZS51cmw7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmltYWdlTG9hZGVkKSB7XG4gICAgICAvLyBJbml0aWFsaXplIGEgcHJvbWlzZSB0byBzaGFyZSBhIGxvYWQgYWNyb3NzIG11bHRpcGxlIGNhcmQgdXBkYXRlc1xuICAgICAgaWYgKCFnSW1hZ2VMb2FkaW5nLmhhcyhpbWFnZVVybCkpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0
+
IHtcbiAgICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVzb2x2ZSk7XG4gICAgICAgICAgbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICAgIGxvYWRlci5zcmMgPSBpbWFnZVVybDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2F2ZSBhbmQgcmVtb3ZlIHRoZSBwcm9taXNlIG9ubHkgd2hpbGUgaXQncyBwZW5kaW5nXG4gICAgICAgIGdJbWFnZUxvYWRpbmcuc2V0KGltYWdlVXJsLCBsb2FkZXJQcm9taXNlKTtcbiAgICAgICAgbG9hZGVyUHJvbWlzZVxuICAgICAgICAgIC5jYXRjaChleCA9PiBleClcbiAgICAgICAgICAudGhlbigoKSA9PiBnSW1hZ2VMb2FkaW5nLmRlbGV0ZShpbWFnZVVybCkpXG4gICAgICAgICAgLmNhdGNoKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBpbWFnZSB3aGV0aGVyIGp1c3Qgc3RhcnRlZCBsb2FkaW5nIG9yIHJldXNlZCBwcm9taXNlXG4gICAgICBhd2FpdCBnSW1hZ2VMb2FkaW5nLmdldChpbWFnZVVybCk7XG5cbiAgICAgIC8vIE9ubHkgdXBkYXRlIHN0YXRlIGlmIHdlJ3JlIHN0aWxsIHdhaXRpbmcgdG8gbG9hZCB0aGUgb3JpZ2luYWwgaW1hZ2VcbiAgICAgIGlmIChcbiAgICAgICAgU2NyZWVuc2hvdFV0aWxzLmlzUmVtb3RlSW1hZ2VMb2NhbChcbiAgICAgICAgICB0aGlzLnN0YXRlLmNhcmRJbWFnZSxcbiAgICAgICAgICB0aGlzLnByb3BzLmxpbmsuaW1hZ2VcbiAgICAgICAgKSAmJlxuICAgICAgICAhdGhpcy5zdGF0ZS5pbWFnZUxvYWRlZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbWFnZUxvYWRlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHRvIG9idGFpbiB0aGUgbmV4dCBzdGF0ZSBiYXNlZCBvbiBuZXh0UHJvcHMgYW5kIHByZXZTdGF0ZS5cbiAgICpcbiAgICogTk9URTogUmVuYW1lIHRoaXMgbWV0aG9kIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB3aGVuIHdlIHVwZGF0ZSBSZWFjdFxuICAgKiAgICAgICB0byA
+
PSAxNi4zLiBXZSB3aWxsIG5lZWQgdG8gdXBkYXRlIHRlc3RzIGFzIHdlbGwuIFdlIGNhbm5vdCByZW5hbWUgdGhpc1xuICAgKiAgICAgICBtZXRob2QgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIG5vdyBiZWNhdXNlIHRoZXJlIGlzIGEgbWlzbWF0Y2ggaW5cbiAgICogICAgICAgdGhlIFJlYWN0IHZlcnNpb24gdGhhdCB3ZSBhcmUgdXNpbmcgZm9yIGJvdGggdGVzdGluZyBhbmQgcHJvZHVjdGlvbi5cbiAgICogICAgICAgKGkuZS4gcmVhY3QtdGVzdC1yZW5kZXIgPT4gXCIxNi4zLjJcIiwgcmVhY3QgPT4gXCIxNi4yLjBcIikuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2VuenltZS9ibG9iL21hc3Rlci9wYWNrYWdlcy9lbnp5bWUtYWRhcHRlci1yZWFjdC0xNi9wYWNrYWdlLmpzb24jTDQzLlxuICAgKi9cbiAgc3RhdGljIGdldE5leHRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGNvbnN0IHsgaW1hZ2UgfSA9IG5leHRQcm9wcy5saW5rO1xuICAgIGNvbnN0IGltYWdlSW5TdGF0ZSA9IFNjcmVlbnNob3RVdGlscy5pc1JlbW90ZUltYWdlTG9jYWwoXG4gICAgICBwcmV2U3RhdGUuY2FyZEltYWdlLFxuICAgICAgaW1hZ2VcbiAgICApO1xuICAgIGxldCBuZXh0U3RhdGUgPSBudWxsO1xuXG4gICAgLy8gSW1hZ2UgaXMgdXBkYXRpbmcuXG4gICAgaWYgKCFpbWFnZUluU3RhdGUgJiYgbmV4dFByb3BzLmxpbmspIHtcbiAgICAgIG5leHRTdGF0ZSA9IHsgaW1hZ2VMb2FkZWQ6IGZhbHNlIH07XG4gICAgfVxuXG4gICAgaWYgKGltYWdlSW5TdGF0ZSkge1xuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBTaW5jZSBpbWFnZSB3YXMgdXBkYXRlZCwgYXR0ZW1wdCB0byByZXZva2Ugb2xkIGltYWdlIGJsb2IgVVJMLCBpZiBpdCBleGlzdHMuXG4gICAgU2NyZWVuc2hvdFV0aWxzLm1heWJlUmV2b2tlQmxvYk9iamVjdFVSTChwcmV2U3RhdGUuY2FyZEltYWdlKTtcblxuICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZSB8fCB7fTtcbiAgICBuZXh0U3RhdGUuY2FyZEltYWdlID0gU2NyZWVuc2hvdFV0aWxzLmNyZWF0ZUxvY2FsSW1hZ2VPYmplY3QoaW1hZ2UpO1xuXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfVxuXG4gIG9uTWVudUJ1dHRvblVwZGF0ZShpc09wZW4pIHtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlQ2FyZDogdGhpcy5wcm9wcy5pbmRleCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUNhcmQ6IG51bGwgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCB0byB0ZWxlbWV0cnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaXRlbS5cbiAgICovXG4gIF9nZXRUZWxlbWV0cnlJbmZvKCkge1xuICAgIC8vIEZpbHRlciBvdXQgXCJoaXN0b3J5XCIgdHlwZSBmb3IgYmVpbmcgdGhlIGRlZmF1bHRcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnR5cGUgIT09IFwiaGlzdG9yeVwiKSB7XG4gICAgICByZXR1cm4geyB2YWx1ZTogeyBjYXJkX3R5cGU6IHRoaXMucHJvcHMubGluay50eXBlIH0gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnR5cGUgPT09IFwiZG93bmxvYWRcIikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuU0hPV19ET1dOTE9BRF9GSUxFLFxuICAgICAgICAgIGRhdGE6IHRoaXMucHJvcHMubGluayxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYWx0S2V5LCBidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5IH0gPSBldmVudDtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0Lk9QRU5fTElOSyxcbiAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHRoaXMucHJvcHMubGluaywge1xuICAgICAgICAgICAgZXZlbnQ6IHsgYWx0S2V5LCBidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5IH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5pc1dlYkV4dGVuc2lvbikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuV2ViRXh0RXZlbnQoYXQuV0VCRVhUX0NMSUNLLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLmV2ZW50U291cmNlLFxuICAgICAgICAgIHVybDogdGhpcy5wcm9wcy5saW5rLnVybCxcbiAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5fZ2V0VGVsZW1ldHJ5SW5mbygpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgICAgYWMuSW1wcmVzc2lvblN0YXRzKHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy5ldmVudFNvdXJjZSxcbiAgICAgICAgICAgIGNsaWNrOiAwLFxuICAgICAgICAgICAgdGlsZXM6IFt7IGlkOiB0aGlzLnByb3BzLmxpbmsuZ3VpZCwgcG9zOiB0aGlzLnByb3BzLmluZGV4IH1dLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tYXliZUxvYWRJbWFnZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMubWF5YmVMb2FkSW1hZ2UoKTtcbiAgfVxuXG4gIC8vIE5PVEU6IFJlbW92ZSB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgdXBkYXRlIFJlYWN0IHRvID49IDE2LjMgc2luY2UgUmVhY3Qgd2lsbFxuICAvLyAgICAgICBjYWxsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyBhdXRvbWF0aWNhbGx5LiBXZSB3aWxsIGFsc28gbmVlZCB0b1xuICAvLyAgICAgICByZW5hbWUgZ2V0TmV4dFN0YXRlRnJvbVByb3BzIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IF9DYXJkLmdldE5leHRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTk9URTogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSB1cGRhdGUgUmVhY3QgdG8gPj0gMTYuMyBzaW5jZSBSZWFjdCB3aWxsXG4gIC8vICAgICAgIGNhbGwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIGF1dG9tYXRpY2FsbHkuIFdlIHdpbGwgYWxzbyBuZWVkIHRvXG4gIC8vICAgICAgIHJlbmFtZSBnZXROZXh0U3RhdGVGcm9tUHJvcHMgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IF9DYXJkLmdldE5leHRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBTY3JlZW5zaG90VXRpbHMubWF5YmVSZXZva2VCbG9iT2JqZWN0VVJMKHRoaXMuc3RhdGUuY2FyZEltYWdlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpbmRleCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGxpbmssXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIGNvbnRleHRNZW51T3B0aW9ucyxcbiAgICAgIGV2ZW50U291cmNlLFxuICAgICAgc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0cyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRpdGxlID0gbGluay50aXRsZSB8fCBsaW5rLmhvc3RuYW1lO1xuICAgIGNvbnN0IGlzQ29udGV4dE1lbnVPcGVuID0gdGhpcy5zdGF0ZS5hY3RpdmVDYXJkID09PSBpbmRleDtcbiAgICAvLyBEaXNwbGF5IFwibm93XCIgYXMgXCJ0cmVuZGluZ1wiIHVudGlsIHdlIGhhdmUgbmV3IHN0cmluZ3MgIzM0MDJcbiAgICBjb25zdCB7IGljb24sIGZsdWVudElEIH0gPVxuICAgICAgY2FyZENvbnRleHRUeXBlc1tsaW5rLnR5cGUgPT09IFwibm93XCIgPyBcInRyZW5kaW5nXCIgOiBsaW5rLnR5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGhhc0ltYWdlID0gdGhpcy5zdGF0ZS5jYXJkSW1hZ2UgfHwgbGluay5oYXNJbWFnZTtcbiAgICBjb25zdCBpbWFnZVN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiB0aGlzLnN0YXRlLmNhcmRJbWFnZVxuICAgICAgICA
/
IGB1cmwoJHt0aGlzLnN0YXRlLmNhcmRJbWFnZS51cmx9KWBcbiAgICAgICAgOiBcIm5vbmVcIixcbiAgICB9O1xuICAgIGNvbnN0IG91dGVyQ2xhc3NOYW1lID0gW1xuICAgICAgXCJjYXJkLW91dGVyXCIsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBpc0NvbnRleHRNZW51T3BlbiAmJiBcImFjdGl2ZVwiLFxuICAgICAgcHJvcHMucGxhY2Vob2xkZXIgJiYgXCJwbGFjZWhvbGRlclwiLFxuICAgIF1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBjbGFzc05hbWU9e291dGVyQ2xhc3NOYW1lfT5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPXtsaW5rLnR5cGUgPT09IFwicG9ja2V0XCIgPyBsaW5rLm9wZW5fdXJsIDogbGluay51cmx9XG4gICAgICAgICAgb25DbGljaz17IXByb3BzLnBsYWNlaG9sZGVyID8gdGhpcy5vbkxpbmtDbGljayA6IHVuZGVmaW5lZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLXByZXZpZXctaW1hZ2Utb3V0ZXJcIj5cbiAgICAgICAgICAgICAge2hhc0ltYWdlICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjYXJkLXByZXZpZXctaW1hZ2Uke1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmltYWdlTG9hZGVkID8gXCIgbG9hZGVkXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbWFnZVN0eWxlfVxuICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1kZXRhaWxzXCI
+
XG4gICAgICAgICAgICAgIHtsaW5rLnR5cGUgPT09IFwiZG93bmxvYWRcIiAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FyZC1ob3N0LW5hbWUgYWx0ZXJuYXRlXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1tZW51LXNob3ctZmlsZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge2xpbmsuaG9zdG5hbWUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ob3N0LW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgIHtsaW5rLmhvc3RuYW1lLnNsaWNlKDAsIDEwMCl9XG4gICAgICAgICAgICAgICAgICB7bGluay50eXBlID09PSBcImRvd25sb2FkXCIgJiYgYCAgXFx1MjAxNCAke2xpbmsuZGVzY3JpcHRpb259YH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICAgICAgICAgICAgXCJjYXJkLXRleHRcIixcbiAgICAgICAgICAgICAgICAgIGljb24gPyBcIlwiIDogXCJuby1jb250ZXh0XCIsXG4gICAgICAgICAgICAgICAgICBsaW5rLmRlc2NyaXB0aW9uID8gXCJcIiA6IFwibm8tZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgICAgIGxpbmsuaG9zdG5hbWUgPyBcIlwiIDogXCJuby1ob3N0LW5hbWVcIixcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCIgXCIpfVxuICAgICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImNhcmQtdGl0bGVcIiBkaXI9XCJhdXRvXCI
+
XG4gICAgICAgICAgICAgICAgICB7bGluay50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNhcmQtZGVzY3JpcHRpb25cIiBkaXI9XCJhdXRvXCI
+
XG4gICAgICAgICAgICAgICAgICB7bGluay5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICA8L3A
+
XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGV4dFwiPlxuICAgICAgICAgICAgICAgIHtpY29uICYmICFsaW5rLmNvbnRleHQgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjYXJkLWNvbnRleHQtaWNvbiBpY29uIGljb24tJHtpY29ufWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2xpbmsuaWNvbiAmJiBsaW5rLmNvbnRleHQgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXJkLWNvbnRleHQtaWNvbiBpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke2xpbmsuaWNvbn0nKWAgfX1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7Zmx1ZW50SUQgJiYgIWxpbmsuY29udGV4dCAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGV4dC1sYWJlbFwiIGRhdGEtbDEwbi1pZD17Zmx1ZW50SUR9IC8
+
XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7bGluay5jb250ZXh0ICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1jb250ZXh0LWxhYmVsXCI
+
e2xpbmsuY29udGV4dH08L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2E
+
XG4gICAgICAgIHshcHJvcHMucGxhY2Vob2xkZXIgJiYgKFxuICAgICAgICAgIDxDb250ZXh0TWVudUJ1dHRvblxuICAgICAgICAgICAgdG9vbHRpcD1cIm5ld3RhYi1tZW51LWNvbnRlbnQtdG9vbHRpcFwiXG4gICAgICAgICAgICB0b29sdGlwQXJncz17eyB0aXRsZSB9fVxuICAgICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51QnV0dG9uVXBkYXRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMaW5rTWVudVxuICAgICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgc291cmNlPXtldmVudFNvdXJjZX1cbiAgICAgICAgICAgICAgb3B0aW9ucz17bGluay5jb250ZXh0TWVudU9wdGlvbnMgfHwgY29udGV4dE1lbnVPcHRpb25zfVxuICAgICAgICAgICAgICBzaXRlPXtsaW5rfVxuICAgICAgICAgICAgICBzaXRlSW5mbz17dGhpcy5fZ2V0VGVsZW1ldHJ5SW5mbygpfVxuICAgICAgICAgICAgICBzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzPXtzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0NvbnRleHRNZW51QnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5fQ2FyZC5kZWZhdWx0UHJvcHMgPSB7IGxpbms6IHt9IH07XG5leHBvcnQgY29uc3QgQ2FyZCA9IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgcGxhdGZvcm06IHN0YXRlLlByZWZzLnZhbHVlcy5wbGF0Zm9ybSxcbn0pKShfQ2FyZCk7XG5leHBvcnQgY29uc3QgUGxhY2Vob2xkZXJDYXJkID0gcHJvcHMgPT4gKFxuICA8Q2FyZCBwbGFjZWhvbGRlcj17dHJ1ZX0gY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9IC8
+

/
aWQ9MTQwMTQwNilcbiAgICogYmUgY29tcGFyYWJsZSBhY3Jvc3MgYm90aCBjaHJvbWUgYW5kIGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGFic05vdzogZnVuY3Rpb24gYWJzTm93KCkge1xuICAgIHJldHVybiB0aGlzLnRpbWVPcmlnaW4gKyB0aGlzLl9wZXJmLm5vdygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIHJldHVybnMgdGhlIGFic29sdXRlIHN0YXJ0VGltZSBmcm9tIHRoZSBtb3N0IHJlY2VudCBwZXJmb3JtYW5jZS5tYXJrKClcbiAgICogd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICB0aGUgbmFtZSB0byBsb29rdXAgdGhlIHN0YXJ0IHRpbWUgZm9yXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgdGhlIHJldHVybmVkIHN0YXJ0IHRpbWUsIGFzIGEgRE9NSGlnaFJlc1RpbWVTdGFtcFxuICAgKlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gICAgICAgIFwiTm8gTWFya3Mgd2l0aCB0aGUgbmFtZSAuLi5cIiBpZiBub25lIGFyZSBhdmFpbGFibGVcbiAgICpcbiAgICogQG5vdGUgQWx3YXlzIHN1cnJvdW5kIGNhbGxzIHRvIHRoaXMgYnkgdHJ5L2NhdGNoLiAgT3RoZXJ3aXNlIHlvdXIgY29kZVxuICAgKiBtYXkgZmFpbCB3aGVuIHRoZSBgcHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZ2AgcHJlZiBpcyB0cnVlLiAgV2hlblxuICAgKiB0aGlzIHByZWYgaXMgc2V0LCBhbGwgYXR0ZW1wdHMgdG8gZ2V0IG1hcmtzIHdpbGwgbGlrZWx5IGZhaWwsIHdoaWNoIHdpbGxcbiAgICogY2F1c2UgdGhpcyBtZXRob2QgdG8gdGhyb3cuXG4gICAqXG4gICAqIFNlZSBbYnVnIDEzNjkzMDNdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjkzMDMpXG4gICAqIGZvciBtb3JlIGluZm8uXG4gICAqL1xuICBnZXRNb3N0UmVjZW50QWJzTWFya1N0YXJ0QnlOYW1lKG5hbWUpIHtcbiAgICBsZXQgZW50cmllcyA9IHRoaXMuZ2V0RW50cmllc0J5TmFtZShuYW1lLCBcIm1hcmtcIik7XG5cbiAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1hcmtzIHdpdGggdGhlIG5hbWUgJHtuYW1lfWApO1xuICAgIH1cblxuICAgIGxldCBtb3N0UmVjZW50RW50cnkgPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHRoaXMuX3BlcmYudGltZU9yaWdpbiArIG1vc3RSZWNlbnRFbnRyeS5zdGFydFRpbWU7XG4gIH0sXG59O1xuXG50aGlzLnBlcmZTZXJ2aWNlID0gbmV3IF9QZXJmU2VydmljZSgpO1xuY29uc3QgRVhQT1JURURfU1lNQk9MUyA9IFtcIl9QZXJmU2VydmljZVwiLCBcInBlcmZTZXJ2aWNlXCJdO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgTW9yZVJlY29tbWVuZGF0aW9ucyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyByZWFkX21vcmVfZW5kcG9pbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHJlYWRfbW9yZV9lbmRwb2ludCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGFcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb3JlLXJlY29tbWVuZGF0aW9uc1wiXG4gICAgICAgICAgaHJlZj17cmVhZF9tb3JlX2VuZHBvaW50fVxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1wb2NrZXQtbW9yZS1yZWNvbW1lbmRhdGlvbnNcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIF9Qb2NrZXRMb2dnZWRJbkN0YSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwb2NrZXRDdGEgfSA9IHRoaXMucHJvcHMuUG9ja2V0O1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJwb2NrZXQtbG9nZ2VkLWluLWN0YVwiPlxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzTmFtZT1cInBvY2tldC1jdGEtYnV0dG9uXCJcbiAgICAgICAgICBocmVmPXtwb2NrZXRDdGEuY3RhVXJsID8gcG9ja2V0Q3RhLmN0YVVybCA6IFwiaHR0cHM6Ly9nZXRwb2NrZXQuY29tL1wifVxuICAgICAgICA
+
XG4gICAgICAgICAge3BvY2tldEN0YS5jdGFCdXR0b24gPyAoXG4gICAgICAgICAgICBwb2NrZXRDdGEuY3RhQnV0dG9uXG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxzcGFuIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1wb2NrZXQtY3RhLWJ1dHRvblwiIC8
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuXG4gICAgICAgIDxhXG4gICAgICAgICAgaHJlZj17cG9ja2V0Q3RhLmN0YVVybCA
/
IHBvY2tldEN0YS5jdGFVcmwgOiBcImh0dHBzOi8vZ2V0cG9ja2V0LmNvbS9cIn1cbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImN0YS10ZXh0XCI
+
XG4gICAgICAgICAgICB7cG9ja2V0Q3RhLmN0YVRleHQgPyAoXG4gICAgICAgICAgICAgIHBvY2tldEN0YS5jdGFUZXh0XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9XCJuZXd0YWItcG9ja2V0LWN0YS10ZXh0XCIgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2E
+
XG4gICAgICA8L3NwYW4
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgUG9ja2V0TG9nZ2VkSW5DdGEgPSBjb25uZWN0KHN0YXRlID0
+
ICh7IFBvY2tldDogc3RhdGUuUG9ja2V0IH0pKShcbiAgX1BvY2tldExvZ2dlZEluQ3RhXG4pO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgVG9waWMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXJsLCBuYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8bGk
+
XG4gICAgICAgIDxhIGtleT17bmFtZX0gaHJlZj17dXJsfT5cbiAgICAgICAgICB7bmFtZX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BpY3MgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdG9waWNzIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b3BpY3NcIj5cbiAgICAgICAgPHNwYW4gZGF0YS1sMTBuLWlkPVwibmV3dGFiLXBvY2tldC1yZWFkLW1vcmVcIiAvPlxuICAgICAgICA8dWw
+
XG4gICAgICAgICAge3RvcGljcyAmJlxuICAgICAgICAgICAgdG9waWNzLm1hcCh0ID0
+
IDxUb3BpYyBrZXk9e3QubmFtZX0gdXJsPXt0LnVybH0gbmFtZT17dC5uYW1lfSAvPil9XG4gICAgICAgIDwvdWw
+
XG4gICAgICA8L3NwYW4
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHtcbiAgTUlOX0NPUk5FUl9GQVZJQ09OX1NJWkUsXG4gIE1JTl9SSUNIX0ZBVklDT05fU0laRSxcbiAgVE9QX1NJVEVTX1NPVVJDRSxcbn0gZnJvbSBcIi4vVG9wU2l0ZXNDb25zdGFudHNcIjtcbmltcG9ydCB7IENvbGxhcHNpYmxlU2VjdGlvbiB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbGxhcHNpYmxlU2VjdGlvbi9Db2xsYXBzaWJsZVNlY3Rpb25cIjtcbmltcG9ydCB7IENvbXBvbmVudFBlcmZUaW1lciB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbXBvbmVudFBlcmZUaW1lci9Db21wb25lbnRQZXJmVGltZXJcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IE1vZGFsT3ZlcmxheVdyYXBwZXIgfSBmcm9tIFwiLi4vLi4vYXNyb3V0ZXIvY29tcG9uZW50cy9Nb2RhbE92ZXJsYXkvTW9kYWxPdmVybGF5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTZWFyY2hTaG9ydGN1dHNGb3JtIH0gZnJvbSBcIi4vU2VhcmNoU2hvcnRjdXRzRm9ybVwiO1xuaW1wb3J0IHsgVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XIH0gZnJvbSBcImNvbW1vbi9SZWR1Y2Vycy5qc21cIjtcbmltcG9ydCB7IFRvcFNpdGVGb3JtIH0gZnJvbSBcIi4vVG9wU2l0ZUZvcm1cIjtcbmltcG9ydCB7IFRvcFNpdGVMaXN0IH0gZnJvbSBcIi4vVG9wU2l0ZVwiO1xuXG5mdW5jdGlvbiB0b3BTaXRlSWNvblR5cGUobGluaykge1xuICBpZiAobGluay5jdXN0b21TY3JlZW5zaG90VVJMKSB7XG4gICAgcmV0dXJuIFwiY3VzdG9tX3NjcmVlbnNob3RcIjtcbiAgfVxuICBpZiAobGluay50aXBweVRvcEljb24gfHwgbGluay5mYXZpY29uUmVmID09PSBcInRpcHB5dG9wXCIpIHtcbiAgICByZXR1cm4gXCJ0aXBweXRvcFwiO1xuICB9XG4gIGlmIChsaW5rLmZhdmljb25TaXplID49IE1JTl9SSUNIX0ZBVklDT05fU0laRSkge1xuICAgIHJldHVybiBcInJpY2hfaWNvblwiO1xuICB9XG4gIGlmIChsaW5rLnNjcmVlbnNob3QgJiYgbGluay5mYXZpY29uU2l6ZSA
+
PSBNSU5fQ09STkVSX0ZBVklDT05fU0laRSkge1xuICAgIHJldHVybiBcInNjcmVlbnNob3Rfd2l0aF9pY29uXCI7XG4gIH1cbiAgaWYgKGxpbmsuc2NyZWVuc2hvdCkge1xuICAgIHJldHVybiBcInNjcmVlbnNob3RcIjtcbiAgfVxuICByZXR1cm4gXCJub19pbWFnZVwiO1xufVxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggVG9wU2l0ZXMgYW5kIGNvdW50cyB0eXBlcyBvZiBpbWFnZXMuXG4gKiBAcGFyYW0gYWNjIEFjY3VtdWxhdG9yIGZvciByZWR1Y2VyLlxuICogQHBhcmFtIHRvcHNpdGUgRW50cnkgaW4gVG9wU2l0ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvdW50VG9wU2l0ZXNJY29uc1R5cGVzKHRvcFNpdGVzKSB7XG4gIGNvbnN0IGNvdW50VG9wU2l0ZXNUeXBlcyA9IChhY2MsIGxpbmspID0
+
IHtcbiAgICBhY2NbdG9wU2l0ZUljb25UeXBlKGxpbmspXSsrO1xuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgcmV0dXJuIHRvcFNpdGVzLnJlZHVjZShjb3VudFRvcFNpdGVzVHlwZXMsIHtcbiAgICBjdXN0b21fc2NyZWVuc2hvdDogMCxcbiAgICBzY3JlZW5zaG90X3dpdGhfaWNvbjogMCxcbiAgICBzY3JlZW5zaG90OiAwLFxuICAgIHRpcHB5dG9wOiAwLFxuICAgIHJpY2hfaWNvbjogMCxcbiAgICBub19pbWFnZTogMCxcbiAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBfVG9wU2l0ZXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkVkaXRGb3JtQ2xvc2UgPSB0aGlzLm9uRWRpdEZvcm1DbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWFyY2hTaG9ydGN1dHNGb3JtQ2xvc2UgPSB0aGlzLm9uU2VhcmNoU2hvcnRjdXRzRm9ybUNsb3NlLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBzZXNzaW9uIHN0YXRpc3RpY3MgYWJvdXQgdGhlIHF1YWxpdHkgb2YgVG9wU2l0ZXMgaWNvbnMgYW5kIHBpbm5lZCBjb3VudC5cbiAgICovXG4gIF9kaXNwYXRjaFRvcFNpdGVzU3RhdHMoKSB7XG4gICAgY29uc3QgdG9wU2l0ZXMgPSB0aGlzLl9nZXRWaXNpYmxlVG9wU2l0ZXMoKS5maWx0ZXIoXG4gICAgICB0b3BTaXRlID0
+
IHRvcFNpdGUgIT09IG51bGwgJiYgdG9wU2l0ZSAhPT0gdW5kZWZpbmVkXG4gICAgKTtcbiAgICBjb25zdCB0b3BTaXRlc0ljb25zU3RhdHMgPSBjb3VudFRvcFNpdGVzSWNvbnNUeXBlcyh0b3BTaXRlcyk7XG4gICAgY29uc3QgdG9wU2l0ZXNQaW5uZWQgPSB0b3BTaXRlcy5maWx0ZXIoc2l0ZSA9PiAhIXNpdGUuaXNQaW5uZWQpLmxlbmd0aDtcbiAgICBjb25zdCBzZWFyY2hTaG9ydGN1dHMgPSB0b3BTaXRlcy5maWx0ZXIoc2l0ZSA9PiAhIXNpdGUuc2VhcmNoVG9wU2l0ZSlcbiAgICAgIC5sZW5ndGg7XG4gICAgLy8gRGlzcGF0Y2ggdGVsZW1ldHJ5IGV2ZW50IHdpdGggdGhlIGNvdW50IG9mIFRvcFNpdGVzIGltYWdlcyB0eXBlcy5cbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuQWxzb1RvTWFpbih7XG4gICAgICAgIHR5cGU6IGF0LlNBVkVfU0VTU0lPTl9QRVJGX0RBVEEsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0b3BzaXRlc19pY29uX3N0YXRzOiB0b3BTaXRlc0ljb25zU3RhdHMsXG4gICAgICAgICAgdG9wc2l0ZXNfcGlubmVkOiB0b3BTaXRlc1Bpbm5lZCxcbiAgICAgICAgICB0b3BzaXRlc19zZWFyY2hfc2hvcnRjdXRzOiBzZWFyY2hTaG9ydGN1dHMsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBUb3BTaXRlcyB0aGF0IGFyZSB2aXNpYmxlIGJhc2VkIG9uIHByZWZzIGFuZCB3aW5kb3cgd2lkdGguXG4gICAqL1xuICBfZ2V0VmlzaWJsZVRvcFNpdGVzKCkge1xuICAgIC8vIFdlIGhpZGUgMiBzaXRlcyBwZXIgcm93IHdoZW4gbm90IGluIHRoZSB3aWRlIGxheW91dC5cbiAgICBsZXQgc2l0ZXNQZXJSb3cgPSBUT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1c7XG4gICAgLy8gJGJyZWFrLXBvaW50LXdpZGVzdCA9IDEwNzJweCAoZnJvbSBfdmFyaWFibGVzLnNjc3MpXG4gICAgaWYgKCFnbG9iYWwubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogMTA3MnB4KWApLm1hdGNoZXMpIHtcbiAgICAgIHNpdGVzUGVyUm93IC09IDI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb3BzLlRvcFNpdGVzLnJvd3Muc2xpY2UoXG4gICAgICAwLFxuICAgICAgdGhpcy5wcm9wcy5Ub3BTaXRlc1Jvd3MgKiBzaXRlc1BlclJvd1xuICAgICk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fZGlzcGF0Y2hUb3BTaXRlc1N0YXRzKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9kaXNwYXRjaFRvcFNpdGVzU3RhdHMoKTtcbiAgfVxuXG4gIG9uRWRpdEZvcm1DbG9zZSgpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgc291cmNlOiBUT1BfU0lURVNfU09VUkNFLFxuICAgICAgICBldmVudDogXCJUT1BfU0lURVNfRURJVF9DTE9TRVwiLFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goeyB0eXBlOiBhdC5UT1BfU0lURVNfQ0FOQ0VMX0VESVQgfSk7XG4gIH1cblxuICBvblNlYXJjaFNob3J0Y3V0c0Zvcm1DbG9zZSgpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgc291cmNlOiBUT1BfU0lURVNfU09VUkNFLFxuICAgICAgICBldmVudDogXCJTRUFSQ0hfRURJVF9DTE9TRVwiLFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goeyB0eXBlOiBhdC5UT1BfU0lURVNfQ0xPU0VfU0VBUkNIX1NIT1JUQ1VUU19NT0RBTCB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgZWRpdEZvcm0sIHNob3dTZWFyY2hTaG9ydGN1dHNGb3JtIH0gPSBwcm9wcy5Ub3BTaXRlcztcbiAgICBjb25zdCBleHRyYU1lbnVPcHRpb25zID0gW1wiQWRkVG9wU2l0ZVwiXTtcbiAgICBpZiAocHJvcHMuUHJlZnMudmFsdWVzW1wiaW1wcm92ZXNlYXJjaC50b3BTaXRlU2VhcmNoU2hvcnRjdXRzXCJdKSB7XG4gICAgICBleHRyYU1lbnVPcHRpb25zLnB1c2goXCJBZGRTZWFyY2hTaG9ydGN1dFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbXBvbmVudFBlcmZUaW1lclxuICAgICAgICBpZD1cInRvcHNpdGVzXCJcbiAgICAgICAgaW5pdGlhbGl6ZWQ9e3Byb3BzLlRvcFNpdGVzLmluaXRpYWxpemVkfVxuICAgICAgICBkaXNwYXRjaD17cHJvcHMuZGlzcGF0Y2h9XG4gICAgICA
+
XG4gICAgICAgIDxDb2xsYXBzaWJsZVNlY3Rpb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0b3Atc2l0ZXNcIlxuICAgICAgICAgIGljb249XCJ0b3BzaXRlc1wiXG4gICAgICAgICAgaWQ9XCJ0b3BzaXRlc1wiXG4gICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGUgfHwgeyBpZDogXCJuZXd0YWItc2VjdGlvbi1oZWFkZXItdG9wc2l0ZXNcIiB9fVxuICAgICAgICAgIGV4dHJhTWVudU9wdGlvbnM9e2V4dHJhTWVudU9wdGlvbnN9XG4gICAgICAgICAgc2hvd1ByZWZOYW1lPVwiZmVlZHMudG9wc2l0ZXNcIlxuICAgICAgICAgIGV2ZW50U291cmNlPXtUT1BfU0lURVNfU09VUkNFfVxuICAgICAgICAgIGNvbGxhcHNlZD17XG4gICAgICAgICAgICBwcm9wcy5Ub3BTaXRlcy5wcmVmID8gcHJvcHMuVG9wU2l0ZXMucHJlZi5jb2xsYXBzZWQgOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgaXNGaXhlZD17cHJvcHMuaXNGaXhlZH1cbiAgICAgICAgICBpc0ZpcnN0PXtwcm9wcy5pc0ZpcnN0fVxuICAgICAgICAgIGlzTGFzdD17cHJvcHMuaXNMYXN0fVxuICAgICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgPlxuICAgICAgICAgIDxUb3BTaXRlTGlzdFxuICAgICAgICAgICAgVG9wU2l0ZXM9e3Byb3BzLlRvcFNpdGVzfVxuICAgICAgICAgICAgVG9wU2l0ZXNSb3dzPXtwcm9wcy5Ub3BTaXRlc1Jvd3N9XG4gICAgICAgICAgICBkaXNwYXRjaD17cHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICB0b3BTaXRlSWNvblR5cGU9e3RvcFNpdGVJY29uVHlwZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC10b3BzaXRlcy13cmFwcGVyXCI
+
XG4gICAgICAgICAgICB7ZWRpdEZvcm0gJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtdG9wc2l0ZXNcIj5cbiAgICAgICAgICAgICAgICA8TW9kYWxPdmVybGF5V3JhcHBlclxuICAgICAgICAgICAgICAgICAgdW5zdHlsZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uRWRpdEZvcm1DbG9zZX1cbiAgICAgICAgICAgICAgICAgIGlubmVyQ2xhc3NOYW1lPVwibW9kYWxcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxUb3BTaXRlRm9ybVxuICAgICAgICAgICAgICAgICAgICBzaXRlPXtwcm9wcy5Ub3BTaXRlcy5yb3dzW2VkaXRGb3JtLmluZGV4XX1cbiAgICAgICAgICAgICAgICAgICAgb25DbG9zZT17dGhpcy5vbkVkaXRGb3JtQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICAgICAgICB7Li4uZWRpdEZvcm19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvTW9kYWxPdmVybGF5V3JhcHBlcj5cbiAgICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3Nob3dTZWFyY2hTaG9ydGN1dHNGb3JtICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LXNlYXJjaC1zaG9ydGN1dHNcIj5cbiAgICAgICAgICAgICAgICA8TW9kYWxPdmVybGF5V3JhcHBlclxuICAgICAgICAgICAgICAgICAgdW5zdHlsZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uU2VhcmNoU2hvcnRjdXRzRm9ybUNsb3NlfVxuICAgICAgICAgICAgICAgICAgaW5uZXJDbGFzc05hbWU9XCJtb2RhbFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPFNlYXJjaFNob3J0Y3V0c0Zvcm1cbiAgICAgICAgICAgICAgICAgICAgVG9wU2l0ZXM9e3Byb3BzLlRvcFNpdGVzfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uU2VhcmNoU2hvcnRjdXRzRm9ybUNsb3NlfVxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgICAgPC9Nb2RhbE92ZXJsYXlXcmFwcGVyPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDwvQ29sbGFwc2libGVTZWN0aW9uPlxuICAgICAgPC9Db21wb25lbnRQZXJmVGltZXI
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVG9wU2l0ZXMgPSBjb25uZWN0KChzdGF0ZSwgcHJvcHMpID0
+
ICh7XG4gIC8vIEZvciBTUE9DIEV4cGVyaW1lbnQgb25seSwgdGFrZSBUb3BTaXRlcyBmcm9tIERpc2NvdmVyeVN0cmVhbSBUb3BTaXRlcyB0aGF0IHRha2VzIGluIFNQT0MgRGF0YVxuICBUb3BTaXRlczogcHJvcHMuVG9wU2l0ZXNXaXRoU3BvYyB8fCBzdGF0ZS5Ub3BTaXRlcyxcbiAgUHJlZnM6IHN0YXRlLlByZWZzLFxuICBUb3BTaXRlc1Jvd3M6IHN0YXRlLlByZWZzLnZhbHVlcy50b3BTaXRlc1Jvd3MsXG59KSkoX1RvcFNpdGVzKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBjb25zdCBUT1BfU0lURVNfU09VUkNFID0gXCJUT1BfU0lURVNcIjtcbmV4cG9ydCBjb25zdCBUT1BfU0lURVNfQ09OVEVYVF9NRU5VX09QVElPTlMgPSBbXG4gIFwiQ2hlY2tQaW5Ub3BTaXRlXCIsXG4gIFwiRWRpdFRvcFNpdGVcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJPcGVuSW5OZXdXaW5kb3dcIixcbiAgXCJPcGVuSW5Qcml2YXRlV2luZG93XCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiQmxvY2tVcmxcIixcbiAgXCJEZWxldGVVcmxcIixcbl07XG5leHBvcnQgY29uc3QgVE9QX1NJVEVTX1NQT0NfQ09OVEVYVF9NRU5VX09QVElPTlMgPSBbXG4gIFwiUGluU3BvY1RvcFNpdGVcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJPcGVuSW5OZXdXaW5kb3dcIixcbiAgXCJPcGVuSW5Qcml2YXRlV2luZG93XCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiQmxvY2tVcmxcIixcbiAgXCJTaG93UHJpdmFjeUluZm9cIixcbl07XG4vLyB0aGUgc3BlY2lhbCB0b3Agc2l0ZSBmb3Igc2VhcmNoIHNob3J0Y3V0IGV4cGVyaW1lbnQgY2FuIG9ubHkgaGF2ZSB0aGUgb3B0aW9uIHRvIHVucGluICh3aGljaCByZW1vdmVzKSB0aGUgdG9wc2l0ZVxuZXhwb3J0IGNvbnN0IFRPUF9TSVRFU19TRUFSQ0hfU0hPUlRDVVRTX0NPTlRFWFRfTUVOVV9PUFRJT05TID0gW1xuICBcIkNoZWNrUGluVG9wU2l0ZVwiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIkJsb2NrVXJsXCIsXG5dO1xuLy8gbWluaW11bSBzaXplIG5lY2Vzc2FyeSB0byBzaG93IGEgcmljaCBpY29uIGluc3RlYWQgb2YgYSBzY3JlZW5zaG90XG5leHBvcnQgY29uc3QgTUlOX1JJQ0hfRkFWSUNPTl9TSVpFID0gOTY7XG4vLyBtaW5pbXVtIHNpemUgbmVjZXNzYXJ5IHRvIHNob3cgYW55IGljb24gaW4gdGhlIHRvcCBsZWZ0IGNvcm5lciB3aXRoIGEgc2NyZWVuc2hvdFxuZXhwb3J0IGNvbnN0IE1JTl9DT1JORVJfRkFWSUNPTl9TSVpFID0gMTY7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUT1BfU0lURVNfU09VUkNFIH0gZnJvbSBcIi4vVG9wU2l0ZXNDb25zdGFudHNcIjtcblxuZXhwb3J0IGNsYXNzIFNlbGVjdGFibGVTZWFyY2hTaG9ydGN1dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBzaG9ydGN1dCwgc2VsZWN0ZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaW1hZ2VTdHlsZSA9IHsgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtzaG9ydGN1dC50aXBweVRvcEljb259XCIpYCB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1zaXRlLW91dGVyIHNlYXJjaC1zaG9ydGN1dFwiPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIGlkPXtzaG9ydGN1dC5rZXl3b3JkfVxuICAgICAgICAgIG5hbWU9e3Nob3J0Y3V0LmtleXdvcmR9XG4gICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWR9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25DaGFuZ2V9XG4gICAgICAgIC8
+
XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPXtzaG9ydGN1dC5rZXl3b3JkfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1zaXRlLWlubmVyXCI
+
XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aWxlXCI
+
XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidG9wLXNpdGUtaWNvbiByaWNoLWljb25cIlxuICAgICAgICAgICAgICAgICAgc3R5bGU9e2ltYWdlU3R5bGV9XG4gICAgICAgICAgICAgICAgICBkYXRhLWZhbGxiYWNrPVwiQFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1zaXRlLWljb24gc2VhcmNoLXRvcHNpdGVcIiAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGRpcj1cImF1dG9cIj57c2hvcnRjdXQua2V5d29yZH08L3NwYW4
+
XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2VhcmNoU2hvcnRjdXRzRm9ybSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNhbmNlbEJ1dHRvbkNsaWNrID0gdGhpcy5vbkNhbmNlbEJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNhdmVCdXR0b25DbGljayA9IHRoaXMub25TYXZlQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcblxuICAgIC8vIGNsb25lIHRoZSBzaG9ydGN1dHMgYW5kIGFkZCB0aGVtIHRvIHRoZSBzdGF0ZSBzbyB3ZSBjYW4gYWRkIGlzU2VsZWN0ZWQgcHJvcGVydHlcbiAgICBjb25zdCBzaG9ydGN1dHMgPSBbXTtcbiAgICBjb25zdCB7IHJvd3MsIHNlYXJjaFNob3J0Y3V0cyB9ID0gcHJvcHMuVG9wU2l0ZXM7XG4gICAgc2VhcmNoU2hvcnRjdXRzLmZvckVhY2goc2hvcnRjdXQgPT4ge1xuICAgICAgc2hvcnRjdXRzLnB1c2goe1xuICAgICAgICAuLi5zaG9ydGN1dCxcbiAgICAgICAgaXNTZWxlY3RlZDogISFyb3dzLmZpbmQoXG4gICAgICAgICAgcm93ID0
+
XG4gICAgICAgICAgICByb3cgJiZcbiAgICAgICAgICAgIHJvdy5pc1Bpbm5lZCAmJlxuICAgICAgICAgICAgcm93LnNlYXJjaFRvcFNpdGUgJiZcbiAgICAgICAgICAgIHJvdy5sYWJlbCA9PT0gc2hvcnRjdXQua2V5d29yZFxuICAgICAgICApLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgc2hvcnRjdXRzIH07XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG4gICAgY29uc3QgeyBuYW1lLCBjaGVja2VkIH0gPSB0YXJnZXQ7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgY29uc3Qgc2hvcnRjdXRzID0gcHJldlN0YXRlLnNob3J0Y3V0cy5zbGljZSgpO1xuICAgICAgbGV0IHNob3J0Y3V0ID0gc2hvcnRjdXRzLmZpbmQoKHsga2V5d29yZCB9KSA9PiBrZXl3b3JkID09PSBuYW1lKTtcbiAgICAgIHNob3J0Y3V0LmlzU2VsZWN0ZWQgPSBjaGVja2VkO1xuICAgICAgcmV0dXJuIHsgc2hvcnRjdXRzIH07XG4gICAgfSk7XG4gIH1cblxuICBvbkNhbmNlbEJ1dHRvbkNsaWNrKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIG9uU2F2ZUJ1dHRvbkNsaWNrKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIHdlcmUgYW55IGNoYW5nZXMgYW5kIGFjdCBhY2NvcmRpbmdseVxuICAgIGNvbnN0IHsgcm93cyB9ID0gdGhpcy5wcm9wcy5Ub3BTaXRlcztcbiAgICBjb25zdCBwaW5RdWV1ZSA9IFtdO1xuICAgIGNvbnN0IHVucGluUXVldWUgPSBbXTtcbiAgICB0aGlzLnN0YXRlLnNob3J0Y3V0cy5mb3JFYWNoKHNob3J0Y3V0ID0
+
IHtcbiAgICAgIGNvbnN0IGFscmVhZHlQaW5uZWQgPSByb3dzLmZpbmQoXG4gICAgICAgIHJvdyA9PlxuICAgICAgICAgIHJvdyAmJlxuICAgICAgICAgIHJvdy5pc1Bpbm5lZCAmJlxuICAgICAgICAgIHJvdy5zZWFyY2hUb3BTaXRlICYmXG4gICAgICAgICAgcm93LmxhYmVsID09PSBzaG9ydGN1dC5rZXl3b3JkXG4gICAgICApO1xuICAgICAgaWYgKHNob3J0Y3V0LmlzU2VsZWN0ZWQgJiYgIWFscmVhZHlQaW5uZWQpIHtcbiAgICAgICAgcGluUXVldWUucHVzaCh0aGlzLl9zZWFyY2hUb3BTaXRlKHNob3J0Y3V0KSk7XG4gICAgICB9IGVsc2UgaWYgKCFzaG9ydGN1dC5pc1NlbGVjdGVkICYmIGFscmVhZHlQaW5uZWQpIHtcbiAgICAgICAgdW5waW5RdWV1ZS5wdXNoKHtcbiAgICAgICAgICB1cmw6IGFscmVhZHlQaW5uZWQudXJsLFxuICAgICAgICAgIHNlYXJjaFZlbmRvcjogc2hvcnRjdXQuc2hvcnRVUkwsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVGVsbCB0aGUgZmVlZCB0byBkbyB0aGUgd29yay5cbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgIHR5cGU6IGF0LlVQREFURV9QSU5ORURfU0VBUkNIX1NIT1JUQ1VUUyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFkZGVkU2hvcnRjdXRzOiBwaW5RdWV1ZSxcbiAgICAgICAgICBkZWxldGVkU2hvcnRjdXRzOiB1bnBpblF1ZXVlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gU2VuZCB0aGUgVGVsZW1ldHJ5IHBpbmdzLlxuICAgIHBpblF1ZXVlLmZvckVhY2goc2hvcnRjdXQgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgICAgZXZlbnQ6IFwiU0VBUkNIX0VESVRfQUREXCIsXG4gICAgICAgICAgdmFsdWU6IHsgc2VhcmNoX3ZlbmRvcjogc2hvcnRjdXQuc2VhcmNoVmVuZG9yIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuICAgIHVucGluUXVldWUuZm9yRWFjaChzaG9ydGN1dCA9PiB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICAgIHNvdXJjZTogVE9QX1NJVEVTX1NPVVJDRSxcbiAgICAgICAgICBldmVudDogXCJTRUFSQ0hfRURJVF9ERUxFVEVcIixcbiAgICAgICAgICB2YWx1ZTogeyBzZWFyY2hfdmVuZG9yOiBzaG9ydGN1dC5zZWFyY2hWZW5kb3IgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIF9zZWFyY2hUb3BTaXRlKHNob3J0Y3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogc2hvcnRjdXQudXJsLFxuICAgICAgc2VhcmNoVG9wU2l0ZTogdHJ1ZSxcbiAgICAgIGxhYmVsOiBzaG9ydGN1dC5rZXl3b3JkLFxuICAgICAgc2VhcmNoVmVuZG9yOiBzaG9ydGN1dC5zaG9ydFVSTCxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybSBjbGFzc05hbWU9XCJ0b3BzaXRlLWZvcm1cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtc2hvcnRjdXRzLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxoM1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VjdGlvbi10aXRsZSBncmV5LXRpdGxlXCJcbiAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy1hZGQtc2VhcmNoLWVuZ2luZS1oZWFkZXJcIlxuICAgICAgICAgIC8
+
XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3J0Y3V0cy5tYXAoc2hvcnRjdXQgPT4gKFxuICAgICAgICAgICAgICA8U2VsZWN0YWJsZVNlYXJjaFNob3J0Y3V0XG4gICAgICAgICAgICAgICAga2V5PXtzaG9ydGN1dC5rZXl3b3JkfVxuICAgICAgICAgICAgICAgIHNob3J0Y3V0PXtzaG9ydGN1dH1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17c2hvcnRjdXQuaXNTZWxlY3RlZH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjYW5jZWxcIlxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItdG9wc2l0ZXMtY2FuY2VsLWJ1dHRvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJkb25lXCJcbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblNhdmVCdXR0b25DbGlja31cbiAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy1zYXZlLWJ1dHRvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7XG4gIE1JTl9DT1JORVJfRkFWSUNPTl9TSVpFLFxuICBNSU5fUklDSF9GQVZJQ09OX1NJWkUsXG4gIFRPUF9TSVRFU19DT05URVhUX01FTlVfT1BUSU9OUyxcbiAgVE9QX1NJVEVTX1NQT0NfQ09OVEVYVF9NRU5VX09QVElPTlMsXG4gIFRPUF9TSVRFU19TRUFSQ0hfU0hPUlRDVVRTX0NPTlRFWFRfTUVOVV9PUFRJT05TLFxuICBUT1BfU0lURVNfU09VUkNFLFxufSBmcm9tIFwiLi9Ub3BTaXRlc0NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTGlua01lbnUgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9MaW5rTWVudS9MaW5rTWVudVwiO1xuaW1wb3J0IHsgSW1wcmVzc2lvblN0YXRzIH0gZnJvbSBcIi4uL0Rpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cy9JbXByZXNzaW9uU3RhdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNjcmVlbnNob3RVdGlscyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2NyZWVuc2hvdC11dGlsc1wiO1xuaW1wb3J0IHsgVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XIH0gZnJvbSBcImNvbW1vbi9SZWR1Y2Vycy5qc21cIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcbmNvbnN0IFNQT0NfVFlQRSA9IFwiU1BPQ1wiO1xuXG5leHBvcnQgY2xhc3MgVG9wU2l0ZUxpbmsgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgc2NyZWVuc2hvdEltYWdlOiBudWxsIH07XG4gICAgdGhpcy5vbkRyYWdFdmVudCA9IHRoaXMub25EcmFnRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uS2V5UHJlc3MgPSB0aGlzLm9uS2V5UHJlc3MuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qXG4gICAqIEhlbHBlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgZHJvcCB6b25lIHNob3VsZCBhbGxvdyBhIGRyb3AuIFdlIG9ubHkgYWxsb3dcbiAgICogZHJvcHBpbmcgdG9wIHNpdGVzIGZvciBub3cuXG4gICAqL1xuICBfYWxsb3dEcm9wKGUpIHtcbiAgICByZXR1cm4gZS5kYXRhVHJhbnNmZXIudHlwZXMuaW5jbHVkZXMoXCJ0ZXh0L3RvcHNpdGUtaW5kZXhcIik7XG4gIH1cblxuICBvbkRyYWdFdmVudChldmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgIC8vIFN0b3AgYW55IGxpbmsgY2xpY2tzIGlmIHdlIHN0YXJ0ZWQgYW55IGRyYWdnaW5nXG4gICAgICAgIGlmICh0aGlzLmRyYWdnZWQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgICAgICB0aGlzLmRyYWdnZWQgPSB0cnVlO1xuICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xuICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvdG9wc2l0ZS1pbmRleFwiLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgICAgICAgZXZlbnQudGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkRyYWdFdmVudChcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICAgIHRoaXMucHJvcHMubGluayxcbiAgICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRyYWdlbmRcIjpcbiAgICAgICAgdGhpcy5wcm9wcy5vbkRyYWdFdmVudChldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgICBjYXNlIFwiZHJvcFwiOlxuICAgICAgICBpZiAodGhpcy5fYWxsb3dEcm9wKGV2ZW50KSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkRyYWdFdmVudChldmVudCwgdGhpcy5wcm9wcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgICAgIC8vIEJsb2NrIHRoZSBzY3JvbGwgd2hlZWwgZnJvbSBhcHBlYXJpbmcgZm9yIG1pZGRsZSBjbGlja3Mgb24gc2VhcmNoIHRvcCBzaXRlc1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAxICYmIHRoaXMucHJvcHMubGluay5zZWFyY2hUb3BTaXRlKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNldCBhdCB0aGUgZmlyc3QgbW91c2UgZXZlbnQgb2YgYSBwb3RlbnRpYWwgZHJhZ1xuICAgICAgICB0aGlzLmRyYWdnZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBvYnRhaW4gdGhlIG5leHQgc3RhdGUgYmFzZWQgb24gbmV4dFByb3BzIGFuZCBwcmV2U3RhdGUuXG4gICAqXG4gICAqIE5PVEU6IFJlbmFtZSB0aGlzIG1ldGhvZCB0byBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgd2hlbiB3ZSB1cGRhdGUgUmVhY3RcbiAgICogICAgICAgdG8gPj0gMTYuMy4gV2Ugd2lsbCBuZWVkIHRvIHVwZGF0ZSB0ZXN0cyBhcyB3ZWxsLiBXZSBjYW5ub3QgcmVuYW1lIHRoaXNcbiAgICogICAgICAgbWV0aG9kIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyBub3cgYmVjYXVzZSB0aGVyZSBpcyBhIG1pc21hdGNoIGluXG4gICAqICAgICAgIHRoZSBSZWFjdCB2ZXJzaW9uIHRoYXQgd2UgYXJlIHVzaW5nIGZvciBib3RoIHRlc3RpbmcgYW5kIHByb2R1Y3Rpb24uXG4gICAqICAgICAgIChpLmUuIHJlYWN0LXRlc3QtcmVuZGVyID0
+
IFwiMTYuMy4yXCIsIHJlYWN0ID0
+
IFwiMTYuMi4wXCIpLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9lbnp5bWUvYmxvYi9tYXN0ZXIvcGFja2FnZXMvZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYvcGFja2FnZS5qc29uI0w0My5cbiAgICovXG4gIHN0YXRpYyBnZXROZXh0U3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBjb25zdCB7IHNjcmVlbnNob3QgfSA9IG5leHRQcm9wcy5saW5rO1xuICAgIGNvbnN0IGltYWdlSW5TdGF0ZSA9IFNjcmVlbnNob3RVdGlscy5pc1JlbW90ZUltYWdlTG9jYWwoXG4gICAgICBwcmV2U3RhdGUuc2NyZWVuc2hvdEltYWdlLFxuICAgICAgc2NyZWVuc2hvdFxuICAgICk7XG4gICAgaWYgKGltYWdlSW5TdGF0ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2luY2UgaW1hZ2Ugd2FzIHVwZGF0ZWQsIGF0dGVtcHQgdG8gcmV2b2tlIG9sZCBpbWFnZSBibG9iIFVSTCwgaWYgaXQgZXhpc3RzLlxuICAgIFNjcmVlbnNob3RVdGlscy5tYXliZVJldm9rZUJsb2JPYmplY3RVUkwocHJldlN0YXRlLnNjcmVlbnNob3RJbWFnZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2NyZWVuc2hvdEltYWdlOiBTY3JlZW5zaG90VXRpbHMuY3JlYXRlTG9jYWxJbWFnZU9iamVjdChzY3JlZW5zaG90KSxcbiAgICB9O1xuICB9XG5cbiAgLy8gTk9URTogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSB1cGRhdGUgUmVhY3QgdG8gPj0gMTYuMyBzaW5jZSBSZWFjdCB3aWxsXG4gIC8vICAgICAgIGNhbGwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIGF1dG9tYXRpY2FsbHkuIFdlIHdpbGwgYWxzbyBuZWVkIHRvXG4gIC8vICAgICAgIHJlbmFtZSBnZXROZXh0U3RhdGVGcm9tUHJvcHMgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlID0gVG9wU2l0ZUxpbmsuZ2V0TmV4dFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICB9XG4gIH1cblxuICAvLyBOT1RFOiBSZW1vdmUgdGhpcyBmdW5jdGlvbiB3aGVuIHdlIHVwZGF0ZSBSZWFjdCB0byA
+
PSAxNi4zIHNpbmNlIFJlYWN0IHdpbGxcbiAgLy8gICAgICAgY2FsbCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgYXV0b21hdGljYWxseS4gV2Ugd2lsbCBhbHNvIG5lZWQgdG9cbiAgLy8gICAgICAgcmVuYW1lIGdldE5leHRTdGF0ZUZyb21Qcm9wcyB0byBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlID0gVG9wU2l0ZUxpbmsuZ2V0TmV4dFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgdGhpcy5zdGF0ZSk7XG4gICAgaWYgKG5leHRTdGF0ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIFNjcmVlbnNob3RVdGlscy5tYXliZVJldm9rZUJsb2JPYmplY3RVUkwodGhpcy5zdGF0ZS5zY3JlZW5zaG90SW1hZ2UpO1xuICB9XG5cbiAgb25LZXlQcmVzcyhldmVudCkge1xuICAgIC8vIElmIHdlIGhhdmUgdGFiYmVkIHRvIGEgc2VhcmNoIHNob3J0Y3V0IHRvcCBzaXRlLCBhbmQgd2UgY2xpY2sgJ2VudGVyJyxcbiAgICAvLyB3ZSBzaG91bGQgZXhlY3V0ZSB0aGUgb25DbGljayBmdW5jdGlvbi4gVGhpcyBuZWVkcyB0byBiZSBhZGRlZCBiZWNhdXNlXG4gICAgLy8gc2VhcmNoIHRvcCBzaXRlcyBhcmUgYW5jaG9yIHRhZ3Mgd2l0aG91dCBhbiBocmVmLiBTZWUgYnVnIDE0ODMxMzVcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnNlYXJjaFRvcFNpdGUgJiYgZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFN0eWxlLFxuICAgICAgaXNEcmFnZ2FibGUsXG4gICAgICBsaW5rLFxuICAgICAgb25DbGljayxcbiAgICAgIHRpdGxlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRvcFNpdGVPdXRlckNsYXNzTmFtZSA9IGB0b3Atc2l0ZS1vdXRlciR7XG4gICAgICBjbGFzc05hbWUgPyBgICR7Y2xhc3NOYW1lfWAgOiBcIlwiXG4gICAgfSR7bGluay5pc0RyYWdnZWQgPyBcIiBkcmFnZ2VkXCIgOiBcIlwifSR7XG4gICAgICBsaW5rLnNlYXJjaFRvcFNpdGUgPyBcIiBzZWFyY2gtc2hvcnRjdXRcIiA6IFwiXCJcbiAgICB9YDtcbiAgICBjb25zdCB7IHRpcHB5VG9wSWNvbiwgZmF2aWNvblNpemUgfSA9IGxpbms7XG4gICAgY29uc3QgW2xldHRlckZhbGxiYWNrXSA9IHRpdGxlO1xuICAgIGxldCBpbWFnZUNsYXNzTmFtZTtcbiAgICBsZXQgaW1hZ2VTdHlsZTtcbiAgICBsZXQgc2hvd1NtYWxsRmF2aWNvbiA9IGZhbHNlO1xuICAgIGxldCBzbWFsbEZhdmljb25TdHlsZTtcbiAgICBsZXQgc21hbGxGYXZpY29uRmFsbGJhY2s7XG4gICAgbGV0IGhhc1NjcmVlbnNob3RJbWFnZSA9XG4gICAgICB0aGlzLnN0YXRlLnNjcmVlbnNob3RJbWFnZSAmJiB0aGlzLnN0YXRlLnNjcmVlbnNob3RJbWFnZS51cmw7XG4gICAgaWYgKGRlZmF1bHRTdHlsZSkge1xuICAgICAgLy8gZm9yY2Ugbm8gc3R5bGVzIChsZXR0ZXIgZmFsbGJhY2spIGV2ZW4gaWYgdGhlIGxpbmsgaGFzIGltYWdlcnlcbiAgICAgIHNtYWxsRmF2aWNvbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChsaW5rLnNlYXJjaFRvcFNpdGUpIHtcbiAgICAgIGltYWdlQ2xhc3NOYW1lID0gXCJ0b3Atc2l0ZS1pY29uIHJpY2gtaWNvblwiO1xuICAgICAgaW1hZ2VTdHlsZSA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaW5rLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7dGlwcHlUb3BJY29ufSlgLFxuICAgICAgfTtcbiAgICAgIHNtYWxsRmF2aWNvblN0eWxlID0geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHt0aXBweVRvcEljb259KWAgfTtcbiAgICB9IGVsc2UgaWYgKGxpbmsuY3VzdG9tU2NyZWVuc2hvdFVSTCkge1xuICAgICAgLy8gYXNzdW1lIGhpZ2ggcXVhbGl0eSBjdXN0b20gc2NyZWVuc2hvdCBhbmQgdXNlIHJpY2ggaWNvbiBzdHlsZXMgYW5kIGNsYXNzIG5hbWVzXG5cbiAgICAgIC8vIFRvcFNpdGUgc3BvYyBleHBlcmltZW50IG9ubHlcbiAgICAgIGNvbnN0IHNwb2NJbWdVUkwgPVxuICAgICAgICBsaW5rLnR5cGUgPT09IFNQT0NfVFlQRSA
/
IGxpbmsuY3VzdG9tU2NyZWVuc2hvdFVSTCA6IFwiXCI7XG5cbiAgICAgIGltYWdlQ2xhc3NOYW1lID0gXCJ0b3Atc2l0ZS1pY29uIHJpY2gtaWNvblwiO1xuICAgICAgaW1hZ2VTdHlsZSA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaW5rLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBoYXNTY3JlZW5zaG90SW1hZ2VcbiAgICAgICAgICA
/
IGB1cmwoJHt0aGlzLnN0YXRlLnNjcmVlbnNob3RJbWFnZS51cmx9KWBcbiAgICAgICAgICA6IGB1cmwoJHtzcG9jSW1nVVJMfSlgLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRpcHB5VG9wSWNvbiB8fCBmYXZpY29uU2l6ZSA
+
PSBNSU5fUklDSF9GQVZJQ09OX1NJWkUpIHtcbiAgICAgIC8vIHN0eWxlcyBhbmQgY2xhc3MgbmFtZXMgZm9yIHRvcCBzaXRlcyB3aXRoIHJpY2ggaWNvbnNcbiAgICAgIGltYWdlQ2xhc3NOYW1lID0gXCJ0b3Atc2l0ZS1pY29uIHJpY2gtaWNvblwiO1xuICAgICAgaW1hZ2VTdHlsZSA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaW5rLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7dGlwcHlUb3BJY29uIHx8IGxpbmsuZmF2aWNvbn0pYCxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0eWxlcyBhbmQgY2xhc3MgbmFtZXMgZm9yIHRvcCBzaXRlcyB3aXRoIHNjcmVlbnNob3QgKyBzbWFsbCBpY29uIGluIHRvcCBsZWZ0IGNvcm5lclxuICAgICAgaW1hZ2VDbGFzc05hbWUgPSBgc2NyZWVuc2hvdCR7aGFzU2NyZWVuc2hvdEltYWdlID8gXCIgYWN0aXZlXCIgOiBcIlwifWA7XG4gICAgICBpbWFnZVN0eWxlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGhhc1NjcmVlbnNob3RJbWFnZVxuICAgICAgICAgID8gYHVybCgke3RoaXMuc3RhdGUuc2NyZWVuc2hvdEltYWdlLnVybH0pYFxuICAgICAgICAgIDogXCJub25lXCIsXG4gICAgICB9O1xuXG4gICAgICAvLyBvbmx5IHNob3cgYSBmYXZpY29uIGluIHRvcCBsZWZ0IGlmIGl0J3MgZ3JlYXRlciB0aGFuIDE2eDE2XG4gICAgICBpZiAoZmF2aWNvblNpemUgPj0gTUlOX0NPUk5FUl9GQVZJQ09OX1NJWkUpIHtcbiAgICAgICAgc2hvd1NtYWxsRmF2aWNvbiA9IHRydWU7XG4gICAgICAgIHNtYWxsRmF2aWNvblN0eWxlID0geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtsaW5rLmZhdmljb259KWAgfTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzU2NyZWVuc2hvdEltYWdlKSB7XG4gICAgICAgIC8vIERvbid0IHNob3cgYSBzbWFsbCBmYXZpY29uIGlmIHRoZXJlIGlzIG5vIHNjcmVlbnNob3QsIGJlY2F1c2UgdGhhdFxuICAgICAgICAvLyB3b3VsZCByZXN1bHQgaW4gdHdvIGZhbGxiYWNrIGljb25zXG4gICAgICAgIHNob3dTbWFsbEZhdmljb24gPSB0cnVlO1xuICAgICAgICBzbWFsbEZhdmljb25GYWxsYmFjayA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBkcmFnZ2FibGVQcm9wcyA9IHt9O1xuICAgIGlmIChpc0RyYWdnYWJsZSkge1xuICAgICAgZHJhZ2dhYmxlUHJvcHMgPSB7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMub25EcmFnRXZlbnQsXG4gICAgICAgIG9uRHJhZ0VuZDogdGhpcy5vbkRyYWdFdmVudCxcbiAgICAgICAgb25EcmFnU3RhcnQ6IHRoaXMub25EcmFnRXZlbnQsXG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uRHJhZ0V2ZW50LFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9e3RvcFNpdGVPdXRlckNsYXNzTmFtZX1cbiAgICAgICAgb25Ecm9wPXt0aGlzLm9uRHJhZ0V2ZW50fVxuICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLm9uRHJhZ0V2ZW50fVxuICAgICAgICBvbkRyYWdFbnRlcj17dGhpcy5vbkRyYWdFdmVudH1cbiAgICAgICAgb25EcmFnTGVhdmU9e3RoaXMub25EcmFnRXZlbnR9XG4gICAgICAgIHsuLi5kcmFnZ2FibGVQcm9wc31cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3Atc2l0ZS1pbm5lclwiPlxuICAgICAgICAgIHsvKiBXZSBkb24ndCB5ZXQgc3VwcG9ydCBhbiBhY2Nlc3NpYmxlIGRyYWctYW5kLWRyb3AgaW1wbGVtZW50YXRpb24sIHNlZSBCdWcgMTU1MjAwNSAqL31cbiAgICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1pcy12YWxpZCAqL31cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidG9wLXNpdGUtYnV0dG9uXCJcbiAgICAgICAgICAgIGhyZWY9e2xpbmsuc2VhcmNoVG9wU2l0ZSA
/
IHVuZGVmaW5lZCA6IGxpbmsudXJsfVxuICAgICAgICAgICAgdGFiSW5kZXg9XCIwXCJcbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMub25LZXlQcmVzc31cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICBkcmFnZ2FibGU9e3RydWV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0aWxlXCJcbiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49e3RydWV9XG4gICAgICAgICAgICAgIGRhdGEtZmFsbGJhY2s9e2xldHRlckZhbGxiYWNrfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17aW1hZ2VDbGFzc05hbWV9IHN0eWxlPXtpbWFnZVN0eWxlfSAvPlxuICAgICAgICAgICAgICB7bGluay5zZWFyY2hUb3BTaXRlICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1zaXRlLWljb24gc2VhcmNoLXRvcHNpdGVcIiAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7c2hvd1NtYWxsRmF2aWNvbiAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidG9wLXNpdGUtaWNvbiBkZWZhdWx0LWljb25cIlxuICAgICAgICAgICAgICAgICAgZGF0YS1mYWxsYmFjaz17c21hbGxGYXZpY29uRmFsbGJhY2sgJiYgbGV0dGVyRmFsbGJhY2t9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17c21hbGxGYXZpY29uU3R5bGV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B0aXRsZSAke2xpbmsuaXNQaW5uZWQgPyBcInBpbm5lZFwiIDogXCJcIn1gfT5cbiAgICAgICAgICAgICAge2xpbmsuaXNQaW5uZWQgJiYgPGRpdiBjbGFzc05hbWU9XCJpY29uIGljb24tcGluLXNtYWxsXCIgLz59XG4gICAgICAgICAgICAgIDxzcGFuIGRpcj1cImF1dG9cIj57dGl0bGV9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY
+
XG4gICAgICAgICAgICB7bGluay50eXBlID09PSBTUE9DX1RZUEUgPyAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvcC1zaXRlLXNwb2MtbGFiZWxcIj5TcG9uc29yZWQ8L3NwYW4
+
XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8L2E
+
XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIHtsaW5rLnR5cGUgPT09IFNQT0NfVFlQRSA
/
IChcbiAgICAgICAgICAgIDxJbXByZXNzaW9uU3RhdHNcbiAgICAgICAgICAgICAgZmxpZ2h0SWQ9e2xpbmsuZmxpZ2h0SWR9XG4gICAgICAgICAgICAgIHJvd3M9e1tcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogbGluay5pZCxcbiAgICAgICAgICAgICAgICAgIHBvczogbGluay5wb3MsXG4gICAgICAgICAgICAgICAgICBzaGltOiBsaW5rLnNoaW0gJiYgbGluay5zaGltLmltcHJlc3Npb24sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIHNvdXJjZT17VE9QX1NJVEVTX1NPVVJDRX1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5Ub3BTaXRlTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHRpdGxlOiBcIlwiLFxuICBsaW5rOiB7fSxcbiAgaXNEcmFnZ2FibGU6IHRydWUsXG59O1xuXG5leHBvcnQgY2xhc3MgVG9wU2l0ZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBzaG93Q29udGV4dE1lbnU6IGZhbHNlIH07XG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTWVudVVwZGF0ZSA9IHRoaXMub25NZW51VXBkYXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0IHRvIHRlbGVtZXRyeSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpdGVtLlxuICAgKi9cbiAgX2dldFRlbGVtZXRyeUluZm8oKSB7XG4gICAgY29uc3QgdmFsdWUgPSB7IGljb25fdHlwZTogdGhpcy5wcm9wcy5saW5rLmljb25UeXBlIH07XG4gICAgLy8gRmlsdGVyIG91dCBcIm5vdF9waW5uZWRcIiB0eXBlIGZvciBiZWluZyB0aGUgZGVmYXVsdFxuICAgIGlmICh0aGlzLnByb3BzLmxpbmsuaXNQaW5uZWQpIHtcbiAgICAgIHZhbHVlLmNhcmRfdHlwZSA9IFwicGlubmVkXCI7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmxpbmsuc2VhcmNoVG9wU2l0ZSkge1xuICAgICAgLy8gU2V0IHRoZSBjYXJkX3R5cGUgYXMgXCJzZWFyY2hcIiByZWdhcmRsZXNzIG9mIGl0cyBwaW5uaW5nIHN0YXR1c1xuICAgICAgdmFsdWUuY2FyZF90eXBlID0gXCJzZWFyY2hcIjtcbiAgICAgIHZhbHVlLnNlYXJjaF92ZW5kb3IgPSB0aGlzLnByb3BzLmxpbmsuaG9zdG5hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmxpbmsudHlwZSA9PT0gU1BPQ19UWVBFKSB7XG4gICAgICB2YWx1ZS5jYXJkX3R5cGUgPSBcInNwb2NcIjtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgfVxuXG4gIHVzZXJFdmVudChldmVudCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoXG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLl9nZXRUZWxlbWV0cnlJbmZvKClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBvbkxpbmtDbGljayhldmVudCkge1xuICAgIHRoaXMudXNlckV2ZW50KFwiQ0xJQ0tcIik7XG5cbiAgICAvLyBTcGVjaWFsbHkgaGFuZGxlIGEgdG9wIHNpdGUgbGluayBjbGljayBmb3IgXCJ0eXBlZFwiIGZyZWNlbmN5IGJvbnVzIGFzXG4gICAgLy8gc3BlY2lmaWVkIGFzIGEgcHJvcGVydHkgb24gdGhlIGxpbmsuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGFsdEtleSwgYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5LCBzaGlmdEtleSB9ID0gZXZlbnQ7XG4gICAgaWYgKCF0aGlzLnByb3BzLmxpbmsuc2VhcmNoVG9wU2l0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuT1BFTl9MSU5LLFxuICAgICAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24odGhpcy5wcm9wcy5saW5rLCB7XG4gICAgICAgICAgICBldmVudDogeyBhbHRLZXksIGJ1dHRvbiwgY3RybEtleSwgbWV0YUtleSwgc2hpZnRLZXkgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIC8vIEZpcmUgb2ZmIGEgc3BvYyBzcGVjaWZpYyBpbXByZXNzaW9uLlxuICAgICAgaWYgKHRoaXMucHJvcHMubGluay50eXBlID09PSBTUE9DX1RZUEUpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgICAgc291cmNlOiBUT1BfU0lURVNfU09VUkNFLFxuICAgICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgICB0aWxlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMubGluay5pZCxcbiAgICAgICAgICAgICAgICBwb3M6IHRoaXMucHJvcHMubGluay5wb3MsXG4gICAgICAgICAgICAgICAgc2hpbTogdGhpcy5wcm9wcy5saW5rLnNoaW0gJiYgdGhpcy5wcm9wcy5saW5rLnNoaW0uY2xpY2ssXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0LkZJTExfU0VBUkNIX1RFUk0sXG4gICAgICAgICAgZGF0YTogeyBsYWJlbDogdGhpcy5wcm9wcy5saW5rLmxhYmVsIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG9uTWVudVVwZGF0ZShpc09wZW4pIHtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQWN0aXZhdGUodGhpcy5wcm9wcy5pbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMub25BY3RpdmF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbGluayB9ID0gcHJvcHM7XG4gICAgY29uc3QgaXNDb250ZXh0TWVudU9wZW4gPSBwcm9wcy5hY3RpdmVJbmRleCA9PT0gcHJvcHMuaW5kZXg7XG4gICAgY29uc3QgdGl0bGUgPSBsaW5rLmxhYmVsIHx8IGxpbmsuaG9zdG5hbWU7XG4gICAgY29uc3QgbWVudU9wdGlvbnMgPVxuICAgICAgbGluay50eXBlICE9PSBTUE9DX1RZUEVcbiAgICAgICAgPyBUT1BfU0lURVNfQ09OVEVYVF9NRU5VX09QVElPTlNcbiAgICAgICAgOiBUT1BfU0lURVNfU1BPQ19DT05URVhUX01FTlVfT1BUSU9OUztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9wU2l0ZUxpbmtcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uTGlua0NsaWNrfVxuICAgICAgICBvbkRyYWdFdmVudD17dGhpcy5wcm9wcy5vbkRyYWdFdmVudH1cbiAgICAgICAgY2xhc3NOYW1lPXtgJHtwcm9wcy5jbGFzc05hbWUgfHwgXCJcIn0ke1xuICAgICAgICAgIGlzQ29udGV4dE1lbnVPcGVuID8gXCIgYWN0aXZlXCIgOiBcIlwiXG4gICAgICAgIH1gfVxuICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICA
+
XG4gICAgICAgIDxkaXY
+
XG4gICAgICAgICAgPENvbnRleHRNZW51QnV0dG9uXG4gICAgICAgICAgICB0b29sdGlwPVwibmV3dGFiLW1lbnUtY29udGVudC10b29sdGlwXCJcbiAgICAgICAgICAgIHRvb2x0aXBBcmdzPXt7IHRpdGxlIH19XG4gICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5vbk1lbnVVcGRhdGV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExpbmtNZW51XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgICAgaW5kZXg9e3Byb3BzLmluZGV4fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5vbk1lbnVVcGRhdGV9XG4gICAgICAgICAgICAgIG9wdGlvbnM9e1xuICAgICAgICAgICAgICAgIGxpbmsuc2VhcmNoVG9wU2l0ZVxuICAgICAgICAgICAgICAgICAgPyBUT1BfU0lURVNfU0VBUkNIX1NIT1JUQ1VUU19DT05URVhUX01FTlVfT1BUSU9OU1xuICAgICAgICAgICAgICAgICAgOiBtZW51T3B0aW9uc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNpdGU9e2xpbmt9XG4gICAgICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uU3RhdHM9e2xpbmsudHlwZSA9PT0gU1BPQ19UWVBFfVxuICAgICAgICAgICAgICBzaXRlSW5mbz17dGhpcy5fZ2V0VGVsZW1ldHJ5SW5mbygpfVxuICAgICAgICAgICAgICBzb3VyY2U9e1RPUF9TSVRFU19TT1VSQ0V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQ29udGV4dE1lbnVCdXR0b24
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Ub3BTaXRlTGluaz5cbiAgICApO1xuICB9XG59XG5Ub3BTaXRlLmRlZmF1bHRQcm9wcyA9IHtcbiAgbGluazoge30sXG4gIG9uQWN0aXZhdGUoKSB7fSxcbn07XG5cbmV4cG9ydCBjbGFzcyBUb3BTaXRlUGxhY2Vob2xkZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkVkaXRCdXR0b25DbGljayA9IHRoaXMub25FZGl0QnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uRWRpdEJ1dHRvbkNsaWNrKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogYXQuVE9QX1NJVEVTX0VESVQsXG4gICAgICBkYXRhOiB7IGluZGV4OiB0aGlzLnByb3BzLmluZGV4IH0sXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3BTaXRlTGlua1xuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXtgcGxhY2Vob2xkZXIgJHt0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCBcIlwifWB9XG4gICAgICAgIGlzRHJhZ2dhYmxlPXtmYWxzZX1cbiAgICAgID5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJjb250ZXh0LW1lbnUtYnV0dG9uIGVkaXQtYnV0dG9uIGljb25cIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1tZW51LXRvcHNpdGVzLXBsYWNlaG9sZGVyLXRvb2x0aXBcIlxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25FZGl0QnV0dG9uQ2xpY2t9XG4gICAgICAgIC8
+
XG4gICAgICA8L1RvcFNpdGVMaW5rPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvcFNpdGVMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBnZXQgREVGQVVMVF9TVEFURSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZlSW5kZXg6IG51bGwsXG4gICAgICBkcmFnZ2VkSW5kZXg6IG51bGwsXG4gICAgICBkcmFnZ2VkU2l0ZTogbnVsbCxcbiAgICAgIGRyYWdnZWRUaXRsZTogbnVsbCxcbiAgICAgIHRvcFNpdGVzUHJldmlldzogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IFRvcFNpdGVMaXN0LkRFRkFVTFRfU1RBVEU7XG4gICAgdGhpcy5vbkRyYWdFdmVudCA9IHRoaXMub25EcmFnRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQWN0aXZhdGUgPSB0aGlzLm9uQWN0aXZhdGUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUpIHtcbiAgICAgIGNvbnN0IHByZXZUb3BTaXRlcyA9IHRoaXMucHJvcHMuVG9wU2l0ZXMgJiYgdGhpcy5wcm9wcy5Ub3BTaXRlcy5yb3dzO1xuICAgICAgY29uc3QgbmV3VG9wU2l0ZXMgPSBuZXh0UHJvcHMuVG9wU2l0ZXMgJiYgbmV4dFByb3BzLlRvcFNpdGVzLnJvd3M7XG4gICAgICBpZiAoXG4gICAgICAgIHByZXZUb3BTaXRlcyAmJlxuICAgICAgICBwcmV2VG9wU2l0ZXNbdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXhdICYmXG4gICAgICAgIHByZXZUb3BTaXRlc1t0aGlzLnN0YXRlLmRyYWdnZWRJbmRleF0udXJsID09PVxuICAgICAgICAgIHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUudXJsICYmXG4gICAgICAgICghbmV3VG9wU2l0ZXNbdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXhdIHx8XG4gICAgICAgICAgbmV3VG9wU2l0ZXNbdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXhdLnVybCAhPT1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUudXJsKVxuICAgICAgKSB7XG4gICAgICAgIC8vIFdlIGdvdCB0aGUgbmV3IG9yZGVyIGZyb20gdGhlIHJlZHV4IHN0b3JlIHZpYSBwcm9wcy4gV2UgY2FuIGNsZWFyIHN0YXRlIG5vdy5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZShUb3BTaXRlTGlzdC5ERUZBVUxUX1NUQVRFKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1c2VyRXZlbnQoZXZlbnQsIGluZGV4KSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgIGV2ZW50LFxuICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgIGFjdGlvbl9wb3NpdGlvbjogaW5kZXgsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBvbkRyYWdFdmVudChldmVudCwgaW5kZXgsIGxpbmssIHRpdGxlKSB7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgIHRoaXMuZHJvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkcmFnZ2VkSW5kZXg6IGluZGV4LFxuICAgICAgICAgIGRyYWdnZWRTaXRlOiBsaW5rLFxuICAgICAgICAgIGRyYWdnZWRUaXRsZTogdGl0bGUsXG4gICAgICAgICAgYWN0aXZlSW5kZXg6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVzZXJFdmVudChcIkRSQUdcIiwgaW5kZXgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgIGlmICghdGhpcy5kcm9wcGVkKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIGRyb3AgZXZlbnQsIHJlc2V0IHRoZSBzdGF0ZSB0byB0aGUgZGVmYXVsdC5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKFRvcFNpdGVMaXN0LkRFRkFVTFRfU1RBVEUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuc3RhdGUuZHJhZ2dlZEluZGV4KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvcFNpdGVzUHJldmlldzogbnVsbCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdG9wU2l0ZXNQcmV2aWV3OiB0aGlzLl9tYWtlVG9wU2l0ZXNQcmV2aWV3KGluZGV4KSB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgICAgIGlmIChpbmRleCAhPT0gdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLmRyb3BwZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgICAgICBhYy5BbHNvVG9NYWluKHtcbiAgICAgICAgICAgICAgdHlwZTogYXQuVE9QX1NJVEVTX0lOU0VSVCxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHNpdGU6IHtcbiAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5zdGF0ZS5kcmFnZ2VkU2l0ZS51cmwsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5zdGF0ZS5kcmFnZ2VkVGl0bGUsXG4gICAgICAgICAgICAgICAgICBjdXN0b21TY3JlZW5zaG90VVJMOiB0aGlzLnN0YXRlLmRyYWdnZWRTaXRlXG4gICAgICAgICAgICAgICAgICAgIC5jdXN0b21TY3JlZW5zaG90VVJMLFxuICAgICAgICAgICAgICAgICAgLy8gT25seSBpZiB0aGUgc2VhcmNoIHRvcHNpdGVzIGV4cGVyaW1lbnQgaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgLi4uKHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUuc2VhcmNoVG9wU2l0ZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFRvcFNpdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIGRyYWdnZWRGcm9tSW5kZXg6IHRoaXMuc3RhdGUuZHJhZ2dlZEluZGV4LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMudXNlckV2ZW50KFwiRFJPUFwiLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgX2dldFRvcFNpdGVzKCkge1xuICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRoZSBzaXRlcyB0byB0cnVuY2F0ZSBvciBleHRlbmQgdG8gZGVzaXJlZCBsZW5ndGhcbiAgICBsZXQgdG9wU2l0ZXMgPSB0aGlzLnByb3BzLlRvcFNpdGVzLnJvd3Muc2xpY2UoKTtcbiAgICB0b3BTaXRlcy5sZW5ndGggPSB0aGlzLnByb3BzLlRvcFNpdGVzUm93cyAqIFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVztcbiAgICByZXR1cm4gdG9wU2l0ZXM7XG4gIH1cblxuICAvKipcbiAgICogTWFrZSBhIHByZXZpZXcgb2YgdGhlIHRvcHNpdGVzIHRoYXQgd2lsbCBiZSB0aGUgcmVzdWx0IG9mIGRyb3BwaW5nIHRoZSBjdXJyZW50bHlcbiAgICogZHJhZ2dlZCBzaXRlIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqL1xuICBfbWFrZVRvcFNpdGVzUHJldmlldyhpbmRleCkge1xuICAgIGNvbnN0IHRvcFNpdGVzID0gdGhpcy5fZ2V0VG9wU2l0ZXMoKTtcbiAgICB0b3BTaXRlc1t0aGlzLnN0YXRlLmRyYWdnZWRJbmRleF0gPSBudWxsO1xuICAgIGNvbnN0IHBpbm5lZE9ubHkgPSB0b3BTaXRlcy5tYXAoc2l0ZSA9PlxuICAgICAgc2l0ZSAmJiBzaXRlLmlzUGlubmVkID8gc2l0ZSA6IG51bGxcbiAgICApO1xuICAgIGNvbnN0IHVucGlubmVkID0gdG9wU2l0ZXMuZmlsdGVyKHNpdGUgPT4gc2l0ZSAmJiAhc2l0ZS5pc1Bpbm5lZCk7XG4gICAgY29uc3Qgc2l0ZVRvSW5zZXJ0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZS5kcmFnZ2VkU2l0ZSwge1xuICAgICAgaXNQaW5uZWQ6IHRydWUsXG4gICAgICBpc0RyYWdnZWQ6IHRydWUsXG4gICAgfSk7XG4gICAgaWYgKCFwaW5uZWRPbmx5W2luZGV4XSkge1xuICAgICAgcGlubmVkT25seVtpbmRleF0gPSBzaXRlVG9JbnNlcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpbmQgdGhlIGhvbGUgdG8gc2hpZnQgdGhlIHBpbm5lZCBzaXRlKHMpIHRvd2FyZHMuIFdlIHNoaWZ0IHRvd2FyZHMgdGhlXG4gICAgICAvLyBob2xlIGxlZnQgYnkgdGhlIHNpdGUgYmVpbmcgZHJhZ2dlZC5cbiAgICAgIGxldCBob2xlSW5kZXggPSBpbmRleDtcbiAgICAgIGNvbnN0IGluZGV4U3RlcCA9IGluZGV4ID4gdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXggPyAtMSA6IDE7XG4gICAgICB3aGlsZSAocGlubmVkT25seVtob2xlSW5kZXhdKSB7XG4gICAgICAgIGhvbGVJbmRleCArPSBpbmRleFN0ZXA7XG4gICAgICB9XG5cbiAgICAgIC8vIFNoaWZ0IHRvd2FyZHMgdGhlIGhvbGUuXG4gICAgICBjb25zdCBzaGlmdGluZ1N0ZXAgPSBpbmRleCA
+
IHRoaXMuc3RhdGUuZHJhZ2dlZEluZGV4ID8gMSA6IC0xO1xuICAgICAgd2hpbGUgKGhvbGVJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gaG9sZUluZGV4ICsgc2hpZnRpbmdTdGVwO1xuICAgICAgICBwaW5uZWRPbmx5W2hvbGVJbmRleF0gPSBwaW5uZWRPbmx5W25leHRJbmRleF07XG4gICAgICAgIGhvbGVJbmRleCA9IG5leHRJbmRleDtcbiAgICAgIH1cbiAgICAgIHBpbm5lZE9ubHlbaW5kZXhdID0gc2l0ZVRvSW5zZXJ0O1xuICAgIH1cblxuICAgIC8vIEZpbGwgaW4gdGhlIHJlbWFpbmluZyBob2xlcyB3aXRoIHVucGlubmVkIHNpdGVzLlxuICAgIGNvbnN0IHByZXZpZXcgPSBwaW5uZWRPbmx5O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFwcmV2aWV3W2ldKSB7XG4gICAgICAgIHByZXZpZXdbaV0gPSB1bnBpbm5lZC5zaGlmdCgpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZpZXc7XG4gIH1cblxuICBvbkFjdGl2YXRlKGluZGV4KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUluZGV4OiBpbmRleCB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRvcFNpdGVzID0gdGhpcy5zdGF0ZS50b3BTaXRlc1ByZXZpZXcgfHwgdGhpcy5fZ2V0VG9wU2l0ZXMoKTtcbiAgICBjb25zdCB0b3BTaXRlc1VJID0gW107XG4gICAgY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgICBvbkRyYWdFdmVudDogdGhpcy5vbkRyYWdFdmVudCxcbiAgICAgIGRpc3BhdGNoOiBwcm9wcy5kaXNwYXRjaCxcbiAgICB9O1xuICAgIC8vIFdlIGFzc2lnbiBhIGtleSB0byBlYWNoIHBsYWNlaG9sZGVyIHNsb3QuIFdlIG5lZWQgaXQgdG8gYmUgaW5kZXBlbmRlbnRcbiAgICAvLyBvZiB0aGUgc2xvdCBpbmRleCAoaSBiZWxvdykgc28gdGhhdCB0aGUga2V5cyB1c2VkIHN0YXkgdGhlIHNhbWUgZHVyaW5nXG4gICAgLy8gZHJhZyBhbmQgZHJvcCByZW9yZGVyaW5nIGFuZCB0aGUgdW5kZXJseWluZyBET00gbm9kZXMgYXJlIHJldXNlZC5cbiAgICAvLyBUaGlzIG1vc3RseSAob25seT8pIGFmZmVjdHMgbGludXggc28gYmUgc3VyZSB0byB0ZXN0IG9uIGxpbnV4IGJlZm9yZSBjaGFuZ2luZy5cbiAgICBsZXQgaG9sZUluZGV4ID0gMDtcblxuICAgIC8vIE9uIG5hcnJvdyB2aWV3cG9ydHMsIHdlIG9ubHkgc2hvdyA2IHNpdGVzIHBlciByb3cuIFdlJ2xsIG1hcmsgdGhlIHJlc3QgYXNcbiAgICAvLyAuaGlkZS1mb3ItbmFycm93IHRvIGhpZGUgaW4gQ1NTIHZpYSBAbWVkaWEgcXVlcnkuXG4gICAgY29uc3QgbWF4TmFycm93VmlzaWJsZUluZGV4ID0gcHJvcHMuVG9wU2l0ZXNSb3dzICogNjtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdG9wU2l0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5rID1cbiAgICAgICAgdG9wU2l0ZXNbaV0gJiZcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdG9wU2l0ZXNbaV0sIHtcbiAgICAgICAgICBpY29uVHlwZTogdGhpcy5wcm9wcy50b3BTaXRlSWNvblR5cGUodG9wU2l0ZXNbaV0pLFxuICAgICAgICB9KTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHtcbiAgICAgICAga2V5OiBsaW5rID8gbGluay51cmwgOiBob2xlSW5kZXgrKyxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICB9O1xuICAgICAgaWYgKGkgPj0gbWF4TmFycm93VmlzaWJsZUluZGV4KSB7XG4gICAgICAgIHNsb3RQcm9wcy5jbGFzc05hbWUgPSBcImhpZGUtZm9yLW5hcnJvd1wiO1xuICAgICAgfVxuICAgICAgdG9wU2l0ZXNVSS5wdXNoKFxuICAgICAgICAhbGluayA
/
IChcbiAgICAgICAgICA8VG9wU2l0ZVBsYWNlaG9sZGVyIHsuLi5zbG90UHJvcHN9IHsuLi5jb21tb25Qcm9wc30gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8VG9wU2l0ZVxuICAgICAgICAgICAgbGluaz17bGlua31cbiAgICAgICAgICAgIGFjdGl2ZUluZGV4PXt0aGlzLnN0YXRlLmFjdGl2ZUluZGV4fVxuICAgICAgICAgICAgb25BY3RpdmF0ZT17dGhpcy5vbkFjdGl2YXRlfVxuICAgICAgICAgICAgey4uLnNsb3RQcm9wc31cbiAgICAgICAgICAgIHsuLi5jb21tb25Qcm9wc31cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPHVsXG4gICAgICAgIGNsYXNzTmFtZT17YHRvcC1zaXRlcy1saXN0JHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmRyYWdnZWRTaXRlID8gXCIgZG5kLWFjdGl2ZVwiIDogXCJcIlxuICAgICAgICB9YH1cbiAgICAgID5cbiAgICAgICAge3RvcFNpdGVzVUl9XG4gICAgICA8L3VsPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIEhvcml6b250YWxSdWxlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPGhyIGNsYXNzTmFtZT1cImRzLWhyXCIgLz47XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5pbXBvcnQgeyBGbHVlbnRPclRleHQgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9GbHVlbnRPclRleHQvRmx1ZW50T3JUZXh0XCI7XG5cbmV4cG9ydCBjbGFzcyBUb3BpYyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1cmwsIG5hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaT5cbiAgICAgICAgPFNhZmVBbmNob3Iga2V5PXtuYW1lfSB1cmw9e3VybH0
+
XG4gICAgICAgICAge25hbWV9XG4gICAgICAgIDwvU2FmZUFuY2hvcj5cbiAgICAgIDwvbGk
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsaW5rcyB9ID0gdGhpcy5wcm9wcyB8fCBbXTtcbiAgICBjb25zdCB7IGFsaWdubWVudCB9ID0gdGhpcy5wcm9wcyB8fCBcImNlbnRlcmVkXCI7XG4gICAgY29uc3QgaGVhZGVyID0gdGhpcy5wcm9wcy5oZWFkZXIgfHwge307XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgZHMtbmF2aWdhdGlvbiBkcy1uYXZpZ2F0aW9uLSR7YWxpZ25tZW50fWB9PlxuICAgICAgICB7aGVhZGVyLnRpdGxlID8gKFxuICAgICAgICAgIDxGbHVlbnRPclRleHQgbWVzc2FnZT17aGVhZGVyLnRpdGxlfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtaGVhZGVyXCIgLz5cbiAgICAgICAgICA8L0ZsdWVudE9yVGV4dD5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxkaXY
+
XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAge2xpbmtzICYmXG4gICAgICAgICAgICAgIGxpbmtzLm1hcCh0ID0
+
IDxUb3BpYyBrZXk9e3QubmFtZX0gdXJsPXt0LnVybH0gbmFtZT17dC5uYW1lfSAvPil9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBTZWN0aW9uVGl0bGUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhlYWRlcjogeyB0aXRsZSwgc3VidGl0bGUgfSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1zZWN0aW9uLXRpdGxlXCI
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj57dGl0bGV9PC9kaXY
+
XG4gICAgICAgIHtzdWJ0aXRsZSA
/
IDxkaXYgY2xhc3NOYW1lPVwic3VidGl0bGVcIj57c3VidGl0bGV9PC9kaXY
+
IDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RMYXlvdXRSZW5kZXIgPSAoe1xuICBzdGF0ZSA9IHt9LFxuICBwcmVmcyA9IHt9LFxuICByb2xsQ2FjaGUgPSBbXSxcbiAgbGFuZyA9IFwiXCIsXG59KSA9PiB7XG4gIGNvbnN0IHsgbGF5b3V0LCBmZWVkcywgc3BvY3MgfSA9IHN0YXRlO1xuICBsZXQgc3BvY0luZGV4TWFwID0ge307XG4gIGxldCBidWZmZXJSb2xsQ2FjaGUgPSBbXTtcbiAgLy8gUmVjb3JkcyB0aGUgY2hvc2VuIGFuZCB1bmNob3NlbiBzcG9jcyBieSB0aGUgcHJvYmFiaWxpdHkgc2VsZWN0aW9uLlxuICBsZXQgY2hvc2VuU3BvY3MgPSBuZXcgU2V0KCk7XG4gIGxldCB1bmNob3NlblNwb2NzID0gbmV3IFNldCgpO1xuXG4gIGZ1bmN0aW9uIHJvbGxGb3JTcG9jcyhkYXRhLCBzcG9jc0NvbmZpZywgc3BvY3NEYXRhLCBwbGFjZW1lbnROYW1lKSB7XG4gICAgaWYgKCFzcG9jSW5kZXhNYXBbcGxhY2VtZW50TmFtZV0gJiYgc3BvY0luZGV4TWFwW3BsYWNlbWVudE5hbWVdICE9PSAwKSB7XG4gICAgICBzcG9jSW5kZXhNYXBbcGxhY2VtZW50TmFtZV0gPSAwO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHRzID0gWy4uLmRhdGFdO1xuICAgIGZvciAobGV0IHBvc2l0aW9uIG9mIHNwb2NzQ29uZmlnLnBvc2l0aW9ucykge1xuICAgICAgY29uc3Qgc3BvYyA9IHNwb2NzRGF0YVtzcG9jSW5kZXhNYXBbcGxhY2VtZW50TmFtZV1dO1xuICAgICAgaWYgKCFzcG9jKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWNoZSByYW5kb20gbnVtYmVyIGZvciBhIHBvc2l0aW9uXG4gICAgICBsZXQgcmlja1JvbGw7XG4gICAgICBpZiAoIXJvbGxDYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgcmlja1JvbGwgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICBidWZmZXJSb2xsQ2FjaGUucHVzaChyaWNrUm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWNrUm9sbCA9IHJvbGxDYWNoZS5zaGlmdCgpO1xuICAgICAgICBidWZmZXJSb2xsQ2FjaGUucHVzaChyaWNrUm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWNrUm9sbCA8PSBzcG9jc0NvbmZpZy5wcm9iYWJpbGl0eSkge1xuICAgICAgICBzcG9jSW5kZXhNYXBbcGxhY2VtZW50TmFtZV0rKztcbiAgICAgICAgaWYgKCFzcG9jcy5ibG9ja2VkLmluY2x1ZGVzKHNwb2MudXJsKSkge1xuICAgICAgICAgIHJlc3VsdHMuc3BsaWNlKHBvc2l0aW9uLmluZGV4LCAwLCBzcG9jKTtcbiAgICAgICAgICBjaG9zZW5TcG9jcy5hZGQoc3BvYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2hvc2VuU3BvY3MuYWRkKHNwb2MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgY29uc3QgcG9zaXRpb25zID0ge307XG4gIGNvbnN0IERTX0NPTVBPTkVOVFMgPSBbXG4gICAgXCJNZXNzYWdlXCIsXG4gICAgXCJUZXh0UHJvbW9cIixcbiAgICBcIlNlY3Rpb25UaXRsZVwiLFxuICAgIFwiTmF2aWdhdGlvblwiLFxuICAgIFwiQ2FyZEdyaWRcIixcbiAgICBcIkhlcm9cIixcbiAgICBcIkhvcml6b250YWxSdWxlXCIsXG4gICAgXCJMaXN0XCIsXG4gIF07XG5cbiAgY29uc3QgZmlsdGVyQXJyYXkgPSBbXTtcblxuICBpZiAoIXByZWZzW1wiZmVlZHMudG9wc2l0ZXNcIl0pIHtcbiAgICBmaWx0ZXJBcnJheS5wdXNoKFwiVG9wU2l0ZXNcIik7XG4gIH1cblxuICBpZiAoIWxhbmcuc3RhcnRzV2l0aChcImVuLVwiKSkge1xuICAgIGZpbHRlckFycmF5LnB1c2goXCJOYXZpZ2F0aW9uXCIpO1xuICB9XG5cbiAgaWYgKCFwcmVmc1tcImZlZWRzLnNlY3Rpb24udG9wc3Rvcmllc1wiXSkge1xuICAgIGZpbHRlckFycmF5LnB1c2goLi4uRFNfQ09NUE9ORU5UUyk7XG4gIH1cblxuICBjb25zdCBwbGFjZWhvbGRlckNvbXBvbmVudCA9IGNvbXBvbmVudCA9PiB7XG4gICAgaWYgKCFjb21wb25lbnQuZmVlZCkge1xuICAgICAgLy8gVE9ETyB3ZSBub3cgbmVlZCBhIHBsYWNlaG9sZGVyIGZvciB0b3BzaXRlcyBhbmQgdGV4dFByb21vLlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29tcG9uZW50LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgc3BvY3M6IFtdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgfTtcblxuICAgIGxldCBpdGVtcyA9IDA7XG4gICAgaWYgKGNvbXBvbmVudC5wcm9wZXJ0aWVzICYmIGNvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zKSB7XG4gICAgICBpdGVtcyA9IGNvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zOyBpKyspIHtcbiAgICAgIGRhdGEucmVjb21tZW5kYXRpb25zLnB1c2goeyBwbGFjZWhvbGRlcjogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5jb21wb25lbnQsIGRhdGEgfTtcbiAgfTtcblxuICAvLyBUT0RPIHVwZGF0ZSBkZXZ0b29scyB0byBzaG93IHBsYWNlbWVudHNcbiAgY29uc3QgaGFuZGxlU3BvY3MgPSAoZGF0YSwgY29tcG9uZW50KSA9PiB7XG4gICAgbGV0IHJlc3VsdCA9IFsuLi5kYXRhXTtcbiAgICAvLyBEbyB3ZSBldmVyIGV4cGVjdCB0byBwb3NzaWJseSBoYXZlIGEgc3BvYy5cbiAgICBpZiAoXG4gICAgICBjb21wb25lbnQuc3BvY3MgJiZcbiAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnMgJiZcbiAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnMubGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBwbGFjZW1lbnQgPSBjb21wb25lbnQucGxhY2VtZW50IHx8IHt9O1xuICAgICAgY29uc3QgcGxhY2VtZW50TmFtZSA9IHBsYWNlbWVudC5uYW1lIHx8IFwic3BvY3NcIjtcbiAgICAgIGNvbnN0IHNwb2NzRGF0YSA9IHNwb2NzLmRhdGFbcGxhY2VtZW50TmFtZV07XG4gICAgICAvLyBXZSBleHBlY3QgYSBzcG9jLCBzcG9jcyBhcmUgbG9hZGVkLCBhbmQgdGhlIHNlcnZlciByZXR1cm5lZCBzcG9jcy5cbiAgICAgIGlmIChzcG9jcy5sb2FkZWQgJiYgc3BvY3NEYXRhICYmIHNwb2NzRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gcm9sbEZvclNwb2NzKFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBjb21wb25lbnQuc3BvY3MsXG4gICAgICAgICAgc3BvY3NEYXRhLFxuICAgICAgICAgIHBsYWNlbWVudE5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDb21wb25lbnQgPSBjb21wb25lbnQgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5jb21wb25lbnQsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHNwb2NzOiBoYW5kbGVTcG9jcyhbXSwgY29tcG9uZW50KSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDb21wb25lbnRXaXRoRmVlZCA9IGNvbXBvbmVudCA9PiB7XG4gICAgcG9zaXRpb25zW2NvbXBvbmVudC50eXBlXSA9IHBvc2l0aW9uc1tjb21wb25lbnQudHlwZV0gfHwgMDtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgfTtcblxuICAgIGNvbnN0IGZlZWQgPSBmZWVkcy5kYXRhW2NvbXBvbmVudC5mZWVkLnVybF07XG4gICAgaWYgKGZlZWQgJiYgZmVlZC5kYXRhKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICAuLi5mZWVkLmRhdGEsXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogWy4uLihmZWVkLmRhdGEucmVjb21tZW5kYXRpb25zIHx8IFtdKV0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50LnByb3BlcnRpZXMgJiYgY29tcG9uZW50LnByb3BlcnRpZXMub2Zmc2V0KSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IGRhdGEucmVjb21tZW5kYXRpb25zLnNsaWNlKFxuICAgICAgICAgIGNvbXBvbmVudC5wcm9wZXJ0aWVzLm9mZnNldFxuICAgICAgICApLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkYXRhID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogaGFuZGxlU3BvY3MoZGF0YS5yZWNvbW1lbmRhdGlvbnMsIGNvbXBvbmVudCksXG4gICAgfTtcblxuICAgIGxldCBpdGVtcyA9IDA7XG4gICAgaWYgKGNvbXBvbmVudC5wcm9wZXJ0aWVzICYmIGNvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zKSB7XG4gICAgICBpdGVtcyA9IE1hdGgubWluKGNvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zLCBkYXRhLnJlY29tbWVuZGF0aW9ucy5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8vIGxvb3AgdGhyb3VnaCBhIGNvbXBvbmVudCBpdGVtc1xuICAgIC8vIFN0b3JlIHRoZSBpdGVtcyBwb3NpdGlvbiBzZXF1ZW50aWFsbHkgZm9yIG11bHRpcGxlIGNvbXBvbmVudHMgb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAvLyBFeGFtcGxlOiBBIHNlY29uZCBjYXJkIGdyaWQgc3RhcnRzIHBvcyBvZmZzZXQgZnJvbSB0aGUgbGFzdCBjYXJkIGdyaWQuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtczsgaSsrKSB7XG4gICAgICBkYXRhLnJlY29tbWVuZGF0aW9uc1tpXSA9IHtcbiAgICAgICAgLi4uZGF0YS5yZWNvbW1lbmRhdGlvbnNbaV0sXG4gICAgICAgIHBvczogcG9zaXRpb25zW2NvbXBvbmVudC50eXBlXSsrLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5jb21wb25lbnQsIGRhdGEgfTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJMYXlvdXQgPSAoKSA9PiB7XG4gICAgY29uc3QgcmVuZGVyZWRMYXlvdXRBcnJheSA9IFtdO1xuICAgIGZvciAoY29uc3Qgcm93IG9mIGxheW91dC5maWx0ZXIoXG4gICAgICByID0
+
IHIuY29tcG9uZW50cy5maWx0ZXIoYyA9PiAhZmlsdGVyQXJyYXkuaW5jbHVkZXMoYy50eXBlKSkubGVuZ3RoXG4gICAgKSkge1xuICAgICAgbGV0IGNvbXBvbmVudHMgPSBbXTtcbiAgICAgIHJlbmRlcmVkTGF5b3V0QXJyYXkucHVzaCh7XG4gICAgICAgIC4uLnJvdyxcbiAgICAgICAgY29tcG9uZW50cyxcbiAgICAgIH0pO1xuICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2Ygcm93LmNvbXBvbmVudHMuZmlsdGVyKFxuICAgICAgICBjID0
+
ICFmaWx0ZXJBcnJheS5pbmNsdWRlcyhjLnR5cGUpXG4gICAgICApKSB7XG4gICAgICAgIGNvbnN0IHNwb2NzQ29uZmlnID0gY29tcG9uZW50LnNwb2NzO1xuICAgICAgICBpZiAoc3BvY3NDb25maWcgfHwgY29tcG9uZW50LmZlZWQpIHtcbiAgICAgICAgICAvLyBUT0RPIG1ha2Ugc3VyZSB0aGlzIHN0aWxsIHdvcmtzIGZvciBkaWZmZXJlbnQgbG9hZGluZyBjYXNlcy5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoY29tcG9uZW50LmZlZWQgJiYgIWZlZWRzLmRhdGFbY29tcG9uZW50LmZlZWQudXJsXSkgfHxcbiAgICAgICAgICAgIChzcG9jc0NvbmZpZyAmJlxuICAgICAgICAgICAgICBzcG9jc0NvbmZpZy5wb3NpdGlvbnMgJiZcbiAgICAgICAgICAgICAgc3BvY3NDb25maWcucG9zaXRpb25zLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAhc3BvY3MubG9hZGVkKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKHBsYWNlaG9sZGVyQ29tcG9uZW50KGNvbXBvbmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVkTGF5b3V0QXJyYXk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb21wb25lbnQuZmVlZCkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKGhhbmRsZUNvbXBvbmVudFdpdGhGZWVkKGNvbXBvbmVudCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnB1c2goaGFuZGxlQ29tcG9uZW50KGNvbXBvbmVudCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyZWRMYXlvdXRBcnJheTtcbiAgfTtcblxuICBjb25zdCBsYXlvdXRSZW5kZXIgPSByZW5kZXJMYXlvdXQoKTtcblxuICAvLyBJZiBlbXB0eSwgZmlsbCByb2xsQ2FjaGUgd2l0aCByYW5kb20gcHJvYmFiaWxpdHkgdmFsdWVzIGZyb20gYnVmZmVyUm9sbENhY2hlXG4gIGlmICghcm9sbENhY2hlLmxlbmd0aCkge1xuICAgIHJvbGxDYWNoZS5wdXNoKC4uLmJ1ZmZlclJvbGxDYWNoZSk7XG4gIH1cblxuICAvLyBHZW5lcmF0ZSB0aGUgcGF5bG9hZCBmb3IgdGhlIFNQT0NTIEZpbGwgcGluZy4gTm90ZSB0aGF0IGEgU1BPQyBjb3VsZCBiZSByZWplY3RlZFxuICAvLyBieSB0aGUgYHByb2JhYmlsaXR5X3NlbGVjdGlvbmAgZmlyc3QsIHRoZW4gZ2V0cyBjaG9zZW4gZm9yIHRoZSBuZXh0IHBvc2l0aW9uLiBGb3JcbiAgLy8gYWxsIG90aGVyIFNQT0NTIHRoYXQgbmV2ZXIgd2VudCB0aHJvdWdoIHRoZSBwcm9iYWJpbGlzdGljIHNlbGVjdGlvbiwgaXRzIHJlYXNvbiB3aWxsXG4gIC8vIGJlIFwib3V0X29mX3Bvc2l0aW9uXCIuXG4gIGxldCBzcG9jc0ZpbGwgPSBbXTtcbiAgaWYgKHNwb2NzLmxvYWRlZCAmJiBmZWVkcy5sb2FkZWQgJiYgc3BvY3MuZGF0YS5zcG9jcykge1xuICAgIGNvbnN0IGNob3NlblNwb2NzRmlsbCA9IFsuLi5jaG9zZW5TcG9jc10ubWFwKHNwb2MgPT4gKHtcbiAgICAgIGlkOiBzcG9jLmlkLFxuICAgICAgcmVhc29uOiBcIm4vYVwiLFxuICAgICAgZGlzcGxheWVkOiAxLFxuICAgICAgZnVsbF9yZWNhbGM6IDAsXG4gICAgfSkpO1xuICAgIGNvbnN0IHVuY2hvc2VuU3BvY3NGaWxsID0gWy4uLnVuY2hvc2VuU3BvY3NdXG4gICAgICAuZmlsdGVyKHNwb2MgPT4gIWNob3NlblNwb2NzLmhhcyhzcG9jKSlcbiAgICAgIC5tYXAoc3BvYyA9PiAoe1xuICAgICAgICBpZDogc3BvYy5pZCxcbiAgICAgICAgcmVhc29uOiBcInByb2JhYmlsaXR5X3NlbGVjdGlvblwiLFxuICAgICAgICBkaXNwbGF5ZWQ6IDAsXG4gICAgICAgIGZ1bGxfcmVjYWxjOiAwLFxuICAgICAgfSkpO1xuICAgIGNvbnN0IG91dE9mUG9zaXRpb25TcG9jc0ZpbGwgPSBzcG9jcy5kYXRhLnNwb2NzXG4gICAgICAuc2xpY2Uoc3BvY0luZGV4TWFwLnNwb2NzKVxuICAgICAgLmZpbHRlcihzcG9jID0
+
ICF1bmNob3NlblNwb2NzLmhhcyhzcG9jKSlcbiAgICAgIC5tYXAoc3BvYyA9PiAoe1xuICAgICAgICBpZDogc3BvYy5pZCxcbiAgICAgICAgcmVhc29uOiBcIm91dF9vZl9wb3NpdGlvblwiLFxuICAgICAgICBkaXNwbGF5ZWQ6IDAsXG4gICAgICAgIGZ1bGxfcmVjYWxjOiAwLFxuICAgICAgfSkpO1xuXG4gICAgc3BvY3NGaWxsID0gW1xuICAgICAgLi4uY2hvc2VuU3BvY3NGaWxsLFxuICAgICAgLi4udW5jaG9zZW5TcG9jc0ZpbGwsXG4gICAgICAuLi5vdXRPZlBvc2l0aW9uU3BvY3NGaWxsLFxuICAgIF07XG4gIH1cblxuICByZXR1cm4geyBzcG9jc0ZpbGwsIGxheW91dFJlbmRlciB9O1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IFRvcFNpdGVzIGFzIE9sZFRvcFNpdGVzIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvVG9wU2l0ZXMvVG9wU2l0ZXNcIjtcbmltcG9ydCB7IFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVyB9IGZyb20gXCJjb21tb24vUmVkdWNlcnMuanNtXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBfVG9wU2l0ZXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgLy8gRmluZCBhIFNQT0MgdGhhdCBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gVXNlcidzIFRvcFNpdGVzXG4gIGdldEZpcnN0QXZhaWxhYmxlU3BvYyh0b3BTaXRlcywgZGF0YSkge1xuICAgIGNvbnN0IHsgc3BvY3MgfSA9IGRhdGE7XG4gICAgaWYgKCFzcG9jcyB8fCBzcG9jcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXJUb3BTaXRlcyA9IG5ldyBTZXQoXG4gICAgICB0b3BTaXRlcy5tYXAodG9wU2l0ZSA9PiB0b3BTaXRlICYmIHRvcFNpdGUudXJsKVxuICAgICk7XG5cbiAgICAvLyBXZSBcImNsZWFuIHVybHNcIiB3aXRoIGh0dHAgaW4gVG9wU2l0ZUZvcm0uanN4XG4gICAgLy8gU3BvYyBkb21haW5zIGFyZSBpbiB0aGUgZm9ybWF0ICdzcG9uc29ybmFtZS5jb20nXG4gICAgcmV0dXJuIHNwb2NzLmZpbmQoXG4gICAgICBzcG9jID0
+
XG4gICAgICAgICF1c2VyVG9wU2l0ZXMuaGFzKHNwb2MudXJsKSAmJlxuICAgICAgICAhdXNlclRvcFNpdGVzLmhhcyhgaHR0cDovLyR7c3BvYy5kb21haW59YCkgJiZcbiAgICAgICAgIXVzZXJUb3BTaXRlcy5oYXMoYGh0dHBzOi8vJHtzcG9jLmRvbWFpbn1gKSAmJlxuICAgICAgICAhdXNlclRvcFNpdGVzLmhhcyhgaHR0cDovL3d3dy4ke3Nwb2MuZG9tYWlufWApICYmXG4gICAgICAgICF1c2VyVG9wU2l0ZXMuaGFzKGBodHRwczovL3d3dy4ke3Nwb2MuZG9tYWlufWApXG4gICAgKTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGZpcnN0IGVtcHR5IG9yIHVucGlubmVkIGluZGV4IHdlIGNhbiBwbGFjZSB0aGUgU1BPQyBpbi5cbiAgLy8gUmV0dXJuIC0xIGlmIG5vIGF2YWlsYWJsZSBpbmRleCBhbmQgd2Ugc2hvdWxkIHB1c2ggaXQgYXQgdGhlIGVuZC5cbiAgZ2V0Rmlyc3RBdmFpbGFibGVJbmRleCh0b3BTaXRlcywgcHJvbW9BbGlnbm1lbnQpIHtcbiAgICBpZiAocHJvbW9BbGlnbm1lbnQgPT09IFwibGVmdFwiKSB7XG4gICAgICByZXR1cm4gdG9wU2l0ZXMuZmluZEluZGV4KHRvcFNpdGUgPT4gIXRvcFNpdGUgfHwgIXRvcFNpdGUuaXNQaW5uZWQpO1xuICAgIH1cblxuICAgIC8vIFRoZSByb3cgaXNuJ3QgZnVsbCBzbyB3ZSBjYW4gcHVzaCBpdCB0byB0aGUgZW5kIG9mIHRoZSByb3cuXG4gICAgaWYgKHRvcFNpdGVzLmxlbmd0aCA8IFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSByb3cgaXMgZnVsbCwgd2UgY2FuIGNoZWNrIHRoZSByb3cgZmlyc3QgZm9yIHVucGlubmVkIHRvcHNpdGVzIHRvIHJlcGxhY2UuXG4gICAgLy8gRWxzZSB3ZSBjYW4gY2hlY2sgYWZ0ZXIgdGhlIHJvdy4gVGhpcyBiZWhhdmlvciBpcyBob3cgdW5waW5uZWQgdG9wc2l0ZXMgbW92ZSB3aGlsZSBkcmFnIGFuZCBkcm9wLlxuICAgIGxldCBlbmRPZlJvdyA9IFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVyAtIDE7XG4gICAgZm9yIChsZXQgaSA9IGVuZE9mUm93OyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKCF0b3BTaXRlc1tpXSB8fCAhdG9wU2l0ZXNbaV0uaXNQaW5uZWQpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IGVuZE9mUm93ICsgMTsgaSA8IHRvcFNpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXRvcFNpdGVzW2ldIHx8ICF0b3BTaXRlc1tpXS5pc1Bpbm5lZCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBpbnNlcnRTcG9jQ29udGVudChUb3BTaXRlcywgZGF0YSwgcHJvbW9BbGlnbm1lbnQpIHtcbiAgICBpZiAoXG4gICAgICAhVG9wU2l0ZXMucm93cyB8fFxuICAgICAgVG9wU2l0ZXMucm93cy5sZW5ndGggPT09IDAgfHxcbiAgICAgICFkYXRhLnNwb2NzIHx8XG4gICAgICBkYXRhLnNwb2NzLmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IHRvcFNpdGVzID0gWy4uLlRvcFNpdGVzLnJvd3NdO1xuICAgIGNvbnN0IHRvcFNpdGVTcG9jID0gdGhpcy5nZXRGaXJzdEF2YWlsYWJsZVNwb2ModG9wU2l0ZXMsIGRhdGEpO1xuXG4gICAgaWYgKCF0b3BTaXRlU3BvYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbGluayA9IHtcbiAgICAgIGN1c3RvbVNjcmVlbnNob3RVUkw6IHRvcFNpdGVTcG9jLmltYWdlX3NyYyxcbiAgICAgIHR5cGU6IFwiU1BPQ1wiLFxuICAgICAgbGFiZWw6IHRvcFNpdGVTcG9jLnNwb25zb3IsXG4gICAgICB0aXRsZTogdG9wU2l0ZVNwb2Muc3BvbnNvcixcbiAgICAgIHVybDogdG9wU2l0ZVNwb2MudXJsLFxuICAgICAgZmxpZ2h0SWQ6IHRvcFNpdGVTcG9jLmZsaWdodF9pZCxcbiAgICAgIGlkOiB0b3BTaXRlU3BvYy5pZCxcbiAgICAgIGd1aWQ6IHRvcFNpdGVTcG9jLmlkLFxuICAgICAgc2hpbTogdG9wU2l0ZVNwb2Muc2hpbSxcbiAgICAgIC8vIEZvciBub3cgd2UgYXJlIGFzc3VtaW5nIHBvc2l0aW9uIGJhc2VkIG9uIGludGVuZGVkIHBvc2l0aW9uLlxuICAgICAgLy8gQWN0dWFsIHBvc2l0aW9uIGNhbiBzaGlmdCBiYXNlZCBvbiBvdGhlciBjb250ZW50LlxuICAgICAgLy8gV2UgYWxzbyBoYXJkIGNvZGUgbGVmdCBhbmQgcmlnaHQgdG8gYmUgMCBhbmQgNy5cbiAgICAgIC8vIFdlIHNlbmQgdGhlIGludGVuZGVkIHBvc3Rpb24gaW4gdGhlIHBpbmcuXG4gICAgICBwb3M6IHByb21vQWxpZ25tZW50ID09PSBcImxlZnRcIiA
/
IDAgOiA3LFxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEF2YWlsYWJsZUluZGV4ID0gdGhpcy5nZXRGaXJzdEF2YWlsYWJsZUluZGV4KFxuICAgICAgdG9wU2l0ZXMsXG4gICAgICBwcm9tb0FsaWdubWVudFxuICAgICk7XG5cbiAgICBpZiAoZmlyc3RBdmFpbGFibGVJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRvcFNpdGVzLnB1c2gobGluayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vcm1hbCBpbnNlcnRpb24gd2lsbCBub3Qgd29yayBzaW5jZSBwaW5uZWQgdG9wc2l0ZXMgYXJlIGluIHRoZWlyIGNvcnJlY3QgaW5kZXggYWxyZWFkeVxuICAgICAgLy8gU2ltaWxhciBsb2dpYyBpcyBkb25lIHRvIGhhbmRsZSBkcmFnIGFuZCBkcm9wIHdpdGggcGlubmVkIHRvcHNpdGVzIGluIFRvcFNpdGUuanN4XG5cbiAgICAgIGxldCBzaGlmdGVkVG9wU2l0ZSA9IHRvcFNpdGVzW2ZpcnN0QXZhaWxhYmxlSW5kZXhdO1xuICAgICAgbGV0IGluZGV4ID0gZmlyc3RBdmFpbGFibGVJbmRleCArIDE7XG5cbiAgICAgIC8vIFNoaWZ0IHVucGlubmVkIHRvcHNpdGVzIHRvIHRoZSByaWdodCBieSBmaW5kaW5nIHRoZSBuZXh0IHVucGlubmVkIHRvcHNpdGUgdG8gcmVwbGFjZVxuICAgICAgd2hpbGUgKHNoaWZ0ZWRUb3BTaXRlKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdG9wU2l0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdG9wU2l0ZXMucHVzaChzaGlmdGVkVG9wU2l0ZSk7XG4gICAgICAgICAgc2hpZnRlZFRvcFNpdGUgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcFNpdGVzW2luZGV4XSAmJiB0b3BTaXRlc1tpbmRleF0uaXNQaW5uZWQpIHtcbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5leHRUb3BTaXRlID0gdG9wU2l0ZXNbaW5kZXhdO1xuICAgICAgICAgIHRvcFNpdGVzW2luZGV4XSA9IHNoaWZ0ZWRUb3BTaXRlO1xuICAgICAgICAgIHNoaWZ0ZWRUb3BTaXRlID0gbmV4dFRvcFNpdGU7XG4gICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0b3BTaXRlc1tmaXJzdEF2YWlsYWJsZUluZGV4XSA9IGxpbms7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgLi4uVG9wU2l0ZXMsIHJvd3M6IHRvcFNpdGVzIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoZWFkZXIgPSB7fSwgZGF0YSwgcHJvbW9BbGlnbm1lbnQsIFRvcFNpdGVzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgVG9wU2l0ZXNXaXRoU3BvYyA9XG4gICAgICBUb3BTaXRlcyAmJiBkYXRhICYmIHByb21vQWxpZ25tZW50XG4gICAgICAgID8gdGhpcy5pbnNlcnRTcG9jQ29udGVudChUb3BTaXRlcywgZGF0YSwgcHJvbW9BbGlnbm1lbnQpXG4gICAgICAgIDogbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YGRzLXRvcC1zaXRlcyAke1RvcFNpdGVzV2l0aFNwb2MgPyBcInRvcC1zaXRlcy1zcG9jXCIgOiBcIlwifWB9XG4gICAgICA
+
XG4gICAgICAgIDxPbGRUb3BTaXRlc1xuICAgICAgICAgIGlzRml4ZWQ9e3RydWV9XG4gICAgICAgICAgdGl0bGU9e2hlYWRlci50aXRsZX1cbiAgICAgICAgICBUb3BTaXRlc1dpdGhTcG9jPXtUb3BTaXRlc1dpdGhTcG9jfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVG9wU2l0ZXMgPSBjb25uZWN0KHN0YXRlID0
+
ICh7IFRvcFNpdGVzOiBzdGF0ZS5Ub3BTaXRlcyB9KSkoXG4gIF9Ub3BTaXRlc1xuKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbi8qIGdsb2JhbHMgQ29udGVudFNlYXJjaFVJQ29udHJvbGxlciAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IElTX05FV1RBQiB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBfU2VhcmNoIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25TZWFyY2hDbGljayA9IHRoaXMub25TZWFyY2hDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWFyY2hIYW5kb2ZmQ2xpY2sgPSB0aGlzLm9uU2VhcmNoSGFuZG9mZkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNlYXJjaEhhbmRvZmZQYXN0ZSA9IHRoaXMub25TZWFyY2hIYW5kb2ZmUGFzdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU2VhcmNoSGFuZG9mZkRyb3AgPSB0aGlzLm9uU2VhcmNoSGFuZG9mZkRyb3AuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSW5wdXRNb3VudCA9IHRoaXMub25JbnB1dE1vdW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNlYXJjaEhhbmRvZmZCdXR0b25Nb3VudCA9IHRoaXMub25TZWFyY2hIYW5kb2ZmQnV0dG9uTW91bnQuYmluZChcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAvLyBBbHNvIHRyYWNrIHNlYXJjaCBldmVudHMgd2l0aCBvdXIgb3duIHRlbGVtZXRyeVxuICAgIGlmIChldmVudC5kZXRhaWwudHlwZSA9PT0gXCJTZWFyY2hcIikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhYy5Vc2VyRXZlbnQoeyBldmVudDogXCJTRUFSQ0hcIiB9KSk7XG4gICAgfVxuICB9XG5cbiAgb25TZWFyY2hDbGljayhldmVudCkge1xuICAgIHdpbmRvdy5nQ29udGVudFNlYXJjaENvbnRyb2xsZXIuc2VhcmNoKGV2ZW50KTtcbiAgfVxuXG4gIGRvU2VhcmNoSGFuZG9mZih0ZXh0KSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLk9ubHlUb01haW4oeyB0eXBlOiBhdC5IQU5ET0ZGX1NFQVJDSF9UT19BV0VTT01FQkFSLCBkYXRhOiB7IHRleHQgfSB9KVxuICAgICk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaCh7IHR5cGU6IGF0LkZBS0VfRk9DVVNfU0VBUkNIIH0pO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goYWMuVXNlckV2ZW50KHsgZXZlbnQ6IFwiU0VBUkNIX0hBTkRPRkZcIiB9KSk7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goeyB0eXBlOiBhdC5ISURFX1NFQVJDSCB9KTtcbiAgICB9XG4gIH1cblxuICBvblNlYXJjaEhhbmRvZmZDbGljayhldmVudCkge1xuICAgIC8vIFdoZW4gc2VhcmNoIGhhbmQtb2ZmIGlzIGVuYWJsZWQsIHdlIHJlbmRlciBhIGJpZyBidXR0b24gdGhhdCBpcyBzdHlsZWQgdG9cbiAgICAvLyBsb29rIGxpa2UgYSBzZWFyY2ggdGV4dGJveC4gSWYgdGhlIGJ1dHRvbiBpcyBjbGlja2VkLCB3ZSBzdHlsZVxuICAgIC8vIHRoZSBidXR0b24gYXMgaWYgaXQgd2FzIGEgZm9jdXNlZCBzZWFyY2ggYm94IGFuZCBzaG93IGEgZmFrZSBjdXJzb3IgYnV0XG4gICAgLy8gcmVhbGx5IGZvY3VzIHRoZSBhd2Vzb21lYmFyIHdpdGhvdXQgdGhlIGZvY3VzIHN0eWxlcyAoXCJoaWRkZW4gZm9jdXNcIikuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmRvU2VhcmNoSGFuZG9mZigpO1xuICB9XG5cbiAgb25TZWFyY2hIYW5kb2ZmUGFzdGUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuZG9TZWFyY2hIYW5kb2ZmKGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIikpO1xuICB9XG5cbiAgb25TZWFyY2hIYW5kb2ZmRHJvcChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHRleHQgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHRcIik7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHRoaXMuZG9TZWFyY2hIYW5kb2ZmKHRleHQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGRlbGV0ZSB3aW5kb3cuZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyO1xuICB9XG5cbiAgb25JbnB1dE1vdW50KGlucHV0KSB7XG4gICAgaWYgKGlucHV0KSB7XG4gICAgICAvLyBUaGUgXCJoZWFsdGhSZXBvcnRLZXlcIiBhbmQgbmVlZHMgdG8gYmUgXCJuZXd0YWJcIiBvciBcImFib3V0aG9tZVwiIHNvIHRoYXRcbiAgICAgIC8vIEJyb3dzZXJVc2FnZVRlbGVtZXRyeS5qc20ga25vd3MgdG8gaGFuZGxlIGV2ZW50cyB3aXRoIHRoaXMgbmFtZSwgYW5kXG4gICAgICAvLyBjYW4gYWRkIHRoZSBhcHByb3ByaWF0ZSB0ZWxlbWV0cnkgcHJvYmVzIGZvciBzZWFyY2guIFdpdGhvdXQgdGhlIGNvcnJlY3RcbiAgICAgIC8vIG5hbWUsIGNlcnRhaW4gdGVzdHMgbGlrZSBicm93c2VyX1VzYWdlVGVsZW1ldHJ5X2NvbnRlbnQuanMgd2lsbCBmYWlsXG4gICAgICAvLyAoU2VlIGdpdGh1YiB0aWNrZXQgIzIzNDggZm9yIG1vcmUgZGV0YWlscylcbiAgICAgIGNvbnN0IGhlYWx0aFJlcG9ydEtleSA9IElTX05FV1RBQiA
/
IFwibmV3dGFiXCIgOiBcImFib3V0aG9tZVwiO1xuXG4gICAgICAvLyBUaGUgXCJzZWFyY2hTb3VyY2VcIiBuZWVkcyB0byBiZSBcIm5ld3RhYlwiIG9yIFwiaG9tZXBhZ2VcIiBhbmQgaXMgc2VudCB3aXRoXG4gICAgICAvLyB0aGUgc2VhcmNoIGRhdGEgYW5kIGFjdHMgYXMgY29udGV4dCBmb3IgdGhlIHNlYXJjaCByZXF1ZXN0IChTZWVcbiAgICAgIC8vIG5zSVNlYXJjaEVuZ2luZS5nZXRTdWJtaXNzaW9uKS4gSXQgaXMgbmVjZXNzYXJ5IHNvIHRoYXQgc2VhcmNoIGVuZ2luZVxuICAgICAgLy8gcGx1Z2lucyBjYW4gY29ycmVjdGx5IGF0cmlidXRlIHJlZmVycmFscy4gKFNlZSBnaXRodWIgdGlja2V0ICMzMzIxIGZvclxuICAgICAgLy8gbW9yZSBkZXRhaWxzKVxuICAgICAgY29uc3Qgc2VhcmNoU291cmNlID0gSVNfTkVXVEFCID8gXCJuZXd0YWJcIiA6IFwiaG9tZXBhZ2VcIjtcblxuICAgICAgLy8gZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyIG5lZWRzIHRvIGV4aXN0IGFzIGEgZ2xvYmFsIHNvIHRoYXQgdGVzdHMgZm9yXG4gICAgICAvLyB0aGUgZXhpc3RpbmcgYWJvdXQ6aG9tZSBjYW4gZmluZCBpdDsgYW5kIHNvIGl0IGFsbG93cyB0aGVzZSB0ZXN0cyB0byBwYXNzLlxuICAgICAgLy8gSW4gdGhlIGZ1dHVyZSwgd2hlbiBhY3Rpdml0eSBzdHJlYW0gaXMgZGVmYXVsdCBhYm91dDpob21lLCB0aGlzIGNhbiBiZSByZW5hbWVkXG4gICAgICB3aW5kb3cuZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyID0gbmV3IENvbnRlbnRTZWFyY2hVSUNvbnRyb2xsZXIoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBpbnB1dC5wYXJlbnROb2RlLFxuICAgICAgICBoZWFsdGhSZXBvcnRLZXksXG4gICAgICAgIHNlYXJjaFNvdXJjZVxuICAgICAgKTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJDb250ZW50U2VhcmNoQ2xpZW50XCIsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyID0gbnVsbDtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJDb250ZW50U2VhcmNoQ2xpZW50XCIsIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG9uU2VhcmNoSGFuZG9mZkJ1dHRvbk1vdW50KGJ1dHRvbikge1xuICAgIC8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGJ1dHRvbiBmb3IgdXNlIGR1cmluZyBcInBhc3RlXCIgZXZlbnQgaGFuZGxpbmcuXG4gICAgdGhpcy5fc2VhcmNoSGFuZG9mZkJ1dHRvbiA9IGJ1dHRvbjtcbiAgfVxuXG4gIC8qXG4gICAqIERvIG5vdCBjaGFuZ2UgdGhlIElEIG9uIHRoZSBpbnB1dCBmaWVsZCwgYXMgbGVnYWN5IG5ld3RhYiBjb2RlXG4gICAqIHNwZWNpZmljYWxseSBsb29rcyBmb3IgdGhlIGlkICduZXd0YWItc2VhcmNoLXRleHQnIG9uIGlucHV0IGZpZWxkc1xuICAgKiBpbiBvcmRlciB0byBleGVjdXRlIHNlYXJjaGVzIGluIHZhcmlvdXMgdGVzdHNcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB3cmFwcGVyQ2xhc3NOYW1lID0gW1xuICAgICAgXCJzZWFyY2gtd3JhcHBlclwiLFxuICAgICAgdGhpcy5wcm9wcy5oaWRlICYmIFwic2VhcmNoLWhpZGRlblwiLFxuICAgICAgdGhpcy5wcm9wcy5mYWtlRm9jdXMgJiYgXCJmYWtlLWZvY3VzXCIsXG4gICAgXVxuICAgICAgLmZpbHRlcih2ID0
+
IHYpXG4gICAgICAuam9pbihcIiBcIik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc05hbWV9PlxuICAgICAgICB7dGhpcy5wcm9wcy5zaG93TG9nbyAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dvLWFuZC13b3JkbWFya1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dvXCIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid29yZG1hcmtcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICB7IXRoaXMucHJvcHMuaGFuZG9mZkVuYWJsZWQgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLWlubmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cIm5ld3RhYi1zZWFyY2gtdGV4dFwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1zZWFyY2gtYm94LXNlYXJjaC10aGUtd2ViLWlucHV0XCJcbiAgICAgICAgICAgICAgbWF4TGVuZ3RoPVwiMjU2XCJcbiAgICAgICAgICAgICAgcmVmPXt0aGlzLm9uSW5wdXRNb3VudH1cbiAgICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBpZD1cInNlYXJjaFN1Ym1pdFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlYXJjaC1idXR0b25cIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItc2VhcmNoLWJveC1zZWFyY2gtYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblNlYXJjaENsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge3RoaXMucHJvcHMuaGFuZG9mZkVuYWJsZWQgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLWlubmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VhcmNoLWhhbmRvZmYtYnV0dG9uXCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXNlYXJjaC1ib3gtc2VhcmNoLXRoZS13ZWItaW5wdXRcIlxuICAgICAgICAgICAgICByZWY9e3RoaXMub25TZWFyY2hIYW5kb2ZmQnV0dG9uTW91bnR9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25TZWFyY2hIYW5kb2ZmQ2xpY2t9XG4gICAgICAgICAgICAgIHRhYkluZGV4PVwiLTFcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmFrZS10ZXh0Ym94XCJcbiAgICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItc2VhcmNoLWJveC1zZWFyY2gtdGhlLXdlYi10ZXh0XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmFrZS1lZGl0YWJsZVwiXG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICBvbkRyb3A9e3RoaXMub25TZWFyY2hIYW5kb2ZmRHJvcH1cbiAgICAgICAgICAgICAgICBvblBhc3RlPXt0aGlzLm9uU2VhcmNoSGFuZG9mZlBhc3RlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZha2UtY2FyZXRcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24
+
XG4gICAgICAgICAgICB7LypcbiAgICAgICAgICAgIFRoaXMgZHVtbXkgYW5kIGhpZGRlbiBpbnB1dCBiZWxvdyBpcyBzbyB3ZSBjYW4gbG9hZCBDb250ZW50U2VhcmNoVUlDb250cm9sbGVyLlxuICAgICAgICAgICAgV2h5PyBJdCBzZXRzIC0tbmV3dGFiLXNlYXJjaC1pY29uIGZvciB1cyBhbmQgaXQgaXNuJ3QgdHJpdmlhbCB0byBwb3J0IG92ZXIuXG4gICAgICAgICAgKi99XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6IFwibm9uZVwiIH19XG4gICAgICAgICAgICAgIHJlZj17dGhpcy5vbklucHV0TW91bnR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU2VhcmNoID0gY29ubmVjdCgpKF9TZWFyY2gpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgcGVyZlNlcnZpY2UgYXMgcGVyZlN2YyB9IGZyb20gXCJjb21tb24vUGVyZlNlcnZpY2UuanNtXCI7XG5cbmNvbnN0IFZJU0lCTEUgPSBcInZpc2libGVcIjtcbmNvbnN0IFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG5cbmV4cG9ydCBjbGFzcyBEZXRlY3RVc2VyU2Vzc2lvblN0YXJ0IHtcbiAgY29uc3RydWN0b3Ioc3RvcmUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gICAgLy8gT3ZlcnJpZGVzIGZvciB0ZXN0aW5nXG4gICAgdGhpcy5kb2N1bWVudCA9IG9wdGlvbnMuZG9jdW1lbnQgfHwgZ2xvYmFsLmRvY3VtZW50O1xuICAgIHRoaXMuX3BlcmZTZXJ2aWNlID0gb3B0aW9ucy5wZXJmU2VydmljZSB8fCBwZXJmU3ZjO1xuICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNlbmRFdmVudE9yQWRkTGlzdGVuZXIgLSBOb3RpZnkgaW1tZWRpYXRlbHkgaWYgdGhlIHBhZ2UgaXMgYWxyZWFkeSB2aXNpYmxlLFxuICAgKiAgICAgICAgICAgICAgICAgICAgb3IgZWxzZSBzZXQgdXAgYSBsaXN0ZW5lciBmb3Igd2hlbiB2aXNpYmlsaXR5IGNoYW5nZXMuXG4gICAqICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIG5lZWRlZCBmb3IgYWNjdXJhdGUgc2Vzc2lvbiB0cmFja2luZyBmb3IgdGVsZW1ldHJ5LFxuICAgKiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0YWJzIGFyZSBwcmUtbG9hZGVkLlxuICAgKi9cbiAgc2VuZEV2ZW50T3JBZGRMaXN0ZW5lcigpIHtcbiAgICBpZiAodGhpcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgIC8vIElmIHRoZSBkb2N1bWVudCBpcyBhbHJlYWR5IHZpc2libGUsIHRvIHRoZSB1c2VyLCBzZW5kIGEgbm90aWZpY2F0aW9uXG4gICAgICAvLyBpbW1lZGlhdGVseSB0aGF0IGEgc2Vzc2lvbiBoYXMgc3RhcnRlZC5cbiAgICAgIHRoaXMuX3NlbmRFdmVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgZG9jdW1lbnQgaXMgbm90IHZpc2libGUsIGxpc3RlbiBmb3Igd2hlbiBpdCBkb2VzIGJlY29tZSB2aXNpYmxlLlxuICAgICAgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBfc2VuZEV2ZW50IC0gU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBtYWluIHByb2Nlc3MgdG8gaW5kaWNhdGUgdGhlIGN1cnJlbnRcbiAgICogICAgICAgICAgICAgIHRhYiBpcyBub3cgdmlzaWJsZSB0byB0aGUgdXNlciwgaW5jbHVkZXMgdGhlXG4gICAqICAgICAgICAgICAgICB2aXNpYmlsaXR5X2V2ZW50X3JjdmRfdHMgdGltZSBpbiBtcyBmcm9tIHRoZSBVTklYIGVwb2NoLlxuICAgKi9cbiAgX3NlbmRFdmVudCgpIHtcbiAgICB0aGlzLl9wZXJmU2VydmljZS5tYXJrKFwidmlzaWJpbGl0eV9ldmVudF9yY3ZkX3RzXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCB2aXNpYmlsaXR5X2V2ZW50X3JjdmRfdHMgPSB0aGlzLl9wZXJmU2VydmljZS5nZXRNb3N0UmVjZW50QWJzTWFya1N0YXJ0QnlOYW1lKFxuICAgICAgICBcInZpc2liaWxpdHlfZXZlbnRfcmN2ZF90c1wiXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChcbiAgICAgICAgYWMuQWxzb1RvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuU0FWRV9TRVNTSU9OX1BFUkZfREFUQSxcbiAgICAgICAgICBkYXRhOiB7IHZpc2liaWxpdHlfZXZlbnRfcmN2ZF90cyB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gSWYgdGhpcyBmYWlsZWQsIGl0J3MgbGlrZWx5IGJlY2F1c2UgdGhlIGBwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nYFxuICAgICAgLy8gcHJlZiBpcyB0cnVlLiAgV2Ugc2hvdWxkIGF0IGxlYXN0IG5vdCBibG93IHVwLlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBfb25WaXNpYmlsaXR5Q2hhbmdlIC0gSWYgdGhlIHZpc2liaWxpdHkgaGFzIGNoYW5nZWQgdG8gdmlzaWJsZSwgc2VuZHMgYSBub3RpZmljYXRpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgYW5kIHJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVyLiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciB0YWIuXG4gICAqL1xuICBfb25WaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGlmICh0aGlzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gVklTSUJMRSkge1xuICAgICAgdGhpcy5fc2VuZEV2ZW50KCk7XG4gICAgICB0aGlzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogU3luY2hyb25vdXNseSBtYXAgYW4gaWRlbnRpZmllciBvciBhbiBhcnJheSBvZiBpZGVudGlmaWVycyB0byB0aGUgYmVzdFxuICogYEZsdWVudEJ1bmRsZWAgaW5zdGFuY2UocykuXG4gKlxuICogQHBhcmFtIHtJdGVyYWJsZX0gaXRlcmFibGVcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IGlkc1xuICogQHJldHVybnMge0ZsdWVudEJ1bmRsZXxBcnJheTxGbHVlbnRCdW5kbGU
+
fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBCdW5kbGVTeW5jKGl0ZXJhYmxlLCBpZHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkcykpIHtcbiAgICByZXR1cm4gZ2V0QnVuZGxlRm9ySWQoaXRlcmFibGUsIGlkcyk7XG4gIH1cblxuICByZXR1cm4gaWRzLm1hcChcbiAgICBpZCA9PiBnZXRCdW5kbGVGb3JJZChpdGVyYWJsZSwgaWQpXG4gICk7XG59XG5cbi8qXG4gKiBGaW5kIHRoZSBiZXN0IGBGbHVlbnRCdW5kbGVgIHdpdGggdGhlIHRyYW5zbGF0aW9uIGZvciBgaWRgLlxuICovXG5mdW5jdGlvbiBnZXRCdW5kbGVGb3JJZChpdGVyYWJsZSwgaWQpIHtcbiAgZm9yIChjb25zdCBidW5kbGUgb2YgaXRlcmFibGUpIHtcbiAgICBpZiAoYnVuZGxlLmhhc01lc3NhZ2UoaWQpKSB7XG4gICAgICByZXR1cm4gYnVuZGxlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiLypcbiAqIEFzeW5jaHJvbm91c2x5IG1hcCBhbiBpZGVudGlmaWVyIG9yIGFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHRvIHRoZSBiZXN0XG4gKiBgRmx1ZW50QnVuZGxlYCBpbnN0YW5jZShzKS5cbiAqXG4gKiBAcGFyYW0ge0FzeW5jSXRlcmFibGV9IGl0ZXJhYmxlXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc
+
fSBpZHNcbiAqIEByZXR1cm5zIHtQcm9taXNlPEZsdWVudEJ1bmRsZXxBcnJheTxGbHVlbnRCdW5kbGU
+

+
IHRvIHNhbml0aXplIHRyYW5zbGF0aW9ucy5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcImBkb2N1bWVudGAgaXMgdW5kZWZpbmVkLiBXaXRob3V0IGl0LCB0cmFuc2xhdGlvbnMgY2Fubm90IFwiICtcbiAgICAgIFwiYmUgc2FmZWx5IHNhbml0aXplZC4gQ29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBhdCBcIiArXG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9wcm9qZWN0Zmx1ZW50L2ZsdWVudC5qcy93aWtpL1JlYWN0LU92ZXJsYXlzLlwiXG4gICAgKTtcbiAgfVxuXG4gIGlmICghY2FjaGVkUGFyc2VNYXJrdXApIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICBjYWNoZWRQYXJzZU1hcmt1cCA9IGZ1bmN0aW9uIHBhcnNlTWFya3VwKHN0cikge1xuICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gc3RyO1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20odGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZFBhcnNlTWFya3VwO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJlYWN0TG9jYWxpemF0aW9uLCB7IGlzUmVhY3RMb2NhbGl6YXRpb259IGZyb20gXCIuL2xvY2FsaXphdGlvblwiO1xuaW1wb3J0IGNyZWF0ZVBhcnNlTWFya3VwIGZyb20gXCIuL21hcmt1cFwiO1xuXG4vKlxuICogVGhlIFByb3ZpZGVyIGNvbXBvbmVudCBmb3IgdGhlIGBSZWFjdExvY2FsaXphdGlvbmAgY2xhc3MuXG4gKlxuICogRXhwb3NlcyBhIGBSZWFjdExvY2FsaXphdGlvbmAgaW5zdGFuY2UgdG8gYWxsIGRlc2NlbmRhbnRzIHZpYSBSZWFjdCdzXG4gKiBjb250ZXh0IGZlYXR1cmUuICBJdCBtYWtlcyB0cmFuc2xhdGlvbnMgYXZhaWxhYmxlIHRvIGFsbCBsb2NhbGl6YWJsZVxuICogZWxlbWVudHMgaW4gdGhlIGRlc2NlbmRhbnQncyByZW5kZXIgdHJlZSB3aXRob3V0IHRoZSBuZWVkIHRvIHBhc3MgdGhlbVxuICogZXhwbGljaXRseS5cbiAqXG4gKiAgICAgPExvY2FsaXphdGlvblByb3ZpZGVyIGJ1bmRsZXM9e
+
KApn0
+
XG4gKiAgICAgICAgIOKAplxuICogICAgIDwvTG9jYWxpemF0aW9uUHJvdmlkZXI
+
XG4gKlxuICogVGhlIGBMb2NhbGl6YXRpb25Qcm92aWRlcmAgY29tcG9uZW50IHRha2VzIG9uZSBwcm9wOiBgYnVuZGxlc2AuICBJdCBzaG91bGRcbiAqIGJlIGFuIGl0ZXJhYmxlIG9mIGBGbHVlbnRCdW5kbGVgIGluc3RhbmNlcyBpbiBvcmRlciBvZiB0aGUgdXNlcidzXG4gKiBwcmVmZXJyZWQgbGFuZ3VhZ2VzLiAgVGhlIGBGbHVlbnRCdW5kbGVgIGluc3RhbmNlcyB3aWxsIGJlIHVzZWQgYnlcbiAqIGBSZWFjdExvY2FsaXphdGlvbmAgdG8gZm9ybWF0IHRyYW5zbGF0aW9ucy4gIElmIGEgdHJhbnNsYXRpb24gaXMgbWlzc2luZyBpblxuICogb25lIGluc3RhbmNlLCBgUmVhY3RMb2NhbGl6YXRpb25gIHdpbGwgZmFsbCBiYWNrIHRvIHRoZSBuZXh0IG9uZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxpemF0aW9uUHJvdmlkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCB7YnVuZGxlcywgcGFyc2VNYXJrdXB9ID0gcHJvcHM7XG5cbiAgICBpZiAoYnVuZGxlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2NhbGl6YXRpb25Qcm92aWRlciBtdXN0IHJlY2VpdmUgdGhlIGJ1bmRsZXMgcHJvcC5cIik7XG4gICAgfVxuXG4gICAgaWYgKCFidW5kbGVzW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBidW5kbGVzIHByb3AgbXVzdCBiZSBhbiBpdGVyYWJsZS5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5sMTBuID0gbmV3IFJlYWN0TG9jYWxpemF0aW9uKGJ1bmRsZXMpO1xuICAgIHRoaXMucGFyc2VNYXJrdXAgPSBwYXJzZU1hcmt1cCB8fCBjcmVhdGVQYXJzZU1hcmt1cCgpO1xuICB9XG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsMTBuOiB0aGlzLmwxMG4sXG4gICAgICBwYXJzZU1hcmt1cDogdGhpcy5wYXJzZU1hcmt1cCxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0KSB7XG4gICAgY29uc3QgeyBidW5kbGVzIH0gPSBuZXh0O1xuXG4gICAgaWYgKGJ1bmRsZXMgIT09IHRoaXMucHJvcHMuYnVuZGxlcykge1xuICAgICAgdGhpcy5sMTBuLnNldEJ1bmRsZXMoYnVuZGxlcyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG59XG5cbkxvY2FsaXphdGlvblByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBsMTBuOiBpc1JlYWN0TG9jYWxpemF0aW9uLFxuICBwYXJzZU1hcmt1cDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5Mb2NhbGl6YXRpb25Qcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICBidW5kbGVzOiBpc0l0ZXJhYmxlLFxuICBwYXJzZU1hcmt1cDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5mdW5jdGlvbiBpc0l0ZXJhYmxlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBjb25zdCBwcm9wID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHByb3ApKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV3IEVycm9yKFxuICAgIGBUaGUgJHtwcm9wTmFtZX0gcHJvcCBzdXBwbGllZCB0byAke2NvbXBvbmVudE5hbWV9IG11c3QgYmUgYW4gaXRlcmFibGUuYFxuICApO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGlzUmVhY3RMb2NhbGl6YXRpb24gfSBmcm9tIFwiLi9sb2NhbGl6YXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aExvY2FsaXphdGlvbihJbm5lcikge1xuICBjbGFzcyBXaXRoTG9jYWxpemF0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGNvbnN0IHsgbDEwbiB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICBpZiAobDEwbikge1xuICAgICAgICBsMTBuLnN1YnNjcmliZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNvbnN0IHsgbDEwbiB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICBpZiAobDEwbikge1xuICAgICAgICBsMTBuLnVuc3Vic2NyaWJlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogUmVyZW5kZXIgdGhpcyBjb21wb25lbnQgaW4gYSBuZXcgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgcmVsb2NhbGl6ZSgpIHtcbiAgICAgIC8vIFdoZW4gdGhlIGBSZWFjdExvY2FsaXphdGlvbmAncyBmYWxsYmFjayBjaGFpbiBjaGFuZ2VzLCB1cGRhdGUgdGhlXG4gICAgICAvLyBjb21wb25lbnQuXG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBGaW5kIGEgdHJhbnNsYXRpb24gYnkgYGlkYCBhbmQgZm9ybWF0IGl0IHRvIGEgc3RyaW5nIHVzaW5nIGBhcmdzYC5cbiAgICAgKi9cbiAgICBnZXRTdHJpbmcoaWQsIGFyZ3MsIGZhbGxiYWNrKSB7XG4gICAgICBjb25zdCB7IGwxMG4gfSA9IHRoaXMuY29udGV4dDtcblxuICAgICAgaWYgKCFsMTBuKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjayB8fCBpZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGwxMG4uZ2V0U3RyaW5nKGlkLCBhcmdzLCBmYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIElubmVyLFxuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIC8vIGdldFN0cmluZyBuZWVkcyB0byBiZSByZS1ib3VuZCBvbiB1cGRhdGVzIHRvIHRyaWdnZXIgYSByZS1yZW5kZXJcbiAgICAgICAgICB7IGdldFN0cmluZzogKC4uLmFyZ3MpID0
+
IHRoaXMuZ2V0U3RyaW5nKC4uLmFyZ3MpIH0sXG4gICAgICAgICAgdGhpcy5wcm9wc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIFdpdGhMb2NhbGl6YXRpb24uZGlzcGxheU5hbWUgPSBgV2l0aExvY2FsaXphdGlvbigke2Rpc3BsYXlOYW1lKElubmVyKX0pYDtcblxuICBXaXRoTG9jYWxpemF0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgICBsMTBuOiBpc1JlYWN0TG9jYWxpemF0aW9uXG4gIH07XG5cbiAgcmV0dXJuIFdpdGhMb2NhbGl6YXRpb247XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlOYW1lKGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudC5uYW1lIHx8IFwiQ29tcG9uZW50XCI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoaXMgZGlyZWN0b3J5LlxuICovXG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbC1jYXNlIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZSxcbiAgLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9taXR0ZWRDbG9zZVRhZ3M7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoaXMgZGlyZWN0b3J5LlxuICovXG5cbmltcG9ydCBvbWl0dGVkQ2xvc2VUYWdzIGZyb20gJy4vb21pdHRlZENsb3NlVGFncyc7XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3MgY2Fubm90IGhhdmUgY2hpbGRyZW4uIFRoaXMgaGFzIHRoZSBzYW1lIHB1cnBvc2UgYXNcbi8vIGBvbWl0dGVkQ2xvc2VUYWdzYCBleGNlcHQgdGhhdCBgbWVudWl0ZW1gIHNob3VsZCBzdGlsbCBoYXZlIGl0cyBjbG9zaW5nIHRhZy5cblxudmFyIHZvaWRFbGVtZW50VGFncyA9IHtcbiAgbWVudWl0ZW06IHRydWUsXG4gIC4uLm9taXR0ZWRDbG9zZVRhZ3MsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB2b2lkRWxlbWVudFRhZ3M7XG4iLCJpbXBvcnQgeyBpc1ZhbGlkRWxlbWVudCwgY2xvbmVFbGVtZW50LCBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGlzUmVhY3RMb2NhbGl6YXRpb24gfSBmcm9tIFwiLi9sb2NhbGl6YXRpb25cIjtcbmltcG9ydCBWT0lEX0VMRU1FTlRTIGZyb20gXCIuLi92ZW5kb3Ivdm9pZEVsZW1lbnRUYWdzXCI7XG5cbi8vIE1hdGNoIHRoZSBvcGVuaW5nIGFuZ2xlIGJyYWNrZXQgKDwpIGluIEhUTUwgdGFncywgYW5kIEhUTUwgZW50aXRpZXMgbGlrZVxuLy8gJmFtcDssICYjMDAzODssICYjeDAwMjY7LlxuY29uc3QgcmVNYXJrdXAgPSAvPHwmIz9cXHcrOy87XG5cbi8qXG4gKiBQcmVwYXJlIHByb3BzIHBhc3NlZCB0byBgTG9jYWxpemVkYCBmb3IgZm9ybWF0dGluZy5cbiAqL1xuZnVuY3Rpb24gdG9Bcmd1bWVudHMocHJvcHMpIHtcbiAgY29uc3QgYXJncyA9IHt9O1xuICBjb25zdCBlbGVtcyA9IHt9O1xuXG4gIGZvciAoY29uc3QgW3Byb3BuYW1lLCBwcm9wdmFsXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcykpIHtcbiAgICBpZiAocHJvcG5hbWUuc3RhcnRzV2l0aChcIiRcIikpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwcm9wbmFtZS5zdWJzdHIoMSk7XG4gICAgICBhcmdzW25hbWVdID0gcHJvcHZhbDtcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KHByb3B2YWwpKSB7XG4gICAgICAvLyBXZSdsbCB0cnkgdG8gbWF0Y2ggbG9jYWxOYW1lcyBvZiBlbGVtZW50cyBmb3VuZCBpbiB0aGUgdHJhbnNsYXRpb24gd2l0aFxuICAgICAgLy8gbmFtZXMgb2YgZWxlbWVudHMgcGFzc2VkIGFzIHByb3BzLiBsb2NhbE5hbWVzIGFyZSBhbHdheXMgbG93ZXJjYXNlLlxuICAgICAgY29uc3QgbmFtZSA9IHByb3BuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBlbGVtc1tuYW1lXSA9IHByb3B2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFthcmdzLCBlbGVtc107XG59XG5cbi8qXG4gKiBUaGUgYExvY2FsaXplZGAgY2xhc3MgcmVuZGVycyBpdHMgY2hpbGQgd2l0aCB0cmFuc2xhdGVkIHByb3BzIGFuZCBjaGlsZHJlbi5cbiAqXG4gKiAgICAgPExvY2FsaXplZCBpZD1cImhlbGxvLXdvcmxkXCI
+
XG4gKiAgICAgICAgIDxwPnsnSGVsbG8sIHdvcmxkISd9PC9wPlxuICogICAgIDwvTG9jYWxpemVkPlxuICpcbiAqIFRoZSBgaWRgIHByb3Agc2hvdWxkIGJlIHRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdHJhbnNsYXRpb24uICBBbnlcbiAqIGF0dHJpYnV0ZXMgZm91bmQgaW4gdGhlIHRyYW5zbGF0aW9uIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgd3JhcHBlZCBlbGVtZW50LlxuICpcbiAqIEFyZ3VtZW50cyB0byB0aGUgdHJhbnNsYXRpb24gY2FuIGJlIHBhc3NlZCBhcyBgJGAtcHJlZml4ZWQgcHJvcHMgb25cbiAqIGBMb2NhbGl6ZWRgLlxuICpcbiAqICAgICA8TG9jYWxpemVkIGlkPVwiaGVsbG8td29ybGRcIiAkdXNlcm5hbWU9e25hbWV9PlxuICogICAgICAgICA8cD57J0hlbGxvLCB7ICR1c2VybmFtZSB9ISd9PC9wPlxuICogICAgIDwvTG9jYWxpemVkPlxuICpcbiAqICBJdCdzIHJlY29tbWVuZGVkIHRoYXQgdGhlIGNvbnRlbnRzIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBiZSBhIHN0cmluZ1xuICogIGV4cHJlc3Npb24uICBUaGUgc3RyaW5nIHdpbGwgYmUgdXNlZCBhcyB0aGUgdWx0aW1hdGUgZmFsbGJhY2sgaWYgbm9cbiAqICB0cmFuc2xhdGlvbiBpcyBhdmFpbGFibGUuICBJdCBhbHNvIG1ha2VzIGl0IGVhc3kgdG8gZ3JlcCBmb3Igc3RyaW5ncyBpbiB0aGVcbiAqICBzb3VyY2UgY29kZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxpemVkIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsMTBuIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAobDEwbikge1xuICAgICAgbDEwbi5zdWJzY3JpYmUodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY29uc3QgeyBsMTBuIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAobDEwbikge1xuICAgICAgbDEwbi51bnN1YnNjcmliZSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBSZXJlbmRlciB0aGlzIGNvbXBvbmVudCBpbiBhIG5ldyBsYW5ndWFnZS5cbiAgICovXG4gIHJlbG9jYWxpemUoKSB7XG4gICAgLy8gV2hlbiB0aGUgYFJlYWN0TG9jYWxpemF0aW9uYCdzIGZhbGxiYWNrIGNoYWluIGNoYW5nZXMsIHVwZGF0ZSB0aGVcbiAgICAvLyBjb21wb25lbnQuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbDEwbiwgcGFyc2VNYXJrdXAgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGlkLCBhdHRycywgY2hpbGRyZW46IGVsZW0gfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBjaGlsZCBlbGVtZW50IGlzbid0IGFuIGFycmF5XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIjxMb2NhbGl6ZWQvPiBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFwiICtcbiAgICAgICAgXCJSZWFjdCBub2RlIGNoaWxkXCIpO1xuICAgIH1cblxuICAgIGlmICghbDEwbikge1xuICAgICAgLy8gVXNlIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBhcyBmYWxsYmFjay5cbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1bmRsZSA9IGwxMG4uZ2V0QnVuZGxlKGlkKTtcblxuICAgIGlmIChidW5kbGUgPT09IG51bGwpIHtcbiAgICAgIC8vIFVzZSB0aGUgd3JhcHBlZCBjb21wb25lbnQgYXMgZmFsbGJhY2suXG4gICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG5cbiAgICBjb25zdCBtc2cgPSBidW5kbGUuZ2V0TWVzc2FnZShpZCk7XG4gICAgY29uc3QgW2FyZ3MsIGVsZW1zXSA9IHRvQXJndW1lbnRzKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IG1lc3NhZ2VWYWx1ZSA9IGJ1bmRsZS5mb3JtYXQobXNnLCBhcmdzKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBmYWxsYmFjayBpcyBhIHZhbGlkIGVsZW1lbnQgLS0gaWYgbm90IHRoZW4gaXQncyBub3RcbiAgICAvLyBtYXJrdXAgKGUuZy4gbm90aGluZyBvciBhIGZhbGxiYWNrIHN0cmluZykgc28ganVzdCB1c2UgdGhlXG4gICAgLy8gZm9ybWF0dGVkIG1lc3NhZ2UgdmFsdWVcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGVsZW0pKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZVZhbHVlO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWZhdWx0IGlzIHRvIGZvcmJpZCBhbGwgbWVzc2FnZSBhdHRyaWJ1dGVzLiBJZiB0aGUgYXR0cnMgcHJvcCBleGlzdHNcbiAgICAvLyBvbiB0aGUgTG9jYWxpemVkIGluc3RhbmNlLCBvbmx5IHNldCBtZXNzYWdlIGF0dHJpYnV0ZXMgd2hpY2ggaGF2ZSBiZWVuXG4gICAgLy8gZXhwbGljaXRseSBhbGxvd2VkIGJ5IHRoZSBkZXZlbG9wZXIuXG4gICAgaWYgKGF0dHJzICYmIG1zZy5hdHRycykge1xuICAgICAgdmFyIGxvY2FsaXplZFByb3BzID0ge307XG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBhbGxvd2VkXSBvZiBPYmplY3QuZW50cmllcyhhdHRycykpIHtcbiAgICAgICAgaWYgKGFsbG93ZWQgJiYgbXNnLmF0dHJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgbG9jYWxpemVkUHJvcHNbbmFtZV0gPSBidW5kbGUuZm9ybWF0KG1zZy5hdHRyc1tuYW1lXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgd3JhcHBlZCBjb21wb25lbnQgaXMgYSBrbm93biB2b2lkIGVsZW1lbnQsIGV4cGxpY2l0bHkgZGlzbWlzcyB0aGVcbiAgICAvLyBtZXNzYWdlIHZhbHVlIGFuZCBkbyBub3QgcGFzcyBpdCB0byBjbG9uZUVsZW1lbnQgaW4gb3JkZXIgdG8gYXZvaWQgdGhlXG4gICAgLy8gXCJ2b2lkIGVsZW1lbnQgdGFncyBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciB1c2VcbiAgICAvLyBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgXCIgZXJyb3IuXG4gICAgaWYgKGVsZW0udHlwZSBpbiBWT0lEX0VMRU1FTlRTKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGVsZW0sIGxvY2FsaXplZFByb3BzKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbWVzc2FnZSBoYXMgYSBudWxsIHZhbHVlLCB3ZSdyZSBvbmx5IGludGVyZXN0ZWQgaW4gaXRzIGF0dHJpYnV0ZXMuXG4gICAgLy8gRG8gbm90IHBhc3MgdGhlIG51bGwgdmFsdWUgdG8gY2xvbmVFbGVtZW50IGFzIGl0IHdvdWxkIG51a2UgYWxsIGNoaWxkcmVuXG4gICAgLy8gb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgIGlmIChtZXNzYWdlVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbSwgbG9jYWxpemVkUHJvcHMpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtZXNzYWdlIHZhbHVlIGRvZXNuJ3QgY29udGFpbiBhbnkgbWFya3VwIG5vciBhbnkgSFRNTCBlbnRpdGllcyxcbiAgICAvLyBpbnNlcnQgaXQgYXMgdGhlIG9ubHkgY2hpbGQgb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgIGlmICghcmVNYXJrdXAudGVzdChtZXNzYWdlVmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGVsZW0sIGxvY2FsaXplZFByb3BzLCBtZXNzYWdlVmFsdWUpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIG1hcmt1cCwgcGFyc2UgaXQgYW5kIHRyeSB0byBtYXRjaCB0aGUgY2hpbGRyZW5cbiAgICAvLyBmb3VuZCBpbiB0aGUgdHJhbnNsYXRpb24gd2l0aCB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoaXMgTG9jYWxpemVkLlxuICAgIGNvbnN0IHRyYW5zbGF0aW9uTm9kZXMgPSBwYXJzZU1hcmt1cChtZXNzYWdlVmFsdWUpO1xuICAgIGNvbnN0IHRyYW5zbGF0ZWRDaGlsZHJlbiA9IHRyYW5zbGF0aW9uTm9kZXMubWFwKGNoaWxkTm9kZSA9PiB7XG4gICAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSBjaGlsZE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIHJldHVybiBjaGlsZE5vZGUudGV4dENvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBjaGlsZCBpcyBub3QgZXhwZWN0ZWQganVzdCB0YWtlIGl0cyB0ZXh0Q29udGVudC5cbiAgICAgIGlmICghZWxlbXMuaGFzT3duUHJvcGVydHkoY2hpbGROb2RlLmxvY2FsTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc291cmNlQ2hpbGQgPSBlbGVtc1tjaGlsZE5vZGUubG9jYWxOYW1lXTtcblxuICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgcGFzc2VkIGFzIGEgcHJvcCB0byA8TG9jYWxpemVkPiBpcyBhIGtub3duIHZvaWQgZWxlbWVudCxcbiAgICAgIC8vIGV4cGxpY2l0bHkgZGlzbWlzcyBhbnkgdGV4dENvbnRlbnQgd2hpY2ggbWlnaHQgaGF2ZSBhY2NpZGVudGFsbHkgYmVlblxuICAgICAgLy8gZGVmaW5lZCBpbiB0aGUgdHJhbnNsYXRpb24gdG8gcHJldmVudCB0aGUgXCJ2b2lkIGVsZW1lbnQgdGFncyBtdXN0IG5vdFxuICAgICAgLy8gaGF2ZSBjaGlsZHJlblwiIGVycm9yLlxuICAgICAgaWYgKHNvdXJjZUNoaWxkLnR5cGUgaW4gVk9JRF9FTEVNRU5UUykge1xuICAgICAgICByZXR1cm4gc291cmNlQ2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE8gUHJvdGVjdCBjb250ZW50cyBvZiBlbGVtZW50cyB3cmFwcGVkIGluIDxMb2NhbGl6ZWQ
+
XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGZsdWVudC9mbHVlbnQuanMvaXNzdWVzLzE4NFxuICAgICAgLy8gVE9ETyAgQ29udHJvbCBsb2NhbGl6YWJsZSBhdHRyaWJ1dGVzIG9uIGVsZW1lbnRzIHBhc3NlZCBhcyBwcm9wc1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Byb2plY3RmbHVlbnQvZmx1ZW50LmpzL2lzc3Vlcy8xODVcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoc291cmNlQ2hpbGQsIG51bGwsIGNoaWxkTm9kZS50ZXh0Q29udGVudCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGVsZW0sIGxvY2FsaXplZFByb3BzLCAuLi50cmFuc2xhdGVkQ2hpbGRyZW4pO1xuICB9XG59XG5cbkxvY2FsaXplZC5jb250ZXh0VHlwZXMgPSB7XG4gIGwxMG46IGlzUmVhY3RMb2NhbGl6YXRpb24sXG4gIHBhcnNlTWFya3VwOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbkxvY2FsaXplZC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcbiIsIi8qXG4gKiBAbW9kdWxlIGZsdWVudC1yZWFjdFxuICogQG92ZXJ2aWV3XG4gKlxuXG4gKiBgZmx1ZW50LXJlYWN0YCBwcm92aWRlcyBSZWFjdCBiaW5kaW5ncyBmb3IgRmx1ZW50LiAgSXQgdGFrZXMgYWR2YW50YWdlIG9mXG4gKiBSZWFjdCdzIENvbXBvbmVudHMgc3lzdGVtIGFuZCB0aGUgdmlydHVhbCBET00uICBUcmFuc2xhdGlvbnMgYXJlIGV4cG9zZWQgdG9cbiAqIGNvbXBvbmVudHMgdmlhIHRoZSBwcm92aWRlciBwYXR0ZXJuLlxuICpcbiAqICAgICA8TG9jYWxpemF0aW9uUHJvdmlkZXIgYnVuZGxlcz174oCmfT5cbiAqICAgICAgICAgPExvY2FsaXplZCBpZD1cImhlbGxvLXdvcmxkXCI
+
XG4gKiAgICAgICAgICAgICA8cD57J0hlbGxvLCB3b3JsZCEnfTwvcD5cbiAqICAgICAgICAgPC9Mb2NhbGl6ZWQ
+
XG4gKiAgICAgPC9Mb2NhbGl6YXRpb25Qcm92aWRlcj5cbiAqXG4gKiBDb25zdWx0IHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBgTG9jYWxpemF0aW9uUHJvdmlkZXJgIGFuZCB0aGUgYExvY2FsaXplZGBcbiAqIGNvbXBvbmVudHMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBMb2NhbGl6YXRpb25Qcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdpdGhMb2NhbGl6YXRpb24gfSBmcm9tIFwiLi93aXRoX2xvY2FsaXphdGlvblwiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMb2NhbGl6ZWQgfSBmcm9tIFwiLi9sb2NhbGl6ZWRcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUmVhY3RMb2NhbGl6YXRpb24sIGlzUmVhY3RMb2NhbGl6YXRpb24gfVxuICBmcm9tIFwiLi9sb2NhbGl6YXRpb25cIjtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgQUxMT1dFRF9TVFlMRV9UQUdTID0gW1wiY29sb3JcIiwgXCJiYWNrZ3JvdW5kQ29sb3JcIl07XG5cbmV4cG9ydCBjb25zdCBCdXR0b24gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHN0eWxlID0ge307XG5cbiAgLy8gQWRkIGFsbG93ZWQgc3R5bGUgdGFncyBmcm9tIHByb3BzLCBlLmcuIHByb3BzLmNvbG9yIGJlY29tZXMgc3R5bGU9e2NvbG9yOiBwcm9wcy5jb2xvcn1cbiAgZm9yIChjb25zdCB0YWcgb2YgQUxMT1dFRF9TVFlMRV9UQUdTKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wc1t0YWddICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBzdHlsZVt0YWddID0gcHJvcHNbdGFnXTtcbiAgICB9XG4gIH1cbiAgLy8gcmVtb3ZlIGJvcmRlciBpZiBiZyBpcyBzZXQgdG8gc29tZXRoaW5nIGN1c3RvbVxuICBpZiAoc3R5bGUuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgc3R5bGUuYm9yZGVyID0gXCIwXCI7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQ2xpY2t9XG4gICAgICBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZSB8fCBcIkFTUm91dGVyQnV0dG9uIHNlY29uZGFyeVwifVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgID5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG4vLyBsaWZ0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9raXR6ZS8yM2Q4MmJiOWViMGJhYWJmZDAzYTZhNzIwYjFkNjM3ZlxuY29uc3QgQ29uZGl0aW9uYWxXcmFwcGVyID0gKHsgY29uZGl0aW9uLCB3cmFwLCBjaGlsZHJlbiB9KSA9PlxuICBjb25kaXRpb24gPyB3cmFwKGNoaWxkcmVuKSA6IGNoaWxkcmVuO1xuXG5leHBvcnQgZGVmYXVsdCBDb25kaXRpb25hbFdyYXBwZXI7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2NoZW1hIGZyb20gXCIuLi8uLi90ZW1wbGF0ZXMvU2ltcGxlU25pcHBldC9TaW1wbGVTbmlwcGV0LnNjaGVtYS5qc29uXCI7XG5cbmV4cG9ydCBjbGFzcyBTbmlwcGV0QmFzZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQmxvY2tDbGlja2VkID0gdGhpcy5vbkJsb2NrQ2xpY2tlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EaXNtaXNzQ2xpY2tlZCA9IHRoaXMub25EaXNtaXNzQ2xpY2tlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0QmxvY2tCdXR0b25SZWYgPSB0aGlzLnNldEJsb2NrQnV0dG9uUmVmLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkJsb2NrQnV0dG9uTW91c2VFbnRlciA9IHRoaXMub25CbG9ja0J1dHRvbk1vdXNlRW50ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQmxvY2tCdXR0b25Nb3VzZUxlYXZlID0gdGhpcy5vbkJsb2NrQnV0dG9uTW91c2VMZWF2ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGJsb2NrQnV0dG9uSG92ZXI6IGZhbHNlIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5ibG9ja0J1dHRvblJlZikge1xuICAgICAgdGhpcy5ibG9ja0J1dHRvblJlZi5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcIm1vdXNlZW50ZXJcIixcbiAgICAgICAgdGhpcy5vbkJsb2NrQnV0dG9uTW91c2VFbnRlclxuICAgICAgKTtcbiAgICAgIHRoaXMuYmxvY2tCdXR0b25SZWYuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJtb3VzZWxlYXZlXCIsXG4gICAgICAgIHRoaXMub25CbG9ja0J1dHRvbk1vdXNlTGVhdmVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuYmxvY2tCdXR0b25SZWYpIHtcbiAgICAgIHRoaXMuYmxvY2tCdXR0b25SZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJtb3VzZWVudGVyXCIsXG4gICAgICAgIHRoaXMub25CbG9ja0J1dHRvbk1vdXNlRW50ZXJcbiAgICAgICk7XG4gICAgICB0aGlzLmJsb2NrQnV0dG9uUmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwibW91c2VsZWF2ZVwiLFxuICAgICAgICB0aGlzLm9uQmxvY2tCdXR0b25Nb3VzZUxlYXZlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHNldEJsb2NrQnV0dG9uUmVmKGVsZW1lbnQpIHtcbiAgICB0aGlzLmJsb2NrQnV0dG9uUmVmID0gZWxlbWVudDtcbiAgfVxuXG4gIG9uQmxvY2tCdXR0b25Nb3VzZUVudGVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBibG9ja0J1dHRvbkhvdmVyOiB0cnVlIH0pO1xuICB9XG5cbiAgb25CbG9ja0J1dHRvbk1vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGJsb2NrQnV0dG9uSG92ZXI6IGZhbHNlIH0pO1xuICB9XG5cbiAgb25CbG9ja0NsaWNrZWQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMucHJvdmlkZXIgIT09IFwicHJldmlld1wiKSB7XG4gICAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgICAgZXZlbnQ6IFwiQkxPQ0tcIixcbiAgICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkJsb2NrKCk7XG4gIH1cblxuICBvbkRpc21pc3NDbGlja2VkKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnByb3ZpZGVyICE9PSBcInByZXZpZXdcIikge1xuICAgICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICAgIGV2ZW50OiBcIkRJU01JU1NcIixcbiAgICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkRpc21pc3MoKTtcbiAgfVxuXG4gIHJlbmRlckRpc21pc3NCdXR0b24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZm9vdGVyRGlzbWlzcykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3Rlci1jb250ZW50XCI
+
XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkFTUm91dGVyQnV0dG9uIHNlY29uZGFyeVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25EaXNtaXNzQ2xpY2tlZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuY29udGVudC5zY2VuZTJfZGlzbWlzc19idXR0b25fdGV4dH1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbGFiZWwgPVxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LmJsb2NrX2J1dHRvbl90ZXh0IHx8XG4gICAgICBzY2hlbWEucHJvcGVydGllcy5ibG9ja19idXR0b25fdGV4dC5kZWZhdWx0O1xuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImJsb2NrQnV0dG9uXCJcbiAgICAgICAgdGl0bGU9e2xhYmVsfVxuICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbiAgICAgICAgb25DbGljaz17dGhpcy5vbkJsb2NrQ2xpY2tlZH1cbiAgICAgICAgcmVmPXt0aGlzLnNldEJsb2NrQnV0dG9uUmVmfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBibG9ja0J1dHRvbkhvdmVyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgY29udGFpbmVyQ2xhc3NOYW1lID0gYFNuaXBwZXRCYXNlQ29udGFpbmVyJHtcbiAgICAgIHByb3BzLmNsYXNzTmFtZSA
/
IGAgJHtwcm9wcy5jbGFzc05hbWV9YCA6IFwiXCJcbiAgICB9JHtibG9ja0J1dHRvbkhvdmVyID8gXCIgYWN0aXZlXCIgOiBcIlwifWA7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NvbnRhaW5lckNsYXNzTmFtZX0gc3R5bGU9e3RoaXMucHJvcHMudGV4dFN0eWxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbm5lcldyYXBwZXJcIj57cHJvcHMuY2hpbGRyZW59PC9kaXY
+
XG4gICAgICAgIHt0aGlzLnJlbmRlckRpc21pc3NCdXR0b24oKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBDb25kaXRpb25hbFdyYXBwZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQ29uZGl0aW9uYWxXcmFwcGVyL0NvbmRpdGlvbmFsV3JhcHBlclwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUmljaFRleHQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9SaWNoVGV4dC9SaWNoVGV4dFwiO1xuaW1wb3J0IHsgc2FmZVVSSSB9IGZyb20gXCIuLi8uLi90ZW1wbGF0ZS11dGlsc1wiO1xuaW1wb3J0IHsgU25pcHBldEJhc2UgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TbmlwcGV0QmFzZS9TbmlwcGV0QmFzZVwiO1xuXG5jb25zdCBERUZBVUxUX0lDT05fUEFUSCA9IFwiY2hyb21lOi8vYnJhbmRpbmcvY29udGVudC9pY29uNjQucG5nXCI7XG4vLyBBbHQgdGV4dCBwbGFjZWhvbGRlciBpbiBjYXNlIHRoZSBwcm9wIGZyb20gdGhlIHNlcnZlciBpc24ndCBhdmFpbGFibGVcbmNvbnN0IElDT05fQUxUX1RFWFQgPSBcIlwiO1xuXG5leHBvcnQgY2xhc3MgU2ltcGxlU25pcHBldCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQnV0dG9uQ2xpY2sgPSB0aGlzLm9uQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQnV0dG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucHJvcHMucHJvdmlkZXIgIT09IFwicHJldmlld1wiKSB7XG4gICAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tfQlVUVE9OXCIsXG4gICAgICAgIGlkOiB0aGlzLnByb3BzLlVJU3VyZmFjZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IGJ1dHRvbl91cmwgfSA9IHRoaXMucHJvcHMuY29udGVudDtcbiAgICAvLyBJZiBidXR0b25fdXJsIGlzIGRlZmluZWQgaGFuZGxlIGl0IGFzIE9QRU5fVVJMIGFjdGlvblxuICAgIGNvbnN0IHR5cGUgPSB0aGlzLnByb3BzLmNvbnRlbnQuYnV0dG9uX2FjdGlvbiB8fCAoYnV0dG9uX3VybCAmJiBcIk9QRU5fVVJMXCIpO1xuICAgIHRoaXMucHJvcHMub25BY3Rpb24oe1xuICAgICAgdHlwZSxcbiAgICAgIGRhdGE6IHsgYXJnczogdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9hY3Rpb25fYXJncyB8fCBidXR0b25fdXJsIH0sXG4gICAgfSk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmNvbnRlbnQuZG9fbm90X2F1dG9ibG9jaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkJsb2NrKCk7XG4gICAgfVxuICB9XG5cbiAgX3Nob3VsZFJlbmRlckJ1dHRvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9hY3Rpb24gfHxcbiAgICAgIHRoaXMucHJvcHMub25CdXR0b25DbGljayB8fFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl91cmxcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVGl0bGUoKSB7XG4gICAgY29uc3QgeyB0aXRsZSB9ID0gdGhpcy5wcm9wcy5jb250ZW50O1xuICAgIHJldHVybiB0aXRsZSA
/
IChcbiAgICAgIDxoM1xuICAgICAgICBjbGFzc05hbWU9e2B0aXRsZSAke3RoaXMuX3Nob3VsZFJlbmRlckJ1dHRvbigpID8gXCJ0aXRsZS1pbmxpbmVcIiA6IFwiXCJ9YH1cbiAgICAgID5cbiAgICAgICAge3RoaXMucmVuZGVyVGl0bGVJY29uKCl9IHt0aXRsZX1cbiAgICAgIDwvaDM
+
XG4gICAgKSA6IG51bGw7XG4gIH1cblxuICByZW5kZXJUaXRsZUljb24oKSB7XG4gICAgY29uc3QgdGl0bGVJY29uTGlnaHQgPSBzYWZlVVJJKHRoaXMucHJvcHMuY29udGVudC50aXRsZV9pY29uKTtcbiAgICBjb25zdCB0aXRsZUljb25EYXJrID0gc2FmZVVSSShcbiAgICAgIHRoaXMucHJvcHMuY29udGVudC50aXRsZV9pY29uX2RhcmtfdGhlbWUgfHwgdGhpcy5wcm9wcy5jb250ZW50LnRpdGxlX2ljb25cbiAgICApO1xuICAgIGlmICghdGl0bGVJY29uTGlnaHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ
+
XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgY2xhc3NOYW1lPVwidGl0bGVJY29uIGljb24tbGlnaHQtdGhlbWVcIlxuICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybChcIiR7dGl0bGVJY29uTGlnaHR9XCIpYCB9fVxuICAgICAgICAvPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT1cInRpdGxlSWNvbiBpY29uLWRhcmstdGhlbWVcIlxuICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybChcIiR7dGl0bGVJY29uRGFya31cIilgIH19XG4gICAgICAgIC8
+
XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJCdXR0b24oKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBpZiAoIXRoaXMuX3Nob3VsZFJlbmRlckJ1dHRvbigpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBvbkNsaWNrPXtwcm9wcy5vbkJ1dHRvbkNsaWNrIHx8IHRoaXMub25CdXR0b25DbGlja31cbiAgICAgICAgY29sb3I9e3Byb3BzLmNvbnRlbnQuYnV0dG9uX2NvbG9yfVxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9e3Byb3BzLmNvbnRlbnQuYnV0dG9uX2JhY2tncm91bmRfY29sb3J9XG4gICAgICA
+
XG4gICAgICAgIHtwcm9wcy5jb250ZW50LmJ1dHRvbl9sYWJlbH1cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJUZXh0KCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSaWNoVGV4dFxuICAgICAgICB0ZXh0PXtwcm9wcy5jb250ZW50LnRleHR9XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzPXt0aGlzLnByb3BzLmN1c3RvbUVsZW1lbnRzfVxuICAgICAgICBsb2NhbGl6YXRpb25faWQ9XCJ0ZXh0XCJcbiAgICAgICAgbGlua3M9e3Byb3BzLmNvbnRlbnQubGlua3N9XG4gICAgICAgIHNlbmRDbGljaz17cHJvcHMuc2VuZENsaWNrfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgd3JhcFNlY3Rpb25IZWFkZXIodXJsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gPGEgaHJlZj17dXJsfT57Y2hpbGRyZW59PC9hPjtcbiAgICB9O1xuICB9XG5cbiAgd3JhcFNuaXBwZXRDb250ZW50KGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiaW5uZXJDb250ZW50V3JhcHBlclwiPntjaGlsZHJlbn08L2Rpdj47XG4gIH1cblxuICByZW5kZXJTZWN0aW9uSGVhZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG5cbiAgICAvLyBhbiBpY29uIGFuZCB0ZXh0IG11c3QgYmUgc3BlY2lmaWVkIHRvIHJlbmRlciB0aGUgc2VjdGlvbiBoZWFkZXJcbiAgICBpZiAocHJvcHMuY29udGVudC5zZWN0aW9uX3RpdGxlX2ljb24gJiYgcHJvcHMuY29udGVudC5zZWN0aW9uX3RpdGxlX3RleHQpIHtcbiAgICAgIGNvbnN0IHNlY3Rpb25UaXRsZUljb25MaWdodCA9IHNhZmVVUkkocHJvcHMuY29udGVudC5zZWN0aW9uX3RpdGxlX2ljb24pO1xuICAgICAgY29uc3Qgc2VjdGlvblRpdGxlSWNvbkRhcmsgPSBzYWZlVVJJKFxuICAgICAgICBwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfaWNvbl9kYXJrX3RoZW1lIHx8XG4gICAgICAgICAgcHJvcHMuY29udGVudC5zZWN0aW9uX3RpdGxlX2ljb25cbiAgICAgICk7XG4gICAgICBjb25zdCBzZWN0aW9uVGl0bGVVUkwgPSBwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfdXJsO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb24taGVhZGVyXCI
+
XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInNlY3Rpb24tdGl0bGVcIj5cbiAgICAgICAgICAgIDxDb25kaXRpb25hbFdyYXBwZXJcbiAgICAgICAgICAgICAgY29uZGl0aW9uPXtzZWN0aW9uVGl0bGVVUkx9XG4gICAgICAgICAgICAgIHdyYXA9e3RoaXMud3JhcFNlY3Rpb25IZWFkZXIoc2VjdGlvblRpdGxlVVJMKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tc21hbGwtc3BhY2VyIGljb24tbGlnaHQtdGhlbWVcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybChcIiR7c2VjdGlvblRpdGxlSWNvbkxpZ2h0fVwiKWAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tc21hbGwtc3BhY2VyIGljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtzZWN0aW9uVGl0bGVJY29uRGFya31cIilgIH19XG4gICAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNlY3Rpb24tdGl0bGUtdGV4dFwiPlxuICAgICAgICAgICAgICAgIHtwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfdGV4dH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9Db25kaXRpb25hbFdyYXBwZXI
+
XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2VjdGlvbkhlYWRlciA9IHRoaXMucmVuZGVyU2VjdGlvbkhlYWRlcigpO1xuICAgIGxldCBjbGFzc05hbWUgPSBcIlNpbXBsZVNuaXBwZXRcIjtcblxuICAgIGlmIChwcm9wcy5jbGFzc05hbWUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBgICR7cHJvcHMuY2xhc3NOYW1lfWA7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb250ZW50LnRhbGwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0YWxsXCI7XG4gICAgfVxuICAgIGlmIChzZWN0aW9uSGVhZGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaGFzLXNlY3Rpb24taGVhZGVyXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic25pcHBldC1ob3Zlci13cmFwcGVyXCI
+
XG4gICAgICAgIDxTbmlwcGV0QmFzZVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICB0ZXh0U3R5bGU9e3RoaXMucHJvcHMudGV4dFN0eWxlfVxuICAgICAgICA
+
XG4gICAgICAgICAge3NlY3Rpb25IZWFkZXJ9XG4gICAgICAgICAgPENvbmRpdGlvbmFsV3JhcHBlclxuICAgICAgICAgICAgY29uZGl0aW9uPXtzZWN0aW9uSGVhZGVyfVxuICAgICAgICAgICAgd3JhcD17dGhpcy53cmFwU25pcHBldENvbnRlbnR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e3NhZmVVUkkocHJvcHMuY29udGVudC5pY29uKSB8fCBERUZBVUxUX0lDT05fUEFUSH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLWxpZ2h0LXRoZW1lXCJcbiAgICAgICAgICAgICAgYWx0PXtwcm9wcy5jb250ZW50Lmljb25fYWx0X3RleHQgfHwgSUNPTl9BTFRfVEVYVH1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgc2FmZVVSSShwcm9wcy5jb250ZW50Lmljb25fZGFya190aGVtZSB8fCBwcm9wcy5jb250ZW50Lmljb24pIHx8XG4gICAgICAgICAgICAgICAgREVGQVVMVF9JQ09OX1BBVEhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgICAgIGFsdD17cHJvcHMuY29udGVudC5pY29uX2FsdF90ZXh0IHx8IElDT05fQUxUX1RFWFR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyVGl0bGUoKX0gPHAgY2xhc3NOYW1lPVwiYm9keVwiPnt0aGlzLnJlbmRlclRleHQoKX08L3A
+
XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4dHJhQ29udGVudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgezxkaXY
+
e3RoaXMucmVuZGVyQnV0dG9uKCl9PC9kaXY
+
fVxuICAgICAgICAgIDwvQ29uZGl0aW9uYWxXcmFwcGVyPlxuICAgICAgICA8L1NuaXBwZXRCYXNlPlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHNjaGVtYSBmcm9tIFwiLi9FT1lTbmlwcGV0LnNjaGVtYS5qc29uXCI7XG5pbXBvcnQgeyBTaW1wbGVTbmlwcGV0IH0gZnJvbSBcIi4uL1NpbXBsZVNuaXBwZXQvU2ltcGxlU25pcHBldFwiO1xuXG5jbGFzcyBFT1lTbmlwcGV0QmFzZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogc2V0RnJlcXVlbmN5VmFsdWUgLSBgZnJlcXVlbmN5YCBmb3JtIHBhcmFtZXRlciB2YWx1ZSBzaG91bGQgYmUgYG1vbnRobHlgXG4gICAqICAgICAgICAgICAgICAgICAgICAgaWYgYG1vbnRobHktY2hlY2tib3hgIGlzIHNlbGVjdGVkIG9yIGBzaW5nbGVgIG90aGVyd2lzZVxuICAgKi9cbiAgc2V0RnJlcXVlbmN5VmFsdWUoKSB7XG4gICAgY29uc3QgZnJlcXVlbmN5Q2hlY2tib3ggPSB0aGlzLnJlZnMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI21vbnRobHktY2hlY2tib3hcIik7XG4gICAgaWYgKGZyZXF1ZW5jeUNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIHRoaXMucmVmcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT0nZnJlcXVlbmN5J11cIikudmFsdWUgPSBcIm1vbnRobHlcIjtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0RnJlcXVlbmN5VmFsdWUoKTtcbiAgICB0aGlzLnJlZnMuZm9ybS5zdWJtaXQoKTtcbiAgICBpZiAoIXRoaXMucHJvcHMuY29udGVudC5kb19ub3RfYXV0b2Jsb2NrKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmxvY2soKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJEb25hdGlvbnMoKSB7XG4gICAgY29uc3QgZmllbGROYW1lcyA9IFtcImZpcnN0XCIsIFwic2Vjb25kXCIsIFwidGhpcmRcIiwgXCJmb3VydGhcIl07XG4gICAgY29uc3QgbnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LmxvY2FsZSB8fCBuYXZpZ2F0b3IubGFuZ3VhZ2UsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiBcImN1cnJlbmN5XCIsXG4gICAgICAgIGN1cnJlbmN5OiB0aGlzLnByb3BzLmNvbnRlbnQuY3VycmVuY3lfY29kZSxcbiAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAwLFxuICAgICAgfVxuICAgICk7XG4gICAgLy8gRGVmYXVsdCB0byBgc2Vjb25kYCBidXR0b25cbiAgICBjb25zdCB7IHNlbGVjdGVkX2J1dHRvbiB9ID0gdGhpcy5wcm9wcy5jb250ZW50O1xuICAgIGNvbnN0IGJ0blN0eWxlID0ge1xuICAgICAgY29sb3I6IHRoaXMucHJvcHMuY29udGVudC5idXR0b25fY29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuY29udGVudC5idXR0b25fYmFja2dyb3VuZF9jb2xvcixcbiAgICB9O1xuICAgIGNvbnN0IGRvbmF0aW9uVVJMUGFyYW1zID0gW107XG4gICAgY29uc3QgcGFyYW1zU3RhcnRJbmRleCA9IHRoaXMucHJvcHMuY29udGVudC5kb25hdGlvbl9mb3JtX3VybC5pbmRleE9mKFwiP1wiKTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnQuZG9uYXRpb25fZm9ybV91cmwuc2xpY2UocGFyYW1zU3RhcnRJbmRleClcbiAgICApLmVudHJpZXMoKSkge1xuICAgICAgZG9uYXRpb25VUkxQYXJhbXMucHVzaChlbnRyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtXG4gICAgICAgIGNsYXNzTmFtZT1cIkVPWVNuaXBwZXRGb3JtXCJcbiAgICAgICAgYWN0aW9uPXt0aGlzLnByb3BzLmNvbnRlbnQuZG9uYXRpb25fZm9ybV91cmx9XG4gICAgICAgIG1ldGhvZD17dGhpcy5wcm9wcy5mb3JtX21ldGhvZH1cbiAgICAgICAgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fVxuICAgICAgICByZWY9XCJmb3JtXCJcbiAgICAgID5cbiAgICAgICAge2RvbmF0aW9uVVJMUGFyYW1zLm1hcCgoW2tleSwgdmFsdWVdLCBpZHgpID0
+
IChcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9e2tleX0gdmFsdWU9e3ZhbHVlfSBrZXk9e2lkeH0gLz5cbiAgICAgICAgKSl9XG4gICAgICAgIHtmaWVsZE5hbWVzLm1hcCgoZmllbGQsIGlkeCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGJ1dHRvbl9uYW1lID0gYGRvbmF0aW9uX2Ftb3VudF8ke2ZpZWxkfWA7XG4gICAgICAgICAgY29uc3QgYW1vdW50ID0gdGhpcy5wcm9wcy5jb250ZW50W2J1dHRvbl9uYW1lXTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aWR4fT5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICBuYW1lPVwiYW1vdW50XCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17YW1vdW50fVxuICAgICAgICAgICAgICAgIGlkPXtmaWVsZH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZD17YnV0dG9uX25hbWUgPT09IHNlbGVjdGVkX2J1dHRvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2ZpZWxkfSBjbGFzc05hbWU9XCJkb25hdGlvbi1hbW91bnRcIj5cbiAgICAgICAgICAgICAgICB7bnVtYmVyRm9ybWF0LmZvcm1hdChhbW91bnQpfVxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vbnRobHktY2hlY2tib3gtY29udGFpbmVyXCI
+
XG4gICAgICAgICAgPGlucHV0IGlkPVwibW9udGhseS1jaGVja2JveFwiIHR5cGU9XCJjaGVja2JveFwiIC8
+
XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJtb250aGx5LWNoZWNrYm94XCI
+
XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jb250ZW50Lm1vbnRobHlfY2hlY2tib3hfbGFiZWxfdGV4dH1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJmcmVxdWVuY3lcIiB2YWx1ZT1cInNpbmdsZVwiIC8
+
XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgIG5hbWU9XCJjdXJyZW5jeVwiXG4gICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuY29udGVudC5jdXJyZW5jeV9jb2RlfVxuICAgICAgICAvPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICBuYW1lPVwicHJlc2V0c1wiXG4gICAgICAgICAgdmFsdWU9e2ZpZWxkTmFtZXMubWFwKFxuICAgICAgICAgICAgZmllbGQgPT4gdGhpcy5wcm9wcy5jb250ZW50W2Bkb25hdGlvbl9hbW91bnRfJHtmaWVsZH1gXVxuICAgICAgICAgICl9XG4gICAgICAgIC8
+
XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBzdHlsZT17YnRuU3R5bGV9XG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiQVNSb3V0ZXJCdXR0b24gcHJpbWFyeSBkb25hdGlvbi1mb3JtLXVybFwiXG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9sYWJlbH1cbiAgICAgICAgPC9idXR0b24
+
XG4gICAgICA8L2Zvcm0
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB0ZXh0U3R5bGUgPSB7XG4gICAgICBjb2xvcjogdGhpcy5wcm9wcy5jb250ZW50LnRleHRfY29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuY29udGVudC5iYWNrZ3JvdW5kX2NvbG9yLFxuICAgIH07XG4gICAgY29uc3QgY3VzdG9tRWxlbWVudCA9IChcbiAgICAgIDxlbSBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuY29udGVudC5oaWdobGlnaHRfY29sb3IgfX0gLz5cbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8U2ltcGxlU25pcHBldFxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNvbnRlbnQudGVzdH1cbiAgICAgICAgY3VzdG9tRWxlbWVudHM9e3sgZW06IGN1c3RvbUVsZW1lbnQgfX1cbiAgICAgICAgdGV4dFN0eWxlPXt0ZXh0U3R5bGV9XG4gICAgICAgIGV4dHJhQ29udGVudD17dGhpcy5yZW5kZXJEb25hdGlvbnMoKX1cbiAgICAgIC8
+
XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRU9ZU25pcHBldCA9IHByb3BzID0
+
IHtcbiAgY29uc3QgZXh0ZW5kZWRDb250ZW50ID0ge1xuICAgIG1vbnRobHlfY2hlY2tib3hfbGFiZWxfdGV4dDpcbiAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLm1vbnRobHlfY2hlY2tib3hfbGFiZWxfdGV4dC5kZWZhdWx0LFxuICAgIGxvY2FsZTogc2NoZW1hLnByb3BlcnRpZXMubG9jYWxlLmRlZmF1bHQsXG4gICAgY3VycmVuY3lfY29kZTogc2NoZW1hLnByb3BlcnRpZXMuY3VycmVuY3lfY29kZS5kZWZhdWx0LFxuICAgIHNlbGVjdGVkX2J1dHRvbjogc2NoZW1hLnByb3BlcnRpZXMuc2VsZWN0ZWRfYnV0dG9uLmRlZmF1bHQsXG4gICAgLi4ucHJvcHMuY29udGVudCxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxFT1lTbmlwcGV0QmFzZSB7Li4ucHJvcHN9IGNvbnRlbnQ9e2V4dGVuZGVkQ29udGVudH0gZm9ybV9tZXRob2Q9XCJHRVRcIiAvPlxuICApO1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvUmljaFRleHQvUmljaFRleHRcIjtcbmltcG9ydCB7IHNhZmVVUkkgfSBmcm9tIFwiLi4vLi4vdGVtcGxhdGUtdXRpbHNcIjtcbmltcG9ydCB7IFNpbXBsZVNuaXBwZXQgfSBmcm9tIFwiLi4vU2ltcGxlU25pcHBldC9TaW1wbGVTbmlwcGV0XCI7XG5pbXBvcnQgeyBTbmlwcGV0QmFzZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NuaXBwZXRCYXNlL1NuaXBwZXRCYXNlXCI7XG5cbi8vIEFsdCB0ZXh0IHBsYWNlaG9sZGVyIGluIGNhc2UgdGhlIHByb3AgZnJvbSB0aGUgc2VydmVyIGlzbid0IGF2YWlsYWJsZVxuY29uc3QgSUNPTl9BTFRfVEVYVCA9IFwiXCI7XG5cbmV4cG9ydCBjbGFzcyBTdWJtaXRGb3JtU25pcHBldCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmV4cGFuZFNuaXBwZXQgPSB0aGlzLmV4cGFuZFNuaXBwZXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTdWJtaXRBdHRlbXB0ID0gdGhpcy5oYW5kbGVTdWJtaXRBdHRlbXB0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklucHV0Q2hhbmdlID0gdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgICAgIHN1Ym1pdEF0dGVtcHRlZDogZmFsc2UsXG4gICAgICBzaWdudXBTdWJtaXR0ZWQ6IGZhbHNlLFxuICAgICAgc2lnbnVwU3VjY2VzczogZmFsc2UsXG4gICAgICBkaXNhYmxlRm9ybTogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdEF0dGVtcHQoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnN1Ym1pdEF0dGVtcHRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN1Ym1pdEF0dGVtcHRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgICBsZXQganNvbjtcblxuICAgIGlmICh0aGlzLnN0YXRlLmRpc2FibGVGb3JtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlzYWJsZUZvcm06IHRydWUgfSk7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJDTElDS19CVVRUT05cIixcbiAgICAgIHZhbHVlOiBcImNvbnZlcnNpb24tc3Vic2NyaWJlLWFjdGl2YXRpb25cIixcbiAgICAgIGlkOiBcIk5FV1RBQl9GT09URVJfQkFSX0NPTlRFTlRcIixcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLmZvcm1fbWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiR0VUXCIpIHtcbiAgICAgIHRoaXMucHJvcHMub25CbG9jayh7IHByZXZlbnREaXNtaXNzOiB0cnVlIH0pO1xuICAgICAgdGhpcy5yZWZzLmZvcm0uc3VibWl0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyB1cmwsIGZvcm1EYXRhIH0gPSB0aGlzLnByb3BzLnByb2Nlc3NGb3JtRGF0YVxuICAgICAgPyB0aGlzLnByb3BzLnByb2Nlc3NGb3JtRGF0YSh0aGlzLnJlZnMubWFpbklucHV0LCB0aGlzLnByb3BzKVxuICAgICAgOiB7IHVybDogdGhpcy5yZWZzLmZvcm0uYWN0aW9uLCBmb3JtRGF0YTogbmV3IEZvcm1EYXRhKHRoaXMucmVmcy5mb3JtKSB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZldGNoUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgY3JlZGVudGlhbHM6IFwib21pdFwiLFxuICAgICAgfSk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZldGNoUmVxdWVzdCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmV0Y2gtb3B0aW9ucy9uby1mZXRjaC1jcmVkZW50aWFsc1xuICAgICAganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cblxuICAgIGlmIChqc29uICYmIGpzb24uc3RhdHVzID09PSBcIm9rXCIpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaWdudXBTdWNjZXNzOiB0cnVlLCBzaWdudXBTdWJtaXR0ZWQ6IHRydWUgfSk7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuY29udGVudC5kb19ub3RfYXV0b2Jsb2NrKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25CbG9jayh7IHByZXZlbnREaXNtaXNzOiB0cnVlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgICB2YWx1ZTogXCJzdWJzY3JpYmUtc3VjY2Vzc1wiLFxuICAgICAgICBpZDogXCJORVdUQUJfRk9PVEVSX0JBUl9DT05URU5UXCIsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBzdWJtaXR0aW5nIHRoZSBmb3JtXCIsXG4gICAgICAgIGpzb24gfHwgXCJbTm8gSlNPTiByZXNwb25zZV1cIlxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaWdudXBTdWNjZXNzOiBmYWxzZSwgc2lnbnVwU3VibWl0dGVkOiB0cnVlIH0pO1xuICAgICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgICB2YWx1ZTogXCJzdWJzY3JpYmUtZXJyb3JcIixcbiAgICAgICAgaWQ6IFwiTkVXVEFCX0ZPT1RFUl9CQVJfQ09OVEVOVFwiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpc2FibGVGb3JtOiBmYWxzZSB9KTtcbiAgfVxuXG4gIGV4cGFuZFNuaXBwZXQoKSB7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJDTElDS19CVVRUT05cIixcbiAgICAgIHZhbHVlOiBcInNjZW5lMS1idXR0b24tbGVhcm4tbW9yZVwiLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgIHNpZ251cFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgc2lnbnVwU3VibWl0dGVkOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlckhpZGRlbkZvcm1JbnB1dHMoKSB7XG4gICAgY29uc3QgeyBoaWRkZW5faW5wdXRzIH0gPSB0aGlzLnByb3BzLmNvbnRlbnQ7XG5cbiAgICBpZiAoIWhpZGRlbl9pbnB1dHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhoaWRkZW5faW5wdXRzKS5tYXAoKGtleSwgaWR4KSA9PiAoXG4gICAgICA8aW5wdXQga2V5PXtpZHh9IHR5cGU9XCJoaWRkZW5cIiBuYW1lPXtrZXl9IHZhbHVlPXtoaWRkZW5faW5wdXRzW2tleV19IC8
+
XG4gICAgKSk7XG4gIH1cblxuICByZW5kZXJEaXNjbGFpbWVyKCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWNvbnRlbnQuc2NlbmUyX2Rpc2NsYWltZXJfaHRtbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8cCBjbGFzc05hbWU9XCJkaXNjbGFpbWVyVGV4dFwiPlxuICAgICAgICA8UmljaFRleHRcbiAgICAgICAgICB0ZXh0PXtjb250ZW50LnNjZW5lMl9kaXNjbGFpbWVyX2h0bWx9XG4gICAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwiZGlzY2xhaW1lcl9odG1sXCJcbiAgICAgICAgICBsaW5rcz17Y29udGVudC5saW5rc31cbiAgICAgICAgICBkb05vdEF1dG9CbG9jaz17dHJ1ZX1cbiAgICAgICAgICBvcGVuTmV3V2luZG93PXt0cnVlfVxuICAgICAgICAgIHNlbmRDbGljaz17dGhpcy5wcm9wcy5zZW5kQ2xpY2t9XG4gICAgICAgIC8
+
XG4gICAgICA8L3A
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckZvcm1Qcml2YWN5Tm90aWNlKCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWNvbnRlbnQuc2NlbmUyX3ByaXZhY3lfaHRtbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8cCBjbGFzc05hbWU9XCJwcml2YWN5Tm90aWNlXCI
+
XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9XCJpZF9wcml2YWN5XCJcbiAgICAgICAgICBuYW1lPVwicHJpdmFjeVwiXG4gICAgICAgICAgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiXG4gICAgICAgIC8
+
XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaWRfcHJpdmFjeVwiPlxuICAgICAgICAgIDxSaWNoVGV4dFxuICAgICAgICAgICAgdGV4dD17Y29udGVudC5zY2VuZTJfcHJpdmFjeV9odG1sfVxuICAgICAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwicHJpdmFjeV9odG1sXCJcbiAgICAgICAgICAgIGxpbmtzPXtjb250ZW50LmxpbmtzfVxuICAgICAgICAgICAgZG9Ob3RBdXRvQmxvY2s9e3RydWV9XG4gICAgICAgICAgICBvcGVuTmV3V2luZG93PXt0cnVlfVxuICAgICAgICAgICAgc2VuZENsaWNrPXt0aGlzLnByb3BzLnNlbmRDbGlja31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9wPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTaWdudXBTdWJtaXR0ZWQoKSB7XG4gICAgY29uc3QgeyBjb250ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzU3VjY2VzcyA9IHRoaXMuc3RhdGUuc2lnbnVwU3VjY2VzcztcbiAgICBjb25zdCBzdWNjZXNzVGl0bGUgPSBpc1N1Y2Nlc3MgJiYgY29udGVudC5zdWNjZXNzX3RpdGxlO1xuICAgIGNvbnN0IGJvZHlUZXh0ID0gaXNTdWNjZXNzXG4gICAgICA
/
IHsgc3VjY2Vzc190ZXh0OiBjb250ZW50LnN1Y2Nlc3NfdGV4dCB9XG4gICAgICA6IHsgZXJyb3JfdGV4dDogY29udGVudC5lcnJvcl90ZXh0IH07XG4gICAgY29uc3QgcmV0cnlCdXR0b25UZXh0ID0gY29udGVudC5yZXRyeV9idXR0b25fbGFiZWw7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTbmlwcGV0QmFzZSB7Li4udGhpcy5wcm9wc30
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3VibWlzc2lvblN0YXR1c1wiPlxuICAgICAgICAgIHtzdWNjZXNzVGl0bGUgPyAoXG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwic3VibWl0U3RhdHVzVGl0bGVcIj57c3VjY2Vzc1RpdGxlfTwvaDI
+
XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPHA
+
XG4gICAgICAgICAgICA8UmljaFRleHRcbiAgICAgICAgICAgICAgey4uLmJvZHlUZXh0fVxuICAgICAgICAgICAgICBsb2NhbGl6YXRpb25faWQ9e2lzU3VjY2VzcyA
/
IFwic3VjY2Vzc190ZXh0XCIgOiBcImVycm9yX3RleHRcIn1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICB7aXNTdWNjZXNzID8gbnVsbCA6IChcbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmV4cGFuZFNuaXBwZXR9PntyZXRyeUJ1dHRvblRleHR9PC9CdXR0b24
+
XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICA8L1NuaXBwZXRCYXNlPlxuICAgICk7XG4gIH1cblxuICBvbklucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnZhbGlkYXRlSW5wdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFzRXJyb3IgPSB0aGlzLnByb3BzLnZhbGlkYXRlSW5wdXQoXG4gICAgICBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnRcbiAgICApO1xuICAgIGV2ZW50LnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShoYXNFcnJvcik7XG4gIH1cblxuICByZW5kZXJJbnB1dCgpIHtcbiAgICBjb25zdCBwbGFjaG9sZGVyID1cbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5zY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dCB8fFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LnNjZW5lMl9pbnB1dF9wbGFjZWhvbGRlcjtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj1cIm1haW5JbnB1dFwiXG4gICAgICAgIHR5cGU9e3RoaXMucHJvcHMuaW5wdXRUeXBlIHx8IFwiZW1haWxcIn1cbiAgICAgICAgY2xhc3NOYW1lPXtgbWFpbklucHV0JHt0aGlzLnN0YXRlLnN1Ym1pdEF0dGVtcHRlZCA
/
IFwiXCIgOiBcIiBjbGVhblwifWB9XG4gICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2hvbGRlcn1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMudmFsaWRhdGVJbnB1dCA
/
IHRoaXMub25JbnB1dENoYW5nZSA6IG51bGx9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTaWdudXBWaWV3KCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjb250YWluZXJDbGFzcyA9IGBTdWJtaXRGb3JtU25pcHBldCAke3RoaXMucHJvcHMuY2xhc3NOYW1lfWA7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTbmlwcGV0QmFzZVxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc31cbiAgICAgICAgZm9vdGVyRGlzbWlzcz17dHJ1ZX1cbiAgICAgID5cbiAgICAgICAge2NvbnRlbnQuc2NlbmUyX2ljb24gPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY2VuZTJJY29uXCI
+
XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17c2FmZVVSSShjb250ZW50LnNjZW5lMl9pY29uKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbi1saWdodC10aGVtZVwiXG4gICAgICAgICAgICAgIGFsdD17Y29udGVudC5zY2VuZTJfaWNvbl9hbHRfdGV4dCB8fCBJQ09OX0FMVF9URVhUfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtzYWZlVVJJKFxuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2NlbmUyX2ljb25fZGFya190aGVtZSB8fCBjb250ZW50LnNjZW5lMl9pY29uXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgICAgIGFsdD17Y29udGVudC5zY2VuZTJfaWNvbl9hbHRfdGV4dCB8fCBJQ09OX0FMVF9URVhUfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAge2NvbnRlbnQuc2NlbmUyX3RpdGxlICYmIChcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInNjZW5lMlRpdGxlXCI
+
e2NvbnRlbnQuc2NlbmUyX3RpdGxlfTwvaDM
+
XG4gICAgICAgICAgICApfXtcIiBcIn1cbiAgICAgICAgICAgIHtjb250ZW50LnNjZW5lMl90ZXh0ICYmIChcbiAgICAgICAgICAgICAgPFJpY2hUZXh0XG4gICAgICAgICAgICAgICAgc2NlbmUyX3RleHQ9e2NvbnRlbnQuc2NlbmUyX3RleHR9XG4gICAgICAgICAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwic2NlbmUyX3RleHRcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3A
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Zm9ybVxuICAgICAgICAgIGFjdGlvbj17dGhpcy5wcm9wcy5mb3JtX2FjdGlvbn1cbiAgICAgICAgICBtZXRob2Q9e3RoaXMucHJvcHMuZm9ybV9tZXRob2R9XG4gICAgICAgICAgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fVxuICAgICAgICAgIHJlZj1cImZvcm1cIlxuICAgICAgICA
+
XG4gICAgICAgICAge3RoaXMucmVuZGVySGlkZGVuRm9ybUlucHV0cygpfVxuICAgICAgICAgIDxkaXY
+
XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJJbnB1dCgpfVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQVNSb3V0ZXJCdXR0b24gcHJpbWFyeVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0QXR0ZW1wdH1cbiAgICAgICAgICAgICAgcmVmPVwiZm9ybVN1Ym1pdEJ0blwiXG4gICAgICAgICAgICA
+
XG4gICAgICAgICAgICAgIHtjb250ZW50LnNjZW5lMl9idXR0b25fbGFiZWx9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJGb3JtUHJpdmFjeU5vdGljZSgpIHx8IHRoaXMucmVuZGVyRGlzY2xhaW1lcigpfVxuICAgICAgICA8L2Zvcm0
+
XG4gICAgICA8L1NuaXBwZXRCYXNlPlxuICAgICk7XG4gIH1cblxuICBnZXRGaXJzdFNjZW5lQ29udGVudCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm9wcy5jb250ZW50KVxuICAgICAgLmZpbHRlcihrZXkgPT4ga2V5LmluY2x1ZGVzKFwic2NlbmUxXCIpKVxuICAgICAgLnJlZHVjZSgoYWNjLCBrZXkpID0
+
IHtcbiAgICAgICAgYWNjW2tleS5zdWJzdHIoNyldID0gdGhpcy5wcm9wcy5jb250ZW50W2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29udGVudCA9IHsgLi4udGhpcy5wcm9wcy5jb250ZW50LCAuLi50aGlzLmdldEZpcnN0U2NlbmVDb250ZW50KCkgfTtcblxuICAgIGlmICh0aGlzLnN0YXRlLnNpZ251cFN1Ym1pdHRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU2lnbnVwU3VibWl0dGVkKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmV4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJTaWdudXBWaWV3KCk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8U2ltcGxlU25pcHBldFxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY29udGVudD17Y29udGVudH1cbiAgICAgICAgb25CdXR0b25DbGljaz17dGhpcy5leHBhbmRTbmlwcGV0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2NoZW1hIGZyb20gXCIuL0ZYQVNpZ251cFNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFN1Ym1pdEZvcm1TbmlwcGV0IH0gZnJvbSBcIi4uL1N1Ym1pdEZvcm1TbmlwcGV0L1N1Ym1pdEZvcm1TbmlwcGV0LmpzeFwiO1xuXG5leHBvcnQgY29uc3QgRlhBU2lnbnVwU25pcHBldCA9IHByb3BzID0
+
IHtcbiAgY29uc3QgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oWzAtOV0rKVxcLi8pO1xuICBjb25zdCBmaXJlZm94X3ZlcnNpb24gPSB1c2VyQWdlbnQgPyBwYXJzZUludCh1c2VyQWdlbnRbMV0sIDEwKSA6IDA7XG4gIGNvbnN0IGV4dGVuZGVkQ29udGVudCA9IHtcbiAgICBzY2VuZTFfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTFfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgcmV0cnlfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5yZXRyeV9idXR0b25fbGFiZWwuZGVmYXVsdCxcbiAgICBzY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dDpcbiAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9lbWFpbF9wbGFjZWhvbGRlcl90ZXh0LmRlZmF1bHQsXG4gICAgc2NlbmUyX2J1dHRvbl9sYWJlbDogc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUyX2J1dHRvbl9sYWJlbC5kZWZhdWx0LFxuICAgIHNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0OlxuICAgICAgc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUyX2Rpc21pc3NfYnV0dG9uX3RleHQuZGVmYXVsdCxcbiAgICAuLi5wcm9wcy5jb250ZW50LFxuICAgIGhpZGRlbl9pbnB1dHM6IHtcbiAgICAgIGFjdGlvbjogXCJlbWFpbFwiLFxuICAgICAgY29udGV4dDogXCJmeF9kZXNrdG9wX3YzXCIsXG4gICAgICBlbnRyeXBvaW50OiBcInNuaXBwZXRzXCIsXG4gICAgICB1dG1fc291cmNlOiBcInNuaXBwZXRcIixcbiAgICAgIHV0bV9jb250ZW50OiBmaXJlZm94X3ZlcnNpb24sXG4gICAgICB1dG1fY2FtcGFpZ246IHByb3BzLmNvbnRlbnQudXRtX2NhbXBhaWduLFxuICAgICAgdXRtX3Rlcm06IHByb3BzLmNvbnRlbnQudXRtX3Rlcm0sXG4gICAgICAuLi5wcm9wcy5jb250ZW50LmhpZGRlbl9pbnB1dHMsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdWJtaXRGb3JtU25pcHBldFxuICAgICAgey4uLnByb3BzfVxuICAgICAgY29udGVudD17ZXh0ZW5kZWRDb250ZW50fVxuICAgICAgZm9ybV9hY3Rpb249e1wiaHR0cHM6Ly9hY2NvdW50cy5maXJlZm94LmNvbS9cIn1cbiAgICAgIGZvcm1fbWV0aG9kPVwiR0VUXCJcbiAgICAvPlxuICApO1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzY2hlbWEgZnJvbSBcIi4vTmV3c2xldHRlclNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFN1Ym1pdEZvcm1TbmlwcGV0IH0gZnJvbSBcIi4uL1N1Ym1pdEZvcm1TbmlwcGV0L1N1Ym1pdEZvcm1TbmlwcGV0LmpzeFwiO1xuXG5leHBvcnQgY29uc3QgTmV3c2xldHRlclNuaXBwZXQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGV4dGVuZGVkQ29udGVudCA9IHtcbiAgICBzY2VuZTFfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTFfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgcmV0cnlfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5yZXRyeV9idXR0b25fbGFiZWwuZGVmYXVsdCxcbiAgICBzY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dDpcbiAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9lbWFpbF9wbGFjZWhvbGRlcl90ZXh0LmRlZmF1bHQsXG4gICAgc2NlbmUyX2J1dHRvbl9sYWJlbDogc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUyX2J1dHRvbl9sYWJlbC5kZWZhdWx0LFxuICAgIHNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0OlxuICAgICAgc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUyX2Rpc21pc3NfYnV0dG9uX3RleHQuZGVmYXVsdCxcbiAgICBzY2VuZTJfbmV3c2xldHRlcjogc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUyX25ld3NsZXR0ZXIuZGVmYXVsdCxcbiAgICAuLi5wcm9wcy5jb250ZW50LFxuICAgIGhpZGRlbl9pbnB1dHM6IHtcbiAgICAgIG5ld3NsZXR0ZXJzOlxuICAgICAgICBwcm9wcy5jb250ZW50LnNjZW5lMl9uZXdzbGV0dGVyIHx8XG4gICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9uZXdzbGV0dGVyLmRlZmF1bHQsXG4gICAgICBmbXQ6IHNjaGVtYS5wcm9wZXJ0aWVzLmhpZGRlbl9pbnB1dHMucHJvcGVydGllcy5mbXQuZGVmYXVsdCxcbiAgICAgIGxhbmc6IHByb3BzLmNvbnRlbnQubG9jYWxlIHx8IHNjaGVtYS5wcm9wZXJ0aWVzLmxvY2FsZS5kZWZhdWx0LFxuICAgICAgc291cmNlX3VybDogYGh0dHBzOi8vc25pcHBldHMubW96aWxsYS5jb20vc2hvdy8ke3Byb3BzLmlkfWAsXG4gICAgICAuLi5wcm9wcy5jb250ZW50LmhpZGRlbl9pbnB1dHMsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdWJtaXRGb3JtU25pcHBldFxuICAgICAgey4uLnByb3BzfVxuICAgICAgY29udGVudD17ZXh0ZW5kZWRDb250ZW50fVxuICAgICAgZm9ybV9hY3Rpb249e1wiaHR0cHM6Ly9iYXNrZXQubW96aWxsYS5vcmcvc3Vic2NyaWJlLmpzb25cIn1cbiAgICAgIGZvcm1fbWV0aG9kPVwiUE9TVFwiXG4gICAgLz5cbiAgKTtcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHN0cmluZyBpcyBhbiBlbWFpbCBvciBwaG9uZSBudW1iZXIgb3IgbmVpdGhlclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtBU1JNZXNzYWdlQ29udGVudH0gY29udGVudCAuY29udGVudCBwcm9wZXJ0eSBvbiBBU1IgbWVzc2FnZVxuICogQHJldHVybnMge1wiZW1haWxcInxcInBob25lXCJ8XCJcIn0gVGhlIHR5cGUgb2YgdGhlIGlucHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtYWlsT3JQaG9uZU51bWJlcih2YWwsIGNvbnRlbnQpIHtcbiAgY29uc3QgeyBsb2NhbGUgfSA9IGNvbnRlbnQ7XG4gIC8vIGh0dHA6Ly9lbWFpbHJlZ2V4LmNvbS9cbiAgY29uc3QgZW1haWxfcmUgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuICBjb25zdCBjaGVja19lbWFpbCA9IGVtYWlsX3JlLnRlc3QodmFsKTtcbiAgbGV0IGNoZWNrX3Bob25lOyAvLyBkZXBlbmRzIG9uIGxvY2FsZVxuICBzd2l0Y2ggKGxvY2FsZSkge1xuICAgIGNhc2UgXCJlbi1VU1wiOlxuICAgIGNhc2UgXCJlbi1DQVwiOlxuICAgICAgLy8gYWxsb3cgMTAtMTEgZGlnaXRzIGluIGNhc2UgdXNlciB3YW50cyB0byBlbnRlciBjb3VudHJ5IGNvZGVcbiAgICAgIGNoZWNrX3Bob25lID0gdmFsLmxlbmd0aCA
+
PSAxMCAmJiB2YWwubGVuZ3RoIDw9IDExICYmICFpc05hTih2YWwpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRlXCI6XG4gICAgICAvLyBhbGxvdyBiZXR3ZWVuIDIgYW5kIDEyIGRpZ2l0cyBmb3IgZ2VybWFuIHBob25lIG51bWJlcnNcbiAgICAgIGNoZWNrX3Bob25lID0gdmFsLmxlbmd0aCA
+
PSAyICYmIHZhbC5sZW5ndGggPD0gMTIgJiYgIWlzTmFOKHZhbCk7XG4gICAgICBicmVhaztcbiAgICAvLyB0aGlzIGNhc2Ugc2hvdWxkIG5ldmVyIGJlIGhpdCwgYnV0IGdvb2QgdG8gaGF2ZSBhIGZhbGxiYWNrIGp1c3QgaW4gY2FzZVxuICAgIGRlZmF1bHQ6XG4gICAgICBjaGVja19waG9uZSA9ICFpc05hTih2YWwpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgaWYgKGNoZWNrX2VtYWlsKSB7XG4gICAgcmV0dXJuIFwiZW1haWxcIjtcbiAgfSBlbHNlIGlmIChjaGVja19waG9uZSkge1xuICAgIHJldHVybiBcInBob25lXCI7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBpc0VtYWlsT3JQaG9uZU51bWJlciB9IGZyb20gXCIuL2lzRW1haWxPclBob25lTnVtYmVyXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2NoZW1hIGZyb20gXCIuL1NlbmRUb0RldmljZVNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFN1Ym1pdEZvcm1TbmlwcGV0IH0gZnJvbSBcIi4uL1N1Ym1pdEZvcm1TbmlwcGV0L1N1Ym1pdEZvcm1TbmlwcGV0LmpzeFwiO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUlucHV0KHZhbHVlLCBjb250ZW50KSB7XG4gIGNvbnN0IHR5cGUgPSBpc0VtYWlsT3JQaG9uZU51bWJlcih2YWx1ZSwgY29udGVudCk7XG4gIHJldHVybiB0eXBlID8gXCJcIiA6IFwiTXVzdCBiZSBhbiBlbWFpbCBvciBhIHBob25lIG51bWJlci5cIjtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0Zvcm1EYXRhKGlucHV0LCBtZXNzYWdlKSB7XG4gIGNvbnN0IHsgY29udGVudCB9ID0gbWVzc2FnZTtcbiAgY29uc3QgdHlwZSA9IGNvbnRlbnQuaW5jbHVkZV9zbXNcbiAgICA
/
IGlzRW1haWxPclBob25lTnVtYmVyKGlucHV0LnZhbHVlLCBjb250ZW50KVxuICAgIDogXCJlbWFpbFwiO1xuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBsZXQgdXJsO1xuICBpZiAodHlwZSA9PT0gXCJwaG9uZVwiKSB7XG4gICAgdXJsID0gXCJodHRwczovL2Jhc2tldC5tb3ppbGxhLm9yZy9uZXdzL3N1YnNjcmliZV9zbXMvXCI7XG4gICAgZm9ybURhdGEuYXBwZW5kKFwibW9iaWxlX251bWJlclwiLCBpbnB1dC52YWx1ZSk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFwibXNnX25hbWVcIiwgY29udGVudC5tZXNzYWdlX2lkX3Ntcyk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFwiY291bnRyeVwiLCBjb250ZW50LmNvdW50cnkpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZW1haWxcIikge1xuICAgIHVybCA9IFwiaHR0cHM6Ly9iYXNrZXQubW96aWxsYS5vcmcvbmV3cy9zdWJzY3JpYmUvXCI7XG4gICAgZm9ybURhdGEuYXBwZW5kKFwiZW1haWxcIiwgaW5wdXQudmFsdWUpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm5ld3NsZXR0ZXJzXCIsIGNvbnRlbnQubWVzc2FnZV9pZF9lbWFpbCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgXCJzb3VyY2VfdXJsXCIsXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQoYGh0dHBzOi8vc25pcHBldHMubW96aWxsYS5jb20vc2hvdy8ke21lc3NhZ2UuaWR9YClcbiAgICApO1xuICB9XG4gIGZvcm1EYXRhLmFwcGVuZChcImxhbmdcIiwgY29udGVudC5sb2NhbGUpO1xuICByZXR1cm4geyBmb3JtRGF0YSwgdXJsIH07XG59XG5cbmZ1bmN0aW9uIGFkZERlZmF1bHRWYWx1ZXMocHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb250ZW50OiB7XG4gICAgICBzY2VuZTFfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTFfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgICByZXRyeV9idXR0b25fbGFiZWw6IHNjaGVtYS5wcm9wZXJ0aWVzLnJldHJ5X2J1dHRvbl9sYWJlbC5kZWZhdWx0LFxuICAgICAgc2NlbmUyX2Rpc21pc3NfYnV0dG9uX3RleHQ6XG4gICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0LmRlZmF1bHQsXG4gICAgICBzY2VuZTJfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTJfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgICBzY2VuZTJfaW5wdXRfcGxhY2Vob2xkZXI6XG4gICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9pbnB1dF9wbGFjZWhvbGRlci5kZWZhdWx0LFxuICAgICAgbG9jYWxlOiBzY2hlbWEucHJvcGVydGllcy5sb2NhbGUuZGVmYXVsdCxcbiAgICAgIGNvdW50cnk6IHNjaGVtYS5wcm9wZXJ0aWVzLmNvdW50cnkuZGVmYXVsdCxcbiAgICAgIG1lc3NhZ2VfaWRfZW1haWw6IFwiXCIsXG4gICAgICBpbmNsdWRlX3Ntczogc2NoZW1hLnByb3BlcnRpZXMuaW5jbHVkZV9zbXMuZGVmYXVsdCxcbiAgICAgIC4uLnByb3BzLmNvbnRlbnQsXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFNlbmRUb0RldmljZVNuaXBwZXQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHByb3BzV2l0aERlZmF1bHRzID0gYWRkRGVmYXVsdFZhbHVlcyhwcm9wcyk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3VibWl0Rm9ybVNuaXBwZXRcbiAgICAgIHsuLi5wcm9wc1dpdGhEZWZhdWx0c31cbiAgICAgIGZvcm1fbWV0aG9kPVwiUE9TVFwiXG4gICAgICBjbGFzc05hbWU9XCJzZW5kX3RvX2RldmljZV9zbmlwcGV0XCJcbiAgICAgIGlucHV0VHlwZT17cHJvcHNXaXRoRGVmYXVsdHMuY29udGVudC5pbmNsdWRlX3NtcyA
/
IFwidGV4dFwiIDogXCJlbWFpbFwifVxuICAgICAgdmFsaWRhdGVJbnB1dD17XG4gICAgICAgIHByb3BzV2l0aERlZmF1bHRzLmNvbnRlbnQuaW5jbHVkZV9zbXMgPyB2YWxpZGF0ZUlucHV0IDogbnVsbFxuICAgICAgfVxuICAgICAgcHJvY2Vzc0Zvcm1EYXRhPXtwcm9jZXNzRm9ybURhdGF9XG4gICAgLz5cbiAgKTtcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1JpY2hUZXh0L1JpY2hUZXh0XCI7XG5pbXBvcnQgeyBzYWZlVVJJIH0gZnJvbSBcIi4uLy4uL3RlbXBsYXRlLXV0aWxzXCI7XG5pbXBvcnQgeyBTbmlwcGV0QmFzZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NuaXBwZXRCYXNlL1NuaXBwZXRCYXNlXCI7XG5cbmNvbnN0IERFRkFVTFRfSUNPTl9QQVRIID0gXCJjaHJvbWU6Ly9icmFuZGluZy9jb250ZW50L2ljb242NC5wbmdcIjtcbi8vIEFsdCB0ZXh0IHBsYWNlaG9sZGVyIGluIGNhc2UgdGhlIHByb3AgZnJvbSB0aGUgc2VydmVyIGlzbid0IGF2YWlsYWJsZVxuY29uc3QgSUNPTl9BTFRfVEVYVCA9IFwiXCI7XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVCZWxvd1NlYXJjaFNuaXBwZXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkJ1dHRvbkNsaWNrID0gdGhpcy5vbkJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICByZW5kZXJUZXh0KCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIHByb3BzLmNvbnRlbnQudGV4dCA
/
IChcbiAgICAgIDxSaWNoVGV4dFxuICAgICAgICB0ZXh0PXtwcm9wcy5jb250ZW50LnRleHR9XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzPXt0aGlzLnByb3BzLmN1c3RvbUVsZW1lbnRzfVxuICAgICAgICBsb2NhbGl6YXRpb25faWQ9XCJ0ZXh0XCJcbiAgICAgICAgbGlua3M9e3Byb3BzLmNvbnRlbnQubGlua3N9XG4gICAgICAgIHNlbmRDbGljaz17cHJvcHMuc2VuZENsaWNrfVxuICAgICAgLz5cbiAgICApIDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlclRpdGxlKCkge1xuICAgIGNvbnN0IHsgdGl0bGUgfSA9IHRoaXMucHJvcHMuY29udGVudDtcbiAgICByZXR1cm4gdGl0bGUgPyAoXG4gICAgICA8aDMgY2xhc3NOYW1lPXtcInRpdGxlIHRpdGxlLWlubGluZVwifT5cbiAgICAgICAge3RpdGxlfVxuICAgICAgICA8YnIgLz5cbiAgICAgIDwvaDM
+
XG4gICAgKSA6IG51bGw7XG4gIH1cblxuICBhc3luYyBvbkJ1dHRvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnByb3ZpZGVyICE9PSBcInByZXZpZXdcIikge1xuICAgICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgICBpZDogdGhpcy5wcm9wcy5VSVN1cmZhY2UsXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgeyBidXR0b25fdXJsIH0gPSB0aGlzLnByb3BzLmNvbnRlbnQ7XG4gICAgLy8gSWYgYnV0dG9uX3VybCBpcyBkZWZpbmVkIGhhbmRsZSBpdCBhcyBPUEVOX1VSTCBhY3Rpb25cbiAgICBjb25zdCB0eXBlID0gdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9hY3Rpb24gfHwgKGJ1dHRvbl91cmwgJiYgXCJPUEVOX1VSTFwiKTtcbiAgICBhd2FpdCB0aGlzLnByb3BzLm9uQWN0aW9uKHtcbiAgICAgIHR5cGUsXG4gICAgICBkYXRhOiB7IGFyZ3M6IHRoaXMucHJvcHMuY29udGVudC5idXR0b25fYWN0aW9uX2FyZ3MgfHwgYnV0dG9uX3VybCB9LFxuICAgIH0pO1xuICAgIGlmICghdGhpcy5wcm9wcy5jb250ZW50LmRvX25vdF9hdXRvYmxvY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICAgIH1cbiAgfVxuXG4gIF9zaG91bGRSZW5kZXJCdXR0b24oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5idXR0b25fYWN0aW9uIHx8XG4gICAgICB0aGlzLnByb3BzLm9uQnV0dG9uQ2xpY2sgfHxcbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5idXR0b25fdXJsXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckJ1dHRvbigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGlmICghdGhpcy5fc2hvdWxkUmVuZGVyQnV0dG9uKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQnV0dG9uQ2xpY2sgfHwgdGhpcy5vbkJ1dHRvbkNsaWNrfVxuICAgICAgICBjb2xvcj17cHJvcHMuY29udGVudC5idXR0b25fY29sb3J9XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj17cHJvcHMuY29udGVudC5idXR0b25fYmFja2dyb3VuZF9jb2xvcn1cbiAgICAgID5cbiAgICAgICAge3Byb3BzLmNvbnRlbnQuYnV0dG9uX2xhYmVsfVxuICAgICAgPC9CdXR0b24
+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGxldCBjbGFzc05hbWUgPSBcIlNpbXBsZUJlbG93U2VhcmNoU25pcHBldFwiO1xuICAgIGxldCBjb250YWluZXJOYW1lID0gXCJiZWxvdy1zZWFyY2gtc25pcHBldFwiO1xuXG4gICAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lICs9IGAgJHtwcm9wcy5jbGFzc05hbWV9YDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3Nob3VsZFJlbmRlckJ1dHRvbigpKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgd2l0aEJ1dHRvblwiO1xuICAgICAgY29udGFpbmVyTmFtZSArPSBcIiB3aXRoQnV0dG9uXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjb250YWluZXJOYW1lfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbmlwcGV0LWhvdmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICA8U25pcHBldEJhc2VcbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgdGV4dFN0eWxlPXt0aGlzLnByb3BzLnRleHRTdHlsZX1cbiAgICAgICAgICA
+
XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17c2FmZVVSSShwcm9wcy5jb250ZW50Lmljb24pIHx8IERFRkFVTFRfSUNPTl9QQVRIfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tbGlnaHQtdGhlbWVcIlxuICAgICAgICAgICAgICBhbHQ9e3Byb3BzLmNvbnRlbnQuaWNvbl9hbHRfdGV4dCB8fCBJQ09OX0FMVF9URVhUfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgICAgICBzYWZlVVJJKHByb3BzLmNvbnRlbnQuaWNvbl9kYXJrX3RoZW1lIHx8IHByb3BzLmNvbnRlbnQuaWNvbikgfHxcbiAgICAgICAgICAgICAgICBERUZBVUxUX0lDT05fUEFUSFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1kYXJrLXRoZW1lXCJcbiAgICAgICAgICAgICAgYWx0PXtwcm9wcy5jb250ZW50Lmljb25fYWx0X3RleHQgfHwgSUNPTl9BTFRfVEVYVH1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRDb250YWluZXJcIj5cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyVGl0bGUoKX1cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYm9keVwiPnt0aGlzLnJlbmRlclRleHQoKX08L3A
+
XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4dHJhQ29udGVudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgezxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uQ29udGFpbmVyXCI
+
e3RoaXMucmVuZGVyQnV0dG9uKCl9PC9kaXY
+
fVxuICAgICAgICAgIDwvU25pcHBldEJhc2U
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgRU9ZU25pcHBldCB9IGZyb20gXCIuL0VPWVNuaXBwZXQvRU9ZU25pcHBldFwiO1xuaW1wb3J0IHsgRlhBU2lnbnVwU25pcHBldCB9IGZyb20gXCIuL0ZYQVNpZ251cFNuaXBwZXQvRlhBU2lnbnVwU25pcHBldFwiO1xuaW1wb3J0IHsgTmV3c2xldHRlclNuaXBwZXQgfSBmcm9tIFwiLi9OZXdzbGV0dGVyU25pcHBldC9OZXdzbGV0dGVyU25pcHBldFwiO1xuaW1wb3J0IHsgU2VuZFRvRGV2aWNlU25pcHBldCB9IGZyb20gXCIuL1NlbmRUb0RldmljZVNuaXBwZXQvU2VuZFRvRGV2aWNlU25pcHBldFwiO1xuaW1wb3J0IHsgU2ltcGxlQmVsb3dTZWFyY2hTbmlwcGV0IH0gZnJvbSBcIi4vU2ltcGxlQmVsb3dTZWFyY2hTbmlwcGV0L1NpbXBsZUJlbG93U2VhcmNoU25pcHBldFwiO1xuaW1wb3J0IHsgU2ltcGxlU25pcHBldCB9IGZyb20gXCIuL1NpbXBsZVNuaXBwZXQvU2ltcGxlU25pcHBldFwiO1xuXG4vLyBLZXkgbmFtZXMgbWF0Y2hpbmcgc2NoZW1hIG5hbWUgb2YgdGVtcGxhdGVzXG5leHBvcnQgY29uc3QgU25pcHBldHNUZW1wbGF0ZXMgPSB7XG4gIHNpbXBsZV9zbmlwcGV0OiBTaW1wbGVTbmlwcGV0LFxuICBuZXdzbGV0dGVyX3NuaXBwZXQ6IE5ld3NsZXR0ZXJTbmlwcGV0LFxuICBmeGFfc2lnbnVwX3NuaXBwZXQ6IEZYQVNpZ251cFNuaXBwZXQsXG4gIHNlbmRfdG9fZGV2aWNlX3NuaXBwZXQ6IFNlbmRUb0RldmljZVNuaXBwZXQsXG4gIGVveV9zbmlwcGV0OiBFT1lTbmlwcGV0LFxuICBzaW1wbGVfYmVsb3dfc2VhcmNoX3NuaXBwZXQ6IFNpbXBsZUJlbG93U2VhcmNoU25pcHBldCxcbn07XG4iLCIvKiBnbG9iYWwgSW50bCAqL1xuXG4vKipcbiAqIFRoZSBgRmx1ZW50VHlwZWAgY2xhc3MgaXMgdGhlIGJhc2Ugb2YgRmx1ZW50J3MgdHlwZSBzeXN0ZW0uXG4gKlxuICogRmx1ZW50IHR5cGVzIHdyYXAgSmF2YVNjcmlwdCB2YWx1ZXMgYW5kIHN0b3JlIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBmb3JcbiAqIHRoZW0sIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgaW4gdGhlIGB0b1N0cmluZ2AgbWV0aG9kIHRvZ2V0aGVyIHdpdGggYSBwcm9wZXJcbiAqIGBJbnRsYCBmb3JtYXR0ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBGbHVlbnRUeXBlIHtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGBGbHVlbnRUeXBlYCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtICAge0FueX0gICAgdmFsdWUgLSBKYXZhU2NyaXB0IHZhbHVlIHRvIHdyYXAuXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9IG9wdHMgIC0gQ29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybnMge0ZsdWVudFR5cGV9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0cykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFVud3JhcCB0aGUgcmF3IHZhbHVlIHN0b3JlZCBieSB0aGlzIGBGbHVlbnRUeXBlYC5cbiAgICpcbiAgICogQHJldHVybnMge0FueX1cbiAgICovXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IHRoaXMgaW5zdGFuY2Ugb2YgYEZsdWVudFR5cGVgIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBGb3JtYXR0ZWQgdmFsdWVzIGFyZSBzdWl0YWJsZSBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIGBGbHVlbnRCdW5kbGVgLlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gdXNlIGBJbnRsYCBmb3JtYXR0ZXJzIG1lbW9pemVkIGJ5IHRoZSBgRmx1ZW50QnVuZGxlYFxuICAgKiBpbnN0YW5jZSBwYXNzZWQgYXMgYW4gYXJndW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtGbHVlbnRCdW5kbGV9IFtidW5kbGVdXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG9mIEZsdWVudFR5cGUgbXVzdCBpbXBsZW1lbnQgdG9TdHJpbmcuXCIpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGbHVlbnROb25lIGV4dGVuZHMgRmx1ZW50VHlwZSB7XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlIHx8IFwiPz8
/

/
WzAtOV0rKD86XFwuKFswLTldKykpPykveTtcbmNvbnN0IFJFX0lERU5USUZJRVIgPSAvKFthLXpBLVpdW1xcdy1dKikveTtcbmNvbnN0IFJFX1JFRkVSRU5DRSA9IC8oWyQtXSk
/
KFthLXpBLVpdW1xcdy1dKikoPzpcXC4oW2EtekEtWl1bXFx3LV0qKSk
/
L3k7XG5jb25zdCBSRV9GVU5DVElPTl9OQU1FID0gL15bQS1aXVtBLVowLTlfLV0qJC87XG5cbi8vIEEgXCJydW5cIiBpcyBhIHNlcXVlbmNlIG9mIHRleHQgb3Igc3RyaW5nIGxpdGVyYWwgY2hhcmFjdGVycyB3aGljaCBkb24ndFxuLy8gcmVxdWlyZSBhbnkgc3BlY2lhbCBoYW5kbGluZy4gRm9yIFRleHRFbGVtZW50cyBzdWNoIHNwZWNpYWwgY2hhcmFjdGVycyBhcmU6IHtcbi8vIChzdGFydHMgYSBwbGFjZWFibGUpLCBhbmQgbGluZSBicmVha3Mgd2hpY2ggcmVxdWlyZSBhZGRpdGlvbmFsIGxvZ2ljIHRvIGNoZWNrXG4vLyBpZiB0aGUgbmV4dCBsaW5lIGlzIGluZGVudGVkLiBGb3IgU3RyaW5nTGl0ZXJhbHMgdGhleSBhcmU6IFxcIChzdGFydHMgYW5cbi8vIGVzY2FwZSBzZXF1ZW5jZSksIFwiIChlbmRzIHRoZSBsaXRlcmFsKSwgYW5kIGxpbmUgYnJlYWtzIHdoaWNoIGFyZSBub3QgYWxsb3dlZFxuLy8gaW4gU3RyaW5nTGl0ZXJhbHMuIE5vdGUgdGhhdCBzdHJpbmcgcnVucyBtYXkgYmUgZW1wdHk7IHRleHQgcnVucyBtYXkgbm90LlxuY29uc3QgUkVfVEVYVF9SVU4gPSAvKFtee31cXG5cXHJdKykveTtcbmNvbnN0IFJFX1NUUklOR19SVU4gPSAvKFteXFxcXFwiXFxuXFxyXSopL3k7XG5cbi8vIEVzY2FwZSBzZXF1ZW5jZXMuXG5jb25zdCBSRV9TVFJJTkdfRVNDQVBFID0gL1xcXFwoW1xcXFxcIl0pL3k7XG5jb25zdCBSRV9VTklDT0RFX0VTQ0FQRSA9IC9cXFxcdShbYS1mQS1GMC05XXs0fSl8XFxcXFUoW2EtZkEtRjAtOV17Nn0pL3k7XG5cbi8vIFVzZWQgZm9yIHRyaW1taW5nIFRleHRFbGVtZW50cyBhbmQgaW5kZW50cy5cbmNvbnN0IFJFX0xFQURJTkdfTkVXTElORVMgPSAvXlxcbisvO1xuY29uc3QgUkVfVFJBSUxJTkdfU1BBQ0VTID0gLyArJC87XG4vLyBVc2VkIGluIG1ha2VJbmRlbnQgdG8gc3RyaXAgc3BhY2VzIGZyb20gYmxhbmsgbGluZXMgYW5kIG5vcm1hbGl6ZSBDUkxGIHRvIExGLlxuY29uc3QgUkVfQkxBTktfTElORVMgPSAvICpcXHI
/
XFxuL2c7XG4vLyBVc2VkIGluIG1ha2VJbmRlbnQgdG8gbWVhc3VyZSB0aGUgaW5kZW50YXRpb24uXG5jb25zdCBSRV9JTkRFTlQgPSAvKCAqKSQvO1xuXG4vLyBDb21tb24gdG9rZW5zLlxuY29uc3QgVE9LRU5fQlJBQ0VfT1BFTiA9IC97XFxzKi95O1xuY29uc3QgVE9LRU5fQlJBQ0VfQ0xPU0UgPSAvXFxzKn0veTtcbmNvbnN0IFRPS0VOX0JSQUNLRVRfT1BFTiA9IC9cXFtcXHMqL3k7XG5jb25zdCBUT0tFTl9CUkFDS0VUX0NMT1NFID0gL1xccypdICoveTtcbmNvbnN0IFRPS0VOX1BBUkVOX09QRU4gPSAvXFxzKlxcKFxccyoveTtcbmNvbnN0IFRPS0VOX0FSUk9XID0gL1xccyotPlxccyoveTtcbmNvbnN0IFRPS0VOX0NPTE9OID0gL1xccyo6XFxzKi95O1xuLy8gTm90ZSB0aGUgb3B0aW9uYWwgY29tbWEuIEFzIGEgZGV2aWF0aW9uIGZyb20gdGhlIEZsdWVudCBFQk5GLCB0aGUgcGFyc2VyXG4vLyBkb2Vzbid0IGVuZm9yY2UgY29tbWFzIGJldHdlZW4gY2FsbCBhcmd1bWVudHMuXG5jb25zdCBUT0tFTl9DT01NQSA9IC9cXHMqLD9cXHMqL3k7XG5jb25zdCBUT0tFTl9CTEFOSyA9IC9cXHMrL3k7XG5cbi8vIE1heGltdW0gbnVtYmVyIG9mIHBsYWNlYWJsZXMgaW4gYSBzaW5nbGUgUGF0dGVybiB0byBwcm90ZWN0IGFnYWluc3QgUXVhZHJhdGljXG4vLyBCbG93dXAgYXR0YWNrcy4gU2VlIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL21hZ2F6aW5lL2VlMzM1NzEzLmFzcHguXG5jb25zdCBNQVhfUExBQ0VBQkxFUyA9IDEwMDtcblxuLyoqXG4gKiBGbHVlbnQgUmVzb3VyY2UgaXMgYSBzdHJ1Y3R1cmUgc3RvcmluZyBhIG1hcCBvZiBwYXJzZWQgbG9jYWxpemF0aW9uIGVudHJpZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsdWVudFJlc291cmNlIGV4dGVuZHMgTWFwIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBGbHVlbnRSZXNvdXJjZSBmcm9tIEZsdWVudCBjb2RlLlxuICAgKi9cbiAgc3RhdGljIGZyb21TdHJpbmcoc291cmNlKSB7XG4gICAgUkVfTUVTU0FHRV9TVEFSVC5sYXN0SW5kZXggPSAwO1xuXG4gICAgbGV0IHJlc291cmNlID0gbmV3IHRoaXMoKTtcbiAgICBsZXQgY3Vyc29yID0gMDtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgYmVnaW5uaW5ncyBvZiBtZXNzYWdlcyBhbmQgdGVybXMgdG8gZWZmaWNpZW50bHkgc2tpcFxuICAgIC8vIGNvbW1lbnRzIGFuZCByZWNvdmVyIGZyb20gZXJyb3JzLlxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgbmV4dCA9IFJFX01FU1NBR0VfU1RBUlQuZXhlYyhzb3VyY2UpO1xuICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGN1cnNvciA9IFJFX01FU1NBR0VfU1RBUlQubGFzdEluZGV4O1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzb3VyY2Uuc2V0KG5leHRbMV0sIHBhcnNlTWVzc2FnZSgpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRmx1ZW50RXJyb3IpIHtcbiAgICAgICAgICAvLyBEb24ndCByZXBvcnQgYW55IEZsdWVudCBzeW50YXggZXJyb3JzLiBTa2lwIGRpcmVjdGx5IHRvIHRoZVxuICAgICAgICAgIC8vIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBtZXNzYWdlIG9yIHRlcm0uXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNvdXJjZTtcblxuICAgIC8vIFRoZSBwYXJzZXIgaW1wbGVtZW50YXRpb24gaXMgaW5saW5lZCBiZWxvdyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cblxuICAgIC8vIFRoZSBwYXJzZXIgZm9jdXNlcyBvbiBtaW5pbWl6aW5nIHRoZSBudW1iZXIgb2YgZmFsc2UgbmVnYXRpdmVzIGF0IHRoZVxuICAgIC8vIGV4cGVuc2Ugb2YgaW5jcmVhc2luZyB0aGUgcmlzayBvZiBmYWxzZSBwb3NpdGl2ZXMuIEluIG90aGVyIHdvcmRzLCBpdFxuICAgIC8vIGFpbXMgYXQgcGFyc2luZyB2YWxpZCBGbHVlbnQgbWVzc2FnZXMgd2l0aCBhIHN1Y2Nlc3MgcmF0ZSBvZiAxMDAlLCBidXQgaXRcbiAgICAvLyBtYXkgYWxzbyBwYXJzZSBhIGZldyBpbnZhbGlkIG1lc3NhZ2VzIHdoaWNoIHRoZSByZWZlcmVuY2UgcGFyc2VyIHdvdWxkXG4gICAgLy8gcmVqZWN0LiBUaGUgcGFyc2VyIGRvZXNuJ3QgcGVyZm9ybSBhbnkgdmFsaWRhdGlvbiBhbmQgbWF5IHByb2R1Y2UgZW50cmllc1xuICAgIC8vIHdoaWNoIHdvdWxkbid0IG1ha2Ugc2Vuc2UgaW4gdGhlIHJlYWwgd29ybGQuIEZvciBiZXN0IHJlc3VsdHMgdXNlcnMgYXJlXG4gICAgLy8gYWR2aXNlZCB0byB2YWxpZGF0ZSB0cmFuc2xhdGlvbnMgd2l0aCB0aGUgZmx1ZW50LXN5bnRheCBwYXJzZXJcbiAgICAvLyBwcmUtcnVudGltZS5cblxuICAgIC8vIFRoZSBwYXJzZXIgbWFrZXMgYW4gZXh0ZW5zaXZlIHVzZSBvZiBzdGlja3kgcmVnZXhlcyB3aGljaCBjYW4gYmUgYW5jaG9yZWRcbiAgICAvLyB0byBhbnkgb2Zmc2V0IG9mIHRoZSBzb3VyY2Ugc3RyaW5nIHdpdGhvdXQgc2xpY2luZyBpdC4gRXJyb3JzIGFyZSB0aHJvd25cbiAgICAvLyB0byBiYWlsIG91dCBvZiBwYXJzaW5nIG9mIGlsbC1mb3JtZWQgbWVzc2FnZXMuXG5cbiAgICBmdW5jdGlvbiB0ZXN0KHJlKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSBjdXJzb3I7XG4gICAgICByZXR1cm4gcmUudGVzdChzb3VyY2UpO1xuICAgIH1cblxuICAgIC8vIEFkdmFuY2UgdGhlIGN1cnNvciBieSB0aGUgY2hhciBpZiBpdCBtYXRjaGVzLiBNYXkgYmUgdXNlZCBhcyBhIHByZWRpY2F0ZVxuICAgIC8vICh3YXMgdGhlIG1hdGNoIGZvdW5kPykgb3IsIGlmIGVycm9yQ2xhc3MgaXMgcGFzc2VkLCBhcyBhbiBhc3NlcnRpb24uXG4gICAgZnVuY3Rpb24gY29uc3VtZUNoYXIoY2hhciwgZXJyb3JDbGFzcykge1xuICAgICAgaWYgKHNvdXJjZVtjdXJzb3JdID09PSBjaGFyKSB7XG4gICAgICAgIGN1cnNvcisrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvckNsYXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvckNsYXNzKGBFeHBlY3RlZCAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQWR2YW5jZSB0aGUgY3Vyc29yIGJ5IHRoZSB0b2tlbiBpZiBpdCBtYXRjaGVzLiBNYXkgYmUgdXNlZCBhcyBhIHByZWRpY2F0ZVxuICAgIC8vICh3YXMgdGhlIG1hdGNoIGZvdW5kPykgb3IsIGlmIGVycm9yQ2xhc3MgaXMgcGFzc2VkLCBhcyBhbiBhc3NlcnRpb24uXG4gICAgZnVuY3Rpb24gY29uc3VtZVRva2VuKHJlLCBlcnJvckNsYXNzKSB7XG4gICAgICBpZiAodGVzdChyZSkpIHtcbiAgICAgICAgY3Vyc29yID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvckNsYXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvckNsYXNzKGBFeHBlY3RlZCAke3JlLnRvU3RyaW5nKCl9YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSBhIHJlZ2V4LCBhZHZhbmNlIHRoZSBjdXJzb3IsIGFuZCByZXR1cm4gYWxsIGNhcHR1cmUgZ3JvdXBzLlxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSBjdXJzb3I7XG4gICAgICBsZXQgcmVzdWx0ID0gcmUuZXhlYyhzb3VyY2UpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoYEV4cGVjdGVkICR7cmUudG9TdHJpbmcoKX1gKTtcbiAgICAgIH1cbiAgICAgIGN1cnNvciA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSBhIHJlZ2V4LCBhZHZhbmNlIHRoZSBjdXJzb3IsIGFuZCByZXR1cm4gdGhlIGNhcHR1cmUgZ3JvdXAuXG4gICAgZnVuY3Rpb24gbWF0Y2gxKHJlKSB7XG4gICAgICByZXR1cm4gbWF0Y2gocmUpWzFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTWVzc2FnZSgpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHBhcnNlUGF0dGVybigpO1xuICAgICAgbGV0IGF0dHJzID0gcGFyc2VBdHRyaWJ1dGVzKCk7XG5cbiAgICAgIGlmIChhdHRycyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoXCJFeHBlY3RlZCBtZXNzYWdlIHZhbHVlIG9yIGF0dHJpYnV0ZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge3ZhbHVlLCBhdHRyc307XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGVzKCkge1xuICAgICAgbGV0IGF0dHJzID0ge307XG5cbiAgICAgIHdoaWxlICh0ZXN0KFJFX0FUVFJJQlVURV9TVEFSVCkpIHtcbiAgICAgICAgbGV0IG5hbWUgPSBtYXRjaDEoUkVfQVRUUklCVVRFX1NUQVJUKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VQYXR0ZXJuKCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBGbHVlbnRFcnJvcihcIkV4cGVjdGVkIGF0dHJpYnV0ZSB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBhdHRyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLmxlbmd0aCA
+

/
IFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVwb2ludClcbiAgICAgICAgICAvLyBMb25lbHkgc3Vycm9nYXRlcyBjYW4gY2F1c2UgdHJvdWJsZSB3aGVuIHRoZSBwYXJzaW5nIHJlc3VsdCBpc1xuICAgICAgICAgIC8vIHNhdmVkIHVzaW5nIFVURi04LiBVc2UgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUiBpbnN0ZWFkLlxuICAgICAgICAgIDogXCLvv71cIjtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiVW5rbm93biBlc2NhcGUgc2VxdWVuY2VcIik7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgYmxhbmsgc3BhY2UuIFJldHVybiBpdCBpZiBpdCBsb29rcyBsaWtlIGluZGVudCBiZWZvcmUgYSBwYXR0ZXJuXG4gICAgLy8gbGluZS4gU2tpcCBpdCBvdGh3ZXJ3aXNlLlxuICAgIGZ1bmN0aW9uIHBhcnNlSW5kZW50KCkge1xuICAgICAgbGV0IHN0YXJ0ID0gY3Vyc29yO1xuICAgICAgY29uc3VtZVRva2VuKFRPS0VOX0JMQU5LKTtcblxuICAgICAgLy8gQ2hlY2sgdGhlIGZpcnN0IG5vbi1ibGFuayBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGluZGVudC5cbiAgICAgIHN3aXRjaCAoc291cmNlW2N1cnNvcl0pIHtcbiAgICAgICAgY2FzZSBcIi5cIjpcbiAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgY2FzZSBcIn1cIjpcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6IC8vIEVPRlxuICAgICAgICAgIC8vIEEgc3BlY2lhbCBjaGFyYWN0ZXIuIEVuZCB0aGUgUGF0dGVybi5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgXCJ7XCI6XG4gICAgICAgICAgLy8gUGxhY2VhYmxlcyBkb24ndCByZXF1aXJlIGluZGVudGF0aW9uIChpbiBFQk5GOiBibG9jay1wbGFjZWFibGUpLlxuICAgICAgICAgIC8vIENvbnRpbnVlIHRoZSBQYXR0ZXJuLlxuICAgICAgICAgIHJldHVybiBtYWtlSW5kZW50KHNvdXJjZS5zbGljZShzdGFydCwgY3Vyc29yKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb24gdGhlIGxpbmUgaXMgbm90IG9uZSBvZiB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAvLyBsaXN0ZWQgYWJvdmUsIGl0J3MgYSByZWd1bGFyIHRleHQgY2hhcmFjdGVyLiBDaGVjayBpZiB0aGVyZSdzIGF0IGxlYXN0XG4gICAgICAvLyBvbmUgc3BhY2Ugb2YgaW5kZW50IGJlZm9yZSBpdC5cbiAgICAgIGlmIChzb3VyY2VbY3Vyc29yIC0gMV0gPT09IFwiIFwiKSB7XG4gICAgICAgIC8vIEl0J3MgYW4gaW5kZW50ZWQgdGV4dCBjaGFyYWN0ZXIgKGluIEVCTkY6IGluZGVudGVkLWNoYXIpLiBDb250aW51ZVxuICAgICAgICAvLyB0aGUgUGF0dGVybi5cbiAgICAgICAgcmV0dXJuIG1ha2VJbmRlbnQoc291cmNlLnNsaWNlKHN0YXJ0LCBjdXJzb3IpKTtcbiAgICAgIH1cblxuICAgICAgLy8gQSBub3QtaW5kZW50ZWQgdGV4dCBjaGFyYWN0ZXIgaXMgbGlrZWx5IHRoZSBpZGVudGlmaWVyIG9mIHRoZSBuZXh0XG4gICAgICAvLyBtZXNzYWdlLiBFbmQgdGhlIFBhdHRlcm4uXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVHJpbSBibGFua3MgaW4gdGV4dCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHJlZ2V4LlxuICAgIGZ1bmN0aW9uIHRyaW0odGV4dCwgcmUpIHtcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmUsIFwiXCIpO1xuICAgIH1cblxuICAgIC8vIE5vcm1hbGl6ZSBhIGJsYW5rIGJsb2NrIGFuZCBleHRyYWN0IHRoZSBpbmRlbnQgZGV0YWlscy5cbiAgICBmdW5jdGlvbiBtYWtlSW5kZW50KGJsYW5rKSB7XG4gICAgICBsZXQgdmFsdWUgPSBibGFuay5yZXBsYWNlKFJFX0JMQU5LX0xJTkVTLCBcIlxcblwiKTtcbiAgICAgIGxldCBsZW5ndGggPSBSRV9JTkRFTlQuZXhlYyhibGFuaylbMV0ubGVuZ3RoO1xuICAgICAgcmV0dXJuIHt0eXBlOiBcImluZGVudFwiLCB2YWx1ZSwgbGVuZ3RofTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCByZXNvbHZlIGZyb20gXCIuL3Jlc29sdmVyLmpzXCI7XG5pbXBvcnQgRmx1ZW50UmVzb3VyY2UgZnJvbSBcIi4vcmVzb3VyY2UuanNcIjtcblxuLyoqXG4gKiBNZXNzYWdlIGJ1bmRsZXMgYXJlIHNpbmdsZS1sYW5ndWFnZSBzdG9yZXMgb2YgdHJhbnNsYXRpb25zLiAgVGhleSBhcmVcbiAqIHJlc3BvbnNpYmxlIGZvciBwYXJzaW5nIHRyYW5zbGF0aW9uIHJlc291cmNlcyBpbiB0aGUgRmx1ZW50IHN5bnRheCBhbmQgY2FuXG4gKiBmb3JtYXQgdHJhbnNsYXRpb24gdW5pdHMgKGVudGl0aWVzKSB0byBzdHJpbmdzLlxuICpcbiAqIEFsd2F5cyB1c2UgYEZsdWVudEJ1bmRsZS5mb3JtYXRgIHRvIHJldHJpZXZlIHRyYW5zbGF0aW9uIHVuaXRzIGZyb20gYVxuICogYnVuZGxlLiBUcmFuc2xhdGlvbnMgY2FuIGNvbnRhaW4gcmVmZXJlbmNlcyB0byBvdGhlciBlbnRpdGllcyBvciB2YXJpYWJsZXMsXG4gKiBjb25kaXRpb25hbCBsb2dpYyBpbiBmb3JtIG9mIHNlbGVjdCBleHByZXNzaW9ucywgdHJhaXRzIHdoaWNoIGRlc2NyaWJlIHRoZWlyXG4gKiBncmFtbWF0aWNhbCBmZWF0dXJlcywgYW5kIGNhbiB1c2UgRmx1ZW50IGJ1aWx0aW5zIHdoaWNoIG1ha2UgdXNlIG9mIHRoZVxuICogYEludGxgIGZvcm1hdHRlcnMgdG8gZm9ybWF0IG51bWJlcnMsIGRhdGVzLCBsaXN0cyBhbmQgbW9yZSBpbnRvIHRoZVxuICogYnVuZGxlJ3MgbGFuZ3VhZ2UuIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBvZiB0aGUgRmx1ZW50IHN5bnRheCBmb3IgbW9yZVxuICogaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsdWVudEJ1bmRsZSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBgRmx1ZW50QnVuZGxlYC5cbiAgICpcbiAgICogVGhlIGBsb2NhbGVzYCBhcmd1bWVudCBpcyB1c2VkIHRvIGluc3RhbnRpYXRlIGBJbnRsYCBmb3JtYXR0ZXJzIHVzZWQgYnlcbiAgICogdHJhbnNsYXRpb25zLiAgVGhlIGBvcHRpb25zYCBvYmplY3QgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBidW5kbGUuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiAgICAgY29uc3QgYnVuZGxlID0gbmV3IEZsdWVudEJ1bmRsZShsb2NhbGVzKTtcbiAgICpcbiAgICogICAgIGNvbnN0IGJ1bmRsZSA9IG5ldyBGbHVlbnRCdW5kbGUobG9jYWxlcywgeyB1c2VJc29sYXRpbmc6IGZhbHNlIH0pO1xuICAgKlxuICAgKiAgICAgY29uc3QgYnVuZGxlID0gbmV3IEZsdWVudEJ1bmRsZShsb2NhbGVzLCB7XG4gICAqICAgICAgIHVzZUlzb2xhdGluZzogdHJ1ZSxcbiAgICogICAgICAgZnVuY3Rpb25zOiB7XG4gICAqICAgICAgICAgTk9ERV9FTlY6ICgpID0
+
IHByb2Nlc3MuZW52Lk5PREVfRU5WXG4gICAqICAgICAgIH1cbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBBdmFpbGFibGUgb3B0aW9uczpcbiAgICpcbiAgICogICAtIGBmdW5jdGlvbnNgIC0gYW4gb2JqZWN0IG9mIGFkZGl0aW9uYWwgZnVuY3Rpb25zIGF2YWlsYWJsZSB0b1xuICAgKiAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnMgYXMgYnVpbHRpbnMuXG4gICAqXG4gICAqICAgLSBgdXNlSXNvbGF0aW5nYCAtIGJvb2xlYW4gc3BlY2lmeWluZyB3aGV0aGVyIHRvIHVzZSBVbmljb2RlIGlzb2xhdGlvblxuICAgKiAgICAgICAgICAgICAgICAgICAgbWFya3MgKEZTSSwgUERJKSBmb3IgYmlkaSBpbnRlcnBvbGF0aW9ucy5cbiAgICogICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IHRydWVcbiAgICpcbiAgICogICAtIGB0cmFuc2Zvcm1gIC0gYSBmdW5jdGlvbiB1c2VkIHRvIHRyYW5zZm9ybSBzdHJpbmcgcGFydHMgb2YgcGF0dGVybnMuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gbG9jYWxlcyAtIExvY2FsZSBvciBsb2NhbGVzIG9mIHRoZSBidW5kbGVcbiAgICogQHBhcmFtICAge09iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtGbHVlbnRCdW5kbGV9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihsb2NhbGVzLCB7XG4gICAgZnVuY3Rpb25zID0ge30sXG4gICAgdXNlSXNvbGF0aW5nID0gdHJ1ZSxcbiAgICB0cmFuc2Zvcm0gPSB2ID0
+
IHZcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5sb2NhbGVzID0gQXJyYXkuaXNBcnJheShsb2NhbGVzKSA
/
IGxvY2FsZXMgOiBbbG9jYWxlc107XG5cbiAgICB0aGlzLl90ZXJtcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9tZXNzYWdlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgdGhpcy5fdXNlSXNvbGF0aW5nID0gdXNlSXNvbGF0aW5nO1xuICAgIHRoaXMuX3RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB0aGlzLl9pbnRscyA9IG5ldyBXZWFrTWFwKCk7XG4gIH1cblxuICAvKlxuICAgKiBSZXR1cm4gYW4gaXRlcmF0b3Igb3ZlciBwdWJsaWMgYFtpZCwgbWVzc2FnZV1gIHBhaXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7SXRlcmF0b3J9XG4gICAqL1xuICBnZXQgbWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIC8qXG4gICAqIENoZWNrIGlmIGEgbWVzc2FnZSBpcyBwcmVzZW50IGluIHRoZSBidW5kbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBtZXNzYWdlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbH1cbiAgICovXG4gIGhhc01lc3NhZ2UoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXMuaGFzKGlkKTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybiB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBUaGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCBhcyBhbiBhcmd1bWVudCB0b1xuICAgKiBgRmx1ZW50QnVuZGxlLmZvcm1hdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBtZXNzYWdlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7QW55fVxuICAgKi9cbiAgZ2V0TWVzc2FnZShpZCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcy5nZXQoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHRyYW5zbGF0aW9uIHJlc291cmNlIHRvIHRoZSBidW5kbGUuXG4gICAqXG4gICAqIFRoZSB0cmFuc2xhdGlvbiByZXNvdXJjZSBtdXN0IHVzZSB0aGUgRmx1ZW50IHN5bnRheC4gIEl0IHdpbGwgYmUgcGFyc2VkIGJ5XG4gICAqIHRoZSBidW5kbGUgYW5kIGVhY2ggdHJhbnNsYXRpb24gdW5pdCAobWVzc2FnZSkgd2lsbCBiZSBhdmFpbGFibGUgaW4gdGhlXG4gICAqIGJ1bmRsZSBieSBpdHMgaWRlbnRpZmllci5cbiAgICpcbiAgICogICAgIGJ1bmRsZS5hZGRNZXNzYWdlcygnZm9vID0gRm9vJyk7XG4gICAqICAgICBidW5kbGUuZ2V0TWVzc2FnZSgnZm9vJyk7XG4gICAqXG4gICAqICAgICAvLyBSZXR1cm5zIGEgcmF3IHJlcHJlc2VudGF0aW9uIG9mIHRoZSAnZm9vJyBtZXNzYWdlLlxuICAgKlxuICAgKiAgICAgYnVuZGxlLmFkZE1lc3NhZ2VzKCdiYXIgPSBCYXInKTtcbiAgICogICAgIGJ1bmRsZS5hZGRNZXNzYWdlcygnYmFyID0gTmV3YmFyJywgeyBhbGxvd092ZXJyaWRlczogdHJ1ZSB9KTtcbiAgICogICAgIGJ1bmRsZS5nZXRNZXNzYWdlKCdiYXInKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgYSByYXcgcmVwcmVzZW50YXRpb24gb2YgdGhlICdiYXInIG1lc3NhZ2U6IE5ld2Jhci5cbiAgICpcbiAgICogUGFyc2VkIGVudGl0aWVzIHNob3VsZCBiZSBmb3JtYXR0ZWQgd2l0aCB0aGUgYGZvcm1hdGAgbWV0aG9kIGluIGNhc2UgdGhleVxuICAgKiBjb250YWluIGxvZ2ljIChyZWZlcmVuY2VzLCBzZWxlY3QgZXhwcmVzc2lvbnMgZXRjLikuXG4gICAqXG4gICAqIEF2YWlsYWJsZSBvcHRpb25zOlxuICAgKlxuICAgKiAgIC0gYGFsbG93T3ZlcnJpZGVzYCAtIGJvb2xlYW4gc3BlY2lmeWluZyB3aGV0aGVyIGl0J3MgYWxsb3dlZCB0byBvdmVycmlkZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICBhbiBleGlzdGluZyBtZXNzYWdlIG9yIHRlcm0gd2l0aCBhIG5ldyB2YWx1ZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogZmFsc2VcbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ30gc291cmNlIC0gVGV4dCByZXNvdXJjZSB3aXRoIHRyYW5zbGF0aW9ucy5cbiAgICogQHBhcmFtICAge09iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtBcnJheTxFcnJvcj59XG4gICAqL1xuICBhZGRNZXNzYWdlcyhzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXMgPSBGbHVlbnRSZXNvdXJjZS5mcm9tU3RyaW5nKHNvdXJjZSk7XG4gICAgcmV0dXJuIHRoaXMuYWRkUmVzb3VyY2UocmVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB0cmFuc2xhdGlvbiByZXNvdXJjZSB0byB0aGUgYnVuZGxlLlxuICAgKlxuICAgKiBUaGUgdHJhbnNsYXRpb24gcmVzb3VyY2UgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGbHVlbnRSZXNvdXJjZSxcbiAgICogZS5nLiBwYXJzZWQgYnkgYEZsdWVudFJlc291cmNlLmZyb21TdHJpbmdgLlxuICAgKlxuICAgKiAgICAgbGV0IHJlcyA9IEZsdWVudFJlc291cmNlLmZyb21TdHJpbmcoXCJmb28gPSBGb29cIik7XG4gICAqICAgICBidW5kbGUuYWRkUmVzb3VyY2UocmVzKTtcbiAgICogICAgIGJ1bmRsZS5nZXRNZXNzYWdlKCdmb28nKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgYSByYXcgcmVwcmVzZW50YXRpb24gb2YgdGhlICdmb28nIG1lc3NhZ2UuXG4gICAqXG4gICAqICAgICBsZXQgcmVzID0gRmx1ZW50UmVzb3VyY2UuZnJvbVN0cmluZyhcImJhciA9IEJhclwiKTtcbiAgICogICAgIGJ1bmRsZS5hZGRSZXNvdXJjZShyZXMpO1xuICAgKiAgICAgcmVzID0gRmx1ZW50UmVzb3VyY2UuZnJvbVN0cmluZyhcImJhciA9IE5ld2JhclwiKTtcbiAgICogICAgIGJ1bmRsZS5hZGRSZXNvdXJjZShyZXMsIHsgYWxsb3dPdmVycmlkZXM6IHRydWUgfSk7XG4gICAqICAgICBidW5kbGUuZ2V0TWVzc2FnZSgnYmFyJyk7XG4gICAqXG4gICAqICAgICAvLyBSZXR1cm5zIGEgcmF3IHJlcHJlc2VudGF0aW9uIG9mIHRoZSAnYmFyJyBtZXNzYWdlOiBOZXdiYXIuXG4gICAqXG4gICAqIFBhcnNlZCBlbnRpdGllcyBzaG91bGQgYmUgZm9ybWF0dGVkIHdpdGggdGhlIGBmb3JtYXRgIG1ldGhvZCBpbiBjYXNlIHRoZXlcbiAgICogY29udGFpbiBsb2dpYyAocmVmZXJlbmNlcywgc2VsZWN0IGV4cHJlc3Npb25zIGV0Yy4pLlxuICAgKlxuICAgKiBBdmFpbGFibGUgb3B0aW9uczpcbiAgICpcbiAgICogICAtIGBhbGxvd092ZXJyaWRlc2AgLSBib29sZWFuIHNwZWNpZnlpbmcgd2hldGhlciBpdCdzIGFsbG93ZWQgdG8gb3ZlcnJpZGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgYW4gZXhpc3RpbmcgbWVzc2FnZSBvciB0ZXJtIHdpdGggYSBuZXcgdmFsdWUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSAgIHtGbHVlbnRSZXNvdXJjZX0gcmVzIC0gRmx1ZW50UmVzb3VyY2Ugb2JqZWN0LlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybnMge0FycmF5PEVycm9yPn1cbiAgICovXG4gIGFkZFJlc291cmNlKHJlcywge1xuICAgIGFsbG93T3ZlcnJpZGVzID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IFtpZCwgdmFsdWVdIG9mIHJlcykge1xuICAgICAgaWYgKGlkLnN0YXJ0c1dpdGgoXCItXCIpKSB7XG4gICAgICAgIC8vIElkZW50aWZpZXJzIHN0YXJ0aW5nIHdpdGggYSBkYXNoICgtKSBkZWZpbmUgdGVybXMuIFRlcm1zIGFyZSBwcml2YXRlXG4gICAgICAgIC8vIGFuZCBjYW5ub3QgYmUgcmV0cmlldmVkIGZyb20gRmx1ZW50QnVuZGxlLlxuICAgICAgICBpZiAoYWxsb3dPdmVycmlkZXMgPT09IGZhbHNlICYmIHRoaXMuX3Rlcm1zLmhhcyhpZCkpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChgQXR0ZW1wdCB0byBvdmVycmlkZSBhbiBleGlzdGluZyB0ZXJtOiBcIiR7aWR9XCJgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtcy5zZXQoaWQsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhbGxvd092ZXJyaWRlcyA9PT0gZmFsc2UgJiYgdGhpcy5fbWVzc2FnZXMuaGFzKGlkKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGBBdHRlbXB0IHRvIG92ZXJyaWRlIGFuIGV4aXN0aW5nIG1lc3NhZ2U6IFwiJHtpZH1cImApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21lc3NhZ2VzLnNldChpZCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlcnJvcnM7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGEgbWVzc2FnZSB0byBhIHN0cmluZyBvciBudWxsLlxuICAgKlxuICAgKiBGb3JtYXQgYSByYXcgYG1lc3NhZ2VgIGZyb20gdGhlIGJ1bmRsZSBpbnRvIGEgc3RyaW5nIChvciBhIG51bGwgaWYgaXQgaGFzXG4gICAqIGEgbnVsbCB2YWx1ZSkuICBgYXJnc2Agd2lsbCBiZSB1c2VkIHRvIHJlc29sdmUgcmVmZXJlbmNlcyB0byB2YXJpYWJsZXNcbiAgICogcGFzc2VkIGFzIGFyZ3VtZW50cyB0byB0aGUgdHJhbnNsYXRpb24uXG4gICAqXG4gICAqIEluIGNhc2Ugb2YgZXJyb3JzIGBmb3JtYXRgIHdpbGwgdHJ5IHRvIHNhbHZhZ2UgYXMgbXVjaCBvZiB0aGUgdHJhbnNsYXRpb25cbiAgICogYXMgcG9zc2libGUgYW5kIHdpbGwgc3RpbGwgcmV0dXJuIGEgc3RyaW5nLiAgRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHRoZVxuICAgKiBlbmNvdW50ZXJlZCBlcnJvcnMgYXJlIG5vdCByZXR1cm5lZCBidXQgaW5zdGVhZCBhcmUgYXBwZW5kZWQgdG8gdGhlXG4gICAqIGBlcnJvcnNgIGFycmF5IHBhc3NlZCBhcyB0aGUgdGhpcmQgYXJndW1lbnQuXG4gICAqXG4gICAqICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICogICAgIGJ1bmRsZS5hZGRNZXNzYWdlcygnaGVsbG8gPSBIZWxsbywgeyAkbmFtZSB9IScpO1xuICAgKiAgICAgY29uc3QgaGVsbG8gPSBidW5kbGUuZ2V0TWVzc2FnZSgnaGVsbG8nKTtcbiAgICogICAgIGJ1bmRsZS5mb3JtYXQoaGVsbG8sIHsgbmFtZTogJ0phbmUnIH0sIGVycm9ycyk7XG4gICAqXG4gICAqICAgICAvLyBSZXR1cm5zICdIZWxsbywgSmFuZSEnIGFuZCBgZXJyb3JzYCBpcyBlbXB0eS5cbiAgICpcbiAgICogICAgIGJ1bmRsZS5mb3JtYXQoaGVsbG8sIHVuZGVmaW5lZCwgZXJyb3JzKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgJ0hlbGxvLCBuYW1lIScgYW5kIGBlcnJvcnNgIGlzIG5vdzpcbiAgICpcbiAgICogICAgIFs8UmVmZXJlbmNlRXJyb3I6IFVua25vd24gdmFyaWFibGU6IG5hbWU
+
XVxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0IHwgc3RyaW5nfSAgICBtZXNzYWdlXG4gICAqIEBwYXJhbSAgIHtPYmplY3QgfCB1bmRlZmluZWR9IGFyZ3NcbiAgICogQHBhcmFtICAge0FycmF5fSAgICAgICAgICAgICAgZXJyb3JzXG4gICAqIEByZXR1cm5zIHs
/
c3RyaW5nfVxuICAgKi9cbiAgZm9ybWF0KG1lc3NhZ2UsIGFyZ3MsIGVycm9ycykge1xuICAgIC8vIG9wdGltaXplIGVudGl0aWVzIHdoaWNoIGFyZSBzaW1wbGUgc3RyaW5ncyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm0obWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLy8gb3B0aW1pemUgZW50aXRpZXMgd2l0aCBudWxsIHZhbHVlc1xuICAgIGlmIChtZXNzYWdlID09PSBudWxsIHx8IG1lc3NhZ2UudmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIG9wdGltaXplIHNpbXBsZS1zdHJpbmcgZW50aXRpZXMgd2l0aCBhdHRyaWJ1dGVzXG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlLnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3JtKG1lc3NhZ2UudmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNvbHZlKHRoaXMsIGFyZ3MsIG1lc3NhZ2UsIGVycm9ycyk7XG4gIH1cblxuICBfbWVtb2l6ZUludGxPYmplY3QoY3Rvciwgb3B0cykge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5faW50bHMuZ2V0KGN0b3IpIHx8IHt9O1xuICAgIGNvbnN0IGlkID0gSlNPTi5zdHJpbmdpZnkob3B0cyk7XG5cbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgY2FjaGVbaWRdID0gbmV3IGN0b3IodGhpcy5sb2NhbGVzLCBvcHRzKTtcbiAgICAgIHRoaXMuX2ludGxzLnNldChjdG9yLCBjYWNoZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2lkXTtcbiAgfVxufVxuIiwiZnVuY3Rpb24gbm9uQmxhbmsobGluZSkge1xuICByZXR1cm4gIS9eXFxzKiQvLnRlc3QobGluZSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50SW5kZW50KGxpbmUpIHtcbiAgY29uc3QgW2luZGVudF0gPSBsaW5lLm1hdGNoKC9eXFxzKi8pO1xuICByZXR1cm4gaW5kZW50Lmxlbmd0aDtcbn1cblxuLyoqXG4gKiBUZW1wbGF0ZSBsaXRlcmFsIHRhZyBmb3IgZGVkZW50aW5nIEZUTCBjb2RlLlxuICpcbiAqIFN0cmlwIHRoZSBjb21tb24gaW5kZW50IG9mIG5vbi1ibGFuayBsaW5lcy4gUmVtb3ZlIGJsYW5rIGxpbmVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc3RyaW5nc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZnRsKHN0cmluZ3MpIHtcbiAgY29uc3QgW2NvZGVdID0gc3RyaW5ncztcbiAgY29uc3QgbGluZXMgPSBjb2RlLnNwbGl0KFwiXFxuXCIpLmZpbHRlcihub25CbGFuayk7XG4gIGNvbnN0IGluZGVudHMgPSBsaW5lcy5tYXAoY291bnRJbmRlbnQpO1xuICBjb25zdCBjb21tb24gPSBNYXRoLm1pbiguLi5pbmRlbnRzKTtcbiAgY29uc3QgaW5kZW50ID0gbmV3IFJlZ0V4cChgXlxcXFxzeyR7Y29tbW9ufX1gKTtcblxuICByZXR1cm4gbGluZXMubWFwKFxuICAgIGxpbmUgPT4gbGluZS5yZXBsYWNlKGluZGVudCwgXCJcIilcbiAgKS5qb2luKFwiXFxuXCIpO1xufVxuIiwiLypcbiAqIEBtb2R1bGUgZmx1ZW50XG4gKiBAb3ZlcnZpZXdcbiAqXG4gKiBgZmx1ZW50YCBpcyBhIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgUHJvamVjdCBGbHVlbnQsIGEgbG9jYWxpemF0aW9uXG4gKiBmcmFtZXdvcmsgZGVzaWduZWQgdG8gdW5sZWFzaCB0aGUgZXhwcmVzc2l2ZSBwb3dlciBvZiB0aGUgbmF0dXJhbCBsYW5ndWFnZS5cbiAqXG4gKi9cblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBGbHVlbnRCdW5kbGUgfSBmcm9tIFwiLi9idW5kbGUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRmx1ZW50UmVzb3VyY2UgfSBmcm9tIFwiLi9yZXNvdXJjZS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGbHVlbnRFcnJvciB9IGZyb20gXCIuL2Vycm9yLmpzXCI7XG5leHBvcnQgeyBGbHVlbnRUeXBlLCBGbHVlbnROdW1iZXIsIEZsdWVudERhdGVUaW1lIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcblxuZXhwb3J0IHsgZnRsIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgRmx1ZW50QnVuZGxlIH0gZnJvbSBcImZsdWVudFwiO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgdGhhdCBhbGxvdyByaWNoIHRleHQgTVVTVCBiZSBhZGRlZCB0byB0aGlzIGxpc3QuXG4gKiAgIGtleTogdGhlIGxvY2FsaXphdGlvbl9pZCB0aGF0IHNob3VsZCBiZSB1c2VkXG4gKiAgIHZhbHVlOiBhIHByb3BlcnR5IG9yIGFycmF5IG9mIHByb3BlcnRpZXMgb24gdGhlIG1lc3NhZ2UuY29udGVudCBvYmplY3RcbiAqL1xuY29uc3QgUklDSF9URVhUX0NPTkZJRyA9IHtcbiAgdGV4dDogW1widGV4dFwiLCBcInNjZW5lMV90ZXh0XCJdLFxuICBzdWNjZXNzX3RleHQ6IFwic3VjY2Vzc190ZXh0XCIsXG4gIGVycm9yX3RleHQ6IFwiZXJyb3JfdGV4dFwiLFxuICBzY2VuZTJfdGV4dDogXCJzY2VuZTJfdGV4dFwiLFxuICBhbW9faHRtbDogXCJhbW9faHRtbFwiLFxuICBwcml2YWN5X2h0bWw6IFwic2NlbmUyX3ByaXZhY3lfaHRtbFwiLFxuICBkaXNjbGFpbWVyX2h0bWw6IFwic2NlbmUyX2Rpc2NsYWltZXJfaHRtbFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IFJJQ0hfVEVYVF9LRVlTID0gT2JqZWN0LmtleXMoUklDSF9URVhUX0NPTkZJRyk7XG5cbi8qKlxuICogR2VuZXJhdGVzIGFuIGFycmF5IG9mIG1lc3NhZ2VzIHN1aXRhYmxlIGZvciBmbHVlbnQncyBsb2NhbGl6YXRpb24gcHJvdmlkZXJcbiAqIGluY2x1ZGluZyBhbGwgbmVlZGVkIHN0cmluZ3MgZm9yIHJpY2ggdGV4dC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZW50IEEgLmNvbnRlbnQgb2JqZWN0IGZyb20gYW4gQVNSIG1lc3NhZ2UgKGkuZS4gbWVzc2FnZS5jb250ZW50KVxuICogQHJldHVybnMge0ZsdWVudEJ1bmRsZVtdfSBBIGFycmF5IGNvbnRhaW5pbmcgdGhlIGZsdWVudCBtZXNzYWdlIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQnVuZGxlcyhjb250ZW50KSB7XG4gIGNvbnN0IGJ1bmRsZSA9IG5ldyBGbHVlbnRCdW5kbGUoXCJlbi1VU1wiKTtcblxuICBSSUNIX1RFWFRfS0VZUy5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgYXR0cnMgPSBSSUNIX1RFWFRfQ09ORklHW2tleV07XG4gICAgY29uc3QgYXR0cnNUb1RyeSA9IEFycmF5LmlzQXJyYXkoYXR0cnMpID8gWy4uLmF0dHJzXSA6IFthdHRyc107XG4gICAgbGV0IHN0cmluZyA9IFwiXCI7XG4gICAgd2hpbGUgKCFzdHJpbmcgJiYgYXR0cnNUb1RyeS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGF0dHIgPSBhdHRyc1RvVHJ5LnBvcCgpO1xuICAgICAgc3RyaW5nID0gY29udGVudFthdHRyXTtcbiAgICB9XG4gICAgYnVuZGxlLmFkZE1lc3NhZ2VzKGAke2tleX0gPSAke3N0cmluZ31gKTtcbiAgfSk7XG4gIHJldHVybiBbYnVuZGxlXTtcbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbnRoaXMuRGVkdXBlID0gY2xhc3MgRGVkdXBlIHtcbiAgY29uc3RydWN0b3IoY3JlYXRlS2V5KSB7XG4gICAgdGhpcy5jcmVhdGVLZXkgPSBjcmVhdGVLZXkgfHwgdGhpcy5kZWZhdWx0Q3JlYXRlS2V5O1xuICB9XG5cbiAgZGVmYXVsdENyZWF0ZUtleShpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICAvKipcbiAgICogRGVkdXBlIGFueSBudW1iZXIgb2YgZ3JvdXBlZCBlbGVtZW50cyBmYXZvcmluZyB0aG9zZSBmcm9tIGVhcmxpZXIgZ3JvdXBzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBncm91cHMgQ29udGFpbnMgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBhcnJheXMgb2YgZWxlbWVudHMuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gQSBtYXRjaGluZyBhcnJheSBvZiBlYWNoIHByb3ZpZGVkIGdyb3VwIGRlZHVwZWQuXG4gICAqL1xuICBncm91cCguLi5ncm91cHMpIHtcbiAgICBjb25zdCBnbG9iYWxLZXlzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWVzIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgdmFsdWVNYXAgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmNyZWF0ZUtleSh2YWx1ZSk7XG4gICAgICAgIGlmICghZ2xvYmFsS2V5cy5oYXMoa2V5KSAmJiAhdmFsdWVNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICB2YWx1ZU1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlTWFwKTtcbiAgICAgIHZhbHVlTWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0
+
IGdsb2JhbEtleXMuYWRkKGtleSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Lm1hcChtID0
+
IEFycmF5LmZyb20obS52YWx1ZXMoKSkpO1xuICB9XG59O1xuXG5jb25zdCBFWFBPUlRFRF9TWU1CT0xTID0gW1wiRGVkdXBlXCJdO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IGFjdGlvblR5cGVzOiBhdCB9ID0gQ2hyb21lVXRpbHMuaW1wb3J0KFxuICBcInJlc291cmNlOi8vYWN0aXZpdHktc3RyZWFtL2NvbW1vbi9BY3Rpb25zLmpzbVwiXG4pO1xuY29uc3QgeyBEZWR1cGUgfSA9IENocm9tZVV0aWxzLmltcG9ydChcbiAgXCJyZXNvdXJjZTovL2FjdGl2aXR5LXN0cmVhbS9jb21tb24vRGVkdXBlLmpzbVwiXG4pO1xuXG5jb25zdCBUT1BfU0lURVNfREVGQVVMVF9ST1dTID0gMTtcbmNvbnN0IFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVyA9IDg7XG5cbmNvbnN0IGRlZHVwZSA9IG5ldyBEZWR1cGUoc2l0ZSA9PiBzaXRlICYmIHNpdGUudXJsKTtcblxuY29uc3QgSU5JVElBTF9TVEFURSA9IHtcbiAgQXBwOiB7XG4gICAgLy8gSGF2ZSB3ZSByZWNlaXZlZCByZWFsIGRhdGEgZnJvbSB0aGUgYXBwIHlldD9cbiAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gIH0sXG4gIEFTUm91dGVyOiB7IGluaXRpYWxpemVkOiBmYWxzZSB9LFxuICBTbmlwcGV0czogeyBpbml0aWFsaXplZDogZmFsc2UgfSxcbiAgVG9wU2l0ZXM6IHtcbiAgICAvLyBIYXZlIHdlIHJlY2VpdmVkIHJlYWwgZGF0YSBmcm9tIGhpc3RvcnkgeWV0P1xuICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAvLyBUaGUgaGlzdG9yeSAoYW5kIHBvc3NpYmx5IGRlZmF1bHQpIGxpbmtzXG4gICAgcm93czogW10sXG4gICAgLy8gVXNlZCBpbiBjb250ZW50IG9ubHkgdG8gZGlzcGF0Y2ggYWN0aW9uIHRvIFRvcFNpdGVGb3JtLlxuICAgIGVkaXRGb3JtOiBudWxsLFxuICAgIC8vIFVzZWQgaW4gY29udGVudCBvbmx5IHRvIG9wZW4gdGhlIFNlYXJjaFNob3J0Y3V0c0Zvcm0gbW9kYWwuXG4gICAgc2hvd1NlYXJjaFNob3J0Y3V0c0Zvcm06IGZhbHNlLFxuICAgIC8vIFRoZSBsaXN0IG9mIGF2YWlsYWJsZSBzZWFyY2ggc2hvcnRjdXRzLlxuICAgIHNlYXJjaFNob3J0Y3V0czogW10sXG4gIH0sXG4gIFByZWZzOiB7XG4gICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIHZhbHVlczoge30sXG4gIH0sXG4gIERpYWxvZzoge1xuICAgIHZpc2libGU6IGZhbHNlLFxuICAgIGRhdGE6IHt9LFxuICB9LFxuICBTZWN0aW9uczogW10sXG4gIFBvY2tldDoge1xuICAgIGlzVXNlckxvZ2dlZEluOiBudWxsLFxuICAgIHBvY2tldEN0YToge30sXG4gICAgd2FpdGluZ0ZvclNwb2M6IHRydWUsXG4gIH0sXG4gIC8vIFRoaXMgaXMgdGhlIG5ldyBwb2NrZXQgY29uZmlndXJhYmxlIGxheW91dCBzdGF0ZS5cbiAgRGlzY292ZXJ5U3RyZWFtOiB7XG4gICAgLy8gVGhpcyBpcyBhIEpTT04tcGFyc2VkIGNvcHkgb2YgdGhlIGRpc2NvdmVyeXN0cmVhbS5jb25maWcgcHJlZiB2YWx1ZS5cbiAgICBjb25maWc6IHsgZW5hYmxlZDogZmFsc2UsIGxheW91dF9lbmRwb2ludDogXCJcIiB9LFxuICAgIGxheW91dDogW10sXG4gICAgbGFzdFVwZGF0ZWQ6IG51bGwsXG4gICAgaXNQcml2YWN5SW5mb01vZGFsVmlzaWJsZTogZmFsc2UsXG4gICAgZmVlZHM6IHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgLy8gXCJodHRwczovL2Zvby5jb20vZmVlZDFcIjoge2xhc3RVcGRhdGVkOiAxMjMsIGRhdGE6IFtdfVxuICAgICAgfSxcbiAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzcG9jczoge1xuICAgICAgc3BvY3NfZW5kcG9pbnQ6IFwiXCIsXG4gICAgICBzcG9jc19wZXJfZG9tYWluOiAxLFxuICAgICAgbGFzdFVwZGF0ZWQ6IG51bGwsXG4gICAgICBkYXRhOiB7fSwgLy8ge3Nwb2NzOiBbXX1cbiAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICBmcmVxdWVuY3lfY2FwczogW10sXG4gICAgICBibG9ja2VkOiBbXSxcbiAgICAgIHBsYWNlbWVudHM6IFtdLFxuICAgIH0sXG4gIH0sXG4gIFNlYXJjaDoge1xuICAgIC8vIFdoZW4gc2VhcmNoIGhhbmQtb2ZmIGlzIGVuYWJsZWQsIHdlIHJlbmRlciBhIGJpZyBidXR0b24gdGhhdCBpcyBzdHlsZWQgdG9cbiAgICAvLyBsb29rIGxpa2UgYSBzZWFyY2ggdGV4dGJveC4gSWYgdGhlIGJ1dHRvbiBpcyBjbGlja2VkLCB3ZSBzdHlsZVxuICAgIC8vIHRoZSBidXR0b24gYXMgaWYgaXQgd2FzIGEgZm9jdXNlZCBzZWFyY2ggYm94IGFuZCBzaG93IGEgZmFrZSBjdXJzb3IgYnV0XG4gICAgLy8gcmVhbGx5IGZvY3VzIHRoZSBhd2Vzb21lYmFyIHdpdGhvdXQgdGhlIGZvY3VzIHN0eWxlcyAoXCJoaWRkZW4gZm9jdXNcIikuXG4gICAgZmFrZUZvY3VzOiBmYWxzZSxcbiAgICAvLyBIaWRlIHRoZSBzZWFyY2ggYm94IGFmdGVyIGhhbmRpbmcgb2ZmIHRvIEF3ZXNvbWVCYXIgYW5kIHVzZXIgc3RhcnRzIHR5cGluZy5cbiAgICBoaWRlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIEFwcChwcmV2U3RhdGUgPSBJTklUSUFMX1NUQVRFLkFwcCwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LklOSVQ6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCBhY3Rpb24uZGF0YSB8fCB7fSwge1xuICAgICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIEFTUm91dGVyKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuQVNSb3V0ZXIsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5BU19ST1VURVJfSU5JVElBTElaRUQ6XG4gICAgICByZXR1cm4geyAuLi5hY3Rpb24uZGF0YSwgaW5pdGlhbGl6ZWQ6IHRydWUgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIGluc2VydFBpbm5lZCAtIEluc2VydHMgcGlubmVkIGxpbmtzIGluIHRoZWlyIHNwZWNpZmllZCBzbG90c1xuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGEgbGlzdCBvZiBsaW5rc1xuICogQHBhcmFtIHthcnJheX0gYSBsaXN0IG9mIHBpbm5lZCBsaW5rc1xuICogQHJldHVybiB7YXJyYXl9IHJlc3VsdGluZyBsaXN0IG9mIGxpbmtzIHdpdGggcGlubmVkIGxpbmtzIGluc2VydGVkXG4gKi9cbmZ1bmN0aW9uIGluc2VydFBpbm5lZChsaW5rcywgcGlubmVkKSB7XG4gIC8vIFJlbW92ZSBhbnkgcGlubmVkIGxpbmtzXG4gIGNvbnN0IHBpbm5lZFVybHMgPSBwaW5uZWQubWFwKGxpbmsgPT4gbGluayAmJiBsaW5rLnVybCk7XG4gIGxldCBuZXdMaW5rcyA9IGxpbmtzLmZpbHRlcihsaW5rID0
+
XG4gICAgbGluayA
/
ICFwaW5uZWRVcmxzLmluY2x1ZGVzKGxpbmsudXJsKSA6IGZhbHNlXG4gICk7XG4gIG5ld0xpbmtzID0gbmV3TGlua3MubWFwKGxpbmsgPT4ge1xuICAgIGlmIChsaW5rICYmIGxpbmsuaXNQaW5uZWQpIHtcbiAgICAgIGRlbGV0ZSBsaW5rLmlzUGlubmVkO1xuICAgICAgZGVsZXRlIGxpbmsucGluSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBsaW5rO1xuICB9KTtcblxuICAvLyBUaGVuIGluc2VydCB0aGVtIGluIHRoZWlyIHNwZWNpZmllZCBsb2NhdGlvblxuICBwaW5uZWQuZm9yRWFjaCgodmFsLCBpbmRleCkgPT4ge1xuICAgIGlmICghdmFsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBsaW5rID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsLCB7IGlzUGlubmVkOiB0cnVlLCBwaW5JbmRleDogaW5kZXggfSk7XG4gICAgaWYgKGluZGV4ID4gbmV3TGlua3MubGVuZ3RoKSB7XG4gICAgICBuZXdMaW5rc1tpbmRleF0gPSBsaW5rO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdMaW5rcy5zcGxpY2UoaW5kZXgsIDAsIGxpbmspO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0xpbmtzO1xufVxuXG5mdW5jdGlvbiBUb3BTaXRlcyhwcmV2U3RhdGUgPSBJTklUSUFMX1NUQVRFLlRvcFNpdGVzLCBhY3Rpb24pIHtcbiAgbGV0IGhhc01hdGNoO1xuICBsZXQgbmV3Um93cztcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgYXQuVE9QX1NJVEVTX1VQREFURUQ6XG4gICAgICBpZiAoIWFjdGlvbi5kYXRhIHx8ICFhY3Rpb24uZGF0YS5saW5rcykge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHt9LFxuICAgICAgICBwcmV2U3RhdGUsXG4gICAgICAgIHsgaW5pdGlhbGl6ZWQ6IHRydWUsIHJvd3M6IGFjdGlvbi5kYXRhLmxpbmtzIH0sXG4gICAgICAgIGFjdGlvbi5kYXRhLnByZWYgPyB7IHByZWY6IGFjdGlvbi5kYXRhLnByZWYgfSA6IHt9XG4gICAgICApO1xuICAgIGNhc2UgYXQuVE9QX1NJVEVTX1BSRUZTX1VQREFURUQ6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHByZWY6IGFjdGlvbi5kYXRhLnByZWYgfSk7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfRURJVDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgZWRpdEZvcm06IHtcbiAgICAgICAgICBpbmRleDogYWN0aW9uLmRhdGEuaW5kZXgsXG4gICAgICAgICAgcHJldmlld1Jlc3BvbnNlOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfQ0FOQ0VMX0VESVQ6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IGVkaXRGb3JtOiBudWxsIH0pO1xuICAgIGNhc2UgYXQuVE9QX1NJVEVTX09QRU5fU0VBUkNIX1NIT1JUQ1VUU19NT0RBTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgc2hvd1NlYXJjaFNob3J0Y3V0c0Zvcm06IHRydWUgfSk7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfQ0xPU0VfU0VBUkNIX1NIT1JUQ1VUU19NT0RBTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgc2hvd1NlYXJjaFNob3J0Y3V0c0Zvcm06IGZhbHNlIH0pO1xuICAgIGNhc2UgYXQuUFJFVklFV19SRVNQT05TRTpcbiAgICAgIGlmIChcbiAgICAgICAgIXByZXZTdGF0ZS5lZGl0Rm9ybSB8fFxuICAgICAgICBhY3Rpb24uZGF0YS51cmwgIT09IHByZXZTdGF0ZS5lZGl0Rm9ybS5wcmV2aWV3VXJsXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgZWRpdEZvcm06IHtcbiAgICAgICAgICBpbmRleDogcHJldlN0YXRlLmVkaXRGb3JtLmluZGV4LFxuICAgICAgICAgIHByZXZpZXdSZXNwb25zZTogYWN0aW9uLmRhdGEucHJldmlldyxcbiAgICAgICAgICBwcmV2aWV3VXJsOiBhY3Rpb24uZGF0YS51cmwsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlBSRVZJRVdfUkVRVUVTVDpcbiAgICAgIGlmICghcHJldlN0YXRlLmVkaXRGb3JtKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7XG4gICAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgICAgaW5kZXg6IHByZXZTdGF0ZS5lZGl0Rm9ybS5pbmRleCxcbiAgICAgICAgICBwcmV2aWV3UmVzcG9uc2U6IG51bGwsXG4gICAgICAgICAgcHJldmlld1VybDogYWN0aW9uLmRhdGEudXJsLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgY2FzZSBhdC5QUkVWSUVXX1JFUVVFU1RfQ0FOQ0VMOlxuICAgICAgaWYgKCFwcmV2U3RhdGUuZWRpdEZvcm0pIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgZWRpdEZvcm06IHtcbiAgICAgICAgICBpbmRleDogcHJldlN0YXRlLmVkaXRGb3JtLmluZGV4LFxuICAgICAgICAgIHByZXZpZXdSZXNwb25zZTogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIGNhc2UgYXQuU0NSRUVOU0hPVF9VUERBVEVEOlxuICAgICAgbmV3Um93cyA9IHByZXZTdGF0ZS5yb3dzLm1hcChyb3cgPT4ge1xuICAgICAgICBpZiAocm93ICYmIHJvdy51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcm93LCB7IHNjcmVlbnNob3Q6IGFjdGlvbi5kYXRhLnNjcmVlbnNob3QgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhhc01hdGNoXG4gICAgICAgID8gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHJvd3M6IG5ld1Jvd3MgfSlcbiAgICAgICAgOiBwcmV2U3RhdGU7XG4gICAgY2FzZSBhdC5QTEFDRVNfQk9PS01BUktfQURERUQ6XG4gICAgICBpZiAoIWFjdGlvbi5kYXRhKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gICAgICBuZXdSb3dzID0gcHJldlN0YXRlLnJvd3MubWFwKHNpdGUgPT4ge1xuICAgICAgICBpZiAoc2l0ZSAmJiBzaXRlLnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgY29uc3QgeyBib29rbWFya0d1aWQsIGJvb2ttYXJrVGl0bGUsIGRhdGVBZGRlZCB9ID0gYWN0aW9uLmRhdGE7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNpdGUsIHtcbiAgICAgICAgICAgIGJvb2ttYXJrR3VpZCxcbiAgICAgICAgICAgIGJvb2ttYXJrVGl0bGUsXG4gICAgICAgICAgICBib29rbWFya0RhdGVDcmVhdGVkOiBkYXRlQWRkZWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpdGU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgcm93czogbmV3Um93cyB9KTtcbiAgICBjYXNlIGF0LlBMQUNFU19CT09LTUFSS19SRU1PVkVEOlxuICAgICAgaWYgKCFhY3Rpb24uZGF0YSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgbmV3Um93cyA9IHByZXZTdGF0ZS5yb3dzLm1hcChzaXRlID0
+
IHtcbiAgICAgICAgaWYgKHNpdGUgJiYgc2l0ZS51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgIGNvbnN0IG5ld1NpdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzaXRlKTtcbiAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya0d1aWQ7XG4gICAgICAgICAgZGVsZXRlIG5ld1NpdGUuYm9va21hcmtUaXRsZTtcbiAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya0RhdGVDcmVhdGVkO1xuICAgICAgICAgIHJldHVybiBuZXdTaXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXRlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHJvd3M6IG5ld1Jvd3MgfSk7XG4gICAgY2FzZSBhdC5QTEFDRVNfTElOS19ERUxFVEVEOlxuICAgICAgaWYgKCFhY3Rpb24uZGF0YSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgbmV3Um93cyA9IHByZXZTdGF0ZS5yb3dzLmZpbHRlcihzaXRlID0
+
IGFjdGlvbi5kYXRhLnVybCAhPT0gc2l0ZS51cmwpO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyByb3dzOiBuZXdSb3dzIH0pO1xuICAgIGNhc2UgYXQuVVBEQVRFX1NFQVJDSF9TSE9SVENVVFM6XG4gICAgICByZXR1cm4geyAuLi5wcmV2U3RhdGUsIHNlYXJjaFNob3J0Y3V0czogYWN0aW9uLmRhdGEuc2VhcmNoU2hvcnRjdXRzIH07XG4gICAgY2FzZSBhdC5TTklQUEVUU19QUkVWSUVXX01PREU6XG4gICAgICByZXR1cm4geyAuLi5wcmV2U3RhdGUsIHJvd3M6IFtdIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gRGlhbG9nKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuRGlhbG9nLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgYXQuRElBTE9HX09QRU46XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHZpc2libGU6IHRydWUsIGRhdGE6IGFjdGlvbi5kYXRhIH0pO1xuICAgIGNhc2UgYXQuRElBTE9HX0NBTkNFTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgdmlzaWJsZTogZmFsc2UgfSk7XG4gICAgY2FzZSBhdC5ERUxFVEVfSElTVE9SWV9VUkw6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgSU5JVElBTF9TVEFURS5EaWFsb2cpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIFByZWZzKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuUHJlZnMsIGFjdGlvbikge1xuICBsZXQgbmV3VmFsdWVzO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5QUkVGU19JTklUSUFMX1ZBTFVFUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICAgIHZhbHVlczogYWN0aW9uLmRhdGEsXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlBSRUZfQ0hBTkdFRDpcbiAgICAgIG5ld1ZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZS52YWx1ZXMpO1xuICAgICAgbmV3VmFsdWVzW2FjdGlvbi5kYXRhLm5hbWVdID0gYWN0aW9uLmRhdGEudmFsdWU7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHZhbHVlczogbmV3VmFsdWVzIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIFNlY3Rpb25zKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuU2VjdGlvbnMsIGFjdGlvbikge1xuICBsZXQgaGFzTWF0Y2g7XG4gIGxldCBuZXdTdGF0ZTtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgYXQuU0VDVElPTl9ERVJFR0lTVEVSOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5maWx0ZXIoc2VjdGlvbiA9PiBzZWN0aW9uLmlkICE9PSBhY3Rpb24uZGF0YSk7XG4gICAgY2FzZSBhdC5TRUNUSU9OX1JFR0lTVEVSOlxuICAgICAgLy8gSWYgc2VjdGlvbiBleGlzdHMgaW4gcHJldlN0YXRlLCB1cGRhdGUgaXRcbiAgICAgIG5ld1N0YXRlID0gcHJldlN0YXRlLm1hcChzZWN0aW9uID0
+
IHtcbiAgICAgICAgaWYgKHNlY3Rpb24gJiYgc2VjdGlvbi5pZCA9PT0gYWN0aW9uLmRhdGEuaWQpIHtcbiAgICAgICAgICBoYXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNlY3Rpb24sIGFjdGlvbi5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgIH0pO1xuICAgICAgLy8gT3RoZXJ3aXNlLCBhcHBlbmQgaXRcbiAgICAgIGlmICghaGFzTWF0Y2gpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbGl6ZWQgPSAhIShhY3Rpb24uZGF0YS5yb3dzICYmICEhYWN0aW9uLmRhdGEucm93cy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7IHRpdGxlOiBcIlwiLCByb3dzOiBbXSwgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICBhY3Rpb24uZGF0YSxcbiAgICAgICAgICB7IGluaXRpYWxpemVkIH1cbiAgICAgICAgKTtcbiAgICAgICAgbmV3U3RhdGUucHVzaChzZWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICBjYXNlIGF0LlNFQ1RJT05fVVBEQVRFOlxuICAgICAgbmV3U3RhdGUgPSBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT4ge1xuICAgICAgICBpZiAoc2VjdGlvbiAmJiBzZWN0aW9uLmlkID09PSBhY3Rpb24uZGF0YS5pZCkge1xuICAgICAgICAgIC8vIElmIHRoZSBhY3Rpb24gaXMgdXBkYXRpbmcgcm93cywgd2Ugc2hvdWxkIGNvbnNpZGVyIGluaXRpYWxpemVkIHRvIGJlIHRydWUuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBpZiBpbml0aWFsaXplZCBpcyBkZWZpbmVkIGluIHRoZSBhY3Rpb24uZGF0YVxuICAgICAgICAgIGNvbnN0IGluaXRpYWxpemVkID0gYWN0aW9uLmRhdGEucm93cyA
/
IHsgaW5pdGlhbGl6ZWQ6IHRydWUgfSA6IHt9O1xuXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHBpbm5lZCBjYXJkcyBzdGF5IGF0IHRoZWlyIGN1cnJlbnQgcG9zaXRpb24gd2hlbiByb3dzIGFyZSB1cGRhdGVkLlxuICAgICAgICAgIC8vIERpc2FibGluZyBhIHNlY3Rpb24gKFNFQ1RJT05fVVBEQVRFIHdpdGggZW1wdHkgcm93cykgZG9lcyBub3QgcmV0YWluIHBpbm5lZCBjYXJkcy5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBhY3Rpb24uZGF0YS5yb3dzICYmXG4gICAgICAgICAgICAhIWFjdGlvbi5kYXRhLnJvd3MubGVuZ3RoICYmXG4gICAgICAgICAgICBzZWN0aW9uLnJvd3MuZmluZChjYXJkID0
+
IGNhcmQucGlubmVkKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20oYWN0aW9uLmRhdGEucm93cyk7XG4gICAgICAgICAgICBzZWN0aW9uLnJvd3MuZm9yRWFjaCgoY2FyZCwgaW5kZXgpID0
+
IHtcbiAgICAgICAgICAgICAgaWYgKGNhcmQucGlubmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaXQgaWYgaXQncyBub3QgYWxyZWFkeSB0aGVyZS5cbiAgICAgICAgICAgICAgICBpZiAocm93c1tpbmRleF0uZ3VpZCAhPT0gY2FyZC5ndWlkKSB7XG4gICAgICAgICAgICAgICAgICByb3dzLnNwbGljZShpbmRleCwgMCwgY2FyZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgc2VjdGlvbixcbiAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQsXG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbi5kYXRhLCB7IHJvd3MgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNlY3Rpb24sIGluaXRpYWxpemVkLCBhY3Rpb24uZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFhY3Rpb24uZGF0YS5kZWR1cGVDb25maWd1cmF0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbi5kYXRhLmRlZHVwZUNvbmZpZ3VyYXRpb25zLmZvckVhY2goZGVkdXBlQ29uZiA9PiB7XG4gICAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUubWFwKHNlY3Rpb24gPT4ge1xuICAgICAgICAgIGlmIChzZWN0aW9uLmlkID09PSBkZWR1cGVDb25mLmlkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWR1cGVkUm93cyA9IGRlZHVwZUNvbmYuZGVkdXBlRnJvbS5yZWR1Y2UoXG4gICAgICAgICAgICAgIChyb3dzLCBkZWR1cGVTZWN0aW9uSWQpID0
+
IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWR1cGVTZWN0aW9uID0gbmV3U3RhdGUuZmluZChcbiAgICAgICAgICAgICAgICAgIHMgPT4gcy5pZCA9PT0gZGVkdXBlU2VjdGlvbklkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBuZXdSb3dzXSA9IGRlZHVwZS5ncm91cChkZWR1cGVTZWN0aW9uLnJvd3MsIHJvd3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdSb3dzO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzZWN0aW9uLnJvd3NcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7IHJvd3M6IGRlZHVwZWRSb3dzIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgY2FzZSBhdC5TRUNUSU9OX1VQREFURV9DQVJEOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PiB7XG4gICAgICAgIGlmIChzZWN0aW9uICYmIHNlY3Rpb24uaWQgPT09IGFjdGlvbi5kYXRhLmlkICYmIHNlY3Rpb24ucm93cykge1xuICAgICAgICAgIGNvbnN0IG5ld1Jvd3MgPSBzZWN0aW9uLnJvd3MubWFwKGNhcmQgPT4ge1xuICAgICAgICAgICAgaWYgKGNhcmQudXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNhcmQsIGFjdGlvbi5kYXRhLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhcmQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNlY3Rpb24sIHsgcm93czogbmV3Um93cyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgIH0pO1xuICAgIGNhc2UgYXQuUExBQ0VTX0JPT0tNQVJLX0FEREVEOlxuICAgICAgaWYgKCFhY3Rpb24uZGF0YSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7XG4gICAgICAgICAgcm93czogc2VjdGlvbi5yb3dzLm1hcChpdGVtID0
+
IHtcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGl0ZW0gd2l0aGluIHRoZSByb3dzIHRoYXQgaXMgYXR0ZW1wdGVkIHRvIGJlIGJvb2ttYXJrZWRcbiAgICAgICAgICAgIGlmIChpdGVtLnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgYm9va21hcmtHdWlkLCBib29rbWFya1RpdGxlLCBkYXRlQWRkZWQgfSA9IGFjdGlvbi5kYXRhO1xuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgICAgIGJvb2ttYXJrR3VpZCxcbiAgICAgICAgICAgICAgICBib29rbWFya1RpdGxlLFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrRGF0ZUNyZWF0ZWQ6IGRhdGVBZGRlZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2ttYXJrXCIsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIGNhc2UgYXQuUExBQ0VTX1NBVkVEX1RPX1BPQ0tFVDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgICAgIG9wZW5fdXJsOiBhY3Rpb24uZGF0YS5vcGVuX3VybCxcbiAgICAgICAgICAgICAgICBwb2NrZXRfaWQ6IGFjdGlvbi5kYXRhLnBvY2tldF9pZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uLmRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwb2NrZXRcIixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5QTEFDRVNfQk9PS01BUktfUkVNT1ZFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBib29rbWFyayB3aXRoaW4gdGhlIHJvd3MgdGhhdCBpcyBhdHRlbXB0ZWQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKGl0ZW0udXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3U2l0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya0d1aWQ7XG4gICAgICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrVGl0bGU7XG4gICAgICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrRGF0ZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgIGlmICghbmV3U2l0ZS50eXBlIHx8IG5ld1NpdGUudHlwZSA9PT0gXCJib29rbWFya1wiKSB7XG4gICAgICAgICAgICAgICAgbmV3U2l0ZS50eXBlID0gXCJoaXN0b3J5XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG5ld1NpdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5QTEFDRVNfTElOS19ERUxFVEVEOlxuICAgIGNhc2UgYXQuUExBQ0VTX0xJTktfQkxPQ0tFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5maWx0ZXIoc2l0ZSA9PiBzaXRlLnVybCAhPT0gYWN0aW9uLmRhdGEudXJsKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5ERUxFVEVfRlJPTV9QT0NLRVQ6XG4gICAgY2FzZSBhdC5BUkNISVZFX0ZST01fUE9DS0VUOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7XG4gICAgICAgICAgcm93czogc2VjdGlvbi5yb3dzLmZpbHRlcihcbiAgICAgICAgICAgIHNpdGUgPT4gc2l0ZS5wb2NrZXRfaWQgIT09IGFjdGlvbi5kYXRhLnBvY2tldF9pZFxuICAgICAgICAgICksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIGNhc2UgYXQuU05JUFBFVFNfUFJFVklFV19NT0RFOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PiAoeyAuLi5zZWN0aW9uLCByb3dzOiBbXSB9KSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gU25pcHBldHMocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5TbmlwcGV0cywgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LlNOSVBQRVRTX0RBVEE6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IGluaXRpYWxpemVkOiB0cnVlIH0sIGFjdGlvbi5kYXRhKTtcbiAgICBjYXNlIGF0LlNOSVBQRVRfQkxPQ0tFRDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgYmxvY2tMaXN0OiBwcmV2U3RhdGUuYmxvY2tMaXN0LmNvbmNhdChhY3Rpb24uZGF0YSksXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlNOSVBQRVRTX0JMT0NLTElTVF9DTEVBUkVEOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyBibG9ja0xpc3Q6IFtdIH0pO1xuICAgIGNhc2UgYXQuU05JUFBFVFNfUkVTRVQ6XG4gICAgICByZXR1cm4gSU5JVElBTF9TVEFURS5TbmlwcGV0cztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBQb2NrZXQocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5Qb2NrZXQsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5QT0NLRVRfV0FJVElOR19GT1JfU1BPQzpcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgd2FpdGluZ0ZvclNwb2M6IGFjdGlvbi5kYXRhIH07XG4gICAgY2FzZSBhdC5QT0NLRVRfTE9HR0VEX0lOOlxuICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBpc1VzZXJMb2dnZWRJbjogISFhY3Rpb24uZGF0YSB9O1xuICAgIGNhc2UgYXQuUE9DS0VUX0NUQTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgcG9ja2V0Q3RhOiB7XG4gICAgICAgICAgY3RhQnV0dG9uOiBhY3Rpb24uZGF0YS5jdGFfYnV0dG9uLFxuICAgICAgICAgIGN0YVRleHQ6IGFjdGlvbi5kYXRhLmN0YV90ZXh0LFxuICAgICAgICAgIGN0YVVybDogYWN0aW9uLmRhdGEuY3RhX3VybCxcbiAgICAgICAgICB1c2VDdGE6IGFjdGlvbi5kYXRhLnVzZV9jdGEsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIERpc2NvdmVyeVN0cmVhbShwcmV2U3RhdGUgPSBJTklUSUFMX1NUQVRFLkRpc2NvdmVyeVN0cmVhbSwgYWN0aW9uKSB7XG4gIC8vIFJldHVybiBpZiBhY3Rpb24gZGF0YSBpcyBlbXB0eSwgb3Igc3BvY3Mgb3IgZmVlZHMgZGF0YSBpcyBub3QgbG9hZGVkXG4gIGNvbnN0IGlzTm90UmVhZHkgPSAoKSA9PlxuICAgICFhY3Rpb24uZGF0YSB8fCAhcHJldlN0YXRlLnNwb2NzLmxvYWRlZCB8fCAhcHJldlN0YXRlLmZlZWRzLmxvYWRlZDtcblxuICBjb25zdCBoYW5kbGVQbGFjZW1lbnRzID0gaGFuZGxlU2l0ZXMgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgcGxhY2VtZW50cyB9ID0gcHJldlN0YXRlLnNwb2NzO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgY29uc3QgZm9yUGxhY2VtZW50ID0gcGxhY2VtZW50ID0
+
IHtcbiAgICAgIGNvbnN0IHBsYWNlbWVudFNwb2NzID0gZGF0YVtwbGFjZW1lbnQubmFtZV07XG5cbiAgICAgIGlmICghcGxhY2VtZW50U3BvY3MgfHwgIXBsYWNlbWVudFNwb2NzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFtwbGFjZW1lbnQubmFtZV0gPSBoYW5kbGVTaXRlcyhwbGFjZW1lbnRTcG9jcyk7XG4gICAgfTtcblxuICAgIGlmICghcGxhY2VtZW50cyB8fCAhcGxhY2VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFt7IG5hbWU6IFwic3BvY3NcIiB9XS5mb3JFYWNoKGZvclBsYWNlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsYWNlbWVudHMuZm9yRWFjaChmb3JQbGFjZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IG5leHRTdGF0ZSA9IGhhbmRsZVNpdGVzID0
+
ICh7XG4gICAgLi4ucHJldlN0YXRlLFxuICAgIHNwb2NzOiB7XG4gICAgICAuLi5wcmV2U3RhdGUuc3BvY3MsXG4gICAgICBkYXRhOiBoYW5kbGVQbGFjZW1lbnRzKGhhbmRsZVNpdGVzKSxcbiAgICB9LFxuICAgIGZlZWRzOiB7XG4gICAgICAuLi5wcmV2U3RhdGUuZmVlZHMsXG4gICAgICBkYXRhOiBPYmplY3Qua2V5cyhwcmV2U3RhdGUuZmVlZHMuZGF0YSkucmVkdWNlKFxuICAgICAgICAoYWNjdW11bGF0b3IsIGZlZWRfdXJsKSA9PiB7XG4gICAgICAgICAgYWNjdW11bGF0b3JbZmVlZF91cmxdID0ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAuLi5wcmV2U3RhdGUuZmVlZHMuZGF0YVtmZWVkX3VybF0uZGF0YSxcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBoYW5kbGVTaXRlcyhcbiAgICAgICAgICAgICAgICBwcmV2U3RhdGUuZmVlZHMuZGF0YVtmZWVkX3VybF0uZGF0YS5yZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHt9XG4gICAgICApLFxuICAgIH0sXG4gIH0pO1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX0NIQU5HRTpcbiAgICAvLyBGYWxsIHRocm91Z2ggdG8gYSBzZXBhcmF0ZSBhY3Rpb24gaXMgc28gaXQgZG9lc24ndCB0cmlnZ2VyIGEgbGlzdGVuZXIgdXBkYXRlIG9uIGluaXRcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVFVQOlxuICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBjb25maWc6IGFjdGlvbi5kYXRhIHx8IHt9IH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX0xBWU9VVF9VUERBVEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIGxhc3RVcGRhdGVkOiBhY3Rpb24uZGF0YS5sYXN0VXBkYXRlZCB8fCBudWxsLFxuICAgICAgICBsYXlvdXQ6IGFjdGlvbi5kYXRhLmxheW91dCB8fCBbXSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ISURFX1BSSVZBQ1lfSU5GTzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgaXNQcml2YWN5SW5mb01vZGFsVmlzaWJsZTogZmFsc2UsXG4gICAgICB9O1xuICAgIGNhc2UgYXQuU0hPV19QUklWQUNZX0lORk86XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIGlzUHJpdmFjeUluZm9Nb2RhbFZpc2libGU6IHRydWUsXG4gICAgICB9O1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9MQVlPVVRfUkVTRVQ6XG4gICAgICByZXR1cm4geyAuLi5JTklUSUFMX1NUQVRFLkRpc2NvdmVyeVN0cmVhbSwgY29uZmlnOiBwcmV2U3RhdGUuY29uZmlnIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX0ZFRURTX1VQREFURTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgZmVlZHM6IHtcbiAgICAgICAgICAuLi5wcmV2U3RhdGUuZmVlZHMsXG4gICAgICAgICAgbG9hZGVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fRkVFRF9VUERBVEU6XG4gICAgICBjb25zdCBuZXdEYXRhID0ge307XG4gICAgICBuZXdEYXRhW2FjdGlvbi5kYXRhLnVybF0gPSBhY3Rpb24uZGF0YS5mZWVkO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBmZWVkczoge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZS5mZWVkcyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAuLi5wcmV2U3RhdGUuZmVlZHMuZGF0YSxcbiAgICAgICAgICAgIC4uLm5ld0RhdGEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0NBUFM6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIHNwb2NzOiB7XG4gICAgICAgICAgLi4ucHJldlN0YXRlLnNwb2NzLFxuICAgICAgICAgIGZyZXF1ZW5jeV9jYXBzOiBbLi4ucHJldlN0YXRlLnNwb2NzLmZyZXF1ZW5jeV9jYXBzLCAuLi5hY3Rpb24uZGF0YV0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9TUE9DU19FTkRQT0lOVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgc3BvY3M6IHtcbiAgICAgICAgICAuLi5JTklUSUFMX1NUQVRFLkRpc2NvdmVyeVN0cmVhbS5zcG9jcyxcbiAgICAgICAgICBzcG9jc19lbmRwb2ludDpcbiAgICAgICAgICAgIGFjdGlvbi5kYXRhLnVybCB8fFxuICAgICAgICAgICAgSU5JVElBTF9TVEFURS5EaXNjb3ZlcnlTdHJlYW0uc3BvY3Muc3BvY3NfZW5kcG9pbnQsXG4gICAgICAgICAgc3BvY3NfcGVyX2RvbWFpbjpcbiAgICAgICAgICAgIGFjdGlvbi5kYXRhLnNwb2NzX3Blcl9kb21haW4gfHxcbiAgICAgICAgICAgIElOSVRJQUxfU1RBVEUuRGlzY292ZXJ5U3RyZWFtLnNwb2NzLnNwb2NzX3Blcl9kb21haW4sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9TUE9DU19QTEFDRU1FTlRTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBzcG9jczoge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZS5zcG9jcyxcbiAgICAgICAgICBwbGFjZW1lbnRzOlxuICAgICAgICAgICAgYWN0aW9uLmRhdGEucGxhY2VtZW50cyB8fFxuICAgICAgICAgICAgSU5JVElBTF9TVEFURS5EaXNjb3ZlcnlTdHJlYW0uc3BvY3MucGxhY2VtZW50cyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX1NQT0NTX1VQREFURTpcbiAgICAgIGlmIChhY3Rpb24uZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgICBzcG9jczoge1xuICAgICAgICAgICAgLi4ucHJldlN0YXRlLnNwb2NzLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IGFjdGlvbi5kYXRhLmxhc3RVcGRhdGVkLFxuICAgICAgICAgICAgZGF0YTogYWN0aW9uLmRhdGEuc3BvY3MsXG4gICAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX1NQT0NfQkxPQ0tFRDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgc3BvY3M6IHtcbiAgICAgICAgICAuLi5wcmV2U3RhdGUuc3BvY3MsXG4gICAgICAgICAgYmxvY2tlZDogWy4uLnByZXZTdGF0ZS5zcG9jcy5ibG9ja2VkLCBhY3Rpb24uZGF0YS51cmxdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fTElOS19CTE9DS0VEOlxuICAgICAgcmV0dXJuIGlzTm90UmVhZHkoKVxuICAgICAgICA
/
IHByZXZTdGF0ZVxuICAgICAgICA6IG5leHRTdGF0ZShpdGVtcyA9PlxuICAgICAgICAgICAgaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS51cmwgIT09IGFjdGlvbi5kYXRhLnVybClcbiAgICAgICAgICApO1xuXG4gICAgY2FzZSBhdC5QTEFDRVNfU0FWRURfVE9fUE9DS0VUOlxuICAgICAgY29uc3QgYWRkUG9ja2V0SW5mbyA9IGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbS51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7XG4gICAgICAgICAgICBvcGVuX3VybDogYWN0aW9uLmRhdGEub3Blbl91cmwsXG4gICAgICAgICAgICBwb2NrZXRfaWQ6IGFjdGlvbi5kYXRhLnBvY2tldF9pZCxcbiAgICAgICAgICAgIGNvbnRleHRfdHlwZTogXCJwb2NrZXRcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaXNOb3RSZWFkeSgpXG4gICAgICAgID8gcHJldlN0YXRlXG4gICAgICAgIDogbmV4dFN0YXRlKGl0ZW1zID0
+
IGl0ZW1zLm1hcChhZGRQb2NrZXRJbmZvKSk7XG5cbiAgICBjYXNlIGF0LkRFTEVURV9GUk9NX1BPQ0tFVDpcbiAgICBjYXNlIGF0LkFSQ0hJVkVfRlJPTV9QT0NLRVQ6XG4gICAgICByZXR1cm4gaXNOb3RSZWFkeSgpXG4gICAgICAgID8gcHJldlN0YXRlXG4gICAgICAgIDogbmV4dFN0YXRlKGl0ZW1zID0
+
XG4gICAgICAgICAgICBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnBvY2tldF9pZCAhPT0gYWN0aW9uLmRhdGEucG9ja2V0X2lkKVxuICAgICAgICAgICk7XG5cbiAgICBjYXNlIGF0LlBMQUNFU19CT09LTUFSS19BRERFRDpcbiAgICAgIGNvbnN0IHVwZGF0ZUJvb2ttYXJrSW5mbyA9IGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbS51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgIGNvbnN0IHsgYm9va21hcmtHdWlkLCBib29rbWFya1RpdGxlLCBkYXRlQWRkZWQgfSA9IGFjdGlvbi5kYXRhO1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7XG4gICAgICAgICAgICBib29rbWFya0d1aWQsXG4gICAgICAgICAgICBib29rbWFya1RpdGxlLFxuICAgICAgICAgICAgYm9va21hcmtEYXRlQ3JlYXRlZDogZGF0ZUFkZGVkLFxuICAgICAgICAgICAgY29udGV4dF90eXBlOiBcImJvb2ttYXJrXCIsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGlzTm90UmVhZHkoKVxuICAgICAgICA
/
IHByZXZTdGF0ZVxuICAgICAgICA6IG5leHRTdGF0ZShpdGVtcyA9PiBpdGVtcy5tYXAodXBkYXRlQm9va21hcmtJbmZvKSk7XG5cbiAgICBjYXNlIGF0LlBMQUNFU19CT09LTUFSS19SRU1PVkVEOlxuICAgICAgY29uc3QgcmVtb3ZlQm9va21hcmtJbmZvID0gaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgY29uc3QgbmV3U2l0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrR3VpZDtcbiAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya1RpdGxlO1xuICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrRGF0ZUNyZWF0ZWQ7XG4gICAgICAgICAgaWYgKCFuZXdTaXRlLmNvbnRleHRfdHlwZSB8fCBuZXdTaXRlLmNvbnRleHRfdHlwZSA9PT0gXCJib29rbWFya1wiKSB7XG4gICAgICAgICAgICBuZXdTaXRlLmNvbnRleHRfdHlwZSA9IFwicmVtb3ZlZEJvb2ttYXJrXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXdTaXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBpc05vdFJlYWR5KClcbiAgICAgICAgPyBwcmV2U3RhdGVcbiAgICAgICAgOiBuZXh0U3RhdGUoaXRlbXMgPT4gaXRlbXMubWFwKHJlbW92ZUJvb2ttYXJrSW5mbykpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gU2VhcmNoKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuU2VhcmNoLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgYXQuSElERV9TRUFSQ0g6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IC4uLnByZXZTdGF0ZSwgaGlkZTogdHJ1ZSB9KTtcbiAgICBjYXNlIGF0LkZBS0VfRk9DVVNfU0VBUkNIOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyAuLi5wcmV2U3RhdGUsIGZha2VGb2N1czogdHJ1ZSB9KTtcbiAgICBjYXNlIGF0LlNIT1dfU0VBUkNIOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyAuLi5wcmV2U3RhdGUsIGhpZGU6IGZhbHNlLCBmYWtlRm9jdXM6IGZhbHNlIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbnRoaXMuSU5JVElBTF9TVEFURSA9IElOSVRJQUxfU1RBVEU7XG50aGlzLlRPUF9TSVRFU19ERUZBVUxUX1JPV1MgPSBUT1BfU0lURVNfREVGQVVMVF9ST1dTO1xudGhpcy5UT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1cgPSBUT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1c7XG5cbnRoaXMucmVkdWNlcnMgPSB7XG4gIFRvcFNpdGVzLFxuICBBcHAsXG4gIEFTUm91dGVyLFxuICBTbmlwcGV0cyxcbiAgUHJlZnMsXG4gIERpYWxvZyxcbiAgU2VjdGlvbnMsXG4gIFBvY2tldCxcbiAgRGlzY292ZXJ5U3RyZWFtLFxuICBTZWFyY2gsXG59O1xuXG5jb25zdCBFWFBPUlRFRF9TWU1CT0xTID0gW1xuICBcInJlZHVjZXJzXCIsXG4gIFwiSU5JVElBTF9TVEFURVwiLFxuICBcImluc2VydFBpbm5lZFwiLFxuICBcIlRPUF9TSVRFU19ERUZBVUxUX1JPV1NcIixcbiAgXCJUT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1dcIixcbl07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUcmFpbGhlYWQgfSBmcm9tIFwiLi4vVHJhaWxoZWFkL1RyYWlsaGVhZFwiO1xuaW1wb3J0IHsgUmV0dXJuVG9BTU8gfSBmcm9tIFwiLi4vUmV0dXJuVG9BTU8vUmV0dXJuVG9BTU9cIjtcbmltcG9ydCB7IEZ1bGxQYWdlSW50ZXJydXB0IH0gZnJvbSBcIi4uL0Z1bGxQYWdlSW50ZXJydXB0L0Z1bGxQYWdlSW50ZXJydXB0XCI7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25Qcm92aWRlciB9IGZyb20gXCJmbHVlbnQtcmVhY3RcIjtcbmltcG9ydCB7IGdlbmVyYXRlQnVuZGxlcyB9IGZyb20gXCIuLi8uLi9yaWNoLXRleHQtc3RyaW5nc1wiO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJydXB0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjYXJkcyxcbiAgICAgIG9uRGlzbWlzcyxcbiAgICAgIG9uTmV4dFNjZW5lLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5LFxuICAgICAgZXhlY3V0ZUFjdGlvbixcbiAgICAgIGRpc3BhdGNoLFxuICAgICAgZnhhRW5kcG9pbnQsXG4gICAgICBVVE1UZXJtLFxuICAgICAgZmxvd1BhcmFtcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHN3aXRjaCAobWVzc2FnZS50ZW1wbGF0ZSkge1xuICAgICAgY2FzZSBcInJldHVybl90b19hbW9fb3ZlcmxheVwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxMb2NhbGl6YXRpb25Qcm92aWRlclxuICAgICAgICAgICAgYnVuZGxlcz17Z2VuZXJhdGVCdW5kbGVzKHsgYW1vX2h0bWw6IG1lc3NhZ2UuY29udGVudC50ZXh0IH0pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSZXR1cm5Ub0FNT1xuICAgICAgICAgICAgICB7Li4ubWVzc2FnZX1cbiAgICAgICAgICAgICAgZG9jdW1lbnQ9e3RoaXMucHJvcHMuZG9jdW1lbnR9XG4gICAgICAgICAgICAgIFVJU3VyZmFjZT1cIk5FV1RBQl9PVkVSTEFZXCJcbiAgICAgICAgICAgICAgb25CbG9jaz17b25EaXNtaXNzfVxuICAgICAgICAgICAgICBvbkFjdGlvbj17ZXhlY3V0ZUFjdGlvbn1cbiAgICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3NlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xvY2FsaXphdGlvblByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcImZ1bGxfcGFnZV9pbnRlcnJ1cHRcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RnVsbFBhZ2VJbnRlcnJ1cHRcbiAgICAgICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgICAgICAgY2FyZHM9e2NhcmRzfVxuICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZX1cbiAgICAgICAgICAgIG9uQmxvY2s9e29uRGlzbWlzc31cbiAgICAgICAgICAgIG9uQWN0aW9uPXtleGVjdXRlQWN0aW9ufVxuICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e2Z4YUVuZHBvaW50fVxuICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3NlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgICAgVVRNVGVybT17VVRNVGVybX1cbiAgICAgICAgICAgIGZsb3dQYXJhbXM9e2Zsb3dQYXJhbXN9XG4gICAgICAgICAgICBvbkJsb2NrQnlJZD17dGhpcy5wcm9wcy5vbkJsb2NrQnlJZH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcInRyYWlsaGVhZFwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUcmFpbGhlYWRcbiAgICAgICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZX1cbiAgICAgICAgICAgIG9uTmV4dFNjZW5lPXtvbk5leHRTY2VuZX1cbiAgICAgICAgICAgIG9uQWN0aW9uPXtleGVjdXRlQWN0aW9ufVxuICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3NlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e2Z4YUVuZHBvaW50fVxuICAgICAgICAgICAgVVRNVGVybT17VVRNVGVybX1cbiAgICAgICAgICAgIGZsb3dQYXJhbXM9e2Zsb3dQYXJhbXN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttZXNzYWdlLnRlbXBsYXRlfSBpcyBub3QgYSB2YWxpZCBGaXJzdFJ1biBtZXNzYWdlYCk7XG4gICAgfVxuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcnJ1cHQgfSBmcm9tIFwiLi9JbnRlcnJ1cHRcIjtcbmltcG9ydCB7IFRyaXBsZXRzIH0gZnJvbSBcIi4vVHJpcGxldHNcIjtcbmltcG9ydCB7IEJBU0VfUEFSQU1TIH0gZnJvbSBcIi4vYWRkVXRtUGFyYW1zXCI7XG5cbi8vIE5vdGU6IHNob3VsZCBtYXRjaCB0aGUgdHJhbnNpdGlvbiB0aW1lIG9uIC50cmFpbGhlYWRDYXJkcyBpbiBfVHJhaWxoZWFkLnNjc3NcbmNvbnN0IFRSQU5TSVRJT05fTEVOR1RIID0gNTAwO1xuXG5leHBvcnQgY29uc3QgRkxVRU5UX0ZJTEVTID0gW1xuICBcImJyYW5kaW5nL2JyYW5kLmZ0bFwiLFxuICBcImJyb3dzZXIvYnJhbmRpbmcvYnJhbmRpbmdzLmZ0bFwiLFxuICBcImJyb3dzZXIvYnJhbmRpbmcvc3luYy1icmFuZC5mdGxcIixcbiAgXCJicm93c2VyL25ld3RhYi9vbmJvYXJkaW5nLmZ0bFwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IGhlbHBlcnMgPSB7XG4gIHNlbGVjdEludGVycnVwdEFuZFRyaXBsZXRzKG1lc3NhZ2UgPSB7fSwgaW50ZXJydXB0Q2xlYXJlZCkge1xuICAgIGNvbnN0IGhhc0ludGVycnVwdCA9XG4gICAgICBpbnRlcnJ1cHRDbGVhcmVkID09PSB0cnVlID8gZmFsc2UgOiBCb29sZWFuKG1lc3NhZ2UuY29udGVudCk7XG4gICAgY29uc3QgaGFzVHJpcGxldHMgPSBCb29sZWFuKG1lc3NhZ2UuYnVuZGxlICYmIG1lc3NhZ2UuYnVuZGxlLmxlbmd0aCk7XG4gICAgLy8gQWxsb3cgMSkgZmFsc3kgdG8gbm90IHJlbmRlciBhIGhlYWRlciAyKSBkZWZhdWx0IHdlbGNvbWUgMykgY3VzdG9tIGhlYWRlclxuXG4gICAgY29uc3QgdHJpcGxldHNIZWFkZXJJZCA9XG4gICAgICBtZXNzYWdlLnRyaXBsZXRzSGVhZGVySWQgPT09IHVuZGVmaW5lZFxuICAgICAgICA
/
IFwib25ib2FyZGluZy13ZWxjb21lLWhlYWRlclwiXG4gICAgICAgIDogbWVzc2FnZS50cmlwbGV0c0hlYWRlcklkO1xuICAgIGxldCBVVE1UZXJtID0gbWVzc2FnZS51dG1fdGVybSB8fCBcIlwiO1xuXG4gICAgVVRNVGVybSA9XG4gICAgICBtZXNzYWdlLnV0bV90ZXJtICYmIG1lc3NhZ2UudHJhaWxoZWFkVHJpcGxldFxuICAgICAgICA
/
IGAke21lc3NhZ2UudXRtX3Rlcm19LSR7bWVzc2FnZS50cmFpbGhlYWRUcmlwbGV0fWBcbiAgICAgICAgOiBVVE1UZXJtO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc1RyaXBsZXRzLFxuICAgICAgaGFzSW50ZXJydXB0LFxuICAgICAgaW50ZXJydXB0OiBoYXNJbnRlcnJ1cHQgPyBtZXNzYWdlIDogbnVsbCxcbiAgICAgIHRyaXBsZXRzOiBoYXNUcmlwbGV0cyA
/
IG1lc3NhZ2UuYnVuZGxlIDogbnVsbCxcbiAgICAgIHRyaXBsZXRzSGVhZGVySWQsXG4gICAgICBVVE1UZXJtLFxuICAgIH07XG4gIH0sXG5cbiAgYWRkRmx1ZW50KGRvY3VtZW50KSB7XG4gICAgRkxVRU5UX0ZJTEVTLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSk7XG4gICAgICBsaW5rLmhyZWYgPSBmaWxlO1xuICAgICAgbGluay5yZWwgPSBcImxvY2FsaXphdGlvblwiO1xuICAgIH0pO1xuICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIEZpcnN0UnVuIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5kaWRMb2FkRmxvd1BhcmFtcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHByZXZNZXNzYWdlOiB1bmRlZmluZWQsXG5cbiAgICAgIGhhc0ludGVycnVwdDogZmFsc2UsXG4gICAgICBoYXNUcmlwbGV0czogZmFsc2UsXG5cbiAgICAgIGludGVycnVwdDogdW5kZWZpbmVkLFxuICAgICAgdHJpcGxldHM6IHVuZGVmaW5lZCxcbiAgICAgIHRyaXBsZXRzSGVhZGVySWQ6IFwiXCIsXG5cbiAgICAgIGlzSW50ZXJydXB0VmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1RyaXBsZXRzQ29udGVudFZpc2libGU6IGZhbHNlLFxuXG4gICAgICBVVE1UZXJtOiBcIlwiLFxuXG4gICAgICBmbG93UGFyYW1zOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIHRoaXMuY2xvc2VJbnRlcnJ1cHQgPSB0aGlzLmNsb3NlSW50ZXJydXB0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVRyaXBsZXRzID0gdGhpcy5jbG9zZVRyaXBsZXRzLmJpbmQodGhpcyk7XG5cbiAgICBoZWxwZXJzLmFkZEZsdWVudCh0aGlzLnByb3BzLmRvY3VtZW50KTtcbiAgICAvLyBVcGRhdGUgdXRtIGNhbXBhaWduIHBhcmFtZXRlcnMgYnkgYXBwZW5kaW5nIGNoYW5uZWwgZm9yXG4gICAgLy8gZGlmZmVyZW50aWF0aW5nIGNhbXBhaWduIGluIGFtcGxpdHVkZVxuICAgIGlmICh0aGlzLnByb3BzLmFwcFVwZGF0ZUNoYW5uZWwpIHtcbiAgICAgIEJBU0VfUEFSQU1TLnV0bV9jYW1wYWlnbiArPSBgLSR7dGhpcy5wcm9wcy5hcHBVcGRhdGVDaGFubmVsfWA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIGludGVycnVwdENsZWFyZWQgfSA9IHByb3BzO1xuICAgIGNvbnN0IGNhcmRJZHMgPVxuICAgICAgbWVzc2FnZSAmJlxuICAgICAgbWVzc2FnZS5idW5kbGUgJiZcbiAgICAgIG1lc3NhZ2UuYnVuZGxlLm1hcChjYXJkID0
+
IGNhcmQuaWQpLmpvaW4oXCIsXCIpO1xuICAgIGlmIChcbiAgICAgIGludGVycnVwdENsZWFyZWQgIT09IHN0YXRlLnByZXZJbnRlcnJ1cHRDbGVhcmVkIHx8XG4gICAgICAobWVzc2FnZSAmJiBtZXNzYWdlLmlkICE9PSBzdGF0ZS5wcmV2TWVzc2FnZUlkKSB8fFxuICAgICAgY2FyZElkcyAhPT0gc3RhdGUucHJldkNhcmRJZHNcbiAgICApIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaGFzVHJpcGxldHMsXG4gICAgICAgIGhhc0ludGVycnVwdCxcbiAgICAgICAgaW50ZXJydXB0LFxuICAgICAgICB0cmlwbGV0cyxcbiAgICAgICAgdHJpcGxldHNIZWFkZXJJZCxcbiAgICAgICAgVVRNVGVybSxcbiAgICAgIH0gPSBoZWxwZXJzLnNlbGVjdEludGVycnVwdEFuZFRyaXBsZXRzKG1lc3NhZ2UsIGludGVycnVwdENsZWFyZWQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2TWVzc2FnZUlkOiBtZXNzYWdlLmlkLFxuICAgICAgICBwcmV2SW50ZXJydXB0Q2xlYXJlZDogaW50ZXJydXB0Q2xlYXJlZCxcbiAgICAgICAgcHJldkNhcmRJZHM6IGNhcmRJZHMsXG5cbiAgICAgICAgaGFzSW50ZXJydXB0LFxuICAgICAgICBoYXNUcmlwbGV0cyxcblxuICAgICAgICBpbnRlcnJ1cHQsXG4gICAgICAgIHRyaXBsZXRzLFxuICAgICAgICB0cmlwbGV0c0hlYWRlcklkLFxuXG4gICAgICAgIGlzSW50ZXJydXB0VmlzaWJsZTogaGFzSW50ZXJydXB0LFxuICAgICAgICBpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZTogaGFzVHJpcGxldHMsXG4gICAgICAgIGlzVHJpcGxldHNDb250ZW50VmlzaWJsZTogIShoYXNJbnRlcnJ1cHQgfHwgIWhhc1RyaXBsZXRzKSxcblxuICAgICAgICBVVE1UZXJtLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBmZXRjaEZsb3dQYXJhbXMoKSB7XG4gICAgY29uc3QgeyBmeGFFbmRwb2ludCwgZmV0Y2hGbG93UGFyYW1zIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgVVRNVGVybSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoZnhhRW5kcG9pbnQgJiYgVVRNVGVybSAmJiAhdGhpcy5kaWRMb2FkRmxvd1BhcmFtcykge1xuICAgICAgdGhpcy5kaWRMb2FkRmxvd1BhcmFtcyA9IHRydWU7XG4gICAgICBjb25zdCBmbG93UGFyYW1zID0gYXdhaXQgZmV0Y2hGbG93UGFyYW1zKHtcbiAgICAgICAgLi4uQkFTRV9QQVJBTVMsXG4gICAgICAgIGVudHJ5cG9pbnQ6IFwiYWN0aXZpdHktc3RyZWFtLWZpcnN0cnVuXCIsXG4gICAgICAgIGZvcm1fdHlwZTogXCJlbWFpbFwiLFxuICAgICAgICB1dG1fdGVybTogVVRNVGVybSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZsb3dQYXJhbXMgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlSGlkZU1haW4oKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhc0ludGVycnVwdCkge1xuICAgICAgLy8gV2UgbmVlZCB0byByZW1vdmUgaGlkZS1tYWluIHNpbmNlIHdlIHNob3VsZCBzaG93IGl0IHVuZGVybmVhdGggZXZlcnl0aGluZyB0aGF0IGhhcyByZW5kZXJlZFxuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLW1haW5cIiwgXCJ3ZWxjb21lXCIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuZmV0Y2hGbG93UGFyYW1zKCk7XG4gICAgdGhpcy5yZW1vdmVIaWRlTWFpbigpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIC8vIEluIGNhc2Ugd2UgZGlkbid0IGhhdmUgRlhBIGluZm8gaW1tZWRpYXRlbHksIHRyeSBhZ2FpbiB3aGVuIHdlIHJlY2VpdmUgaXQuXG4gICAgdGhpcy5mZXRjaEZsb3dQYXJhbXMoKTtcbiAgICB0aGlzLnJlbW92ZUhpZGVNYWluKCk7XG4gIH1cblxuICBjbG9zZUludGVycnVwdCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xuICAgICAgaXNJbnRlcnJ1cHRWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGlzVHJpcGxldHNDb250YWluZXJWaXNpYmxlOiBwcmV2U3RhdGUuaGFzVHJpcGxldHMsXG4gICAgICBpc1RyaXBsZXRzQ29udGVudFZpc2libGU6IHByZXZTdGF0ZS5oYXNUcmlwbGV0cyxcbiAgICB9KSk7XG4gIH1cblxuICBjbG9zZVRyaXBsZXRzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZTogZmFsc2UgfSk7XG5cbiAgICAvLyBDbG9zaW5nIHRyaXBsZXRzIHNob3VsZCBwcmV2ZW50IGFueSBmdXR1cmUgZXh0ZW5kZWQgdHJpcGxldHMgZnJvbSBzaG93aW5nIHVwXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLm9uQmxvY2tCeUlkKFwiRVhURU5ERURfVFJJUExFVFNfMVwiKTtcbiAgICB9LCBUUkFOU0lUSU9OX0xFTkdUSCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeSxcbiAgICAgIGZ4YUVuZHBvaW50LFxuICAgICAgZGlzcGF0Y2gsXG4gICAgICBleGVjdXRlQWN0aW9uLFxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHtcbiAgICAgIGludGVycnVwdCxcbiAgICAgIHRyaXBsZXRzLFxuICAgICAgdHJpcGxldHNIZWFkZXJJZCxcbiAgICAgIGlzSW50ZXJydXB0VmlzaWJsZSxcbiAgICAgIGlzVHJpcGxldHNDb250YWluZXJWaXNpYmxlLFxuICAgICAgaXNUcmlwbGV0c0NvbnRlbnRWaXNpYmxlLFxuICAgICAgaGFzVHJpcGxldHMsXG4gICAgICBVVE1UZXJtLFxuICAgICAgZmxvd1BhcmFtcyxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7aXNJbnRlcnJ1cHRWaXNpYmxlID8gKFxuICAgICAgICAgIDxJbnRlcnJ1cHRcbiAgICAgICAgICAgIGRvY3VtZW50PXtwcm9wcy5kb2N1bWVudH1cbiAgICAgICAgICAgIGNhcmRzPXt0cmlwbGV0c31cbiAgICAgICAgICAgIG1lc3NhZ2U9e2ludGVycnVwdH1cbiAgICAgICAgICAgIG9uTmV4dFNjZW5lPXt0aGlzLmNsb3NlSW50ZXJydXB0fVxuICAgICAgICAgICAgVVRNVGVybT17VVRNVGVybX1cbiAgICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXtzZW5kVXNlckFjdGlvblRlbGVtZXRyeX1cbiAgICAgICAgICAgIGV4ZWN1dGVBY3Rpb249e2V4ZWN1dGVBY3Rpb259XG4gICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICBmbG93UGFyYW1zPXtmbG93UGFyYW1zfVxuICAgICAgICAgICAgb25EaXNtaXNzPXt0aGlzLmNsb3NlSW50ZXJydXB0fVxuICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e2Z4YUVuZHBvaW50fVxuICAgICAgICAgICAgb25CbG9ja0J5SWQ9e3Byb3BzLm9uQmxvY2tCeUlkfVxuICAgICAgICAgIC8
+
XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7aGFzVHJpcGxldHMgPyAoXG4gICAgICAgICAgPFRyaXBsZXRzXG4gICAgICAgICAgICBkb2N1bWVudD17cHJvcHMuZG9jdW1lbnR9XG4gICAgICAgICAgICBjYXJkcz17dHJpcGxldHN9XG4gICAgICAgICAgICBoZWFkZXJJZD17dHJpcGxldHNIZWFkZXJJZH1cbiAgICAgICAgICAgIHNob3dDYXJkUGFuZWw9e2lzVHJpcGxldHNDb250YWluZXJWaXNpYmxlfVxuICAgICAgICAgICAgc2hvd0NvbnRlbnQ9e2lzVHJpcGxldHNDb250ZW50VmlzaWJsZX1cbiAgICAgICAgICAgIGhpZGVDb250YWluZXI9e3RoaXMuY2xvc2VUcmlwbGV0c31cbiAgICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXtzZW5kVXNlckFjdGlvblRlbGVtZXRyeX1cbiAgICAgICAgICAgIFVUTVRlcm09e2Ake1VUTVRlcm19LWNhcmRgfVxuICAgICAgICAgICAgZmxvd1BhcmFtcz17Zmxvd1BhcmFtc31cbiAgICAgICAgICAgIG9uQWN0aW9uPXtleGVjdXRlQWN0aW9ufVxuICAgICAgICAgICAgb25CbG9ja0J5SWQ9e3Byb3BzLm9uQmxvY2tCeUlkfVxuICAgICAgICAgIC8
+
XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC8
+
XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgVG9wU2l0ZUZvcm1JbnB1dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyB2YWxpZGF0aW9uRXJyb3I6IHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yIH07XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91bnQgPSB0aGlzLm9uTW91bnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xlYXJJY29uUHJlc3MgPSB0aGlzLm9uQ2xlYXJJY29uUHJlc3MuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG91bGRGb2N1cyAmJiAhdGhpcy5wcm9wcy5zaG91bGRGb2N1cykge1xuICAgICAgdGhpcy5pbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAobmV4dFByb3BzLnZhbGlkYXRpb25FcnJvciAmJiAhdGhpcy5wcm9wcy52YWxpZGF0aW9uRXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWxpZGF0aW9uRXJyb3I6IHRydWUgfSk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBjb21wb25lbnQgaXMgaW4gYW4gZXJyb3Igc3RhdGUgYnV0IHRoZSB2YWx1ZSB3YXMgY2xlYXJlZCBieSB0aGUgcGFyZW50XG4gICAgaWYgKHRoaXMuc3RhdGUudmFsaWRhdGlvbkVycm9yICYmICFuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWxpZGF0aW9uRXJyb3I6IGZhbHNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xlYXJJY29uUHJlc3MoZXZlbnQpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBpbnB1dCBpbiB0aGUgVVJMIG9yIGN1c3RvbSBpbWFnZSBVUkwgZmllbGRzLFxuICAgIC8vIGFuZCB3ZSBoaXQgJ2VudGVyJyB3aGlsZSB0YWJiZWQgb3ZlciB0aGUgY2xlYXIgaWNvbixcbiAgICAvLyB3ZSBzaG91bGQgZXhlY3V0ZSB0aGUgZnVuY3Rpb24gdG8gY2xlYXIgdGhlIGZpZWxkLlxuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgdGhpcy5wcm9wcy5vbkNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgb25DaGFuZ2UoZXYpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS52YWxpZGF0aW9uRXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWxpZGF0aW9uRXJyb3I6IGZhbHNlIH0pO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGV2KTtcbiAgfVxuXG4gIG9uTW91bnQoaW5wdXQpIHtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gIH1cblxuICByZW5kZXJMb2FkaW5nT3JDbG9zZUJ1dHRvbigpIHtcbiAgICBjb25zdCBzaG93Q2xlYXJCdXR0b24gPSB0aGlzLnByb3BzLnZhbHVlICYmIHRoaXMucHJvcHMub25DbGVhcjtcblxuICAgIGlmICh0aGlzLnByb3BzLmxvYWRpbmcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGluZy1jb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmctYW5pbWF0aW9uXCIgLz5cbiAgICAgICAgPC9kaXY
+
XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoc2hvd0NsZWFyQnV0dG9uKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLWNsZWFyLWlucHV0IGljb24tYnV0dG9uLXN0eWxlXCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xlYXJ9XG4gICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5vbkNsZWFySWNvblByZXNzfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0eXBlVXJsIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdmFsaWRhdGlvbkVycm9yIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsYWJlbD5cbiAgICAgICAgPHNwYW4gZGF0YS1sMTBuLWlkPXt0aGlzLnByb3BzLnRpdGxlSWR9IC8
+
XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2BmaWVsZCAke3R5cGVVcmwgPyBcInVybFwiIDogXCJcIn0ke1xuICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yID8gXCIgaW52YWxpZFwiIDogXCJcIlxuICAgICAgICAgIH1gfVxuICAgICAgICA
+
XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cbiAgICAgICAgICAgIHJlZj17dGhpcy5vbk1vdW50fVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJJZH1cbiAgICAgICAgICAgIC8vIFNldCBmb2N1cyBvbiBlcnJvciBpZiB0aGUgdXJsIGZpZWxkIGlzIHZhbGlkIG9yIHdoZW4gdGhlIGlucHV0IGlzIGZpcnN0IHJlbmRlcmVkIGFuZCBpcyBlbXB0eVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLWF1dG9mb2N1c1xuICAgICAgICAgICAgYXV0b0ZvY3VzPXt0aGlzLnByb3BzLnNob3VsZEZvY3VzfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMubG9hZGluZ31cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt0aGlzLnJlbmRlckxvYWRpbmdPckNsb3NlQnV0dG9uKCl9XG4gICAgICAgICAge3ZhbGlkYXRpb25FcnJvciAmJiAoXG4gICAgICAgICAgICA8YXNpZGVcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZXJyb3ItdG9vbHRpcFwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17dGhpcy5wcm9wcy5lcnJvck1lc3NhZ2VJZH1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY
+

+
XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGN1c3RvbVNjcmVlbnNob3RVcmwgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmVxdWVzdEZhaWxlZCA9IHRoaXMucHJvcHMucHJldmlld1Jlc3BvbnNlID09PSBcIlwiO1xuICAgIC8vIEZvciBVSSBwdXJwb3NlcywgZWRpdGluZyB3aXRob3V0IGFuIGV4aXN0aW5nIGxpbmsgaXMgXCJhZGRcIlxuICAgIGNvbnN0IHNob3dBc0FkZCA9ICF0aGlzLnByb3BzLnNpdGU7XG4gICAgY29uc3QgcHJldmlvdXMgPVxuICAgICAgKHRoaXMucHJvcHMuc2l0ZSAmJiB0aGlzLnByb3BzLnNpdGUuY3VzdG9tU2NyZWVuc2hvdFVSTCkgfHwgXCJcIjtcbiAgICBjb25zdCBjaGFuZ2VkID1cbiAgICAgIGN1c3RvbVNjcmVlbnNob3RVcmwgJiYgdGhpcy5jbGVhblVybChjdXN0b21TY3JlZW5zaG90VXJsKSAhPT0gcHJldmlvdXM7XG4gICAgLy8gUHJldmlldyBtb2RlIGlmIGNoYW5nZXMgd2VyZSBtYWRlIHRvIHRoZSBjdXN0b20gc2NyZWVuc2hvdCBVUkwgYW5kIG5vIHByZXZpZXcgd2FzIHJlY2VpdmVkIHlldFxuICAgIC8vIG9yIHRoZSByZXF1ZXN0IGZhaWxlZFxuICAgIGNvbnN0IHByZXZpZXdNb2RlID0gY2hhbmdlZCAmJiAhdGhpcy5wcm9wcy5wcmV2aWV3UmVzcG9uc2U7XG4gICAgY29uc3QgcHJldmlld0xpbmsgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzLnNpdGUpO1xuICAgIGlmICh0aGlzLnByb3BzLnByZXZpZXdSZXNwb25zZSkge1xuICAgICAgcHJldmlld0xpbmsuc2NyZWVuc2hvdCA9IHRoaXMucHJvcHMucHJldmlld1Jlc3BvbnNlO1xuICAgICAgcHJldmlld0xpbmsuY3VzdG9tU2NyZWVuc2hvdFVSTCA9IHRoaXMucHJvcHMucHJldmlld1VybDtcbiAgICB9XG4gICAgLy8gSGFuZGxlcyB0aGUgZm9ybSBzdWJtaXQgc28gYW4gZW50ZXIgcHJlc3MgcGVyZm9ybXMgdGhlIGNvcnJlY3QgYWN0aW9uXG4gICAgY29uc3Qgb25TdWJtaXQgPSBwcmV2aWV3TW9kZVxuICAgICAgPyB0aGlzLm9uUHJldmlld0J1dHRvbkNsaWNrXG4gICAgICA6IHRoaXMub25Eb25lQnV0dG9uQ2xpY2s7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInRvcHNpdGUtZm9ybVwiIG9uU3VibWl0PXtvblN1Ym1pdH0
+
XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1pbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICA8aDNcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlY3Rpb24tdGl0bGUgZ3JleS10aXRsZVwiXG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9e1xuICAgICAgICAgICAgICBzaG93QXNBZGRcbiAgICAgICAgICAgICAgICA
/
IFwibmV3dGFiLXRvcHNpdGVzLWFkZC10b3BzaXRlcy1oZWFkZXJcIlxuICAgICAgICAgICAgICAgIDogXCJuZXd0YWItdG9wc2l0ZXMtZWRpdC10b3BzaXRlcy1oZWFkZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8
+
XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZHMtYW5kLXByZXZpZXdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS13cmFwcGVyXCI
+
XG4gICAgICAgICAgICAgIDxUb3BTaXRlRm9ybUlucHV0XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25MYWJlbENoYW5nZX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5sYWJlbH1cbiAgICAgICAgICAgICAgICB0aXRsZUlkPVwibmV3dGFiLXRvcHNpdGVzLXRpdGxlLWxhYmVsXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcklkPVwibmV3dGFiLXRvcHNpdGVzLXRpdGxlLWlucHV0XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRvcFNpdGVGb3JtSW5wdXRcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblVybENoYW5nZX1cbiAgICAgICAgICAgICAgICBzaG91bGRGb2N1cz17XG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZhbGlkYXRpb25FcnJvciAmJlxuICAgICAgICAgICAgICAgICAgIXRoaXMudmFsaWRhdGVVcmwodGhpcy5zdGF0ZS51cmwpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnVybH1cbiAgICAgICAgICAgICAgICBvbkNsZWFyPXt0aGlzLm9uQ2xlYXJVcmxDbGlja31cbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3I9e1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWxpZGF0aW9uRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICF0aGlzLnZhbGlkYXRlVXJsKHRoaXMuc3RhdGUudXJsKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aXRsZUlkPVwibmV3dGFiLXRvcHNpdGVzLXVybC1sYWJlbFwiXG4gICAgICAgICAgICAgICAgdHlwZVVybD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcklkPVwibmV3dGFiLXRvcHNpdGVzLXVybC1pbnB1dFwiXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlSWQ9XCJuZXd0YWItdG9wc2l0ZXMtdXJsLXZhbGlkYXRpb25cIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7dGhpcy5fcmVuZGVyQ3VzdG9tU2NyZWVuc2hvdElucHV0KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUb3BTaXRlTGlua1xuICAgICAgICAgICAgICBsaW5rPXtwcmV2aWV3TGlua31cbiAgICAgICAgICAgICAgZGVmYXVsdFN0eWxlPXtyZXF1ZXN0RmFpbGVkfVxuICAgICAgICAgICAgICB0aXRsZT17dGhpcy5zdGF0ZS5sYWJlbH1cbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgPC9kaXY
+
XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhY3Rpb25zXCI
+
XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FuY2VsXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNhbmNlbEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXRvcHNpdGVzLWNhbmNlbC1idXR0b25cIlxuICAgICAgICAgIC8
+
XG4gICAgICAgICAge3ByZXZpZXdNb2RlID8gKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkb25lIHByZXZpZXdcIlxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXRvcHNpdGVzLXByZXZpZXctYnV0dG9uXCJcbiAgICAgICAgICAgIC8
+
XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZG9uZVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e1xuICAgICAgICAgICAgICAgIHNob3dBc0FkZFxuICAgICAgICAgICAgICAgICAgPyBcIm5ld3RhYi10b3BzaXRlcy1hZGQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIDogXCJuZXd0YWItdG9wc2l0ZXMtc2F2ZS1idXR0b25cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59XG5cblRvcFNpdGVGb3JtLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l0ZTogbnVsbCxcbiAgaW5kZXg6IC0xLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0
=
