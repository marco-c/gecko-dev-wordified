/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
const
{
UIState
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
UIState
.
jsm
"
)
;
const
{
sinon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
syncedTabsData1
=
[
{
id
:
1
type
:
"
client
"
name
:
"
My
desktop
"
clientType
:
"
desktop
"
lastModified
:
1655730486760
tabs
:
[
{
type
:
"
tab
"
title
:
"
Sandboxes
-
Sinon
.
JS
"
url
:
"
https
:
/
/
sinonjs
.
org
/
releases
/
latest
/
sandbox
/
"
icon
:
"
https
:
/
/
sinonjs
.
org
/
assets
/
images
/
favicon
.
png
"
lastUsed
:
1655391592
/
/
Thu
Jun
16
2022
14
:
59
:
52
GMT
+
0000
}
{
type
:
"
tab
"
title
:
"
Internet
for
people
not
profits
-
Mozilla
"
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
"
icon
:
"
https
:
/
/
www
.
mozilla
.
org
/
media
/
img
/
favicons
/
mozilla
/
favicon
.
d25d81d39065
.
ico
"
lastUsed
:
1655730486
/
/
Mon
Jun
20
2022
13
:
08
:
06
GMT
+
0000
}
]
}
{
id
:
2
type
:
"
client
"
name
:
"
My
iphone
"
clientType
:
"
mobile
"
lastModified
:
1655727832930
tabs
:
[
{
type
:
"
tab
"
title
:
"
The
Guardian
"
url
:
"
https
:
/
/
www
.
theguardian
.
com
/
"
icon
:
"
page
-
icon
:
https
:
/
/
www
.
theguardian
.
com
/
"
lastUsed
:
1655291890
/
/
Wed
Jun
15
2022
11
:
18
:
10
GMT
+
0000
}
{
type
:
"
tab
"
title
:
"
The
Times
"
url
:
"
https
:
/
/
www
.
thetimes
.
co
.
uk
/
"
icon
:
"
page
-
icon
:
https
:
/
/
www
.
thetimes
.
co
.
uk
/
"
lastUsed
:
1655727485
/
/
Mon
Jun
20
2022
12
:
18
:
05
GMT
+
0000
}
]
}
]
;
async
function
clearAllParentTelemetryEvents
(
)
{
/
/
Clear
everything
.
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
true
)
.
parent
;
return
!
events
|
|
!
events
.
length
;
}
)
;
}
/
*
eslint
-
disable
no
-
unused
-
vars
*
/
function
testVisibility
(
browser
expected
)
{
const
{
document
}
=
browser
.
contentWindow
;
for
(
let
[
selector
shouldBeVisible
]
of
Object
.
entries
(
expected
.
expectedVisible
)
)
{
const
elem
=
document
.
querySelector
(
selector
)
;
if
(
shouldBeVisible
)
{
ok
(
BrowserTestUtils
.
is_visible
(
elem
)
Expected
{
selector
}
to
be
visible
)
;
}
else
{
ok
(
BrowserTestUtils
.
is_hidden
(
elem
)
Expected
{
selector
}
to
be
hidden
)
;
}
}
}
async
function
waitForElementVisible
(
browser
selector
isVisible
=
true
)
{
const
{
document
}
=
browser
.
contentWindow
;
const
elem
=
document
.
querySelector
(
selector
)
;
if
(
!
isVisible
&
&
!
elem
)
{
return
;
}
ok
(
elem
Got
element
with
selector
:
{
selector
}
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
elem
{
attributeFilter
:
[
"
hidden
"
]
}
(
)
=
>
{
return
isVisible
?
BrowserTestUtils
.
is_visible
(
elem
)
:
BrowserTestUtils
.
is_hidden
(
elem
)
;
}
)
;
}
function
assertFirefoxViewTab
(
w
)
{
ok
(
w
.
FirefoxViewHandler
.
tab
"
Firefox
View
tab
exists
"
)
;
ok
(
w
.
FirefoxViewHandler
.
tab
?
.
hidden
"
Firefox
View
tab
is
hidden
"
)
;
is
(
w
.
gBrowser
.
tabs
.
indexOf
(
w
.
FirefoxViewHandler
.
tab
)
0
"
Firefox
View
tab
is
the
first
tab
"
)
;
is
(
w
.
gBrowser
.
visibleTabs
.
indexOf
(
w
.
FirefoxViewHandler
.
tab
)
-
1
"
Firefox
View
tab
is
not
in
the
list
of
visible
tabs
"
)
;
}
async
function
openFirefoxViewTab
(
w
)
{
ok
(
!
w
.
FirefoxViewHandler
.
tab
"
Firefox
View
tab
doesn
'
t
exist
prior
to
clicking
the
button
"
)
;
info
(
"
Clicking
the
Firefox
View
button
"
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
w
.
document
.
getElementById
(
"
firefox
-
view
-
button
"
)
{
type
:
"
mousedown
"
}
w
)
;
assertFirefoxViewTab
(
w
)
;
is
(
w
.
gBrowser
.
tabContainer
.
selectedIndex
0
"
Firefox
View
tab
is
selected
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
w
.
FirefoxViewHandler
.
tab
.
linkedBrowser
)
;
return
w
.
FirefoxViewHandler
.
tab
;
}
function
closeFirefoxViewTab
(
w
)
{
w
.
gBrowser
.
removeTab
(
w
.
FirefoxViewHandler
.
tab
)
;
ok
(
!
w
.
FirefoxViewHandler
.
tab
"
Reference
to
Firefox
View
tab
got
removed
when
closing
the
tab
"
)
;
}
async
function
withFirefoxView
(
{
resetFlowManager
=
true
win
=
null
}
taskFn
)
{
let
shouldCloseWin
=
false
;
if
(
!
win
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
shouldCloseWin
=
true
;
}
if
(
resetFlowManager
)
{
const
{
TabsSetupFlowManager
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
firefox
-
view
-
tabs
-
setup
-
manager
.
sys
.
mjs
"
)
;
/
/
reset
internal
state
so
we
aren
'
t
reacting
to
whatever
state
the
last
invocation
left
behind
TabsSetupFlowManager
.
resetInternalState
(
)
;
}
let
tab
=
await
openFirefoxViewTab
(
win
)
;
let
originalWindow
=
tab
.
ownerGlobal
;
let
result
=
await
taskFn
(
tab
.
linkedBrowser
)
;
let
finalWindow
=
tab
.
ownerGlobal
;
if
(
originalWindow
=
=
finalWindow
&
&
!
tab
.
closing
&
&
tab
.
linkedBrowser
)
{
/
/
taskFn
may
resolve
within
a
tick
after
opening
a
new
tab
.
/
/
We
shouldn
'
t
remove
the
newly
opened
tab
in
the
same
tick
.
/
/
Wait
for
the
next
tick
here
.
await
TestUtils
.
waitForTick
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
else
{
Services
.
console
.
logStringMessage
(
"
withFirefoxView
:
Tab
was
already
closed
before
"
+
"
removeTab
would
have
been
called
"
)
;
}
if
(
shouldCloseWin
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
return
result
;
}
function
setupRecentDeviceListMocks
(
)
{
const
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
stub
(
fxAccounts
.
device
"
recentDeviceList
"
)
.
get
(
(
)
=
>
[
{
id
:
1
name
:
"
My
desktop
"
isCurrentDevice
:
true
type
:
"
desktop
"
}
{
id
:
2
name
:
"
My
iphone
"
type
:
"
mobile
"
}
]
)
;
sandbox
.
stub
(
UIState
"
get
"
)
.
returns
(
{
status
:
UIState
.
STATUS_SIGNED_IN
syncEnabled
:
true
}
)
;
return
sandbox
;
}
function
getMockTabData
(
clients
)
{
let
tabs
=
[
]
;
for
(
let
client
of
clients
)
{
for
(
let
tab
of
client
.
tabs
)
{
tab
.
device
=
client
.
name
;
tab
.
deviceType
=
client
.
clientType
;
}
tabs
=
[
.
.
.
tabs
.
.
.
client
.
tabs
.
reverse
(
)
]
;
}
tabs
=
tabs
.
sort
(
(
a
b
)
=
>
b
.
lastUsed
-
a
.
lastUsed
)
.
slice
(
0
3
)
;
return
tabs
;
}
async
function
setupListState
(
browser
)
{
/
/
Skip
the
synced
tabs
sign
up
flow
to
get
to
a
loaded
list
state
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
services
.
sync
.
engine
.
tabs
"
true
]
]
}
)
;
Services
.
obs
.
notifyObservers
(
null
UIState
.
ON_UPDATE
)
;
const
recentFetchTime
=
Math
.
floor
(
Date
.
now
(
)
/
1000
)
;
info
(
"
updating
lastFetch
:
"
+
recentFetchTime
)
;
Services
.
prefs
.
setIntPref
(
"
services
.
sync
.
lastTabFetch
"
recentFetchTime
)
;
await
waitForElementVisible
(
browser
"
#
tabpickup
-
steps
"
false
)
;
await
waitForElementVisible
(
browser
"
#
tabpickup
-
tabs
-
container
"
true
)
;
const
tabsContainer
=
browser
.
contentWindow
.
document
.
querySelector
(
"
#
tabpickup
-
tabs
-
container
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
tabsContainer
{
attributeFilter
:
[
"
class
"
]
attributes
:
true
}
(
)
=
>
{
return
!
tabsContainer
.
classList
.
contains
(
"
loading
"
)
;
}
)
;
}
